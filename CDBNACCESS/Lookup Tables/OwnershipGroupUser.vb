Namespace Access

  Public Class OwnershipGroupUser
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum OwnershipGroupUserFields
      AllFields = 0
      OwnershipGroup
      Logname
      OwnershipAccessLevel
      ValidFrom
      ValidTo
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("ownership_group")
        .Add("logname")
        .Add("ownership_access_level")
        .Add("valid_from", CDBField.FieldTypes.cftDate)
        .Add("valid_to", CDBField.FieldTypes.cftDate)

        .Item(OwnershipGroupUserFields.OwnershipGroup).PrimaryKey = True

        .Item(OwnershipGroupUserFields.Logname).PrimaryKey = True

        .Item(OwnershipGroupUserFields.ValidFrom).PrimaryKey = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ogu"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "ownership_group_users"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property OwnershipGroup() As String
      Get
        Return mvClassFields(OwnershipGroupUserFields.OwnershipGroup).Value
      End Get
    End Property
    Public ReadOnly Property Logname() As String
      Get
        Return mvClassFields(OwnershipGroupUserFields.Logname).Value
      End Get
    End Property
    Public ReadOnly Property OwnershipAccessLevel() As String
      Get
        Return mvClassFields(OwnershipGroupUserFields.OwnershipAccessLevel).Value
      End Get
    End Property
    Public Property ValidFrom() As String
      Get
        Return mvClassFields(OwnershipGroupUserFields.ValidFrom).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OwnershipGroupUserFields.ValidFrom).Value = Value
      End Set
    End Property
    Public Property ValidTo() As String
      Get
        Return mvClassFields(OwnershipGroupUserFields.ValidTo).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OwnershipGroupUserFields.ValidTo).Value = Value
      End Set
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(OwnershipGroupUserFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(OwnershipGroupUserFields.AmendedOn).Value
      End Get
    End Property
#End Region

    Public Sub InitFromDepartment(ByVal pCode As String, ByVal pLogname As String, Optional ByVal pAccessLevel As CDBEnvironment.OwnershipAccessLevelTypes = CDBEnvironment.OwnershipAccessLevelTypes.oaltWrite)
      mvClassFields(OwnershipGroupUserFields.OwnershipGroup).Value = pCode
      mvClassFields(OwnershipGroupUserFields.Logname).Value = pLogname
      mvClassFields(OwnershipGroupUserFields.OwnershipAccessLevel).Value = CDBEnvironment.GetOwnershipAccessLevelCode(pAccessLevel)
      mvClassFields(OwnershipGroupUserFields.ValidFrom).Value = TodaysDate()
    End Sub

    Public Sub SaveUpdate()
      Dim vWhereFields As New CDBFields
      Dim vUpdateFields As New CDBFields
      Dim vRecordSet As CDBRecordSet
      Dim vOGU As New OwnershipGroupUser(mvEnv)
      Dim vOGU2 As New OwnershipGroupUser(mvEnv)
      Dim vAddNext As Boolean
      Dim vWhereCheck As New CDBFields
      Dim vCount As Long

      'If we are setting the access level to anything other than Write
      'Then we need to check if the user is a principal user of any contacts
      If OwnershipAccessLevel <> "W" Then
        vWhereCheck.Clear()
        vWhereCheck.Add("principal_user", CDBField.FieldTypes.cftCharacter, Logname)
        vWhereCheck.Add("pu.contact_number", CDBField.FieldTypes.cftLong, "c.contact_number")
        vWhereCheck.Add("ownership_group", CDBField.FieldTypes.cftCharacter, OwnershipGroup)
        vCount = mvEnv.Connection.GetCount("principal_users pu, contacts c", vWhereCheck)
        'If vCount > 0 Then RaiseError(daePrincipalUser, Format$(vCount), "Contact")
        vWhereCheck.Clear()
        vWhereCheck.Add("principal_user", CDBField.FieldTypes.cftCharacter, Logname)
        vWhereCheck.Add("pu.contact_number", CDBField.FieldTypes.cftLong, "o.organisation_number")
        vWhereCheck.Add("ownership_group", CDBField.FieldTypes.cftCharacter, OwnershipGroup)
        vCount = mvEnv.Connection.GetCount("principal_users pu, organisations o", vWhereCheck)
      End If

      'Find any overlapping records
      'eg. (valid from < the new valid to) or new valid to is null
      'and whose valid to is null or whose valid to >= the new valid from
      vWhereFields.Add("ownership_group", CDBField.FieldTypes.cftCharacter, OwnershipGroup)
      vWhereFields.Add("logname", CDBField.FieldTypes.cftCharacter, Logname)
      If ValidTo.Length > 0 Then vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, ValidTo, CDBField.FieldWhereOperators.fwoLessThan)
      vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, ValidFrom, CDBField.FieldWhereOperators.fwoNullOrGreaterThanEqual)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT " & GetRecordSetFields() & " FROM ownership_group_users ogu WHERE " & mvEnv.Connection.WhereClause(vWhereFields) & " ORDER BY valid_from")
      While vRecordSet.Fetch()
        vOGU.InitFromRecordSet(vRecordSet)
        If CDate(vOGU.ValidFrom) < CDate(ValidFrom) Then
          'This one starts prior to the new one and must be terminated
          'Check if it extended past when the new one will terminate
          vAddNext = False
          If Len(ValidTo) > 0 Then
            If Len(vOGU.ValidTo) = 0 Then
              vAddNext = True
            Else
              If DateDiff("d", CDate(ValidTo), CDate(vOGU.ValidTo)) > 0 Then vAddNext = True
            End If
          End If
          If vAddNext Then
            vOGU2.CopyValues(vOGU)
          End If
          vOGU.ValidTo = CDate(ValidFrom).AddDays(-1).ToString
          vOGU.Save()               'Terminate the existing record
          If vAddNext Then
            vOGU2.ValidFrom = CDate(ValidTo).AddDays(1).ToString
            vOGU2.Save()
          End If
        Else
          'This one starts after the new one and so it's start date must be set to after the new one
          If Len(vOGU.ValidTo) > 0 Then
            'if there is an end date on it check to see if it would now start after it finishes!
            If Len(ValidTo) = 0 Then
              vOGU.Delete()               'The new one is forever so delete the old one
            Else
              If DateAdd("d", 1, CDate(ValidTo)) > CDate(vOGU.ValidTo) Then
                vOGU.Delete()     'If so then delete it
              Else
                vOGU.ValidFrom = CDate(ValidTo).AddDays(1).ToString
                vOGU.Save()
              End If
            End If
          Else
            'There is no end date on this one so see if we have an end date on the new one
            If Len(ValidTo) > 0 Then
              'If so then move the start date of this one to after the new one
              vOGU.ValidFrom = CDate(ValidTo).AddDays(1).ToString
              vOGU.Save()
            Else
              'No end date on either?
              vOGU.Delete()
            End If
          End If
        End If
      End While
      vRecordSet.CloseRecordSet()
      Save() 'Save the new record
      'If valid to is set then deal with department defaults
    End Sub
  End Class
End Namespace
