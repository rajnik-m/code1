Namespace Access

  Public Class Mailing
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum MailingFields
      AllFields = 0
      Mailing
      MailingDesc
      Department
      HistoryOnly
      Marketing
      Direction
      MailingTemplate
      Notes
      MailingDue
      BulkMailerMailing
      BulkMailerStatisticsDate
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("mailing")
        .Add("mailing_desc")
        .Add("department")
        .Add("history_only")
        .Add("marketing")
        .Add("direction")
        .Add("mailing_template")
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("mailing_due", CDBField.FieldTypes.cftDate)
        .Add("bulk_mailer_mailing", CDBField.FieldTypes.cftInteger)
        .Add("bulk_mailer_statistics_date", CDBField.FieldTypes.cftTime)

        .Item(MailingFields.Mailing).PrimaryKey = True

        .Item(MailingFields.BulkMailerMailing).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbBulkMailer)
        .Item(MailingFields.BulkMailerStatisticsDate).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbBulkMailer)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "m"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "mailings"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property MailingCode() As String
      Get
        Return mvClassFields(MailingFields.Mailing).Value
      End Get
    End Property
    Public ReadOnly Property MailingDesc() As String
      Get
        Return mvClassFields(MailingFields.MailingDesc).Value
      End Get
    End Property
    Public ReadOnly Property Department() As String
      Get
        Return mvClassFields(MailingFields.Department).Value
      End Get
    End Property
    Public ReadOnly Property HistoryOnly() As String
      Get
        Return mvClassFields(MailingFields.HistoryOnly).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(MailingFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(MailingFields.AmendedOn).Value
      End Get
    End Property
    Public Property Marketing() As Boolean
      Get
        Return mvClassFields(MailingFields.Marketing).Bool
      End Get
      Private Set(value As Boolean)
        ValidateMarketing(value)
        mvClassFields(MailingFields.Marketing).Bool = value
      End Set
    End Property
    Public ReadOnly Property Direction() As String
      Get
        Return mvClassFields(MailingFields.Direction).Value
      End Get
    End Property
    Public ReadOnly Property MailingTemplate() As String
      Get
        Return mvClassFields(MailingFields.MailingTemplate).Value
      End Get
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(MailingFields.Notes).Value
      End Get
    End Property
    Public ReadOnly Property MailingDue() As String
      Get
        Return mvClassFields(MailingFields.MailingDue).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"
    Protected Overrides Sub SetDefaults()
      With mvClassFields
        .Item(MailingFields.Department).Value = mvEnv.User.Department
        .Item(MailingFields.Direction).Value = "O"
        .Item(MailingFields.HistoryOnly).Bool = False
        .Item(MailingFields.Marketing).Bool = False
        .Item(MailingFields.BulkMailerStatisticsDate).Value = Date.MinValue.ToString(CAREDateTimeFormat)
      End With
    End Sub

    Protected Overrides Sub PreValidateCreateParameters(pParameterList As CDBParameters)
      MyBase.PreValidateCreateParameters(pParameterList)
      If pParameterList.Exists("Marketing") Then
        ValidateMarketing(pParameterList("Marketing").Bool)
      End If
    End Sub

    Protected Overrides Sub PreValidateUpdateParameters(pParameterList As CDBParameters)
      MyBase.PreValidateUpdateParameters(pParameterList)
      If pParameterList.Exists("Marketing") Then
        ValidateMarketing(pParameterList("Marketing").Bool)
      End If
    End Sub

    Public Overrides Sub PreValidateParameterList(pType As CARERecord.MaintenanceTypes, pParameterList As CDBParameters)
      MyBase.PreValidateParameterList(pType, pParameterList)
      If pParameterList.Exists("Marketing") Then
        ValidateMarketing(pParameterList("Marketing").Bool)
      End If
    End Sub

    Private Sub ValidateMarketing(ByVal pMarketing As Boolean)
      If pMarketing = True Then
        If Me.Existing = False Then
          'Marketing flag isn't allowed for a new Mailing
          RaiseError(DataAccessErrors.daeMailingMarketingFlagInvalid)
        Else
          'only allow marketing = 'Y' when this mailing is linked a Campaign Segment
          Dim vSegment As New Segment()
          vSegment.InitFromMailing(mvEnv, MailingCode)
          If vSegment.Existing = False Then
            RaiseError(DataAccessErrors.daeMailingMarketingFlagInvalid)
          End If
        End If
      End If
    End Sub

    Public Property BulkMailerMailing() As Integer
      Get
        Return mvClassFields(MailingFields.BulkMailerMailing).IntegerValue
      End Get
      Set(value As Integer)
        Dim vParameters As New CDBParameters
        mvClassFields(MailingFields.BulkMailerMailing).IntegerValue = value
      End Set
    End Property

    Public Property BulkMailerStatisticsDate() As String
      Get
        Return mvClassFields(MailingFields.BulkMailerStatisticsDate).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(MailingFields.BulkMailerStatisticsDate).Value = value
      End Set
    End Property

    Public Shared Function GetInstanceByBulkMailerId(ByRef pEnv As CDBEnvironment, ByRef pMailingId As Integer) As Mailing
      Dim vResult As New Mailing(pEnv)
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("bulk_mailer_mailing", pMailingId)
      vResult.InitWithPrimaryKey(vWhereFields)
      Return If(vResult.Existing, vResult, Nothing)
    End Function

#End Region

  End Class
End Namespace
