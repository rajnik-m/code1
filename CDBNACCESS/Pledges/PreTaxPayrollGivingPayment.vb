Namespace Access

  Public Class PreTaxPayrollGivingPayment
    Inherits CARERecord

    Private Const ANON_DONOR As String = "ANONYMOUS"

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum PaymentFields
      AllFields = 0
      DonorName
      DonorId
      AddressLine1
      AddressLine2
      AddressLine3
      AddressLine4
      AddressLine5
      Postcode
      EmployerName
      SourceCode
      PfoCode
      NewDonor
      EmployeeDonation
      EmployerDonation
      GovPayment
      AdminFee
      NoOfDonations
      AgencyNumber
      ContactNumber
      OrganisationNumber
      AddressNumber
      PledgeNumber
      Title
      Initials
      Forenames
      Surname
      TransactionDate
      Reconciled
      PostBatchToCb
      PaymentNumber
      DonorEmailAddress
      DonorTelephoneNumber
      NetDonation
      OtherMatchedDonation
      TotalDonationToCharity
      CharityDonorReference
      UnreconciledReason
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("donor_name")
        .Add("donor_id", CDBField.FieldTypes.cftInteger)
        .Add("address_line_1")
        .Add("address_line_2")
        .Add("address_line_3")
        .Add("address_line_4")
        .Add("address_line_5")
        .Add("postcode")
        .Add("employer_name")
        .Add("source_code")
        .Add("pfo_code")
        .Add("new_donor")
        .Add("employee_donation", CDBField.FieldTypes.cftNumeric)
        .Add("employer_donation", CDBField.FieldTypes.cftNumeric)
        .Add("gov_payment", CDBField.FieldTypes.cftNumeric)
        .Add("admin_fee", CDBField.FieldTypes.cftNumeric)
        .Add("no_of_donations", CDBField.FieldTypes.cftInteger)
        .Add("agency_number", CDBField.FieldTypes.cftInteger)
        .Add("contact_number", CDBField.FieldTypes.cftInteger)
        .Add("organisation_number", CDBField.FieldTypes.cftInteger)
        .Add("address_number", CDBField.FieldTypes.cftInteger)
        .Add("gaye_pledge_number", CDBField.FieldTypes.cftInteger)
        .Add("title")
        .Add("initials")
        .Add("forenames")
        .Add("surname")
        .Add("transaction_date", CDBField.FieldTypes.cftDate)
        .Add("reconciled")
        .Add("post_batch_to_cb")
        .Add("gaye_payment_number", CDBField.FieldTypes.cftInteger)
        .Add("donor_email_address")
        .Add("donor_telephone_number")
        .Add("net_donation", CDBField.FieldTypes.cftNumeric)
        .Add("other_matched_donation", CDBField.FieldTypes.cftNumeric)
        .Add("total_donation_to_charity", CDBField.FieldTypes.cftNumeric)
        .Add("charity_donor_reference")
        .Add("pg_unreconciled_reason")
        .Item(PaymentFields.Title).PrefixRequired = True

        .Item(PaymentFields.PaymentNumber).PrimaryKey = True
        .Item(PaymentFields.PaymentNumber).PrefixRequired = True

        .Item(PaymentFields.UnreconciledReason).PrefixRequired = True

        .SetControlNumberField(PaymentFields.PaymentNumber, "GN")
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return False
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "gp"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "gaye_payments"
      End Get
    End Property

    Protected Overrides Sub PreValidateCreateParameters(pParameterList As CDBParameters)
      MyBase.PreValidateCreateParameters(pParameterList)

      If pParameterList IsNot Nothing Then
        For Each vParam As CDBParameter In pParameterList
          If vParam.DataType = CDBField.FieldTypes.cftNumeric Then
            If vParam.Value.Length > 0 AndAlso IsNumeric(vParam.Value) = False Then
              'Check for numeric values
              RaiseError(DataAccessErrors.daePayrollGivingFileValueInvalid, vParam.Name, vParam.Value)
            End If
          End If
        Next

      End If
    End Sub

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property DonorName() As String
      Get
        Return mvClassFields(PaymentFields.DonorName).Value
      End Get
    End Property
    Public ReadOnly Property DonorId() As Integer
      Get
        Return mvClassFields(PaymentFields.DonorId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AddressLine1() As String
      Get
        Return mvClassFields(PaymentFields.AddressLine1).Value
      End Get
    End Property
    Public ReadOnly Property AddressLine2() As String
      Get
        Return mvClassFields(PaymentFields.AddressLine2).Value
      End Get
    End Property
    Public ReadOnly Property AddressLine3() As String
      Get
        Return mvClassFields(PaymentFields.AddressLine3).Value
      End Get
    End Property
    Public ReadOnly Property AddressLine4() As String
      Get
        Return mvClassFields(PaymentFields.AddressLine4).Value
      End Get
    End Property
    Public ReadOnly Property AddressLine5() As String
      Get
        Return mvClassFields(PaymentFields.AddressLine5).Value
      End Get
    End Property
    Public ReadOnly Property Postcode() As String
      Get
        Return mvClassFields(PaymentFields.Postcode).Value
      End Get
    End Property
    Public ReadOnly Property EmployerName() As String
      Get
        Return mvClassFields(PaymentFields.EmployerName).Value
      End Get
    End Property
    Public ReadOnly Property SourceCode() As String
      Get
        Return mvClassFields(PaymentFields.SourceCode).Value
      End Get
    End Property
    Public ReadOnly Property PfoCode() As String
      Get
        Return mvClassFields(PaymentFields.PfoCode).Value
      End Get
    End Property
    Public ReadOnly Property NewDonor() As Boolean
      Get
        Return mvClassFields(PaymentFields.NewDonor).Bool
      End Get
    End Property
    Public ReadOnly Property EmployeeDonation() As Double
      Get
        Return mvClassFields(PaymentFields.EmployeeDonation).DoubleValue
      End Get
    End Property
    Public ReadOnly Property EmployerDonation() As Double
      Get
        Return mvClassFields(PaymentFields.EmployerDonation).DoubleValue
      End Get
    End Property
    Public ReadOnly Property GovPayment() As Double
      Get
        Return mvClassFields(PaymentFields.GovPayment).DoubleValue
      End Get
    End Property
    Public ReadOnly Property AdminFee() As Double
      Get
        Return mvClassFields(PaymentFields.AdminFee).DoubleValue
      End Get
    End Property
    Public ReadOnly Property NumberOfDonations() As Integer
      Get
        Return mvClassFields(PaymentFields.NoOfDonations).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AgencyNumber() As Integer
      Get
        Return mvClassFields(PaymentFields.AgencyNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(PaymentFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property OrganisationNumber() As Integer
      Get
        Return mvClassFields(PaymentFields.OrganisationNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AddressNumber() As Integer
      Get
        Return mvClassFields(PaymentFields.AddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PledgeNumber() As Integer
      Get
        Return mvClassFields(PaymentFields.PledgeNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Title() As String
      Get
        Return mvClassFields(PaymentFields.Title).Value
      End Get
    End Property
    Public ReadOnly Property Initials() As String
      Get
        Return mvClassFields(PaymentFields.Initials).Value
      End Get
    End Property
    Public ReadOnly Property Forenames() As String
      Get
        Return mvClassFields(PaymentFields.Forenames).Value
      End Get
    End Property
    Public ReadOnly Property Surname() As String
      Get
        Return mvClassFields(PaymentFields.Surname).Value
      End Get
    End Property
    Public ReadOnly Property TransactionDate() As String
      Get
        Return mvClassFields(PaymentFields.TransactionDate).Value
      End Get
    End Property
    Public ReadOnly Property Reconciled() As String
      Get
        Return mvClassFields(PaymentFields.Reconciled).Value
      End Get
    End Property
    Public ReadOnly Property PostBatchToCb() As Boolean
      Get
        Return mvClassFields(PaymentFields.PostBatchToCb).Bool
      End Get
    End Property
    Public ReadOnly Property PaymentNumber() As Integer
      Get
        Return mvClassFields(PaymentFields.PaymentNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property DonorEmailAddress() As String
      Get
        Return mvClassFields(PaymentFields.DonorEmailAddress).Value
      End Get
    End Property
    Public ReadOnly Property DonorTelephoneNumber() As String
      Get
        Return mvClassFields(PaymentFields.DonorTelephoneNumber).Value
      End Get
    End Property
    Public ReadOnly Property NetDonation() As Double
      Get
        Return mvClassFields(PaymentFields.NetDonation).DoubleValue
      End Get
    End Property
    Public ReadOnly Property OtherMatchedDonation() As Double
      Get
        Return mvClassFields(PaymentFields.OtherMatchedDonation).DoubleValue
      End Get
    End Property
    Public ReadOnly Property TotalDonationToCharity() As Double
      Get
        Return mvClassFields(PaymentFields.TotalDonationToCharity).DoubleValue
      End Get
    End Property
    Public ReadOnly Property CharityDonorReference() As String
      Get
        Return mvClassFields(PaymentFields.CharityDonorReference).Value
      End Get
    End Property
    Public ReadOnly Property UnreconciledReason() As String
      Get
        Return mvClassFields(PaymentFields.UnreconciledReason).Value
      End Get
    End Property
#End Region


#Region "Non AutoGenerated Code"

    Private Enum LoadFileFields
      AgencyName
      DonorReference
      EmployerName
      Title
      FirstName
      Initials
      Surname
      AddressLine1
      AddressLine2
      AddressLine3
      Postcode
      DonorEmailAddress
      DonorTelephoneNumber
      NewDonor
      PFOCode
      GrossDonation
      AdminFee
      NetDonation
      EmployerMatchedDonation
      OtherMatchedFunding
      TotalDonation
      CharityDonorReference
      EndOfLine     'Add any extra fields above this value
    End Enum

    ''' <summary>Create a new record from a line in an input file.</summary>
    ''' <param name="pAgency">The <see cref="Hashtable">Payroll Giving Agency</see> for this record.</param>
    ''' <param name="pTitles"></param>
    ''' <param name="pTransactionDate"></param>
    ''' <param name="pPostBatchToCashBook"></param>
    ''' <param name="pFields"></param>
    Public Overloads Sub Create(ByVal pAgency As PayrollGivingAgency, ByVal pTitles As Hashtable, ByVal pTransactionDate As Date, ByVal pPostBatchToCashBook As Boolean, ByVal pPFOCodeMaxLength As Integer, ByVal pFields As ArrayListEx)
      Init()

      If pFields IsNot Nothing AndAlso pFields.Count = CInt(LoadFileFields.EndOfLine) Then
        'First validate numeric parameters
        Dim vParameters As New CDBParameters()
        vParameters.Add("GrossDonation", CDBField.FieldTypes.cftNumeric, pFields(LoadFileFields.GrossDonation).ToString.Trim())
        vParameters.Add("AdminCharge", CDBField.FieldTypes.cftNumeric, pFields(LoadFileFields.AdminFee).ToString.Trim())
        vParameters.Add("NetDonation", CDBField.FieldTypes.cftNumeric, pFields(LoadFileFields.NetDonation).ToString.Trim())
        vParameters.Add("EmployerMatchedDonation", CDBField.FieldTypes.cftNumeric, pFields(LoadFileFields.EmployerMatchedDonation).ToString.Trim())
        vParameters.Add("OtherMatchedFunding", CDBField.FieldTypes.cftNumeric, pFields(LoadFileFields.OtherMatchedFunding).ToString.Trim())
        vParameters.Add("TotalDonation", CDBField.FieldTypes.cftNumeric, pFields(LoadFileFields.TotalDonation).ToString.Trim())
        PreValidateCreateParameters(vParameters)

        'Now create the data
        Dim vContact As New Contact(mvEnv)
        vContact.Init()
        Dim vAnonymousDonor As Boolean = False
        If pFields(LoadFileFields.Surname).ToString.Trim.Length > 0 AndAlso pFields(LoadFileFields.Surname).ToString.Trim.Equals(ANON_DONOR, StringComparison.InvariantCultureIgnoreCase) Then
          'Its an anonymous donor (do not set title / initials / forenames)
          vAnonymousDonor = True
          vContact.Surname = ANON_DONOR
          mvClassFields(PaymentFields.Title).Value = String.Empty
          mvClassFields(PaymentFields.Initials).Value = String.Empty
          mvClassFields(PaymentFields.Forenames).Value = String.Empty
          mvClassFields(PaymentFields.Surname).Value = vContact.Surname
          mvClassFields(PaymentFields.DonorName).Value = vContact.Surname
        Else
          Dim vTitle As Title
          If pTitles IsNot Nothing AndAlso pTitles.ContainsKey(pFields(LoadFileFields.Title).ToString.Trim.ToLower) Then
            vTitle = DirectCast(pTitles(pFields(LoadFileFields.Title).ToString.Trim.ToLower), Title)
          Else
            vTitle = New Title()
            vTitle.Init(mvEnv)
          End If
          If vTitle.Existing Then
            vContact.SetTitle(vTitle)
            vContact.TitleName = vTitle.TitleName
          End If
          vContact.Initials = pFields(LoadFileFields.Initials).ToString.Trim()
          vContact.Forenames = pFields(LoadFileFields.FirstName).ToString.Trim()
          vContact.Surname = CapitaliseWords(pFields(LoadFileFields.Surname).ToString.Trim())
          mvClassFields(PaymentFields.Title).Value = vContact.TitleName
          mvClassFields(PaymentFields.Initials).Value = vContact.Initials
          mvClassFields(PaymentFields.Forenames).Value = vContact.Forenames
          mvClassFields(PaymentFields.Surname).Value = vContact.Surname
          mvClassFields(PaymentFields.DonorName).Value = vContact.Name
        End If

        mvClassFields(PaymentFields.DonorId).Value = pFields(LoadFileFields.DonorReference).ToString.Trim()

        'For the address fields handle AddressLine1 being blank but AddressLine2 being populated etc. plus "," in lines
        Dim vAddressLine1 As String = String.Empty
        Dim vAddressLine2 As String = String.Empty
        Dim vAddressLine3 As String = String.Empty
        Dim vAddressLine4 As String = String.Empty
        Dim vAddressLine5 As String = String.Empty
        Dim vLineText As String = String.Empty
        Dim vLineText2 As String = String.Empty
        For vIndex As Integer = LoadFileFields.AddressLine1 To LoadFileFields.AddressLine3
          vLineText = pFields(vIndex).ToString.Trim()
          If vLineText.Equals(ANON_DONOR, StringComparison.InvariantCultureIgnoreCase) Then vLineText = String.Empty
          vLineText2 = String.Empty
          If Not (String.IsNullOrWhiteSpace(vLineText)) Then
            If vLineText.Contains(",") Then
              vLineText2 = vLineText.Substring(vLineText.IndexOf(","c) + 1).Trim()
              vLineText = vLineText.Substring(0, (vLineText.IndexOf(","c))).Trim()
            End If
            If vAddressLine1.Length = 0 Then
              vAddressLine1 = vLineText
              If vLineText2.Length > 0 Then vAddressLine2 = vLineText2
            ElseIf vAddressLine2.Length = 0 Then
              vAddressLine2 = vLineText
              If vLineText2.Length > 0 Then vAddressLine3 = vLineText2
            ElseIf vAddressLine3.Length = 0 Then
              vAddressLine3 = vLineText
              If vLineText2.Length > 0 Then vAddressLine4 = vLineText2
            ElseIf vAddressLine4.Length = 0 Then
              vAddressLine4 = vLineText
              If vLineText2.Length > 0 Then vAddressLine5 = vLineText2
            ElseIf vAddressLine5.Length = 0 Then
              vAddressLine5 = vLineText
            End If
          End If
        Next
        mvClassFields(PaymentFields.AddressLine1).Value = vAddressLine1
        mvClassFields(PaymentFields.AddressLine2).Value = vAddressLine2
        mvClassFields(PaymentFields.AddressLine3).Value = vAddressLine3
        mvClassFields(PaymentFields.AddressLine4).Value = vAddressLine4
        mvClassFields(PaymentFields.AddressLine5).Value = vAddressLine5
        Dim vPostcode As String = pFields(LoadFileFields.Postcode).ToString.Trim()
        If vPostcode.Equals(ANON_DONOR, StringComparison.InvariantCultureIgnoreCase) Then vPostcode = String.Empty
        mvClassFields(PaymentFields.Postcode).Value = vPostcode

        mvClassFields(PaymentFields.EmployerName).Value = pFields(LoadFileFields.EmployerName).ToString.Trim()
        mvClassFields(PaymentFields.NewDonor).Bool = If(pFields(LoadFileFields.NewDonor).ToString.Trim.Length > 0, True, False)

        mvClassFields(PaymentFields.PfoCode).Value = pFields(LoadFileFields.PFOCode).ToString.Trim()
        If mvClassFields(PaymentFields.PfoCode).Value.Length > pPFOCodeMaxLength Then mvClassFields(PaymentFields.PfoCode).Value = mvClassFields(PaymentFields.PfoCode).Value.Substring(0, pPFOCodeMaxLength)

        Dim vGrossDonation As Double = 0
        Dim vNetDonation As Double = 0
        Dim vAdminFee As Double = 0
        If IsNumeric(pFields(LoadFileFields.GrossDonation).ToString.Trim()) Then vGrossDonation = DoubleValue(pFields(LoadFileFields.GrossDonation).ToString.Trim())
        If IsNumeric(pFields(LoadFileFields.NetDonation).ToString.Trim()) Then vNetDonation = DoubleValue(pFields(LoadFileFields.NetDonation).ToString.Trim())
        If IsNumeric(pFields(LoadFileFields.AdminFee).ToString.Trim()) Then
          vAdminFee = DoubleValue(pFields(LoadFileFields.AdminFee).ToString.Trim())
          If vGrossDonation >= 0 AndAlso vNetDonation >= 0 AndAlso vAdminFee < 0 Then vAdminFee = (vAdminFee * -1)   'Ensure it is a positive figure for now
        End If
        If pFields(LoadFileFields.GrossDonation).ToString.Trim.Length = 0 Then
          vGrossDonation = vNetDonation + vAdminFee
        ElseIf pFields(LoadFileFields.NetDonation).ToString.Trim.Length = 0 Then
          vNetDonation = vGrossDonation - vAdminFee
        End If
        If vAdminFee > 0 Then vAdminFee = (vAdminFee * -1)
        mvClassFields(PaymentFields.EmployeeDonation).DoubleValue = vGrossDonation
        mvClassFields(PaymentFields.AdminFee).DoubleValue = vAdminFee
        mvClassFields(PaymentFields.NetDonation).DoubleValue = vNetDonation
        mvClassFields(PaymentFields.EmployerDonation).DoubleValue = If(IsNumeric(pFields(LoadFileFields.EmployerMatchedDonation).ToString.Trim()), DoubleValue(pFields(LoadFileFields.EmployerMatchedDonation).ToString.Trim()), 0)
        mvClassFields(PaymentFields.TotalDonationToCharity).DoubleValue = If(IsNumeric(pFields(LoadFileFields.TotalDonation).ToString.Trim()), DoubleValue(pFields(LoadFileFields.TotalDonation).ToString.Trim()), 0)
        mvClassFields(PaymentFields.OtherMatchedDonation).DoubleValue = If(IsNumeric(pFields(LoadFileFields.OtherMatchedFunding).ToString.Trim()), DoubleValue(pFields(LoadFileFields.OtherMatchedFunding).ToString.Trim()), 0)

        If vAnonymousDonor = False Then
          'Only store Email & Telephone if the donor is not anonymous
          mvClassFields(PaymentFields.DonorEmailAddress).Value = pFields(LoadFileFields.DonorEmailAddress).ToString.Trim()
          mvClassFields(PaymentFields.DonorTelephoneNumber).Value = pFields(LoadFileFields.DonorTelephoneNumber).ToString.Trim()
        End If
        mvClassFields(PaymentFields.CharityDonorReference).Value = pFields(LoadFileFields.CharityDonorReference).ToString.Trim()

        'Set default values for these fields
        mvClassFields(PaymentFields.GovPayment).DoubleValue = 0
        mvClassFields(PaymentFields.AgencyNumber).IntegerValue = pAgency.OrganisationNumber
        mvClassFields(PaymentFields.TransactionDate).Value = pTransactionDate.ToString(CAREDateFormat)
        mvClassFields(PaymentFields.PostBatchToCb).Bool = pPostBatchToCashBook
        mvClassFields(PaymentFields.NoOfDonations).IntegerValue = 1
        mvClassFields(PaymentFields.Reconciled).Value = "N"

        'These fields should all be null
        mvClassFields(PaymentFields.SourceCode).Value = String.Empty
        mvClassFields(PaymentFields.ContactNumber).Value = String.Empty
        mvClassFields(PaymentFields.OrganisationNumber).Value = String.Empty
        mvClassFields(PaymentFields.AddressNumber).Value = String.Empty
        mvClassFields(PaymentFields.PledgeNumber).Value = String.Empty
        mvClassFields(PaymentFields.UnreconciledReason).Value = String.Empty

      End If
    End Sub

    ''' <summary>Has the NetDonation figure been set in the database?</summary>
    ''' <returns></returns>
    Public Function IsNetDonationSet() As Boolean
      Return (mvClassFields(PaymentFields.NetDonation).Value.Length > 0)
    End Function

    ''' <summary>Has the TotalDonationToCharity figure been set in the database?</summary>
    ''' <returns></returns>
    Public Function IsTotalDonationToCharitySet() As Boolean
      Return (mvClassFields(PaymentFields.TotalDonationToCharity).Value.Length > 0)
    End Function

    ''' <summary>Set this payment as having been reconciled.</summary>
    ''' <param name="pParams"></param>
    ''' <param name="pUnreconciledCode"></param>
    Public Sub Reconcile(ByVal pParams As CDBParameters, ByVal pUnreconciledCode As String)
      Dim vReconciled As Boolean = (If(String.IsNullOrWhiteSpace(pUnreconciledCode), True, False))
      If pParams.ParameterExists("GayePledgeNumber").IntegerValue = 0 AndAlso PledgeNumber = 0 Then
        vReconciled = False
      End If
      If pParams.Exists("Reconciled") = False Then pParams.Add("Reconciled", CDBField.FieldTypes.cftCharacter)
      If pParams.Exists("PgUnreconciledReason") = False Then pParams.Add("PgUnreconciledReason", CDBField.FieldTypes.cftCharacter)
      pParams("Reconciled").Value = If(vReconciled, "Y", "U")
      If String.IsNullOrWhiteSpace(pUnreconciledCode) = False Then pParams("PgUnreconciledReason").Value = pUnreconciledCode
      Update(pParams)
    End Sub

#End Region

  End Class
End Namespace
