Namespace Access

  Public Class PreTaxPledge
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum GayePledgeFields
      AllFields = 0
      GayePledgeNumber
      ContactNumber
      OrganisationNumber
      AgencyNumber
      DonorId
      PfoCode
      WorkAddressNumber
      PaybillAddressNumber
      PledgeAmount
      DonorTotal
      EmployerTotal
      GovernmentTotal
      AdminFeesTotal
      NetTotal
      StartDate
      Source
      Product
      Rate
      CancellationReason
      CancelledOn
      CancelledBy
      DistributionCode
      PayrollNumber
      PayrollOrganisationNumber
      CancellationSource
      LastPaymentDate
      PaymentFrequency
      PaymentNumber
      AddressNumber
      OtherMatchedTotal
      CharityDonorReference
      CreatedBy
      CreatedOn
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("gaye_pledge_number", CDBField.FieldTypes.cftLong)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("organisation_number", CDBField.FieldTypes.cftLong)
        .Add("agency_number", CDBField.FieldTypes.cftLong)
        .Add("donor_id", CDBField.FieldTypes.cftLong)
        .Add("pfo_code")
        .Add("work_address_number", CDBField.FieldTypes.cftLong)
        .Add("paybill_address_number", CDBField.FieldTypes.cftLong)
        .Add("pledge_amount", CDBField.FieldTypes.cftNumeric)
        .Add("donor_total", CDBField.FieldTypes.cftNumeric)
        .Add("employer_total", CDBField.FieldTypes.cftNumeric)
        .Add("government_total", CDBField.FieldTypes.cftNumeric)
        .Add("admin_fees_total", CDBField.FieldTypes.cftNumeric)
        .Add("net_total", CDBField.FieldTypes.cftNumeric)
        .Add("start_date", CDBField.FieldTypes.cftDate)
        .Add("source")
        .Add("product")
        .Add("rate")
        .Add("cancellation_reason")
        .Add("cancelled_on", CDBField.FieldTypes.cftDate)
        .Add("cancelled_by")
        .Add("distribution_code")
        .Add("payroll_number")
        .Add("payroll_organisation_number", CDBField.FieldTypes.cftLong)
        .Add("cancellation_source")
        .Add("last_payment_date", CDBField.FieldTypes.cftDate)
        .Add("payment_frequency")
        .Add("payment_number", CDBField.FieldTypes.cftInteger)
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("other_matched_total", CDBField.FieldTypes.cftNumeric)
        .Add("charity_donor_reference")
        .Add("created_by")
        .Add("created_on", CDBField.FieldTypes.cftDate)

        .SetControlNumberField(GayePledgeFields.GayePledgeNumber, "GP")

        .Item(GayePledgeFields.GayePledgeNumber).PrimaryKey = True
        .Item(GayePledgeFields.ContactNumber).PrefixRequired = True
        .Item(GayePledgeFields.Source).PrefixRequired = True
        .Item(GayePledgeFields.AddressNumber).PrefixRequired = True
        .Item(GayePledgeFields.CreatedBy).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPayrollGivingCreatedByOn)
        .Item(GayePledgeFields.CreatedOn).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPayrollGivingCreatedByOn)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "gp"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "gaye_pledges"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property GayePledgeNumber() As Integer
      Get
        Return mvClassFields(GayePledgeFields.GayePledgeNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(GayePledgeFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property OrganisationNumber() As Integer
      Get
        Return mvClassFields(GayePledgeFields.OrganisationNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AgencyNumber() As Integer
      Get
        Return mvClassFields(GayePledgeFields.AgencyNumber).IntegerValue
      End Get
    End Property
    Public Property DonorId() As Integer
      Get
        Return mvClassFields(GayePledgeFields.DonorId).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(GayePledgeFields.DonorId).IntegerValue = value
      End Set
    End Property
    Public ReadOnly Property PfoCode() As String
      Get
        Return mvClassFields(GayePledgeFields.PfoCode).Value
      End Get
    End Property
    Public ReadOnly Property WorkAddressNumber() As Integer
      Get
        Return mvClassFields(GayePledgeFields.WorkAddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PaybillAddressNumber() As Integer
      Get
        Return mvClassFields(GayePledgeFields.PaybillAddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PledgeAmount() As Double
      Get
        Return mvClassFields(GayePledgeFields.PledgeAmount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property DonorTotal() As Double
      Get
        Return mvClassFields(GayePledgeFields.DonorTotal).DoubleValue
      End Get
    End Property
    Public ReadOnly Property EmployerTotal() As Double
      Get
        Return mvClassFields(GayePledgeFields.EmployerTotal).DoubleValue
      End Get
    End Property
    Public ReadOnly Property GovernmentTotal() As Double
      Get
        Return mvClassFields(GayePledgeFields.GovernmentTotal).DoubleValue
      End Get
    End Property
    Public ReadOnly Property AdminFeesTotal() As Double
      Get
        Return mvClassFields(GayePledgeFields.AdminFeesTotal).DoubleValue
      End Get
    End Property
    Public ReadOnly Property NetTotal() As Double
      Get
        Return mvClassFields(GayePledgeFields.NetTotal).DoubleValue
      End Get
    End Property
    Public ReadOnly Property StartDate() As String
      Get
        Return mvClassFields(GayePledgeFields.StartDate).Value
      End Get
    End Property
    Public ReadOnly Property Source() As String
      Get
        Return mvClassFields(GayePledgeFields.Source).Value
      End Get
    End Property
    Public ReadOnly Property ProductCode() As String
      Get
        Return mvClassFields(GayePledgeFields.Product).Value
      End Get
    End Property
    Public ReadOnly Property RateCode() As String
      Get
        Return mvClassFields(GayePledgeFields.Rate).Value
      End Get
    End Property
    Public ReadOnly Property CancellationReason() As String
      Get
        Return mvClassFields(GayePledgeFields.CancellationReason).Value
      End Get
    End Property
    Public ReadOnly Property CancelledOn() As String
      Get
        Return mvClassFields(GayePledgeFields.CancelledOn).Value
      End Get
    End Property
    Public ReadOnly Property CancelledBy() As String
      Get
        Return mvClassFields(GayePledgeFields.CancelledBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(GayePledgeFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(GayePledgeFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property DistributionCode() As String
      Get
        Return mvClassFields(GayePledgeFields.DistributionCode).Value
      End Get
    End Property
    Public ReadOnly Property PayrollNumber() As String
      Get
        Return mvClassFields(GayePledgeFields.PayrollNumber).Value
      End Get
    End Property
    Public ReadOnly Property PayrollOrganisationNumber() As Integer
      Get
        Return mvClassFields(GayePledgeFields.PayrollOrganisationNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CancellationSource() As String
      Get
        Return mvClassFields(GayePledgeFields.CancellationSource).Value
      End Get
    End Property
    Public Property LastPaymentDate() As String
      Get
        Return mvClassFields(GayePledgeFields.LastPaymentDate).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(GayePledgeFields.LastPaymentDate).Value = value
      End Set
    End Property
    Public ReadOnly Property PaymentFrequency() As String
      Get
        Return mvClassFields(GayePledgeFields.PaymentFrequency).Value
      End Get
    End Property
    Public ReadOnly Property PaymentNumber() As Integer
      Get
        Return mvClassFields(GayePledgeFields.PaymentNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AddressNumber() As Integer
      Get
        If mvClassFields(GayePledgeFields.AddressNumber).IntegerValue = 0 AndAlso ContactNumber > 0 Then
          mvClassFields(GayePledgeFields.AddressNumber).IntegerValue = IntegerValue(New SQLStatement(mvEnv.Connection, "address_number", "contacts", New CDBField("contact_number", ContactNumber)).GetValue)
        End If
        Return mvClassFields(GayePledgeFields.AddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property OtherMatchedTotal() As Double
      Get
        Return mvClassFields(GayePledgeFields.OtherMatchedTotal).DoubleValue
      End Get
    End Property
    Public ReadOnly Property CharityDonorReference() As String
      Get
        Return mvClassFields(GayePledgeFields.CharityDonorReference).Value
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(GayePledgeFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(GayePledgeFields.CreatedOn).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Dim mvNonFinancialBatchNumber As Integer
    Dim mvNonFinancialTransactionNumber As Integer

    Public Overrides Function GetAddRecordMandatoryParameters() As String
      Return "ContactNumber,OrganisationNumber,AgencyNumber,PledgeAmount"
    End Function

    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      mvNonFinancialBatchNumber = 0
      mvNonFinancialTransactionNumber = 0
      mvClassFields.Item(GayePledgeFields.StartDate).Value = TodaysDate()
      mvClassFields.Item(GayePledgeFields.DonorTotal).DoubleValue = 0
      mvClassFields.Item(GayePledgeFields.EmployerTotal).DoubleValue = 0
      mvClassFields.Item(GayePledgeFields.GovernmentTotal).DoubleValue = 0
      mvClassFields.Item(GayePledgeFields.AdminFeesTotal).DoubleValue = 0
      mvClassFields.Item(GayePledgeFields.NetTotal).DoubleValue = 0
      mvClassFields.Item(GayePledgeFields.Source).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYESource)
      mvClassFields.Item(GayePledgeFields.Product).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYEDonorProduct)
      mvClassFields.Item(GayePledgeFields.Rate).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYEDonorRate)
      If Source.Length > 0 Then  'Default Distribution Code from the source
        mvClassFields.Item(GayePledgeFields.DistributionCode).Value = New SQLStatement(mvEnv.Connection, "distribution_code", "sources", New CDBField("source", Source)).GetValue
      End If
      If DistributionCode.Length = 0 Then mvClassFields.Item(GayePledgeFields.DistributionCode).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYEDistributionCode)
      mvClassFields.Item(GayePledgeFields.PaymentNumber).IntegerValue = 0
      mvClassFields.Item(GayePledgeFields.OtherMatchedTotal).DoubleValue = 0
    End Sub

    Protected Overrides Sub SetValid()
      MyBase.SetValid()
      Dim vAddressNumber As Integer = AddressNumber     'This forces the address number to be set from the contact
      If mvClassFields.Item(GayePledgeFields.PaymentNumber).Value.Length = 0 Then mvClassFields.Item(GayePledgeFields.PaymentNumber).IntegerValue = 0
      If mvExisting Then
        If CancellationReason.Length = 0 Then ChangePayrollLink()
      Else
        CheckForContactPosition()
        CreateEmployerLinks()
      End If
    End Sub

    Protected Overrides Sub PreValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PreValidateUpdateParameters(pParameterList)
      If CancellationReason.Length = 0 AndAlso pParameterList.HasValue("CancellationReason") Then
        Cancel(pParameterList("CancellationReason").Value, pParameterList.OptionalValue("CancellationSource", ""))
      End If
    End Sub

    Public Sub SetNonFinancialTransaction(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer)
      mvNonFinancialBatchNumber = pBatchNumber
      mvNonFinancialTransactionNumber = pTransactionNumber
    End Sub

    Public Overloads Sub save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer)
      mvNonFinancialBatchNumber = pBatchNumber
      mvNonFinancialTransactionNumber = pTransactionNumber
      save(pAmendedBy, pAudit, 0)
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      Dim vActivity As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYEActivity)
      Dim vActivityValue As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYEActivityValue)
      Dim vExisting As Boolean = mvExisting
      Dim vTrans As Boolean = mvEnv.Connection.StartTransaction()
      If Not vExisting Then mvEnv.AddJournalRecord(JournalTypes.jnlPledge, JournalOperations.jnlInsert, ContactNumber, AddressNumber, GayePledgeNumber, 0, 0, mvNonFinancialBatchNumber, mvNonFinancialTransactionNumber)
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
      If vExisting = False AndAlso vActivity.Length > 0 AndAlso vActivityValue.Length > 0 Then
        Dim vContactCategory As New ContactCategory(mvEnv)
        vContactCategory.SaveActivity(ContactCategory.ActivityEntryStyles.aesCheckDateRange, ContactNumber, vActivity, vActivityValue, Source, StartDate, CDate(StartDate).AddYears(99).ToString(CAREDateFormat))
      End If
      If vTrans Then mvEnv.Connection.CommitTransaction()
    End Sub

    Private Sub CheckForContactPosition()
      Dim vPosition As New ContactPosition(mvEnv)
      vPosition.Init(ContactNumber, OrganisationNumber)
      If Not vPosition.Existing Then
        'Create new position (using WorkAddressNumber if known)
        Dim vAddressNumber As Integer = WorkAddressNumber
        If vAddressNumber = 0 Then vAddressNumber = IntegerValue(New SQLStatement(mvEnv.Connection, "address_number", "organisations", New CDBField("organisation_number", OrganisationNumber)).GetValue)
        vPosition.Create(ContactNumber, vAddressNumber, OrganisationNumber, True, True)
        vPosition.Save()
        'Check for existing contact addresses record
        Dim vContactAddress As New ContactAddress(mvEnv)
        vContactAddress.Init(ContactNumber, vAddressNumber)
        If vContactAddress.Existing = False Then
          vContactAddress.Create(ContactNumber, vAddressNumber)
          vContactAddress.Save()
        End If
      End If
    End Sub

    Private Sub CreateEmployerLinks()
      'Create any necessary organisation_links records
      Dim vOrgLink As New OrganisationLink(mvEnv)
      Dim vAgencyRelationship As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYEAgencyRelationship)
      Dim vPayrollRelationship As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYEPayrollRelationship)

      Dim vFoundExistingLink As Boolean = False
      Dim vOriginalStartDate As String = String.Empty
      If vAgencyRelationship.Length > 0 Then
        With vOrgLink
          .Init(OrganisationNumber, AgencyNumber, vAgencyRelationship)
          If .Existing Then
            vFoundExistingLink = True
            vOriginalStartDate = .ValidFrom
            .SetValidFrom(StartDate)
          Else
            .Create(OrganisationNumber, AgencyNumber, vAgencyRelationship, StartDate)
          End If
          Dim vTrans As Boolean = False
          If Not mvEnv.Connection.InTransaction Then
            mvEnv.Connection.StartTransaction()
            vTrans = True
          End If
          .MergeLinks(ContactLink.ContactLinkTypes.cltOrganisation)
          If .Existing = False Then .Save()
          If vFoundExistingLink Then
            'Merge may have in fact just deleted the existing record, so re-create
            .Init(OrganisationNumber, AgencyNumber, vAgencyRelationship)
            If .Existing = False Then .Create(OrganisationNumber, AgencyNumber, vAgencyRelationship, vOriginalStartDate)
            .SetValidFrom(StartDate)
            .Save()
          End If
          If vTrans Then mvEnv.Connection.CommitTransaction()
          'before save check that it doesn't overlap with any existing
          'if it does merge them
        End With
      End If
      If vPayrollRelationship.Length > 0 Then
        vFoundExistingLink = False
        vOriginalStartDate = String.Empty
        If (PayrollOrganisationNumber <> OrganisationNumber) And PayrollOrganisationNumber > 0 Then
          With vOrgLink
            .Init(OrganisationNumber, PayrollOrganisationNumber, vPayrollRelationship)
            If .Existing Then
              vFoundExistingLink = True
              vOriginalStartDate = .ValidFrom
              .SetValidFrom(StartDate)
            Else
              .Create(OrganisationNumber, PayrollOrganisationNumber, vPayrollRelationship, StartDate)
            End If
            'before save check that it doesn't overlap with any existing
            'if it does merge them
            Dim vTrans As Boolean = False
            If Not mvEnv.Connection.InTransaction Then
              mvEnv.Connection.StartTransaction()
              vTrans = True
            End If
            .MergeLinks(ContactLink.ContactLinkTypes.cltOrganisation)
            If .Existing = False Then .Save()
            If vFoundExistingLink Then
              'Merge may have in fact just deleted the existing record, so re-create
              .Init(OrganisationNumber, AgencyNumber, vAgencyRelationship)
              If .Existing = False Then .Create(OrganisationNumber, PayrollOrganisationNumber, vPayrollRelationship, vOriginalStartDate)
              .SetValidFrom(StartDate)
              .Save()
            End If
            If vTrans Then mvEnv.Connection.CommitTransaction()
          End With
        End If
      End If
    End Sub

    Private Sub ChangePayrollLink()
      'If Payroll Organisation has changed then update Relationships accordingly
      Dim vPayrollRelationship As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYEPayrollRelationship)
      If vPayrollRelationship.Length > 0 Then
        Dim vSetValue As Integer = IntegerValue(mvClassFields.Item(GayePledgeFields.PayrollOrganisationNumber).SetValue)
        If PayrollOrganisationNumber <> vSetValue Then
          'The Payroll Organisation has changed
          Dim vOrgLink As New OrganisationLink(mvEnv)
          If vSetValue > 0 Then
            Dim vWhereFields As New CDBFields
            With vWhereFields
              .Add("organisation_number", OrganisationNumber)
              .Add("payroll_organisation_number", vSetValue)
              .Add("contact_number", ContactNumber, CDBField.FieldWhereOperators.fwoNotEqual)
            End With
            If mvEnv.Connection.GetCount("gaye_pledges", vWhereFields) = 0 Then
              'No other Donors for this Employer & old Payroll Org so link can be made historic
              With vOrgLink
                .Init(OrganisationNumber, vSetValue, vPayrollRelationship)
                If .Existing Then
                  .SetValidTo(Date.Today.AddDays(-1).ToString(CAREDateFormat))
                  'before save check that it doesn't overlap with any existing
                  'if it does merge them
                  Dim vTrans As Boolean = False
                  If Not mvEnv.Connection.InTransaction Then
                    mvEnv.Connection.StartTransaction()
                    vTrans = True
                  End If
                  .MergeLinks(ContactLink.ContactLinkTypes.cltOrganisation)
                  .Save()
                  If vTrans Then mvEnv.Connection.CommitTransaction()
                End If
              End With
            End If
          End If
          If PayrollOrganisationNumber <> OrganisationNumber Then
            'The new Payroll Organisation is not the Employer
            With vOrgLink
              .Init(OrganisationNumber, PayrollOrganisationNumber, vPayrollRelationship)
              If .Existing Then
                .SetValidFrom(StartDate)
              Else
                .Create(OrganisationNumber, PayrollOrganisationNumber, vPayrollRelationship, StartDate)
              End If
              Dim vTrans As Boolean = False
              If Not mvEnv.Connection.InTransaction Then
                mvEnv.Connection.StartTransaction()
                vTrans = True
              End If
              .MergeLinks(ContactLink.ContactLinkTypes.cltOrganisation)
              .Save()
              If vTrans Then mvEnv.Connection.CommitTransaction()
            End With
          End If
        End If
      End If
    End Sub

    Public Sub Cancel(ByVal pCancellationReason As String, ByVal pCancellationSource As String)

      mvClassFields.Item(GayePledgeFields.CancellationReason).Value = pCancellationReason
      mvClassFields.Item(GayePledgeFields.CancelledOn).Value = TodaysDate()
      mvClassFields.Item(GayePledgeFields.CancelledBy).Value = mvEnv.User.UserID
      If pCancellationSource.Length > 0 Then mvClassFields.Item(GayePledgeFields.CancellationSource).Value = pCancellationSource
      'Now end the activity
      Dim vWhereFields As New CDBFields
      With vWhereFields
        Dim vActivity As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYEActivity)
        Dim vActivityValue As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYEActivityValue)
        .Add("contact_number", ContactNumber)
        .Add("activity", vActivity)
        .Add("activity_value", vActivityValue)
        .Add("valid_from", CDBField.FieldTypes.cftDate, mvClassFields.Item(GayePledgeFields.CancelledOn).Value, CDBField.FieldWhereOperators.fwoLessThanEqual)
        .Add("valid_to", CDBField.FieldTypes.cftDate, mvClassFields.Item(GayePledgeFields.CancelledOn).Value, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      End With
      Dim vUpdateFields As New CDBFields
      With vUpdateFields
        .Add("valid_to", CDBField.FieldTypes.cftDate, mvClassFields.Item(GayePledgeFields.CancelledOn).Value)
        .Add("amended_by", mvClassFields.Item(GayePledgeFields.CancelledBy).Value)
        .Add("amended_on", CDBField.FieldTypes.cftDate, mvClassFields.Item(GayePledgeFields.CancelledOn).Value)
      End With
      mvEnv.Connection.UpdateRecords("contact_categories", vUpdateFields, vWhereFields, False)
      EndEmployerLinks()
      Save()
    End Sub

    Private Sub EndEmployerLinks()
      'Set any organisation_links to historic if no longer being used
      Dim vOrgLink As New OrganisationLink(mvEnv)
      Dim vAgencyRelationship As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYEAgencyRelationship)
      Dim vPayrollRelationship As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAYEPayrollRelationship)
      Dim vWhereFields As New CDBFields

      If vAgencyRelationship.Length > 0 Or vPayrollRelationship.Length > 0 Then
        With vWhereFields
          .Add("organisation_number", OrganisationNumber)
          .Add("contact_number", ContactNumber, CDBField.FieldWhereOperators.fwoNotEqual)
          .Add("cancellation_reason")
        End With
        If mvEnv.Connection.GetCount("gaye_pledges", vWhereFields) = 0 Then
          'No other Donors are linked to this Employer so end the links
          If vAgencyRelationship.Length > 0 Then
            With vOrgLink
              .Init(OrganisationNumber, AgencyNumber, vAgencyRelationship)
              If .Existing Then
                .SetValidTo(TodaysDate)
                .Save()
              End If
            End With
          End If
          If vPayrollRelationship.Length > 0 Then
            If PayrollOrganisationNumber <> OrganisationNumber Then
              With vOrgLink
                .Init(OrganisationNumber, PayrollOrganisationNumber, vPayrollRelationship)
                If .Existing Then
                  .SetValidTo(TodaysDate)
                  .Save()
                End If
              End With
            End If
          End If
        End If
      End If
    End Sub

    Public Sub ReversePayment(ByVal pOldBatchNumber As Integer, ByVal pOldTransactionNumber As Integer, ByVal pNewBatchNumber As Integer, ByVal pNewTransactionNumber As Integer, Optional ByVal pPTPGPledgeNumber As Integer = 0)
      'If pPTPGPledgeNumber = 0 then initialise class from payment history
      Dim vWhereFields As New CDBFields(New CDBField("batch_number", pOldBatchNumber))
      vWhereFields.Add("transaction_number", pOldTransactionNumber)
      If pPTPGPledgeNumber > 0 Then vWhereFields.Add("gaye_pledge_number", pPTPGPledgeNumber)
      Dim vGPPH As New PreTaxPGPaymentHistory(mvEnv)
      vGPPH.InitWithPrimaryKey(vWhereFields)
      If vGPPH.Existing Then
        'Initialise class, if required
        If GayePledgeNumber = 0 Then Init(vGPPH.PledgeNumber)
        If mvExisting Then
          'Update Pledge fields
          mvClassFields.Item(GayePledgeFields.PaymentNumber).IntegerValue = PaymentNumber + 1
          'Now clone the payment history
          Dim vParams As New CDBParameters()
          vParams.Add("BatchNumber", pNewBatchNumber)
          vParams.Add("TransactionNumber", pNewTransactionNumber)
          vParams.Add("PaymentNumber", PaymentNumber)
          Dim vPaymentHistory As New PreTaxPGPaymentHistory(mvEnv)
          vPaymentHistory.Init()
          vPaymentHistory.Clone(vGPPH, vParams)
          vPaymentHistory.Save(mvEnv.User.UserID, True)
          UpdatePaymentAmounts(vPaymentHistory)
        Else
          RaiseError(DataAccessErrors.daeCannotFindPGPledge, vGPPH.PledgeNumber.ToString)
        End If
      Else
        RaiseError(DataAccessErrors.daeCannotFindPGPledgePayHistory, pPTPGPledgeNumber.ToString, pOldBatchNumber.ToString, pOldTransactionNumber.ToString)
      End If
    End Sub

    Private Sub UpdatePaymentAmounts(ByVal pPaymentHistory As PreTaxPGPaymentHistory)
      With mvClassFields
        .Item(GayePledgeFields.DonorTotal).DoubleValue = DonorTotal + pPaymentHistory.DonorAmount
        .Item(GayePledgeFields.EmployerTotal).DoubleValue = EmployerTotal + pPaymentHistory.EmployerAmount
        .Item(GayePledgeFields.GovernmentTotal).DoubleValue = GovernmentTotal + pPaymentHistory.GovernmentAmount
        .Item(GayePledgeFields.OtherMatchedTotal).DoubleValue = OtherMatchedTotal + pPaymentHistory.OtherMatchedAmount
        .Item(GayePledgeFields.AdminFeesTotal).DoubleValue = AdminFeesTotal + pPaymentHistory.AdminFeeAmount
        .Item(GayePledgeFields.NetTotal).DoubleValue = DonorTotal + EmployerTotal + GovernmentTotal + AdminFeesTotal
      End With
    End Sub

    Public Sub AddPayment(ByVal pParams As CDBParameters)
      mvClassFields.Item(GayePledgeFields.PaymentNumber).IntegerValue = PaymentNumber + 1
      If pParams.Exists("GayePledgeNumber") = False Then pParams.Add("GayePledgeNumber", CDBField.FieldTypes.cftInteger)
      If pParams.Exists("PaymentNumber") = False Then pParams.Add("PaymentNumber", CDBField.FieldTypes.cftInteger)
      pParams("GayePledgeNumber").Value = GayePledgeNumber.ToString
      pParams("PaymentNumber").Value = PaymentNumber.ToString

      Dim vPTPGPHistory As New PreTaxPGPaymentHistory(mvEnv)
      vPTPGPHistory.Init()
      vPTPGPHistory.Create(pParams)
      vPTPGPHistory.Save(mvEnv.User.UserID, True)
      UpdatePaymentAmounts(vPTPGPHistory)
    End Sub

    Public Sub InitNewPledge(ByVal pContactNumber As Integer, ByVal pEmployerNumber As Integer, ByVal pAgencyNumber As Integer, ByVal pWorkAddressNumber As Integer, ByVal pPayBillAddressNumber As Integer, ByVal pDonorID As String, ByVal pPFOCode As String, ByVal pPledgeAmount As Double, ByVal pStartDate As String, ByVal pProduct As String, ByVal pRate As String, ByVal pSource As String, Optional ByVal pPayrollOrganisationNumber As Integer = 0, Optional ByVal pDistributionCode As String = "", Optional ByVal pPaymentFrequency As String = "", Optional ByVal pPayrollNumber As String = "", Optional ByVal pAddressNumber As Integer = 0)
      Init()
      With mvClassFields
        .Item(GayePledgeFields.ContactNumber).IntegerValue = pContactNumber
        .Item(GayePledgeFields.OrganisationNumber).IntegerValue = pEmployerNumber
        .Item(GayePledgeFields.AgencyNumber).IntegerValue = pAgencyNumber
        .Item(GayePledgeFields.WorkAddressNumber).IntegerValue = pWorkAddressNumber
        If pPayBillAddressNumber > 0 Then .Item(GayePledgeFields.PaybillAddressNumber).IntegerValue = pPayBillAddressNumber
        .Item(GayePledgeFields.DonorId).Value = pDonorID
        .Item(GayePledgeFields.PfoCode).Value = pPFOCode
        .Item(GayePledgeFields.PledgeAmount).DoubleValue = pPledgeAmount
        .Item(GayePledgeFields.StartDate).Value = pStartDate
        .Item(GayePledgeFields.Product).Value = pProduct
        .Item(GayePledgeFields.Rate).Value = pRate
        .Item(GayePledgeFields.Source).Value = pSource
        If pPayrollOrganisationNumber > 0 Then .Item(GayePledgeFields.PayrollOrganisationNumber).IntegerValue = pPayrollOrganisationNumber
        .Item(GayePledgeFields.DistributionCode).Value = pDistributionCode
        .Item(GayePledgeFields.PaymentFrequency).Value = pPaymentFrequency
        .Item(GayePledgeFields.PayrollNumber).Value = pPayrollNumber
        If pAddressNumber > 0 Then .Item(GayePledgeFields.AddressNumber).IntegerValue = pAddressNumber
      End With
    End Sub

#End Region

  End Class
End Namespace
