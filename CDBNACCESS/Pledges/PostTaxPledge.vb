Namespace Access

  Public Class PostTaxPledge
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum PostTaxPgPledgeFields
      AllFields = 0
      PledgeNumber
      ContactNumber
      AddressNumber
      OrganisationNumber
      OrganisationAddressNumber
      PayrollNumber
      StartDate
      PledgeAmount
      DonorTotal
      EmployerTotal
      TotalPledged
      Source
      DistributionCode
      Product
      Rate
      LastPaymentDate
      PaymentNumber
      CancellationReason
      CancellationSource
      CancelledBy
      CancelledOn
      CreatedBy
      CreatedOn
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("pledge_number", CDBField.FieldTypes.cftLong)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("organisation_number", CDBField.FieldTypes.cftLong)
        .Add("organisation_address_number", CDBField.FieldTypes.cftLong)
        .Add("payroll_number")
        .Add("start_date", CDBField.FieldTypes.cftDate)
        .Add("pledge_amount", CDBField.FieldTypes.cftNumeric)
        .Add("donor_total", CDBField.FieldTypes.cftNumeric)
        .Add("employer_total", CDBField.FieldTypes.cftNumeric)
        .Add("total_pledged", CDBField.FieldTypes.cftNumeric)
        .Add("source")
        .Add("distribution_code")
        .Add("product")
        .Add("rate")
        .Add("last_payment_date", CDBField.FieldTypes.cftDate)
        .Add("payment_number", CDBField.FieldTypes.cftInteger)
        .Add("cancellation_reason")
        .Add("cancellation_source")
        .Add("cancelled_by")
        .Add("cancelled_on", CDBField.FieldTypes.cftDate)
        .Add("created_by")
        .Add("created_on", CDBField.FieldTypes.cftDate)

        .SetControlNumberField(PostTaxPgPledgeFields.PledgeNumber, "PG")

        .Item(PostTaxPgPledgeFields.PledgeNumber).PrimaryKey = True
        .Item(PostTaxPgPledgeFields.CreatedBy).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPayrollGivingCreatedByOn)
        .Item(PostTaxPgPledgeFields.CreatedOn).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPayrollGivingCreatedByOn)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ptpp"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "post_tax_pg_pledges"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property PledgeNumber() As Integer
      Get
        Return mvClassFields(PostTaxPgPledgeFields.PledgeNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(PostTaxPgPledgeFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AddressNumber() As Integer
      Get
        If mvClassFields(PostTaxPgPledgeFields.AddressNumber).IntegerValue = 0 AndAlso ContactNumber > 0 Then
          mvClassFields(PostTaxPgPledgeFields.AddressNumber).IntegerValue = IntegerValue(New SQLStatement(mvEnv.Connection, "address_number", "contacts", New CDBField("contact_number", ContactNumber)).GetValue)
        End If
        Return mvClassFields(PostTaxPgPledgeFields.AddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property OrganisationNumber() As Integer
      Get
        Return mvClassFields(PostTaxPgPledgeFields.OrganisationNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property OrganisationAddressNumber() As Integer
      Get
        Return mvClassFields(PostTaxPgPledgeFields.OrganisationAddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PayrollNumber() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.PayrollNumber).Value
      End Get
    End Property
    Public ReadOnly Property StartDate() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.StartDate).Value
      End Get
    End Property
    Public ReadOnly Property PledgeAmount() As Double
      Get
        Return mvClassFields(PostTaxPgPledgeFields.PledgeAmount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property DonorTotal() As Double
      Get
        Return mvClassFields(PostTaxPgPledgeFields.DonorTotal).DoubleValue
      End Get
    End Property
    Public ReadOnly Property EmployerTotal() As Double
      Get
        Return mvClassFields(PostTaxPgPledgeFields.EmployerTotal).DoubleValue
      End Get
    End Property
    Public ReadOnly Property TotalPledged() As Double
      Get
        Return mvClassFields(PostTaxPgPledgeFields.TotalPledged).DoubleValue
      End Get
    End Property
    Public ReadOnly Property Source() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.Source).Value
      End Get
    End Property
    Public ReadOnly Property DistributionCode() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.DistributionCode).Value
      End Get
    End Property
    Public ReadOnly Property ProductCode() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.Product).Value
      End Get
    End Property
    Public ReadOnly Property RateCode() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.Rate).Value
      End Get
    End Property
    Public ReadOnly Property LastPaymentDate() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.LastPaymentDate).Value
      End Get
    End Property
    Public ReadOnly Property PaymentNumber() As Integer
      Get
        Return mvClassFields(PostTaxPgPledgeFields.PaymentNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CancellationReason() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.CancellationReason).Value
      End Get
    End Property
    Public ReadOnly Property CancellationSource() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.CancellationSource).Value
      End Get
    End Property
    Public ReadOnly Property CancelledBy() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.CancelledBy).Value
      End Get
    End Property
    Public ReadOnly Property CancelledOn() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.CancelledOn).Value
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(PostTaxPgPledgeFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Dim mvNonFinancialBatchNumber As Integer
    Dim mvNonFinancialTransactionNumber As Integer

    Public Overrides Function GetAddRecordMandatoryParameters() As String
      Return "ContactNumber,OrganisationNumber,OrganisationAddressNumber,PledgeAmount"
    End Function

    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      mvNonFinancialBatchNumber = 0
      mvNonFinancialTransactionNumber = 0
      mvClassFields.Item(PostTaxPgPledgeFields.StartDate).Value = TodaysDate()
      mvClassFields.Item(PostTaxPgPledgeFields.DonorTotal).DoubleValue = 0
      mvClassFields.Item(PostTaxPgPledgeFields.EmployerTotal).DoubleValue = 0
      mvClassFields.Item(PostTaxPgPledgeFields.TotalPledged).DoubleValue = 0
      mvClassFields.Item(PostTaxPgPledgeFields.PaymentNumber).IntegerValue = 0
      mvClassFields.Item(PostTaxPgPledgeFields.Source).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPostTaxPGPledgeSource)
      mvClassFields.Item(PostTaxPgPledgeFields.Product).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPostTaxPGDonorProduct)
      mvClassFields.Item(PostTaxPgPledgeFields.Rate).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPostTaxPGDonorRate)
      If Source.Length > 0 Then  'Default Distribution Code from the source
        mvClassFields.Item(PostTaxPgPledgeFields.DistributionCode).Value = New SQLStatement(mvEnv.Connection, "distribution_code", "sources", New CDBField("source", Source)).GetValue
      End If
      If DistributionCode.Length = 0 Then mvClassFields.Item(PostTaxPgPledgeFields.DistributionCode).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPostTaxPGDistributionCode)
    End Sub

    Protected Overrides Sub SetValid()
      MyBase.SetValid()
      Dim vAddressNumber As Integer = AddressNumber     'This forces the address number to be set from the contact
      CheckForContactPosition()
    End Sub

    Protected Overrides Sub PreValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PreValidateUpdateParameters(pParameterList)
      If CancellationReason.Length = 0 AndAlso pParameterList.HasValue("CancellationReason") Then
        Cancel(pParameterList("CancellationReason").Value, pParameterList.OptionalValue("CancellationSource", ""))
      End If
    End Sub

    Public Sub SetNonFinancialTransaction(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer)
      mvNonFinancialBatchNumber = pBatchNumber
      mvNonFinancialTransactionNumber = pTransactionNumber
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      Dim vActivity As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPostTaxPGPledgeActivity)
      Dim vActivityValue As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPostTaxPGPledgeActivityValue)

      mvEnv.Connection.StartTransaction()
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
      If mvExisting = False Then
        If vActivity.Length > 0 AndAlso vActivityValue.Length > 0 Then
          Dim vContactCategory As New ContactCategory(mvEnv)
          vContactCategory.SaveActivity(ContactCategory.ActivityEntryStyles.aesCheckDateRange, ContactNumber, vActivity, vActivityValue, Source, StartDate, CDate(StartDate).AddYears(99).ToString(CAREDateFormat))
        End If
        vActivity = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPostTaxPGEmployerActivity)
        vActivityValue = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPostTaxPGEmployerActivityValue)
        If vActivity.Length > 0 AndAlso vActivityValue.Length > 0 Then
          Dim vOrganisationCategory As New OrganisationCategory(mvEnv)
          vOrganisationCategory.SaveActivity(ContactCategory.ActivityEntryStyles.aesCheckDateRange, OrganisationNumber, vActivity, vActivityValue, Source, StartDate, CDate(StartDate).AddYears(99).ToString(CAREDateFormat))
        End If
      End If
      mvEnv.Connection.CommitTransaction()
    End Sub

    Private Sub CheckForContactPosition()
      Dim vPosition As New ContactPosition(mvEnv)
      vPosition.Init(ContactNumber, OrganisationNumber)
      If Not vPosition.Existing Then
        'Create new position (using WorkAddressNumber if known)
        vPosition.Create(ContactNumber, OrganisationAddressNumber, OrganisationNumber, True, True)
        vPosition.Save()
        'Check for existing contact addresses record
        Dim vContactAddress As New ContactAddress(mvEnv)
        vContactAddress.Init(ContactNumber, OrganisationAddressNumber)
        If vContactAddress.Existing = False Then
          vContactAddress.Create(ContactNumber, OrganisationAddressNumber)
          vContactAddress.Save()
        End If
      End If
    End Sub

    Public Sub Cancel(ByVal pCancelReason As String, ByVal pCancellationSource As String)
      Dim vUpdateFields As New CDBFields
      Dim vWhereFields As New CDBFields

      mvClassFields.Item(PostTaxPgPledgeFields.CancellationReason).Value = pCancelReason
      mvClassFields.Item(PostTaxPgPledgeFields.CancelledOn).Value = TodaysDate()
      mvClassFields.Item(PostTaxPgPledgeFields.CancelledBy).Value = mvEnv.User.UserID
      If pCancellationSource.Length > 0 Then mvClassFields.Item(PostTaxPgPledgeFields.CancellationSource).Value = pCancellationSource
      Save()

      'Now end the Employee Activity if no other current Pledges
      Dim vActivity As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPostTaxPGPledgeActivity)
      Dim vActivityValue As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPostTaxPGPledgeActivityValue)
      If vActivity.Length > 0 And vActivityValue.Length > 0 Then
        vWhereFields.Add("contact_number", ContactNumber)
        vWhereFields.Add("cancellation_reason", "")
        If mvEnv.Connection.GetCount(DatabaseTableName, vWhereFields) = 0 Then
          With vWhereFields
            .Clear()
            .Add("contact_number", ContactNumber)
            .Add("activity", vActivity)
            .Add("activity_value", vActivityValue)
            .Add("valid_from", CDBField.FieldTypes.cftDate, CancelledOn, CDBField.FieldWhereOperators.fwoLessThanEqual)
            .Add("valid_to", CDBField.FieldTypes.cftDate, CancelledOn, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
          End With
          With vUpdateFields
            .Add("valid_to", CDBField.FieldTypes.cftDate, CancelledOn)
            .Add("amended_by", CDBField.FieldTypes.cftCharacter, CancelledBy)
            .Add("amended_on", CDBField.FieldTypes.cftDate, CancelledOn)
          End With
          mvEnv.Connection.UpdateRecords("contact_categories", vUpdateFields, vWhereFields, False)
        End If
        vWhereFields.Clear()
        vUpdateFields.Clear()
      End If

      'Now end the Employer Activity if no other current Employee Pledges.
      vActivity = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPostTaxPGEmployerActivity)
      vActivityValue = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPostTaxPGEmployerActivityValue)
      If vActivity.Length > 0 And vActivityValue.Length > 0 Then
        vWhereFields.Add("organisation_number", OrganisationNumber)
        vWhereFields.Add("cancellation_reason", "")
        If mvEnv.Connection.GetCount(DatabaseTableName, vWhereFields) = 0 Then
          With vWhereFields
            .Clear()
            .Add("organisation_number", OrganisationNumber)
            .Add("activity", vActivity)
            .Add("activity_value", vActivityValue)
            .Add("valid_from", CDBField.FieldTypes.cftDate, CancelledOn, CDBField.FieldWhereOperators.fwoLessThanEqual)
            .Add("valid_to", CDBField.FieldTypes.cftDate, CancelledOn, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
          End With
          With vUpdateFields
            .Add("valid_to", CDBField.FieldTypes.cftDate, CancelledOn)
            .Add("amended_by", CancelledBy)
            .Add("amended_on", CDBField.FieldTypes.cftDate, CancelledOn)
          End With
          mvEnv.Connection.UpdateRecords("organisation_categories", vUpdateFields, vWhereFields, False)
        End If
      End If
    End Sub

    Friend Sub AddPayment(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pPaymentDate As String, ByVal pDonorAmount As Double, ByVal pEmployerAmount As Double)
      Dim vPostTaxPGPHist As New PostTaxPgPaymentHistory
      Dim vTrans As Boolean

      'Set the Totals, PaymentNumber and LastPaymentDate
      With mvClassFields
        .Item(PostTaxPgPledgeFields.DonorTotal).DoubleValue = FixTwoPlaces(DonorTotal + pDonorAmount)
        .Item(PostTaxPgPledgeFields.EmployerTotal).DoubleValue = FixTwoPlaces(EmployerTotal + pEmployerAmount)
        .Item(PostTaxPgPledgeFields.TotalPledged).DoubleValue = FixTwoPlaces(DonorTotal + EmployerTotal)
        .Item(PostTaxPgPledgeFields.PaymentNumber).LongValue = PaymentNumber + 1
        If LastPaymentDate.Length = 0 Then
          .Item(PostTaxPgPledgeFields.LastPaymentDate).Value = pPaymentDate
        Else
          If CDate(pPaymentDate) > CDate(LastPaymentDate) Then .Item(PostTaxPgPledgeFields.LastPaymentDate).Value = pPaymentDate
        End If
      End With
      'Create the PaymentHistory
      vPostTaxPGPHist.Create(mvEnv, PledgeNumber, pBatchNumber, pTransactionNumber, PaymentNumber, pDonorAmount, pEmployerAmount)
      If Not mvEnv.Connection.InTransaction Then
        mvEnv.Connection.StartTransaction()
        vTrans = True
      End If
      'Save the Pledge and the PaymentHistory
      vPostTaxPGPHist.Save()
      Save()
      If vTrans Then mvEnv.Connection.CommitTransaction()
    End Sub

    Public Sub InitFromEmployerAndPayrollNumber(ByVal pEmployerOrganisationNumber As Integer, ByVal pPayrollNumber As String)
      Init()
      Dim vWhereFields As New CDBFields
      vWhereFields.Add(mvClassFields(PostTaxPgPledgeFields.OrganisationNumber).Name, pEmployerOrganisationNumber)
      vWhereFields.Add(mvClassFields(PostTaxPgPledgeFields.PayrollNumber).Name, pPayrollNumber)
      MyBase.InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Sub UpdateFromReconciliation(ByVal pNewStartDate As String, ByVal pNewPledgeAmount As Double)
      'Reconciliation only updates StartDate and PledgeAmount (in set circumstances only)
      If (CDate(StartDate) > CDate(pNewStartDate)) Then mvClassFields(PostTaxPgPledgeFields.StartDate).Value = pNewStartDate
      If pNewPledgeAmount > 0 And (PledgeAmount <> pNewPledgeAmount) Then mvClassFields(PostTaxPgPledgeFields.PledgeAmount).DoubleValue = pNewPledgeAmount
    End Sub

    Public Overloads Sub Create(ByVal pEmployeeContactNumber As Integer, ByVal pEmployeeAddressNumber As Integer, ByVal pEmployerOrganisationNumber As Integer, ByVal pEmployerAddressNumber As Integer, ByVal pStartDate As String, ByVal pPledgeAmount As Double, ByVal pSource As String, ByVal pProductCode As String, ByVal pRate As String, Optional ByVal pPayrollNumber As String = "", Optional ByVal pDistributionCode As String = "")
      Init()
      With mvClassFields
        .Item(PostTaxPgPledgeFields.ContactNumber).IntegerValue = pEmployeeContactNumber
        .Item(PostTaxPgPledgeFields.AddressNumber).IntegerValue = pEmployeeAddressNumber
        .Item(PostTaxPgPledgeFields.OrganisationNumber).IntegerValue = pEmployerOrganisationNumber
        .Item(PostTaxPgPledgeFields.OrganisationAddressNumber).IntegerValue = pEmployerAddressNumber
        .Item(PostTaxPgPledgeFields.StartDate).Value = pStartDate
        .Item(PostTaxPgPledgeFields.PledgeAmount).DoubleValue = pPledgeAmount
        .Item(PostTaxPgPledgeFields.Source).Value = pSource
        .Item(PostTaxPgPledgeFields.Product).Value = pProductCode
        .Item(PostTaxPgPledgeFields.Rate).Value = pRate
        'Optional
        If pPayrollNumber.Length > 0 Then .Item(PostTaxPgPledgeFields.PayrollNumber).Value = pPayrollNumber
        If pDistributionCode.Length > 0 Then .Item(PostTaxPgPledgeFields.DistributionCode).Value = pDistributionCode
      End With
    End Sub

#End Region

  End Class
End Namespace
