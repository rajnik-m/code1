Namespace Access

  Public Class CustomForm
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum CustomFormFields
      AllFields = 0
      CustomForm
      CustomFormDesc
      Client
      DbName
      SelectSql
      FormCaption
      TagPosition
      TagWidth
      AutoSize
      TabCount
      TabCaptions
      GridTop
      GridLeft
      GridWidth
      GridHeight
      GridCaption
      GridHeadings
      GridWidths
      GridAttributeNames
      GridSelectSql
      ReferentialSql
      AllowDelete
      AllowInsert
      AllowUpdate
      FormValidation
      CustomFormUrl
      ShowBrowserToolbar
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("custom_form", CDBField.FieldTypes.cftInteger)
        .Add("custom_form_desc")
        .Add("client")
        .Add("db_name")
        .Add("select_sql", CDBField.FieldTypes.cftMemo)
        .Add("form_caption")
        .Add("tag_position", CDBField.FieldTypes.cftInteger)
        .Add("tag_width", CDBField.FieldTypes.cftInteger)
        .Add("auto_size", CDBField.FieldTypes.cftInteger)
        .Add("tab_count", CDBField.FieldTypes.cftInteger)
        .Add("tab_captions")
        .Add("grid_top", CDBField.FieldTypes.cftInteger)
        .Add("grid_left", CDBField.FieldTypes.cftInteger)
        .Add("grid_width", CDBField.FieldTypes.cftInteger)
        .Add("grid_height", CDBField.FieldTypes.cftInteger)
        .Add("grid_caption")
        .Add("grid_headings", CDBField.FieldTypes.cftMemo)
        .Add("grid_widths", CDBField.FieldTypes.cftMemo)
        .Add("grid_attribute_names", CDBField.FieldTypes.cftMemo)
        .Add("grid_select_sql", CDBField.FieldTypes.cftMemo)
        .Add("referential_sql", CDBField.FieldTypes.cftMemo)
        .Add("allow_delete")
        .Add("allow_insert")
        .Add("allow_update")
        .Add("form_validation", CDBField.FieldTypes.cftMemo)
        .Add("custom_form_url")
        .Add("show_browser_toolbar")

        .Item(CustomFormFields.CustomForm).PrimaryKey = True

        .Item(CustomFormFields.Client).PrimaryKey = True

        .Item(CustomFormFields.CustomFormUrl).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbCustomFormWebPage)
        .Item(CustomFormFields.ShowBrowserToolbar).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbCustomFormWebPage)

      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "cf"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "custom_forms"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property CustomFormNumber() As Integer
      Get
        Return mvClassFields(CustomFormFields.CustomForm).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CustomFormDesc() As String
      Get
        Return mvClassFields(CustomFormFields.CustomFormDesc).Value
      End Get
    End Property
    Public ReadOnly Property Client() As String
      Get
        Return mvClassFields(CustomFormFields.Client).Value
      End Get
    End Property
    Public ReadOnly Property DbName() As String
      Get
        Return mvClassFields(CustomFormFields.DbName).Value
      End Get
    End Property
    Public ReadOnly Property SelectSql() As String
      Get
        Return mvClassFields(CustomFormFields.SelectSql).Value
      End Get
    End Property
    Public ReadOnly Property FormCaption() As String
      Get
        Return mvClassFields(CustomFormFields.FormCaption).Value
      End Get
    End Property
    Public ReadOnly Property TagPosition() As Integer
      Get
        Return mvClassFields(CustomFormFields.TagPosition).IntegerValue
      End Get
    End Property
    Public ReadOnly Property TagWidth() As Integer
      Get
        Return mvClassFields(CustomFormFields.TagWidth).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AutoSize() As Integer
      Get
        Return mvClassFields(CustomFormFields.AutoSize).IntegerValue
      End Get
    End Property
    Public ReadOnly Property TabCount() As Integer
      Get
        Return mvClassFields(CustomFormFields.TabCount).IntegerValue
      End Get
    End Property
    Public ReadOnly Property TabCaptions() As String
      Get
        Return mvClassFields(CustomFormFields.TabCaptions).Value
      End Get
    End Property
    Public ReadOnly Property GridTop() As Integer
      Get
        Return mvClassFields(CustomFormFields.GridTop).IntegerValue
      End Get
    End Property
    Public ReadOnly Property GridLeft() As Integer
      Get
        Return mvClassFields(CustomFormFields.GridLeft).IntegerValue
      End Get
    End Property
    Public ReadOnly Property GridWidth() As Integer
      Get
        Return mvClassFields(CustomFormFields.GridWidth).IntegerValue
      End Get
    End Property
    Public ReadOnly Property GridHeight() As Integer
      Get
        Return mvClassFields(CustomFormFields.GridHeight).IntegerValue
      End Get
    End Property
    Public ReadOnly Property GridCaption() As String
      Get
        Return mvClassFields(CustomFormFields.GridCaption).Value
      End Get
    End Property
    Public ReadOnly Property GridHeadings() As String
      Get
        Return mvClassFields(CustomFormFields.GridHeadings).Value
      End Get
    End Property
    Public ReadOnly Property GridWidths() As String
      Get
        Return mvClassFields(CustomFormFields.GridWidths).Value
      End Get
    End Property
    Public ReadOnly Property GridAttributeNames() As String
      Get
        Return mvClassFields(CustomFormFields.GridAttributeNames).Value
      End Get
    End Property
    Public ReadOnly Property GridSelectSql() As String
      Get
        Return mvClassFields(CustomFormFields.GridSelectSql).Value
      End Get
    End Property
    Public ReadOnly Property ReferentialSql() As String
      Get
        Return mvClassFields(CustomFormFields.ReferentialSql).Value
      End Get
    End Property
    Public ReadOnly Property AllowDelete() As String
      Get
        Return mvClassFields(CustomFormFields.AllowDelete).Value
      End Get
    End Property
    Public ReadOnly Property AllowInsert() As String
      Get
        Return mvClassFields(CustomFormFields.AllowInsert).Value
      End Get
    End Property
    Public ReadOnly Property AllowUpdate() As String
      Get
        Return mvClassFields(CustomFormFields.AllowUpdate).Value
      End Get
    End Property
    Public ReadOnly Property FormValidation() As String
      Get
        Return mvClassFields(CustomFormFields.FormValidation).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(CustomFormFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(CustomFormFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property CustomFormUrl() As String
      Get
        Return mvClassFields(CustomFormFields.CustomFormUrl).Value
      End Get
    End Property
    Public ReadOnly Property ShowBrowserToolbar() As String
      Get
        Return mvClassFields(CustomFormFields.ShowBrowserToolbar).Value
      End Get
    End Property

#End Region

#Region "Non AutoGenerated Code"

    Public Overloads Sub Init(ByVal pCustomForm As Integer)
      CheckClassFields()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(CustomFormFields.CustomForm).Name, pCustomForm)
      vWhereFields.Add(mvClassFields(CustomFormFields.Client).Name, mvEnv.ClientCode)
      MyBase.InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Sub UpdateData(ByRef pParams As CDBParameters)
      Dim vTables As New CDBParameters
      Dim vTable As CDBParameter
      Dim vWhereFields As CDBFields
      Dim vFields As CDBFields

      Dim vControls As New CustomFormControls
      vControls.Init(mvEnv, CustomFormNumber)
      vTables = vControls.TableNames
      If vTables.Count > 0 Then
        For Each vTable In vTables
          vFields = vControls.Fields(mvEnv, (vTable.Name), pParams)
          If vFields.Count > 0 Then
            vWhereFields = vControls.WhereFields((vTable.Name), pParams)
            CheckWhereFields(vWhereFields, (vTable.Name), pParams)
            If vWhereFields.Count > 0 Then
              mvEnv.Connection.UpdateRecords((vTable.Name), vFields, vWhereFields)
            End If
          End If
        Next vTable
      End If
    End Sub

    Public Sub DeleteData(ByRef vParams As CDBParameters)
      Dim vTables As New CDBParameters
      Dim vControls As New CustomFormControls
      vControls.Init(mvEnv, CustomFormNumber)
      vTables = vControls.TableNames
      If vTables.Count > 0 Then
        For Each vTable As CDBParameter In vTables
          Dim vWhereFields As CDBFields
          vWhereFields = vControls.WhereFields((vTable.Name), vParams)
          If vWhereFields.Count > 0 Then
            CheckWhereFields(vWhereFields, vTable.Name, vParams)
            mvEnv.Connection.DeleteRecords(vTable.Name, vWhereFields)
          End If
        Next vTable
      End If
    End Sub

    Private Sub CheckWhereFields(ByVal pFields As CDBFields, ByVal pTableName As String, ByVal pParams As CDBParameters)
      Dim vCount As Integer
      Dim vFieldName As String
      Dim vParam As CDBParameter

      Dim vRS As CDBRecordSet = mvEnv.Connection.GetRecordSet("SELECT attribute_name FROM maintenance_attributes WHERE table_name = '" & pTableName & "' AND primary_key = 'Y'")
      While vRS.Fetch
        vFieldName = vRS.Fields(1).Value
        If Not pFields.Exists(vFieldName) Then
          If pParams.Exists(ProperName(vFieldName)) Then
            vParam = pParams(ProperName(vFieldName))
            pFields.Add(vFieldName, vParam.DataType, vParam.Value)
          Else
            RaiseError(DataAccessErrors.daeParameterNotFound, ProperName(vFieldName))
          End If
        End If
        vCount += 1
      End While
      vRS.CloseRecordSet()
      If vCount = 0 Then RaiseError(DataAccessErrors.daeParameterNotFound, "Primary Key")
    End Sub

    Public Sub CreateData(ByRef pParams As CDBParameters)
      Dim vFields As CDBFields

      Dim vControls As New CustomFormControls
      vControls.Init(mvEnv, CustomFormNumber)
      Dim vTables As New CDBParameters
      vTables = vControls.TableNames
      If vTables.Count > 0 Then
        For Each vTable As CDBParameter In vTables
          vFields = vControls.Fields(mvEnv, (vTable.Name), pParams)
          If vFields.Count > 0 Then
            CheckWhereFields(vFields, (vTable.Name), pParams)
            'Should check primary key values don't exist first
            mvEnv.Connection.InsertRecord(vTable.Name, vFields)
          End If
        Next vTable
      End If
    End Sub

    Public Function ParseNumberIntoSQLStatement(ByVal pNumber As Integer, ByVal pSQL As String) As String
      Dim vSQL As String
      Dim vPos As Integer
      Dim vPos2 As Integer
      Dim vDataSource As String
      Dim vExtRef As String

      vSQL = Replace(pSQL, "#", CStr(pNumber))
      If InStr(vSQL, "/* IgnoreAlreadyDefined */") <= 0 Then vSQL = Replace(vSQL, "SELECT ", "SELECT /* IgnoreAlreadyDefined */ ", 1, 1, CompareMethod.Text)
      'External Reference  ^xxxx^
      vPos = InStr(vSQL, "^")
      If vPos > 0 Then
        vPos2 = InStr(vPos + 1, vSQL, "^")
        If vPos2 > 0 Then
          If vPos2 - vPos < 6 Then 'Data source must be 4 chars or less
            vDataSource = Mid(vSQL, vPos + 1, vPos2 - (vPos + 1))
            vExtRef = mvEnv.Connection.GetValue("SELECT external_reference FROM contact_external_links WHERE contact_number = " & pNumber & " AND data_source = '" & vDataSource & "'")
            If Len(vExtRef) > 0 Then
              vSQL = Replace(vSQL, "^" & vDataSource & "^", vExtRef)
            Else
              vSQL = ""
            End If
          End If
        End If
      End If
      Return vSQL
    End Function

    Public Function ParseValuesIntoSQLStatement(ByVal pValues As String, ByVal pSQL As String) As String
      Dim vItems() As String
      Dim vSQL As String
      Dim vIndex As Integer

      vItems = Split(pValues, ",")
      vSQL = pSQL
      For vIndex = 0 To UBound(vItems)
        If InStr(vSQL, "#" & vIndex.ToString) > 0 Then
          vSQL = Replace(vSQL, "#" & vIndex.ToString, vItems(vIndex).Replace("'", "''"))
        End If
      Next
      Return vSQL
    End Function

    Public Function GetFirstAttributeValue(ByRef pSQL As String) As String
      Return mvEnv.GetConnection(DbName).GetValue(pSQL)
    End Function

    Public Function ExecuteSQL(ByRef pSQL As String, Optional ByRef pFlags As CDBConnection.cdbExecuteConstants = CDBConnection.cdbExecuteConstants.sqlShowError) As Integer
      Return mvEnv.GetConnection(DbName).ExecuteSQL(pSQL, pFlags)
    End Function

#End Region

  End Class
End Namespace
