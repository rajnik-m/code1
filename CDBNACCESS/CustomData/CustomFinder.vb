Namespace Access

  Public Class CustomFinder
    Inherits CARERecord


#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum CustomFinderFields
      AllFields = 0
      CustomFinder
      CustomFinderDesc
      Client
      DbName
      SelectSql
      TagPosition
      TagWidth
      ContactGroup
      TabNumber
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("custom_finder", CDBField.FieldTypes.cftInteger)
        .Add("custom_finder_desc")
        .Add("client")
        .Add("db_name")
        .Add("select_sql", CDBField.FieldTypes.cftMemo)
        .Add("tag_position", CDBField.FieldTypes.cftInteger)
        .Add("tag_width", CDBField.FieldTypes.cftInteger)
        .Add("contact_group")
        .Add("tab_number", CDBField.FieldTypes.cftLong)

        .Item(CustomFinderFields.CustomFinder).PrimaryKey = True

        .Item(CustomFinderFields.Client).PrimaryKey = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "cf"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "custom_finders"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property CustomFinderCode() As Integer
      Get
        Return mvClassFields(CustomFinderFields.CustomFinder).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CustomFinderDesc() As String
      Get
        Return mvClassFields(CustomFinderFields.CustomFinderDesc).Value
      End Get
    End Property
    Public ReadOnly Property Client() As String
      Get
        Return mvClassFields(CustomFinderFields.Client).Value
      End Get
    End Property
    Public ReadOnly Property DbName() As String
      Get
        Return mvClassFields(CustomFinderFields.DbName).Value
      End Get
    End Property
    Public ReadOnly Property SelectSql() As String
      Get
        Return mvClassFields(CustomFinderFields.SelectSql).Value
      End Get
    End Property
    Public ReadOnly Property TagPosition() As Integer
      Get
        Return mvClassFields(CustomFinderFields.TagPosition).IntegerValue
      End Get
    End Property
    Public ReadOnly Property TagWidth() As Integer
      Get
        Return mvClassFields(CustomFinderFields.TagWidth).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(CustomFinderFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(CustomFinderFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property ContactGroup() As String
      Get
        Return mvClassFields(CustomFinderFields.ContactGroup).Value
      End Get
    End Property
    Public ReadOnly Property TabNumber() As Integer
      Get
        Return mvClassFields(CustomFinderFields.TabNumber).IntegerValue
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Private mvCustomFinder As Integer
    Private mvSelectSQL As String
    Private mvGotValues As Boolean

    Public Overloads Sub Init(ByVal pCustomFinder As Integer, ByVal pSelectSQL As String)
      mvCustomFinder = pCustomFinder
      mvSelectSQL = pSelectSQL.TrimEnd(";"c)
    End Sub

    Public Sub AddRestriction(ByVal pControl As CustomFinderControl, ByVal pSelectItem As CDBField)
      'Got a control for this finder
      If pSelectItem.Value.Length > 0 Then
        'First see if there is an alias for the attribute in question
        Dim vFieldName As String = GetAlias(pControl.TableName) & "." & pControl.AttributeName
        Dim vValue As String = pSelectItem.Value
        If pControl.Type = CDBField.FieldTypes.cftCharacter OrElse pControl.Type = CDBField.FieldTypes.cftUnicode Then
          If pSelectItem.Value.Contains("*") AndAlso pControl.AllowUserWildcards = False Then
            'BR12429: .NET FindContact/FindOrganisation web services
            RaiseError(DataAccessErrors.daeWildcardsNotAllowedCustomFinder)
          Else
            If pControl.AutomaticWildcards = CustomFinderControl.UserWildcardOptions.WildcardAtStart OrElse pControl.AutomaticWildcards = CustomFinderControl.UserWildcardOptions.WildcardAtStartAndEnd Then
              If Not vValue.StartsWith("*") Then vValue = "*" & vValue
            End If
            If pControl.AutomaticWildcards = CustomFinderControl.UserWildcardOptions.WildcardAtEnd OrElse pControl.AutomaticWildcards = CustomFinderControl.UserWildcardOptions.WildcardAtStartAndEnd Then
              If Not vValue.EndsWith("*") Then vValue &= "*"
            End If
          End If
          mvSelectSQL = mvSelectSQL.Replace("?", vFieldName & mvEnv.Connection.DBLike(vValue, pSelectItem.FieldType) & " AND ?")
          mvSelectSQL = mvSelectSQL.Replace("#", vFieldName & mvEnv.Connection.DBLike(vValue, pSelectItem.FieldType) & " AND #")
        Else
          mvSelectSQL = mvSelectSQL.Replace("?", vFieldName & mvEnv.Connection.SQLLiteral("=", pControl.Type, vValue) & " AND ?")
          mvSelectSQL = mvSelectSQL.Replace("#", vFieldName & mvEnv.Connection.SQLLiteral("=", pControl.Type, vValue) & " AND #")
        End If
        mvGotValues = True
      End If
    End Sub

    Private Function GetAlias(ByVal pTableName As String) As String
      Dim vAlias As String = ""
      Dim vPos As Integer = mvSelectSQL.IndexOf(" " & pTableName & " ")
      If vPos > 0 Then
        vAlias = Substring(mvSelectSQL, vPos + pTableName.Length + 2)
        vAlias = vAlias.Replace(vbCr, " ")
        vAlias = vAlias.Replace(vbLf, " ")
        vPos = vAlias.IndexOf(" ")
        If vPos > 0 Then vAlias = vAlias.Substring(0, vPos)
        vPos = vAlias.IndexOf(",")
        If vPos >= 0 Then vAlias = vAlias.Substring(0, vPos)
        vAlias = vAlias.Trim
      End If
      If vAlias.Length = 0 OrElse vAlias.ToLower.StartsWith("where") Then vAlias = pTableName
      Return vAlias
    End Function

    Public Function GetContactNumbers() As String

      Dim vNumbers As New StringBuilder

      If mvGotValues Then
        'Is there something to look at
        If mvSelectSQL.EndsWith(" AND ?") Then mvSelectSQL = Substring(mvSelectSQL, 0, Len(mvSelectSQL) - 6)
        If mvSelectSQL.EndsWith(" AND #") Then mvSelectSQL = Substring(mvSelectSQL, 0, Len(mvSelectSQL) - 6)
        mvSelectSQL = mvSelectSQL.Replace("?", "")
        mvSelectSQL = mvSelectSQL.Replace("#", "")
        Dim vNumber As String
        Dim vRS As CDBRecordSet = New SQLStatement(mvEnv.Connection, mvSelectSQL).GetRecordSet
        While vRS.Fetch
          vNumber = vRS.Fields("contact_number").Value
          If vNumber.Length > 0 Then
            If vNumbers.Length = 0 Then vNumbers.Append(vNumber) Else vNumbers.Append("," & vNumber)
          End If
        End While
        vRS.CloseRecordSet()
        If vNumbers.Length = 0 Then vNumbers.Append("0")
      End If
      Return vNumbers.ToString
    End Function

#End Region
  End Class
End Namespace
