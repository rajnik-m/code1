Namespace Access

  Public Class MembershipEntitlement
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum MembershipEntitlementFields
      AllFields = 0
      MembershipType
      Product
      Rate
      MemberOrPayer
      Quantity
      RateToUse
      ProRateChargeMethod
      AddCondition
      Priority
      CmtRefundProduct
      CmtRefundRate
      CmtExcessPayment
      CmtProrateOldCosts
      CmtProrateNewCosts
      SequenceNumber
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .SetPrefixRequired = True
        .Add("membership_type")
        .Add("product")
        .Add("rate")
        .Add("member_or_payer")
        .Add("quantity", CDBField.FieldTypes.cftInteger)
        .Add("rate_to_use")
        .Add("pro_rate_charge_method")
        .Add("add_condition")
        .Add("priority")
        .Add("cmt_refund_product")
        .Add("cmt_refund_rate")
        .Add("cmt_excess_payment")
        .Add("cmt_prorate_old_costs")
        .Add("cmt_prorate_new_costs")
        .Add("sequence_number")
        .Item(MembershipEntitlementFields.MembershipType).PrimaryKey = True
        .Item(MembershipEntitlementFields.Product).PrimaryKey = True
        .Item(MembershipEntitlementFields.MemberOrPayer).PrimaryKey = True
        .Item(MembershipEntitlementFields.Priority).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cbdMembershipEntitlementPriority)
        Dim vAdvancedCMT As Boolean = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbAdvanceCMT)
        .Item(MembershipEntitlementFields.CmtRefundProduct).InDatabase = vAdvancedCMT
        .Item(MembershipEntitlementFields.CmtRefundRate).InDatabase = vAdvancedCMT
        .Item(MembershipEntitlementFields.CmtExcessPayment).InDatabase = vAdvancedCMT
        .Item(MembershipEntitlementFields.CmtProrateOldCosts).InDatabase = vAdvancedCMT
        .Item(MembershipEntitlementFields.CmtProrateNewCosts).InDatabase = vAdvancedCMT
        .Item(MembershipEntitlementFields.SequenceNumber).InDatabase = vAdvancedCMT
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "me"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "membership_entitlement"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      Me.New(pEnv, False)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property MembershipTypeCode() As String
      Get
        Return mvClassFields(MembershipEntitlementFields.MembershipType).Value
      End Get
    End Property
    Public ReadOnly Property ProductCode() As String
      Get
        Return mvClassFields(MembershipEntitlementFields.Product).Value
      End Get
    End Property
    Public ReadOnly Property RateCode() As String
      Get
        Return mvClassFields(MembershipEntitlementFields.Rate).Value
      End Get
    End Property
    Public ReadOnly Property MemberOrPayer() As String
      Get
        Return mvClassFields(MembershipEntitlementFields.MemberOrPayer).Value
      End Get
    End Property
    Public ReadOnly Property Quantity() As Integer
      Get
        Return mvClassFields(MembershipEntitlementFields.Quantity).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(MembershipEntitlementFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(MembershipEntitlementFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property ProRateChargeMethod() As MembershipEntitlementProRatingChargeTypes
      Get
        Select Case mvClassFields.Item(MembershipEntitlementFields.ProRateChargeMethod).Value
          Case "O"
            ProRateChargeMethod = MembershipEntitlementProRatingChargeTypes.meprctFullTermOnly
          Case "F"
            ProRateChargeMethod = MembershipEntitlementProRatingChargeTypes.meprctFullAmount
          Case "N"
            ProRateChargeMethod = MembershipEntitlementProRatingChargeTypes.meprctNeverCharge
          Case Else
            ProRateChargeMethod = MembershipEntitlementProRatingChargeTypes.meprctProRate
        End Select
      End Get
    End Property
    Public ReadOnly Property AddCondition() As MembershipEntitlementAddConditions
      Get
        Select Case mvClassFields.Item(MembershipEntitlementFields.AddCondition).Value
          Case "DD"
            Return MembershipEntitlementAddConditions.meacIfDirectDebit
          Case "ND"
            Return MembershipEntitlementAddConditions.meacIfNotDirectDebit
          Case Else
            Return MembershipEntitlementAddConditions.meacAlways
        End Select
      End Get
    End Property
    Public ReadOnly Property RateToUse() As MembershipEntitlementRateUsageTypes
      Get
        Select Case mvClassFields.Item(MembershipEntitlementFields.RateToUse).Value
          Case "M"
            RateToUse = MembershipEntitlementRateUsageTypes.mertMembershipPricingLine
          Case Else
            RateToUse = MembershipEntitlementRateUsageTypes.mertEntitlement
        End Select
      End Get
    End Property
    ''' <summary>No Longer Supported.</summary>
    Public ReadOnly Property Priority() As String
      Get
        Return mvClassFields.Item(MembershipEntitlementFields.Priority).Value
      End Get
    End Property
    Public ReadOnly Property CMTRefundProductCode() As String
      Get
        Return mvClassFields.Item(MembershipEntitlementFields.CmtRefundProduct).Value
      End Get
    End Property
    Public ReadOnly Property CMTRefundRateCode() As String
      Get
        Return mvClassFields.Item(MembershipEntitlementFields.CmtRefundRate).Value
      End Get
    End Property
    Public ReadOnly Property CMTExcessPaymentCode() As String
      Get
        Return mvClassFields.Item(MembershipEntitlementFields.CmtExcessPayment).Value
      End Get
    End Property
    Public ReadOnly Property CMTProrateOldCostsCode() As String
      Get
        Return mvClassFields.Item(MembershipEntitlementFields.CmtProrateOldCosts).Value
      End Get
    End Property
    Public ReadOnly Property CMTProrateNewCostsCode() As String
      Get
        Return mvClassFields.Item(MembershipEntitlementFields.CmtProrateNewCosts).Value
      End Get
    End Property
    Public ReadOnly Property SequenceNumber() As Integer
      Get
        'Could be null
        Return mvClassFields.Item(MembershipEntitlementFields.SequenceNumber).IntegerValue
      End Get
    End Property

#End Region

#Region "Non-AutoGenerated Code"

    Private mvAdditionalFields As Boolean
    Private mvProductRate As ProductRate
    Private mvCMTExcessPayment As CmtExcessPayment

    Public Sub New(ByVal pEnv As CDBEnvironment, ByVal pAdditionalFields As Boolean)
      MyBase.New(pEnv)
      mvProductRate = New ProductRate(pEnv)
      mvAdditionalFields = pAdditionalFields
    End Sub

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvProductRate.Init()
      mvCMTExcessPayment = Nothing
    End Sub

    Protected Overrides Sub AddAdditionalFields()
      If mvAdditionalFields Then
        With mvClassFields
          .Add("current_price", CDBField.FieldTypes.cftNumeric).PrefixRequired = False
          .Add("future_price", CDBField.FieldTypes.cftNumeric).PrefixRequired = False
          .Add("price_change_date", CDBField.FieldTypes.cftDate).PrefixRequired = False
          .Add("subscription").PrefixRequired = False
          .Add("despatch_method").PrefixRequired = False
          .Add("product_desc").PrefixRequired = False
          .Add("rate_desc").PrefixRequired = False
          .Add("uses_product_numbers").PrefixRequired = False
          .Add("use_modifiers").PrefixRequired = False
          .Item("use_modifiers").InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbRateModifier)
          .Add("price_is_percentage").PrefixRequired = False
          .Item("price_is_percentage").InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPriceIsPercentage)
          .Add("product_vat_category").PrefixRequired = False
          .Add("vat_exclusive").PrefixRequired = False
        End With
      End If
    End Sub

    Public ReadOnly Property ProductRate() As ProductRate
      Get
        If Not mvProductRate.IsValid Then
          mvProductRate.InitForPrice(ProductCode, RateCode, mvClassFields("current_price").DoubleValue, mvClassFields("future_price").DoubleValue, mvClassFields("price_change_date").Value, mvClassFields("use_modifiers").Value, If(mvClassFields("price_is_percentage").Value.Length > 0, mvClassFields("price_is_percentage").Value, "N"), mvClassFields("vat_exclusive").Bool)
        End If
        Return mvProductRate
      End Get
    End Property

    Public ReadOnly Property DespatchMethod() As String
      Get
        Return mvClassFields("despatch_method").Value
      End Get
    End Property
    Public ReadOnly Property Subscription() As Boolean
      Get
        Return mvClassFields("subscription").Bool
      End Get
    End Property
    Public ReadOnly Property ProductDesc() As String
      Get
        Return mvClassFields("product_desc").Value
      End Get
    End Property
    Public ReadOnly Property RateDesc() As String
      Get
        Return mvClassFields("rate_desc").Value
      End Get
    End Property
    Public ReadOnly Property UsesProductNumbers() As Boolean
      Get
        Return mvClassFields("uses_product_numbers").Bool
      End Get
    End Property

    Friend ReadOnly Property AddConditionCode() As String
      Get
        Dim vCode As String = mvClassFields.Item(MembershipEntitlementFields.AddCondition).Value
        If vCode.Length = 0 Then
          Return "AL"
        Else
          Return vCode
        End If
      End Get
    End Property
    Friend ReadOnly Property ProRateChargeMethodCode() As String
      Get
        Dim vMethod As String = mvClassFields.Item(MembershipEntitlementFields.ProRateChargeMethod).Value
        If vMethod.Length = 0 Then
          Return "P"
        Else
          Return vMethod
        End If
      End Get
    End Property
    Friend ReadOnly Property RateToUseCode() As String
      Get
        Dim vCode As String = mvClassFields.Item(MembershipEntitlementFields.RateToUse).Value
        If vCode.Length = 0 Then
          Return "E"
        Else
          Return vCode
        End If
      End Get
    End Property

    Public Enum MembershipEntitlementRateUsageTypes
      mertEntitlement = 0 '(default) Use rate from the entitlement
      mertMembershipPricingLine 'Use rate from the membership pricing line
    End Enum

    Public Enum MembershipEntitlementAddConditions
      meacAlways = 0 '(default) Always add this entitlement
      meacIfDirectDebit 'Only add if direct debit
      meacIfNotDirectDebit 'Only add if not direct debit
    End Enum

    Public Enum MembershipEntitlementProRatingChargeTypes
      meprctProRate = 0 'Pro-Rate charge for initial period
      meprctFullTermOnly 'Only charge if initial period is full term
      meprctFullAmount 'Always charge the full amount for initial period
      meprctNeverCharge 'Never charge on initial period
    End Enum

    Public Enum MembershipEntitlementTypes
      metAnyMember
      metAdultMember
      metJuniorMember
      metPayer
    End Enum

    Public ReadOnly Property MembershipEntitlementType() As MembershipEntitlementTypes
      Get
        Select Case mvClassFields.Item(MembershipEntitlementFields.MemberOrPayer).Value
          Case "A"
            Return MembershipEntitlementTypes.metAdultMember
          Case "J"
            Return MembershipEntitlementTypes.metJuniorMember
          Case "M"
            Return MembershipEntitlementTypes.metAnyMember
          Case "P"
            Return MembershipEntitlementTypes.metPayer
        End Select
      End Get
    End Property

    Public ReadOnly Property MemberEntitlement() As Boolean
      Get
        Select Case MemberOrPayer
          Case "M", "A", "J"
            Return True
        End Select
      End Get
    End Property

    Public ReadOnly Property PayerEntitlement() As Boolean
      Get
        Return MemberOrPayer = "P"
      End Get
    End Property

    Public ReadOnly Property EntitlementProductVATCategory() As String
      Get
        Return mvClassFields("product_vat_category").Value
      End Get
    End Property

    Public ReadOnly Property EntitlementPriority() As Integer
      Get
        Return CInt(If(mvClassFields("priority").Value = Nothing, "0", mvClassFields("priority").Value))
      End Get
    End Property

    Public Function CheckEntitlementTypeValid(ByVal pMembershipType As MembershipType, ByVal pJoinedDate As String, Optional ByVal pDOB As String = "", Optional ByVal pAgeOverride As Integer = 0) As Boolean
      'Entitlements depend on junior or adult
      Dim vAdult As Boolean
      Select Case pMembershipType.MembershipLevel
        Case "A"
          Return (MembershipEntitlementType <> MembershipEntitlementTypes.metJuniorMember)
        Case "J"
          Return (MembershipEntitlementType <> MembershipEntitlementTypes.metAdultMember)
        Case "B"
          Select Case MembershipEntitlementType
            Case MembershipEntitlementTypes.metAdultMember, MembershipEntitlementTypes.metJuniorMember
              If pAgeOverride > 0 And pAgeOverride < mvEnv.JuniorAgeLimit Then
                vAdult = False 'Junior due to Age Override
              Else
                If IsDate(pDOB) Then
                  If DateAdd(DateInterval.Year, mvEnv.JuniorAgeLimit, CDate(pDOB)) < CDate(pJoinedDate) Then
                    vAdult = True 'DOB over limit for Juniors
                  Else
                    vAdult = False 'DOB makes them a Junior
                  End If
                Else
                  vAdult = True 'No DOB so have to assume adult
                End If
              End If
              If vAdult Then
                Return (MembershipEntitlementType = MembershipEntitlementTypes.metAdultMember)
              Else
                Return (MembershipEntitlementType = MembershipEntitlementTypes.metJuniorMember)
              End If
            Case Else 'metAnyMember
              Return True
          End Select
      End Select

    End Function

    Public ReadOnly Property CMTExcessPayment() As CmtExcessPayment
      Get
        If mvCMTExcessPayment Is Nothing Then
          mvCMTExcessPayment = New CmtExcessPayment(mvEnv)
          If CMTExcessPaymentCode.Length > 0 Then
            mvCMTExcessPayment.Init(CMTExcessPaymentCode)
          Else
            mvCMTExcessPayment.Init()
          End If
        End If
        Return mvCMTExcessPayment
      End Get
    End Property

    Public ReadOnly Property CMTProrateOldCosts() As MembershipType.CMTProrateCosts
      Get
        Return MembershipType.GetCMTProrateCosts(CMTProrateOldCostsCode)
      End Get
    End Property
    Public ReadOnly Property CMTProrateNewCosts() As MembershipType.CMTProrateCosts
      Get
        Return MembershipType.GetCMTProrateCosts(CMTProrateNewCostsCode)
      End Get
    End Property

#End Region

  End Class
End Namespace
