Namespace Access
  Public Class MembershipType
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum MembershipTypeFields
      AllFields = 0
      MembershipType
      MembershipTypeDesc
      MembershipLevel
      SingleMembership
      SetNumberOfMembers
      MembersPerOrder
      Activity
      ActivityValue
      SuspensionGrace
      BranchMembership
      VotingRights
      VotingRightsDelay
      Company
      PayerRequired
      ChargeIndividualMembers
      Annual
      FirstPeriodsProduct
      FirstPeriodsRate
      SubsequentPeriodsProduct
      SubsequentPeriodsRate
      MaxFreeAssociates
      MailingSuppression
      MaxJuniorAge
      BranchRate
      AssociateMembershipType
      CancelledAssociateProduct
      CancelledAssociateRate
      UsePositionBranch
      MembershipTerm
      ApprovalMembership
      AdultGiftMemberEligibleGa
      FixedCycle
      MembershipCard
      MembershipCardDuration
      ExpiryText
      Recipient1
      Recipient2
      Recipient3
      Relationship
      CardOrder
      SubsequentMembershipType
      SubsequentTrigger
      SubsequentTriggerActivity
      SubsequentTriggerActValue
      AllowAsFirstType
      WebPublish
      LongDescription
      FirstPeriodsRefundProduct
      FirstPeriodsRefundRate
      SubsequentRefundProduct
      SubsequentRefundRate
      CmtExcessPayment
      CmtProrateOldCosts
      CmtProrateNewCosts
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("membership_type")
        .Add("membership_type_desc")
        .Add("membership_level")
        .Add("single_membership")
        .Add("set_number_of_members")
        .Add("members_per_order", CDBField.FieldTypes.cftInteger)
        .Add("activity")
        .Add("activity_value")
        .Add("suspension_grace", CDBField.FieldTypes.cftInteger)
        .Add("branch_membership")
        .Add("voting_rights")
        .Add("voting_rights_delay", CDBField.FieldTypes.cftInteger)
        .Add("company")
        .Add("payer_required")
        .Add("charge_individual_members")
        .Add("annual")
        .Add("first_periods_product")
        .Add("first_periods_rate")
        .Add("subsequent_periods_product")
        .Add("subsequent_periods_rate")
        .Add("max_free_associates", CDBField.FieldTypes.cftInteger)
        .Add("mailing_suppression")
        .Add("max_junior_age", CDBField.FieldTypes.cftInteger)
        .Add("branch_rate")
        .Add("associate_membership_type")
        .Add("cancelled_associate_product")
        .Add("cancelled_associate_rate")
        .Add("use_position_branch")
        .Add("membership_term", CDBField.FieldTypes.cftInteger)
        .Add("approval_membership")
        .Add("adult_gift_member_eligible_ga")
        .Add("fixed_cycle")
        .Add("membership_card")
        .Add("membership_card_duration", CDBField.FieldTypes.cftInteger)
        .Add("expiry_text")
        .Add("recipient_1")
        .Add("recipient_2")
        .Add("recipient_3")
        .Add("relationship")
        .Add("card_order", CDBField.FieldTypes.cftInteger)
        .Add("subsequent_membership_type")
        .Add("subsequent_trigger")
        .Add("subsequent_trigger_activity")
        .Add("subsequent_trigger_act_value")
        .Add("allow_as_first_type")
        .Add("web_publish")
        .Add("long_description")
        .Add("first_periods_refund_product")
        .Add("first_periods_refund_rate")
        .Add("subsequent_refund_product")
        .Add("subsequent_refund_rate")
        .Add("cmt_excess_payment")
        .Add("cmt_prorate_old_costs")
        .Add("cmt_prorate_new_costs")

        .Item(MembershipTypeFields.MembershipType).PrimaryKey = True
        .Item(MembershipTypeFields.WebPublish).PrefixRequired = True
        .Item(MembershipTypeFields.AllowAsFirstType).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataAllowAsFirstType)
        .Item(MembershipTypeFields.WebPublish).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbMembershipTypesWebPublish)
        .Item(MembershipTypeFields.LongDescription).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbMembershipTypesWebPublish)
        Dim vAdvancedCMT As Boolean = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbAdvanceCMT)
        .Item(MembershipTypeFields.FirstPeriodsRefundProduct).InDatabase = vAdvancedCMT
        .Item(MembershipTypeFields.FirstPeriodsRefundRate).InDatabase = vAdvancedCMT
        .Item(MembershipTypeFields.SubsequentRefundProduct).InDatabase = vAdvancedCMT
        .Item(MembershipTypeFields.SubsequentRefundRate).InDatabase = vAdvancedCMT
        .Item(MembershipTypeFields.CmtExcessPayment).InDatabase = vAdvancedCMT
        .Item(MembershipTypeFields.CmtProrateOldCosts).InDatabase = vAdvancedCMT
        .Item(MembershipTypeFields.CmtProrateNewCosts).InDatabase = vAdvancedCMT
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "mt"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "membership_types"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property WebPublish As Boolean
      Get
        Return mvClassFields(MembershipTypeFields.WebPublish).Bool
      End Get
    End Property

    Public ReadOnly Property LongDescription As String
      Get
        Return mvClassFields(MembershipTypeFields.LongDescription).Value
      End Get
    End Property

    Public ReadOnly Property MembershipTypeCode() As String
      Get
        Return mvClassFields(MembershipTypeFields.MembershipType).Value
      End Get
    End Property
    Public ReadOnly Property MembershipTypeDesc() As String
      Get
        Return mvClassFields(MembershipTypeFields.MembershipTypeDesc).Value
      End Get
    End Property
    Public ReadOnly Property MembershipLevel() As String
      Get
        Return mvClassFields(MembershipTypeFields.MembershipLevel).Value
      End Get
    End Property
    Public ReadOnly Property SingleMembership() As Boolean
      Get
        Return mvClassFields(MembershipTypeFields.SingleMembership).Bool
      End Get
    End Property
    Public ReadOnly Property SetNumberOfMembers() As Boolean
      Get
        Return mvClassFields(MembershipTypeFields.SetNumberOfMembers).Bool
      End Get
    End Property
    Public ReadOnly Property MembersPerOrder() As Integer
      Get
        Return mvClassFields(MembershipTypeFields.MembersPerOrder).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Activity() As String
      Get
        Return mvClassFields(MembershipTypeFields.Activity).Value
      End Get
    End Property
    Public ReadOnly Property ActivityValue() As String
      Get
        Return mvClassFields(MembershipTypeFields.ActivityValue).Value
      End Get
    End Property
    Public ReadOnly Property SuspensionGrace() As Integer
      Get
        Return mvClassFields(MembershipTypeFields.SuspensionGrace).IntegerValue
      End Get
    End Property
    Public ReadOnly Property BranchMembership() As Boolean
      Get
        Return mvClassFields(MembershipTypeFields.BranchMembership).Bool
      End Get
    End Property
    Public ReadOnly Property VotingRights() As Boolean
      Get
        Return mvClassFields(MembershipTypeFields.VotingRights).Bool
      End Get
    End Property
    Public ReadOnly Property VotingRightsDelay() As Integer
      Get
        Return mvClassFields(MembershipTypeFields.VotingRightsDelay).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Company() As String
      Get
        Return mvClassFields(MembershipTypeFields.Company).Value
      End Get
    End Property
    Public ReadOnly Property PayerRequired() As String
      Get
        Return mvClassFields(MembershipTypeFields.PayerRequired).Value
      End Get
    End Property
    Public ReadOnly Property ChargeIndividualMembers() As String
      Get
        Return mvClassFields(MembershipTypeFields.ChargeIndividualMembers).Value
      End Get
    End Property
    Public ReadOnly Property Annual() As String
      Get
        Return mvClassFields(MembershipTypeFields.Annual).Value
      End Get
    End Property
    Public ReadOnly Property FirstPeriodsProduct() As String
      Get
        Return mvClassFields(MembershipTypeFields.FirstPeriodsProduct).Value
      End Get
    End Property
    Public ReadOnly Property FirstPeriodsRate() As String
      Get
        If mvUserDefinedFirstRate.Length > 0 Then
          Return mvUserDefinedFirstRate
        Else
          Return mvClassFields(MembershipTypeFields.FirstPeriodsRate).Value
        End If
      End Get
    End Property
    Public ReadOnly Property SubsequentPeriodsProduct() As String
      Get
        Return mvClassFields(MembershipTypeFields.SubsequentPeriodsProduct).Value
      End Get
    End Property
    Public ReadOnly Property SubsequentPeriodsRate() As String
      Get
        If mvUserDefinedSubsequentRate.Length > 0 Then
          Return mvUserDefinedSubsequentRate
        Else
          Return mvClassFields(MembershipTypeFields.SubsequentPeriodsRate).Value
        End If
      End Get
    End Property
    Public ReadOnly Property MaxFreeAssociates() As Integer
      Get
        Return mvClassFields(MembershipTypeFields.MaxFreeAssociates).IntegerValue
      End Get
    End Property
    Public ReadOnly Property MailingSuppression() As String
      Get
        Return mvClassFields(MembershipTypeFields.MailingSuppression).Value
      End Get
    End Property
    Public ReadOnly Property MaxJuniorAge() As Integer
      Get
        Return mvClassFields(MembershipTypeFields.MaxJuniorAge).IntegerValue
      End Get
    End Property
    Public ReadOnly Property BranchRate() As String
      Get
        Return mvClassFields(MembershipTypeFields.BranchRate).Value
      End Get
    End Property
    Public ReadOnly Property AssociateMembershipType() As String
      Get
        Return mvClassFields(MembershipTypeFields.AssociateMembershipType).Value
      End Get
    End Property
    Public ReadOnly Property CancelledAssociateProduct() As String
      Get
        Return mvClassFields(MembershipTypeFields.CancelledAssociateProduct).Value
      End Get
    End Property
    Public ReadOnly Property CancelledAssociateRate() As String
      Get
        Return mvClassFields(MembershipTypeFields.CancelledAssociateRate).Value
      End Get
    End Property
    Public ReadOnly Property UsePositionBranch() As String
      Get
        Return mvClassFields(MembershipTypeFields.UsePositionBranch).Value
      End Get
    End Property
    Public ReadOnly Property MembershipTerm() As Integer
      Get
        With mvClassFields
          If .Item(MembershipTypeFields.MembershipTerm).Value = "" Then
            If Annual = "Y" Then
              .Item(MembershipTypeFields.MembershipTerm).Value = "1"
            ElseIf Annual = "N" Then
              .Item(MembershipTypeFields.MembershipTerm).Value = "99"
            End If
          End If
          Return mvClassFields(MembershipTypeFields.MembershipTerm).IntegerValue
        End With
      End Get
    End Property
    Public ReadOnly Property ApprovalMembership() As Boolean
      Get
        Return mvClassFields(MembershipTypeFields.ApprovalMembership).Bool
      End Get
    End Property
    Public ReadOnly Property AdultGiftMemberEligibleGiftAid() As Boolean
      Get
        Return mvClassFields(MembershipTypeFields.AdultGiftMemberEligibleGa).Bool
      End Get
    End Property
    Public ReadOnly Property FixedCycle() As String
      Get
        Return mvClassFields(MembershipTypeFields.FixedCycle).Value
      End Get
    End Property
    Public ReadOnly Property MembershipCard() As Boolean
      Get
        Return mvClassFields(MembershipTypeFields.MembershipCard).Bool
      End Get
    End Property
    Public ReadOnly Property MembershipCardDuration() As Integer
      Get
        Return mvClassFields(MembershipTypeFields.MembershipCardDuration).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExpiryText() As String
      Get
        Return mvClassFields(MembershipTypeFields.ExpiryText).Value
      End Get
    End Property
    Public ReadOnly Property Recipient1() As String
      Get
        Return mvClassFields(MembershipTypeFields.Recipient1).Value
      End Get
    End Property
    Public ReadOnly Property Recipient2() As String
      Get
        Return mvClassFields(MembershipTypeFields.Recipient2).Value
      End Get
    End Property
    Public ReadOnly Property Recipient3() As String
      Get
        Return mvClassFields(MembershipTypeFields.Recipient3).Value
      End Get
    End Property
    Public ReadOnly Property Relationship() As String
      Get
        Return mvClassFields(MembershipTypeFields.Relationship).Value
      End Get
    End Property
    Public ReadOnly Property CardOrder() As Integer
      Get
        Return mvClassFields(MembershipTypeFields.CardOrder).IntegerValue
      End Get
    End Property
    Public ReadOnly Property SubsequentMembershipType() As String
      Get
        Return mvClassFields(MembershipTypeFields.SubsequentMembershipType).Value
      End Get
    End Property
    Public ReadOnly Property SubsequentTrigger() As String
      Get
        Return mvClassFields(MembershipTypeFields.SubsequentTrigger).Value
      End Get
    End Property
    Public ReadOnly Property SubsequentTriggerActivity() As String
      Get
        Return mvClassFields(MembershipTypeFields.SubsequentTriggerActivity).Value
      End Get
    End Property
    Public ReadOnly Property SubsequentTriggerActValue() As String
      Get
        Return mvClassFields(MembershipTypeFields.SubsequentTriggerActValue).Value
      End Get
    End Property
    Public ReadOnly Property AllowAsFirstType() As Boolean
      Get
        Return mvClassFields(MembershipTypeFields.AllowAsFirstType).Bool
      End Get
    End Property
    Public ReadOnly Property FirstPeriodsRefundProductCode() As String
      Get
        Return mvClassFields.Item(MembershipTypeFields.FirstPeriodsRefundProduct).Value
      End Get
    End Property
    Public ReadOnly Property FirstPeriodsRefundRateCode() As String
      Get
        Return mvClassFields.Item(MembershipTypeFields.FirstPeriodsRefundRate).Value
      End Get
    End Property
    Public ReadOnly Property SubsequentPeriodsRefundProductCode() As String
      Get
        Return mvClassFields.Item(MembershipTypeFields.SubsequentRefundProduct).Value
      End Get
    End Property
    Public ReadOnly Property SubsequentPeriodsRefundRateCode() As String
      Get
        Return mvClassFields.Item(MembershipTypeFields.SubsequentRefundRate).Value
      End Get
    End Property
    Public ReadOnly Property CMTExcessPaymentCode() As String
      Get
        Return mvClassFields.Item(MembershipTypeFields.CmtExcessPayment).Value
      End Get
    End Property
    Public ReadOnly Property CMTProrateOldCostsCode() As String
      Get
        Return mvClassFields.Item(MembershipTypeFields.CmtProrateOldCosts).Value
      End Get
    End Property
    Public ReadOnly Property CMTProrateNewCostsCode() As String
      Get
        Return mvClassFields.Item(MembershipTypeFields.CmtProrateNewCosts).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(MembershipTypeFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(MembershipTypeFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Public Enum MembershipTypeTerms
      mtfAnnualTerm
      mtfMonthlyTerm
      mtfLifeTerm
      mtfWeeklyTerm
    End Enum

    Public Enum CMTProrateCosts
      Prorate
      FullCharge
      NoCharge
    End Enum

    Private mvSubsequentMshipInfoValid As Boolean
    Private mvSubsequentMshipActivity As String
    Private mvSubsequentMshipActValue As String
    Private mvEntitlements As List(Of MembershipEntitlement)
    Private mvProductDetailValid As Boolean
    Private mvSubscription As Boolean
    Private mvDespatchMethod As String
    Private mvFirstProductRateValid As Boolean
    Private mvSubsequentSubscription As Boolean
    Private mvSubsequentDespatchMethod As String
    Private mvSubsequentProductRateValid As Boolean
    Private mvUserDefinedFirstProductCode As String = String.Empty
    Private mvUserDefinedFirstRate As String
    Private mvUserDefinedSubsequentProductCode As String = String.Empty
    Private mvUserDefinedSubsequentRate As String
    Private mvGotMembershipGroupsData As Boolean
    Private mvUseMembershipGroups As Boolean
    Private mvCheckedAsAssociate As Boolean
    Private mvISAssociateType As Boolean
    Private mvRegionAmount As Double
    Private mvRegionAmountValid As Boolean
    Private mvMembershipPrices As CollectionList(Of MembershipPrice)
    Private mvGotMembershipPrices As Boolean
    Private mvGotPrimaryRate As Boolean
    Private mvPrimaryRate As String = ""
    Private mvProductRate As ProductRate
    Private mvSubsequentProductRate As ProductRate
    Private mvProductVATCategory As String
    Private mvSubsequentProductVATCategory As String
    Private mvCMTExcessPayment As CmtExcessPayment

    Protected Overrides Sub ClearFields()
      mvSubsequentMshipInfoValid = False
      mvSubsequentMshipActivity = ""
      mvSubsequentMshipActValue = ""
      mvUserDefinedFirstProductCode = String.Empty
      mvUserDefinedFirstRate = ""
      mvUserDefinedSubsequentProductCode = String.Empty
      mvUserDefinedSubsequentRate = ""
      mvProductDetailValid = False
      mvGotMembershipGroupsData = False
      mvCheckedAsAssociate = False
      mvRegionAmountValid = False
      mvGotMembershipPrices = False
      mvGotPrimaryRate = False
      mvProductRate = Nothing
      mvSubsequentProductRate = Nothing
      mvProductVATCategory = ""
      mvSubsequentProductVATCategory = ""
      mvCMTExcessPayment = Nothing
    End Sub

    Public ReadOnly Property AnnualSetting() As String
      Get
        'Added this to expose the actual setting of the Annual attribute as the Annual property of this class currently returns a Boolean
        Return mvClassFields.Item(MembershipTypeFields.Annual).Value
      End Get
    End Property

    Public Function IsAssociateType() As Boolean
      If Not mvCheckedAsAssociate Then
        If mvEnv.Connection.GetCount("membership_types", Nothing, "associate_membership_type = '" & MembershipTypeCode & "'") > 0 Then
          mvISAssociateType = True
        Else
          mvISAssociateType = False
        End If
        mvCheckedAsAssociate = True
      End If
      IsAssociateType = mvISAssociateType
    End Function

    Public Function GetEntitlementsDataTable() As CDBDataTable
      Return GetEntitlementsDataTable(0, "")
    End Function
    Friend Function GetEntitlementsDataTable(ByVal pModifierContactNumber As Integer, ByVal pRenewalDate As String) As CDBDataTable
      'Add Columns
      Dim vDT As New CDBDataTable
      vDT.AddColumnsFromList("ProductCode,RateCode,MemberOrPayer,Quantity,RateToUse,ProRateChargeMethod,AddCondition,CurrentPrice,FuturePrice,PriceChangeDate")
      With vDT.Columns
        .Item("Quantity").FieldType = CDBField.FieldTypes.cftInteger
        .Item("CurrentPrice").FieldType = CDBField.FieldTypes.cftNumeric
        .Item("FuturePrice").FieldType = CDBField.FieldTypes.cftNumeric
        .Item("PriceChangeDate").FieldType = CDBField.FieldTypes.cftDate
      End With
      'Add Row for each Entitlement
      Dim vRow As CDBDataRow
      For Each vEntitlement As MembershipEntitlement In Entitlements("", True)
        vRow = vDT.AddRow
        With vEntitlement
          vRow.Item("ProductCode") = .ProductCode
          vRow.Item("RateCode") = .RateCode
          vRow.Item("MemberOrPayer") = .MemberOrPayer
          vRow.Item("Quantity") = .Quantity.ToString
          vRow.Item("RateToUse") = .RateToUseCode
          vRow.Item("ProRateChargeMethod") = .ProRateChargeMethodCode
          vRow.Item("AddCondition") = .AddConditionCode
          vRow.Item("CurrentPrice") = .ProductRate.RenewalPrice(False, pModifierContactNumber, pRenewalDate).ToString
          vRow.Item("FuturePrice") = .ProductRate.RenewalPrice(True, pModifierContactNumber, pRenewalDate).ToString
          vRow.Item("PriceChangeDate") = .ProductRate.PriceChangeDate.ToString(CAREDateFormat)
        End With
      Next
      Return vDT
    End Function

    Public ReadOnly Property PaymentTerm() As MembershipTypeTerms
      Get
        Select Case Annual
          Case "Y"
            Return MembershipTypeTerms.mtfAnnualTerm
          Case "N"
            Return MembershipTypeTerms.mtfLifeTerm
          Case "M"
            Return MembershipTypeTerms.mtfMonthlyTerm
          Case "W"
            Return MembershipTypeTerms.mtfWeeklyTerm
        End Select
      End Get
    End Property

    Public ReadOnly Property SubsequentMembershipTypeActivity() As String
      Get
        If mvSubsequentMshipInfoValid = False Then GetSubsequentMshipInfo()
        SubsequentMembershipTypeActivity = mvSubsequentMshipActivity
      End Get
    End Property

    Public ReadOnly Property SubsequentMembershipTypeActivityValue() As String
      Get
        If mvSubsequentMshipInfoValid = False Then GetSubsequentMshipInfo()
        SubsequentMembershipTypeActivityValue = mvSubsequentMshipActValue
      End Get
    End Property

    Private Sub GetSubsequentMshipInfo()
      Dim vRecordSet As CDBRecordSet

      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT activity, activity_value FROM membership_types WHERE membership_type = '" & SubsequentMembershipType & "'")
      If vRecordSet.Fetch Then
        mvSubsequentMshipInfoValid = True
        With vRecordSet.Fields
          mvSubsequentMshipActivity = .Item("activity").Value
          mvSubsequentMshipActValue = .Item("activity_value").Value
        End With
      Else
        mvSubsequentMshipInfoValid = False
        mvSubsequentMshipActivity = ""
        mvSubsequentMshipActValue = ""
      End If
      vRecordSet.CloseRecordSet()
    End Sub

    Public Function Entitlements() As List(Of MembershipEntitlement)
      Return Entitlements("", True, False)
    End Function

    Public Function Entitlements(ByVal pRateToUse As String, ByVal pFirstPeriod As Boolean) As List(Of MembershipEntitlement)
      Return Entitlements(pRateToUse, pFirstPeriod, False)
    End Function

    Public Function Entitlements(ByVal pRateToUse As String, ByVal pFirstPeriod As Boolean, ByVal pReset As Boolean) As List(Of MembershipEntitlement)
      If mvEntitlements Is Nothing Or pReset Then
        Dim vEntitlement As New MembershipEntitlement(mvEnv, True)
        mvEntitlements = New List(Of MembershipEntitlement)
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("membership_type", MembershipTypeCode)
        vWhereFields.Add("me.rate_to_use", "", CDBField.FieldWhereOperators.fwoOpenBracket)
        vWhereFields.Add("me.rate_to_use#2", "E", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket)
        vWhereFields.AddJoin("me.product", "p.product")
        vWhereFields.AddJoin("p.product", "r.product")
        vWhereFields.AddJoin("r.rate", "me.rate")

        Dim vOrderBy As String = ""
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbAdvanceCMT) Then vOrderBy = mvEnv.Connection.DBIsNull("me.sequence_number", "0") 'Ensure nulls are first
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vEntitlement.GetRecordSetFields, "membership_entitlement me, products p, rates r", vWhereFields, vOrderBy)
        Dim vRecordSet As CDBRecordSet = vSQLStatement.GetRecordSet
        While vRecordSet.Fetch()
          vEntitlement = New MembershipEntitlement(mvEnv, True)
          vEntitlement.InitFromRecordSet(vRecordSet)
          mvEntitlements.Add(vEntitlement)
        End While
        vRecordSet.CloseRecordSet()

        If pRateToUse.Length = 0 Then
          If pFirstPeriod Then
            pRateToUse = FirstPeriodsRate
          Else
            pRateToUse = SubsequentPeriodsRate
          End If
        End If
        vWhereFields.Remove("me.rate_to_use#2")
        vWhereFields("me.rate_to_use").Value = "M"
        vWhereFields("me.rate_to_use").WhereOperator = CDBField.FieldWhereOperators.fwoEqual
        vWhereFields.Remove("r.rate")
        vWhereFields.Add("r.rate", pRateToUse)
        vRecordSet = vSQLStatement.GetRecordSet
        While vRecordSet.Fetch()
          vEntitlement = New MembershipEntitlement(mvEnv, True)
          vEntitlement.InitFromRecordSet(vRecordSet)
          mvEntitlements.Add(vEntitlement)
        End While
        vRecordSet.CloseRecordSet()
      End If
      Return mvEntitlements
    End Function

    Public ReadOnly Property ProductRate() As ProductRate
      Get
        ValidateProduct()
        Return mvProductRate
      End Get
    End Property

    Public ReadOnly Property SubsequentProductRate() As ProductRate
      Get
        ValidateProduct()
        Return mvSubsequentProductRate
      End Get
    End Property


    Public ReadOnly Property DespatchMethod() As String
      Get
        ValidateProduct()
        DespatchMethod = mvDespatchMethod
      End Get
    End Property

    Public ReadOnly Property Subscription() As Boolean
      Get
        ValidateProduct()
        Subscription = mvSubscription
      End Get
    End Property

    Private Sub ValidateProduct()
      Dim vRate As String

      If Not mvProductDetailValid Then
        mvSubscription = False
        mvDespatchMethod = ""
        mvFirstProductRateValid = False
        mvSubsequentSubscription = False
        mvSubsequentDespatchMethod = ""
        mvSubsequentProductRateValid = False
        mvProductVATCategory = ""
        mvSubsequentProductVATCategory = ""
        If FirstPeriodsProduct.Length > 0 And (FirstPeriodsRate.Length > 0 Or mvUserDefinedFirstRate.Length > 0) Then
          Dim vProductCode As String = FirstPeriodsProduct
          If mvUserDefinedFirstProductCode.Length > 0 Then vProductCode = mvUserDefinedFirstProductCode
          If mvUserDefinedFirstRate.Length > 0 Then
            vRate = mvUserDefinedFirstRate
          Else
            vRate = FirstPeriodsRate
          End If
          Dim vProduct As New Product(mvEnv)
          vProduct.InitWithRate(mvEnv, vProductCode, vRate)
          mvProductRate = vProduct.ProductRate
          mvSubscription = vProduct.Subscription
          mvDespatchMethod = vProduct.DespatchMethod
          mvProductVATCategory = vProduct.ProductVatCategory
          'VATExclusive
          mvProductDetailValid = True
          mvFirstProductRateValid = True
        End If
        If (SubsequentPeriodsProduct.Length > 0 And (SubsequentPeriodsRate.Length > 0 Or mvUserDefinedSubsequentRate.Length > 0)) Then
          Dim vProductCode As String = SubsequentPeriodsProduct
          If mvUserDefinedSubsequentProductCode.Length > 0 Then vProductCode = mvUserDefinedSubsequentProductCode
          If mvUserDefinedSubsequentRate.Length > 0 Then
            vRate = mvUserDefinedSubsequentRate
          Else
            vRate = SubsequentPeriodsRate
          End If
          Dim vSubsequentProduct As New Product(mvEnv)
          vSubsequentProduct.InitWithRate(mvEnv, vProductCode, vRate)
          mvSubsequentProductRate = vSubsequentProduct.ProductRate
          mvSubsequentSubscription = vSubsequentProduct.Subscription
          mvSubsequentDespatchMethod = vSubsequentProduct.DespatchMethod
          mvSubsequentProductVATCategory = vSubsequentProduct.ProductVatCategory
          'VATExclusive
          mvProductDetailValid = True
          mvSubsequentProductRateValid = True
        End If
      End If
    End Sub

    Public ReadOnly Property UseMembershipGroups() As Boolean
      Get
        If mvGotMembershipGroupsData = False Then
          mvUseMembershipGroups = (BranchMembership = True And (mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlMemberOrganisationGroup).Length > 0))
          mvGotMembershipGroupsData = True
        End If
        Return mvUseMembershipGroups
      End Get
    End Property

    Public Function FutureTypeValidation() As Boolean
      FutureTypeValidation = Not (MembersPerOrder <> 1 Or AssociateMembershipType.Length > 0) ' Or Not Annual)
    End Function

    Public Property UserDefinedFirstRate() As String
      Get
        Return mvUserDefinedFirstRate
      End Get
      Set(ByVal Value As String)
        mvProductDetailValid = False
        mvUserDefinedFirstRate = Value
        mvUserDefinedFirstProductCode = String.Empty
      End Set
    End Property
    Public Property UserDefinedSubsequentRate() As String
      Get
        Return mvUserDefinedSubsequentRate
      End Get
      Set(ByVal Value As String)
        mvProductDetailValid = False
        mvUserDefinedSubsequentRate = Value
        mvUserDefinedSubsequentProductCode = String.Empty
      End Set
    End Property

    Public ReadOnly Property RegionAmount() As Double
      Get
        If Not mvRegionAmountValid Then
          Dim vProduct As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlBranchProduct)
          If vProduct.Length > 0 And BranchRate.Length > 0 Then
            mvRegionAmount = DoubleValue(mvEnv.Connection.GetValue("SELECT current_price FROM products p, rates r WHERE p.product = '" & vProduct & "' AND p.product = r.product AND r.rate = '" & BranchRate & "'"))
            mvRegionAmountValid = True
          End If
        End If
        Return mvRegionAmount
      End Get
    End Property

    Public ReadOnly Property PrimaryMembershipRate(ByVal pPaymentMethod As String, ByVal pPaymentFrequency As String, ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer) As String
      Get
        System.Diagnostics.Debug.Assert(pPaymentMethod.Length > 0 And pPaymentFrequency.Length > 0, "")
        BuildMembershipPrices()
        Dim vMembershipPrice As MembershipPrice = MembershipPrice.GetValidMembershipPrice(mvEnv, mvMembershipPrices, MembershipTypeCode, pPaymentMethod, pPaymentFrequency, pContactNumber, pAddressNumber)
        If vMembershipPrice IsNot Nothing Then
          mvGotPrimaryRate = True
          mvPrimaryRate = vMembershipPrice.RateCode
        Else
          mvGotPrimaryRate = False
          mvPrimaryRate = ""
        End If
        Return mvPrimaryRate
      End Get
    End Property

    Public Function CheckValidMembershipPrice(ByVal pPaymentMethod As String, ByVal pPaymentFrequency As String, ByVal pRate As String, ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer) As Boolean
      System.Diagnostics.Debug.Assert(Len(pPaymentMethod) > 0 And Len(pPaymentFrequency) > 0 And Len(pRate) > 0, "")

      BuildMembershipPrices()
      'If we have a primary membership price for this membership type, payment method and frequency
      If MembershipPrice.HasPrimaryMembershipPrice(mvMembershipPrices, MembershipTypeCode, pPaymentMethod, pPaymentFrequency) Then
        'Check if there is any membership price for this rate
        Dim vMembershipPrice As MembershipPrice = MembershipPrice.GetValidMembershipPrice(mvEnv, mvMembershipPrices, MembershipTypeCode, pPaymentMethod, pPaymentFrequency, pContactNumber, pAddressNumber, False, pRate)
        If vMembershipPrice IsNot Nothing Then
          mvGotPrimaryRate = True
          mvPrimaryRate = vMembershipPrice.RateCode
        Else
          mvGotPrimaryRate = False
          mvPrimaryRate = ""
          Return False
        End If
      End If
      Return True
    End Function

    Private Sub BuildMembershipPrices()
      If Not mvGotMembershipPrices Then
        mvMembershipPrices = MembershipPrice.GetMembershipPrices(mvEnv, MembershipTypeCode)
        mvGotMembershipPrices = True
      End If
    End Sub

    Public ReadOnly Property SubsequentProductRateIsValid() As Boolean
      Get
        Return mvSubsequentProductRateValid
      End Get
    End Property

    Public ReadOnly Property HasMembershipPrices() As Boolean
      Get
        BuildMembershipPrices()
        HasMembershipPrices = mvMembershipPrices.Count > 0
      End Get
    End Property

    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      mvClassFields.Item(MembershipTypeFields.MembersPerOrder).Value = "1"
      mvClassFields.Item(MembershipTypeFields.WebPublish).Bool = False
    End Sub

    Public Sub ClearUserDefinedData()
      'Use this to clear the user defined data when you are getting the membership type object from CDBEnvironment
      'Currently used in DataImportCMT
      UserDefinedFirstRate = ""
      UserDefinedSubsequentRate = ""
      mvEntitlements = Nothing        'Reset this as it uses the first/subsequent rates
      mvUserDefinedFirstProductCode = String.Empty
      mvUserDefinedSubsequentProductCode = String.Empty
    End Sub

    Public ReadOnly Property ProductVATCategory() As String
      Get
        ValidateProduct()
        Return mvProductVATCategory
      End Get
    End Property

    Public ReadOnly Property SubsequentProductVATCategory() As String
      Get
        ValidateProduct()
        Return mvSubsequentProductVATCategory
      End Get
    End Property

    Public Function GetMembershipCMTPrices(ByVal pRate As ProductRate, ByVal pMemberContactNumber As Integer, ByVal pRenewalDate As String) As CDBDataTable
      'Add Membership Entitlements to CDBDatatable
      Dim vTable As CDBDataTable = GetEntitlementsDataTable(pMemberContactNumber, pRenewalDate)
      vTable.AddColumn("IsEntitlement", CDBField.FieldTypes.cftCharacter)
      Dim vRow As CDBDataRow
      For Each vRow In vTable.Rows
        vRow.Item("IsEntitlement") = "Y"
      Next

      'Now add the Membership product
      vRow = vTable.AddRow
      With pRate
        vRow.Item("ProductCode") = .ProductCode
        vRow.Item("RateCode") = .RateCode
        vRow.Item("Quantity") = "1"
        vRow.Item("CurrentPrice") = .RenewalPrice(False, pMemberContactNumber, pRenewalDate).ToString
        vRow.Item("FuturePrice") = .RenewalPrice(True, pMemberContactNumber, pRenewalDate).ToString
        vRow.Item("PriceChangeDate") = .PriceChangeDate.ToString(CAREDateFormat)
        vRow.Item("IsEntitlement") = "N"
      End With

      Return vTable
    End Function

    Public ReadOnly Property CMTExcessPayment() As CmtExcessPayment
      Get
        If mvCMTExcessPayment Is Nothing Then
          mvCMTExcessPayment = New CmtExcessPayment(mvEnv)
          If CMTExcessPaymentCode.Length > 0 Then
            mvCMTExcessPayment.Init(CMTExcessPaymentCode)
          Else
            mvCMTExcessPayment.Init()
          End If
        End If
        Return mvCMTExcessPayment
      End Get
    End Property

    Public ReadOnly Property CMTProrateOldCosts() As CMTProrateCosts
      Get
        Return GetCMTProrateCosts(CMTProrateOldCostsCode)
      End Get
    End Property
    Public ReadOnly Property CMTProrateNewCosts() As CMTProrateCosts
      Get
        Return GetCMTProrateCosts(CMTProrateNewCostsCode)
      End Get
    End Property

    Public Shared Function GetCMTProrateCosts(ByVal pCMTProrateCostCode As String) As CMTProrateCosts
      Select Case pCMTProrateCostCode
        Case "F"
          Return CMTProrateCosts.FullCharge
        Case "N"
          Return CMTProrateCosts.NoCharge
        Case Else
          Return CMTProrateCosts.Prorate
      End Select
    End Function

    ''' <summary>Sets the UserDefinedFirstRate and validates the internal First Periods Product and Rate codes.</summary>
    ''' <param name="pFirstProductRate">ProductRate containing the Product and Rate to be used for the first period</param>
    ''' <remarks>Only used by Renewals and Reminders to handle situation where both the Product and Rate have been changed.</remarks>
    Public Sub SetUserDefinedFirstPeriodsProductRate(ByVal pFirstProductRate As ProductRate)
      mvUserDefinedFirstProductCode = String.Empty
      mvUserDefinedFirstRate = String.Empty
      mvProductRate = Nothing
      mvFirstProductRateValid = False
      mvProductDetailValid = False
      If FirstPeriodsProduct.Equals(pFirstProductRate.ProductCode, System.StringComparison.InvariantCultureIgnoreCase) = False Then
        mvUserDefinedFirstProductCode = pFirstProductRate.ProductCode
        mvUserDefinedFirstRate = pFirstProductRate.RateCode
      ElseIf FirstPeriodsRate.Equals(pFirstProductRate.RateCode, System.StringComparison.InvariantCultureIgnoreCase) = False Then
        mvUserDefinedFirstRate = pFirstProductRate.RateCode
      End If
    End Sub

    ''' <summary>Sets the UserDefinedSubsequentRate and validates the internal Subsequent Periods Product and Rate codes.</summary>
    ''' <param name="pSubsequentProductRate">ProductRate containing the Product and Rate to be used for the subsequent period</param>
    ''' <remarks>Only used by Renewals and Reminders to handle situation where both the Product and Rate have been changed.</remarks>
    Public Sub SetUserDefinedSubsequentPeriodsProductRate(ByVal pSubsequentProductRate As ProductRate)
      mvUserDefinedSubsequentProductCode = String.Empty
      mvUserDefinedSubsequentRate = String.Empty
      mvSubsequentProductRate = Nothing
      mvSubsequentProductRateValid = False
      mvProductDetailValid = False
      If SubsequentPeriodsProduct.Equals(pSubsequentProductRate.ProductCode, System.StringComparison.InvariantCultureIgnoreCase) = False Then
        mvUserDefinedSubsequentProductCode = pSubsequentProductRate.ProductCode
        mvUserDefinedSubsequentRate = pSubsequentProductRate.RateCode
      ElseIf SubsequentPeriodsRate.Equals(pSubsequentProductRate.RateCode, System.StringComparison.InvariantCultureIgnoreCase) = False Then
        mvUserDefinedSubsequentRate = pSubsequentProductRate.RateCode
      End If
    End Sub

#End Region

  End Class

End Namespace
