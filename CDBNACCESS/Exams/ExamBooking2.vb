Imports System.Linq
Imports Advanced.Data.Merge
Imports Advanced.Data.Merge.Strategy
Imports Advanced.LanguageExtensions

Namespace Access

  <MergeStrategy(MergeStrategyType.ChangeParent)>
  Partial Public Class ExamBooking
    Inherits CARERecord
    Implements IMergeValidatable

#Region "Non AutoGenerated Code"

    Public ReadOnly Property TransactionProcessed() As Boolean
      Get
        Return BatchNumber > 0 And TransactionNumber > 0
      End Get
    End Property

    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      'If deleting an exam booking then need to delete all associated records
      Dim vUnitWhereFields As New CDBFields(New CDBField("exam_booking_id", ExamBookingId))
      Dim vSQL As New SQLStatement(mvEnv.Connection, "exam_booking_unit_id", "exam_booking_units", vUnitWhereFields)
      Dim vDeleteWhereFields As New CDBFields(New CDBField("exam_booking_unit_id", vSQL.SQL, CDBField.FieldWhereOperators.fwoIn Or CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoCloseBracket))
      Dim vWhereFields As New CDBFields
      vWhereFields.Add(mvClassFields(ExamBookingFields.ExamBookingId).Name, ExamBookingId)
      Dim vTransactionStarted As Boolean
      If Not mvEnv.Connection.InTransaction Then
        mvEnv.Connection.StartTransaction()
        vTransactionStarted = True
      End If
      Try
        'If the booking includes a unit which has a schedule then we must reduce the number of attempts on the exam student unit header
        ReduceNumberOfAttempts(0)
        Dim vExamBookingTransaction As New ExamBookingTransaction(mvEnv)
        Dim vExamBookingTransactions As List(Of ExamBookingTransaction)
        vExamBookingTransactions = vExamBookingTransaction.GetList(Of ExamBookingTransaction)(vExamBookingTransaction, vDeleteWhereFields)
        For Each vEBT In vExamBookingTransactions
          vEBT.Delete(pAmendedBy, pAudit, pJournalNumber)
        Next

        Dim vExamCandidateActivity As New ExamCandidateCategory(mvEnv)
        Dim vExamCanditateActivities As List(Of ExamCandidateCategory)
        vExamCanditateActivities = vExamCandidateActivity.GetList(Of ExamCandidateCategory)(vExamCandidateActivity, vDeleteWhereFields)
        For Each vECA In vExamCanditateActivities
          vECA.Delete(pAmendedBy, pAudit, pJournalNumber)
        Next

        For Each vExamBookingUnit In ExamBookingUnits
          vExamBookingUnit.Delete(pAmendedBy, pAudit, pJournalNumber)
        Next vExamBookingUnit
        MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
        AdjustSummary()
        If vTransactionStarted Then mvEnv.Connection.CommitTransaction()
      Catch ex As Exception
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Sub

    Private mvAllExamBookingUnits As List(Of ExamBookingUnit) = Nothing
    Public ReadOnly Property ExamBookingUnits As IEnumerable(Of ExamBookingUnit)
      Get
        If mvAllExamBookingUnits Is Nothing Then
          mvAllExamBookingUnits = New List(Of ExamBookingUnit)
          For Each vExamBookingUnitId As Integer In (From vData As DataRow In New SQLStatement(Environment.Connection,
                                                                         "exam_booking_unit_id",
                                                                         "exam_booking_units",
                                                                         New CDBFields({New CDBField("exam_booking_id",
                                                                                                      Me.ExamBookingId)})).GetDataTable
                                                     Select vData.Field(Of Integer)("exam_booking_unit_id"))
            Dim vExamBookingUnit As New ExamBookingUnit(Environment)
            vExamBookingUnit.InitWithPrimaryKey(New CDBFields({New CDBField("exam_booking_unit_id", vExamBookingUnitId)}))
            If vExamBookingUnit.Existing Then
              mvAllExamBookingUnits.Add(vExamBookingUnit)
            End If
          Next vExamBookingUnitId
        End If
        Return mvAllExamBookingUnits
      End Get
    End Property

    <MergeParent()>
    Public Property Contact As Contact
      Get
        If mvContact Is Nothing Then Me.Contact = Me.GetRelatedInstance(Of Contact)({ExamBookingFields.ContactNumber})
        Return mvContact
      End Get
      Set(value As Contact)
        mvContact = value
        If value IsNot Nothing AndAlso Me.ContactNumber <> value.ContactNumber Then
          Me.ContactNumber = value.ContactNumber
        End If
      End Set
    End Property

    Public Sub ReduceNumberOfAttempts(pExamBookingUnitId As Integer)
      'Need to find all the student unit header records that have a schedule and are associated with this booking
      Dim vSubWhereFields As New CDBFields
      vSubWhereFields.Add("eb.exam_booking_id", ExamBookingId)
      vSubWhereFields.Add("ebu.cancellation_reason", "", CDBField.FieldWhereOperators.fwoEqual)
      If pExamBookingUnitId > 0 Then vSubWhereFields.Add("ebu.exam_booking_unit_id", pExamBookingUnitId)
      vSubWhereFields.Add("ebu.exam_schedule_id", "", CDBField.FieldWhereOperators.fwoNotEqual)
      Dim vSubAnsiJoins As New AnsiJoins
      vSubAnsiJoins.Add("exam_student_header esh", "esuh.exam_student_header_id", "esh.exam_student_header_id")
      vSubAnsiJoins.Add("exam_bookings eb", "eb.contact_number", "esh.contact_number")
      vSubAnsiJoins.Add("exam_booking_units ebu", "eb.exam_booking_id", "ebu.exam_booking_id")
      vSubAnsiJoins.Add("exam_units eu", "ebu.exam_unit_id", "eu.exam_unit_id AND eu.exam_base_unit_id = esuh.exam_unit_id")
      Dim vSubSQL As New SQLStatement(mvEnv.Connection, "exam_student_unit_header_id", "exam_student_unit_header esuh", vSubWhereFields, "", vSubAnsiJoins)
      Dim vWhereFields As New CDBFields(New CDBField("exam_student_unit_header_id", CDBField.FieldTypes.cftInteger, String.Format(" ( {0} ) ", vSubSQL.SQL), CDBField.FieldWhereOperators.fwoIn))
      Dim vUpdateFields As New CDBFields(New CDBField("attempts", CDBField.FieldTypes.cftInteger, "attempts - 1"))
      mvEnv.Connection.UpdateRecords("exam_student_unit_header", vUpdateFields, vWhereFields, False)
    End Sub

    Public Sub SetTransactionInfo(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer)
      mvClassFields(ExamBookingFields.BatchNumber).IntegerValue = pBatchNumber
      mvClassFields(ExamBookingFields.TransactionNumber).IntegerValue = pTransactionNumber
    End Sub

    Public Sub CheckCanCancel()
      If CancellationReason.Length > 0 Then
        RaiseError(DataAccessErrors.daeBookingAlreadyCancelled, CStr(ExamBookingId))
      End If
      If BatchNumber > 0 AndAlso Not Batch.PostedToNominal Then
        RaiseError(DataAccessErrors.daeBookingBatchNotPosted, CStr(BatchNumber))
      End If
    End Sub

    Private mvBatch As Batch
    Private mvAdjBatchTransColl As CollectionList(Of BatchTransaction)  'Used for Online Authorisation
    Private mvCancellationFeeTrans As BatchTransaction  'Used for Online Authorisation
    Private mvExamBookingUnits As List(Of ExamBookingUnit)
    Private mvExamBookingTransactions As List(Of ExamBookingTransaction)
    Private mvContact As Contact

    Public ReadOnly Property UnCancelledExamBookingUnits As List(Of ExamBookingUnit)
      Get
        If mvExamBookingUnits Is Nothing Then
          Dim vExamBookingUnit As New ExamBookingUnit(mvEnv)
          Dim vWhereFields As New CDBFields(New CDBField("exam_booking_id", ExamBookingId))
          vWhereFields.Add("cancellation_reason")
          mvExamBookingUnits = vExamBookingUnit.GetList(Of ExamBookingUnit)(vExamBookingUnit, vWhereFields)
        End If
        Return mvExamBookingUnits
      End Get
    End Property

    Public ReadOnly Property UnCancelledExamBookingTransactions As List(Of ExamBookingTransaction)
      Get
        If mvExamBookingTransactions Is Nothing Then
          Dim vExamBookingTransaction As New ExamBookingTransaction(mvEnv)
          Dim vUnitWhereFields As New CDBFields(New CDBField("exam_booking_id", ExamBookingId))
          vUnitWhereFields.Add("cancellation_reason")
          Dim vSQL As New SQLStatement(mvEnv.Connection, "exam_booking_unit_id", "exam_booking_units", vUnitWhereFields)
          Dim vWhereFields As New CDBFields(New CDBField("exam_booking_unit_id", vSQL.SQL, CDBField.FieldWhereOperators.fwoIn Or CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoCloseBracket))
          mvExamBookingTransactions = vExamBookingTransaction.GetList(Of ExamBookingTransaction)(vExamBookingTransaction, vWhereFields)
        End If
        Return mvExamBookingTransactions
      End Get
    End Property

    Public Sub Cancel(pCancellationReason As String, pCancellationSource As String, Optional pLeaveTransaction As Boolean = False, Optional ByVal pDoAdjustment As Boolean = False, Optional ByVal pAdjustmentParams As CDBParameters = Nothing, Optional ByRef pCancellationFee As Double = 0.0#, Optional ByVal pCanApplyCancellationFee As Boolean = True, Optional pExamBookingUnitId As Integer = 0)
      Dim vCancellationFee As CancellationFee = Nothing
      If CancellationReason.Length > 0 Then RaiseError(DataAccessErrors.daeBookingAlreadyCancelled, CStr(ExamBookingId))
      If pCanApplyCancellationFee Then
        vCancellationFee = GetCancellationFee(pCancellationReason, pExamBookingUnitId)
        If vCancellationFee.Existing Then
          If vCancellationFee.IsCancellationAmountRequired And pCancellationFee = 0 Then RaiseError(DataAccessErrors.daeCancellationFeeMissing)
        End If
      End If
      If pDoAdjustment Then ProcessAdjustment(pAdjustmentParams, pExamBookingUnitId)
      CancelOrDelete(False, pCancellationReason, pCancellationSource, pLeaveTransaction, vCancellationFee, pCancellationFee, pExamBookingUnitId)
    End Sub

    Private Function GetCancellationFee(ByRef pCancellationReason As String, pExamBookingUnitId As Integer) As CancellationFee
      Dim vCancellationFee As New CancellationFee
      If TransactionProcessed Then
        If Not Batch.Provisional Then
          If Amount > 0 Then
            Dim vWhereFields As New CDBFields
            If pExamBookingUnitId > 0 Then vWhereFields.Add("ebu.exam_booking_unit_id", pExamBookingUnitId)
            vWhereFields.Add("ebu.exam_booking_id", ExamBookingId)
            vWhereFields.Add("ebu.cancellation_reason")
            Dim vAnsiJoins As New AnsiJoins
            vAnsiJoins.Add("exam_schedule es", "ebu.exam_schedule_id", "es.exam_schedule_id")
            Dim vSQL As New SQLStatement(mvEnv.Connection, "MIN(es.start_date)", "exam_booking_units ebu", vWhereFields, "", vAnsiJoins)
            Dim vDate As String = vSQL.GetValue()
            If Not IsDate(vDate) Then vDate = TodaysDate()
            vCancellationFee.InitFromBooking(mvEnv, pCancellationReason, vDate)
          End If
        End If
      End If
      Return vCancellationFee
    End Function

    Private Sub ProcessAdjustment(ByRef pAdjustmentParams As CDBParameters, pExamBookingUnitId As Integer)
      Dim vAdjustmentType As Batch.AdjustmentTypes
      Dim vTransaction As Boolean
      Dim vAdjBatchNumber As Integer
      Dim vAdjTransNumber As Integer
      Dim vInvoicesTrans As CDBParameters = Nothing 'Used in ProcessAdjustmentPreProcess to keep a track of processed invoices
      Dim vUnallocatedCreditNoteTrans As New CDBParameters

      If TransactionProcessed = True And Batch.Provisional = False Then
        If Not pAdjustmentParams.ContainsKey("FullAmountAllocation") Then pAdjustmentParams.Add("FullAmountAllocation", "Y")
        If mvEnv.Connection.InTransaction = False Then
          mvEnv.Connection.StartTransaction()
          vTransaction = True
        End If
        Dim vBookingAmount As Double = GetUncancelledAmount(pExamBookingUnitId)
        Dim vCancelAmount As Double
        If vBookingAmount > 0 Then
          vAdjustmentType = Batch.AdjustmentTypes.atReverse
          If Batch.RefundAllowed = True Then vAdjustmentType = Batch.AdjustmentTypes.atRefund
          ProcessAdjustmentPreProcess(pAdjustmentParams, BatchNumber, TransactionNumber, vInvoicesTrans)  'Check if any invoice payment allocation are to be removed

          Dim vFinHist As New FinancialHistory
          vFinHist.Init(mvEnv, BatchNumber, TransactionNumber)
          Dim vCreateUnallocatedCreditNote As Boolean = Batch.BatchType = Batch.BatchTypes.CreditSales AndAlso pAdjustmentParams.ParameterExists("UnallocateCreditNote").Bool
          For Each vExamBookingUnit As ExamBookingUnit In UnCancelledExamBookingUnits
            If pExamBookingUnitId = 0 OrElse (pExamBookingUnitId > 0 AndAlso pExamBookingUnitId = vExamBookingUnit.ExamBookingUnitId) Then
              Dim vBTA As BatchTransactionAnalysis = vExamBookingUnit.BatchTransactionAnalysis
              If vBTA IsNot Nothing Then
                vFinHist.AdjustTransaction(vAdjustmentType, pAdjustmentParams, vBookingAmount, vExamBookingUnit.LineNumber, False, vAdjBatchNumber, vAdjTransNumber, mvAdjBatchTransColl)
                If vCreateUnallocatedCreditNote AndAlso Not vUnallocatedCreditNoteTrans.Exists(vAdjBatchNumber & "|" & vAdjTransNumber) Then vUnallocatedCreditNoteTrans.Add(vAdjBatchNumber & "|" & vAdjTransNumber)
                vCancelAmount += vBTA.Amount
              End If
            End If
          Next
          For Each vExamBookingTransaction As ExamBookingTransaction In UnCancelledExamBookingTransactions
            If pExamBookingUnitId = 0 OrElse (pExamBookingUnitId > 0 AndAlso pExamBookingUnitId = vExamBookingTransaction.ExamBookingUnitId) Then
              Dim vBTA As BatchTransactionAnalysis = vExamBookingTransaction.BatchTransactionAnalysis
              If vBTA IsNot Nothing Then
                vFinHist.AdjustTransaction(vAdjustmentType, pAdjustmentParams, vBookingAmount, vExamBookingTransaction.LineNumber, False, vAdjBatchNumber, vAdjTransNumber, mvAdjBatchTransColl)
                If vCreateUnallocatedCreditNote AndAlso Not vUnallocatedCreditNoteTrans.Exists(vAdjBatchNumber & "|" & vAdjTransNumber) Then vUnallocatedCreditNoteTrans.Add(vAdjBatchNumber & "|" & vAdjTransNumber)
                vCancelAmount += vBTA.Amount
              End If
            End If
          Next
          'Now need to reset Batch totals?
          'Dim vBatchDetails As ParameterList = vFinHist.GetBatchTotal(vAdjBatchNumber)
          'Dim vAmount As Double = 0
          'Dim vCurrencyAmount As Double = 0
          'If vBatchDetails IsNot Nothing Then
          '  If vBatchDetails.ContainsKey("Amount") Then vAmount = Convert.ToDouble(vBatchDetails("Amount"))
          '  If vBatchDetails.ContainsKey("CurrencyAmount") Then vCurrencyAmount = Convert.ToDouble(vBatchDetails("CurrencyAmount"))
          'End If
          'Dim vBatch As New Batch(mvEnv)
          'vBatch.Init(vAdjBatchNumber)
          'With vBatch
          '  .BatchTotal = vAmount 'Val(mvEnv.Connection.GetValue("SELECT SUM(amount) FROM batch_transactions WHERE batch_number = " & vAdjBatchNumber))
          '  .CurrencyBatchTotal = vCurrencyAmount 'Val(mvEnv.Connection.GetValue("SELECT SUM(currency_amount) FROM batch_transactions WHERE batch_number = " & vAdjBatchNumber))
          '  .NumberOfEntries = 0
          '  .SetBatchTotals()
          '  .Save()
          'End With
          'vBatch = Nothing
          If Batch.BatchType = Batch.BatchTypes.CreditSales Then
            'If the Booking was paid by Invoice and the Invoice has not been printed
            'then set it so that it does not get printed if we have cancelled the entire Invoice
            Dim vInvoice As New Invoice
            vInvoice.Init(mvEnv, vFinHist.BatchNumber, vFinHist.TransactionNumber)
            If vInvoice.Existing = True AndAlso vInvoice.InvoicePrinted = False AndAlso vCancelAmount = vInvoice.InvoiceAmount Then
              vInvoice.SetInvoicePrintingNotRequired()
              vInvoice.Save()
            End If
            If vUnallocatedCreditNoteTrans.Count > 0 Then
              For vIndex As Integer = 1 To vUnallocatedCreditNoteTrans.Count
                Dim vKey() As String = vUnallocatedCreditNoteTrans.ItemKey(vIndex).Split("|"c)
                Batch.WriteInvoiceAndDetails(IntegerValue(vKey(0)), IntegerValue(vKey(1)), True, False, True, True)
              Next
            End If
          End If
        End If
        If vTransaction Then
          mvEnv.Connection.CommitTransaction()
          ProcessAdjustmentPostProcess()  'Most likely for CancelEventBooking web service. For UpdateEventBooking web service, this is called within the web service function
        End If
      End If
    End Sub

    Private Function GetUncancelledAmount(pExamBookingUnitId As Integer) As Double
      Dim vAmount As Double = 0.0
      For Each vExamBookingUnit As ExamBookingUnit In UnCancelledExamBookingUnits
        If pExamBookingUnitId = 0 OrElse pExamBookingUnitId = vExamBookingUnit.ExamBookingUnitId Then
          If vExamBookingUnit.BatchTransactionAnalysis IsNot Nothing Then vAmount += vExamBookingUnit.BatchTransactionAnalysis.Amount
        End If
      Next
      For Each vExamBookingTransaction As ExamBookingTransaction In UnCancelledExamBookingTransactions
        If pExamBookingUnitId = 0 OrElse pExamBookingUnitId = vExamBookingTransaction.ExamBookingUnitId Then
          If vExamBookingTransaction.BatchTransactionAnalysis IsNot Nothing Then vAmount += vExamBookingTransaction.BatchTransactionAnalysis.Amount
        End If
      Next
      Return vAmount
    End Function

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer, pForceAmendmentHistory As Boolean)
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber, pForceAmendmentHistory)
      If mvAllExamBookingUnits IsNot Nothing Then
        Dim vDirtyUnits As IEnumerable(Of ExamBookingUnit) = Me.ExamBookingUnits.Where(Function(vEBU) vEBU.IsDirty)
        If vDirtyUnits IsNot Nothing AndAlso vDirtyUnits.Count > 0 Then
          vDirtyUnits.ToList().ForEach(Sub(vEBU) vEBU.Save(pAmendedBy, pAudit, pJournalNumber, pForceAmendmentHistory))
        End If
      End If
    End Sub
    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      Save(pAmendedBy, pAudit, pJournalNumber, False)
    End Sub

    Private Sub ProcessAdjustmentPreProcess(ByVal pAdjustmentParams As CDBParameters, ByVal pBatchNumber As Integer, ByVal pTransNumber As Integer, ByRef pInvoicesTrans As CDBParameters)
      'This is to remove any allocated payments for an invoice
      'BR17149: Where the exam booking cancellation credit note is being left unallocated - do not remove invoice allocations
      If pAdjustmentParams.HasValue("AllocationsChecked") AndAlso Not pAdjustmentParams.ParameterExists("UnallocateCreditNote").Bool Then  'If there are some payments and the user has accepted
        If pInvoicesTrans Is Nothing Then pInvoicesTrans = New CDBParameters
        If Not pInvoicesTrans.Exists(pBatchNumber & "|" & pTransNumber) Then  'Only remove allocation when we have not already done it
          pInvoicesTrans.Add(pBatchNumber & "|" & pTransNumber)
          Dim vInvoice As New Invoice
          vInvoice.Init(mvEnv, pBatchNumber, pTransNumber)
          If vInvoice.Existing AndAlso Invoice.GetRecordType(vInvoice.RecordType) = Invoice.InvoiceRecordType.Invoice Then
            'When AllocationChecked is set we should know the payments exists but this is to make it sure
            If vInvoice.AllocationsAmount(False, False, False) > 0 Then
              vInvoice.RemoveAllocations()
            End If
          End If
        End If
      End If
    End Sub

    Public Sub ProcessAdjustmentPostProcess()
      'Used to authorise the adjusted transactions
      If mvAdjBatchTransColl IsNot Nothing Then
        For vIndex As Integer = 0 To mvAdjBatchTransColl.Count - 1
          Dim vKey() As String = mvAdjBatchTransColl.ItemKey(vIndex).Split("|"c)
          FinancialHistory.AdjustTransactionPostProcess(mvEnv, IntegerValue(vKey(0)), IntegerValue(vKey(1)), vKey(2), mvAdjBatchTransColl(vIndex), "")
        Next
        mvAdjBatchTransColl = Nothing
      End If
    End Sub

    Private Sub CancelOrDelete(ByVal pDelete As Boolean, ByVal pCancellationReason As String, ByVal pCancellationSource As String, ByVal pLeaveTransaction As Boolean, ByVal pCancellationFee As CancellationFee, ByVal pCancellationAmount As Double, pExamBookingUnitId As Integer)
      'This routine will cancel or delete the event booking but will not perform any financial updates
      Dim vCancellationFee As New CancellationFee
      Dim vTransaction As Boolean

      If Not pDelete Then
        If TransactionProcessed AndAlso Batch.Provisional = False Then
          If pCancellationFee Is Nothing Then pCancellationFee = GetCancellationFee(pCancellationReason, pExamBookingUnitId)
          If pCancellationFee.Existing Then
            Dim vBT As New BatchTransaction(mvEnv)
            Dim vBTA As New BatchTransactionAnalysis(mvEnv)
            vBTA.Init()
            vBT.Init(BatchNumber, TransactionNumber)
            For Each vExamBookingUnit As ExamBookingUnit In UnCancelledExamBookingUnits
              If pExamBookingUnitId = 0 OrElse (pExamBookingUnitId > 0 AndAlso pExamBookingUnitId = vExamBookingUnit.ExamBookingUnitId) Then
                If vExamBookingUnit.BatchTransactionAnalysis IsNot Nothing Then
                  vBTA.CloneFromBTA(vExamBookingUnit.BatchTransactionAnalysis)
                  vBTA.Amount = GetUncancelledAmount(pExamBookingUnitId)
                  Exit For
                End If
              End If
            Next
            pCancellationFee.AddCancellationFeeTransaction(Batch, vBT, vBTA, pCancellationAmount, mvCancellationFeeTrans)
          End If
        End If
      End If

      Dim vBookingUnit As New ExamBookingUnit(mvEnv)
      vBookingUnit.Init(pExamBookingUnitId)

      If Not mvEnv.Connection.InTransaction Then
        mvEnv.Connection.StartTransaction()
        vTransaction = True
      End If
      If pDelete Then
        Delete()
      Else
        If Batch.Provisional Then                                                 'Cancelling a provisional booking
          For Each vExamBookingUnit As ExamBookingUnit In UnCancelledExamBookingUnits
            If pExamBookingUnitId = 0 OrElse (pExamBookingUnitId > 0 AndAlso pExamBookingUnitId = vExamBookingUnit.ExamBookingUnitId) Then
              If vExamBookingUnit.BatchTransactionAnalysis IsNot Nothing Then
                vExamBookingUnit.BatchTransactionAnalysis.DeleteFromBatch()         'Remove provisional transaction line
              End If
            End If
          Next
          For Each vExamBookingTransaction As ExamBookingTransaction In UnCancelledExamBookingTransactions
            If pExamBookingUnitId = 0 OrElse (pExamBookingUnitId > 0 AndAlso pExamBookingUnitId = vExamBookingTransaction.ExamBookingUnitId) Then
              If vExamBookingTransaction.BatchTransactionAnalysis IsNot Nothing Then
                vExamBookingTransaction.BatchTransactionAnalysis.DeleteFromBatch()         'Remove provisional transaction line
              End If
            End If
          Next
        End If
        ReduceNumberOfAttempts(pExamBookingUnitId)      'Update the number of attempts on any student unit header records associated with this booking where there is a schedule

        If pExamBookingUnitId = 0 Then
          mvClassFields.Item(ExamBookingFields.CancellationReason).Value = pCancellationReason
          mvClassFields.Item(ExamBookingFields.CancelledOn).Value = TodaysDate()
          mvClassFields.Item(ExamBookingFields.CancelledBy).Value = mvEnv.User.UserID
          If pCancellationSource.Length > 0 Then mvClassFields.Item(ExamBookingFields.CancellationSource).Value = pCancellationSource
          Save()
        End If

        If vBookingUnit.Existing Then
          'Cancel the existing Booking Unit
          vBookingUnit.Cancel(pCancellationReason, pCancellationSource)
          vBookingUnit.Save(mvEnv.User.UserID, True)
        Else
          'Cancel everything
          Dim vWhereFields As New CDBFields(New CDBField("exam_booking_id", ExamBookingId))
          Dim vUpdateFields As New CDBFields(New CDBField("exam_student_unit_status", "C"))
          vUpdateFields.Add("cancellation_reason", pCancellationReason)
          vUpdateFields.Add("cancelled_by", mvEnv.User.UserID)
          vUpdateFields.Add("cancelled_on", CDBField.FieldTypes.cftDate, TodaysDate())
          If pCancellationSource.Length > 0 Then vUpdateFields.Add("cancellation_source", pCancellationSource)
          mvEnv.Connection.UpdateRecords("exam_booking_units", vUpdateFields, vWhereFields, False)
        End If

      End If
      If vTransaction And Not pLeaveTransaction Then
        mvEnv.Connection.CommitTransaction()
      End If
    End Sub

    Public ReadOnly Property Batch() As Batch
      Get
        If mvBatch Is Nothing Then
          mvBatch = New Batch(mvEnv)
          mvBatch.Init(BatchNumber)
        End If
        Return mvBatch
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"
    Public Function GetListOfSchedules() As List(Of ExamSchedule)
      Dim vSchedules As New List(Of ExamSchedule)

      Dim vFields As String = "ebu.exam_schedule_id"
      Dim vWhereFields As New CDBFields
      Dim vAnsiJoins As New AnsiJoins
      vWhereFields.Add("eb.exam_booking_id", Me.ExamBookingId)
      vWhereFields.Add("ebu.exam_schedule_id", "", CDBField.FieldWhereOperators.fwoNOT)
      vWhereFields.Add("ebu.cancellation_reason", "")
      vAnsiJoins.Add("exam_booking_units ebu", "ebu.exam_booking_id", "eb.exam_booking_id")
      Dim vScheduleSQL As New SQLStatement(mvEnv.Connection, "ebu.exam_schedule_id", "exam_bookings eb", vWhereFields, "", vAnsiJoins)
      Dim vRS As CDBRecordSet = vScheduleSQL.GetRecordSet
      While vRS.Fetch
        Dim vExamSchedule As ExamSchedule = New ExamSchedule(mvEnv)
        vExamSchedule.Init(vRS.Fields("exam_schedule_id").IntegerValue)
        If vExamSchedule.Existing Then vSchedules.Add(vExamSchedule)
      End While

      Return vSchedules
    End Function

    Public Sub DeleteByBatchInfo(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pLineNumber As Integer)
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("batch_number", pBatchNumber)
      vWhereFields.Add("transaction_number", pTransactionNumber)
      If pLineNumber > 0 Then
        'Just a single line number - it could relate to a booking unit or a booking transaction
        vWhereFields.Add("line_number", pLineNumber)
        Dim vExamBookingUnit As New ExamBookingUnit(mvEnv)
        vExamBookingUnit.InitWithPrimaryKey(vWhereFields)
        If vExamBookingUnit.Existing Then
          'It's a booking unit so we must delete the exam booking itself
          Dim vExamBooking As New ExamBooking(mvEnv)
          vExamBooking.Init(vExamBookingUnit.ExamBookingId)
          For Each vExamTransaction As ExamBookingTransaction In vExamBooking.UnCancelledExamBookingTransactions
            If vExamTransaction.BatchTransactionAnalysis IsNot Nothing AndAlso vExamTransaction.BatchTransactionAnalysis.Existing Then vExamTransaction.BatchTransactionAnalysis.Delete()
          Next
          For Each vExamBookingUnit In vExamBooking.UnCancelledExamBookingUnits
            If vExamBookingUnit.BatchTransactionAnalysis IsNot Nothing AndAlso vExamBookingUnit.BatchTransactionAnalysis.Existing Then vExamBookingUnit.BatchTransactionAnalysis.Delete()
          Next
          vExamBooking.Delete(pAmendedBy, pAudit)
        Else
          Dim vExamBookingTransaction As New ExamBookingTransaction(mvEnv)
          vExamBookingTransaction.InitWithPrimaryKey(vWhereFields)
          If vExamBookingTransaction.Existing Then    'It's a transaction only
            If vExamBookingTransaction.BatchTransactionAnalysis IsNot Nothing AndAlso vExamBookingTransaction.BatchTransactionAnalysis.Existing Then vExamBookingTransaction.BatchTransactionAnalysis.Delete()
            vExamBookingTransaction.Delete()
          End If
        End If
      Else    'We are removing the whole transaction
        'Delete from exam_bookings, exam_booking_units and exam_booking_transactions
        Dim vExamBookingUnit As New ExamBookingUnit(mvEnv)
        vExamBookingUnit.InitWithPrimaryKey(vWhereFields)
        If vExamBookingUnit.Existing Then
          Dim vExamBooking As New ExamBooking(mvEnv)
          vExamBooking.Init(vExamBookingUnit.ExamBookingId)
          vExamBooking.Delete(pAmendedBy, pAudit)
        End If
      End If
    End Sub

    Public Shared Function GetBookingLines(ByVal pEnv As CDBEnvironment, ByVal pParams As CDBParameters, ByVal pContact As Contact) As CollectionList(Of ExamBookingLine)

      Dim vLines As New CollectionList(Of ExamBookingLine)
      Dim vTransactionDate As Date
      If pParams.Exists("TransactionDate") Then
        vTransactionDate = CDate(pParams("TransactionDate").Value)
      Else
        vTransactionDate = Date.Today
      End If

      'select eu.exam_unit_id,exam_unit_code,eu.product,ISNULL(ep.rate,eu.rate),product_vat_category
      'from exam_units eu
      'inner join products p on eu.product = p.product
      'left outer join exam_prices ep on eu.product = ep.product
      'left outer join contact_categories cc on ep.activity = cc.activity AND ep.activity_value = cc.activity_value
      'left outer join exam_centre_units ecu on eu.exam_base_unit_id = ecu.exam_unit_id
      'left outer join exam_centres ec on ecu.exam_centre_id = ec.exam_centre_id
      'left outer join rates r on ep.rate = r.rate
      'where eu.exam_unit_id in (297,298)
      'and ec.exam_centre_code = 'C101'
      '/* 'C226' Reduced */
      '/* 'C101' Not reduced */
      'and ((cc.contact_number = 12633391 
      '/* 12627576 non member */
      '/* 12628585 Israeli */
      '/* 12628005 no activities */
      '/* 12633391  ASSA Member */
      'AND cc.valid_from <= '07 Mar 2012' AND cc.valid_to >= '07 Mar 2012'
      'AND ep.activity IS not NULL)
      'or (cc.contact_number IS NULL AND ep.activity IS NULL))
      ' and ((ec.exam_centre_rate_type = ep.exam_centre_rate_type) OR ep.exam_centre_rate_type IS NULL)
      ' order by eu.exam_unit_id, ISNULL(cc.contact_number, 0) desc, ISNULL(ep.exam_centre_rate_type,' ')desc,  r.current_price

      Dim vWhereFields As New CDBFields
      Dim vAnsiJoins As New AnsiJoins
      If pParams.HasValue("ExamCentreCode") Then
        vAnsiJoins.Add("exam_unit_links eul", "eu.exam_unit_id", "eul.exam_unit_id_2")
      End If
      vAnsiJoins.Add("products p", "eu.product", "p.product")
      vAnsiJoins.AddLeftOuterJoin("exam_prices ep", "eu.product", "ep.product")
      vAnsiJoins.AddLeftOuterJoin("contact_categories cc", "ep.activity", "cc.activity", "ep.activity_value", "cc.activity_value")
      If pParams.HasValue("ExamCentreCode") Then
        vAnsiJoins.Add("exam_units eu2", "eu.exam_unit_code", "eu2.exam_unit_code")
        vAnsiJoins.AddLeftOuterJoin("exam_centre_units ecu", "eu2.exam_unit_id", "ecu.exam_unit_id")
        vAnsiJoins.AddLeftOuterJoin("exam_centres ec", "ecu.exam_centre_id", "ec.exam_centre_id")
      End If
      vWhereFields.Add("eu.exam_unit_id", pParams("ExamUnits").Value, CDBField.FieldWhereOperators.fwoIn)
      If pParams.HasValue("ExamCentreCode") Then
        vWhereFields.Add("ec.exam_centre_code", pParams("ExamCentreCode").Value)
      End If
      vAnsiJoins.AddLeftOuterJoin("rates r", "ep.product", "r.product", "ep.rate", "r.rate")
      vWhereFields.Add("cc.contact_number", pParams("ContactNumber").IntegerValue, CDBField.FieldWhereOperators.fwoOpenBracketTwice Or CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("cc.valid_from", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoLessThanEqual)
      vWhereFields.Add("cc.valid_to", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      vWhereFields.Add("ep.activity", "", CDBField.FieldWhereOperators.fwoNotEqual Or CDBField.FieldWhereOperators.fwoCloseBracket)
      vWhereFields.Add("cc.contact_number#2", "", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoEqual Or CDBField.FieldWhereOperators.fwoOpenBracket)
      vWhereFields.Add("ep.activity#2", "", CDBField.FieldWhereOperators.fwoEqual Or CDBField.FieldWhereOperators.fwoCloseBracketTwice)
      If pParams.HasValue("ExamCentreCode") Then
        vWhereFields.Add("ec.exam_centre_rate_type", CDBField.FieldTypes.cftInteger, "ep.exam_centre_rate_type", CDBField.FieldWhereOperators.fwoOpenBracketTwice Or CDBField.FieldWhereOperators.fwoEqual Or CDBField.FieldWhereOperators.fwoCloseBracket)
        vWhereFields.Add("ep.exam_centre_rate_type#2", "", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoEqual Or CDBField.FieldWhereOperators.fwoCloseBracket)
      End If
      Dim vOrderBy As String = "eu.exam_unit_id, " & pEnv.Connection.DBIsNull("cc.contact_number", "0") & " DESC, " & pEnv.Connection.DBIsNull("ep.exam_centre_rate_type", "' '") & " DESC, r.current_price"
      'Get a list of the products and rates to use for the exam units
      Dim vUnitSQL As New SQLStatement(pEnv.Connection, "eu.exam_unit_id,eu.exam_unit_code,eu.product," & pEnv.Connection.DBIsNull("ep.rate", "eu.rate") & ",product_vat_category, max_attempts", "exam_units eu", vWhereFields, vOrderBy, vAnsiJoins)
      'Initially just get the ProductRate for each - just use the first line returned for each unit
      Dim vLastUnit As Integer = 0
      Dim vGetNextLine As Boolean
      Dim vExamBookingLine As ExamBookingLine = Nothing
      Dim vRS As CDBRecordSet = vUnitSQL.GetRecordSet
      While vRS.Fetch
        If vLastUnit <> vRS.Fields(1).IntegerValue OrElse vGetNextLine = True Then
          Dim vProductRate As New ProductRate(pEnv)
          vProductRate.Init(vRS.Fields(3).Value, vRS.Fields(4).Value)
          Dim vVATRate As VatRate = pEnv.VATRate(vRS.Fields("product_vat_category").Value, pContact.VATCategory)
          Dim vAmount As Double = vProductRate.Price(vTransactionDate, pContact.ContactNumber, 1, vVATRate)
          Dim vVATAmount As Double = vVATRate.CalculateVATAmount(vAmount, vProductRate.VatExclusive, vVATRate.Percentage)
          If vGetNextLine = True AndAlso (vLastUnit = vRS.Fields(1).IntegerValue) Then
            vExamBookingLine.SetAlternateRate(vProductRate.RateCode, vProductRate.RateDesc, vAmount, vVATAmount)
          Else
            vExamBookingLine = New ExamBookingLine(vLines.Count + 1, vRS.Fields("exam_unit_id").IntegerValue, 0, vProductRate.ProductCode, vProductRate.RateCode, vProductRate.RateDesc, 1, vAmount, vVATAmount, vVATRate.VatRateCode, vVATRate.Percentage, "Unit Code " & vRS.Fields("exam_unit_code").Value)
            vLines.Add(CStr(vLines.Count + 1), vExamBookingLine)
          End If
          vLastUnit = vRS.Fields(1).IntegerValue
          If vGetNextLine = False AndAlso vRS.Fields("max_attempts").IntegerValue > 0 Then
            If GetNumberOfAttempts(pEnv, pContact.ContactNumber, vRS.Fields(2).Value) >= vRS.Fields("max_attempts").IntegerValue Then
              vGetNextLine = True
            End If
          Else
            vGetNextLine = False
          End If
        End If
      End While
      vRS.CloseRecordSet()

      'Get a list of the products and rates to use for the additional products
      vAnsiJoins.Clear()
      vWhereFields.Clear()
      vWhereFields.Add("eu.exam_unit_id", pParams("ExamUnits").Value, CDBField.FieldWhereOperators.fwoIn)
      vAnsiJoins.Add("exam_unit_products eup", "eup.exam_unit_id", "eu.exam_unit_id")
      vAnsiJoins.Add("products p", "eup.product", "p.product")
      Dim vProductSQL As New SQLStatement(pEnv.Connection, "eu.exam_unit_id,exam_unit_code,eup.product,eup.rate,quantity,product_vat_category,exam_unit_product_id", "exam_units eu", vWhereFields, "", vAnsiJoins)
      'Initially just get the ProductRate for each
      vRS = vProductSQL.GetRecordSet
      While vRS.Fetch
        Dim vProductRate As New ProductRate(pEnv)
        vProductRate.Init(vRS.Fields("product").Value, vRS.Fields("rate").Value)
        Dim vQuantity As Integer = vRS.Fields("quantity").IntegerValue
        Dim vVATRate As VatRate = pEnv.VATRate(vRS.Fields("product_vat_category").Value, pContact.VATCategory)
        Dim vAmount As Double = vProductRate.Price(vTransactionDate, pContact.ContactNumber, vQuantity, vVATRate)
        Dim vVATAmount As Double = vVATRate.CalculateVATAmount(vAmount, vProductRate.VatExclusive, vVATRate.Percentage)
        vLines.Add(CStr(vLines.Count + 1), New ExamBookingLine(vLines.Count + 1, vRS.Fields("exam_unit_id").IntegerValue, vRS.Fields("exam_unit_product_id").IntegerValue, vProductRate.ProductCode, vProductRate.RateCode, vProductRate.RateDesc, vQuantity, vAmount, vVATAmount, vVATRate.VatRateCode, vVATRate.Percentage, "Unit Code " & vRS.Fields("exam_unit_code").Value & " Additional Product"))
      End While
      vRS.CloseRecordSet()
      Return vLines
    End Function

    Private Shared Function GetNumberOfAttempts(ByVal pEnv As CDBEnvironment, ByVal pContactNumber As Integer, ByVal pExamUnitCode As String) As Integer
      Dim vWhereFields As New CDBFields
      Dim vAnsiJoins As New AnsiJoins

      vAnsiJoins.Add("exam_units eu", "ebu.exam_unit_id", "eu.exam_unit_id")
      vAnsiJoins.Add("exam_schedule es", "ebu.exam_schedule_id", "es.exam_schedule_id")
      vAnsiJoins.Add("exam_centres ec", "es.exam_centre_id", "ec.exam_centre_id")
      vAnsiJoins.Add("batch_transaction_analysis bta", "ebu.batch_number", "bta.batch_number", "ebu.transaction_number", "bta.transaction_number", "ebu.line_number", "bta.line_number")
      vAnsiJoins.Add("exam_prices ep", "bta.product", "ep.product", "bta.rate", "ep.rate")
      vWhereFields.Add("ebu.contact_number", pContactNumber)
      vWhereFields.Add("ebu.cancellation_reason", "")
      vWhereFields.Add("eu.exam_unit_code", pExamUnitCode)
      vWhereFields.Add("ec.exam_centre_rate_type", CDBField.FieldTypes.cftInteger, "ep.exam_centre_rate_type")
      vWhereFields.Add("ec.exam_centre_rate_type#2", "", CDBField.FieldWhereOperators.fwoNotEqual)
      Dim vSQL As New SQLStatement(pEnv.Connection, "count(*) AS attempts", "exam_booking_units ebu", vWhereFields, "", vAnsiJoins)
      vSQL.GroupBy = "exam_unit_code, ep.rate"
      Return IntegerValue(vSQL.GetValue)
    End Function

    Private Sub AdjustSummary()

      'Adjust Summary's first and last session
      If Me.ExamSessionId > 0 Then
        Dim vExamUnit As New ExamUnit(mvEnv)
        vExamUnit.Init(ExamUnitId)
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("exam_unit_id", vExamUnit.ExamBaseUnitId)
        vWhereFields.Add("contact_number", ContactNumber)

        Dim vExamHeader As New ExamStudentHeader(mvEnv)
        vExamHeader.InitWithPrimaryKey(vWhereFields)
        If vExamHeader.Existing Then
          vExamHeader.ResetFirstLastSession()

          Dim vExamStudentUnitHeader As New ExamStudentUnitHeader(mvEnv)
          vWhereFields.Clear()
          vWhereFields.Add("exam_student_header_id", vExamHeader.ExamStudentHeaderId)
          Dim vSQL As New SQLStatement(mvEnv.Connection, vExamStudentUnitHeader.GetRecordSetFields, "exam_student_unit_header esuh", vWhereFields)
          Dim vRS As CDBRecordSet = vSQL.GetRecordSet
          While vRS.Fetch
            vExamStudentUnitHeader.InitFromRecordSet(vRS)
            Dim vParams As New CDBParameters
            vParams.Add("ExamBookingId", "")
            vExamStudentUnitHeader.Update(vParams)
            vExamStudentUnitHeader.Save()
          End While
          vRS.CloseRecordSet()

        End If
      End If
    End Sub

    Public Sub ValidateForMerge(Of P)(pStrategy As MergeStrategyType, pNewOwner As P, pMaster As IMergeValidatable, pDuplicate As IMergeValidatable, ByRef pNotifications As MergeValidationNotification) Implements IMergeValidatable.Validate
      Dim vNewOwnerContact As Contact = TryCast(pNewOwner, Contact)
      If vNewOwnerContact IsNot Nothing AndAlso vNewOwnerContact.ContactNumber <> Me.ContactNumber Then
        If pStrategy = MergeStrategyType.ChangeParent Then
          'We're going to check that the new parent doesn't already have any booking units that are for the same session as the current booking
          'For non-session bookings, we're going to check that the parent will only have one open booking for the unit.  Open booking = sessionid = 0 and total result is empty
          Dim vNewOwnerEBUColl As IEnumerable(Of ExamBookingUnit) = vNewOwnerContact.GetRelatedList(Of ExamBookingUnit)({Contact.ContactFields.ContactNumber})
          Dim vMyEBUCollection As IEnumerable(Of ExamBookingUnit) = Me.ExamBookingUnits

          Dim vConflictingUnits = From vMyEBU In vMyEBUCollection
                                  Join vOwnerEBU In vNewOwnerEBUColl
                                    On vMyEBU.ExamBooking.ExamSessionId Equals vOwnerEBU.ExamBooking.ExamSessionId And
                                    vMyEBU.ExamUnitId Equals vOwnerEBU.ExamUnitId
                                  Where vMyEBU.CancellationReason.IsNullOrWhitespace AndAlso
                                    vOwnerEBU.CancellationReason.IsNullOrWhitespace AndAlso
                                    (
                                      vOwnerEBU.ExamBooking.ExamSessionId <> 0 _
                                      Or (
                                            vOwnerEBU.ExamBooking.ExamSessionId = 0 AndAlso
                                            vOwnerEBU.TotalResult.In("", "P") AndAlso
                                            vMyEBU.TotalResult.In("", "P")
                                        )
                                      )
                                  Select vMyEBU


          If vConflictingUnits.Count > 0 Then
            Dim vNotifications As MergeValidationNotification = pNotifications 'if you don't do this you get a "ByRef parameter cannot be used in a lambda expression" error.
            vConflictingUnits.ToList().ForEach(Sub(vItem)
                                                 Dim vUnitText As String = vItem.ExamUnit.ExamUnitCode
                                                 Dim vSessionText As String = String.Empty
                                                 If vItem.ExamBooking.ExamSession Is Nothing Then
                                                   vSessionText = "0"
                                                 Else
                                                   vSessionText = vItem.ExamBooking.ExamSession.ExamSessionCode
                                                 End If
                                                 vNotifications.Add(ErrorText.DaeExamExistingSessionBooking, vSessionText, vUnitText)
                                               End Sub
                                              )
          End If
        End If
      End If

    End Sub

#End Region


  End Class
End Namespace
