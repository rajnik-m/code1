Imports Advanced.Data.Merge
Imports System.Linq
Imports Advanced.Data.Merge.Strategy
Imports Advanced.Data.Merge.ComparisonStrategy

Namespace Access

  <MergeStrategy(MergeStrategyType.KeepGreatest)>
  Public Class ExamStudentUnitHeader
    Inherits CARERecord
    Implements IRecordCreate,
      IMergeComparable

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum ExamStudentUnitHeaderFields
      AllFields = 0
      ExamStudentUnitHeaderId
      ExamStudentHeaderId
      ExamUnitId
      ExamUnitLinkId
      Attempts
      CurrentMark
      CurrentGrade
      CurrentResult
      FirstPassed
      Expires
      CreatedBy
      CreatedOn
      LastExamDate
      PreviousMark
      PreviousGrade
      PreviousResult
      ResultsReleaseDate
      GradingRunNumber
      ExamBookingId
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("exam_student_unit_header_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_student_header_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_unit_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_unit_link_id", CDBField.FieldTypes.cftInteger)
        .Add("attempts", CDBField.FieldTypes.cftInteger)
        .Add("current_mark", CDBField.FieldTypes.cftNumeric)
        .Add("current_grade")
        .Add("current_result")
        .Add("first_passed", CDBField.FieldTypes.cftDate)
        .Add("expires", CDBField.FieldTypes.cftDate)
        .Add("created_by")
        .Add("created_on", CDBField.FieldTypes.cftDate)
        .Add("last_exam_date", CDBField.FieldTypes.cftDate)
        .Add("previous_mark", CDBField.FieldTypes.cftNumeric).PrefixRequired = True
        .Add("previous_grade").PrefixRequired = True
        .Add("previous_result").PrefixRequired = True
        .Add("results_release_date", CDBField.FieldTypes.cftDate).PrefixRequired = True
        .Add("grading_run_number", CDBField.FieldTypes.cftInteger).PrefixRequired = True
        .Add("exam_booking_id", CDBField.FieldTypes.cftInteger).PrefixRequired = True

        .Item(ExamStudentUnitHeaderFields.ExamStudentUnitHeaderId).PrimaryKey = True
        .Item(ExamStudentUnitHeaderFields.ExamStudentUnitHeaderId).PrefixRequired = True
        .Item(ExamStudentUnitHeaderFields.ExamStudentHeaderId).PrefixRequired = True
        .Item(ExamStudentUnitHeaderFields.ExamUnitId).PrefixRequired = True
        .Item(ExamStudentUnitHeaderFields.ExamUnitLinkId).PrefixRequired = True
        .Item(ExamStudentUnitHeaderFields.LastExamDate).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLastExamDate)

        .SetControlNumberField(ExamStudentUnitHeaderFields.ExamStudentUnitHeaderId, "XUH")

        .SetUniqueField(ExamStudentUnitHeaderFields.ExamStudentHeaderId)
        .SetUniqueField(ExamStudentUnitHeaderFields.ExamUnitId)
        .SetUniqueField(ExamStudentUnitHeaderFields.ExamUnitLinkId)
        .Item(ExamStudentUnitHeaderFields.CreatedBy).PrefixRequired = True
        .Item(ExamStudentUnitHeaderFields.CreatedOn).PrefixRequired = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "esuh"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "exam_student_unit_header"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'IRecordCreate
    '--------------------------------------------------
    Public Function CreateInstance(ByVal pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New ExamStudentUnitHeader(mvEnv)
    End Function
    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ExamStudentUnitHeaderId() As Integer
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.ExamStudentUnitHeaderId).IntegerValue
      End Get
    End Property
    Public Property ExamStudentHeaderId As Integer
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.ExamStudentHeaderId).IntegerValue
      End Get
      Private Set(value As Integer)
        mvClassFields(ExamStudentUnitHeaderFields.ExamStudentHeaderId).IntegerValue = value
        If mvExamStudentHeader IsNot Nothing AndAlso Me.ExamStudentHeader.ExamStudentHeaderId <> value Then
          Me.ExamStudentHeader = Nothing
        End If
      End Set
    End Property

    <MergeComparer(0)>
    Public ReadOnly Property ExamUnitId() As Integer
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.ExamUnitId).IntegerValue
      End Get
    End Property

    <IsMergeMasterValue()>
    Public Property ExamUnitLinkId As Integer
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.ExamUnitLinkId).IntegerValue
      End Get
      Set(value As Integer)
        mvClassFields(ExamStudentUnitHeaderFields.ExamUnitLinkId).IntegerValue = value
      End Set
    End Property
    Public ReadOnly Property Attempts() As String
      'Could be null
      'See also NumberOfAttempts property which returns the integer value
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.Attempts).Value
      End Get
    End Property
    Public ReadOnly Property NumberOfAttempts() As Integer
      'See also Attempts property which returns the string value
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.Attempts).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CurrentMark() As Double
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.CurrentMark).DoubleValue
      End Get
    End Property
    Public Property CurrentGrade() As String
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.CurrentGrade).Value
      End Get
      Set(value As String)
        mvClassFields(ExamStudentUnitHeaderFields.CurrentGrade).Value = value
        If Me.CurrentGradeLookup IsNot Nothing AndAlso Me.CurrentGradeLookup.FieldValueString("exam_grade") <> value Then
          Me.CurrentGradeLookup = Nothing
        End If
      End Set
    End Property
    Public ReadOnly Property CurrentResult() As String
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.CurrentResult).Value
      End Get
    End Property
    Public ReadOnly Property FirstPassed() As String
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.FirstPassed).Value
      End Get
    End Property

    Public ReadOnly Property Expires() As String
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.Expires).Value
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property LastExamDate() As String
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.LastExamDate).Value
      End Get
    End Property
    Public ReadOnly Property PreviousMark() As Double
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.PreviousMark).DoubleValue
      End Get
    End Property
    Public ReadOnly Property PreviousGrade() As String
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.PreviousGrade).Value
      End Get
    End Property
    Public ReadOnly Property PreviousResult() As String
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.PreviousResult).Value
      End Get
    End Property
    Public ReadOnly Property ResultsReleaseDate() As String
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.ResultsReleaseDate).Value
      End Get
    End Property
    Public ReadOnly Property GradingRunNumber() As Integer
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.GradingRunNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamBookingId() As Integer
      Get
        Return mvClassFields(ExamStudentUnitHeaderFields.ExamBookingId).IntegerValue
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"
    Private mvExamGradeChangeReasonCode As String = String.Empty
    Private mvExamStudentHeader As ExamStudentHeader
    Private mvCurrentGradeLookup As TableMaintenanceData
    Private mvExamCerts As IEnumerable(Of ContactExamCert)
    Private mvExamGradeChangeHistory As IEnumerable(Of ExamGradeChangeHistory)
    Private mvExamUnit As ExamUnit

    Public Shared Sub InsertStudentSummaryParents(ByVal pEnv As CDBEnvironment, ByVal pExamUnitId As Integer, ByVal pExamStudentHeaderId As Integer, ByVal pExamUnitLinkId As Integer)
      ' Get all exam units above passed unit
      Dim vParentSQL As New SQLStatement(pEnv.Connection, "select exam_unit_id_1 parent_id,parent_unit_link_id from exam_unit_links where exam_unit_id_2 = " + pExamUnitId.ToString + "and exam_unit_link_id = " + pExamUnitLinkId.ToString)
      Dim vDT_Parent As CDBDataTable = New CDBDataTable()
      vDT_Parent.FillFromSQL(pEnv, vParentSQL)

      ' exit if parent item link 
      If vDT_Parent.Rows.Count = 0 Then Return
      Dim vParentID As Integer = Integer.Parse(vDT_Parent.Rows(0).Item("parent_id"))
      Dim vParentUnitLinkId As Integer = Integer.Parse(vDT_Parent.Rows(0).Item("parent_unit_link_id"))

      ' see if parent exam_student_unit_header exists in exam_student_unit_header tree
      Dim vCheckExistsSQL As New SQLStatement(pEnv.Connection, "select exam_unit_id, exam_unit_link_id from exam_student_unit_header where Exam_Student_Header_Id = " + pExamStudentHeaderId.ToString + " and exam_unit_id = " + vParentID.ToString)
      Dim vDT_Exists As CDBDataTable = New CDBDataTable()
      vDT_Exists.FillFromSQL(pEnv, vCheckExistsSQL)

      ' if it does not exist, create it
      If vDT_Exists.Rows.Count = 0 And vParentID <> 0 Then
        Dim vInsertParams As New CDBParameters
        vInsertParams.Add("ExamUnitId", vParentID)
        vInsertParams.Add("ExamStudentHeaderId", pExamStudentHeaderId)
        vInsertParams.Add("ExamUnitLinkId", vParentUnitLinkId)
        Dim vInsert As ExamStudentUnitHeader = New ExamStudentUnitHeader(pEnv)
        vInsert.Create(vInsertParams)
        vInsert.Save()

        InsertStudentSummaryParents(pEnv, vParentID, pExamStudentHeaderId, vParentUnitLinkId)
      End If
    End Sub

    Public Overrides Sub Update(ByVal pParameterList As CDBParameters)
      MyBase.Update(pParameterList)
      If pParameterList.HasValue("ExamGradeChangeReason") Then mvExamGradeChangeReasonCode = pParameterList("ExamGradeChangeReason").Value
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      Dim vTrans As Boolean = False
      If mvEnv.Connection.InTransaction = False Then
        mvEnv.Connection.StartTransaction()
        vTrans = True
      End If

      If mvExisting = True AndAlso mvExamGradeChangeReasonCode.Length > 0 Then
        If mvClassFields.Item(ExamStudentUnitHeaderFields.CurrentGrade).ValueChanged OrElse mvClassFields.Item(ExamStudentUnitHeaderFields.CurrentMark).ValueChanged _
        OrElse mvClassFields.Item(ExamStudentUnitHeaderFields.CurrentResult).ValueChanged Then
          'Check for Exam Results changing
          Dim vCreateGradeHistory As Boolean = False
          Dim vControlValue As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlExamRecordGradeChangeHistory).ToUpper
          If vControlValue.Length > 0 AndAlso vControlValue <> "N" Then vCreateGradeHistory = True
          If vCreateGradeHistory Then
            With mvClassFields
              Dim vParams As New CDBParameters()
              With vParams
                If ExamStudentUnitHeaderId > 0 Then .Add("ExamStudentUnitHeaderId", ExamStudentUnitHeaderId)
                If ExamUnitId > 0 Then .Add("ExamUnitId", ExamUnitId)
                .Add("ExamGradeChangeReason", mvExamGradeChangeReasonCode)
                .Add("PreviousGrade", mvClassFields.Item(ExamStudentUnitHeaderFields.CurrentGrade).SetValue)
                .Add("PreviousMark", mvClassFields.Item(ExamStudentUnitHeaderFields.CurrentMark).SetValue)
                .Add("PreviousResult", mvClassFields.Item(ExamStudentUnitHeaderFields.CurrentResult).SetValue)
              End With
              Dim vExamGradeHistory As New ExamGradeChangeHistory(mvEnv)
              vExamGradeHistory.Create(vParams)
              vExamGradeHistory.Save(mvEnv.User.UserID, True)
            End With
          End If
        End If
      End If

      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)

      If vTrans Then mvEnv.Connection.CommitTransaction()

    End Sub

    Public Function CompareTo(y As Object) As Integer Implements IComparable.CompareTo
      Dim vComparison As Integer = 0 'by default the two are equal unless we can prove otherwise
      Dim vOtherObject As IComparable = TryCast(y, IComparable)
      If vOtherObject Is Nothing Then
        vComparison = -1 'the other object is either not an ESUH or is null
      Else
        vComparison = MergeCompare(vOtherObject)
        '        With the system configured To prevent Downgrades:
        '- Grade: The record with the Grade that has the highest Sequence Number will be selected
        '- Mark: The record with the highest mark will be selected.
        '- Retain: The record already on the Master record will be retained.

        'With the system configured To allow Downgrades.  Note that the system only allows downgrades On exam failures.  Once an exam Is passed, it can theoretically Not be re-taken.
        '- Expiry: The record that Is Not expired will be selected
        '- Result: The record with a Pass will be selected
        '- Recency: For failed exams only, the exam that Is linked with the most recent Exam Booking will be selected.  For passed exams this step will be ignored.
        '- Grade: The record with the Grade that has the highest Sequence Number will be selected
        '- Mark: The record with the highest mark will be selected.
        '- Retain: The record already on the Master record will be retained.

      End If
      Return vComparison
    End Function

    Private Function SimpleMergeCompare(pOtherESUH As ExamStudentUnitHeader) As Integer
      Dim vComparison As Integer = 0
      If pOtherESUH Is Nothing Then
        vComparison = -1
      ElseIf Me.ExamUnitId <> pOtherESUH.ExamUnitId Then
        vComparison = Me.ExamUnitId.CompareTo(pOtherESUH.ExamUnitId)
      Else
        'Grade sequence number.  Lower 
        Dim vGradeSeq As Integer = If(String.IsNullOrWhiteSpace(Me.CurrentGrade), Integer.MinValue, Me.CurrentGradeLookup.FieldValueInteger("sequence_number"))
        Dim vOtherGradeSeq As Integer = If(String.IsNullOrWhiteSpace(pOtherESUH.CurrentGrade), Integer.MinValue, pOtherESUH.CurrentGradeLookup.FieldValueInteger("sequence_number"))

        Dim ResultsAreEqual As Boolean = Me.CurrentResult = pOtherESUH.CurrentResult
        Dim ExpiredAreEqual As Boolean = Me.IsExpired = pOtherESUH.IsExpired
        Dim GradeSeqAreEqual As Boolean = vGradeSeq = vOtherGradeSeq
        Dim MarksAreEqual As Boolean = Me.CurrentMark = pOtherESUH.CurrentMark
        Dim ExpiryDatesAreEqual As Boolean = Me.Expires = pOtherESUH.Expires

        If ResultsAreEqual AndAlso ExpiredAreEqual AndAlso GradeSeqAreEqual AndAlso MarksAreEqual AndAlso ExpiryDatesAreEqual Then
          vComparison = 0
        ElseIf (ResultsAreEqual AndAlso ExpiredAreEqual AndAlso GradeSeqAreEqual AndAlso MarksAreEqual AndAlso CDate(Me.Expires) > CDate(pOtherESUH.Expires)) OrElse
        (ResultsAreEqual AndAlso ExpiredAreEqual AndAlso GradeSeqAreEqual AndAlso Me.CurrentMark > pOtherESUH.CurrentMark) OrElse
        (ResultsAreEqual AndAlso ExpiredAreEqual AndAlso vGradeSeq > vOtherGradeSeq) OrElse
        (ResultsAreEqual AndAlso ExpiredAreEqual = False AndAlso Me.IsExpired = False) OrElse
        (Me.CurrentResult = "P" AndAlso pOtherESUH.CurrentResult <> "P") Then
          vComparison = 1
        Else
          vComparison = -1
        End If
      End If

      Return vComparison
    End Function
    ''' <summary>
    ''' Compares two exam student unit headers that are flagged as downgradeable
    ''' </summary>
    ''' <param name="pOtherESUH"></param>
    ''' <returns>-1 if this Exam Student Unit Header is the </returns>
    Private Function DowngradeableMergeCompare(pOtherESUH As ExamStudentUnitHeader) As Integer
      Dim vComparison As Integer = 0
      If pOtherESUH Is Nothing Then
        vComparison = -1
      ElseIf Me.ExamUnitId <> pOtherESUH.ExamUnitId Then
        vComparison = Me.ExamUnitId.CompareTo(pOtherESUH.ExamUnitId)
      Else
        Dim vDoneDate As DateTime = Common.Coalesce(Of Date)(Me.ExtractDoneDate(), CDate(Me.AmendedOn), CDate(Me.CreatedOn))
        Dim vOtherDoneDate = Common.Coalesce(Of Date)(pOtherESUH.ExtractDoneDate(), CDate(pOtherESUH.AmendedOn), CDate(pOtherESUH.CreatedOn))

        vComparison = vDoneDate.CompareTo(vOtherDoneDate)

        If vComparison = 0 Then
          vComparison = SimpleMergeCompare(pOtherESUH)
        End If
      End If

      Return vComparison
    End Function

    Private Function ExtractDoneDate() As Date
      Dim vResult As Date = Nothing
      Dim vBooking As ExamBooking = Me.GetRelatedInstance(Of ExamBooking)({ExamStudentUnitHeaderFields.ExamBookingId})
      Dim vRelatedEBU As ExamBookingUnit = vBooking.ExamBookingUnits.FirstOrDefault(
        Function(vEBU)
          Return (vEBU.ExamUnit.SessionBased = False AndAlso vEBU.ExamUnitId = Me.ExamUnitId) OrElse
          (vEBU.ExamUnit.SessionBased = True AndAlso vEBU.ExamUnit.ExamBaseUnitId = Me.ExamUnitId)
        End Function
        )
      If vRelatedEBU IsNot Nothing Then
        vResult = CDate(vRelatedEBU.DoneDate)
      End If
      Return vResult
    End Function

    Private Property ExamUnit As ExamUnit
      Get
        If mvExamUnit Is Nothing AndAlso Me.ExamUnitId > 0 Then
          Me.ExamUnit = Me.GetRelatedInstance(Of ExamUnit)({ExamStudentUnitHeaderFields.ExamUnitId})
        End If
        Return mvExamUnit
      End Get
      Set(value As ExamUnit)
        mvExamUnit = value
      End Set
    End Property

    Public Function MergeCompare(y As IComparable) As Integer Implements IMergeComparable.CompareTo
      Dim vComparison As Integer = 0 'by default the two are equal unless we can prove otherwise
      Dim vOtherESUH As ExamStudentUnitHeader = TryCast(y, ExamStudentUnitHeader)
      If vOtherESUH Is Nothing Then
        vComparison = -1 'the other object is either not an ESUH or is null
      ElseIf Me.ExamUnitId <> vOtherESUH.ExamUnitId Then
        vComparison = Me.ExamUnitId.CompareTo(vOtherESUH.ExamUnitId) 'the other object isn't for the same exam unit so we can't really compare the two records' attributes
      Else
        Dim vAllowDowngrades As Boolean = Me.ExamUnit.AllowDowngrade = "Y"
        If vAllowDowngrades Then
          vComparison = DowngradeableMergeCompare(vOtherESUH)
        Else
          vComparison = SimpleMergeCompare(vOtherESUH)
        End If
      End If
      Return vComparison
    End Function

    Public Property CurrentGradeLookup As TableMaintenanceData
      Get
        If mvCurrentGradeLookup Is Nothing AndAlso Not String.IsNullOrWhiteSpace(Me.CurrentGrade) Then
          Dim vExamGradesInstantiator As Func(Of TableMaintenanceData) = Function() (New TableMaintenanceData(mvEnv, "exam_grades"))
          mvCurrentGradeLookup = CARERecordFactory.SelectInstance(Of TableMaintenanceData)(Me.Environment, New CDBFields(New CDBField("exam_grade", Me.CurrentGrade)), vExamGradesInstantiator)
        End If
        Return mvCurrentGradeLookup
      End Get
      Private Set(value As TableMaintenanceData)
        mvCurrentGradeLookup = value
        If value Is Nothing Then
          Me.CurrentGrade = Nothing
        ElseIf Not String.IsNullOrEmpty(Me.CurrentGrade) AndAlso Me.CurrentGrade <> value.FieldValueString("exam_grade") Then
          Me.CurrentGrade = value.FieldValueString("exam_grade")
        End If
      End Set
    End Property
    Public ReadOnly Property IsExpired As Boolean
      Get
        Dim vResult As Boolean = False
        Dim vExpiryDate As DateTime = Nothing
        If DateTime.TryParse(Me.Expires, vExpiryDate) Then
          vResult = DateTime.Now > vExpiryDate
        End If
        Return vResult
      End Get
    End Property

    <MergeParent()>
    Public Property ExamStudentHeader As ExamStudentHeader
      Get
        If Me.ExamStudentHeaderId <> 0 AndAlso
        (mvExamStudentHeader Is Nothing OrElse mvExamStudentHeader.ExamStudentHeaderId <> Me.ExamStudentHeaderId) Then
          Me.ExamStudentHeader = Me.GetRelatedInstance(Of ExamStudentHeader)({ExamStudentUnitHeaderFields.ExamStudentHeaderId})
        End If
        Return mvExamStudentHeader
      End Get
      Set(value As ExamStudentHeader)
        mvExamStudentHeader = value
        If value IsNot Nothing AndAlso value.ExamStudentHeaderId <> Me.ExamStudentHeaderId Then
          Me.ExamStudentHeaderId = value.ExamStudentHeaderId
        End If
      End Set
    End Property

    <MergeList()>
    Public Property Certificates As IEnumerable(Of ContactExamCert)
      Get
        If mvExamCerts Is Nothing Then
          Me.Certificates = Me.GetRelatedList(Of ContactExamCert)({ExamStudentUnitHeaderFields.ExamStudentUnitHeaderId})
        End If
        Return mvExamCerts
      End Get
      Set(value As IEnumerable(Of ContactExamCert))
        mvExamCerts = value
      End Set
    End Property

    <MergeList()>
    Public Property GradeChangeHistory As IEnumerable(Of ExamGradeChangeHistory)
      Get
        If mvExamGradeChangeHistory Is Nothing Then
          Me.GradeChangeHistory = Me.GetRelatedList(Of ExamGradeChangeHistory)({ExamStudentUnitHeaderFields.ExamStudentUnitHeaderId})
        End If
        Return mvExamGradeChangeHistory
      End Get
      Private Set(value As IEnumerable(Of ExamGradeChangeHistory))
        mvExamGradeChangeHistory = value
      End Set
    End Property
#End Region
  End Class
End Namespace
