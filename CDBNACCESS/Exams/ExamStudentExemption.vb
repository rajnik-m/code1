Namespace Access

  Public Class ExamStudentExemption
    Inherits CARERecord
    Implements IRecordCreate

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum ExamStudentExemptionFields
      AllFields = 0
      ExamStudentExemptionId
      ExamExemptionId
      ContactNumber
      BatchNumber
      TransactionNumber
      LineNumber
      ExamExemptionStatus
      StatusDate
      OrganisationNumber
      ExemptionModule
      CreatedBy
      CreatedOn
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("exam_student_exemption_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_exemption_id", CDBField.FieldTypes.cftInteger)
        .Add("contact_number", CDBField.FieldTypes.cftInteger)
        .Add("batch_number", CDBField.FieldTypes.cftInteger)
        .Add("transaction_number", CDBField.FieldTypes.cftInteger)
        .Add("line_number", CDBField.FieldTypes.cftInteger)
        .Add("exam_exemption_status")
        .Add("status_date", CDBField.FieldTypes.cftTime)
        .Add("organisation_number", CDBField.FieldTypes.cftInteger)
        .Add("exemption_module")
        .Add("created_by")
        .Add("created_on", CDBField.FieldTypes.cftDate)

        .Item(ExamStudentExemptionFields.ExamStudentExemptionId).PrimaryKey = True
        .Item(ExamStudentExemptionFields.ExamStudentExemptionId).PrefixRequired = True
        .Item(ExamStudentExemptionFields.ExamExemptionId).PrefixRequired = True
        .SetControlNumberField(ExamStudentExemptionFields.ExamStudentExemptionId, "XSE")

        .Item(ExamStudentExemptionFields.ExamExemptionStatus).PrefixRequired = True
        .Item(ExamStudentExemptionFields.CreatedBy).PrefixRequired = True
        .Item(ExamStudentExemptionFields.CreatedOn).PrefixRequired = True
        .Item(ExamStudentExemptionFields.OrganisationNumber).PrefixRequired = True

        .Item(ExamStudentExemptionFields.OrganisationNumber).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbExamExemptionModule)
        .Item(ExamStudentExemptionFields.ExemptionModule).InDatabase = .Item(ExamStudentExemptionFields.OrganisationNumber).InDatabase
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ese"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "exam_student_exemptions"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'IRecordCreate
    '--------------------------------------------------
    Public Function CreateInstance(ByVal pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New ExamStudentExemption(mvEnv)
    End Function
    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ExamStudentExemptionId() As Integer
      Get
        Return mvClassFields(ExamStudentExemptionFields.ExamStudentExemptionId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamExemptionId() As Integer
      Get
        Return mvClassFields(ExamStudentExemptionFields.ExamExemptionId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(ExamStudentExemptionFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property BatchNumber() As Integer
      Get
        Return mvClassFields(ExamStudentExemptionFields.BatchNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property TransactionNumber() As Integer
      Get
        Return mvClassFields(ExamStudentExemptionFields.TransactionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property LineNumber() As Integer
      Get
        Return mvClassFields(ExamStudentExemptionFields.LineNumber).IntegerValue
      End Get
    End Property
    Public Property ExamExemptionStatus() As String
      Get
        Return mvClassFields(ExamStudentExemptionFields.ExamExemptionStatus).Value
      End Get
      Set(ByVal pValue As String)
        mvClassFields(ExamStudentExemptionFields.ExamExemptionStatus).Value = pValue
        mvClassFields(ExamStudentExemptionFields.StatusDate).Value = TodaysDateAndTime()
      End Set
    End Property
    Public ReadOnly Property StatusDate() As String
      Get
        Return mvClassFields(ExamStudentExemptionFields.StatusDate).Value
      End Get
    End Property
    Public ReadOnly Property OrganisationNumber() As Integer
      Get
        Return mvClassFields(ExamStudentExemptionFields.OrganisationNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExemptionModule() As String
      Get
        Return mvClassFields(ExamStudentExemptionFields.ExemptionModule).Value
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(ExamStudentExemptionFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(ExamStudentExemptionFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ExamStudentExemptionFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ExamStudentExemptionFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Not AutoGenerated Code"

    Private Shared mvGrantedStatus As String
    Private Shared mvBilledStatus As String
    Private Shared mvEligibleStatus As String
    Private Shared mvWriteOffStatus As String
    Private mvSetOrganisationNull As Boolean

    Public Overrides Sub PreValidateParameterList(pType As CARERecord.MaintenanceTypes, pParameterList As CDBParameters)
      MyBase.PreValidateParameterList(pType, pParameterList)
      If pParameterList.ContainsKey("OrganisationNumber") AndAlso pParameterList("OrganisationNumber").Value = "" Then
        pParameterList.Remove("OrganisationNumber")
        mvSetOrganisationNull = True
      End If
    End Sub

    Protected Overrides Sub PreValidateUpdateParameters(pParameterList As CDBParameters)
      MyBase.PreValidateUpdateParameters(pParameterList)
      If mvSetOrganisationNull AndAlso Not pParameterList.ContainsKey("OrganisationNumber") Then
        pParameterList.Add("OrganisationNumber")
      End If
    End Sub

    Public ReadOnly Property BilledStatus As String
      Get
        If String.IsNullOrEmpty(mvBilledStatus) Then ReadExemptionStatuses()
        Return mvBilledStatus
      End Get
    End Property

    Public ReadOnly Property GrantedStatus As String
      Get
        If String.IsNullOrEmpty(mvGrantedStatus) Then ReadExemptionStatuses()
        Return mvGrantedStatus
      End Get
    End Property

    Public ReadOnly Property EligibleStatus As String
      Get
        If String.IsNullOrEmpty(mvEligibleStatus) Then ReadExemptionStatuses()
        Return mvEligibleStatus
      End Get
    End Property

    Public ReadOnly Property WriteOffStatus As String
      Get
        If String.IsNullOrEmpty(mvWriteOffStatus) Then ReadExemptionStatuses()
        If String.IsNullOrEmpty(mvWriteOffStatus) Then RaiseError(DataAccessErrors.daeExamExemptionMissingWriteOffStatus)
        Return mvWriteOffStatus
      End Get
    End Property

    Private Sub ReadExemptionStatuses()
      Dim vSQL As New SQLStatement(mvEnv.Connection, "exam_exemption_status,exam_exemption_status_type", "exam_exemption_statuses", New CDBField("exam_exemption_status_type", "'G','B','E','W'", CDBField.FieldWhereOperators.fwoIn))
      Dim vRS As CDBRecordSet = vSQL.GetRecordSet
      While vRS.Fetch
        Select Case vRS.Fields(2).Value
          Case "B"
            mvBilledStatus = vRS.Fields(1).Value
          Case "E"
            mvEligibleStatus = vRS.Fields(1).Value
          Case "G"
            mvGrantedStatus = vRS.Fields(1).Value
          Case "W"
            mvWriteOffStatus = vRS.Fields(1).Value
        End Select
      End While
      vRS.CloseRecordSet()
      If mvGrantedStatus.Length = 0 Then RaiseError(DataAccessErrors.daeExamExemptionMissingGrantedStatus)
      If mvBilledStatus.Length = 0 Then RaiseError(DataAccessErrors.daeExamExemptionMissingBilledStatus)
      If String.IsNullOrWhiteSpace(mvEligibleStatus) Then RaiseError(DataAccessErrors.daeExamExemptionMissingEligibleStatus)
    End Sub

    Public Sub SetTransactionInfo(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pLineNumber As Integer)
      mvClassFields(ExamStudentExemptionFields.BatchNumber).IntegerValue = pBatchNumber
      mvClassFields(ExamStudentExemptionFields.TransactionNumber).IntegerValue = pTransactionNumber
      mvClassFields(ExamStudentExemptionFields.LineNumber).IntegerValue = pLineNumber
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      Dim vExemptionGranted As Boolean
      Dim vExemptionRevoked As Boolean
      Dim vExemptGrade As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlExamExemptionGrade)
      If vExemptGrade.Length = 0 Then RaiseError(DataAccessErrors.daeExamControlsMissingExemptGrade)
      Dim vExemptResult As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlExamExemptionResult)
      If vExemptResult.Length = 0 Then vExemptResult = "P"

      Dim vTrans As Boolean = False
      If mvClassFields(ExamStudentExemptionFields.ExamExemptionStatus).ValueChanged Then
        If ExamExemptionStatus = GrantedStatus Then vExemptionGranted = True
        If mvClassFields(ExamStudentExemptionFields.ExamExemptionStatus).SetValue = GrantedStatus Then vExemptionRevoked = True
        If Me.ExamExemptionStatus.Equals(Me.EligibleStatus, StringComparison.InvariantCultureIgnoreCase) Then ResetExemptionForBilling()
        SetValid()      'Ensure control number set
        Dim vESEH As New ExamStudentExemptionHistory(mvEnv)
        vESEH.Init()
        vESEH.SetFromStudentExemption(Me)
        vTrans = mvEnv.Connection.StartTransaction()
        vESEH.Save(pAmendedBy, pAudit, pJournalNumber)
      Else
        vTrans = mvEnv.Connection.StartTransaction()
      End If
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
      If vExemptionGranted Then
        'First get a list of the exam exemption units that this exemption gives us
        Dim vExemptionUnit As New ExamExemptionUnit(mvEnv)
        Dim vExemptionUnits As List(Of ExamExemptionUnit) = vExemptionUnit.GetList(Of ExamExemptionUnit)(vExemptionUnit, New CDBFields(New CDBField("exam_exemption_id", ExamExemptionId)))
        'Check to see if there are any exemption units in case they have not been setup
        If vExemptionUnits.Count > 0 Then
          'Setup a sub SQL to find the summary records that this student already has
          Dim vSubAnsiJoins As New AnsiJoins
          vSubAnsiJoins.Add("exam_student_unit_header esuh", "esuh.exam_student_header_id", "esh.exam_student_header_id")
          Dim vSubSQL As New SQLStatement(mvEnv.Connection, "esh.exam_student_header_id, exam_student_unit_header_id, esuh.exam_unit_id, esuh.exam_unit_link_id", "exam_student_header esh", New CDBFields(New CDBField("contact_number", ContactNumber)), "", vSubAnsiJoins)
          Dim vUnitIds As New ArrayListEx
          Dim vHeaderList As New CollectionList(Of StudentHeaderInfo)
          For Each vExemptionUnit In vExemptionUnits
            vUnitIds.Add(vExemptionUnit.ExamUnitId.ToString)
            Dim vHeader As New StudentHeaderInfo
            vHeader.UnitId = vExemptionUnit.ExamUnitId
            vHeader.Exempt = True
            vHeaderList.Add(vHeader.UnitId.ToString, vHeader)
          Next
          'For each units find out if a summary record exists and what it's parent is
          Dim vAnsiJoins As New AnsiJoins
          vAnsiJoins.AddLeftOuterJoin("exam_unit_links eul", "eu.exam_unit_id", "eul.exam_unit_id_2")
          vAnsiJoins.AddLeftOuterJoin(String.Format("( {0} ) eh", vSubSQL.SQL), "eu.exam_unit_id", "eh.exam_unit_id")
          Do
            Dim vWhereFields As New CDBFields
            vWhereFields.Add("eu.exam_unit_id", vUnitIds.CSList, CDBField.FieldWhereOperators.fwoIn)
            vUnitIds.Clear()
            Dim vSQL As New SQLStatement(mvEnv.Connection, "eu.exam_unit_id,exam_unit_id_1, exam_student_unit_header_id, exam_student_header_id, exemption_mark, eul.exam_unit_link_id, eul.parent_unit_link_id", "exam_units eu ", vWhereFields, "", vAnsiJoins)
            Dim vRS As CDBRecordSet = vSQL.GetRecordSet
            While vRS.Fetch
              If vHeaderList.ContainsKey(vRS.Fields(1).Value) Then
                Dim vUnitHeader As StudentHeaderInfo = vHeaderList(vRS.Fields(1).Value)
                vUnitHeader.ParentId = vRS.Fields(2).IntegerValue
                vUnitHeader.StudentUnitId = vRS.Fields(3).IntegerValue
                vUnitHeader.StudentHeaderId = vRS.Fields(4).IntegerValue
                vUnitHeader.ExemptMark = vRS.Fields(5).DoubleValue
                vUnitHeader.UnitLinkId = vRS.Fields(6).IntegerValue
                vUnitHeader.ParentLinkId = vRS.Fields(7).IntegerValue
                If vUnitHeader.ParentLinkId > 0 AndAlso Not vHeaderList.ContainsKey(vUnitHeader.ParentId.ToString) Then
                  vUnitIds.Add(vUnitHeader.ParentId)
                  Dim vHeader As New StudentHeaderInfo
                  vHeader.UnitId = vUnitHeader.ParentId
                  vHeaderList.Add(vHeader.UnitId.ToString, vHeader)
                End If
              End If
            End While
            vRS.CloseRecordSet()
          Loop While vUnitIds.Count > 0
          For Each vUnitHeader As StudentHeaderInfo In vHeaderList
            If vUnitHeader.StudentUnitId > 0 Then
              'Header exists
              If vUnitHeader.Exempt Then
                Dim vExamStudentUnitHeader As New ExamStudentUnitHeader(mvEnv)
                vExamStudentUnitHeader.Init(vUnitHeader.StudentUnitId)
                'Make sure it is marked as exempt
                If vExamStudentUnitHeader.Existing AndAlso vExamStudentUnitHeader.CurrentGrade <> vExemptGrade Then
                  Dim vParams As New CDBParameters
                  vParams.Add("CurrentMark", vUnitHeader.ExemptMark)
                  vParams.Add("CurrentGrade", vExemptGrade)
                  vParams.Add("CurrentResult", vExemptResult)
                  If vExamStudentUnitHeader.FirstPassed.Length = 0 Then vParams.Add("FirstPassed", CDBField.FieldTypes.cftTime, TodaysDateAndTime())
                  vExamStudentUnitHeader.Update(vParams)
                  vExamStudentUnitHeader.Save(mvEnv.User.UserID, True)
                End If
                If vUnitHeader.StudentHeaderId > 0 Then UpdateStudentHeader(vUnitHeader.StudentHeaderId)
              End If
            Else
              'Need to create a student unit header for this row
              'First traverse up the tree looking for a header
              Dim vStudentHeaderId As Integer = 0
              Dim vParent As StudentHeaderInfo = vUnitHeader
              While vParent.ParentId > 0 And vParent.StudentHeaderId = 0
                vParent = vHeaderList(vParent.ParentId.ToString)
              End While
              Dim vStudentHeader As New ExamStudentHeader(mvEnv)
              Dim vStudentParams As New CDBParameters
              vStudentParams.Add("LastMarkedDate", CDBField.FieldTypes.cftTime, TodaysDateAndTime())
              If vParent.StudentHeaderId > 0 Then
                'Found a student header for this exam tree - update the last marked date
                vStudentHeaderId = vParent.StudentHeaderId
                vStudentHeader.Init(vStudentHeaderId)
                vStudentHeader.Update(vStudentParams)
                vStudentHeader.Save(mvEnv.User.UserID, True)
              Else
                'Top of the tree need to create a student header id
                vStudentParams.Add("ContactNumber", ContactNumber)
                vStudentParams.Add("ExamUnitId", vParent.UnitId)
                vStudentParams.Add("ExamUnitLinkId", vParent.UnitLinkId)
                vStudentHeader.Create(vStudentParams)
                vStudentHeader.Save(mvEnv.User.UserID, True)
                vParent.StudentHeaderId = vStudentHeader.ExamStudentHeaderId
                vStudentHeaderId = vStudentHeader.ExamStudentHeaderId
              End If
              'Now create the unit header
              Dim vStudentUnitHeader As New ExamStudentUnitHeader(mvEnv)
              Dim vStudentUnitHeaderParms As New CDBParameters
              vStudentUnitHeaderParms.Add("ExamStudentHeaderId", vStudentHeaderId)
              vStudentUnitHeaderParms.Add("ExamUnitId", vUnitHeader.UnitId)
              vStudentUnitHeaderParms.Add("ExamUnitLinkId", vUnitHeader.UnitLinkId)
              If vUnitHeader.Exempt Then
                vStudentUnitHeaderParms.Add("Attempts", 0)
                vStudentUnitHeaderParms.Add("CurrentMark", vUnitHeader.ExemptMark)
                vStudentUnitHeaderParms.Add("CurrentGrade", vExemptGrade)
                vStudentUnitHeaderParms.Add("CurrentResult", vExemptResult)
                vStudentUnitHeaderParms.Add("FirstPassed", CDBField.FieldTypes.cftTime, TodaysDateAndTime())
              End If
              vStudentUnitHeader.Create(vStudentUnitHeaderParms)
              vStudentUnitHeader.Save(mvEnv.User.UserID, True)
              vUnitHeader.StudentUnitId = vStudentUnitHeader.ExamStudentUnitHeaderId
              vUnitHeader.StudentHeaderId = vStudentHeaderId
            End If
          Next
        End If
      ElseIf vExemptionRevoked Then
        'First get a list of the exam exemption units that this exemption gives us
        Dim vExamStudentUnitHeader As New ExamStudentUnitHeader(mvEnv)
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("exam_exemption_id", ExamExemptionId)
        vWhereFields.Add("current_grade", vExemptGrade)
        vWhereFields.Add("contact_number", ContactNumber)
        Dim vAnsiJoins As New AnsiJoins
        vAnsiJoins.Add("exam_student_header esh", "esuh.exam_student_header_id", "esh.exam_student_header_id")
        vAnsiJoins.Add("exam_exemption_units eeu", "eeu.exam_unit_id", "esuh.exam_unit_id")
        Dim vSQL As New SQLStatement(mvEnv.Connection, vExamStudentUnitHeader.GetRecordSetFields, "exam_student_unit_header esuh", vWhereFields, "", vAnsiJoins)
        Dim vRS As CDBRecordSet = vSQL.GetRecordSet
        While vRS.Fetch
          vExamStudentUnitHeader.InitFromRecordSet(vRS)
          Dim vParams As New CDBParameters
          vParams.Add("CurrentMark", "")
          vParams.Add("CurrentGrade", "")
          vParams.Add("CurrentResult", "")
          vExamStudentUnitHeader.Update(vParams)
          vExamStudentUnitHeader.Save()

          If vRS.Fields.ContainsKey("exam_student_header_id") Then UpdateStudentHeader(vRS.Fields("exam_student_header_id").IntegerValue)
        End While
        vRS.CloseRecordSet()
      End If
      If vTrans Then mvEnv.Connection.CommitTransaction()
    End Sub

    Private Class StudentHeaderInfo
      Friend UnitId As Integer
      Friend ParentId As Integer
      Friend StudentUnitId As Integer
      Friend StudentHeaderId As Integer
      Friend Exempt As Boolean
      Friend ExemptMark As Double
      Friend UnitLinkId As Integer
      Friend ParentLinkId As Integer
    End Class

    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      Dim vWhereFields As New CDBFields
      vWhereFields.Add(mvClassFields(ExamStudentExemptionFields.ExamStudentExemptionId).Name, ExamStudentExemptionId)
      mvEnv.Connection.DeleteRecords("exam_student_exemption_history", vWhereFields)
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Sub GrantExemptions(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer)
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("batch_number", pBatchNumber)
      vWhereFields.Add("transaction_number", pTransactionNumber)
      Dim vExemptionList As List(Of ExamStudentExemption) = Me.GetList(Of ExamStudentExemption)(Me, vWhereFields)
      If vExemptionList.Count > 0 Then
        For Each vExemption As ExamStudentExemption In vExemptionList
          vExemption.ExamExemptionStatus = GrantedStatus
          vExemption.Save()
        Next
      End If
    End Sub

    Public Sub RevokeExemptions(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer)
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("batch_number", pBatchNumber)
      vWhereFields.Add("transaction_number", pTransactionNumber)
      Dim vExemptionList As List(Of ExamStudentExemption) = Me.GetList(Of ExamStudentExemption)(Me, vWhereFields)
      If vExemptionList.Count > 0 Then
        For Each vExemption As ExamStudentExemption In vExemptionList
          vExemption.ExamExemptionStatus = BilledStatus
          vExemption.Save()
        Next
      End If
    End Sub

    Public Sub RefundExemptionInvoice(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pAdjustmentBatchNumber As Integer, ByVal pAdjustmentTransactionNumber As Integer)
      Dim vWhereFields As New CDBFields({New CDBField("batch_number", pBatchNumber), New CDBField("transaction_number", pTransactionNumber)})

      Dim vReverseCancellation As Boolean = False
      If pAdjustmentBatchNumber > 0 AndAlso pAdjustmentTransactionNumber > 0 Then
        Dim vAnsiJoins As New AnsiJoins({New AnsiJoin("reversals r", "cn.batch_number", "r.batch_number", "cn.transaction_number", "r.transaction_number")})
        vAnsiJoins.Add("invoices i", "r.was_batch_number", "i.batch_number", "r.was_transaction_number", "i.transaction_number")
        Dim vExWhereFields As New CDBFields({New CDBField("cn.batch_number", pBatchNumber), New CDBField("cn.transaction_number", pTransactionNumber)})
        vExWhereFields.Add("cn.record_type", "N")
        vExWhereFields.Add("i.record_type", "I")
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, "i.batch_number, i.transaction_number, i.invoice_number", "invoices cn", vExWhereFields, "", vAnsiJoins)
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        If vRS.Fetch Then vWhereFields = New CDBFields({New CDBField("batch_number", vRS.Fields(1).IntegerValue), New CDBField("transaction_number", vRS.Fields(2).IntegerValue)})
        vRS.CloseRecordSet()
        vReverseCancellation = True
      End If

      If pBatchNumber > 0 AndAlso pTransactionNumber > 0 Then
        Dim vExemptionList As List(Of ExamStudentExemption) = Me.GetList(Of ExamStudentExemption)(Me, vWhereFields)
        If vExemptionList.Count > 0 Then
          For Each vExemption As ExamStudentExemption In vExemptionList
            If vReverseCancellation = False AndAlso vExemption.ExamExemptionStatus.Equals(BilledStatus) Then
              vExemption.ExamExemptionStatus = WriteOffStatus
            ElseIf vReverseCancellation = True AndAlso vExemption.BatchNumber > 0 Then
              vExemption.ExamExemptionStatus = BilledStatus
              vExemption.SetTransactionInfo(pAdjustmentBatchNumber, pAdjustmentTransactionNumber, vExemption.LineNumber)
            End If
            vExemption.Save()
          Next
        End If
      End If
    End Sub

    Private Sub UpdateStudentHeader(ByVal pStudentHeaderId As Integer)
      Dim vStudentHeader As New ExamStudentHeader(mvEnv)
      Dim vUpdateLastMarkedDate As New CDBParameters
      vUpdateLastMarkedDate.Add("LastMarkedDate", CDBField.FieldTypes.cftTime, TodaysDateAndTime())
      vStudentHeader.Init(pStudentHeaderId)
      vStudentHeader.Update(vUpdateLastMarkedDate)
      vStudentHeader.Save(mvEnv.User.UserID, True)
    End Sub

    Private Sub ResetExemptionForBilling()
      'The paying invoice has been cancelled so clear the transaction data so that a new invoice can be created
      If Me.BatchNumber > 0 AndAlso Me.TransactionNumber > 0 AndAlso Me.ExamExemptionStatus.Equals(Me.EligibleStatus, StringComparison.InvariantCultureIgnoreCase) Then
        Dim vAnsiJoins As New AnsiJoins({New AnsiJoin("reversals r", "i.batch_number", "r.was_batch_number", "i.transaction_number", "r.was_transaction_number")})
        vAnsiJoins.Add("invoices cn", "r.batch_number", "cn.batch_number", "r.transaction_number", "cn.transaction_number")
        Dim vWhereFields As New CDBFields({New CDBField("i.batch_number", Me.BatchNumber), New CDBField("i.transaction_number", Me.TransactionNumber)})
        vWhereFields.Add("cn.record_type", CDBField.FieldTypes.cftCharacter, "N")
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, String.Empty, "invoices i", vWhereFields, String.Empty, vAnsiJoins)
        If mvEnv.Connection.GetCountFromStatement(vSQLStatement) > 0 Then
          mvClassFields(ExamStudentExemptionFields.BatchNumber).Value = String.Empty
          mvClassFields.Item(ExamStudentExemptionFields.TransactionNumber).Value = String.Empty
          mvClassFields.Item(ExamStudentExemptionFields.LineNumber).Value = String.Empty
        End If
      End If
    End Sub

#End Region


  End Class
End Namespace
