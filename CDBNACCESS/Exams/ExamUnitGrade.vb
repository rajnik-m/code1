Namespace Access

  Public Class ExamUnitGrade
    Inherits CARERecord
    Implements IRecordCreate

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum ExamUnitGradeFields
      AllFields = 0
      ExamUnitGradeId
      ExamUnitId
      ExamGrade
      SequenceNumber
      ConditionNumber
      ClauseNumber
      ExamGradeConditionType
      GradeUnits
      ExamGradeOperator
      RequiredValue
      CreatedBy
      CreatedOn
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("exam_unit_grade_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_unit_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_grade")
        .Add("sequence_number", CDBField.FieldTypes.cftInteger)
        .Add("condition_number", CDBField.FieldTypes.cftInteger)
        .Add("clause_number", CDBField.FieldTypes.cftInteger)
        .Add("exam_grade_condition_type")
        .Add("grade_units")
        .Add("exam_grade_operator")
        .Add("required_value")
        .Add("created_by")
        .Add("created_on", CDBField.FieldTypes.cftDate)

        .Item(ExamUnitGradeFields.ExamUnitGradeId).PrimaryKey = True
        .Item(ExamUnitGradeFields.ExamUnitGradeId).PrefixRequired = True
        .SetControlNumberField(ExamUnitGradeFields.ExamUnitGradeId, "XUG")

        .Item(ExamUnitGradeFields.ExamGrade).PrefixRequired = True
        .Item(ExamUnitGradeFields.CreatedBy).PrefixRequired = True
        .Item(ExamUnitGradeFields.CreatedOn).PrefixRequired = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "eug"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "exam_unit_grades"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'IRecordCreate
'--------------------------------------------------
    Public Function CreateInstance(ByVal pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New ExamUnitGrade(mvEnv)
    End Function
'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property ExamUnitGradeId() As Integer
      Get
        Return mvClassFields(ExamUnitGradeFields.ExamUnitGradeId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamUnitId() As Integer
      Get
        Return mvClassFields(ExamUnitGradeFields.ExamUnitId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamGrade() As String
      Get
        Return mvClassFields(ExamUnitGradeFields.ExamGrade).Value
      End Get
    End Property
    Public ReadOnly Property SequenceNumber() As Integer
      Get
        Return mvClassFields(ExamUnitGradeFields.SequenceNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ConditionNumber() As Integer
      Get
        Return mvClassFields(ExamUnitGradeFields.ConditionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ClauseNumber() As Integer
      Get
        Return mvClassFields(ExamUnitGradeFields.ClauseNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamGradeConditionType() As String
      Get
        Return mvClassFields(ExamUnitGradeFields.ExamGradeConditionType).Value
      End Get
    End Property
    Public ReadOnly Property GradeUnits() As String
      Get
        Return mvClassFields(ExamUnitGradeFields.GradeUnits).Value
      End Get
    End Property
    Public ReadOnly Property ExamGradeOperator() As String
      Get
        Return mvClassFields(ExamUnitGradeFields.ExamGradeOperator).Value
      End Get
    End Property
    Public ReadOnly Property RequiredValue() As String
      Get
        Return mvClassFields(ExamUnitGradeFields.RequiredValue).Value
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(ExamUnitGradeFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(ExamUnitGradeFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ExamUnitGradeFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ExamUnitGradeFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      ' update all other instances of a sequence which have the same grade within this set of grading rules.
      If mvClassFields(ExamUnitGradeFields.SequenceNumber).ValueChanged Or Existing = False Then
        Dim vUpdateFields As New CDBFields
        vUpdateFields.Add("sequence_number", SequenceNumber)
        vUpdateFields.AddAmendedOnBy(mvEnv.User.UserID)
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("exam_grade", ExamGrade)
        vWhereFields.Add("exam_unit_id", ExamUnitId)
        mvEnv.Connection.UpdateRecords(DatabaseTableName, vUpdateFields, vWhereFields, False)
      End If

      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Overrides Sub PreValidateParameterList(pType As CARERecord.MaintenanceTypes, pParameterList As CDBParameters)
      MyBase.PreValidateParameterList(pType, pParameterList)

      If pType = MaintenanceTypes.Insert Or pType = MaintenanceTypes.Update Then
        If pParameterList.HasValue("ExamGradeConditionType") Then
          Dim vExamGradeConditionType As String = pParameterList("ExamGradeConditionType").Value
          'Validate Grade units so only the right grade condition allows multiple units.
          If pParameterList.HasValue("GradeUnits") Then
            Dim vMultiSelectConditionTypes As New List(Of String)(New String() {"M", "N", "C", "N_D", "N_R"}) 'Only these grades should allow multiple units: M-Marks, N-No Passes, C-No Credits, N_D-No New Credits, N_R-No Open Bookings
            If Not vMultiSelectConditionTypes.Contains(vExamGradeConditionType) AndAlso pParameterList("GradeUnits").Value.Contains(",") Then
              RaiseError(DataAccessErrors.daeGradeRulesNoMultiSelect)
            End If
          End If
          If pParameterList.HasValue("RequiredValue") Then
            Dim vRequiredValue As String = pParameterList("RequiredValue").Value
            'Validate Required Value length
            Dim vMaxLength As Integer = 14
            Select Case vExamGradeConditionType
              Case "G" 'Grade
                vMaxLength = 4
              Case "S" 'Status
                vMaxLength = 1
              Case Else
                'Default length for all other values is Decimal (13,3).  This is daft for integer values but the UI has always permitted it.
            End Select
            If Len(vRequiredValue) > vMaxLength Then
              RaiseError(DataAccessErrors.daeParameterValueInvalid, "RequiredValue")
            End If

            'Validate Required Value must be numeric for Mark, Number of Bookings (Registrations), Number of Attempts, Number of Passes, Number of Credits, Number of New Credits
            If (New List(Of String)() From {"M", "N_R", "A", "N", "C", "N_D"}).Contains(vExamGradeConditionType) Then
              Dim vNumericValue As Double
              If Not Double.TryParse(vRequiredValue, vNumericValue) Then
                RaiseError(DataAccessErrors.daeParameterValueInvalid, "RequiredValue")
              End If
            End If
          End If
        End If
      End If
    End Sub

#End Region

  End Class
End Namespace
