Namespace Access

  Public Class ExamCentre
    Inherits CARERecord
    Implements IRecordCreate

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum ExamCentreFields
      AllFields = 0
      ExamCentreId
      OrganisationNumber
      AddressNumber
      ContactNumber
      ExamCentreCode
      ExamCentreDescription
      ValidFrom
      ValidTo
      Capacity
      LastVisitDate
      NextVisitDate
      ExamCentreParentId
      AdditionalCapacity
      Overseas
      AcceptSpecialRequirements
      WebPublish
      ExamCentreRateType
      AccreditationStatus
      AccreditationValidFrom
      AccreditationValidTo
      CreatedBy
      CreatedOn
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("exam_centre_id", CDBField.FieldTypes.cftInteger)
        .Add("organisation_number", CDBField.FieldTypes.cftInteger)
        .Add("address_number", CDBField.FieldTypes.cftInteger)
        .Add("contact_number", CDBField.FieldTypes.cftInteger)
        .Add("exam_centre_code")
        .Add("exam_centre_description")
        .Add("valid_from", CDBField.FieldTypes.cftDate)
        .Add("valid_to", CDBField.FieldTypes.cftDate)
        .Add("capacity", CDBField.FieldTypes.cftInteger)
        .Add("last_visit_date", CDBField.FieldTypes.cftDate)
        .Add("next_visit_date", CDBField.FieldTypes.cftDate)
        .Add("exam_centre_parent_id", CDBField.FieldTypes.cftInteger)
        .Add("additional_capacity", CDBField.FieldTypes.cftInteger)
        .Add("overseas")
        .Add("accept_special_requirements")
        .Add("web_publish")
        .Add("exam_centre_rate_type")
        .Add("accreditation_status")
        .Add("accreditation_valid_from", CDBField.FieldTypes.cftDate)
        .Add("accreditation_valid_to", CDBField.FieldTypes.cftDate)
        .Add("created_by")
        .Add("created_on", CDBField.FieldTypes.cftDate)

        .Item(ExamCentreFields.ExamCentreId).PrimaryKey = True
        .Item(ExamCentreFields.ExamCentreId).PrefixRequired = True
        .SetControlNumberField(ExamCentreFields.ExamCentreId, "XPC")

        .SetUniqueField(ExamCentreFields.ExamCentreCode)
        .Item(ExamCentreFields.CreatedBy).PrefixRequired = True
        .Item(ExamCentreFields.CreatedOn).PrefixRequired = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ec"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "exam_centres"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'IRecordCreate
    '--------------------------------------------------
    Public Function CreateInstance(ByVal pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New ExamCentre(mvEnv)
    End Function

    '--------------------------------------------------
    'AddDeleteCheckItems
    '--------------------------------------------------
    Public Overrides Sub AddDeleteCheckItems()
      AddDeleteCheckItem("exam_bookings", "exam_centre_id", "an Exam Booking")
      AddCascadeDeleteItem("exam_centre_assessment_types", "exam_centre_id")
      AddDeleteCheckItem("exam_centre_contacts", "exam_centre_id", "a Contact")
      AddCascadeDeleteItem("exam_centre_units", "exam_centre_id")
      AddDeleteCheckItem("exam_centres", "exam_centre_parent_id", "an Exam Centre")
      AddDeleteCheckItem("exam_schedule", "exam_centre_id", "an Exam Schedule")
      AddDeleteCheckItem("exam_session_centres", "exam_centre_id", "an Exam Session")
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ExamCentreId() As Integer
      Get
        Return mvClassFields(ExamCentreFields.ExamCentreId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property OrganisationNumber() As Integer
      Get
        Return mvClassFields(ExamCentreFields.OrganisationNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AddressNumber() As Integer
      Get
        Return mvClassFields(ExamCentreFields.AddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(ExamCentreFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamCentreCode() As String
      Get
        Return mvClassFields(ExamCentreFields.ExamCentreCode).Value
      End Get
    End Property
    Public ReadOnly Property ExamCentreDescription() As String
      Get
        Return mvClassFields(ExamCentreFields.ExamCentreDescription).Value
      End Get
    End Property
    Public ReadOnly Property ValidFrom() As String
      Get
        Return mvClassFields(ExamCentreFields.ValidFrom).Value
      End Get
    End Property
    Public ReadOnly Property ValidTo() As String
      Get
        Return mvClassFields(ExamCentreFields.ValidTo).Value
      End Get
    End Property
    Public ReadOnly Property Capacity() As Integer
      Get
        Return mvClassFields(ExamCentreFields.Capacity).IntegerValue
      End Get
    End Property
    Public ReadOnly Property LastVisitDate() As String
      Get
        Return mvClassFields(ExamCentreFields.LastVisitDate).Value
      End Get
    End Property
    Public ReadOnly Property NextVisitDate() As String
      Get
        Return mvClassFields(ExamCentreFields.NextVisitDate).Value
      End Get
    End Property
    Public ReadOnly Property ExamCentreParentId() As Integer
      Get
        Return mvClassFields(ExamCentreFields.ExamCentreParentId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AdditionalCapacity() As Integer
      Get
        Return mvClassFields(ExamCentreFields.AdditionalCapacity).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Overseas() As Boolean
      Get
        Return mvClassFields(ExamCentreFields.Overseas).Bool
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(ExamCentreFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(ExamCentreFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ExamCentreFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ExamCentreFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property AcceptSpecialRequirements() As Boolean
      Get
        Return mvClassFields(ExamCentreFields.AcceptSpecialRequirements).Bool
      End Get
    End Property
    Public ReadOnly Property WebPublish() As Boolean
      Get
        Return mvClassFields(ExamCentreFields.WebPublish).Bool
      End Get
    End Property
    Public ReadOnly Property ExamCentreRateType() As String
      Get
        Return mvClassFields(ExamCentreFields.ExamCentreRateType).Value
      End Get
    End Property
    Public ReadOnly Property AccreditationStatus() As String
      Get
        Return mvClassFields(ExamCentreFields.AccreditationStatus).Value
      End Get
    End Property
    Public ReadOnly Property AccreditationValidFrom() As String
      Get
        Return mvClassFields(ExamCentreFields.AccreditationValidFrom).Value
      End Get
    End Property
    Public ReadOnly Property AccreditationValidTo() As String
      Get
        Return mvClassFields(ExamCentreFields.AccreditationValidTo).Value
      End Get
    End Property

#End Region

#Region "Non AutoGenerated Code"

    Public Function HasCapacity(ByVal pExamScheduleId As Integer) As Boolean
      If Capacity = 0 Then Return True

      Dim vSchedule As New ExamSchedule(mvEnv)
      vSchedule.Init(pExamScheduleId)
      If vSchedule.Existing Then
        Return Me.HasCapacity(vSchedule)
      Else
        Return False
      End If
    End Function

    Public Function HasCapacity(ByVal pExamSchedule As ExamSchedule) As Boolean
      If Capacity = 0 Then Return True

      If pExamSchedule.Existing Then
        Return Me.HasCapacity(pExamSchedule.StartDateTime, pExamSchedule.EndDateTime)
      Else
        Return False
      End If
    End Function

    Public Function HasCapacity(ByVal pStartDateTime As DateTime, ByVal pEndDateTime As DateTime) As Boolean
      If Capacity = 0 Then Return True
      Return AllocatedCapacity(pStartDateTime, pEndDateTime) < Capacity
    End Function

    Private Function AllocatedCapacity(ByVal pStartDateTime As DateTime, ByVal pEndDateTime As DateTime) As Integer
      Dim vAllocatedCount As Integer = 0

      'Find all schedules that occur on the same day at this centre
      Dim vFields As String = "es.exam_schedule_id"
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("es.exam_centre_id", ExamCentreId)
      vWhereFields.Add("es.start_date", CDBField.FieldTypes.cftDate, pStartDateTime.ToString(CAREDateFormat), CDBField.FieldWhereOperators.fwoEqual)
      Dim vSchedule As ExamSchedule = New ExamSchedule(mvEnv)
      Dim vScheduleList As List(Of ExamSchedule) = vSchedule.GetList(Of ExamSchedule)(vSchedule, vWhereFields)
      Dim vSQL As New SQLStatement(mvEnv.Connection, vFields, "exam_schedule es", vWhereFields, "")

      ' determine clashing schedules (by time)
      For Each vIdxSchedule As ExamSchedule In vScheduleList
        Dim vClash As Boolean = vIdxSchedule.ClashCheck(pStartDateTime, pEndDateTime)

        ' Add clashing schedule allocated capacity to centre's total allocated capacity
        If vClash Then vAllocatedCount += vIdxSchedule.AllocatedCapacity()
      Next

      Return vAllocatedCount
    End Function

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      SaveOldDescription()
      SaveAccreditationHistory()
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer, pForceAmendmentHistory As Boolean)
      SaveOldDescription()
      SaveAccreditationHistory()
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber, pForceAmendmentHistory)
    End Sub

    Private Sub SaveOldDescription()
      If mvClassFields(ExamCentreFields.ExamCentreDescription).ValueChanged And Me.Existing Then
        Dim vHistoryRecord As ExamCentreHistory = ExamCentreHistory.CreateInstance(Environment, Me.ExamCentreId, mvClassFields(ExamCentreFields.ExamCentreDescription).SetValue)
        vHistoryRecord.Save()
      End If
    End Sub

    Private Sub SaveAccreditationHistory()
      If (mvClassFields(ExamCentreFields.AccreditationStatus).ValueChanged And Me.Existing) Or _
      (mvClassFields(ExamCentreFields.AccreditationValidFrom).ValueChanged And Me.Existing) Or _
      (mvClassFields(ExamCentreFields.AccreditationValidTo).ValueChanged And Me.Existing) Then
        Dim vAccreditationHistoryRecord As New ExamAccreditationHistory(mvEnv)
        Dim vParams As New CDBParameters()
        If mvClassFields(ExamCentreFields.AccreditationStatus).SetValue.Length > 0 Then
          vParams.Add("AccreditationStatus", mvClassFields(ExamCentreFields.AccreditationStatus).SetValue)
          vParams.Add("AccreditationValidFrom", mvClassFields(ExamCentreFields.AccreditationValidFrom).SetValue)
          vParams.Add("AccreditationValidTo", mvClassFields(ExamCentreFields.AccreditationValidTo).SetValue)
          vAccreditationHistoryRecord.Create(vParams)
          vAccreditationHistoryRecord.Save()
          If vAccreditationHistoryRecord.AccreditationId > 0 Then
            Dim vAccreditationHistoryLink As New ExamAccreditationHistLink(mvEnv)
            Dim vLinkParams As New CDBParameters()
            vLinkParams.Add("ExamCentreId", mvClassFields(ExamCentreFields.ExamCentreId).Value.ToString)
            vLinkParams.Add("AccreditationId", vAccreditationHistoryRecord.AccreditationId)
            vAccreditationHistoryLink.Create(vLinkParams)
            vAccreditationHistoryLink.Save()
          End If
        End If
      End If
    End Sub
#End Region


#Region "Accreditation Status"
    ''' <summary>
    ''' Check If the Centers are accredited then only add them when the lookup is called from Trader or Results entry
    ''' </summary>
    ''' <param name="pEnv">Envronment class</param>
    ''' <param name="pDT">DatTable</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function IsCentreAccredited(ByVal pEnv As CDBEnvironment, ByVal pDT As CDBDataTable, ByVal pTrader As Boolean) As CDBDataTable

      If pEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlExamCentreAccreditation).Length > 0 AndAlso _
        pEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlExamCentreAccreditation) = "Y" Then
        If pDT IsNot Nothing AndAlso pDT.Columns.ContainsKey("accreditation_status") Then

          For vRowNumber As Integer = pDT.Rows.Count - 1 To 0 Step -1
            If Not CheckCentreAccreditationStatus(pEnv, pDT.Rows(vRowNumber).IntegerItem("exam_centre_id"), pTrader) Then
              pDT.Rows.RemoveAt(vRowNumber)
            End If
          Next
        End If
      Else
        Return pDT
      End If
      Return pDT
    End Function

    ''' <summary>
    ''' Check If the Centers are accredited then only add them when the lookup is called from Trader or Results entry
    ''' </summary>
    ''' <param name="pEnv">Environment class</param>
    ''' <param name="pCentreId">Centre Id </param>
    ''' <param name="pTrader">Trader flag</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function CheckCentreAccreditationStatus(ByVal pEnv As CDBEnvironment, ByVal pCentreId As Integer, ByVal pTrader As Boolean) As Boolean
      Dim vAnsiJoin As New AnsiJoins
      Dim vFields As String = "ec.accreditation_status,allow_registration,ignore_accreditation_validity,allow_result_entry,ec.accreditation_valid_from,ec.accreditation_valid_to"
      Dim vWhereClause As New CDBFields
      Dim vResult As Boolean = False

      vWhereClause.Add("ec.exam_centre_id", pCentreId)
      If pTrader Then
        vWhereClause.Add("acs.allow_registration", "Y")
      Else
        vWhereClause.Add("acs.allow_result_entry", "Y")
      End If
      vAnsiJoin.Add("exam_accreditation_statuses acs", "acs.accreditation_status", "ec.accreditation_status")

      Dim vSql As New SQLStatement(pEnv.Connection, vFields, "exam_centres ec", vWhereClause, "", vAnsiJoin)
      Dim vDataTable As New CDBDataTable
      vDataTable.FillFromSQL(pEnv, vSql)

      If vDataTable IsNot Nothing AndAlso vDataTable.Rows.Count > 0 Then

        'Dim vAllowResigtration As Boolean = If(vDataTable.Rows(0).Item("allow_registration").Length > 0 AndAlso vDataTable.Rows(0).Item("allow_registration") = "Y", True, False)
        Dim vIgnoreBooking As Boolean = If(vDataTable.Rows(0).Item("ignore_accreditation_validity").Length > 0 AndAlso vDataTable.Rows(0).Item("ignore_accreditation_validity") = "Y", True, False)
        'Dim vAllowResults As Boolean = If(vDataTable.Rows(0).Item("allow_result_entry").Length > 0 AndAlso vDataTable.Rows(0).Item("allow_result_entry") = "Y", True, False)

        Dim vValidFrom As String = vDataTable.Rows(0).Item("accreditation_valid_from")
        Dim vValidTo As String = vDataTable.Rows(0).Item("accreditation_valid_to")

        'CheckCentreAccreditationStatus If booking is allowed for centers, this should only be checked for trade application
        If pTrader Then
          If IsAccreditationValid(vValidFrom, vValidTo, vIgnoreBooking) Then vResult = True
        Else
          Return True 'If vAllowResults AndAlso IsAccreditationValid(vValidFrom, vValidTo, vIgnoreBooking) Then vResult = True
        End If

      End If
      Return vResult
    End Function
    ''' <summary>
    ''' Validate the Date range specified for Accreditation
    ''' </summary>
    ''' <param name="pValidFrom">Accreditation Valid from</param>
    ''' <param name="pValidTo">Accreditation valid To</param>
    ''' <param name="pIgnoreValidity"> Ignore Validity</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Shared Function IsAccreditationValid(ByVal pValidFrom As String, ByVal pValidTo As String, ByVal pIgnoreValidity As Boolean) As Boolean
      Dim vResult As Boolean = False

      'Check if the dates are valid
      If Not pIgnoreValidity Then
        If pValidFrom.Length = 0 AndAlso pValidTo.Length = 0 Then
          vResult = False
        ElseIf pValidFrom.Length > 0 AndAlso CDate(pValidFrom) > Date.Today Then
          vResult = False 'future
        ElseIf pValidTo.Length > 0 AndAlso CDate(pValidTo) < Date.Today Then
          vResult = False 'past 
        Else
          vResult = True
        End If
      Else
        vResult = True
      End If
      Return vResult
    End Function

#End Region


#Region "Description History"

    Dim mvDescriptionHistory As IList(Of ExamCentreHistory) = Nothing

    Public ReadOnly Property DescriptionHistory As IList(Of ExamCentreHistory)
      Get
        If mvDescriptionHistory Is Nothing Then
          mvDescriptionHistory = ExamCentreHistory.GetById(Me.Environment, Me.ExamCentreId)
        End If
        Return mvDescriptionHistory
      End Get
    End Property

#End Region

#Region "Validation"

    Protected Overrides Sub PreValidateCreateParameters(ByVal pParameterList As CDBParameters)
      'Add code here to validate parameters passed to the create methods
      ValidateValidFromTo(pParameterList)
      ValidateValidDatesFromParent(pParameterList)
    End Sub

    Protected Overrides Sub PreValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      'Add code here to validate parameters passed to the update methods
      ValidateValidFromTo(pParameterList)
      ValidateValidDatesFromParent(pParameterList)
      ValidateValidDatesFromChildren(pParameterList)
    End Sub
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub ValidateValidFromTo(ByVal pParameterList As CDBParameters)

      Dim vValidFrom As DateTime
      Dim vValidTo As DateTime
      If String.IsNullOrEmpty(pParameterList("ValidFrom").Value) Then
        vValidFrom = Date.MinValue
      Else
        vValidFrom = CDate(pParameterList("ValidFrom").Value)
      End If
      If String.IsNullOrEmpty(pParameterList("ValidTo").Value) Then
        vValidTo = Date.MaxValue
      Else
        vValidTo = CDate(pParameterList("ValidTo").Value)
      End If
      If Not ValidateFromToDates(vValidFrom, vValidTo) Then
        'ValidateFromToDates returns true if the second date is >= to the first
        RaiseError(DataAccessErrors.daeExamCentreValidFromBeforeParentValidFrom)
      End If
    End Sub
    ''' <summary>
    ''' A Child ExamCentre cannot have valid from and to dates outside it's parents valid from and to dates
    ''' </summary>
    ''' <param name="pParameterList"></param>
    ''' <remarks>Only validates child exam Centres, i.e. this instance of ExamCentre has a parent</remarks>
    Public Sub ValidateValidDatesFromParent(ByVal pParameterList As CDBParameters)
      Dim vExamCentreParentId As Integer = 0
      If pParameterList.ContainsKey("ExamCentreParentId") Then
        ' This is a new Child Exam Centre
        vExamCentreParentId = pParameterList("ExamCentreParentId").IntegerValue
      Else
        If Me.ExamCentreParentId > 0 Then
          ' This is an existing Child Exam Centre
          vExamCentreParentId = Me.ExamCentreParentId
        Else
          ' This is not a Child Exam Centre
          vExamCentreParentId = 0
        End If
      End If

      If vExamCentreParentId > 0 Then
        ' This ExamCentre is a child
        Dim vParent As New ExamCentre(mvEnv)
        Dim vWhereField As New CDBFields
        vWhereField.Add("exam_centre_id", CDBField.FieldTypes.cftInteger, vExamCentreParentId)
        vParent.InitWithPrimaryKey(vWhereField)
        If Not (String.IsNullOrEmpty(vParent.ValidFrom) And String.IsNullOrEmpty(vParent.ValidTo)) Then
          ' There are date constraints on the parents validition
          Dim vParentValidFrom As DateTime
          Dim vParentValidTo As DateTime
          Dim vChildValidFrom As DateTime
          Dim vChildValidTo As DateTime

          'Convert all the 'string' dates to datetime. Make empty strings Date.Max or Date.Min as appropriate. 
          If String.IsNullOrEmpty(vParent.ValidFrom) Then
            vParentValidFrom = Date.MinValue
          Else
            vParentValidFrom = CDate(vParent.ValidFrom)
          End If
          If String.IsNullOrEmpty(vParent.ValidTo) Then
            vParentValidTo = Date.MaxValue
          Else
            vParentValidTo = CDate(vParent.ValidTo)
          End If
          If String.IsNullOrEmpty(pParameterList("ValidFrom").Value) Then
            vChildValidFrom = Date.MinValue
          Else
            vChildValidFrom = CDate(pParameterList("ValidFrom").Value)
          End If
          If String.IsNullOrEmpty(pParameterList("ValidTo").Value) Then
            vChildValidTo = Date.MaxValue
          Else
            vChildValidTo = CDate(pParameterList("ValidTo").Value)
          End If

          If Not ValidateFromToDates(vParentValidFrom, vChildValidFrom) Then
            'ValidateFromToDates returns true if the second date is >= to the first
            If vParentValidFrom > Date.MinValue Then
              RaiseError(DataAccessErrors.daeExamCentreValidFromBeforeParentValidFrom, vParentValidFrom.ToString(CAREDateFormat))
            Else
              RaiseError(DataAccessErrors.daeExamCentreValidFromBeforeParentValidFromAndNull)
            End If
          End If
          If Not ValidateFromToDates(vChildValidTo, vParentValidTo) Then
            If vParentValidTo < Date.MaxValue Then
              RaiseError(DataAccessErrors.daeExamCentreValidToAfterParentValidTo, vParentValidTo.ToString(CAREDateFormat))
            Else
              RaiseError(DataAccessErrors.daeExamCentreValidToAfterParentValidToAndNull)
            End If
          End If
        End If
      End If
    End Sub
    ''' <summary>
    ''' A parent ExamCentre cannot have valid from and to dates outside it's childrens valid from and to dates
    ''' </summary>
    ''' <param name="pParameterList"></param>
    ''' <remarks>Need to check all ExamCentres that have this instance as there parent, if any</remarks>
    Public Sub ValidateValidDatesFromChildren(ByVal pParameterList As CDBParameters)

      Const vSQlMinDate As String = "1900-01-01" 'An arbitrary date in the past to replace null with for comparisons, cannot use Date.MinValue as T-SQL and SQLPLUS will use them
      Const vSQlMaxDate As String = "2199-12-31" 'An arbitrary date in the future to replace null with for comparisons, cannot use Date.MaxValue as T-SQL and SQLPLUS will use them

      Dim vParentValidFrom As DateTime
      Dim vParentValidTo As DateTime

      'Convert all the 'string' dates to datetime. Make empty strings Date.Max or Date.Min as appropriate. 
      If String.IsNullOrEmpty(pParameterList("ValidFrom").Value) Then
        vParentValidFrom = CDate(vSQlMinDate)
      Else
        vParentValidFrom = CDate(pParameterList("ValidFrom").Value)
      End If
      If String.IsNullOrEmpty(pParameterList("ValidTo").Value) Then
        vParentValidTo = CDate(vSQlMaxDate)
      Else
        vParentValidTo = CDate(pParameterList("ValidTo").Value)
      End If

      Dim vSQLStringBuilder As StringBuilder = New StringBuilder
      vSQLStringBuilder.Append("With allDescendents(exam_centre_id, exam_centre_parent_id, valid_from, valid_to, IsAnchor)")
      vSQLStringBuilder.Append(" AS")
      vSQLStringBuilder.Append(" (")
      vSQLStringBuilder.Append("SELECT exam_centre_id, exam_Centre_parent_id, COALESCE(valid_from,")
      mvEnv.Connection.AppendDateTime(vSQLStringBuilder, vSQlMinDate)
      vSQLStringBuilder.Append("),")
      vSQLStringBuilder.Append("COALESCE(valid_to,")
      mvEnv.Connection.AppendDateTime(vSQLStringBuilder, vSQlMaxDate)
      vSQLStringBuilder.Append("),")
      vSQLStringBuilder.Append(" isAnchor = 'Y'")
      vSQLStringBuilder.Append(" FROM exam_centres")
      vSQLStringBuilder.Append(" WHERE exam_centre_id = ")
      vSQLStringBuilder.Append(pParameterList("ExamCentreId").Value)
      vSQLStringBuilder.Append(" UNION ALL")
      vSQLStringBuilder.Append(" SELECT descendent_centres.exam_centre_id, descendent_centres.exam_Centre_parent_id, COALESCE(descendent_centres.valid_from,")
      mvEnv.Connection.AppendDateTime(vSQLStringBuilder, vSQlMinDate)
      vSQLStringBuilder.Append("),")
      vSQLStringBuilder.Append("COALESCE(descendent_centres.valid_to,")
      mvEnv.Connection.AppendDateTime(vSQLStringBuilder, vSQlMaxDate)
      vSQLStringBuilder.Append("),")
      vSQLStringBuilder.Append("isAnchor = 'N'")
      vSQLStringBuilder.Append(" FROM exam_centres descendent_centres")
      vSQLStringBuilder.Append(" JOIN allDescendents")
      vSQLStringBuilder.Append(" ON descendent_centres.exam_Centre_parent_id = allDescendents.exam_centre_id")
      vSQLStringBuilder.Append(")")
      vSQLStringBuilder.Append("SELECT COALESCE(MIN(valid_from),")
      mvEnv.Connection.AppendDateTime(vSQLStringBuilder, vSQlMinDate)
      vSQLStringBuilder.Append(") AS min_valid_from,")
      vSQLStringBuilder.Append("COALESCE(MAX(valid_to),")
      mvEnv.Connection.AppendDateTime(vSQLStringBuilder, vSQlMaxDate)
      vSQLStringBuilder.Append(") AS max_valid_to, COUNT(*) As count_of_decendents")
      vSQLStringBuilder.Append(" FROM allDescendents")
      vSQLStringBuilder.Append(" WHERE exam_centre_id != ")
      vSQLStringBuilder.Append(pParameterList("ExamCentreId").Value)

      Dim vSQLString As String = vSQLStringBuilder.ToString()

      Dim vSQL As New SQLStatement(mvEnv.Connection, vSQLString)
      Dim vDataTable As DataTable = vSQL.GetDataTable()
      ' There will only ever be one row returned. There are two circumstances where both min_valid_form and max_valid_to can be returned
      ' 1. The earliest valid from of a decendent is min_valid_from (NULL) and the latest valid to  of a descendent date is max_valid_to (NULL), which means we cannot set dates other than these
      ' 2. The Exam Centre that is being editied has not children. Min and Max will return NULL which will be converted to min_valid_from and max_valid_to. Any valid from or to date can be set 
      ' To distinguish between the two cases the count of decendents has been added. Zero means that the Exam Centre being updated has no children.
      If Not CInt(vDataTable.Rows(0).Item("count_of_decendents")) = 0 Then
        ' There are decendents, check their valid from and to dates
        If CDate(vDataTable.Rows(0).Item("min_valid_from")) = CDate(vSQlMinDate) And vParentValidFrom <> CDate(vSQlMinDate) Then
          'Valid from Date Not set for decendents, so cannot be set for parent
          RaiseError(DataAccessErrors.daeExamCentreValidFromAfterChildValidFromAndNull)
        Else
          If CDate(vDataTable.Rows(0).Item("min_valid_from")) < vParentValidFrom Then
            ' Earliest Valid from date for a decendent is before the valid from of the parent, error
            RaiseError(DataAccessErrors.daeExamCentreValidFromAfterChildValidFrom, CDate(vDataTable.Rows(0).Item("min_valid_from")).ToString(CAREDateFormat))
          End If
        End If
        If CDate(vDataTable.Rows(0).Item("max_valid_to")) = CDate(vSQlMinDate) And vParentValidTo <> CDate(vSQlMaxDate) Then
          'Valid to Date Not set for decendents, so cannot be set for parent
          RaiseError(DataAccessErrors.daeExamCentreValidToBeforeChildValidToAndNull)
        Else
          If CDate(vDataTable.Rows(0).Item("max_valid_to")) > vParentValidTo Then
            ' Latest Valid from date for a decendent is after the valid from of the parent, error
            RaiseError(DataAccessErrors.daeExamCentreValidToBeforeChildValidTo, CDate(vDataTable.Rows(0).Item("max_valid_to")).ToString(CAREDateFormat))
          End If
        End If
      End If
    End Sub
#End Region
  End Class
End Namespace
