Imports System.Linq

Namespace Access

  Partial Public Class ExamBookingUnit

#Region "Non AutoGenerated Code"

    Private mvBTA As BatchTransactionAnalysis
    Private mvExamGradeChangeReasonCode As String = String.Empty
    Private mvExamBookingStudyMode As String = String.Empty
    Private mvStudyModeUpdateRequired As Boolean = False

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvBTA = Nothing
      mvExamGradeChangeReasonCode = String.Empty
      mvExamBookingStudyMode = String.Empty
      mvStudyModeUpdateRequired = False
    End Sub
    'This fix for BR18362 has been temporarily commented out - A new webservice method is needed to update Total Marks before this fix can be implemented. 
    '
    'Public Overrides Sub PreValidateParameterList(ByVal pType As MaintenanceTypes, ByVal pParameterList As CDBParameters)
    '  If pParameterList.ContainsKey("TotalMark") Then  'This is calculated by the webservice, therefore passed value should not be used
    '    pParameterList.Remove("TotalMark")
    '  End If
    '  If pParameterList.ContainsKey("OriginalMark") Then  'This is calculated by the webservice, therefore passed value should not be used
    '    pParameterList.Remove("OriginalMark")
    '  End If
    'End Sub
    Public Sub SetTransactionInfo(ByVal pExamBookingId As Integer, ByVal pExamUnitId As Integer, ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pLineNumber As Integer)
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("exam_booking_id", pExamBookingId)
      vWhereFields.Add("exam_unit_link_id", pExamUnitId)
      Dim vUpdateFields As New CDBFields
      vUpdateFields.Add("batch_number", pBatchNumber)
      vUpdateFields.Add("transaction_number", pTransactionNumber)
      vUpdateFields.Add("line_number", pLineNumber)
      Dim vRows As Integer = mvEnv.Connection.UpdateRecords(DatabaseTableName, vUpdateFields, vWhereFields, False)
      If vRows = 0 Then
        'try with ExamUnitId
        vWhereFields.Remove("exam_unit_link_id")
        vWhereFields.Add("exam_unit_id", pExamUnitId)
        mvEnv.Connection.UpdateRecords(DatabaseTableName, vUpdateFields, vWhereFields)
      End If
    End Sub

    Public Sub SetTransactionInfo(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pLineNumber As Integer)
      mvClassFields(ExamBookingUnitFields.BatchNumber).IntegerValue = pBatchNumber
      mvClassFields(ExamBookingUnitFields.TransactionNumber).IntegerValue = pTransactionNumber
      mvClassFields(ExamBookingUnitFields.LineNumber).IntegerValue = pLineNumber
    End Sub

    Public ReadOnly Property BatchTransactionAnalysis As BatchTransactionAnalysis
      Get
        If mvBTA Is Nothing AndAlso BatchNumber > 0 AndAlso TransactionNumber > 0 AndAlso LineNumber > 0 Then
          mvBTA = New BatchTransactionAnalysis(mvEnv)
          mvBTA.Init(BatchNumber, TransactionNumber, LineNumber)
        End If
        Return mvBTA
      End Get
    End Property

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)

      Dim vExamUnit As New ExamUnit(mvEnv)
      Dim vExamUnitParams As New CDBParameters()
      vExamUnitParams.Add("ExamUnitId", Me.ExamUnitId)
      vExamUnitParams.Add("ExamUnitLinkId", Me.ExamUnitLinkId)
      vExamUnit.Init(vExamUnitParams)


      ' Calculate Originalmark from RawMark multiplied by Exam Unit MarkFactor
      If mvClassFields(ExamBookingUnitFields.RawMark).ValueChanged Then
        If mvClassFields(ExamBookingUnitFields.RawMark).Value.Length < 1 Then
          mvClassFields(ExamBookingUnitFields.OriginalMark).Value = ""
          mvClassFields(ExamBookingUnitFields.TotalMark).Value = ""
        Else
          ' Get the MarkFactor from the Exam Unit
          Dim vMarkFactor As Double = 1
          'Dim vExamUnit As New ExamUnit(mvEnv)
          'Dim vExamUnitParams As New CDBParameters()
          'vExamUnitParams.Add("ExamUnitId", Me.ExamUnitId)
          'vExamUnitParams.Add("ExamUnitLinkId", Me.ExamUnitLinkId)
          'vExamUnit.Init(vExamUnitParams)
          If vExamUnit.Existing Then vMarkFactor = vExamUnit.MarkFactor

          ' Multiply the Rawmark by the MarkFactor to get original and total marks
          Dim vCalculatedMark As Double = mvClassFields(ExamBookingUnitFields.RawMark).DoubleValue * vExamUnit.MarkFactor
          mvClassFields(ExamBookingUnitFields.OriginalMark).DoubleValue = vCalculatedMark
          mvClassFields(ExamBookingUnitFields.TotalMark).DoubleValue = vCalculatedMark
        End If
      End If

      Dim vExamBooking As New ExamBooking(mvEnv)
      If mvExisting Then
        vExamBooking.Init(ExamBookingId)
        If mvStudyModeUpdateRequired Then
          Dim vBookingParams As New CDBParameters()
          vBookingParams.Add("StudyMode", mvExamBookingStudyMode)
          vExamBooking.Update(vBookingParams)
        End If
      Else
        vExamBooking.Init()
      End If

      Dim vTrans As Boolean = False
      If mvEnv.Connection.InTransaction = False Then
        mvEnv.Connection.StartTransaction()
        vTrans = True
      End If

      If mvClassFields(ExamBookingUnitFields.OriginalMark).ValueChanged OrElse
         mvClassFields(ExamBookingUnitFields.OriginalGrade).ValueChanged OrElse
         mvClassFields(ExamBookingUnitFields.OriginalResult).ValueChanged OrElse
         mvClassFields(ExamBookingUnitFields.ModeratedMark).ValueChanged OrElse
         mvClassFields(ExamBookingUnitFields.ModeratedGrade).ValueChanged OrElse
         mvClassFields(ExamBookingUnitFields.ModeratedResult).ValueChanged OrElse
         mvClassFields(ExamBookingUnitFields.RawMark).ValueChanged OrElse
         mvClassFields(ExamBookingUnitFields.TotalMark).ValueChanged OrElse
         mvClassFields(ExamBookingUnitFields.TotalGrade).ValueChanged OrElse
         mvClassFields(ExamBookingUnitFields.TotalResult).ValueChanged Then
        'update the exam_student_header whose contact number matches the contact number in the associated exam_booking record
        'and whose unit id matches the base unit id of the associated exam unit
        Dim vWhereFields As New CDBFields
        Dim vUpdateFields As New CDBFields


        Dim vFields As String = "eu.exam_base_unit_id"
        Dim VAnsiJoins As AnsiJoins = New AnsiJoins()
        VAnsiJoins.Add("exam_units eu", "eb.exam_unit_id", "eu.exam_unit_id")
        vWhereFields.Add("eb.exam_booking_id", ExamBookingId)
        Dim vSQL As New SQLStatement(mvEnv.Connection, vFields, "exam_bookings eb", vWhereFields, "", VAnsiJoins)
        vWhereFields.Clear()
        vUpdateFields.Add("last_marked_date", CDBField.FieldTypes.cftTime, TodaysDateAndTime())
        vWhereFields.Add("contact_number", CDBField.FieldTypes.cftInteger, "(SELECT contact_number FROM exam_bookings WHERE exam_booking_id = " & ExamBookingId.ToString & ")", CDBField.FieldWhereOperators.fwoEqual)
        Dim vUnitSubSelect As String = vSQL.SQL
        If mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlExamGradingMethod) = "N" Then 'Only do this for the NG Grading Method.  For the Concept Grading method, Non-session bookings aren't considered gradeable
          vSQL.FieldNames = "eu.exam_unit_id" 'Also update the timestamps for Session Zero bookings if the Grading Method is NG
          vUnitSubSelect &= " UNION ALL "
          vUnitSubSelect &= vSQL.SQL
        End If
        vWhereFields.Add("exam_unit_id", CDBField.FieldTypes.cftInteger, "(" + vUnitSubSelect + ")", CDBField.FieldWhereOperators.fwoIn)

        mvEnv.Connection.UpdateRecords("exam_student_header", vUpdateFields, vWhereFields, False)

        'Check for Exam Results changing
        If mvExisting Then
          Dim vCreateGradeHistory As Boolean = False
          Dim vControlValue As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlExamRecordGradeChangeHistory).ToUpper
          If vControlValue.Length > 0 AndAlso vControlValue <> "N" Then vCreateGradeHistory = True
          With mvClassFields
            If vCreateGradeHistory = True AndAlso
               mvExamGradeChangeReasonCode.Length > 0 AndAlso
               (.Item(ExamBookingUnitFields.RawMark).ValueChanged OrElse
                .Item(ExamBookingUnitFields.TotalGrade).ValueChanged OrElse
                .Item(ExamBookingUnitFields.TotalMark).ValueChanged OrElse
                .Item(ExamBookingUnitFields.TotalResult).ValueChanged OrElse
                .Item(ExamBookingUnitFields.OriginalGrade).ValueChanged OrElse
                .Item(ExamBookingUnitFields.OriginalMark).ValueChanged OrElse
                .Item(ExamBookingUnitFields.OriginalResult).ValueChanged OrElse
                .Item(ExamBookingUnitFields.ModeratedGrade).ValueChanged OrElse
                .Item(ExamBookingUnitFields.ModeratedMark).ValueChanged OrElse
                .Item(ExamBookingUnitFields.ModeratedResult).ValueChanged) Then
              Dim vParams As New CDBParameters()
              With vParams
                If ExamBookingUnitId > 0 Then .Add("ExamBookingUnitId", ExamBookingUnitId)
                If ExamBookingId > 0 Then .Add("ExamBookingId", ExamBookingId)
                If ExamUnitId > 0 Then .Add("ExamUnitId", ExamUnitId)
                .Add("ExamGradeChangeReason", mvExamGradeChangeReasonCode)
                .Add("PreviousGrade", mvClassFields.Item(ExamBookingUnitFields.TotalGrade).SetValue)
                .Add("PreviousMark", mvClassFields.Item(ExamBookingUnitFields.TotalMark).SetValue)
                .Add("PreviousResult", mvClassFields.Item(ExamBookingUnitFields.TotalResult).SetValue)
                .Add("PreviousRawMark", mvClassFields.Item(ExamBookingUnitFields.RawMark).SetValue)
                .Add("PreviousOriginalGrade", mvClassFields.Item(ExamBookingUnitFields.OriginalGrade).SetValue)
                .Add("PreviousOriginalMark", mvClassFields.Item(ExamBookingUnitFields.OriginalMark).SetValue)
                .Add("PreviousOriginalResult", mvClassFields.Item(ExamBookingUnitFields.OriginalResult).SetValue)
                .Add("PreviousModeratedGrade", mvClassFields.Item(ExamBookingUnitFields.ModeratedGrade).SetValue)
                .Add("PreviousModeratedMark", mvClassFields.Item(ExamBookingUnitFields.ModeratedMark).SetValue)
                .Add("PreviousModeratedResult", mvClassFields.Item(ExamBookingUnitFields.ModeratedResult).SetValue)
              End With
              Dim vExamGradeHistory As New ExamGradeChangeHistory(mvEnv)
              vExamGradeHistory.Create(vParams)
              vExamGradeHistory.Save(mvEnv.User.UserID, True)
            End If
          End With
        End If
      End If

      If mvExisting Then
        If vExamBooking.Existing Then vExamBooking.Save(pAmendedBy, pAudit, pJournalNumber)
      End If

      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)

      Dim vChildUnits As IEnumerable(Of ExamBookingUnit) = Me.ChildExamBookingUnits()
      If vChildUnits IsNot Nothing AndAlso vChildUnits.Count > 0 Then
        For Each vChildBookingUnit As ExamBookingUnit In vChildUnits
          If vChildBookingUnit.IsDirty Then
            vChildBookingUnit.Save(mvEnv.User.UserID, True)
          End If
        Next
      End If

      If vTrans Then mvEnv.Connection.CommitTransaction()
    End Sub

    Public Sub CheckCanCancel()
      If Me.IsCancelled Then
        RaiseError(DataAccessErrors.daeBookingAlreadyCancelled, CStr(ExamBookingUnitId))
      End If
    End Sub

    Public ReadOnly Property IsCancelled As Boolean
      Get
        Return Me.CancellationReason.Length > 0
      End Get
    End Property

    Public Overrides Sub Update(ByVal pParameterList As CDBParameters)
      MyBase.Update(pParameterList)
      If pParameterList.HasValue("ExamGradeChangeReason") Then mvExamGradeChangeReasonCode = pParameterList("ExamGradeChangeReason").Value
      If pParameterList.ContainsKey("StudyMode") Then
        mvStudyModeUpdateRequired = True
        mvExamBookingStudyMode = pParameterList("StudyMode").Value
        If mvClassFields.Item(ExamBookingUnitFields.TotalResult).ValueChanged AndAlso mvClassFields.Item(ExamBookingUnitFields.TotalResult).Value.Length = 0 Then CheckExistingOpenBookings()
      End If
    End Sub

    Private Sub CheckExistingOpenBookings()
      Dim vWhereFields As New CDBFields(New CDBField("ebu.contact_number", mvClassFields.Item(ExamBookingUnitFields.ContactNumber).Value))
      vWhereFields.Add("ebu.exam_unit_id", mvClassFields.Item(ExamBookingUnitFields.ExamUnitId).Value)
      vWhereFields.Add("ebu.exam_booking_unit_id", mvClassFields.Item(ExamBookingUnitFields.ExamBookingUnitId).Value, CDBField.FieldWhereOperators.fwoNotEqual)
      vWhereFields.Add("ebu.original_result", "NULL", CDBField.FieldWhereOperators.fwoNullOrEqual)
      vWhereFields.Add("ebu.cancellation_source", "NULL", CDBField.FieldWhereOperators.fwoNullOrEqual)
      vWhereFields.Add("eb.exam_session_id", "0", CDBField.FieldWhereOperators.fwoEqual)
      Dim vAnsiJoins As New AnsiJoins
      vAnsiJoins.Add("exam_bookings eb", "ebu.exam_booking_id", "eb.exam_booking_id")
      If mvEnv.Connection.GetCountFromStatement(New SQLStatement(mvEnv.Connection, "ebu.original_result", "exam_booking_units ebu", vWhereFields, "", vAnsiJoins)) > 0 Then
        RaiseError(DataAccessErrors.daeExamExistingOpenBooking)
      End If
    End Sub

    Public Overrides Sub Delete(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      For Each vWorkstream As Workstream In Workstreams
        vWorkstream.DeleteExamBookingUnit(Me.ExamBookingUnitId)
      Next vWorkstream
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Private mvWorkstreams As List(Of Workstream) = Nothing
    Private mvExamBooking As ExamBooking

    Public ReadOnly Property Workstreams As IEnumerable(Of Workstream)
      Get
        If mvWorkstreams Is Nothing Then
          mvWorkstreams = New List(Of Workstream)
          For Each vWorkstreamId As Integer In (From vData As DataRow In New SQLStatement(Environment.Connection,
                                                                         "workstream_id",
                                                                         "workstream_links",
                                                                         New CDBFields({New CDBField("exam_booking_unit_id",
                                                                                                      Me.ExamBookingUnitId)})).GetDataTable
                                                Select vData.Field(Of Integer)("workstream_id"))
            Dim vWorkstream As New Workstream(Environment)
            vWorkstream.InitWithPrimaryKey(New CDBFields({New CDBField("workstream_id", vWorkstreamId)}))
            If vWorkstream.Existing Then
              mvWorkstreams.Add(vWorkstream)
            End If
          Next vWorkstreamId
        End If
        Return mvWorkstreams
      End Get
    End Property

    Public Property ExamBooking As ExamBooking
      Get
        If mvExamBooking Is Nothing AndAlso Me.ExamBookingId > 0 Then
          Me.ExamBooking = Me.GetRelatedInstance(Of ExamBooking)({ExamBookingUnitFields.ExamBookingId})
        End If
        Return mvExamBooking
      End Get
      Set(value As ExamBooking)
        mvExamBooking = value
        If value IsNot Nothing AndAlso value.ExamBookingId <> Me.ExamBookingId Then
          Me.ExamBookingId = value.ExamBookingId
        End If
      End Set
    End Property

    ''' <summary>Gets the ExamBookingUnit's that are children of this ExamBookingUnit.</summary>
    Friend ReadOnly Property ChildExamBookingUnits As IEnumerable(Of ExamBookingUnit)
      Get
        Dim vChildBookingUnits As IEnumerable(Of ExamBookingUnit) = Nothing
        Dim vExamUnitLink As ExamUnitLink = Nothing
        If Me.ExamUnitLinkId > 0 Then
          vExamUnitLink = Me.GetRelatedInstance(Of ExamUnitLink)({ExamBookingUnitFields.ExamUnitLinkId})
        End If

        If vExamUnitLink IsNot Nothing Then
          Dim vChildLinks As IEnumerable(Of ExamUnitLink) = vExamUnitLink.GetChildExamUnitLinks()
          If vChildLinks IsNot Nothing AndAlso vChildLinks.Count > 0 Then
            Dim vLinkIDs As New List(Of Integer)
            vChildLinks.ToList().ForEach(Sub(vLink)
                                           vLinkIDs.Add(vLink.ExamUnitId2)
                                         End Sub)
            Dim vFields As New CDBFields(New CDBField("exam_unit_id", CDBField.FieldTypes.cftInteger, vLinkIDs.AsCommaSeperated(), CDBField.FieldWhereOperators.fwoIn))
            vFields.Add("exam_booking_id", Me.ExamBookingId)
            vChildBookingUnits = CARERecordFactory.SelectList(Of ExamBookingUnit)(Me.Environment, vFields)
          End If
        End If

        Return vChildBookingUnits

      End Get
    End Property

    Friend Sub Cancel(ByVal pCancellationReason As String, ByVal pCancellationSource As String)
      mvClassFields.Item(ExamBookingUnitFields.ExamStudentUnitStatus).Value = "C"
      mvClassFields.Item(ExamBookingUnitFields.CancellationReason).Value = pCancellationReason
      mvClassFields.Item(ExamBookingUnitFields.CancelledOn).Value = TodaysDate()
      mvClassFields.Item(ExamBookingUnitFields.CancelledBy).Value = mvEnv.User.UserID
      If pCancellationSource.Length > 0 Then mvClassFields.Item(ExamBookingUnitFields.CancellationSource).Value = pCancellationSource

      Dim vChildUnits As IEnumerable(Of ExamBookingUnit) = Me.ChildExamBookingUnits()
      If vChildUnits IsNot Nothing AndAlso vChildUnits.Count > 0 Then
        For Each vChildBookingUnit As ExamBookingUnit In vChildUnits
          vChildBookingUnit.Cancel(pCancellationReason, pCancellationSource)
          vChildBookingUnit.Save(mvEnv.User.UserID, True)
        Next
      End If
    End Sub

#End Region
  End Class

End Namespace
