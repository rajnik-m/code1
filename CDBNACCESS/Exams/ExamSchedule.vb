Namespace Access

  Public Class ExamSchedule
    Inherits CARERecord
    Implements IRecordCreate

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum ExamScheduleFields
      AllFields = 0
      ExamScheduleId
      ExamSessionId
      ExamCentreId
      ExamUnitId
      StartDate
      StartTime
      EndTime
      Capacity
      AdditionalCapacity
      CreatedBy
      CreatedOn
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("exam_schedule_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_session_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_centre_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_unit_id", CDBField.FieldTypes.cftInteger)
        .Add("start_date", CDBField.FieldTypes.cftDate)
        .Add("start_time")
        .Add("end_time")
        .Add("capacity", CDBField.FieldTypes.cftInteger)
        .Add("additional_capacity", CDBField.FieldTypes.cftInteger)
        .Add("created_by")
        .Add("created_on", CDBField.FieldTypes.cftDate)

        .Item(ExamScheduleFields.ExamScheduleId).PrimaryKey = True
        .Item(ExamScheduleFields.ExamScheduleId).PrefixRequired = True
        .SetControlNumberField(ExamScheduleFields.ExamScheduleId, "XSC")

        .SetUniqueField(ExamScheduleFields.ExamSessionId)
        .SetUniqueField(ExamScheduleFields.ExamCentreId)
        .SetUniqueField(ExamScheduleFields.ExamUnitId)
        .Item(ExamScheduleFields.CreatedBy).PrefixRequired = True
        .Item(ExamScheduleFields.CreatedOn).PrefixRequired = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "es"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "exam_schedule"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'IRecordCreate
    '--------------------------------------------------
    Public Function CreateInstance(ByVal pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New ExamSchedule(mvEnv)
    End Function

    '--------------------------------------------------
    'AddDeleteCheckItems
    '--------------------------------------------------
    Public Overrides Sub AddDeleteCheckItems()
      AddDeleteCheckItem("exam_booking_units", "exam_schedule_id", "an Exam Booking")
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ExamScheduleId() As Integer
      Get
        Return mvClassFields(ExamScheduleFields.ExamScheduleId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamSessionId() As Integer
      Get
        Return mvClassFields(ExamScheduleFields.ExamSessionId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamCentreId() As Integer
      Get
        Return mvClassFields(ExamScheduleFields.ExamCentreId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamUnitId() As Integer
      Get
        Return mvClassFields(ExamScheduleFields.ExamUnitId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property StartDate() As String
      Get
        Return mvClassFields(ExamScheduleFields.StartDate).Value
      End Get
    End Property
    Public ReadOnly Property StartTime() As String
      Get
        Return mvClassFields(ExamScheduleFields.StartTime).Value
      End Get
    End Property
    Public ReadOnly Property EndTime() As String
      Get
        Return mvClassFields(ExamScheduleFields.EndTime).Value
      End Get
    End Property
    Public ReadOnly Property Capacity() As Integer
      Get
        Return mvClassFields(ExamScheduleFields.Capacity).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AdditionalCapacity() As Integer
      Get
        Return mvClassFields(ExamScheduleFields.AdditionalCapacity).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(ExamScheduleFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(ExamScheduleFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ExamScheduleFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ExamScheduleFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Public Shared ReadOnly Property DefaultStartTime As String
      Get
        Return "00:01"
      End Get
    End Property

    Public Shared ReadOnly Property DefaultEndTime As String
      Get
        Return "23:59"
      End Get
    End Property

    Public ReadOnly Property StartDateTime As DateTime
      Get
        Dim vStartTime As String = Me.StartTime
        If vStartTime.Length = 0 Then vStartTime = ExamSchedule.DefaultStartTime
        Return DateTime.Parse(Me.StartDate & " " & vStartTime)
      End Get
    End Property

    Public ReadOnly Property EndDateTime As DateTime
      Get
        Dim vEndTime As String = Me.EndTime
        If vEndTime.Length = 0 Then vEndTime = ExamSchedule.DefaultEndTime
        Return DateTime.Parse(Me.StartDate & " " & vEndTime) 'Note there is no END date stored
      End Get
    End Property

    Public Function HasCapacity() As Boolean
      If Capacity = 0 Then Return True

      Return AllocatedCapacity() < Capacity
    End Function

    Public Function AllocatedCapacity() As Integer
      Dim vAnsiJoins As New AnsiJoins
      Dim vWhereFields As New CDBFields
      vAnsiJoins.Add("exam_bookings eb", "eb.exam_booking_id", "ebu.exam_booking_id")
      vWhereFields.Add("ebu.exam_schedule_id", ExamScheduleId)
      vWhereFields.Add("ebu.cancelled_on") ' Only use current bookings
      vWhereFields.Add("eb.cancelled_on") ' Only use current bookings
      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, "*", "exam_booking_units ebu", vWhereFields, "", vAnsiJoins)
      Return mvEnv.Connection.GetCountFromStatement(vSQLStatement)
    End Function

    Public Function ClashCheck(ByVal pSchedule As ExamSchedule) As Boolean
      If pSchedule.Existing Then
        Return ClashCheck(pSchedule.StartDateTime, pSchedule.EndDateTime)
      Else
        Return False
      End If
    End Function

    Public Function ClashCheck(ByVal pStartDateTime As DateTime, ByVal pEndDateTime As DateTime) As Boolean
      Dim vClash As Boolean = False

      ' check the times
      If Me.StartTime.Length > 0 Then
        Dim vStartDateTime As Date = Me.StartDateTime
        Dim vEndDateTime As Date = Me.EndDateTime

        If (pStartDateTime >= vStartDateTime And pStartDateTime <= vEndDateTime) Or (pEndDateTime >= vStartDateTime And pEndDateTime <= vEndDateTime) Then
          vClash = True
        End If
      Else
        vClash = True
      End If

      Return vClash
    End Function

#End Region
  End Class
End Namespace
