Namespace Access

  Public Class ExamUnitPrerequisite
    Inherits CARERecord
    Implements IRecordCreate

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum ExamUnitPrerequisiteFields
      AllFields = 0
      ExamUnitId
      ExamPrerequisiteUnitId
      MinimumGrade
      PassRequired
      CreatedBy
      CreatedOn
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("exam_unit_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_prerequisite_unit_id", CDBField.FieldTypes.cftInteger)
        .Add("minimum_grade")
        .Add("pass_required")
        .Add("created_by")
        .Add("created_on", CDBField.FieldTypes.cftDate)

        .Item(ExamUnitPrerequisiteFields.ExamUnitId).PrimaryKey = True
        .Item(ExamUnitPrerequisiteFields.ExamUnitId).PrefixRequired = True


        .Item(ExamUnitPrerequisiteFields.ExamPrerequisiteUnitId).PrimaryKey = True
        .Item(ExamUnitPrerequisiteFields.ExamPrerequisiteUnitId).PrefixRequired = True

        .Item(ExamUnitPrerequisiteFields.CreatedBy).PrefixRequired = True
        .Item(ExamUnitPrerequisiteFields.CreatedOn).PrefixRequired = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "eup"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "exam_unit_prerequisites"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'IRecordCreate
'--------------------------------------------------
    Public Function CreateInstance(ByVal pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New ExamUnitPrerequisite(mvEnv)
    End Function
'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property ExamUnitId() As Integer
      Get
        Return mvClassFields(ExamUnitPrerequisiteFields.ExamUnitId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamPrerequisiteUnitId() As Integer
      Get
        Return mvClassFields(ExamUnitPrerequisiteFields.ExamPrerequisiteUnitId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property MinimumGrade() As String
      Get
        Return mvClassFields(ExamUnitPrerequisiteFields.MinimumGrade).Value
      End Get
    End Property
    Public Property PassRequired() As Boolean
      Get
        Return mvClassFields.Item(ExamUnitPrerequisiteFields.PassRequired).Bool
      End Get
      Set(ByVal Value As Boolean)
        mvClassFields.Item(ExamUnitPrerequisiteFields.PassRequired).Bool = Value
      End Set
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(ExamUnitPrerequisiteFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(ExamUnitPrerequisiteFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ExamUnitPrerequisiteFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ExamUnitPrerequisiteFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"
    Public Overloads Sub Init(ByVal pExamPrerequisiteUnitId As Integer, ByVal pExamUnitId As Integer)
      CheckClassFields()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(ExamUnitPrerequisiteFields.ExamPrerequisiteUnitId).Name, pExamPrerequisiteUnitId)
      vWhereFields.Add(mvClassFields(ExamUnitPrerequisiteFields.ExamUnitId).Name, pExamUnitId)
      MyBase.InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Overrides Sub InitForUpdate(ByVal pParams As CDBParameters)
      Init()
      Init(pParams("OldExamPrerequisiteUnitId").LongValue, pParams("ExamUnitId").LongValue)
    End Sub

    Public Overrides Function GetUniqueKeyFieldNames() As String
      Return "ExamUnitId,ExamPrerequisiteUnitId"
    End Function

    Public Overrides Function GetUpdateKeyFieldNames() As String
      Return "ExamUnitId,OldExamPrerequisiteUnitId"
    End Function

    Protected Overrides Sub PostValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PostValidateUpdateParameters(pParameterList)
      If pParameterList.ContainsKey("ExamPrerequisiteUnitId") Then mvClassFields(ExamUnitPrerequisiteFields.ExamPrerequisiteUnitId).Value = pParameterList("ExamPrerequisiteUnitId").Value
      ValidateNewData()
    End Sub

    Protected Overrides Sub PostValidateCreateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PostValidateCreateParameters(pParameterList)
      ValidateNewData()
    End Sub

    Private Function ValidateNewData() As Boolean
      mvClassFields.SetUniqueField(ExamUnitPrerequisiteFields.ExamPrerequisiteUnitId)
      mvClassFields.SetUniqueField(ExamUnitPrerequisiteFields.ExamUnitId)
      If mvClassFields(ExamUnitPrerequisiteFields.ExamPrerequisiteUnitId).ValueChanged Then mvClassFields.CheckRecordExists(mvEnv)
    End Function
#End Region

  End Class
End Namespace
