Namespace Access

  Public Class ExamUnitPersonnel
    Inherits CARERecord
    Implements IRecordCreate

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum ExamUnitPersonnelFields
      AllFields = 0
      ExamUnitPersonnelId
      ExamPersonnelId
      ExamUnitId
      ExamPersonnelType
      ValidFrom
      ValidTo
      MaximumStudents
      GeographicalRegion
      CreatedBy
      CreatedOn
      ExamMarkerOption
      ActualLoadSize
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("exam_unit_personnel_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_personnel_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_unit_id", CDBField.FieldTypes.cftInteger)
        .Add("exam_personnel_type")
        .Add("valid_from", CDBField.FieldTypes.cftDate)
        .Add("valid_to", CDBField.FieldTypes.cftDate)
        .Add("maximum_students", CDBField.FieldTypes.cftInteger)
        .Add("geographical_region")
        .Add("created_by")
        .Add("created_on", CDBField.FieldTypes.cftDate)
        .Add("exam_marker_option")
        .Add("actual_load_size", CDBField.FieldTypes.cftInteger)

        .Item(ExamUnitPersonnelFields.ExamUnitPersonnelId).PrimaryKey = True
        .Item(ExamUnitPersonnelFields.ExamUnitPersonnelId).PrefixRequired = True
        .SetControlNumberField(ExamUnitPersonnelFields.ExamUnitPersonnelId, "XUP")

        .SetUniqueField(ExamUnitPersonnelFields.ExamPersonnelId)
        .SetUniqueField(ExamUnitPersonnelFields.ExamUnitId)
        .Item(ExamUnitPersonnelFields.ExamPersonnelType).PrefixRequired = True
        .Item(ExamUnitPersonnelFields.GeographicalRegion).PrefixRequired = True
        .Item(ExamUnitPersonnelFields.CreatedBy).PrefixRequired = True
        .Item(ExamUnitPersonnelFields.CreatedOn).PrefixRequired = True
        .Item(ExamUnitPersonnelFields.ExamMarkerOption).PrefixRequired = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "eup"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "exam_unit_personnel"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'IRecordCreate
'--------------------------------------------------
    Public Function CreateInstance(ByVal pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New ExamUnitPersonnel(mvEnv)
    End Function
'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property ExamUnitPersonnelId() As Integer
      Get
        Return mvClassFields(ExamUnitPersonnelFields.ExamUnitPersonnelId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamPersonnelId() As Integer
      Get
        Return mvClassFields(ExamUnitPersonnelFields.ExamPersonnelId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamUnitId() As Integer
      Get
        Return mvClassFields(ExamUnitPersonnelFields.ExamUnitId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExamPersonnelType() As String
      Get
        Return mvClassFields(ExamUnitPersonnelFields.ExamPersonnelType).Value
      End Get
    End Property
    Public ReadOnly Property ValidFrom() As String
      Get
        Return mvClassFields(ExamUnitPersonnelFields.ValidFrom).Value
      End Get
    End Property
    Public ReadOnly Property ValidTo() As String
      Get
        Return mvClassFields(ExamUnitPersonnelFields.ValidTo).Value
      End Get
    End Property
    Public ReadOnly Property MaximumStudents() As Integer
      Get
        Return mvClassFields(ExamUnitPersonnelFields.MaximumStudents).IntegerValue
      End Get
    End Property
    Public ReadOnly Property GeographicalRegion() As String
      Get
        Return mvClassFields(ExamUnitPersonnelFields.GeographicalRegion).Value
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(ExamUnitPersonnelFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(ExamUnitPersonnelFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ExamUnitPersonnelFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ExamUnitPersonnelFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property ExamMarkerOption() As String
      Get
        Return mvClassFields(ExamUnitPersonnelFields.ExamMarkerOption).Value
      End Get
    End Property
    Public ReadOnly Property ActualLoadSize() As Integer
      Get
        Return mvClassFields(ExamUnitPersonnelFields.ActualLoadSize).IntegerValue
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Public Function IsCurrent() As Boolean
      If ValidFrom.Length > 0 AndAlso CDate(ValidFrom) > Date.Today Then Return False
      If ValidTo.Length > 0 AndAlso CDate(ValidTo) < Date.Today Then Return False
      Return True
    End Function

    Public Function GetMarkersAllocatedPaperCount() As Integer
      Dim vCountWhereFields As New CDBFields
      Dim vCountAnsiJoins As New AnsiJoins
      Dim vCountFields As String = "ebu.exam_booking_unit_id"
      vCountAnsiJoins.Add("exam_bookings eb", "eb.exam_booking_id", "ebu.exam_booking_id")
      vCountAnsiJoins.AddLeftOuterJoin("exam_marking_batch_detail embd", "embd.exam_booking_unit_id", "ebu.exam_booking_unit_id")
      vCountWhereFields.Add("embd.exam_personnel_id", Me.ExamPersonnelId)
      vCountWhereFields.Add("ebu.exam_unit_id", Me.ExamUnitId)
      vCountWhereFields.Add("eb.cancellation_reason", CDBField.FieldTypes.cftCharacter)  'Ignore cancelled bookings
      vCountWhereFields.Add("ebu.cancellation_reason", CDBField.FieldTypes.cftCharacter) 'Ignore cancelled bookings
      Dim vCountSelect As New SQLStatement(mvEnv.Connection, vCountFields, "exam_booking_units ebu", vCountWhereFields, "", vCountAnsiJoins)
      Dim vCount As Integer = mvEnv.Connection.GetCountFromStatement(vCountSelect)
      Return vCount
    End Function

#End Region

  End Class
End Namespace
