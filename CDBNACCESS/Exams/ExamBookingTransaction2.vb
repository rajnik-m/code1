Namespace Access

  Partial Public Class ExamBookingTransaction
    Inherits CARERecord

#Region "Non AutoGenerated Code"

    Private mvBTA As BatchTransactionAnalysis

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvBTA = Nothing
    End Sub

    Public Sub SetTransactionInfo(ByVal pExamBookingId As Integer, ByVal pExamUnitId As Integer, ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pLineNumber As Integer)
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("exam_booking_id", pExamBookingId)
      vWhereFields.Add("exam_unit_id", pExamUnitId)
      Dim vSQL As New SQLStatement(mvEnv.Connection, "exam_booking_unit_id", "exam_booking_units", vWhereFields)
      Dim vExamBookingUnitId As Integer = vSQL.GetIntegerValue
      SetTransactionInfo(vExamBookingUnitId, pBatchNumber, pTransactionNumber, pLineNumber)
    End Sub

    Public Sub SetTransactionInfo(ByVal pExamBookingUnitId As Integer, ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pLineNumber As Integer)
      CheckClassFields()
      mvClassFields(ExamBookingTransactionFields.ExamBookingUnitId).IntegerValue = pExamBookingUnitId
      mvClassFields(ExamBookingTransactionFields.BatchNumber).IntegerValue = pBatchNumber
      mvClassFields(ExamBookingTransactionFields.TransactionNumber).IntegerValue = pTransactionNumber
      mvClassFields(ExamBookingTransactionFields.LineNumber).IntegerValue = pLineNumber
      Save()
    End Sub

    Public ReadOnly Property BatchTransactionAnalysis As BatchTransactionAnalysis
      Get
        If mvBTA Is Nothing AndAlso BatchNumber > 0 AndAlso TransactionNumber > 0 AndAlso LineNumber > 0 Then
          mvBTA = New BatchTransactionAnalysis(mvEnv)
          mvBTA.Init(BatchNumber, TransactionNumber, LineNumber)
        End If
        Return mvBTA
      End Get
    End Property

#End Region

  End Class
End Namespace
