Namespace Access

  Public Class ContactPosition
    Inherits CARERecord
    Implements IRecordCreate

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum ContactPositionFields
      AllFields = 0
      ContactNumber
      OrganisationNumber
      AddressNumber
      Position
      Mail
      Current
      Started
      Finished
      PositionLocation
      ContactPositionNumber
      PositionFunction
      PositionSeniority
      SinglePosition
      PositionStatus
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("organisation_number", CDBField.FieldTypes.cftLong)
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("position")
        .Add("mail")
        .Add("current")
        .Add("started", CDBField.FieldTypes.cftDate)
        .Add("finished", CDBField.FieldTypes.cftDate)
        .Add("position_location")
        .Add("contact_position_number", CDBField.FieldTypes.cftLong)
        .Add("position_function")
        .Add("position_seniority")
        .Add("single_position")
        .Add("position_status")

        .Item(ContactPositionFields.ContactPositionNumber).PrimaryKey = True
        .SetControlNumberField(ContactPositionFields.ContactPositionNumber, "PN")

        .Item(ContactPositionFields.ContactNumber).PrefixRequired = True
        .Item(ContactPositionFields.OrganisationNumber).PrefixRequired = True
        .Item(ContactPositionFields.AddressNumber).PrefixRequired = True
        .Item(ContactPositionFields.Current).SpecialColumn = True

        .Item(ContactPositionFields.SinglePosition).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPositionLinks)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "cp"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "contact_positions"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(ContactPositionFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property OrganisationNumber() As Integer
      Get
        Return mvClassFields(ContactPositionFields.OrganisationNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AddressNumber() As Integer
      Get
        Return mvClassFields(ContactPositionFields.AddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Position() As String
      Get
        Return mvClassFields(ContactPositionFields.Position).Value
      End Get
    End Property
    Public ReadOnly Property Mail() As Boolean
      Get
        Return mvClassFields(ContactPositionFields.Mail).Bool
      End Get
    End Property
    Public ReadOnly Property Current() As Boolean
      Get
        Return mvClassFields(ContactPositionFields.Current).Bool
      End Get
    End Property
    Public ReadOnly Property Started() As String
      Get
        Return mvClassFields(ContactPositionFields.Started).Value
      End Get
    End Property
    Public ReadOnly Property Finished() As String
      Get
        Return mvClassFields(ContactPositionFields.Finished).Value
      End Get
    End Property
    Public ReadOnly Property PositionLocation() As String
      Get
        Return mvClassFields(ContactPositionFields.PositionLocation).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ContactPositionFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ContactPositionFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property ContactPositionNumber() As Integer
      Get
        Return mvClassFields(ContactPositionFields.ContactPositionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PositionFunction() As String
      Get
        Return mvClassFields(ContactPositionFields.PositionFunction).Value
      End Get
    End Property
    Public ReadOnly Property PositionSeniority() As String
      Get
        Return mvClassFields(ContactPositionFields.PositionSeniority).Value
      End Get
    End Property
    Public ReadOnly Property SinglePosition() As Boolean
      Get
        Return mvClassFields(ContactPositionFields.SinglePosition).Bool
      End Get
    End Property
    Public ReadOnly Property PositionStatus() As String
      Get
        Return mvClassFields(ContactPositionFields.PositionStatus).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Public Enum CurrentSettingTypes
      cstNone
      cstCurrent
      cstHistorical
    End Enum

    Public Enum PositionMoveTypes
      pmtMovePosition
      pmtMoveSite
      pmtMoveOrganisation
      pmtLeave
    End Enum

    Private mvOrganisation As Organisation
    Private mvContact As Contact
    Private mvContactAddress As ContactAddress

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvOrganisation = Nothing
      mvContact = Nothing
      mvContactAddress = Nothing
    End Sub

    Protected Overrides Sub SetValid()
      MyBase.SetValid()
      SetCurrent()
    End Sub

    Public Function CreateInstance(pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New ContactPosition(pEnv)
    End Function

    Public Overloads Sub Init(ByVal pContactNumber As Integer, ByVal pOrganisationNumber As Integer)
      MyBase.Init()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(ContactPositionFields.ContactNumber).Name, pContactNumber)
      vWhereFields.Add(mvClassFields(ContactPositionFields.OrganisationNumber).Name, pOrganisationNumber)
      MyBase.InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Overloads Sub Create(ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer, ByVal pOrganisationNumber As Integer, ByVal pMail As String, ByVal pCurrent As String, Optional ByVal pPosition As String = "", Optional ByVal pStarted As String = "", Optional ByVal pFinished As String = "", Optional ByVal pLocation As String = "", Optional ByVal pFunction As String = "", Optional ByVal pSeniority As String = "", Optional ByVal pSinglePosition As Boolean = False, Optional ByVal pPositionStatus As String = "")
      'Save must be performed outside of this method
      Init()
      mvClassFields(ContactPositionFields.ContactNumber).IntegerValue = pContactNumber
      mvClassFields(ContactPositionFields.AddressNumber).IntegerValue = pAddressNumber
      mvClassFields(ContactPositionFields.OrganisationNumber).IntegerValue = pOrganisationNumber
      mvClassFields(ContactPositionFields.Mail).Value = pMail
      mvClassFields(ContactPositionFields.Current).Value = pCurrent
      mvClassFields(ContactPositionFields.Position).Value = pPosition
      mvClassFields(ContactPositionFields.Started).Value = pStarted
      mvClassFields(ContactPositionFields.Finished).Value = pFinished
      mvClassFields(ContactPositionFields.PositionLocation).Value = pLocation
      mvClassFields(ContactPositionFields.PositionFunction).Value = pFunction
      mvClassFields(ContactPositionFields.PositionSeniority).Value = pSeniority
      mvClassFields(ContactPositionFields.SinglePosition).Bool = pSinglePosition
      mvClassFields(ContactPositionFields.PositionStatus).Value = pPositionStatus
      SetCurrent()
    End Sub

    Public Overloads Sub Create(ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer, ByVal pOrganisationNumber As Integer, ByVal pMail As Boolean, ByVal pCurrent As Boolean)
      mvClassFields(ContactPositionFields.ContactNumber).IntegerValue = pContactNumber
      mvClassFields(ContactPositionFields.AddressNumber).IntegerValue = pAddressNumber
      mvClassFields(ContactPositionFields.OrganisationNumber).IntegerValue = pOrganisationNumber
      mvClassFields(ContactPositionFields.Mail).Bool = pMail
      mvClassFields(ContactPositionFields.Current).Bool = pCurrent
      SetCurrent()
    End Sub

    Private Sub SetCurrent()
      Dim vActive As Boolean

      If IsDate(Started) Or IsDate(Finished) Then
        vActive = True
        If IsDate(Started) Then
          If CDate(Started) > Date.Today Then vActive = False
        End If
        If IsDate(Finished) Then
          If CDate(Finished) < Date.Today Then vActive = False
        End If
        mvClassFields(ContactPositionFields.Current).Value = IIf(vActive, "Y", "N").ToString
      End If
      If Current = False Then mvClassFields(ContactPositionFields.Mail).Value = "N"
    End Sub

    Public Overloads Sub Update(ByVal pPosition As String, ByVal pMail As Boolean, ByVal pCurrent As Boolean, ByVal pStarted As String, ByVal pFinished As String, ByVal pLocation As String, Optional ByVal pAddressNumber As Integer = 0, Optional ByVal pFunction As String = "", Optional ByVal pSeniority As String = "", Optional ByVal pSinglePosition As Boolean = False, Optional ByVal pPositionStatus As String = "")
      mvClassFields(ContactPositionFields.Mail).Bool = pMail
      mvClassFields(ContactPositionFields.Current).Bool = pCurrent
      mvClassFields(ContactPositionFields.Position).Value = pPosition
      mvClassFields(ContactPositionFields.Started).Value = pStarted
      mvClassFields(ContactPositionFields.Finished).Value = pFinished
      mvClassFields(ContactPositionFields.PositionLocation).Value = pLocation
      If pAddressNumber > 0 Then mvClassFields(ContactPositionFields.AddressNumber).IntegerValue = pAddressNumber
      mvClassFields(ContactPositionFields.PositionFunction).Value = pFunction
      mvClassFields(ContactPositionFields.PositionSeniority).Value = pSeniority
      mvClassFields(ContactPositionFields.SinglePosition).Bool = pSinglePosition
      mvClassFields(ContactPositionFields.PositionStatus).Value = pPositionStatus
      SetCurrent()
    End Sub

    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      Dim vContact As New Contact(mvEnv)
      Dim vOrgGroupName As String
      Dim vWhereFields As New CDBFields

      vContact.Init(ContactNumber, AddressNumber) 'Make sure we have all the contact data
      If vContact.Existing = False OrElse vContact.Address.Existing = False Then RaiseError(DataAccessErrors.daeCannotFindContactAtAddress, ContactNumber.ToString, AddressNumber.ToString)
      vOrgGroupName = mvEnv.EntityGroups.GroupFromCode(EntityGroup.EntityGroupTypes.egtOrganisation, Organisation.OrganisationGroupCode).Name
      If AddressNumber = vContact.AddressNumber Then
        RaiseError(DataAccessErrors.daeCannotDeletePosition, String.Format(ProjectText.String21602, vOrgGroupName)) 'The address of the %s is the default address of the contact\r\n\r\nRecord cannot be deleted
      End If
      vWhereFields.Add("contact_number", ContactNumber)
      vWhereFields.Add("organisation_number", OrganisationNumber)
      'Check if this is the only record linking this contact and organisation
      If mvEnv.Connection.GetCount((mvClassFields.DatabaseTableName), vWhereFields) = 1 Then
        'If there is only one position then we must check to see if the contact is the default contact
        If ContactNumber = Organisation.ContactNumber = True Then
          RaiseError(DataAccessErrors.daeCannotDeletePosition, String.Format(ProjectText.String21603, vOrgGroupName)) 'The contact is the default mailing contact for the %s\r\n\r\nRecord cannot be deleted
        End If
      End If
      'Now check to see if this position is the only link to the address
      vWhereFields.Add("address_number", CDBField.FieldTypes.cftLong, AddressNumber)
      If mvEnv.Connection.GetCount((mvClassFields.DatabaseTableName), vWhereFields) = 1 Then
        vContact.DeleteAddress(AddressNumber, True)
      End If
      If mvEnv.Connection.InTransaction = False Then mvEnv.Connection.StartTransaction() 'Transaction may have been started when deleting the Address
      vWhereFields.Clear()
      vWhereFields.Add("contact_position_number", ContactPositionNumber)
      mvEnv.Connection.DeleteRecords("contact_position_activities", vWhereFields, False)
      mvEnv.Connection.DeleteRecords("contact_position_links", vWhereFields, False)
      'Note: Contact Roles are deleted as part of deleting the Address as the Role is not linked directly to the Position
      CascadeDeleteDependentItems()
      'Now delete the positions record
      mvClassFields.Delete(mvEnv.Connection, mvEnv, pAmendedBy, pAudit)
      mvEnv.Connection.CommitTransaction()    'Always commit the transaction even if it was started when deleting the Address
    End Sub
    Protected Overrides Sub CascadeDeleteDependentItems()

      'The following dependent items will be deleted with audit records created


      Dim vWhereFields As New CDBFields
      vWhereFields.Add("contact_position_number", ContactPositionNumber)

      'Delete Action Links
      Dim vLink As New ContactPositionAction(mvEnv)
      Dim vDT As DataTable = vLink.GetDataTable(vWhereFields)
      For Each vDataRow As DataRow In vDT.Rows
        vLink.InitFromDataRow(vDataRow)
        vLink.Delete(mvEnv.User.UserID, True)
      Next

      'Delete Document Links
      Dim vDocLink As New DocumentLink(mvEnv)
      vDT = vDocLink.GetDataTable(vWhereFields)
      For Each vDataRow As DataRow In vDT.Rows
        vDocLink.InitFromDataRow(vDataRow)
        vDocLink.Delete(mvEnv.User.UserID, True)
      Next

      'Delete Timesheet
      Dim vTimesheet As New ContactPositionTimesheet(mvEnv)
      vDT = vTimesheet.GetDataTable(vWhereFields)
      For Each vDataRow As DataRow In vDT.Rows
        vTimesheet.InitFromDataRow(vDataRow)
        vTimesheet.Delete(mvEnv.User.UserID, True)
      Next
    End Sub
    Public Sub DeleteOnly(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      mvClassFields.Delete(mvEnv.Connection, mvEnv, pAmendedBy, pAudit)
    End Sub

    Public ReadOnly Property Organisation() As Organisation
      Get
        If mvOrganisation Is Nothing Then
          mvOrganisation = New Organisation(mvEnv)
          mvOrganisation.Init(OrganisationNumber)
        End If
        Return mvOrganisation
      End Get
    End Property

    Public ReadOnly Property Contact() As Contact
      Get
        If mvContact Is Nothing Then
          mvContact = New Contact(mvEnv)
          mvContact.Init(ContactNumber)
        End If
        Return mvContact
      End Get
    End Property

    Public ReadOnly Property ContactAddress() As ContactAddress
      Get
        If mvContactAddress Is Nothing Then
          mvContactAddress = New ContactAddress(mvEnv)
          mvContactAddress.InitFromContactAndAddress(mvEnv, ContactAddress.ContactAddresssLinkTypes.caltContact, ContactNumber, AddressNumber)
        End If
        Return mvContactAddress
      End Get
    End Property

    Public Overloads Sub Init(ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer, ByVal pOrganisationNumber As Integer, Optional ByVal pPosition As String = "", Optional ByVal pStarted As String = "", Optional ByVal pFinished As String = "", Optional ByVal pCurrent As CurrentSettingTypes = CurrentSettingTypes.cstNone)
      Dim vRecordSet As CDBRecordSet
      Dim vFields As New CDBFields
      Dim vCurrentCount As Integer

      Init()
      With vFields
        If pContactNumber > 0 Then
          vCurrentCount += 1
          .Add("cp." & mvClassFields.Item(ContactPositionFields.ContactNumber).Name, pContactNumber)
        End If
        If pAddressNumber > 0 Then .Add("cp." & mvClassFields.Item(ContactPositionFields.AddressNumber).Name, pAddressNumber)
        If pOrganisationNumber > 0 Then
          vCurrentCount += 1
          .Add("cp." & mvClassFields.Item(ContactPositionFields.OrganisationNumber).Name, pOrganisationNumber)
        End If
        If pPosition.Length > 0 Then .Add((mvClassFields.Item(ContactPositionFields.Position).Name), CDBField.FieldTypes.cftCharacter, pPosition)
        If pStarted.Length > 0 Then .Add((mvClassFields.Item(ContactPositionFields.Started).Name), CDBField.FieldTypes.cftCharacter, pStarted)
        If pFinished.Length > 0 Then .Add((mvClassFields.Item(ContactPositionFields.Finished).Name), CDBField.FieldTypes.cftCharacter, pFinished)
        If pCurrent <> CurrentSettingTypes.cstNone Then
          vCurrentCount += 1
          .Add((mvClassFields.Item(ContactPositionFields.Current).Name), If(pCurrent = CurrentSettingTypes.cstCurrent, "Y", "N"))
          .Item((mvClassFields.Item(ContactPositionFields.Current).Name)).SpecialColumn = True
          .TableAlias = "cp"
        End If
      End With
      If vFields.Count >= 6 Or vCurrentCount = 3 Then
        'In an attempt to guarantee a unique record either all of the first six fields need to be used OR the contact number, organisation number and current fields need to be used
        Dim vAnsiJoins As New AnsiJoins()
        vAnsiJoins.Add("organisations o", "cp.organisation_number", "o.organisation_number")
        Dim vSQL As New SQLStatement(mvEnv.Connection, GetRecordSetFields() & ", name", DatabaseTableName & " " & TableAlias, vFields, "", vAnsiJoins)
        vRecordSet = vSQL.GetRecordSet
        If vRecordSet.Fetch() Then InitFromRecordSet(vRecordSet)
        vRecordSet.CloseRecordSet()
      End If
    End Sub

    Public Function ValidateDates(ByVal pOrganisationNumber As Integer, ByVal pAddressNumber As Integer, ByVal pPosValidFrom As String, ByVal pPosValidTo As String, ByRef pErrorMsgDates As String, Optional ByVal pOA As ContactAddress = Nothing, Optional ByVal pAdjustNullDates As Boolean = False) As Boolean
      'Validates the Position dates with the Organisation Address dates
      'If invalid, returns message with address date range
      'Note: Used by Thick-client, Data Import and Web Services
      Dim vValid As Boolean = True
      Dim vOA As ContactAddress
      If pOA Is Nothing Then
        vOA = New ContactAddress(mvEnv)
        vOA.InitFromContactAndAddress(mvEnv, ContactAddress.ContactAddresssLinkTypes.caltOrganisation, pOrganisationNumber, pAddressNumber)
      Else
        'Data Import (If Test mode then data may not actually exist in database)
        vOA = pOA
      End If

      'Set the dates ensuring there are no nulls
      Dim vOAValidFrom As String = If(IsDate(vOA.ValidFrom), vOA.ValidFrom, New Date(1900, 1, 1).ToString(CAREDateFormat))
      Dim vOAValidTo As String = If(IsDate(vOA.ValidTo), vOA.ValidTo, New Date(9999, 12, 31).ToString(CAREDateFormat))

      'Assign AddressDate values to Dates if dates are not sent as parameters
      If Not IsDate(pPosValidFrom) AndAlso pAdjustNullDates Then pPosValidFrom = vOA.ValidFrom
      If Not IsDate(pPosValidTo) AndAlso pAdjustNullDates Then pPosValidTo = vOA.ValidTo

      If Not IsDate(pPosValidFrom) Then pPosValidFrom = New Date(1900, 1, 1).ToString(CAREDateFormat)
      If Not IsDate(pPosValidTo) Then pPosValidTo = New Date(9999, 12, 31).ToString(CAREDateFormat)

      If CDate(pPosValidFrom) < CDate(vOAValidFrom) Then
        'Position starts before Address
        vValid = False
      ElseIf (CDate(pPosValidTo) > CDate(vOAValidTo)) Then
        'Position ends after Address
        vValid = False
      End If
      If vValid = False Then
        pErrorMsgDates = If(IsDate(vOA.ValidFrom), vOA.ValidFrom, "null") & " "
        If IsDate(vOA.ValidTo) Then
          pErrorMsgDates = pErrorMsgDates & "to " & vOA.ValidTo
        Else
          pErrorMsgDates = pErrorMsgDates & "onwards"
        End If
      End If
      Return vValid
    End Function
    Public Function ValidateDatesAgainstDependencies(ByVal pDependantRecord As CARERecord, ByVal pPosValidFrom As String, ByVal pPosValidTo As String) As Boolean
      'This checks the position start and finish dates against existing timesheet
      Dim vValid As Boolean = True
      If Existing Then
        If TypeOf (pDependantRecord) Is ContactPositionTimesheet Then
          Dim vWhereFields As New CDBFields
          vWhereFields.Add("contact_position_number", ContactPositionNumber)
          Dim vDT As DataTable

          'Check timesheets
          Dim vTimesheet As ContactPositionTimesheet = DirectCast(pDependantRecord, ContactPositionTimesheet)
          vDT = vTimesheet.GetDataTable(vWhereFields)
          For Each vDataRow As DataRow In vDT.Rows
            vTimesheet.InitFromDataRow(vDataRow)
            vValid = WithinPeriod(vTimesheet.TimesheetDate, vTimesheet.TimesheetDate, pPosValidFrom, pPosValidTo)
            If Not vValid Then
              Exit For
            End If
          Next
        End If

        If TypeOf (pDependantRecord) Is PositionCategory Then
          If pDependantRecord IsNot Nothing Then
            Dim vPC As PositionCategory = DirectCast(pDependantRecord, PositionCategory)
            vValid = Me.WithinPeriod(vPC.ValidFrom, vPC.ValidTo, pPosValidFrom, pPosValidTo)
          End If
        End If
      End If

      Return vValid
    End Function
    Private Function WithinPeriod(ByVal pDependantValidFrom As String, ByVal pDependantValidTo As String, ByVal pPositionValidFrom As String, ByVal pPositionValidTo As String) As Boolean
      'This checks if period1 is inside period2

      Dim vValid = True

      'Check Dates against Position Started and Finished dates 
      If pPositionValidFrom <> "" Then
        If pDependantValidFrom > "" Then
          If CDate(pDependantValidFrom) < CDate(pPositionValidFrom) Then
            vValid = False
          End If
        Else
          vValid = False
        End If
        If pDependantValidTo > "" Then
          If CDate(pDependantValidTo) < CDate(pPositionValidFrom) Then
            vValid = False
          End If
        End If
      End If

      'Check Date against Position Finished dates 
      If pPositionValidTo <> "" Then
        If pDependantValidTo > "" Then
          If CDate(pDependantValidTo) > CDate(pPositionValidTo) Then
            vValid = False
          End If
        Else
          vValid = False
        End If
        If pDependantValidFrom > "" Then
          If CDate(pDependantValidFrom) > CDate(pPositionValidTo) Then
            vValid = False
          End If
        End If
      End If

      Return vValid
    End Function

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      CheckPrimaryKey()
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Private Sub CheckPrimaryKey()
      If mvExisting Then
        If mvClassFields(ContactPositionFields.ContactPositionNumber).InDatabase Then
          If mvClassFields(ContactPositionFields.ContactPositionNumber).LongValue <= 0 Then
            RaiseError(DataAccessErrors.daeCannotUpdate, "Contact Positions - Primary Key 'Contact Position Number' is Null")
          End If
        End If
      End If
    End Sub

    Public Sub SaveWithAddressLink(ByRef pUpdateRoles As Boolean, Optional ByRef pAmendedBy As String = "", Optional ByRef pAudit As Boolean = False)
      Dim vWhereFields As New CDBFields
      Dim vUpdateFields As New CDBFields
      Dim vTrans As Boolean

      CheckPrimaryKey()
      SetCurrent()
      If mvContactAddress Is Nothing Then
        mvContactAddress = New ContactAddress(mvEnv)
        mvContactAddress.InitFromContactAndAddress(mvEnv, ContactAddress.ContactAddresssLinkTypes.caltContact, ContactNumber, AddressNumber)
      End If
      If mvEnv.Connection.InTransaction = False Then
        mvEnv.Connection.StartTransaction()
        vTrans = True
      End If

      SynchronizeAddress(mvContactAddress, pAmendedBy, pAudit)

      'Check for contact roles and synchronize them if required
      If pUpdateRoles Then SynchronizeRoles(pAmendedBy, pAudit)

      If mvClassFields(ContactPositionFields.Current).ValueChanged Then
        'See whether Gone Away needs setting on the Contact record.
        Contact.UpdateGoneAway(True)
        'If we just terminated this position If it was the default contact then reset the default contact to the dummy
        If Finished.Length > 0 And (Not Current) Then
          If Organisation.ContactNumber = ContactNumber Then
            'BR 7659: Reset Organisation Contact to Dummy
            Organisation.ContactNumber = Organisation.OrganisationNumber
            Organisation.Save()
          End If
        End If
      End If
      'BR 14240 set organisation default contact to new position
      If Not mvExisting AndAlso Current Then
        If Organisation.ContactNumber = Organisation.OrganisationNumber Then
          Organisation.ContactNumber = ContactNumber
          Organisation.Save()
        End If
      End If
      Save(pAmendedBy, pAudit)
      If vTrans Then mvEnv.Connection.CommitTransaction()
    End Sub

    Public Sub SynchronizeRoles(Optional ByVal pAmendedBy As String = "", Optional ByVal pAudit As Boolean = False)
      Dim vContactRole As ContactRole
      Dim vSQL As String
      Dim vGotDates As Boolean
      Dim vRecordSet As CDBRecordSet
      Dim vStart As String
      Dim vEnd As String
      Dim vDeleted As Boolean
      Dim vPosStart As String
      Dim vPosEnd As String

      'Here we are going to check that the dates on the roles are valid given the current settings for this position
      'We need to take into account if there are any contiguous positions to this one
      vStart = Started
      vEnd = Finished
      GetContiguousPositionDates(ContactNumber, OrganisationNumber, vStart, vEnd)
      vContactRole = New ContactRole(mvEnv)
      vContactRole.Init()
      vSQL = "SELECT " & vContactRole.GetRecordSetFields & " FROM contact_roles cr WHERE cr.contact_number = " & ContactNumber & " AND cr.organisation_number = " & OrganisationNumber
      If mvExisting Then
        'If this is an existing position then we need to look at roles that covered the original dates of the position
        vPosStart = mvClassFields(ContactPositionFields.Started).SetValue
        vPosEnd = mvClassFields(ContactPositionFields.Finished).SetValue
      Else
        'If a new position just look for roles that span the dates of the new position
        vPosStart = Started
        vPosEnd = Finished
      End If
      If vPosStart.Length > 0 Then
        'Position had a From value so find any roles that end after or on the From date
        vSQL = vSQL & " AND ((valid_to IS NULL) OR (valid_to" & mvEnv.Connection.SQLLiteral(">=", CDBField.FieldTypes.cftDate, vPosStart) & "))"
      End If
      If vPosEnd.Length > 0 Then
        'Position has a To value so find any roles that start before or on the To date
        vSQL = vSQL & " AND ((valid_from IS NULL) OR (valid_from" & mvEnv.Connection.SQLLiteral("<=", CDBField.FieldTypes.cftDate, vPosEnd) & "))"
      End If
      vRecordSet = mvEnv.Connection.GetRecordSet(vSQL)
      With vRecordSet
        While .Fetch
          vContactRole = New ContactRole(mvEnv)
          vContactRole.InitFromRecordSet(vRecordSet)
          vGotDates = False
          vDeleted = False
          'if the set of positions has a start date but the role does not or the role start date is prior to the position then change it
          If IsDate(vStart) Then
            If IsDate(vContactRole.ValidFrom) Then
              If CDate(vContactRole.ValidFrom) < CDate(vStart) Then vContactRole.Update(vStart, (vContactRole.ValidTo))
            Else
              vContactRole.Update(vStart, (vContactRole.ValidTo))
            End If
            vGotDates = True
          End If
          'If the position has an end date but the role does not or the role end date is after the position end then change it
          If IsDate(vEnd) Then
            If IsDate(vContactRole.ValidTo) Then
              If CDate(vContactRole.ValidTo) > CDate(vEnd) Then vContactRole.Update((vContactRole.ValidFrom), vEnd)
            Else
              vContactRole.Update((vContactRole.ValidFrom), vEnd)
            End If
            vGotDates = True
          End If
          'If we have moved the dates such that the role has no duration then we must delete it
          If IsDate(vContactRole.ValidFrom) And IsDate(vContactRole.ValidTo) Then
            If CDate(vContactRole.ValidTo) <= CDate(vContactRole.ValidFrom) Then
              vContactRole.Delete(pAmendedBy, pAudit)
              vDeleted = True
            End If
          End If
          If Not vDeleted Then
            'if neither start or end date are set and the position is not current then ensure the role is not current
            If Not vGotDates And Current = False Then vContactRole.SetInactive()
            vContactRole.Save(pAmendedBy, pAudit)
          End If
        End While
      End With
      vRecordSet.CloseRecordSet()
    End Sub

    Public Sub GetContiguousPositionDates(ByRef pContactNumber As Integer, ByRef pOrganisationNumber As Integer, ByRef pStartDate As String, ByRef pEndDate As String)
      Dim vPosition As ContactPosition
      Dim vDatesChanged As Boolean

      If IsDate(pStartDate) Or IsDate(pEndDate) Then
        Dim vContact As New Contact(mvEnv)
        vContact.Init(pContactNumber)
        Do
          vDatesChanged = False
          For Each vPosition In vContact.GetPositions(0, pOrganisationNumber)
            'Check Position Started & Finished dates to ensure that Started is before Finished
            'otherwise this will get stuck in an infinite loop
            If IsDate(vPosition.Started) And IsDate(vPosition.Finished) Then
              If CDate(vPosition.Started) > CDate(vPosition.Finished) Then
                'Finished date is set wrong, so set Finished to Started
                'Probably caused by moving the Position on the same day it was created
                With vPosition
                  .Update(.Position, .Mail, .Current, .Started, .Started, .PositionLocation, .AddressNumber, .PositionFunction, .PositionSeniority)
                  If (vPosition.ContactPositionNumber <> ContactPositionNumber) Then .Save()
                End With
              End If
            End If

            If IsDate(pEndDate) Then 'If we have an end date then check if there is
              If IsDate(vPosition.Started) Then 'another position that starts following this one - if so use it's end date
                If DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, CDate(vPosition.Started)) = CDate(pEndDate) Then
                  pEndDate = vPosition.Finished
                  vDatesChanged = True
                End If
              End If
            End If
            If IsDate(pStartDate) Then 'If we have a start date then check if there is
              If IsDate(vPosition.Finished) Then 'another position that finishes before this one - if so use it's start date
                If DateAdd(Microsoft.VisualBasic.DateInterval.Day, 1, CDate(vPosition.Finished)) = CDate(pStartDate) Then
                  pStartDate = vPosition.Started
                  vDatesChanged = True
                End If
              End If
            End If
          Next vPosition
        Loop While vDatesChanged
      End If
    End Sub

    Public Function GetCurrentStatus(ByVal pStarted As String, ByVal pFinished As String) As Boolean
      Dim vActive As Boolean

      If IsDate(pStarted) Or IsDate(pFinished) Then
        vActive = True
        If IsDate(pStarted) Then
          If CDate(pStarted) > Today Then vActive = False
        End If
        If IsDate(pFinished) Then
          If CDate(pFinished) < Today Then vActive = False
        End If
      End If
      Return vActive
    End Function

    Public Sub UpdatePositionData()
      'If updating a Position, update the PositionActivities & PositionLinks so that they do not exceed the position dates
      Dim vCheckStarted As Boolean = IsDate(Started)
      Dim vCheckFinished As Boolean = IsDate(Finished)

      'If the position is valid forever then there is nothing to do
      If Not vCheckStarted And Not vCheckFinished Then Return

      Dim vWhereFields As New CDBFields
      vWhereFields.Add("contact_position_number", ContactPositionNumber)
      'Need to find the records where the valid from date is less than the position started (if the position started is set)
      'Or the valid to is greater than the finished date (if the finished date is set)
      If vCheckStarted Then
        Dim vFWO As CDBField.FieldWhereOperators = CDBField.FieldWhereOperators.fwoLessThan
        If vCheckFinished Then vFWO = vFWO Or CDBField.FieldWhereOperators.fwoOpenBracket
        vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, Started, vFWO)
      End If
      If vCheckFinished Then
        Dim vFWO As CDBField.FieldWhereOperators = CDBField.FieldWhereOperators.fwoGreaterThan
        If vCheckStarted Then vFWO = vFWO Or CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket
        vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, Finished, vFWO)
      End If
      Dim vCPC As New PositionCategory(mvEnv)
      Dim vDT As DataTable = vCPC.GetDataTable(vWhereFields)
      For Each vDataRow As DataRow In vDT.Rows
        vCPC.InitFromDataRow(vDataRow)
        Dim vParams As New CDBParameters
        If vCheckStarted AndAlso CDate(vCPC.ValidFrom) < CDate(Started) Then
          vCPC.ValidFrom = Started
        End If
        If vCheckFinished AndAlso CDate(vCPC.ValidTo) > CDate(Finished) OrElse CDate(vCPC.ValidTo) < CDate(vCPC.ValidFrom) Then
          vCPC.ValidTo = Finished
        End If
        If CDate(vCPC.ValidFrom) > CDate(vCPC.ValidTo) Then vCPC.ValidFrom = Started
        vCPC.Save(mvEnv.User.UserID, True)
      Next

      Dim vCPL As New PositionLink(mvEnv)
      vDT = vCPL.GetDataTable(vWhereFields)
      For Each vDataRow As DataRow In vDT.Rows
        vCPL.InitFromDataRow(vDataRow)

        Dim vParams As New CDBParameters
        If vCheckStarted AndAlso CDate(vCPL.ValidFrom) < CDate(Started) Then
          vParams.Add("ValidFrom", CDBField.FieldTypes.cftDate, Started)
          vCPL.Update(vParams)
        End If
        Dim vValidFrom As String = If(IsDate(vCPL.ValidFrom), vCPL.ValidFrom, New Date(1900, 1, 1).ToString(CAREDateFormat))
        Dim vValidTo As String = If(IsDate(vCPL.ValidTo), vCPL.ValidTo, New Date(9999, 12, 31).ToString(CAREDateFormat))

        If vCheckFinished AndAlso CDate(vValidTo) > CDate(Finished) OrElse CDate(vValidTo) < CDate(vValidFrom) Then
          vParams.Add("ValidTo", CDBField.FieldTypes.cftDate, Finished)
          vCPL.Update(vParams)
        End If
        If IsDate(vCPL.ValidFrom) AndAlso IsDate(vCPL.ValidTo) AndAlso CDate(vCPL.ValidFrom) > CDate(vCPL.ValidTo) Then
          vParams.Add("ValidFrom", CDBField.FieldTypes.cftDate, Started)
          vCPL.Update(vParams)
        End If
        vCPL.Save(mvEnv.User.UserID, True)
      Next
    End Sub

    Friend Sub ClonePositionData(ByVal pOrigContactPositionNumber As Integer, ByVal pNewStartDate As String, ByVal pAmendedBy As String)
      ClonePositionData(pOrigContactPositionNumber, pNewStartDate, pAmendedBy, True)
    End Sub
    Friend Sub ClonePositionData(ByVal pOrigContactPositionNumber As Integer)
      ClonePositionData(pOrigContactPositionNumber, "", mvEnv.User.UserID, False)
    End Sub
    Private Sub ClonePositionData(ByVal pOrigContactPositionNumber As Integer, ByVal pNewStartDate As String, ByVal pAmendedBy As String, ByVal pAmalgamate As Boolean)
      'If Amalgamating Organisations, copy PositionActivities & PositionLinks to the new Position and set the StartDate accordingly
      Dim vUpdateFields As New CDBFields(New CDBField("contact_position_number", ContactPositionNumber))
      vUpdateFields.AddAmendedOnBy(pAmendedBy)
      Dim vWhereFields As New CDBFields(New CDBField("contact_position_number", pOrigContactPositionNumber))
      Dim vNewStartDate As String = ""
      If pAmalgamate Then vNewStartDate = mvEnv.Connection.SQLLiteral("", Date.Parse(pNewStartDate))
      Dim vInsertSQL As String = "INSERT INTO {0} ({1}) SELECT {2} FROM "

      '(1) ContactPositionActivities
      Dim vActivity As New PositionCategory(mvEnv)
      Dim vInsertAttrs As String = vActivity.GetRecordSetFields.Replace("cc.", "")
      Dim vSQLAttrs As String = vActivity.GetRecordSetFields.Replace("cc.contact_position_number", ContactPositionNumber.ToString)
      If pAmalgamate Then vSQLAttrs = vSQLAttrs.Replace("cc.valid_from", vNewStartDate)
      vInsertAttrs = vInsertAttrs.Replace("notes,", "")
      vSQLAttrs = vSQLAttrs.Replace("notes,", "")

      If pAmalgamate Then
        vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, pNewStartDate, CDBField.FieldWhereOperators.fwoLessThan)
        vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, pNewStartDate, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      End If
      vWhereFields.Add("notes", CDBField.FieldTypes.cftMemo, "")

      Dim vTrans As Boolean = False
      If mvEnv.Connection.InTransaction = False Then
        mvEnv.Connection.StartTransaction()
        vTrans = True
      End If
      mvEnv.Connection.ExecuteSQL(String.Format(vInsertSQL, "contact_position_activities", vInsertAttrs, vSQLAttrs) & "contact_position_activities cc WHERE " & mvEnv.Connection.WhereClause(vWhereFields), CDBConnection.cdbExecuteConstants.sqlIgnoreError)

      vWhereFields("notes").WhereOperator = CDBField.FieldWhereOperators.fwoNotEqual
      Dim vNewActivity As PositionCategory
      Dim vSQL As New SQLStatement(mvEnv.Connection, vActivity.GetRecordSetFields(), "contact_position_activities cc", vWhereFields)
      Dim vRS As CDBRecordSet = vSQL.GetRecordSet()
      While vRS.Fetch
        vActivity = New PositionCategory(mvEnv)
        vActivity.InitFromRecordSet(vRS)
        vNewActivity = New PositionCategory(mvEnv)
        If pAmalgamate Then
          vNewActivity.AmalgamateOrganisationPositionCategory(vActivity, ContactPositionNumber, pNewStartDate)
        Else
          vNewActivity.CopyValues(vActivity, ContactPositionNumber)
        End If
        vNewActivity.Save(pAmendedBy)
      End While
      vRS.CloseRecordSet()

      If pAmalgamate Then
        vWhereFields("valid_from").WhereOperator = CDBField.FieldWhereOperators.fwoGreaterThanEqual
        vWhereFields.Remove("valid_to")
        mvEnv.Connection.UpdateRecords("contact_position_activities", vUpdateFields, vWhereFields, False)
      End If

      '(2) ContactPositionLinks
      Dim vLink As New PositionLink(mvEnv)
      vInsertAttrs = vLink.GetRecordSetFields.Replace("cpl.", "")
      vSQLAttrs = vLink.GetRecordSetFields.Replace("cpl.contact_position_number", ContactPositionNumber.ToString)
      If pAmalgamate Then vSQLAttrs = vSQLAttrs.Replace("valid_from", vNewStartDate)
      vInsertAttrs = vInsertAttrs.Replace("notes,", "")
      vSQLAttrs = vSQLAttrs.Replace("notes,", "")
      With vWhereFields
        .Remove("notes")
        If pAmalgamate Then
          .Remove("valid_from")
          .Add("valid_from", CDBField.FieldTypes.cftDate, "", CType(CDBField.FieldWhereOperators.fwoEqual + CDBField.FieldWhereOperators.fwoOpenBracket, CDBField.FieldWhereOperators))
          .Add("valid_from#2", CDBField.FieldTypes.cftDate, pNewStartDate, CType(CDBField.FieldWhereOperators.fwoLessThan + CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
          .Add("valid_to", CDBField.FieldTypes.cftDate, "", CType(CDBField.FieldWhereOperators.fwoEqual + CDBField.FieldWhereOperators.fwoOpenBracket, CDBField.FieldWhereOperators))
          .Add("valid_to#2", CDBField.FieldTypes.cftDate, pNewStartDate, CType(CDBField.FieldWhereOperators.fwoGreaterThanEqual + CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
        End If
        .Add("notes", CDBField.FieldTypes.cftMemo, "")
      End With
      mvEnv.Connection.ExecuteSQL(String.Format(vInsertSQL, "contact_position_links", vInsertAttrs, vSQLAttrs) & "contact_position_links cpl WHERE " & mvEnv.Connection.WhereClause(vWhereFields), CDBConnection.cdbExecuteConstants.sqlIgnoreError)

      vWhereFields("notes").WhereOperator = CDBField.FieldWhereOperators.fwoNotEqual
      Dim vNewLink As PositionLink
      vSQL = New SQLStatement(mvEnv.Connection, vLink.GetRecordSetFields(), "contact_position_links cpl", vWhereFields)
      vRS = vSQL.GetRecordSet()
      While vRS.Fetch
        vLink = New PositionLink(mvEnv)
        vLink.InitFromRecordSet(vRS)
        vNewLink = New PositionLink(mvEnv)
        vNewLink.AmalgamateOrganisationPositionLink(vLink, ContactPositionNumber, If(pAmalgamate, pNewStartDate, vLink.ValidFrom))
        vNewLink.Save(pAmendedBy)
      End While
      vRS.CloseRecordSet()
      If pAmalgamate Then
        With vWhereFields
          .Remove("valid_to")
          .Remove("valid_to#2")
          .Remove("valid_from")
          .Remove("valid_from#2")
          .Add("valid_from", CDBField.FieldTypes.cftDate, pNewStartDate, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
        End With
        mvEnv.Connection.UpdateRecords("contact_position_links", vUpdateFields, vWhereFields, False)
      End If
      If vTrans Then mvEnv.Connection.CommitTransaction()

    End Sub

    Public Function MakeHistoric(ByVal pContact As Contact, ByVal pNewAddress As Address, ByVal pFinished As String, ByVal pMoveType As PositionMoveTypes, Optional ByVal pNewPosition As String = "", Optional ByVal pNewStarted As String = "", Optional ByVal pNewFinished As String = "", Optional ByVal pNewLocation As String = "", Optional ByVal pNewMail As String = "", Optional ByVal pNewCurrent As String = "", Optional ByVal pNewOrganisationNumber As Integer = 0, Optional ByVal pNewFunction As String = "", Optional ByVal pNewSeniority As String = "") As ContactPosition
      Dim vContactPosition As ContactPosition
      Dim vWhereFields As New CDBFields
      Dim vUpdateFields As New CDBFields

      mvClassFields(ContactPositionFields.Mail).Value = "N"
      mvClassFields(ContactPositionFields.Current).Value = "N"
      mvClassFields(ContactPositionFields.Finished).Value = pFinished
      UpdateAddresses(pContact, pNewAddress, pFinished, pMoveType)
      Save()
      ' make the roles historic
      If pFinished <> "" Then
        With vWhereFields
          .Clear()
          .Add("contact_number", CDBField.FieldTypes.cftLong, pContact.ContactNumber)
          .Add("organisation_number", CDBField.FieldTypes.cftLong, OrganisationNumber)
          .Add("is_active", CDBField.FieldTypes.cftCharacter, "Y")
        End With
        With vUpdateFields
          .Clear()
          .AddAmendedOnBy(AmendedBy, AmendedOn)
          .Add("valid_to", CDBField.FieldTypes.cftDate, pFinished)
          .Add("is_active", CDBField.FieldTypes.cftCharacter, "N")
          mvEnv.Connection.UpdateRecords("contact_roles", vUpdateFields, vWhereFields, False)
        End With
      End If
      If pMoveType <> PositionMoveTypes.pmtLeave Then
        vContactPosition = New ContactPosition(mvEnv)
        vContactPosition.Create(ContactNumber, If(pNewAddress Is Nothing, AddressNumber, pNewAddress.AddressNumber), If(pNewOrganisationNumber = 0, OrganisationNumber, pNewOrganisationNumber), pNewMail, pNewCurrent, pNewPosition, pNewStarted, pNewFinished, pNewLocation, pNewFunction, pNewSeniority)
        vContactPosition.Save()
        Return vContactPosition
      Else
        Return Nothing
      End If
    End Function

    Public Sub UpdateAddresses(ByVal pContact As Contact, ByVal pNewAddress As Address, ByVal pFinished As String, ByVal pMoveType As PositionMoveTypes)
      'Check if there is still a current position at this organisation and address
      Dim vContactAddress As New ContactAddress(mvEnv)
      Dim vNewAddressNumber As Integer

      If Not pNewAddress Is Nothing Then vNewAddressNumber = pNewAddress.AddressNumber
      If AddressNumber <> vNewAddressNumber Or pMoveType = PositionMoveTypes.pmtLeave Then
        With vContactAddress
          .InitFromContactAndAddress(mvEnv, ContactAddress.ContactAddresssLinkTypes.caltContact, (pContact.ContactNumber), AddressNumber)
          If .Existing Then 'Update it so it is historic and update the dates
            .Historical = True
            .ValidTo = pFinished
            .Save()
          End If
        End With
        If pMoveType = PositionMoveTypes.pmtLeave Then
          pContact.UpdateGoneAway(True) 'If doing a leave the set the gone away if required
        Else
          'If the old address was the default address for the contact
          'and we now have a new one then update the contact record
          If pContact.AddressNumber = AddressNumber Then
            pContact.SetDefaultAddress(pNewAddress, False, True, False)
          End If
        End If
      End If
    End Sub

    Public Sub MovePositionData(ByVal pOriginalPositionNumber As Integer, ByRef pPosActivityRecordSet As CDBRecordSet, ByRef pPosLinkRecordSet As CDBRecordSet)
      'Routine to select valid Current Position Activities/Relationships to move to New Position
      'Set New position start/finish (used in SQL statement date comparison) and if null then set to standard max start/finish dates
      Dim vNewPosStart As String = If(Started.Length > 0, Started, DateSerial(1900, 1, 1).ToString(CAREDateFormat))
      Dim vNewPosFinish As String = If(Finished.Length > 0, Finished, DateSerial(9998, 12, 31).ToString(CAREDateFormat))

      'Build wherefields collection to select valid linked activity/relationship records
      Dim vWhereFields As New CDBFields(New CDBField("contact_position_number", pOriginalPositionNumber))
      'Select non-historic records
      vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      'Starting before new Position Ending after
      vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, vNewPosStart, CDBField.FieldWhereOperators.fwoOpenBracketTwice Or CDBField.FieldWhereOperators.fwoLessThan)
      vWhereFields.Add("valid_to#2", CDBField.FieldTypes.cftDate, vNewPosFinish, CDBField.FieldWhereOperators.fwoGreaterThan Or CDBField.FieldWhereOperators.fwoCloseBracket)
      'Or Starting during Ending during
      vWhereFields.Add("valid_from#2", CDBField.FieldTypes.cftDate, vNewPosStart, CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      vWhereFields.Add("valid_to#3", CDBField.FieldTypes.cftDate, vNewPosFinish, CDBField.FieldWhereOperators.fwoLessThanEqual Or CDBField.FieldWhereOperators.fwoCloseBracket)
      'Or Starting before Ending during
      vWhereFields.Add("valid_from#3", CDBField.FieldTypes.cftDate, vNewPosStart, CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoLessThan)
      vWhereFields.Add("valid_to#4", CDBField.FieldTypes.cftDate, vNewPosStart, CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      vWhereFields.Add("valid_to#5", CDBField.FieldTypes.cftDate, vNewPosFinish, CDBField.FieldWhereOperators.fwoLessThanEqual Or CDBField.FieldWhereOperators.fwoCloseBracketTwice)
      'Or Starting during Ending after
      vWhereFields.Add("valid_from#4", CDBField.FieldTypes.cftDate, vNewPosStart, CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoOpenBracketTwice Or CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      vWhereFields.Add("valid_from#5", CDBField.FieldTypes.cftDate, vNewPosFinish, CDBField.FieldWhereOperators.fwoLessThanEqual Or CDBField.FieldWhereOperators.fwoCloseBracket)
      vWhereFields.Add("valid_to#6", CDBField.FieldTypes.cftDate, vNewPosFinish, CDBField.FieldWhereOperators.fwoGreaterThan Or CDBField.FieldWhereOperators.fwoCloseBracketTwice)

      '(1) ContactPositionActivities
      Dim vActivity As New PositionCategory(mvEnv)
      Dim vAttrs As String = vActivity.GetRecordSetFields.Replace("cc.", "")
      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vAttrs, "contact_position_activities cc", vWhereFields)
      pPosActivityRecordSet = vSQLStatement.GetRecordSet()

      '(2) ContactPositionLinks
      Dim vLink As New PositionLink(mvEnv)
      vAttrs = vLink.GetRecordSetFields.Replace("cpl.", "")
      'Set WhereFields operator to include NULL for ContactPositionLinks
      vWhereFields.Item("valid_to").WhereOperator = CDBField.FieldWhereOperators.fwoNullOrGreaterThanEqual
      vWhereFields.Item("valid_from").WhereOperator = CDBField.FieldWhereOperators.fwoOpenBracketTwice Or CDBField.FieldWhereOperators.fwoNullOrLessThan
      vWhereFields.Item("valid_to#2").WhereOperator = CDBField.FieldWhereOperators.fwoNullOrGreaterThan Or CDBField.FieldWhereOperators.fwoCloseBracket
      vWhereFields.Item("valid_from#2").WhereOperator = CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoNullOrGreaterThanEqual
      vWhereFields.Item("valid_to#3").WhereOperator = CDBField.FieldWhereOperators.fwoNullOrLessThanEqual Or CDBField.FieldWhereOperators.fwoCloseBracket
      vWhereFields.Item("valid_from#3").WhereOperator = CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoNullOrLessThan
      vWhereFields.Item("valid_to#4").WhereOperator = CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoNullOrGreaterThanEqual
      vWhereFields.Item("valid_to#5").WhereOperator = CDBField.FieldWhereOperators.fwoNullOrLessThanEqual Or CDBField.FieldWhereOperators.fwoCloseBracketTwice
      vWhereFields.Item("valid_from#4").WhereOperator = CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoOpenBracketTwice Or CDBField.FieldWhereOperators.fwoNullOrGreaterThanEqual
      vWhereFields.Item("valid_from#5").WhereOperator = CDBField.FieldWhereOperators.fwoNullOrLessThanEqual Or CDBField.FieldWhereOperators.fwoCloseBracket
      vWhereFields.Item("valid_to#6").WhereOperator = CDBField.FieldWhereOperators.fwoNullOrGreaterThan Or CDBField.FieldWhereOperators.fwoCloseBracketTwice

      vSQLStatement = New SQLStatement(mvEnv.Connection, vAttrs, "contact_position_links cpl", vWhereFields)
      pPosLinkRecordSet = vSQLStatement.GetRecordSet()
    End Sub

    ''' <summary>Synchronize this ContactPosition with the ContactAddress.</summary>
    ''' <remarks>It is assumed that this ContactPosition object has already been initialised for a valie Position.</remarks>
    Public Sub SynchronizeAddress(ByVal pContactAddress As ContactAddress, ByVal pAmendedBy As String, ByVal pAudit As Boolean)
      'Please note that this is called from DataImport as well.

      If pContactAddress.Existing Then
        If mvExisting Then
          'If an existing position and address link then
          'if the previous values were the same change them to the new ones
          If mvClassFields(ContactPositionFields.Started).SetValue = pContactAddress.ValidFrom Then pContactAddress.ValidFrom = Started
          If mvClassFields(ContactPositionFields.Finished).SetValue = pContactAddress.ValidTo Then pContactAddress.ValidTo = Finished
        Else
          'If adding a new historic position and the address link already exists then don't change it's historical status
          'As it will currently reflect an existing current position or another historic one
          'Whether you should change the date ranges is a bit trickier - current thinking is best to leave it alone
        End If
        If Current Then
          If Started.Length > 0 Then 'We have a started date
            If pContactAddress.ValidFrom.Length = 0 Then
              pContactAddress.ValidFrom = Started 'If address valid from null - set to started date
            Else 'else if started date prior to valid from then change it
              If CDate(Started) < CDate(pContactAddress.ValidFrom) Then pContactAddress.ValidFrom = Started
            End If
          Else
            pContactAddress.ValidFrom = "" 'If started date null - set address valid from to null
          End If

          If Finished.Length > 0 Then 'We have a finished date
            If pContactAddress.ValidTo.Length = 0 Then 'If address valid to null
              'set to finished date provided that we did not read an existing started date for this position??
              If mvClassFields(ContactPositionFields.Started).SetValue = "" Then pContactAddress.ValidTo = Finished
            Else 'else if finished date after valid to then change it
              If CDate(Finished) > CDate(pContactAddress.ValidTo) Then pContactAddress.ValidTo = Finished
            End If
          Else
            pContactAddress.ValidTo = "" 'If finished date null - set address valid to to null
          End If
        End If
      Else
        pContactAddress.ValidFrom = Started
        pContactAddress.ValidTo = Finished
      End If

      Dim vContactAddressHistorical As Boolean = Not Current
      If Not Current Then
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("contact_number", ContactNumber)
        vWhereFields.Add("address_number", AddressNumber)
        vWhereFields.Add("current", "Y").SpecialColumn = True
        vWhereFields.Add("contact_position_number", ContactPositionNumber, CDBField.FieldWhereOperators.fwoNotEqual)
        If mvEnv.Connection.GetCount("contact_positions", vWhereFields) > 0 Then
          vContactAddressHistorical = False 'It is Current
        Else
          vContactAddressHistorical = True
        End If
      End If
      pContactAddress.Historical = vContactAddressHistorical
      pContactAddress.Save(pAmendedBy, pAudit)
    End Sub

#End Region
  End Class
End Namespace
