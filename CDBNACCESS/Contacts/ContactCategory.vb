Namespace Access

  Public Class ContactCategory
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Protected Enum ContactCategoryFields
      AllFields = 0
      ContactCategoryNumber
      ContactNumber
      Activity
      ActivityValue
      Quantity
      Source
      ValidFrom
      ValidTo
      Notes
      ActivityDate
      ResponseChannel
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("contact_category_number", CDBField.FieldTypes.cftInteger).PrimaryKey = True
        .Add("contact_number", CDBField.FieldTypes.cftLong).PrefixRequired = True
        .Add("activity").PrefixRequired = True
        .Add("activity_value").PrefixRequired = True
        .Add("quantity", CDBField.FieldTypes.cftNumeric).PrefixRequired = True
        .Add("source").PrefixRequired = True
        .Add("valid_from", CDBField.FieldTypes.cftDate).PrefixRequired = True
        .Add("valid_to", CDBField.FieldTypes.cftDate).PrefixRequired = True
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("activity_date", CDBField.FieldTypes.cftDate)
        .Add("response_channel")

        .SetControlNumberField(ContactCategoryFields.ContactCategoryNumber, "CCG")
      End With

      'Note: Data must still be unique across ContactNumber, Activity, ActivityValue, ValidFrom, ValidTo & Source
    End Sub
    ''' <summary>
    ''' What has happened to a new Contact/Organisation Catergory
    ''' </summary>
    ''' <remarks></remarks>
    Public Enum ContactCategoryUpdated
      Inserted = 0
      Updated = 1
      Duplicate = 2
    End Enum

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "cc"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "contact_categories"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(ContactCategoryFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Activity() As String
      Get
        Return mvClassFields(ContactCategoryFields.Activity).Value
      End Get
    End Property
    Public ReadOnly Property ActivityValue() As String
      Get
        Return mvClassFields(ContactCategoryFields.ActivityValue).Value
      End Get
    End Property
    Public Property Quantity() As String
      Get
        Return mvClassFields(ContactCategoryFields.Quantity).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(ContactCategoryFields.Quantity).Value = value
      End Set
    End Property
    Public ReadOnly Property Source() As String
      Get
        Return mvClassFields(ContactCategoryFields.Source).Value
      End Get
    End Property
    Public ReadOnly Property ResponseChannel() As String
      Get
        Return mvClassFields(ContactCategoryFields.ResponseChannel).Value
      End Get
    End Property
    Public Property ValidFrom() As String
      Get
        Return mvClassFields(ContactCategoryFields.ValidFrom).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(ContactCategoryFields.ValidFrom).Value = value
      End Set
    End Property
    Public Property ValidTo() As String
      Get
        Return mvClassFields(ContactCategoryFields.ValidTo).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(ContactCategoryFields.ValidTo).Value = value
      End Set
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ContactCategoryFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ContactCategoryFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(ContactCategoryFields.Notes).Value
      End Get
    End Property
    Public ReadOnly Property ActivityDate() As String
      Get
        Return mvClassFields(ContactCategoryFields.ActivityDate).Value
      End Get
    End Property
    Public ReadOnly Property ContactCategoryNumber() As Integer
      Get
        Return mvClassFields(ContactCategoryFields.ContactCategoryNumber).IntegerValue
      End Get
    End Property

#End Region

#Region "Non-AutoGenerated Code"

    Public Enum ActivityEntryStyles     'Make these bit wise values
      aesNormal = 0
      aesAllowMultipleSource = 1
      aesCheckDateRange = 2
      aesIgnoreExisting = 4
      aesPositionActivity = 8
      aesCreateJournal = 16
      aesSmartClient = 32
      aesCarePortal = 64
      aesForceAmendmentHistory = 128   'BR17834
    End Enum

    Public Sub SaveActivity(ByVal pStyle As ActivityEntryStyles, ByVal pContactNumber As Integer, ByVal pActivity As String, ByVal pActivityValue As String, ByVal pSource As String, ByVal pValidFrom As String, ByVal pValidTo As String)
      SaveActivity(pStyle, pContactNumber, pActivity, pActivityValue, pSource, pValidFrom, pValidTo, "", "", "", "", "", "")
    End Sub

    'Public Sub SaveActivity(ByVal pStyle As ActivityEntryStyles, ByVal pContactNumber As Integer, ByVal pActivity As String, ByVal pActivityValue As String, ByVal pSource As String, ByVal pValidFrom As String, ByVal pValidTo As String, ByVal pQty As String, ByVal pNotes As String)
    '  SaveActivity(pStyle, pContactNumber, pActivity, pActivityValue, pSource, pValidFrom, pValidTo, pQty, pNotes, "", "", "")
    'End Sub
    ''' <summary>
    ''' Attempt to save an activity and provide feedback as to what happened
    ''' </summary>
    ''' <param name="pStyle"></param>
    ''' <param name="pContactNumber"></param>
    ''' <param name="pActivity"></param>
    ''' <param name="pActivityValue"></param>
    ''' <param name="pSource"></param>
    ''' <param name="pValidFrom"></param>
    ''' <param name="pValidTo"></param>
    ''' <param name="pQty"></param>
    ''' <param name="pNotes"></param>
    ''' <param name="pAmendedOn"></param>
    ''' <param name="pAmendedBy"></param>
    ''' <param name="pActivityDate"></param>
    ''' <param name="pResponseChannel"></param>
    ''' <returns>ContactCategoryUpdated enum member</returns>
    ''' <remarks></remarks>

    Public Function SaveActivity(ByVal pStyle As ActivityEntryStyles, ByVal pContactNumber As Integer, ByVal pActivity As String, ByVal pActivityValue As String, ByVal pSource As String, ByVal pValidFrom As String, ByVal pValidTo As String, ByVal pQty As String, ByVal pNotes As String, ByVal pAmendedOn As String, ByVal pAmendedBy As String, ByVal pActivityDate As String, pResponseChannel As String) As ContactCategoryUpdated
      Dim vContactCategoryUpdated As ContactCategoryUpdated
      Init()
      Dim vAmendedOn As String
      vAmendedOn = TodaysDate()

      Dim vAmendedBy As String
      Dim vOverrideAmended As Boolean = mvOverrideAmended
      If pAmendedBy.Length > 0 Then
        vAmendedBy = pAmendedBy
        vOverrideAmended = True
        If IsDate(pAmendedOn) AndAlso pAmendedOn < vAmendedOn Then
          vAmendedOn = pAmendedOn
        End If
      Else
        vAmendedBy = mvEnv.User.UserID
      End If

      Dim vWhereFields As New CDBFields
      vWhereFields.Add(mvClassFields(ContactCategoryFields.ContactNumber).Name, pContactNumber)
      vWhereFields.Add("activity", pActivity)
      vWhereFields.Add("activity_value", pActivityValue)

      Dim vValidFrom As String
      If pValidFrom.Length > 0 Then
        vValidFrom = pValidFrom
        If (pStyle And ActivityEntryStyles.aesCheckDateRange) > 0 Then
          vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, vValidFrom, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
          If (pStyle And ActivityEntryStyles.aesCarePortal) > 0 Then
            vWhereFields.Add("valid_to#2", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoNOT Or CDBField.FieldWhereOperators.fwoOpenBracket)
            vWhereFields.Add("amended_on", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoCloseBracket)
          End If
        Else
          vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, vValidFrom)
        End If
      Else
        vValidFrom = TodaysDate()
      End If

      Dim vValidTo As String
      If pValidTo.Length > 0 Then
        vValidTo = pValidTo
        If (pStyle And ActivityEntryStyles.aesCheckDateRange) > 0 Then
          If (pStyle And ActivityEntryStyles.aesSmartClient) > 0 Then vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, vValidTo, CDBField.FieldWhereOperators.fwoLessThanEqual)
        End If
      Else
        vValidTo = TodaysDate()
      End If

      'If we allow multiple activity entries for the same activities
      'but different sources then search only for the specified source
      If (pStyle And ActivityEntryStyles.aesAllowMultipleSource) > 0 AndAlso Not mvEnv.GetConfigOption("activity_exclude_source_check", False) Then vWhereFields.Add("source", pSource)

      Dim vDoInsert As Boolean
      If (pStyle And ActivityEntryStyles.aesIgnoreExisting) = 0 Then
        InitWithPrimaryKey(vWhereFields)
        If Existing Then
          'record exists - update the records valid_to date
          Dim vUpdateValidFrom As Boolean = False
          Dim vUpdateValidTo As Boolean = True
          If (pStyle And ActivityEntryStyles.aesCheckDateRange) > 0 Then
            If CDate(vValidFrom) <= CDate(ValidFrom) Then vUpdateValidFrom = True
            'if new Valid To <= original Valid To there's no need to update the record
            If CDate(vValidTo) <= CDate(ValidTo) Then vUpdateValidTo = False
          End If
          If vUpdateValidFrom = True Or vUpdateValidTo = True Then
            mvClassFields(ContactCategoryFields.AmendedOn).Value = vAmendedOn
            mvClassFields(ContactCategoryFields.AmendedBy).Value = vAmendedBy
            If vUpdateValidFrom Then mvClassFields(ContactCategoryFields.ValidFrom).Value = vValidFrom
            If vUpdateValidTo Then mvClassFields(ContactCategoryFields.ValidTo).Value = vValidTo
            If pNotes.Length > 0 Then mvClassFields(ContactCategoryFields.Notes).Value = pNotes
            If pQty.Length > 0 Then mvClassFields(ContactCategoryFields.Quantity).Value = pQty
            If pActivityDate.Length > 0 Then mvClassFields(ContactCategoryFields.ActivityDate).Value = pActivityDate
            If pResponseChannel.Length > 0 Then mvClassFields(ContactCategoryFields.ResponseChannel).Value = pResponseChannel
            If mvEnv.GetConfigOption("activity_exclude_source_check", False) AndAlso Source <> pSource Then
              'Source excluded from existing checks and source different- update source
              mvClassFields(ContactCategoryFields.Source).Value = pSource
            End If
            If vOverrideAmended Then
              'Update table using the Amended By and Amended On values in the class fields
              mvOverrideAmended = True
              mvClassFields.SaveAmendedOnChanges = True
              Save("", True)
            Else
              Save(mvEnv.User.UserID, True)
            End If
            vContactCategoryUpdated = ContactCategoryUpdated.Updated
          Else
            vContactCategoryUpdated = ContactCategoryUpdated.Duplicate
          End If
        Else
          vDoInsert = True
        End If
      Else
        With vWhereFields
          If .Exists("valid_from") Then .Remove("valid_from")
          If .Exists("valid_to") Then .Remove("valid_to")
          .Add("valid_from", CDBField.FieldTypes.cftDate, vValidFrom)
          .Add("valid_to", CDBField.FieldTypes.cftDate, vValidTo)
        End With
        vDoInsert = mvEnv.Connection.GetCount(mvClassFields.DatabaseTableName, vWhereFields) = 0
      End If
      If vDoInsert Then
        mvClassFields(ContactCategoryFields.ContactNumber).IntegerValue = pContactNumber
        mvClassFields(ContactCategoryFields.Activity).Value = pActivity
        mvClassFields(ContactCategoryFields.ActivityValue).Value = pActivityValue
        mvClassFields(ContactCategoryFields.Source).Value = pSource
        mvClassFields(ContactCategoryFields.ValidFrom).Value = vValidFrom
        mvClassFields(ContactCategoryFields.ValidTo).Value = vValidTo
        mvClassFields(ContactCategoryFields.Notes).Value = pNotes
        mvClassFields(ContactCategoryFields.Quantity).Value = pQty
        mvClassFields(ContactCategoryFields.ActivityDate).Value = pActivityDate
        mvClassFields(ContactCategoryFields.ResponseChannel).Value = pResponseChannel
        mvClassFields(ContactCategoryFields.AmendedOn).Value = vAmendedOn
        mvClassFields(ContactCategoryFields.AmendedBy).Value = vAmendedBy

        Dim vUserId As String = mvEnv.User.UserID
        If vOverrideAmended Then
          'Set properties so that Amended By and Amended On values in the class fields will be used for adding new database record
          mvOverrideAmended = True
          mvClassFields.SaveAmendedOnChanges = True
          vUserId = ""
        End If
        If (pStyle And ActivityEntryStyles.aesCreateJournal) > 0 Then
          Dim vJournalNumber As Integer = mvEnv.AddJournalRecord(JournalTypes.jnlActivity, JournalOperations.jnlInsert, pContactNumber, 0, 0)
          If (pStyle And ActivityEntryStyles.aesForceAmendmentHistory) > 0 Then
            Save(vUserId, True, vJournalNumber, True)
            vContactCategoryUpdated = ContactCategoryUpdated.Inserted
          Else
            Save(vUserId, True, vJournalNumber, False)
            vContactCategoryUpdated = ContactCategoryUpdated.Inserted
          End If
        Else
          Save(vUserId, True)
          vContactCategoryUpdated = ContactCategoryUpdated.Inserted
        End If
      Else
        If vContactCategoryUpdated <> ContactCategoryUpdated.Updated Then
          vContactCategoryUpdated = ContactCategoryUpdated.Duplicate
        End If
      End If
      Return vContactCategoryUpdated
    End Function

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer, pForceAmendmentHistory As Boolean)
      ValidateHistoricActivity()
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber, pForceAmendmentHistory)
    End Sub

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      ValidateHistoricActivity()
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Private Sub ValidateHistoricActivity()
      If Not IsMerging Then
        If mvClassFields("activity").ValueChanged Then
          Dim vValidator As New AllowHistoricActivityValidator(mvEnv, Me.Activity)
          If Not vValidator.Validate() Then
            RaiseError(DataAccessErrors.daeRecordIsHistoric, "Activity")
          End If
        End If
        If mvClassFields("activity_value").ValueChanged Then
          Dim vValidator As New AllowHistoricActivityValueValidator(mvEnv, Me.Activity, Me.ActivityValue)
          If Not vValidator.Validate() Then
            RaiseError(DataAccessErrors.daeRecordIsHistoric, "Activity Value")
          End If
        End If
      End If
    End Sub

    Public Sub Cancel(Optional ByVal pCreatedOn As String = "")
      If CDate(ValidFrom) > CDate(TodaysDate()) Then
        'Contact_categories, unless for future membership type, will not be deleted. 
        'For those with a future valid_from date, set the valid_to date to be the same as valid_from date.
        mvClassFields(ContactCategoryFields.ValidTo).Value = ValidFrom
      Else
        mvClassFields(ContactCategoryFields.ValidTo).Value = TodaysDate()
        If CDate(ValidFrom) > CDate(ValidTo) Then
          'ValidFrom can not be after ValidTo
          'So set ValidFrom to be the date Category was created, if known
          If IsDate(pCreatedOn) Then
            If CDate(pCreatedOn) > CDate(TodaysDate()) Then
              mvClassFields(ContactCategoryFields.ValidFrom).Value = TodaysDate()
            Else
              mvClassFields(ContactCategoryFields.ValidFrom).Value = pCreatedOn
            End If
          Else
            mvClassFields(ContactCategoryFields.ValidFrom).Value = TodaysDate()
          End If
        End If
      End If
    End Sub

    Public Sub DeleteActivity(ByVal pContactNumber As Integer, ByVal pActivity As String)
      DeleteActivity(pContactNumber, pActivity, "")
    End Sub

    Public Sub DeleteActivity(ByVal pContactNumber As Integer, ByVal pActivity As String, ByVal pActivityValue As String)
      CheckClassFields()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(ContactCategoryFields.ContactNumber).Name, pContactNumber)
      vWhereFields.Add(mvClassFields(ContactCategoryFields.Activity).Name, pActivity)
      If pActivityValue.Length > 0 Then vWhereFields.Add(mvClassFields(ContactCategoryFields.ActivityValue).Name, pActivityValue)
      DeleteByForeignKeys(vWhereFields)
    End Sub

    Public WriteOnly Property LineValue(ByVal pAttributeName As String) As String
      Set(ByVal Value As String)
        mvClassFields.ItemValue(pAttributeName) = Value
      End Set
    End Property

    Public Function LineDataType(ByVal pAttributeName As String) As CDBField.FieldTypes
      Return mvClassFields.ItemDataType(pAttributeName)
    End Function

    Public Overloads Sub CopyValues(ByVal pRecord As CARERecord, ByVal pNewNumber As Integer)
      MyBase.CopyValues(pRecord)
      mvClassFields(ContactCategoryFields.ContactNumber).IntegerValue = pNewNumber
    End Sub
    ''' <summary>
    ''' Add a contact or organisation category accoring to Activity configurations
    ''' </summary>
    ''' <param name="pContactNumber"></param>
    ''' <param name="pActivity"></param>
    ''' <param name="pActivityValue"></param>
    ''' <param name="pSource"></param>
    ''' <param name="pValidFrom"></param>
    ''' <param name="pValidTo"></param>
    ''' <param name="pQuantity"></param>
    ''' <param name="pNotes"></param>
    ''' <param name="pActivityDate"></param>
    ''' <param name="pResponseChannel"></param>
    ''' <param name="pForceAmendmentHistory"></param>
    ''' <returns>A message stating what has happened to the Activity passed as parameters</returns>
    ''' <remarks>Used by import as an interface to Function AddActivity(ByVal pParams As CDBParameters)</remarks>
    Public Function AddActivity(ByVal pContactNumber As Integer, ByVal pActivity As String, ByVal pActivityValue As String, ByVal pSource As String, ByVal pValidFrom As String, ByVal pValidTo As String, ByVal pQuantity As String, ByVal pNotes As String, ByVal pAmendedOn As String, ByVal pAmendedBy As String, ByVal pActivityDate As String, ByVal pResponseChannel As String, ByVal pForceAmendmentHistory As Boolean) As String
      Dim vParams As New CDBParameters

      If Me.GetType() Is GetType(OrganisationCategory) Then
        vParams.Add("OrganisationNumber", pContactNumber)
      Else
        vParams.Add("ContactNumber", pContactNumber)
      End If
      vParams.Add("Activity", pActivity)
      vParams.Add("ActivityValue", pActivityValue)
      vParams.Add("Source", pSource)
      vParams.Add("ValidFrom", pValidFrom)
      vParams.Add("ValidTo", pValidTo)
      vParams.Add("Quantity", pQuantity)
      vParams.Add("Notes", pNotes)
      If pAmendedBy <> "" Then  ' Only use Amended On value if Amended By value is given
        vParams.Add("AmendedBy", pAmendedBy)
        vParams.Add("AmendedOn", pAmendedOn)
      End If
      vParams.Add("ActivityDate", pActivityDate)
      vParams.Add("ResponseChannel", pResponseChannel)
      vParams.Add("ForceAmendmentHistory", BooleanString(pForceAmendmentHistory))
      Return AddActivity(vParams)
    End Function
    ''' <summary>
    ''' Add a contact or organisation category accoring to Activity configurations. 
    ''' </summary>
    ''' <param name="pParams"></param>
    ''' <returns>A message stating what has happened to the Activity passed as parameters</returns>
    ''' <remarks>Taken from XMLAddData.AddActivity where it is called from. Import uses this as a function.</remarks>
    Public Function AddActivity(ByVal pParams As CDBParameters) As String

      Dim vResult As New CDBParameters
      Dim vStyle As ContactCategory.ActivityEntryStyles
      Dim vContactCategoryUpdated As ContactCategoryUpdated

      Dim vMessage As String

      'MANDATORY(ContactNumber, ContactType, Activity, ActivityValue, Source)
      'OPTIONAL  ValidFrom,ValidTo,Quantity,Notes,ActivityDate

      If mvEnv.GetConfigOption("jo_ws_contact_changes") Then
        vStyle = ContactCategory.ActivityEntryStyles.aesNormal Or ContactCategory.ActivityEntryStyles.aesCheckDateRange Or ContactCategory.ActivityEntryStyles.aesCreateJournal Or ContactCategory.ActivityEntryStyles.aesAllowMultipleSource Or ContactCategory.ActivityEntryStyles.aesSmartClient
      Else
        vStyle = ContactCategory.ActivityEntryStyles.aesNormal Or ContactCategory.ActivityEntryStyles.aesCheckDateRange Or ContactCategory.ActivityEntryStyles.aesAllowMultipleSource Or ContactCategory.ActivityEntryStyles.aesSmartClient
      End If
      If pParams.Exists("ForceAmendmentHistory") AndAlso pParams("ForceAmendmentHistory").Value = "Y" Then
        vStyle = vStyle Or ActivityEntryStyles.aesForceAmendmentHistory
      End If
      If pParams.ParameterExists("CarePortal").Bool = True Then
        vStyle = vStyle Or ContactCategory.ActivityEntryStyles.aesCarePortal
      End If

      If mvEnv.GetConfigOption("cd_activity_entry_no_overlap", False) Then
        Create(pParams)
        If Exists(pParams("Activity").Value, pParams("ActivityValue").Value, pParams("Source").Value, pParams.ParameterExists("ValidFrom").Value, pParams.ParameterExists("ValidTo").Value) Then
          RaiseError(DataAccessErrors.daeActivityAlreadyExistsInTimePeriod)
        End If
      End If
      If Me.GetType() Is GetType(OrganisationCategory) Then
        vContactCategoryUpdated = SaveActivity(vStyle, pParams("OrganisationNumber").IntegerValue, pParams("Activity").Value, pParams("ActivityValue").Value, pParams("Source").Value, pParams.ParameterExists("ValidFrom").Value, pParams.ParameterExists("ValidTo").Value, pParams.ParameterExists("Quantity").Value, pParams.ParameterExists("Notes").Value, pParams.ParameterExists("AmendedOn").Value, pParams.ParameterExists("AmendedBy").Value, pParams.ParameterExists("ActivityDate").Value, pParams.ParameterExists("ResponseChannel").Value)
      Else
        vContactCategoryUpdated = SaveActivity(vStyle, pParams("ContactNumber").IntegerValue, pParams("Activity").Value, pParams("ActivityValue").Value, pParams("Source").Value, pParams.ParameterExists("ValidFrom").Value, pParams.ParameterExists("ValidTo").Value, pParams.ParameterExists("Quantity").Value, pParams.ParameterExists("Notes").Value, pParams.ParameterExists("AmendedOn").Value, pParams.ParameterExists("AmendedBy").Value, pParams.ParameterExists("ActivityDate").Value, pParams.ParameterExists("ResponseChannel").Value)
      End If
      Select Case vContactCategoryUpdated
        Case ContactCategoryUpdated.Inserted
          vMessage = "Activity '" & pParams("Activity").Value & "/" & pParams("ActivityValue").Value & "' created for "
        Case ContactCategoryUpdated.Updated
          vMessage = "Activity '" & pParams("Activity").Value & "/" & pParams("ActivityValue").Value & "' updated for "
        Case ContactCategoryUpdated.Duplicate
          vMessage = "Activity '" & pParams("Activity").Value & "/" & pParams("ActivityValue").Value & "' already exists for "
        Case Else
          vMessage = "" ' To keep the compiler happy!
      End Select
      If Me.GetType() Is GetType(OrganisationCategory) Then
        vMessage = vMessage & "Organisation " & pParams("OrganisationNumber").Value
      Else
        If Me.GetType() Is GetType(ContactCategory) Then
          vMessage = vMessage & "Contact " & pParams("ContactNumber").Value
        End If
      End If
      Return vMessage
    End Function

#End Region



  End Class
End Namespace
