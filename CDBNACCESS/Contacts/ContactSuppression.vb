Namespace Access

  Public Class ContactSuppression
    Inherits CARERecord

#Region "AutoGenerated Code"


    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Protected Enum ContactSuppressionFields
      AllFields = 0
      ContactNumber
      MailingSuppression
      Source
      ResponseChannel
      ValidFrom
      ValidTo
      Notes
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("mailing_suppression")
        .Add("source")
        .Add("response_channel")
        .Add("valid_from", CDBField.FieldTypes.cftDate)
        .Add("valid_to", CDBField.FieldTypes.cftDate)
        .Add("notes", CDBField.FieldTypes.cftMemo)

        .Item(ContactSuppressionFields.ContactNumber).PrimaryKey = True
        .Item(ContactSuppressionFields.ValidFrom).PrimaryKey = True
        .Item(ContactSuppressionFields.ValidTo).PrimaryKey = True
        .Item(ContactSuppressionFields.MailingSuppression).PrimaryKey = True

        .Item("source").InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbSuppressionSource)              'Use field name rather than Index to solve problem when using OrganisationSuppressions
        .Item("response_channel").InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbResponseChannel)      'Use field name rather than Index to solve problem when using OrganisationSuppressions
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "cs"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "contact_suppressions"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(ContactSuppressionFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property MailingSuppression() As String
      Get
        Return mvClassFields(ContactSuppressionFields.MailingSuppression).Value
      End Get
    End Property
    Public ReadOnly Property Source() As String
      Get
        Return mvClassFields(ContactSuppressionFields.Source).Value
      End Get
    End Property
    Public ReadOnly Property ResponseChannel() As String
      Get
        Return mvClassFields(ContactSuppressionFields.ResponseChannel).Value
      End Get
    End Property
    Public ReadOnly Property ValidFrom() As String
      Get
        Return mvClassFields(ContactSuppressionFields.ValidFrom).Value
      End Get
    End Property
    Public ReadOnly Property ValidTo() As String
      Get
        Return mvClassFields(ContactSuppressionFields.ValidTo).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ContactSuppressionFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ContactSuppressionFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(ContactSuppressionFields.Notes).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Public Enum SuppressionEntryStyles  'Make these bitwise values
      sesNormal = 0
      sesNoUpdateAllowed = 1
      sesignoreExisting = 2
      sesUpdateValidFrom = 4
      sesNoInsertAllowed = 8
    End Enum

    Public Sub SaveSuppression(ByVal pStyle As SuppressionEntryStyles, ByVal pContactNumber As Integer, ByVal pSuppression As String, ByVal pValidFrom As String, ByVal pValidTo As String, ByVal pSource As String)
      SaveSuppression(pStyle, pContactNumber, pSuppression, pValidFrom, pValidTo, "", "", False, pSource)
    End Sub

    Public Sub SaveSuppression(ByVal pStyle As SuppressionEntryStyles, ByVal pContactNumber As Integer, ByVal pSuppression As String, ByVal pValidFrom As String, ByVal pValidTo As String, ByVal pAmendedOn As String, ByVal pAmendedBy As String, ByVal pSource As String)
      SaveSuppression(pStyle, pContactNumber, pSuppression, pValidFrom, pValidTo, pAmendedOn, pAmendedBy, False, pSource)
    End Sub
    Public Overloads Sub Init(ByVal pContactNumber As Integer, ByVal pSuppression As String, ByVal pValidFrom As String, ByVal pValidTo As String)
      CheckClassFields()
      Dim vWhereFields As New CDBFields
      vWhereFields.Add(mvClassFields(ContactSuppressionFields.ContactNumber).Name, pContactNumber)
      vWhereFields.Add(mvClassFields(ContactSuppressionFields.MailingSuppression).Name, pSuppression)
      vWhereFields.Add(mvClassFields(ContactSuppressionFields.ValidFrom).Name, CDBField.FieldTypes.cftDate, pValidFrom)
      vWhereFields.Add(mvClassFields(ContactSuppressionFields.ValidTo).Name, CDBField.FieldTypes.cftDate, pValidTo)
      InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Sub SaveSuppression(ByVal pStyle As SuppressionEntryStyles, ByVal pContactNumber As Integer, ByVal pSuppression As String, ByVal pValidFrom As String, ByVal pValidTo As String, ByVal pAmendedOn As String, ByVal pAmendedBy As String, ByVal pHistoricSet As Boolean, ByVal pSource As String, Optional ByVal pNotes As String = "", Optional ByVal pResponseChannel As String = "")

      MyBase.Init()
      Dim vAmendedOn As String
      If IsDate(pAmendedOn) Then
        vAmendedOn = pAmendedOn
      Else
        vAmendedOn = TodaysDate()
      End If

      Dim vAmendedBy As String
      If pAmendedBy.Length > 0 Then
        vAmendedBy = pAmendedBy
      Else
        vAmendedBy = mvEnv.User.UserID
      End If
      If pValidFrom.Length = 0 Then
        pValidFrom = TodaysDate()
        pValidTo = Date.Now.AddYears(99).ToString(CAREDateFormat)
      End If
      Dim vDoInsert As Boolean = True
      If (pStyle And SuppressionEntryStyles.sesignoreExisting) = 0 Then
        Dim vWhereFields As New CDBFields
        With vWhereFields
          If mvClassFields.DatabaseTableName = "contact_suppressions" Then
            .Add("contact_number", pContactNumber)
          Else
            .Add("organisation_number", pContactNumber)
          End If
          .Add(mvClassFields(ContactSuppressionFields.MailingSuppression).Name, pSuppression)
          'If any existing record ends on or after the new start date (or is null)
          vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, pValidFrom, CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoGreaterThanEqual)
          vWhereFields.Add("valid_to#2", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket)
          'And starts on or before the new end date (or is null)
          vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, pValidTo, CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoLessThanEqual)
          vWhereFields.Add("valid_from#2", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket)

          'Care Portal keep historic record if set today
          If pHistoricSet Then
            .Add("valid_to#9", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoNotEqual)
            .Add("amended_on", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoNotEqual)
          End If

        End With
        Dim vAttrs As String = Me.GetRecordSetFields.Replace(TableAlias & ".", "")
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vAttrs, mvClassFields.DatabaseTableName, vWhereFields)
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        Dim vExisting As Boolean

        While vRS.Fetch
          If Not (pStyle And SuppressionEntryStyles.sesUpdateValidFrom) > 0 Then
            If CDate(vRS.Fields("valid_from").Value) < CDate(pValidFrom) Then pValidFrom = vRS.Fields("valid_from").Value
          End If
          If CDate(vRS.Fields("valid_to").Value) > CDate(pValidTo) Then pValidTo = vRS.Fields("valid_to").Value
          vExisting = True
          vDoInsert = False
          If pSource.Length = 0 And vRS.Fields("source").Value.Length > 0 Then pSource = vRS.Fields("source").Value
          If pResponseChannel.Length = 0 And vRS.Fields("response_channel").Value.Length > 0 Then pResponseChannel = vRS.Fields("response_channel").Value
          If vRS.Fields("notes").Value.Length > 0 Then
            pNotes = vRS.Fields("notes").Value & IIf(pNotes.Length > 0, vbCrLf & pNotes, "").ToString
          End If
        End While
        vRS.CloseRecordSet()
        If (pStyle And SuppressionEntryStyles.sesNoInsertAllowed) = 0 Then
          If vExisting AndAlso (pStyle And SuppressionEntryStyles.sesNoUpdateAllowed) = 0 Then
            'delete all and create new with revised valid from and valid to
            Dim vTrans As Boolean = False
            If mvEnv.Connection.InTransaction = False Then
              mvEnv.Connection.StartTransaction()
              vTrans = True
            End If
            mvEnv.Connection.DeleteRecords(DatabaseTableName, vWhereFields, False)
            Dim vNewSuppression As ContactSuppression
            'create a new
            If Me.DatabaseTableName = "contact_suppressions" Then
              vNewSuppression = New ContactSuppression(mvEnv)
            Else
              vNewSuppression = New OrganisationSuppression(mvEnv)
            End If
            vNewSuppression.Init()
            vNewSuppression.Create(pContactNumber, pSuppression, pValidFrom, pValidTo, pNotes, pSource, pResponseChannel)
            vNewSuppression.Save()
            If vTrans Then mvEnv.Connection.CommitTransaction()
          End If
        End If
      End If
      If vDoInsert And (pStyle And SuppressionEntryStyles.sesNoInsertAllowed) = 0 Then
        mvClassFields(ContactSuppressionFields.AmendedOn).Value = vAmendedOn
        mvClassFields(ContactSuppressionFields.AmendedBy).Value = vAmendedBy
        mvClassFields(ContactSuppressionFields.ValidFrom).Value = pValidFrom
        mvClassFields(ContactSuppressionFields.ValidTo).Value = pValidTo
        mvClassFields(ContactSuppressionFields.ContactNumber).IntegerValue = pContactNumber
        mvClassFields(ContactSuppressionFields.MailingSuppression).Value = pSuppression
        mvClassFields(ContactSuppressionFields.Notes).Value = pNotes
        If pSource.Length > 0 Then mvClassFields(ContactSuppressionFields.Source).Value = pSource
        If pResponseChannel.Length > 0 Then mvClassFields(ContactSuppressionFields.ResponseChannel).Value = pResponseChannel
        Save()
      End If
    End Sub

    Public Sub DeleteSuppression(ByVal pContactNumber As Integer, ByVal pSuppression As String)
      CheckClassFields()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(ContactSuppressionFields.ContactNumber).Name, pContactNumber)
      vWhereFields.Add(mvClassFields(ContactSuppressionFields.MailingSuppression).Name, pSuppression)
      DeleteByForeignKeys(vWhereFields)
    End Sub

    Public Sub Cancel()
      mvClassFields(ContactSuppressionFields.ValidTo).Value = TodaysDate()
      If CDate(ValidFrom) > CDate(ValidTo) Then
        'ValidFrom can not be after ValidTo
        'So set ValidFrom to be the same as the valid to date
        mvClassFields(ContactSuppressionFields.ValidFrom).Value = TodaysDate()
      End If
    End Sub

    Public Function HasSuppressions(ByVal pNumber As Integer, ByVal pSuppressions As String, ByRef pDescriptions As String) As Boolean
      'pSuppressions = comma separated list
      'pDescriptions = returned list of descriptions, each one on a new line
      Dim vRS As CDBRecordSet
      Dim vSQL As String
      pDescriptions = ""
      If pSuppressions.Length > 0 Then
        CheckClassFields()
        vSQL = "SELECT mailing_suppression_desc FROM " & DatabaseTableName & " cs, mailing_suppressions ms WHERE cs." & mvClassFields(ContactSuppressionFields.ContactNumber).Name & " = " & pNumber
        vSQL = vSQL & " AND cs.mailing_suppression IN ('" & pSuppressions.Replace(",", "','") & "') AND cs.valid_from " & mvEnv.Connection.SQLLiteral(" <= ", CDBField.FieldTypes.cftDate, (TodaysDate()))
        vSQL = vSQL & " AND valid_to " & mvEnv.Connection.SQLLiteral(">=", CDBField.FieldTypes.cftDate, (TodaysDate())) & " AND ms.mailing_suppression = cs.mailing_suppression"
        vRS = mvEnv.Connection.GetRecordSet(vSQL)
        While vRS.Fetch
          If pDescriptions.Length > 0 Then
            pDescriptions = pDescriptions & vbCrLf & vRS.Fields(1).Value
          Else
            pDescriptions = vRS.Fields(1).Value
          End If
        End While
        vRS.CloseRecordSet()
      End If
      Return pDescriptions.Length > 0
    End Function

    Public WriteOnly Property LineValue(ByVal pAttributeName As String) As String
      Set(ByVal Value As String)
        mvClassFields.ItemValue(pAttributeName) = Value
      End Set
    End Property

    Public Function LineDataType(ByVal pAttributeName As String) As CDBField.FieldTypes
      Return mvClassFields.ItemDataType(pAttributeName)
    End Function

    Public Overloads Sub CopyValues(ByVal pRecord As CARERecord, ByVal pNewContactNumber As Integer)
      MyBase.CopyValues(pRecord)
      mvClassFields(ContactSuppressionFields.ContactNumber).IntegerValue = pNewContactNumber
    End Sub

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      ValidateHistoricSuppression()
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer, pForceAmendmentHistory As Boolean)
      ValidateHistoricSuppression()
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber, pForceAmendmentHistory)
    End Sub

    Private Sub ValidateHistoricSuppression()
      If mvClassFields("mailing_suppression").ValueChanged Then
        Dim vValidator As New AllowHistoricSuppressionValidator(mvEnv, Me.MailingSuppression)
        If Not vValidator.Validate() Then
          RaiseError(DataAccessErrors.daeRecordIsHistoric, "Suppression")
        End If
      End If
    End Sub

#End Region

  End Class
End Namespace
