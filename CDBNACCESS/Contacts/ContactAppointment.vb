Namespace Access

  Partial Public Class ContactAppointment
    Inherits CARERecord
    Implements IRecordCreate

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum ContactAppointmentFields
      AllFields = 0
      ContactNumber
      StartDate
      EndDate
      RecordType
      UniqueId
      Description
      TimeStatus
      OutlookId
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("start_date", CDBField.FieldTypes.cftTime)
        .Add("end_date", CDBField.FieldTypes.cftTime)
        .Add("record_type")
        .Add("unique_id", CDBField.FieldTypes.cftLong)
        .Add("description")
        .Add("time_status")
        .Add("outlook_id", CDBField.FieldTypes.cftCharacter)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ca"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "contact_appointments"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(ContactAppointmentFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property StartDate() As String
      Get
        Return mvClassFields(ContactAppointmentFields.StartDate).Value
      End Get
    End Property
    Public ReadOnly Property EndDate() As String
      Get
        Return mvClassFields(ContactAppointmentFields.EndDate).Value
      End Get
    End Property
    Public ReadOnly Property RecordType() As String
      Get
        Return mvClassFields(ContactAppointmentFields.RecordType).Value
      End Get
    End Property
    Public ReadOnly Property UniqueId() As Integer
      Get
        Return mvClassFields(ContactAppointmentFields.UniqueId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Description() As String
      Get
        Return mvClassFields(ContactAppointmentFields.Description).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ContactAppointmentFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ContactAppointmentFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property TimeStatusCode() As String
      Get
        Return mvClassFields(ContactAppointmentFields.TimeStatus).Value
      End Get
    End Property
    Public ReadOnly Property OutlookId() As String
      Get
        Return mvClassFields(ContactAppointmentFields.OutlookId).Value
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Public Enum ContactAppointmentTypes
      catNone
      catPersonnel
      catPersonnelTask
      catEvent
      catServiceBooking
      catAction
      catMeeting
      catOther
      catExternal             'External appointment Oracle Calendar or Outlook
    End Enum

    Public Enum ContactAppointmentTimeStatuses
      catsNone
      catsBusy
      catsFree
    End Enum

    Public Property AppointmentTimeStatus() As ContactAppointmentTimeStatuses
      Get
        Select Case TimeStatusCode
          Case "B"
            Return ContactAppointmentTimeStatuses.catsBusy
          Case "F"
            Return ContactAppointmentTimeStatuses.catsFree
          Case Else
            Return ContactAppointmentTimeStatuses.catsNone
        End Select
      End Get
      Set(ByVal Value As ContactAppointmentTimeStatuses)
        mvClassFields.Item(ContactAppointmentFields.TimeStatus).Value = GetTimeStatusCode(Value)
      End Set
    End Property

    Public Shared Function GetTimeStatusCode(ByVal pTimeStatus As ContactAppointmentTimeStatuses) As String
      Select Case pTimeStatus
        Case ContactAppointmentTimeStatuses.catsFree
          Return "F"
        Case Else
          Return "B"
      End Select
    End Function

    Public Property AppointmentType() As ContactAppointmentTypes
      Get
        Select Case RecordType
          Case "A"
            Return ContactAppointmentTypes.catAction
          Case "E"
            Return ContactAppointmentTypes.catEvent
          Case "M"
            Return ContactAppointmentTypes.catMeeting
          Case "P"
            Return ContactAppointmentTypes.catPersonnel
          Case "T"
            Return ContactAppointmentTypes.catPersonnelTask
          Case "S"
            Return ContactAppointmentTypes.catServiceBooking
          Case Else
            Return ContactAppointmentTypes.catOther
        End Select
      End Get
      Set(ByVal value As ContactAppointmentTypes)
        mvClassFields(ContactAppointmentFields.RecordType).Value = GetAppointmentTypeCode(value)
      End Set
    End Property

    Public Shared Function GetAppointmentTypeCode(ByVal pAppointmentType As ContactAppointmentTypes) As String
      Select Case pAppointmentType
        Case ContactAppointmentTypes.catAction
          Return "A"
        Case ContactAppointmentTypes.catEvent
          Return "E"
        Case ContactAppointmentTypes.catMeeting
          Return "M"
        Case ContactAppointmentTypes.catPersonnel
          Return "P"
        Case ContactAppointmentTypes.catPersonnelTask
          Return "T"
        Case ContactAppointmentTypes.catServiceBooking
          Return "S"
        Case Else
          Return "O"
      End Select
    End Function

    Public Overloads Sub Init(ByVal pContactNumber As Integer, ByVal pRecordType As String, ByVal pUniqueID As Integer)
      CheckClassFields()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(ContactAppointmentFields.ContactNumber).Name, pContactNumber)
      vWhereFields.Add(mvClassFields(ContactAppointmentFields.UniqueId).Name, pUniqueID)
      vWhereFields.Add(mvClassFields(ContactAppointmentFields.RecordType).Name, pRecordType)
      MyBase.InitWithPrimaryKey(vWhereFields)
    End Sub
    Public Overloads Sub InitFromOutlookId(ByVal pOutlookId As String)
      CheckClassFields()
      Dim vWhereFields As New CDBFields()
      '  vWhereFields.Add(mvClassFields(ContactAppointmentFields.ContactNumber).Name, pContactNumber)
      '  vWhereFields.Add(mvClassFields(ContactAppointmentFields.StartDate).Name, CDBField.FieldTypes.cftTime, pStart)
      vWhereFields.Add(mvClassFields(ContactAppointmentFields.OutlookId).Name, CDBField.FieldTypes.cftCharacter, pOutlookId)
      MyBase.InitWithPrimaryKey(vWhereFields)
    End Sub
    Public Overloads Sub InitFromContactAndTime(ByVal pContactNumber As Integer, ByVal pStart As String, ByVal pEnd As String)
      CheckClassFields()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(ContactAppointmentFields.ContactNumber).Name, pContactNumber)
      vWhereFields.Add(mvClassFields(ContactAppointmentFields.StartDate).Name, CDBField.FieldTypes.cftTime, pStart)
      vWhereFields.Add(mvClassFields(ContactAppointmentFields.EndDate).Name, CDBField.FieldTypes.cftTime, pEnd)
      MyBase.InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Overloads Sub Create(ByVal pContactNumber As Integer, ByVal pStartDate As Date, ByVal pEndDate As Date, ByVal pUniqueID As Integer, ByVal pRecordType As String, ByVal pDescription As String, ByVal pTimeStatus As ContactAppointmentTimeStatuses)
      CheckClassFields()
      mvClassFields(ContactAppointmentFields.ContactNumber).IntegerValue = pContactNumber
      mvClassFields(ContactAppointmentFields.StartDate).Value = pStartDate.ToString(CAREDateTimeFormat)
      mvClassFields(ContactAppointmentFields.EndDate).Value = pEndDate.ToString(CAREDateTimeFormat)
      mvClassFields(ContactAppointmentFields.UniqueId).LongValue = pUniqueID
      mvClassFields(ContactAppointmentFields.RecordType).Value = pRecordType
      mvClassFields(ContactAppointmentFields.Description).Value = pDescription
      mvClassFields(ContactAppointmentFields.TimeStatus).Value = GetTimeStatusCode(pTimeStatus)
    End Sub

    Public Function GetExistingActionAppointments(ByVal pParams As CDBParameters) As List(Of CARERecord)
      Dim vAppointments As New List(Of CARERecord)
      Dim vAction As New Action(mvEnv)
      vAction.Init(pParams("ActionNumber").LongValue)
      If vAction.Existing AndAlso vAction.ActionStatus <> Action.ActionStatuses.astProForma AndAlso vAction.StartDate <> Nothing Then
        Dim vLinks As List(Of IActionLink) = vAction.Links
        For Each vLink As ActionLink In vLinks
          If vLink.LinkType = IActionLink.ActionLinkTypes.altActioner OrElse _
             vLink.LinkType = IActionLink.ActionLinkTypes.altRelated AndAlso mvEnv.GetConfigOption("ac_related_appointments") _
             AndAlso (vLink.ObjectLinkType = IActionLink.ActionLinkObjectTypes.alotContact OrElse vLink.ObjectLinkType = IActionLink.ActionLinkObjectTypes.alotOrganisation) Then
            Dim vAppointment As New ContactAppointment(mvEnv)
            Dim vTimeStatus As ContactAppointmentTimeStatuses = ContactAppointmentTimeStatuses.catsBusy
            If vLink.LinkType = IActionLink.ActionLinkTypes.altRelated OrElse _
               vAction.ActionStatus = Action.ActionStatuses.astCancelled Then vTimeStatus = ContactAppointmentTimeStatuses.catsFree
            vAppointment.Create(vLink.ContactNumber, vAction.StartDate, vAction.EndDate, vAction.ActionNumber, "A", vAction.ActionDesc, vTimeStatus)
            vAppointments.Add(vAppointment)
          End If
        Next
      End If
      Return vAppointments
    End Function
    Public Function GetNewActionAppointments(ByVal pParams As CDBParameters) As List(Of CARERecord)
      Dim vAppointments As New List(Of CARERecord)
      Dim vAction As New Action(mvEnv)
      If pParams.Exists("ActionNumber") = True AndAlso pParams.ParameterExists("NewAction").Bool = False Then
        vAction.Init(pParams("ActionNumber").LongValue)
        If vAction.Existing AndAlso vAction.ActionStatus <> Action.ActionStatuses.astProForma AndAlso vAction.ActionStatus <> Action.ActionStatuses.astCancelled Then
          If pParams.Exists("ScheduledOn") Then vAction.SetScheduled(pParams("ScheduledOn").Value)
          If vAction.ScheduledOn.Length > 0 Then
            If pParams.Exists("DurationDays") Or pParams.Exists("DurationHours") Or pParams.Exists("DurationMinutes") Then
              vAction.SetDuration(pParams.OptionalValue("DurationDays", 0), pParams.OptionalValue("DurationHours", 0), pParams.OptionalValue("DurationMinutes", 0))
            End If
            Dim vCancelled As Boolean
            If pParams.HasValue("CancelledOn") Then vCancelled = True
            Dim vLinks As List(Of IActionLink) = vAction.Links
            For Each vLink As ActionLink In vLinks
              If (vLink.LinkType = IActionLink.ActionLinkTypes.altActioner OrElse _
                 vLink.LinkType = IActionLink.ActionLinkTypes.altRelated AndAlso mvEnv.GetConfigOption("ac_related_appointments")) _
              AndAlso (vLink.ObjectLinkType = IActionLink.ActionLinkObjectTypes.alotContact OrElse vLink.ObjectLinkType = IActionLink.ActionLinkObjectTypes.alotOrganisation) Then
                Dim vAppointment As New ContactAppointment(mvEnv)
                Dim vTimeStatus As ContactAppointmentTimeStatuses = ContactAppointmentTimeStatuses.catsBusy
                If vLink.LinkType = IActionLink.ActionLinkTypes.altRelated OrElse _
                   vCancelled = True Then vTimeStatus = ContactAppointmentTimeStatuses.catsFree
                Dim vDesc As String = vAction.ActionDesc
                If pParams.HasValue("ActionDesc") Then vDesc = pParams("ActionDesc").Value
                vAppointment.Create(vLink.ContactNumber, vAction.StartDate, vAction.EndDate, vAction.ActionNumber, GetAppointmentTypeCode(ContactAppointmentTypes.catAction), vDesc, vTimeStatus)
                vAppointments.Add(vAppointment)
              End If
            Next
          End If
        End If
      Else
        vAction.Init()
        vAction.Create(pParams)
        If vAction.ActionStatus <> Action.ActionStatuses.astProForma AndAlso vAction.ActionStatus <> Action.ActionStatuses.astCancelled Then
          If pParams.Exists("ScheduledOn") Then vAction.SetScheduled(pParams("ScheduledOn").Value)
          If vAction.ScheduledOn.Length > 0 Then
            If pParams.Exists("DurationDays") Or pParams.Exists("DurationHours") Or pParams.Exists("DurationMinutes") Then
              vAction.SetDuration(pParams.OptionalValue("DurationDays", 0), pParams.OptionalValue("DurationHours", 0), pParams.OptionalValue("DurationMinutes", 0))
            End If
            Dim vCancelled As Boolean
            If pParams.HasValue("CancelledOn") Then vCancelled = True
            If pParams.HasValue("ContactNumber") AndAlso mvEnv.GetConfigOption("ac_related_appointments") Then
              Dim vAppointment As New ContactAppointment(mvEnv)
              vAppointment.Create(pParams("ContactNumber").IntegerValue, vAction.StartDate, vAction.EndDate, vAction.ActionNumber, GetAppointmentTypeCode(ContactAppointmentTypes.catAction), vAction.ActionDesc, ContactAppointmentTimeStatuses.catsFree)
              vAppointments.Add(vAppointment)
            End If
          End If
        End If
      End If
      Return vAppointments
    End Function

    Public Function GetExistingEventBookingAppointments(ByVal pParams As CDBParameters) As List(Of CARERecord)
      CheckClassFields()
      Dim vAppointments As New List(Of CARERecord)
      If mvEnv.GetConfigOption("ev_delegate_calendar", True) Then
        Dim vWhereFields As New CDBFields()
        Dim vSQL As New SQLStatement(mvEnv.Connection, "session_number", "session_bookings", New CDBField("booking_number", pParams("BookingNumber").Value))
        vWhereFields.Add(mvClassFields(ContactAppointmentFields.UniqueId).Name, CDBField.FieldTypes.cftInteger, vSQL.SQL, CDBField.FieldWhereOperators.fwoIn)
        vWhereFields.Add(mvClassFields(ContactAppointmentFields.RecordType).Name, GetAppointmentTypeCode(ContactAppointmentTypes.catEvent))
        Dim vList As List(Of ContactAppointment) = GetList(Of ContactAppointment)(Me, vWhereFields)
        For Each vAppointment As ContactAppointment In vList
          vAppointments.Add(vAppointment)
        Next
      End If
      Return vAppointments
    End Function
    Public Function GetExistingEventDelegateAppointments(ByVal pParams As CDBParameters) As List(Of CARERecord)
      CheckClassFields()
      Dim vAppointments As New List(Of CARERecord)
      If mvEnv.GetConfigOption("ev_delegate_calendar", True) Then
        Dim vWhereFields As New CDBFields()
        Dim vContactSQL As New SQLStatement(mvEnv.Connection, "contact_number", "delegates", New CDBField("event_delegate_number", pParams("EventDelegateNumber").Value))
        vWhereFields.Add(mvClassFields(ContactAppointmentFields.ContactNumber).Name, CDBField.FieldTypes.cftInteger, vContactSQL.SQL, CDBField.FieldWhereOperators.fwoIn)

        Dim vSQL As New SQLStatement(mvEnv.Connection, "session_number", "session_bookings", New CDBField("booking_number", pParams("BookingNumber").Value))
        vWhereFields.Add(mvClassFields(ContactAppointmentFields.UniqueId).Name, CDBField.FieldTypes.cftInteger, vSQL.SQL, CDBField.FieldWhereOperators.fwoIn)
        vWhereFields.Add(mvClassFields(ContactAppointmentFields.RecordType).Name, GetAppointmentTypeCode(ContactAppointmentTypes.catEvent))
        Dim vList As List(Of ContactAppointment) = GetList(Of ContactAppointment)(Me, vWhereFields)
        For Each vAppointment As ContactAppointment In vList
          vAppointments.Add(vAppointment)
        Next
      End If
      Return vAppointments
    End Function

    Public Function GetNewEventBookingAppointments(ByVal pParams As CDBParameters) As List(Of CARERecord)
      Dim vAppointments As New List(Of CARERecord)
      If mvEnv.GetConfigOption("ev_delegate_calendar", True) Then
        Dim vFields As String = "s.start_date,start_time,end_date,end_time,s.event_number,s.session_number,session_desc,event_desc"
        Dim vWhereFields As New CDBFields()
        Dim vAnsiJoins As New AnsiJoins()
        If pParams.HasValue("SessionNumbers") Then
          vWhereFields.Add("session_number", pParams("SessionNumbers").Value, CDBField.FieldWhereOperators.fwoIn)
        ElseIf pParams.HasValue("BookingNumber") Then
          vWhereFields.Add("sb.booking_number", pParams("BookingNumber").Value)
          vAnsiJoins.Add("session_bookings sb", "sb.session_number", "s.session_number")
        Else
          vWhereFields.Add("os.option_number", pParams("OptionNumber").Value)
          vAnsiJoins.Add("option_sessions os", "os.session_number", "s.session_number")
        End If
        'Ignore the dummy session for multi-session events
        vWhereFields.Add("session_type", "0", CDBField.FieldWhereOperators.fwoNotEqual Or CDBField.FieldWhereOperators.fwoOpenBracket)
        vWhereFields.Add("multi_session", "N", CDBField.FieldWhereOperators.fwoEqual Or CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket)
        vAnsiJoins.Add("events e", "e.event_number", "s.event_number")
        Dim vContactNumber As Integer = pParams("ContactNumber").LongValue
        Dim vSQL As New SQLStatement(mvEnv.Connection, vFields, "sessions s", vWhereFields, "", vAnsiJoins)
        Dim vRS As CDBRecordSet = vSQL.GetRecordSet
        While vRS.Fetch
          Dim vAppointment As New ContactAppointment(mvEnv)
          Dim vStartDate As Date = CDate(String.Format("{0} {1}", vRS.Fields(1).Value, vRS.Fields(2).Value))
          Dim vEndDate As Date = CDate(String.Format("{0} {1}", vRS.Fields(3).Value, vRS.Fields(4).Value))
          Dim vEventNumber As Integer = vRS.Fields(5).LongValue
          Dim vSessionNumber As Integer = vRS.Fields(6).LongValue
          Dim vDesc As String
          If vSessionNumber = vEventNumber * 10000 Then
            vDesc = vRS.Fields(8).Value
          Else
            vDesc = String.Format("{0} : {1}", vRS.Fields(8).Value, vRS.Fields(7).Value)
          End If
          vAppointment.Create(vContactNumber, vStartDate, vEndDate, vSessionNumber, GetAppointmentTypeCode(ContactAppointmentTypes.catEvent), vDesc, ContactAppointmentTimeStatuses.catsBusy)
          vAppointments.Add(vAppointment)
        End While
        vRS.CloseRecordSet()
      End If
      Return vAppointments
    End Function

    Public Sub CreateForExistingActionLink(ByVal pParams As CDBParameters)
      CreateForNewActionLink(pParams)
    End Sub
    Public Sub CreateForExistingEventResource(ByVal pParams As CDBParameters)
      CheckClassFields()
      Dim vEventResource As New EventResource(mvEnv)
      vEventResource.Init(pParams("ResourceNumber").LongValue, pParams("SessionNumber").LongValue)
      If vEventResource.Existing Then
        Dim vResource As New InternalResource(mvEnv)
        If vEventResource.ResourceType = EventResource.ResourceTypes.rtInternal AndAlso vEventResource.Allocated Then
          vResource.Init(pParams("ResourceNumber").LongValue)
          If vResource.ResourceContactNumber > 0 Then
            Init(vResource.ResourceContactNumber, "O", vEventResource.SessionNumber)
          End If
        End If
      End If
    End Sub
    Public Sub CreateForExistingEventPersonnel(ByVal pParams As CDBParameters)
      CheckClassFields()
      Dim vPersonnel As New EventPersonnel(mvEnv)
      vPersonnel.Init(pParams("EventPersonnelNumber").LongValue)
      If vPersonnel.Existing Then
        Init(vPersonnel.ContactNumber, "P", vPersonnel.SessionNumber)
      End If
    End Sub
    Public Sub CreateForExistingEventPersonnelTask(ByVal pParams As CDBParameters)
      CheckClassFields()
      Dim vTask As New EventPersonnelTask(mvEnv)
      vTask.Init(pParams("EventPersonnelTaskNumber").LongValue)
      If vTask.Existing Then
        Dim vPersonnel As New EventPersonnel(mvEnv)
        vPersonnel.Init(vTask.EventPersonnelNumber)
        If vPersonnel.Existing Then
          Init(vPersonnel.ContactNumber, "T", vTask.EventPersonnelTaskNumber)
        End If
      End If
    End Sub

    Public Sub CreateForNewActionLink(ByVal pParams As CDBParameters)
      CheckClassFields()
      If pParams("ActionLinkType").Value = ActionLink.LinkTypeCode(IActionLink.ActionLinkTypes.altActioner) OrElse _
         (pParams("ActionLinkType").Value = ActionLink.LinkTypeCode(IActionLink.ActionLinkTypes.altRelated) AndAlso mvEnv.GetConfigOption("ac_related_appointments")) Then
        Dim vAction As New Action(mvEnv)
        vAction.Init(pParams("ActionNumber").LongValue)
        Dim vCreateLink As Boolean = (vAction.Existing AndAlso vAction.StartDate <> Nothing)
        If vCreateLink Then
          If pParams.ContainsKey("DocumentNumber") Then vCreateLink = False 'Linking to a Document
          If pParams.ContainsKey("ExamCentreId") Then vCreateLink = False 'Linking to an Exam Centre
          If pParams.ContainsKey("ContactPositionNumber") Then vCreateLink = False 'Linking to a Contact Position
        End If
        If vCreateLink Then
          mvClassFields(ContactAppointmentFields.ContactNumber).IntegerValue = pParams("ContactNumber").LongValue
          mvClassFields(ContactAppointmentFields.StartDate).Value = vAction.StartDate.ToString(CAREDateTimeFormat)
          mvClassFields(ContactAppointmentFields.EndDate).Value = vAction.EndDate.ToString(CAREDateTimeFormat)
          mvClassFields(ContactAppointmentFields.UniqueId).LongValue = vAction.ActionNumber
          mvClassFields(ContactAppointmentFields.RecordType).Value = "A"
          mvClassFields(ContactAppointmentFields.Description).Value = vAction.ActionDesc
          Dim vTimeStatus As ContactAppointmentTimeStatuses
          If pParams("ActionLinkType").Value = ActionLink.LinkTypeCode(IActionLink.ActionLinkTypes.altRelated) OrElse _
            vAction.ActionStatus = Action.ActionStatuses.astCancelled Then
            vTimeStatus = ContactAppointmentTimeStatuses.catsFree
          Else
            vTimeStatus = ContactAppointmentTimeStatuses.catsBusy
          End If
          mvClassFields(ContactAppointmentFields.TimeStatus).Value = GetTimeStatusCode(vTimeStatus)
        End If
      End If
    End Sub
    Public Sub CreateForNewEventResource(ByVal pParams As CDBParameters)
      CheckClassFields()
      If pParams("ResourceType").Value = "I" AndAlso pParams("Allocated").Bool Then
        Dim vResource As New InternalResource(mvEnv)
        vResource.Init(pParams("ResourceNumber").LongValue)
        If vResource.ResourceContactNumber > 0 Then
          Dim vSession As New EventSession()
          vSession.Init(mvEnv, pParams("SessionNumber").LongValue)
          If vSession.Existing Then
            Dim vEvent As New CDBEvent(mvEnv)
            vEvent.Init(vSession.EventNumber)
            If vEvent.Existing Then
              mvClassFields(ContactAppointmentFields.ContactNumber).IntegerValue = vResource.ResourceContactNumber
              mvClassFields(ContactAppointmentFields.StartDate).Value = String.Format("{0} {1}", vSession.StartDate, vSession.StartTime)
              mvClassFields(ContactAppointmentFields.EndDate).Value = String.Format("{0} {1}", vSession.EndDate, vSession.EndTime)
              mvClassFields(ContactAppointmentFields.UniqueId).LongValue = vSession.SessionNumber
              mvClassFields(ContactAppointmentFields.RecordType).Value = "O"
              If vSession.SessionNumber = vEvent.LowestSessionNumber Then
                mvClassFields(ContactAppointmentFields.Description).Value = vEvent.EventDesc
              Else
                mvClassFields(ContactAppointmentFields.Description).Value = String.Format("{0} : {1}", vEvent.EventDesc, vSession.SessionDesc)
              End If
              mvClassFields(ContactAppointmentFields.TimeStatus).Value = GetTimeStatusCode(ContactAppointmentTimeStatuses.catsBusy)
            End If
          End If
        End If
      End If
    End Sub
    Public Sub CreateForNewEventPersonnel(ByVal pParams As CDBParameters)
      CheckClassFields()
      Dim vStartDate As String = String.Format("{0} {1}", pParams("StartDate").Value, pParams("StartTime").Value)
      Dim vEndDate As String = String.Format("{0} {1}", pParams("EndDate").Value, pParams("EndTime").Value)
      If vStartDate.Length > 0 AndAlso vEndDate.Length > 0 Then
        Dim vSessionNumber As Integer
        If pParams.HasValue("EventPersonnelNumber") Then              'Update to existing
          Dim vPersonnel As New EventPersonnel(mvEnv)
          vPersonnel.Init(pParams("EventPersonnelNumber").LongValue)
          vSessionNumber = vPersonnel.SessionNumber
        Else
          vSessionNumber = pParams("SessionNumber").LongValue
        End If
        Dim vSession As New EventSession()
        vSession.Init(mvEnv, vSessionNumber)
        If vSession.Existing Then
          Dim vEvent As New CDBEvent(mvEnv)
          vEvent.Init(vSession.EventNumber)
          If vEvent.Existing Then
            mvClassFields(ContactAppointmentFields.ContactNumber).IntegerValue = pParams("ContactNumber").LongValue
            mvClassFields(ContactAppointmentFields.StartDate).Value = vStartDate
            mvClassFields(ContactAppointmentFields.EndDate).Value = vEndDate
            mvClassFields(ContactAppointmentFields.UniqueId).LongValue = vSession.SessionNumber
            mvClassFields(ContactAppointmentFields.RecordType).Value = "P"
            If vSession.SessionNumber = vEvent.LowestSessionNumber Then
              mvClassFields(ContactAppointmentFields.Description).Value = vEvent.EventDesc
            Else
              mvClassFields(ContactAppointmentFields.Description).Value = String.Format("{0} : {1}", vEvent.EventDesc, vSession.SessionDesc)
            End If
            mvClassFields(ContactAppointmentFields.TimeStatus).Value = GetTimeStatusCode(ContactAppointmentTimeStatuses.catsBusy)
          End If
        End If
      End If
    End Sub
    Public Sub CreateForNewEventPersonnelTask(ByVal pParams As CDBParameters)
      CheckClassFields()
      If pParams.HasValue("StartDate") AndAlso pParams.HasValue("StartTime") AndAlso pParams.HasValue("EndDate") AndAlso pParams.HasValue("EndTime") Then
        Dim vStartDate As String = String.Format("{0} {1}", pParams("StartDate").Value, pParams("StartTime").Value)
        Dim vEndDate As String = String.Format("{0} {1}", pParams("EndDate").Value, pParams("EndTime").Value)
        Dim vEvent As New CDBEvent(mvEnv)
        vEvent.Init(pParams("EventNumber").LongValue)
        If vEvent.Existing Then
          Dim vContactNumber As Integer
          If pParams.HasValue("EventPersonnelNumber") Then
            Dim vPersonnel As New EventPersonnel(mvEnv)
            vPersonnel.Init(pParams("EventPersonnelNumber").LongValue)
            If vPersonnel.Existing Then vContactNumber = vPersonnel.ContactNumber
          ElseIf pParams.HasValue("ContactNumber") Then
            vContactNumber = pParams("ContactNumber").LongValue
          End If
          If vContactNumber > 0 Then
            Dim vPersonnelTask As New EventPersonnelTask(mvEnv)
            vPersonnelTask.Create(pParams)
            mvClassFields(ContactAppointmentFields.ContactNumber).IntegerValue = vContactNumber
            mvClassFields(ContactAppointmentFields.StartDate).Value = vStartDate
            mvClassFields(ContactAppointmentFields.EndDate).Value = vEndDate
            mvClassFields(ContactAppointmentFields.RecordType).Value = "T"
            mvClassFields(ContactAppointmentFields.Description).Value = String.Format("{0} : {1}", vEvent.EventDesc, vPersonnelTask.PersonnelTaskDesc)
            mvClassFields(ContactAppointmentFields.TimeStatus).Value = GetTimeStatusCode(ContactAppointmentTimeStatuses.catsBusy)
          End If
        End If
      End If
    End Sub

    Public Sub CreateForNewMeetingLink(ByVal pParams As CDBParameters)
      Dim vMeeting As New Meeting(mvEnv)
      vMeeting.Init(pParams("MeetingNumber").IntegerValue)
      CreateForNewMeetingLink(vMeeting, pParams("ContactNumber").IntegerValue)
    End Sub
    Public Sub CreateForNewMeetingLink(ByVal pMeeting As Meeting, ByVal pContactNumber As Integer)
      CheckClassFields()
      If pMeeting.Existing Then
        Dim vStartDate As DateTime = DateTime.Parse(pMeeting.MeetingDate)
        Dim vEndDate As DateTime = vStartDate
        If pMeeting.DurationDays > 0 Then
          vEndDate = vEndDate.AddDays(pMeeting.DurationDays)
        ElseIf pMeeting.DurationHours > 0 Then
          vEndDate = vEndDate.AddHours(pMeeting.DurationHours)
        Else
          vEndDate = vEndDate.AddMinutes(pMeeting.DurationMinutes)
        End If
        With mvClassFields
          .Item(ContactAppointmentFields.ContactNumber).IntegerValue = pContactNumber
          .Item(ContactAppointmentFields.StartDate).Value = vStartDate.ToString(CAREDateTimeFormat)
          .Item(ContactAppointmentFields.EndDate).Value = vEndDate.ToString(CAREDateTimeFormat)
          .Item(ContactAppointmentFields.RecordType).Value = GetAppointmentTypeCode(ContactAppointmentTypes.catMeeting)
          .Item(ContactAppointmentFields.Description).Value = pMeeting.MeetingDesc
          .Item(ContactAppointmentFields.UniqueId).IntegerValue = pMeeting.MeetingNumber
          .Item(ContactAppointmentFields.TimeStatus).Value = GetTimeStatusCode(ContactAppointmentTimeStatuses.catsBusy)
        End With
      End If
    End Sub

    Public Sub CreateForExistingMeetingLink(ByVal pParams As CDBParameters)
      Init(pParams("ContactNumber").IntegerValue, GetAppointmentTypeCode(ContactAppointmentTypes.catMeeting), pParams("MeetingNumber").IntegerValue)
    End Sub

    Public Function GetExistingMeetingAppointments(ByVal pParams As CDBParameters) As List(Of CARERecord)
      Dim vAppointments As New List(Of CARERecord)
      Dim vWhereFields As New CDBFields(New CDBField("unique_id", pParams("MeetingNumber").IntegerValue))
      vWhereFields.Add("record_type", GetAppointmentTypeCode(ContactAppointmentTypes.catMeeting))
      Dim vList As List(Of ContactAppointment) = GetList(Of ContactAppointment)(Me, vWhereFields)
      For Each vAppointment As ContactAppointment In vList
        vAppointments.Add(vAppointment)
      Next
      Return vAppointments
    End Function

    Public Function GetNewMeetingAppointments(ByVal pParams As CDBParameters) As List(Of CARERecord)
      Dim vAppointments As New List(Of CARERecord)
      Dim vAppointment As ContactAppointment
      Dim vMeeting As New Meeting(mvEnv)
      vMeeting.Init(pParams("MeetingNumber").IntegerValue)
      Dim vStartDate As DateTime = DateTime.Parse(vMeeting.MeetingDate)
      If pParams.HasValue("MeetingDate") Then vStartDate = DateTime.Parse(pParams("MeetingDate").Value)
      Dim vEndDate As Nullable(Of DateTime)
      If pParams.ParameterExists("DurationDays").IntegerValue > 0 Then
        vEndDate = vStartDate.AddDays(pParams("DurationDays").IntegerValue)
      ElseIf pParams.ParameterExists("DurationHours").IntegerValue > 0 Then
        vEndDate = vStartDate.AddHours(pParams("DurationHours").IntegerValue)
      ElseIf pParams.ParameterExists("DurationMinutes").IntegerValue > 0 Then
        vEndDate = vStartDate.AddMinutes(pParams("DurationMinutes").IntegerValue)
      End If
      If vEndDate.HasValue = False Then
        vEndDate = vStartDate
        With vMeeting
          If .DurationDays > 0 Then
            vEndDate = vStartDate.AddDays(.DurationDays)
          ElseIf .DurationHours > 0 Then
            vEndDate = vStartDate.AddHours(.DurationHours)
          ElseIf .DurationMinutes > 0 Then
            vEndDate = vStartDate.AddMinutes(.DurationMinutes)
          End If
        End With
      End If
      For Each vLink As MeetingLink In vMeeting.Links
        vAppointment = New ContactAppointment(mvEnv)
        vAppointment.Create(vLink.ContactNumber, vStartDate, vEndDate.Value, vMeeting.MeetingNumber, GetAppointmentTypeCode(ContactAppointmentTypes.catMeeting), pParams.OptionalValue("MeetingDesc", vMeeting.MeetingDesc), ContactAppointment.ContactAppointmentTimeStatuses.catsBusy)
        vAppointments.Add(vAppointment)
      Next
      Return vAppointments
    End Function

    Public Function CreateInstance(ByVal pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New ContactAppointment(pEnv)
    End Function
#End Region
  End Class
End Namespace
