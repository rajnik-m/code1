Imports System.Linq
Namespace Access

  Public Class Contact
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Friend Enum ContactFields
      AllFields = 0
      ContactNumber
      Title
      Forenames
      Initials
      Surname
      Honorifics
      Salutation
      LabelName
      PreferredForename
      Sex
      Source
      SourceDate
      NameGatheringSource
      DateOfBirth
      Status
      StatusDate
      StatusReason
      Department
      AddressNumber
      DiallingCode
      StdCode
      Telephone
      ExDirectory
      Notes
      ContactVatCategory
      ContactType
      DobEstimated
      ContactGroup
      OwnershipGroup
      NiNumber
      PrefixHonorifics
      SurnamePrefix
      InformalSalutation
      LabelNameFormatCode
      ResponseChannel
      ContactReference
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("title")
        .Add("forenames", CDBField.FieldTypes.cftUnicode)
        .Add("initials", CDBField.FieldTypes.cftUnicode)
        .Add("surname", CDBField.FieldTypes.cftUnicode)
        .Add("honorifics")
        .Add("salutation", CDBField.FieldTypes.cftUnicode)
        .Add("label_name", CDBField.FieldTypes.cftUnicode)
        .Add("preferred_forename", CDBField.FieldTypes.cftUnicode)
        .Add("sex")
        .Add("source")
        .Add("source_date", CDBField.FieldTypes.cftDate)
        .Add("name_gathering_source")
        .Add("date_of_birth", CDBField.FieldTypes.cftDate)
        .Add("status")
        .Add("status_date", CDBField.FieldTypes.cftDate)
        .Add("status_reason", CDBField.FieldTypes.cftMemo)
        .Add("department")
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("dialling_code")
        .Add("std_code")
        .Add("telephone")
        .Add("ex_directory")
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("contact_vat_category")
        .Add("contact_type")
        .Add("dob_estimated")
        .Add("contact_group")
        .Add("ownership_group")
        .Add("ni_number")
        .Add("prefix_honorifics")
        .Add("surname_prefix")
        .Add("informal_salutation", CDBField.FieldTypes.cftUnicode)
        .Add("label_name_format_code")
        .Add("response_channel")
        .Add("contact_reference")

        .Item(ContactFields.ContactNumber).PrimaryKey = True
        .Item(ContactFields.AddressNumber).PrefixRequired = True
        .SetControlNumberField(ContactFields.ContactNumber, "C")
        .Item(ContactFields.LabelNameFormatCode).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLabelNameFormatCode)
        .Item(ContactFields.ResponseChannel).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbResponseChannel)
        .Item(ContactFields.ContactReference).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbExamsQualsRegistrationGrading)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "c"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "contacts"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(ContactFields.ContactNumber).IntegerValue
      End Get
    End Property

    Public Sub SetContactNumber(ByVal pContactNumber As Integer)
      mvClassFields(ContactFields.ContactNumber).IntegerValue = pContactNumber
    End Sub

    Public Property TitleName() As String
      Get
        Return mvClassFields.Item(ContactFields.Title).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.Title).Value = Value
        mvLabelNameValid = False
        mvSalutationValid = False
        mvInformalSalutationValid = False
      End Set
    End Property
    Public Property Forenames() As String
      Get
        Return mvClassFields.Item(ContactFields.Forenames).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.Forenames).Value = Value
        mvLabelNameValid = False
        mvSalutationValid = False
        mvInformalSalutationValid = False
      End Set
    End Property
    Public Property Initials() As String
      Get
        Return mvClassFields.Item(ContactFields.Initials).Value
        'SDT 1/4/2003 Changed to just return the fields value. Doing the spacepadinitials was
        '             causing the display of different data to what has been stored in the database
        'Initials = SpacePadInitials(mvClassFields.Item(cfInitials).Value)
      End Get
      Set(ByVal Value As String)
        If mvMaxInitialsLength = 0 Then mvMaxInitialsLength = mvEnv.GetAttributeLength("contacts", "initials")
        mvClassFields.Item(ContactFields.Initials).Value = TruncateString(SpacePadInitials(Value), mvMaxInitialsLength)
        mvLabelNameValid = False
      End Set
    End Property

    Public Property Surname() As String
      Get
        Dim vSurname As String
        vSurname = mvClassFields.Item(ContactFields.Surname).Value
        If mvClassFields.Item(ContactFields.SurnamePrefix).Value.Length > 0 Then vSurname = mvClassFields.Item(ContactFields.SurnamePrefix).Value & " " & vSurname
        Return vSurname
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.Surname).Value = TruncateString(Value, 50)
        mvLabelNameValid = False
        mvSalutationValid = False
      End Set
    End Property

    Public ReadOnly Property SurnameWithoutPrefix() As String
      Get
        Return mvClassFields.Item(ContactFields.Surname).Value
      End Get
    End Property

    Public Property Honorifics() As String
      Get
        Return mvClassFields.Item(ContactFields.Honorifics).Value
      End Get
      Set(ByVal Value As String)
        If Not String.IsNullOrWhiteSpace(Value) AndAlso
          Value.Contains(",") AndAlso
          mvEnv.GetConfigOption("cd_validate_honorifics") Then
          Value = Value.Replace(",", " ") 'ValidateParameterList will turn the list into commas.
        End If
        mvClassFields.Item(ContactFields.Honorifics).Value = ValidateHonorifics(Value)
        mvLabelNameValid = False
        If Me.Honorifics <> Value AndAlso Not String.IsNullOrWhiteSpace(Value) Then
          Me.PrevalidationHonorifics = Value
          SetLabelName(Me.JuniorContact)
        End If
      End Set
    End Property
    Private Property PrevalidationHonorifics As String
      Get
        Return mvPreValidationHonorifics
      End Get
      Set(value As String)
        mvPreValidationHonorifics = value
      End Set
    End Property

    Private ReadOnly Property HonorificsValidated As Boolean
      Get
        Return Me.Honorifics <> Me.PrevalidationHonorifics AndAlso Not String.IsNullOrWhiteSpace(Me.PrevalidationHonorifics)
      End Get
    End Property
    ''' <summary>
    ''' Returns an ordered, space-delimited string of honorifics
    ''' </summary>
    ''' <param name="pValue">The un-ordered, space-delimited string of honorifics</param>
    ''' <returns>String</returns>
    ''' <remarks>The returned honorifics are ordered by the sequence number recorded against their record.
    ''' If an honorific is passed that is not recognised by the system, it will be removed from the list.
    ''' This method only processes data if the cd_validate_honorifics config is active
    ''' </remarks>
    Private Function ValidateHonorifics(pValue As String) As String
      Dim vValidOrderedHonorifics As String = pValue
      If mvEnv.GetConfigOption("cd_validate_honorifics") Then
        pValue = pValue.Replace(",", " ") 'ValidateParameterList will turn the list into commas.
        Dim vInputValues As New List(Of String)(pValue.SplitByUnquotedSpace())
        Dim vWhere As New CDBFields()
        For vIdx As Integer = 0 To vInputValues.Count - 1
          vWhere.Add(String.Format("honorific#{0}", vIdx), vInputValues(vIdx), CDBField.FieldWhereOperators.fwoOR)
        Next
        If vWhere.Count > 0 Then
          'Create a factory method to pass to the CARERecordFactory to generate the Honorifics table Maintenance record.  It is needed because the constructor is not a standard CARERecord constructor, and takes the TM table name in the constructor
          Dim vHonorificsInstantiator As Func(Of TableMaintenanceData) = Function() (New TableMaintenanceData(mvEnv, "honorifics"))
          'Get a list of honorifics from the factory.  Only values that are in the database will be returned
          Dim vActualHonorifics As List(Of TableMaintenanceData) =
          CARERecordFactory.SelectList(Of TableMaintenanceData)(mvEnv, vWhere, vHonorificsInstantiator).
          OrderBy(Function(vHonorific) vHonorific.FieldValueInteger("sequence_number")).
          ThenBy(Function(vHonorific) vHonorific.FieldValueString("honorific")).
          ToList()
          'Now transform the ordered list of objects into an order list of honorifics
          Dim vValidatedValues As New List(Of String)
          vActualHonorifics.ForEach(Sub(vHonorific) vValidatedValues.Add(vHonorific.FieldValueString("honorific")))
          vValidOrderedHonorifics = String.Join(" ", vValidatedValues)
        End If
      End If
      Return vValidOrderedHonorifics
    End Function

    Public Property Salutation() As String
      Get
        Dim vSalutation As String = mvClassFields.Item(ContactFields.Salutation).Value
        If vSalutation = "" Then
          If ContactType = ContactTypes.ctcOrganisation Then
            mvClassFields(ContactFields.Salutation).Value = mvEnv.GetConfig("default_org_salutation")
          Else
            If Sex = ContactSex.cscFemale Then
              vSalutation = mvEnv.GetConfig("default_female_salutation")
            ElseIf Sex = ContactSex.cscMale Then
              vSalutation = mvEnv.GetConfig("default_male_salutation")
            End If
            vSalutation = vSalutation.Replace("surname", SurnameCapitalisedPrefix)
            Dim vForenames As String = ""
            If Forenames.Length > 0 Then
              If Forenames.IndexOf(" ") > 0 Then
                vForenames = Left(Forenames, Forenames.IndexOf(" "))
              Else
                vForenames = Forenames
              End If
              vSalutation = vSalutation.Replace("forename", vForenames)
            End If
            If Len(vSalutation) = 0 Then vSalutation = mvEnv.GetConfig("default_salutation")
            If Len(vSalutation) = 0 Then vSalutation = Surname
            mvClassFields.Item(ContactFields.Salutation).Value = vSalutation
          End If
        End If
        Return mvClassFields(ContactFields.Salutation).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(ContactFields.Salutation).Value = value
        If value.Length > 0 Then
          mvSalutationValid = True
        Else
          mvSalutationValid = False
        End If
      End Set
    End Property
    Public Property LabelName() As String
      Get
        SetValid(ContactFields.LabelName)
        Return mvClassFields.Item(ContactFields.LabelName).Value
      End Get
      Set(ByVal Value As String)
        Dim vActualValue As String = TruncateString(Value, MaxLabelNameLength)
        Dim vFormatCode As String = If(String.IsNullOrWhiteSpace(Me.LabelNameFormatCode), Me.DefaultLabelNameFormatCode, Me.LabelNameFormatCode)
        If Me.HonorificsValidated AndAlso
            Not String.IsNullOrWhiteSpace(vFormatCode) AndAlso
            vFormatCode.Contains("honorifics") AndAlso
            vActualValue.Contains(Me.PrevalidationHonorifics) Then
          vActualValue = vActualValue.Replace(Me.PrevalidationHonorifics, Me.Honorifics)
        End If
        mvClassFields.Item(ContactFields.LabelName).Value = vActualValue
        If vActualValue.Length = 0 Then
          mvLabelNameValid = False
        Else
          mvLabelNameValid = True
        End If
      End Set
    End Property

    Public Shared ReadOnly Property MaxLabelNameLength As Integer
      Get
        Return 80
      End Get
    End Property

    Public Property PreferredForename() As String
      Get
        Return mvClassFields(ContactFields.PreferredForename).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.PreferredForename).Value = Value
        mvLabelNameValid = False
      End Set
    End Property
    Public Property Sex() As ContactSex
      Get
        Select Case mvClassFields.Item(ContactFields.Sex).Value
          Case "F"
            Return ContactSex.cscFemale
          Case "M"
            Return ContactSex.cscMale
          Case Else
            Return ContactSex.cscUnknown
        End Select
      End Get
      Set(ByVal Value As ContactSex)
        Select Case Value
          Case ContactSex.cscFemale
            mvClassFields.Item(ContactFields.Sex).Value = "F"
          Case ContactSex.cscMale
            mvClassFields.Item(ContactFields.Sex).Value = "M"
          Case ContactSex.cscUnknown
            mvClassFields.Item(ContactFields.Sex).Value = "U"
        End Select
      End Set
    End Property
    Public ReadOnly Property SexCode() As String
      Get
        Return mvClassFields.Item(ContactFields.Sex).Value
      End Get
    End Property
    Public Property Source() As String
      Get
        Source = mvClassFields.Item(ContactFields.Source).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.Source).Value = Value
        mvSourceDateValid = False
        mvSourceDesc = ""
      End Set
    End Property
    Public ReadOnly Property SourceDesc() As String
      Get
        If mvSourceDesc.Length = 0 Then
          mvSourceDesc = mvEnv.GetDescription("sources", "source", Source)
        End If
        Return mvSourceDesc
      End Get
    End Property
    Public Property SourceDate() As String
      Get
        SetValid(ContactFields.SourceDate)
        Return mvClassFields.Item(ContactFields.SourceDate).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.SourceDate).Value = Value
        mvSourceDateValid = True
      End Set
    End Property
    Public ReadOnly Property NameGatheringSource() As String
      Get
        Return mvClassFields(ContactFields.NameGatheringSource).Value
      End Get
    End Property
    Public Property DateOfBirth() As String
      Get
        Return mvClassFields(ContactFields.DateOfBirth).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(ContactFields.DateOfBirth).Value = value
      End Set
    End Property
    Public Property Status() As String
      Get
        If ContactType = ContactTypes.ctcOrganisation Then
          GetPositionInfo()
          Status = mvOrgStatus
        Else
          Return mvClassFields.Item(ContactFields.Status).Value
        End If
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.Status).Value = Value
        mvStatusDateValid = False
        mvStatusDesc = ""
        mvStatusRgbValue = 0
        If ContactType <> ContactTypes.ctcOrganisation Then
          If Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAStatus) Then 'And InStr(UCase$(mvEnv.GetConfig("cd_gone_away_marker")), "STATUS") > 0 Then
            ReadGAConfig()
            mvGoneAway = mvGAStatus
          End If
        End If
      End Set
    End Property
    Public ReadOnly Property StatusDesc() As String
      Get
        If mvStatusDesc.Length = 0 Then GetStatusInfo()
        Return mvStatusDesc
      End Get
    End Property
    Public ReadOnly Property StatusRgbValue() As Integer
      Get
        If mvStatusDesc.Length = 0 Then GetStatusInfo()
        Return mvStatusRgbValue
      End Get
    End Property

    Private Sub GetStatusInfo()
      mvStatusDesc = ""
      mvStatusRgbValue = 0
      If Status.Length > 0 Then
        Dim vSQL As New SQLStatement(mvEnv.Connection, "status_desc,rgb_value", "statuses", New CDBField("status", Status))
        Dim vRS As CDBRecordSet = vSQL.GetRecordSet
        If vRS.Fetch Then
          mvStatusDesc = vRS.Fields(1).Value
          mvStatusRgbValue = vRS.Fields(2).IntegerValue
        End If
      End If
    End Sub

    Public Property StatusDate() As String
      Get
        If ContactType = ContactTypes.ctcOrganisation Then
          GetPositionInfo()
          StatusDate = mvOrgStatusDate
        Else
          SetValid(ContactFields.StatusDate)
          StatusDate = mvClassFields.Item(ContactFields.StatusDate).Value
        End If
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.StatusDate).Value = Value
        mvStatusDateValid = True
      End Set
    End Property
    Public Property StatusReason() As String
      Get
        If ContactType = ContactTypes.ctcOrganisation Then
          GetPositionInfo()
          StatusReason = mvOrgStatusReason
        Else
          StatusReason = mvClassFields.Item(ContactFields.StatusReason).MultiLineValue
        End If
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.StatusReason).Value = Value
      End Set
    End Property
    Public Property Department() As String
      Get
        Return mvClassFields(ContactFields.Department).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(ContactFields.Department).Value = value
      End Set
    End Property
    Public Property AddressNumber() As Integer
      Get
        Return mvClassFields(ContactFields.AddressNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(ContactFields.AddressNumber).IntegerValue = value
      End Set
    End Property
    Public Property DiallingCode() As String
      Get
        Return mvClassFields.Item(ContactFields.DiallingCode).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.DiallingCode).Value = Value
      End Set
    End Property
    Public Property StdCode() As String
      Get
        StdCode = mvClassFields.Item(ContactFields.StdCode).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.StdCode).Value = Value
      End Set
    End Property
    Public Property Telephone() As String
      Get
        Return (mvClassFields.Item(ContactFields.Telephone).Value)
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.Telephone).Value = Value
      End Set
    End Property

    Public Property ExDirectory() As Boolean
      Get
        Return mvClassFields(ContactFields.ExDirectory).Bool
      End Get
      Set(ByVal value As Boolean)
        mvClassFields(ContactFields.ExDirectory).Bool = value
      End Set
    End Property
    Public Property Notes() As String
      Get
        Return mvClassFields.Item(ContactFields.Notes).MultiLineValue
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.Notes).Value = Value
      End Set
    End Property

    Public Property VATCategory() As String
      Get
        If mvClassFields.Item(ContactFields.ContactVatCategory).Value.Length = 0 Then mvClassFields.Item(ContactFields.ContactVatCategory).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDefConVatCat)
        Return mvClassFields.Item(ContactFields.ContactVatCategory).Value
      End Get
      Set(ByVal Value As String)
        mvVATRequiredValid = False
        mvClassFields.Item(ContactFields.ContactVatCategory).Value = Value
      End Set
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ContactFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ContactFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property ContactTypeCode() As String
      Get
        Return mvClassFields(ContactFields.ContactType).Value
      End Get
    End Property
    Public Property DobEstimated() As Boolean
      Get
        Return mvClassFields.Item(ContactFields.DobEstimated).Bool
      End Get
      Set(ByVal Value As Boolean)
        mvClassFields.Item(ContactFields.DobEstimated).Bool = Value
      End Set
    End Property
    Public Property ContactGroupCode As String
      Get
        Dim vGroup As String = mvClassFields(ContactFields.ContactGroup).Value
        If vGroup.Length = 0 Then vGroup = mvEnv.EntityGroups.DefaultGroup(EntityGroup.EntityGroupTypes.egtContact).EntityGroupCode
        Return vGroup
      End Get
      Set(ByVal value As String)
        mvClassFields(ContactFields.ContactGroup).Value = value
        If String.IsNullOrWhiteSpace(value) OrElse (mvContactGroup IsNot Nothing AndAlso Me.ContactGroup.EntityGroupCode <> value) Then
          Me.ContactGroup = Nothing
        End If
      End Set
    End Property
    Public Property OwnershipGroup() As String
      Get
        Return mvClassFields(ContactFields.OwnershipGroup).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(ContactFields.OwnershipGroup).Value = value
      End Set
    End Property

    Public Property LabelNameFormatCode() As String
      Get
        Return mvClassFields(ContactFields.LabelNameFormatCode).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(ContactFields.LabelNameFormatCode).Value = value
      End Set
    End Property
    ''' <summary>
    ''' This property is set by the SetLabel method.  Please ensure that SetLabel is called once at least before you access is.
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks>Setting a member variable in a method is not considered best practice.  However, this is how the code was written</remarks>
    ''' Don't blame me I only work here :)
    Private ReadOnly Property DefaultLabelNameFormatCode As String
      Get
        Return If(Me.JuniorContact, mvJnrLabelNameFormat, mvLabelNameFormat)
      End Get
    End Property

    Public Property ResponseChannel() As String
      Get
        Return mvClassFields(ContactFields.ResponseChannel).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(ContactFields.ResponseChannel).Value = value
      End Set
    End Property

    Public Property NiNumber() As String
      Get
        Return mvClassFields(ContactFields.NiNumber).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.NiNumber).Value = Value
      End Set
    End Property
    Public Property PrefixHonorifics() As String
      Get
        Return mvClassFields.Item(ContactFields.PrefixHonorifics).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.PrefixHonorifics).Value = Value
        mvLabelNameValid = False
      End Set
    End Property
    Public Property SurnamePrefix() As String
      Get
        Return mvClassFields.Item(ContactFields.SurnamePrefix).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.SurnamePrefix).Value = Value
        mvLabelNameValid = False
        mvSalutationValid = False
      End Set
    End Property
    Public Property InformalSalutation() As String
      Get
        Dim vNewValue As String = ""
        Dim vContainsForenames As Boolean
        Dim vContainsDefaultValue As Boolean
        Dim vForename As String
        Dim vPos As Integer
        Dim vPos2 As Integer

        'Currently used for Netherlands (Dutch Electronic Payment Process) only

        Me.SetValid(ContactFields.InformalSalutation)
        If mvClassFields.Item(ContactFields.InformalSalutation).Value = "" Then
          If mvEnv.DefaultCountry = "NL" Then
            Dim vTitles As SortedList(Of String, Title) = GetTitles(mvEnv)
            If IsJointContact(vTitles, Nothing) Then
              ' Do nothing
            Else
              Dim vFormat As String = mvEnv.GetConfig("default_informal_salutation")
              vContainsForenames = vFormat.Contains("forename")
              vContainsDefaultValue = vContainsForenames And vFormat.Contains("|")
              vForename = Forenames
              If vContainsForenames Then vFormat = Replace(vFormat, "forename", vForename)
              vNewValue = vFormat
              If vContainsForenames Then
                If vForename.Length > 0 And vContainsDefaultValue Then
                  'the format contains a default value & forenames supplied, so remove both the vertical bar and the default value
                  vPos = InStr(vFormat, "|")
                  vPos2 = InStr(vPos, vFormat, " ") 'is there another word AFTER the default value?
                  If vPos2 > 0 Then
                    vNewValue = Left(vFormat, vPos - 1) & Mid(vFormat, vPos2)
                  Else
                    vNewValue = Left(vFormat, vPos - 1)
                  End If
                ElseIf Len(vForename) = 0 Then
                  If vContainsDefaultValue Then
                    'the format contains a default value & no forenames supplied so remove the vertical bar but keep the default value
                    vPos = InStr(vFormat, "|")
                    vNewValue = Left(vFormat, vPos - 1) & Mid(vFormat, vPos + 1)
                  Else
                    'the format does not contain a default value & no forenames supplied so need to set to generic salutation because otherwise at this point it may just contain 'Dear'
                    vNewValue = Salutation
                  End If
                End If
              End If
            End If
            mvClassFields.Item(ContactFields.InformalSalutation).Value = vNewValue
          End If
        End If
        Return mvClassFields.Item(ContactFields.InformalSalutation).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(ContactFields.InformalSalutation).Value = Value
        'Data Import needs to know if the Informal Salutation has been set or not
        'It uses the InformalSalutationValid property to do this.
        If Value.Length = 0 Then
          mvInformalSalutationValid = False
        Else
          mvInformalSalutationValid = True
        End If
      End Set
    End Property

    Public Property ContactReference() As String
      Get
        Return mvClassFields.Item(ContactFields.ContactReference).Value
      End Get
      Set(ByVal pValue As String)
        mvClassFields.Item(ContactFields.ContactReference).Value = pValue
      End Set
    End Property

#End Region

#Region "Non-AutoGenerated Code"

    Public Enum ContactTypes
      ctcContact = 1                        'Keep the same in all classes
      ctcOrganisation = 2                   'at least for contact and organisation
      ctcJoint = 3
    End Enum

    Public Enum ContactMemberStatuses
      cmsNone
      cmsSingle
      cmsMember
    End Enum

    Private mvGotEmailAddresses As Boolean
    Private mvEmailAddresses As List(Of String)
    Private mvOwnershipGroupDesc As String
    Private mvPrincipalDepartmentDesc As String
    Private mvOwnershipAccessLevel As String
    Private mvOwnershipAccessLevelDesc As String
    Private mvGAStatus As Boolean
    Private mvGoneAway As Boolean
    Private mvOrgStatus As String
    Private mvOrgStatusDate As String
    Private mvOrgStatusReason As String
    Private mvStatusDesc As String
    Private mvStatusRgbValue As Integer
    Private mvStatusDateValid As Boolean
    Private mvSourceDateValid As Boolean
    Private mvSourceDesc As String
    Private mvOwnershipValid As Boolean
    Private mvInformalSalutationValid As Boolean
    Private mvSalutationValid As Boolean
    Private mvLabelNameValid As Boolean
    Private mvCurrentAddress As Address
    Private mvOwners As CDBParameters
    Private mvVATRequiredValid As Boolean
    Private mvOrganisationName As String
    Private mvOrganisationNumber As Integer
    Private mvContactPositionNumber As Integer
    Private mvPositionLocation As String
    Private mvPosition As String
    Private mvPositionCurrent As Boolean
    Private mvHistoricalAddress As Boolean
    Private mvOrgContactNumber As Integer
    Private mvPositionValid As Boolean
    Private mvGAConfig As String = ""
    Private mvGASuppression As Boolean
    Private mvJuniorContact As Boolean
    Private mvAmendedValid As Boolean
    Private mvMaxInitialsLength As Integer
    Private mvInitialsStyle As String
    Private mvInitialsStyleRead As Boolean
    Private mvMergeInfoValid As Boolean
    Private mvUpdateGAData As Boolean
    Private mvLabelNameFormat As String = ""
    Private mvJnrLabelNameFormat As String = ""
    Private mvAddresses As Collection
    Private mvPrincipalUser As PrincipalUser
    Private mvPrincipalUserValid As Boolean
    Private mvVATNumber As String
    Private mvVATNumberValid As Boolean
    Private mvWebAddress As String
    Private mvWebAddressValid As Boolean
    Private mvStatusChangedAction As Integer
    Private mvContactPositions As List(Of ContactPosition)
    Private mvTitle As Title
    Private mvStatusUpdateTypes As String = ""
    Private mvAddressHistorical As Boolean
    Private mvHonorificsChanged As Boolean
    Private mvPreValidationHonorifics As String = String.Empty
    Private mvContactGroup As ContactGroup

    Protected Overrides Sub SetValid()
      Me.SetValid(ContactFields.AllFields)
      If Status.Length > 0 Then
        If StatusReason.Length = 0 Then mvClassFields(ContactFields.StatusReason).Value = "automatic"
      Else
        If StatusReason.Length > 0 Then mvClassFields(ContactFields.StatusReason).Value = ""
      End If
    End Sub

    Private Overloads Sub SetValid(ByVal pField As ContactFields)
      With mvClassFields
        If pField = ContactFields.AllFields Then
          mvClassFields.SetControlNumber(mvEnv)
          If Not mvAmendedValid Then
            .Item(ContactFields.AmendedOn).Value = TodaysDate()
            .Item(ContactFields.AmendedBy).Value = mvEnv.User.UserID
          End If
        End If
        'Set any default values
        If (pField = ContactFields.AllFields) Or (pField = ContactFields.ExDirectory) Then
          If mvClassFields(ContactFields.ExDirectory).Value.Length = 0 Then .Item(ContactFields.ExDirectory).Value = "N"
        End If
        If (pField = ContactFields.AllFields) Or (pField = ContactFields.DobEstimated) Then
          If mvClassFields(ContactFields.DobEstimated).Value.Length = 0 Then .Item(ContactFields.DobEstimated).Value = "N"
        End If
        If (pField = ContactFields.AllFields) Or (pField = ContactFields.Department) Then
          If Department.Length = 0 Then .Item(ContactFields.Department).Value = mvEnv.User.Department
        End If
        If (pField = ContactFields.AllFields) Or (pField = ContactFields.PreferredForename) Then
          If PreferredForename.Length = 0 Then
            .Item(ContactFields.PreferredForename).Value = FirstWord(Forenames)
            If PreferredForename.Length < 2 Then
              .Item(ContactFields.PreferredForename).Value = ""
            End If
          End If
        End If
        If (pField = ContactFields.AllFields) Or (pField = ContactFields.Sex) Then
          If .Item(ContactFields.Sex).Value.Length = 0 Then .Item(ContactFields.Sex).Value = "U"
        End If
        'Set any InValid Values
        If (pField = ContactFields.AllFields) Or (pField = ContactFields.Salutation) Then
          If (Not mvSalutationValid) Then
            'FUTURE  Set Salutation from Title lookup
          End If
        End If
        If (pField = ContactFields.AllFields) Or (pField = ContactFields.InformalSalutation) Then
          If (Not mvInformalSalutationValid) Then
            'FUTURE  Set Informal Salutation from Title lookup
          End If
        End If
        If (pField = ContactFields.AllFields) Or (pField = ContactFields.LabelName) Then
          If LabelNameFormatCode.Length = 0 Then
            If (Not mvLabelNameValid) Then SetLabelName(IsJunior)
          Else
            If (Not mvLabelNameValid) Then SetLabelName(IsJunior, LabelNameFormatCode)
          End If
        End If
        If (pField = ContactFields.AllFields) Or (pField = ContactFields.StatusDate) Then
          If (Not mvStatusDateValid) Then
            If Status.Length > 0 Then
              If .Item(ContactFields.StatusDate).Value.Length = 0 Then .Item(ContactFields.StatusDate).Value = TodaysDate()
            Else
              .Item(ContactFields.StatusDate).Value = ""
            End If
            mvStatusDateValid = True
          End If
        End If
        If (pField = ContactFields.AllFields) Or (pField = ContactFields.SourceDate) Then
          If (Not mvSourceDateValid) Then
            If .Item(ContactFields.SourceDate).Value.Length = 0 Then .Item(ContactFields.SourceDate).Value = TodaysDate()
            mvSourceDateValid = True
          End If
        End If
        If (pField = ContactFields.AllFields) Or (pField = ContactFields.OwnershipGroup) Then
          If OwnershipGroup.Length = 0 Then .Item(ContactFields.OwnershipGroup).Value = mvEnv.User.OwnershipGroup
        End If
        If (pField = ContactFields.AllFields) Or (pField = ContactFields.ContactGroup) Then
          'Have to look at the class field value not the property 
          If mvClassFields(ContactFields.ContactGroup).Value.Length = 0 Then ContactGroupCode = mvEnv.EntityGroups.DefaultGroup(EntityGroup.EntityGroupTypes.egtContact).EntityGroupCode 'Set to default
        End If
      End With
    End Sub

    Protected Overrides Sub ClearFields()
      mvEmailAddresses = Nothing
      mvGotEmailAddresses = False
      mvOwnershipValid = False
      mvStatusDateValid = False
      mvSourceDateValid = False
      mvOwnershipValid = False
      mvInformalSalutationValid = False
      mvSalutationValid = False
      mvLabelNameValid = False
      mvStatusDesc = ""
      mvSourceDesc = ""
      mvCurrentAddress = New Address(mvEnv)
      mvCurrentAddress.Init()
      mvGoneAway = False
      mvOwners = Nothing
      mvVATRequiredValid = False
      mvPositionValid = False
      mvJuniorContact = False
      mvAmendedValid = False
      mvGiftAidDeclarations = Nothing
      mvAddresses = Nothing
      'mvCategories = Nothing
      'mvContactLinks = Nothing
      mvJointContact1 = Nothing
      mvJointContact2 = Nothing
      mvPrincipalUser = Nothing
      mvPrincipalUserValid = False
      mvStatusChangedAction = 0
      'SetPositionInvalid()
      mvWebAddress = ""
      mvWebAddressValid = False
      mvVATNumber = ""
      mvVATNumberValid = False
      mvContactPositions = Nothing
      'mvGotPositionBranch = False
      mvStatusUpdateTypes = ""
      mvAddressHistorical = False
    End Sub

    Public Overrides Sub Init(ByVal pContactNumber As Integer)
      Init(pContactNumber, 0)
    End Sub

    Public Overloads Sub Init(ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer)
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add("c.contact_number", pContactNumber)
      Dim vAnsiJoins As New AnsiJoins()
      vAnsiJoins.Add("contact_addresses ca", "c.contact_number", "ca.contact_number")
      vAnsiJoins.Add("addresses a", "ca.address_number", "a.address_number")
      vAnsiJoins.Add("countries co", "a.country", "co.country")
      If pAddressNumber > 0 Then
        vWhereFields.Add("a.address_number", pAddressNumber)
      Else
        vWhereFields.AddJoin("a.address_number", "c.address_number")
      End If

      Dim vFields As String = GetRecordSetFields().Replace("c.address_number", "c.address_number AS default_address_number")
      If mvCurrentAddress Is Nothing Then mvCurrentAddress = New Address(mvEnv)
      vFields = vFields & "," & mvCurrentAddress.GetRecordSetFields(Access.Address.AddressRecordSetTypes.artAll)
      vFields = vFields.Replace(",a.amended_by", "")
      vFields = vFields.Replace(",a.amended_on", "")
      vFields = vFields & ",historical"
      Dim vRecordSet As CDBRecordSet = New SQLStatement(mvEnv.Connection, vFields, "contacts c", vWhereFields, "", vAnsiJoins).GetRecordSet
      If vRecordSet.Fetch Then
        InitFromRecordSet(mvEnv, vRecordSet, ContactRecordSetTypes.crtNumber Or ContactRecordSetTypes.crtName Or ContactRecordSetTypes.crtVAT Or ContactRecordSetTypes.crtAddress Or ContactRecordSetTypes.crtAddressCountry Or ContactRecordSetTypes.crtDetail Or ContactRecordSetTypes.crtDefaultAddressNumber)
        mvHistoricalAddress = vRecordSet.Fields("historical").Bool
      Else

        'Current Address could be only for Organisation, so we now try to initialise using organisation data
        vRecordSet.CloseRecordSet()
        vAnsiJoins.Clear()
        vWhereFields.Clear()
        vWhereFields.Add("c.contact_number", pContactNumber)

        vAnsiJoins.Add("organisation_addresses o", "c.contact_number", "o.organisation_number")
        vAnsiJoins.Add("addresses a", "o.address_number", "a.address_number")
        vAnsiJoins.Add("countries co", "a.country", "co.country")
        If pAddressNumber > 0 Then
          vWhereFields.Add("a.address_number", pAddressNumber)
        Else
          vWhereFields.AddJoin("a.address_number", "c.address_number")
        End If

        vRecordSet = New SQLStatement(mvEnv.Connection, vFields, "contacts c", vWhereFields, "", vAnsiJoins).GetRecordSet
        If vRecordSet.Fetch Then
          InitFromRecordSet(mvEnv, vRecordSet, ContactRecordSetTypes.crtNumber Or ContactRecordSetTypes.crtName Or ContactRecordSetTypes.crtVAT Or ContactRecordSetTypes.crtAddress Or ContactRecordSetTypes.crtAddressCountry Or ContactRecordSetTypes.crtDetail Or ContactRecordSetTypes.crtDefaultAddressNumber)
          mvHistoricalAddress = vRecordSet.Fields("historical").Bool
        Else

          vRecordSet.CloseRecordSet()
          vWhereFields.Clear()
          vWhereFields.Add("c.contact_number", pContactNumber)
          mvHistoricalAddress = False
          vRecordSet = New SQLStatement(mvEnv.Connection, GetRecordSetFields, "contacts c", vWhereFields).GetRecordSet
          If vRecordSet.Fetch = True Then
            InitFromRecordSet(vRecordSet)
            mvLabelNameValid = True
            mvSalutationValid = True
            mvInformalSalutationValid = True
          Else
            SetDefaults()
          End If
        End If
      End If
      vRecordSet.CloseRecordSet()
    End Sub

    Public Function GetRecordSetFieldsName() As String
      Return GetRecordSetFieldsName("", "")
    End Function
    Public Function GetRecordSetFieldsName(ByVal pTableAlias As String) As String
      Return GetRecordSetFieldsName(pTableAlias, "")
    End Function
    Public Function GetRecordSetFieldsName(ByVal pTableAlias As String, ByVal pPrefixName As String) As String
      Dim vFields As String = "c.contact_number,title,forenames,initials,surname,honorifics,salutation,label_name,preferred_forename,contact_type"
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataNINumber) Then vFields = vFields & ",ni_number"
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataDutchSupport) Then vFields = vFields & ",prefix_honorifics,surname_prefix,informal_salutation"
      If pTableAlias.Length > 0 OrElse pPrefixName.Length > 0 Then
        'Used when more than 1 contact information is required in a Row
        'pTableAlias is used to add the table alias name to all fields
        'pPrefixName with pTableAlias is used when field alias are required with the prefix name (Used in a SQL statement)
        'pPrefixName without pTableAlias is used when field names are required with the prefix name (Used in InitFromRecordSetName)
        Dim vNewFields As New StringBuilder
        If pTableAlias.Length > 0 Then vFields = vFields.Replace("c.", pTableAlias & ".")
        For Each vField As String In vFields.Split(","c)
          If vNewFields.Length > 0 Then vNewFields.Append(",")
          If vField.Contains(".") Then
            vField = Substring(vField, vField.IndexOf(".") + 1, vField.Length)      'Only read attribute name, no dots
          End If
          If pTableAlias.Length > 0 Then
            vNewFields.Append(pTableAlias)      'Add the table alias to all attributes when provided
            vNewFields.Append(".")
          End If
          If pPrefixName.Length > 0 Then
            If pTableAlias.Length > 0 Then
              vNewFields.Append(vField)         'Used in a SQL statement
              vNewFields.Append(" AS ")
              vNewFields.Append(pPrefixName)
              vNewFields.Append("_")
            Else
              vNewFields.Append(pPrefixName)    'Used in InitFromRecordSetName
              vNewFields.Append("_")
            End If
          End If
          vNewFields.Append(vField)
        Next
        vFields = vNewFields.ToString
      End If
      Return vFields
    End Function

    Public Function GetRecordSetFieldsNamePhone() As String
      Dim vFields As String = GetRecordSetFieldsName()
      vFields &= ",c.dialling_code,c.std_code,c.telephone,c.ex_directory"
      Return vFields
    End Function

    Public Function GetRecordSetFieldsPhone() As String
      Dim vFields As String = "c.contact_number,c.dialling_code,c.std_code,c.telephone,c.ex_directory"
      Return vFields
    End Function

    Public Function GetRecordSetFieldsNamePhoneGroup() As String
      Dim vFields As String = GetRecordSetFieldsName()
      vFields &= ",c.dialling_code,c.std_code,c.telephone,c.ex_directory,c.contact_group"
      Return vFields
    End Function

    Public Function GetRecordSetFieldsNameAddressCountryPhone() As String
      Dim vFields As String = GetRecordSetFieldsName()
      vFields &= ",c.dialling_code,c.std_code,c.telephone,c.ex_directory,"
      vFields &= New Address(mvEnv).GetRecordSetFieldsCountry
      Return vFields
    End Function

    Public Function GetRecordSetFieldsForInit() As String
      CheckClassFields()
      Dim vFields As String = "c.contact_number,title,forenames,initials,surname,honorifics,salutation,label_name,preferred_forename,contact_type,"
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataIrishGiftAid) Then vFields = vFields & "ni_number,"
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataDutchSupport) Then vFields = vFields & "prefix_honorifics,surname_prefix,informal_salutation,"
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLabelNameFormatCode) Then vFields = vFields & "label_name_format_code,"
      vFields = vFields & "contact_vat_category,c.contact_group,c.dialling_code,c.std_code,c.telephone,c.ex_directory,"
      vFields = vFields & "sex,c.source,c.source_date,name_gathering_source,date_of_birth,c.status,c.status_date,c.status_reason,c.department,c.notes,dob_estimated,c.amended_on,c.amended_by,"
      If mvClassFields(ContactFields.OwnershipGroup).InDatabase Then vFields = vFields & "c.ownership_group,"
      If mvCurrentAddress Is Nothing Then mvCurrentAddress = New Address(mvEnv)
      vFields = vFields & mvCurrentAddress.GetRecordSetFields(Address.AddressRecordSetTypes.artNumber Or Address.AddressRecordSetTypes.artDetails)
      vFields = vFields & ",c.address_number AS default_address_number"
      Return vFields
    End Function

    Public Function GetSurnamePrefix(ByVal pSurname As String) As CDBParameters
      Dim vNewSurname As String
      Dim vNewPrefix As String = ""
      Dim vParams As New CDBParameters

      Dim vSurname As String = pSurname
      If vSurname.Length = 0 Then vSurname = Surname
      If vSurname.Length > 0 Then
        Dim vWords As New StringList(vSurname, " ")
        Dim vLowerWords As New StringList(vSurname.ToLower, " ")
        If vLowerWords.ContainsAnyItem("+,et,und,and,&,en") Then
          vNewSurname = vSurname
        Else
          vNewSurname = vWords(vWords.Count - 1)
          vWords.Remove(vWords(vWords.Count - 1))
          vSurname = vWords.ItemList(" ")
          For vIndex As Integer = 0 To vWords.Count - 1
            If mvEnv.ValidSurnamePrefix(vSurname.ToLower) Then
              vNewPrefix = vSurname.ToLower
              Exit For
            Else
              vNewSurname = vWords(vWords.Count - 1) & " " & vNewSurname
              vWords.Remove(vWords(vWords.Count - 1))
              vSurname = vWords.ItemList(" ")
            End If
          Next
        End If
        vParams.Add("SurnamePrefix", vNewPrefix)
        vParams.Add("Surname", vNewSurname)
      End If
      Return vParams
    End Function

    Public Sub InitFromRecordSetName(ByVal pRecordSet As CDBRecordSet)
      MyBase.InitFromRecordSetFields(pRecordSet, GetRecordSetFieldsName)
    End Sub

    Public Sub InitFromRecordSetName(ByVal pRecordSet As CDBRecordSet, ByVal pPrefixName As String)
      MyBase.InitFromRecordSetFields(pRecordSet, GetRecordSetFieldsName("", pPrefixName), pPrefixName)
    End Sub

    Public Sub InitFromRecordSetPhone(ByVal pRecordSet As CDBRecordSet)
      MyBase.InitFromRecordSetFields(pRecordSet, GetRecordSetFieldsPhone)
    End Sub

    Public Sub InitFromRecordSetNamePhone(ByVal pRecordSet As CDBRecordSet)
      MyBase.InitFromRecordSetFields(pRecordSet, GetRecordSetFieldsNamePhone)
    End Sub

    Public Sub InitFromRecordSetNameAddressCountryPhone(ByVal pRecordSet As CDBRecordSet)
      MyBase.InitFromRecordSetFields(pRecordSet, GetRecordSetFieldsNamePhone)
      Address.InitFromRecordSetCountry(pRecordSet)
      mvClassFields(ContactFields.AddressNumber).IntegerValue = pRecordSet.Fields(mvClassFields(ContactFields.AddressNumber).Name).IntegerValue
    End Sub

    Public ReadOnly Property Address() As Address
      Get
        If mvCurrentAddress Is Nothing OrElse
           (mvCurrentAddress.AddressNumber = 0 And Me.AddressNumber > 0) Then
          RefreshAddress()
        End If
        Return mvCurrentAddress
      End Get
    End Property

    Public Sub RefreshAddress()
      mvCurrentAddress = New Address(mvEnv)
      mvCurrentAddress.Init()
      Using vAddressData As DataTable = New SQLStatement(mvEnv.Connection,
                                                        mvCurrentAddress.GetRecordSetFields,
                                                        "addresses a",
                                                        New CDBFields({New CDBField("address_number", CDBField.FieldTypes.cftInteger, CStr(Me.AddressNumber))})).GetDataTable
        If vAddressData.Rows.Count > 0 Then
          mvCurrentAddress.InitFromDataRow(vAddressData.Rows(0), False)
        End If
      End Using
    End Sub

    Public ReadOnly Property DataTableColumns() As String
      Get
        Dim vColumns As New StringBuilder("ContactNumber,AddressNumber,ContactName,Title,Initials,Forenames,Surname,Honorifics,Salutation,LabelName")
        vColumns.Append(",PreferredForename,Sex,DateOfBirth,Source,SourceDate,SourceDesc,Status,StatusDesc,StatusDate,StatusReason,PhoneNumber")
        vColumns.Append(",ExDirectory,HouseName,Address,Town,County,Postcode,CountryCode,CountryDesc,Branch,AddressLine,ContactType,Position")
        vColumns.Append(",OrganisationNumber,OrganisationName,Abbreviation,Notes,AmendedOn,AmendedBy")
        vColumns.Append(",OwnershipGroup,OwnershipGroupDesc,PrincipalDepartmentDesc,OwnershipAccessLevel,OwnershipAccessLevelDesc")
        vColumns.Append(",StickyNoteCount,DOBEstimated,AddressMultiLine,GroupCode,GroupRGBValue,ActionCount")
        vColumns.Append(",Department,VATCategory,VATNumber,PrincipalUser,PrincipalUserReason,DefaultContactNumber,DefaultContactName,DepartmentDesc")
        vColumns.Append(",StatusGroup,StatusGroupDesc,PrincipalUserName,PrincipalUserPhoneNumber,BranchCode,PreferredCommunication,WebAddress")
        vColumns.Append(",PrefixHonorifics,SurnamePrefix,InformalSalutation,BuildingNumber,AddressType,NameGatheringSource,NINumber,LabelNameFormatCode,RgbStatus")
        vColumns.Append(",CurrentPosition,CurrentAddressLine,CurrentAddressMultiLine,ResponseChannel,ResponseChannelDesc,ContactReference")
        Return vColumns.ToString
      End Get
    End Property

    Public ReadOnly Property Name() As String
      Get
        If ContactType = ContactTypes.ctcOrganisation Or ContactType = ContactTypes.ctcJoint Then
          Return mvClassFields.Item(ContactFields.LabelName).Value
        Else
          Dim vIsParen As Boolean
          Dim vAddParen As Boolean
          Dim vValue As String
          Dim vResult As New StringBuilder
          Dim vNameStlye As String = mvEnv.ContactNameStyle
          Dim vLen As Integer = Len(vNameStlye)
          Dim vContainsInitials As Boolean = vNameStlye.Contains("I")
          Dim vContainsFornames As Boolean = vNameStlye.Contains("F")
          For Each vChar As Char In vNameStlye
            vIsParen = False
            Select Case vChar
              Case "T"c
                vValue = mvClassFields.Item(ContactFields.Title).Value
              Case "I"c
                vValue = mvClassFields.Item(ContactFields.Initials).Value
              Case "S"c
                If mvClassFields.Item(ContactFields.SurnamePrefix).Value.Length > 0 Then
                  If (mvClassFields.Item(ContactFields.Initials).Value.Length > 0 And vContainsInitials) Or (mvClassFields.Item(ContactFields.Forenames).Value.Length > 0 And vContainsFornames) Then
                    vValue = mvClassFields.Item(ContactFields.SurnamePrefix).Value
                  Else
                    vValue = SurnamePrefixCapitalised
                  End If
                  vValue = vValue & " " & mvClassFields.Item(ContactFields.Surname).Value
                Else
                  vValue = mvClassFields.Item(ContactFields.Surname).Value
                End If
              Case "F"c
                vValue = mvClassFields.Item(ContactFields.Forenames).Value
              Case "P"c
                vValue = mvClassFields.Item(ContactFields.PreferredForename).Value
              Case "H"c
                vValue = mvClassFields.Item(ContactFields.Honorifics).Value
              Case "("c
                vValue = ""
                vIsParen = True
                vAddParen = True
              Case Else
                vValue = ""
            End Select
            If vValue.Length > 0 Then
              If vResult.Length > 0 Then vResult.Append(" ")
              If vAddParen Then
                vResult.Append("(")
                vResult.Append(vValue)
                vResult.Append(")")
              Else
                vResult.Append(vValue)
              End If
            End If
            If Not vIsParen Then vAddParen = False
          Next
          Return vResult.ToString
        End If
      End Get
    End Property

    Public ReadOnly Property PhoneNumber() As String
      Get
        Dim vPhoneNumber As New StringBuilder
        If DiallingCode.Length > 0 Then
          vPhoneNumber.Append("(")
          vPhoneNumber.Append(DiallingCode)
          vPhoneNumber.Append(") ")
        End If
        If StdCode.Length > 0 Then
          vPhoneNumber.Append(StdCode)
          vPhoneNumber.Append(" ")
        End If
        vPhoneNumber.Append(Telephone)
        Return vPhoneNumber.ToString
      End Get
    End Property

    Public ReadOnly Property SurnamePrefixCapitalised() As String
      Get
        Dim vSurnamePrefix As String = SurnamePrefix
        If vSurnamePrefix.Length > 0 Then
          vSurnamePrefix = vSurnamePrefix.Substring(0, 1).ToUpper & vSurnamePrefix.Substring(1)
        End If
        Return vSurnamePrefix
      End Get
    End Property

    Public Property ContactType() As ContactTypes
      Get
        Select Case mvClassFields(Contact.ContactFields.ContactType).Value
          Case "J"
            Return ContactTypes.ctcJoint
          Case "O"
            Return ContactTypes.ctcOrganisation
          Case Else
            Return ContactTypes.ctcContact
        End Select
      End Get
      Set(ByVal Value As ContactTypes)
        Select Case Value
          Case ContactTypes.ctcContact
            mvClassFields.Item(ContactFields.ContactType).Value = "C"
          Case ContactTypes.ctcOrganisation
            mvClassFields.Item(ContactFields.ContactType).Value = "O"
          Case ContactTypes.ctcJoint
            mvClassFields.Item(ContactFields.ContactType).Value = "J"
        End Select
      End Set
    End Property

    Public Function CanConvert() As String
      Dim vWhereFields As New CDBFields
      Dim vResult As String = ""
      vWhereFields.Add("contact_number", ContactNumber)
      If mvEnv.Connection.GetCount("contact_positions", vWhereFields) > 0 Then vResult = "Contact Position, "
      If mvEnv.Connection.GetCount("gift_aid_declarations", vWhereFields) > 0 Then vResult = vResult & "Gift Aid Declaration, "
      If mvEnv.Connection.GetCount("users", vWhereFields) > 0 Then vResult = vResult & "User, "
      If mvEnv.Connection.GetCount("registered_users", vWhereFields) > 0 Then vResult = vResult & "Registered User, "
      If mvEnv.Connection.GetCount("delegates", vWhereFields) > 0 Then vResult = vResult & "Delegate, "
      If mvEnv.Connection.GetCount("event_personnel", vWhereFields) > 0 Then vResult = vResult & "Event Personnel, "
      If IsPartOfJoint Then vResult = vResult & "Joint Contact Relationship, "
      If mvEnv.Connection.GetCount("personnel", vWhereFields) > 0 Then vResult = vResult & "Personnel"
      If vResult.EndsWith(", ") Then vResult = vResult.TrimEnd(", ".ToCharArray)
      If vResult.Contains(",") Then vResult = vResult.Insert(vResult.LastIndexOf(",") + 1, "&")
      Return vResult.Replace(",&", " and")
    End Function

    Public Sub ConvertToOrganisation()
      Try
        Dim vWhereFields As New CDBFields
        Dim vUpdateFields As New CDBFields
        Dim vDT As CDBDataTable

        mvEnv.Connection.StartTransaction()
        'Copy Actions
        'vWhereFields.Clear()     'Uncomment if moving this section down
        vWhereFields.Add("contact_number", ContactNumber)
        'vUpdateFields.Clear()    'Uncomment if moving this section down
        With vUpdateFields
          .Add("organisation_number", CDBField.FieldTypes.cftInteger)
          .Add("action_number", CDBField.FieldTypes.cftInteger)
          .Add("type", CDBField.FieldTypes.cftCharacter)
          .Add("amended_by", CDBField.FieldTypes.cftCharacter)
          .Add("amended_on", CDBField.FieldTypes.cftDate)
        End With
        vDT = New CDBDataTable(mvEnv, New SQLStatement(mvEnv.Connection, "action_number,type,amended_by,amended_on", "contact_actions", vWhereFields))
        If vDT IsNot Nothing Then
          For Each vRow As CDBDataRow In vDT.Rows
            For Each vColumn As CDBDataColumn In vDT.Columns
              vUpdateFields(vColumn.AttributeName).Value = vRow.Item(vColumn.AttributeName)
            Next
            vUpdateFields("organisation_number").Value = ContactNumber.ToString
            mvEnv.Connection.InsertRecord("organisation_actions", vUpdateFields)
          Next
        End If
        If vUpdateFields("organisation_number").IntegerValue = ContactNumber Then mvEnv.Connection.DeleteRecords("contact_actions", vWhereFields, False)

        'Copy Addresses
        vWhereFields.Clear()
        vWhereFields.Add("contact_number", ContactNumber)
        Dim vList As New CDBParameters
        Dim vAnsiJoins As AnsiJoins
        Dim vAddressNumber As Integer
        vDT = New CDBDataTable(mvEnv, New SQLStatement(mvEnv.Connection, "address_link_number,address_number,historical,valid_from,valid_to", "contact_addresses", vWhereFields))
        If vDT IsNot Nothing Then
          For Each vRow As CDBDataRow In vDT.Rows
            vAddressNumber = IntegerValue(vRow.Item("address_number"))
            vWhereFields.Clear()
            vWhereFields.Add("address_number", vAddressNumber)
            vWhereFields.Add("contact_number", ContactNumber, CDBField.FieldWhereOperators.fwoNotEqual)
            Dim vCount As Integer = mvEnv.Connection.GetCount("contact_addresses", vWhereFields)
            Dim vMaintTables As CDBParameters = Nothing
            Dim vNewWhereFields As New CDBFields
            Dim vNewUpdateFields As New CDBFields

            If vCount = 0 Then
              'Update Address Type
              vWhereFields.Clear()
              vWhereFields.Add("address_number", vAddressNumber)
              vUpdateFields.Clear()
              vUpdateFields.Add("address_type", "O")
              mvEnv.Connection.UpdateRecords("addresses", vUpdateFields, vWhereFields, False)

              'Create new Address Link
              With vList
                .Clear()
                .Add("AddressNumber", vAddressNumber)
                .Add("OrganisationNumber", ContactNumber)
                .Add("Historical", vRow.Item("historical"))
                .Add("ValidFrom", vRow.Item("valid_from"))
                .Add("ValidTo", vRow.Item("valid_to"))
              End With
              Dim vAddLink As New OrganisationAddress(mvEnv)
              vAddLink.Create(vList)
              vAddLink.Save()
            Else
              'Create new Address
              Dim vAddress As New Address(mvEnv)
              vAddress.Init(vAddressNumber)
              Dim vNewAddress As New Address(mvEnv)
              vNewAddress.Clone(vAddress)     'Copy All Contact's Address
              vList.Add("AddressType", "O")
              vNewAddress.Update(vList)       'Update the AddressType to Organisation
              vNewAddress.Save()
              Dim vNewAddressNumber As Integer = vNewAddress.AddressNumber

              'Update Old Address Link for Dummy Contact
              vWhereFields.Clear()
              vWhereFields.Add("address_link_number", IntegerValue(vRow.Item("address_link_number")))
              vUpdateFields.Clear()
              vUpdateFields.Add("address_number", vNewAddressNumber)
              mvEnv.Connection.UpdateRecords("contact_addresses", vUpdateFields, vWhereFields, False)

              'Create new Address Link
              With vList
                .Clear()
                .Add("AddressNumber", vNewAddressNumber)
                .Add("OrganisationNumber", ContactNumber)
                .Add("Historical", vRow.Item("historical"))
                .Add("ValidFrom", vRow.Item("valid_from"))
                .Add("ValidTo", vRow.Item("valid_to"))
              End With
              Dim vAddLink As New OrganisationAddress(mvEnv)
              vAddLink.Create(vList)
              vAddLink.Save()

              'Update New Address Number in all other tables that refers the Old Address Number for this contact
              vWhereFields.Clear()
              vWhereFields.Add("a.attribute_name", "contact_number")
              vWhereFields.Add("b.attribute_name", "address_number")
              vWhereFields.Add("a.is_base_table_attribute", "Y")
              vWhereFields.Add("b.is_base_table_attribute", "Y")
              vAnsiJoins = New AnsiJoins
              vAnsiJoins.Add("maintenance_attributes b", "a.table_name", "b.table_name")
              If vMaintTables Is Nothing Then
                vMaintTables = New CDBParameters
                Dim vRS As CDBRecordSet = New SQLStatement(mvEnv.Connection, "a.table_name as table_name", "maintenance_attributes a", vWhereFields, "", vAnsiJoins).GetRecordSet
                While vRS.Fetch = True
                  vMaintTables.Add(vRS.Fields("table_name").Value)
                End While
                vRS.CloseRecordSet()

                vNewWhereFields.Add("contact_number", ContactNumber)
                vNewWhereFields.Add("address_number", vAddressNumber)
                vNewUpdateFields.Add("address_number", vNewAddressNumber)
                vAddressNumber = vNewAddressNumber
              End If
              For Each vParam As CDBParameter In vMaintTables
                mvEnv.Connection.UpdateRecords(vParam.Name, vNewUpdateFields, vNewWhereFields, False)
              Next
            End If

            'Update Communications 
            vWhereFields.Clear()
            vWhereFields.Add("contact_number", ContactNumber)
            vWhereFields.Add("address_number", "")
            vUpdateFields.Clear()
            vUpdateFields.Add("contact_number", "")
            vUpdateFields.Add("address_number", vAddressNumber)
            mvEnv.Connection.UpdateRecords("communications", vUpdateFields, vWhereFields, False)  'where AddressNumber is null
            vWhereFields.Remove("address_number")
            vUpdateFields.Remove("address_number")
            mvEnv.Connection.UpdateRecords("communications", vUpdateFields, vWhereFields, False)  'no check/update on addressnumber
          Next
        End If


        'Copy Address Usages
        vWhereFields.Clear()
        vWhereFields.Add("contact_number", ContactNumber)
        With vUpdateFields
          .Clear()
          .Add("organisation_number", CDBField.FieldTypes.cftInteger)
          .Add("address_number", CDBField.FieldTypes.cftInteger)
          .Add("address_usage")
          .Add("notes", CDBField.FieldTypes.cftMemo)
          .Add("amended_by")
          .Add("amended_on", CDBField.FieldTypes.cftDate)
        End With
        vDT = New CDBDataTable(mvEnv, New SQLStatement(mvEnv.Connection, "address_number,address_usage,notes,amended_by,amended_on", "contact_address_usages", vWhereFields))
        If vDT IsNot Nothing Then
          For Each vRow As CDBDataRow In vDT.Rows
            For Each vColumn As CDBDataColumn In vDT.Columns
              vUpdateFields(vColumn.AttributeName).Value = vRow.Item(vColumn.AttributeName)
            Next
            vUpdateFields("organisation_number").Value = ContactNumber.ToString
            mvEnv.Connection.InsertRecord("organisation_address_usages", vUpdateFields)
          Next
        End If
        If vUpdateFields("organisation_number").IntegerValue = ContactNumber Then mvEnv.Connection.DeleteRecords("contact_address_usages", vWhereFields, False)

        'Copy Categories            Only where the activity is valid for organisations
        vWhereFields.Clear()
        vWhereFields.Add("contact_number", ContactNumber)
        vAnsiJoins = New AnsiJoins
        vAnsiJoins.Add("activities a", "a.activity", "cc.activity")
        vWhereFields.Add("a.contact_group", OrganisationGroup.DefaultGroupCode, CDBField.FieldWhereOperators.fwoOpenBracket)
        vWhereFields.Add("a.contact_group#1", "", CDBField.FieldWhereOperators.fwoLikeOrEqual Or CDBField.FieldWhereOperators.fwoOR)
        vWhereFields.Add("a.contact_group#2", "", CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoOR)
        With vUpdateFields
          .Clear()
          .Add("organisation_number", CDBField.FieldTypes.cftInteger)
          .Add("activity", CDBField.FieldTypes.cftCharacter)
          .Add("activity_value", CDBField.FieldTypes.cftCharacter)
          .Add("quantity", CDBField.FieldTypes.cftInteger)
          .Add("source", CDBField.FieldTypes.cftCharacter)
          .Add("valid_from", CDBField.FieldTypes.cftDate)
          .Add("valid_to", CDBField.FieldTypes.cftDate)
          .Add("notes", CDBField.FieldTypes.cftMemo)
          .Add("activity_date", CDBField.FieldTypes.cftDate)
          .Add("amended_by", CDBField.FieldTypes.cftCharacter)
          .Add("amended_on", CDBField.FieldTypes.cftDate)
        End With
        vDT = New CDBDataTable(mvEnv, New SQLStatement(mvEnv.Connection, "cc.activity,activity_value,quantity,source,valid_from,valid_to,activity_date,cc.amended_by,cc.amended_on", "contact_categories cc", vWhereFields, "", vAnsiJoins))
        If vDT IsNot Nothing Then
          For Each vRow As CDBDataRow In vDT.Rows
            For Each vColumn As CDBDataColumn In vDT.Columns
              vUpdateFields(vColumn.AttributeName).Value = vRow.Item(vColumn.AttributeName)
            Next
            vUpdateFields("organisation_number").Value = ContactNumber.ToString
            mvEnv.Connection.InsertRecord("organisation_categories", vUpdateFields)
          Next
        End If
        If vUpdateFields("organisation_number").IntegerValue = ContactNumber Then
          vWhereFields.Clear()
          vWhereFields.Add("contact_number", ContactNumber)
          mvEnv.Connection.DeleteRecords("contact_categories", vWhereFields, False)
        End If

        'Copy Suppressions
        vWhereFields.Clear()
        vWhereFields.Add("contact_number", ContactNumber)
        With vUpdateFields
          .Clear()
          .Add("organisation_number", CDBField.FieldTypes.cftInteger)
          .Add("mailing_suppression", CDBField.FieldTypes.cftCharacter)
          .Add("valid_from", CDBField.FieldTypes.cftDate)
          .Add("valid_to", CDBField.FieldTypes.cftDate)
          .Add("notes", CDBField.FieldTypes.cftMemo)
          .Add("amended_by", CDBField.FieldTypes.cftCharacter)
          .Add("amended_on", CDBField.FieldTypes.cftDate)
        End With
        vDT = New CDBDataTable(mvEnv, New SQLStatement(mvEnv.Connection, "mailing_suppression,valid_from,valid_to,notes,amended_by,amended_on", "contact_suppressions", vWhereFields))
        If vDT IsNot Nothing Then
          For Each vRow As CDBDataRow In vDT.Rows
            For Each vColumn As CDBDataColumn In vDT.Columns
              vUpdateFields(vColumn.AttributeName).Value = vRow.Item(vColumn.AttributeName)
            Next
            vUpdateFields("organisation_number").Value = ContactNumber.ToString
            mvEnv.Connection.InsertRecord("organisation_suppressions", vUpdateFields)
          Next
        End If
        If vUpdateFields("organisation_number").IntegerValue = ContactNumber Then mvEnv.Connection.DeleteRecords("contact_suppressions", vWhereFields, False)

        'Update Department Notes
        vWhereFields.Clear()
        vWhereFields.Add("unique_id", ContactNumber)
        vUpdateFields.Clear()
        vUpdateFields.Add("record_type", CDBField.FieldTypes.cftCharacter, "O")
        mvEnv.Connection.UpdateRecords("department_notes", vUpdateFields, vWhereFields, False)

        'Update Sticky Notes
        vWhereFields.Clear()
        vWhereFields.Add("unique_id", ContactNumber)
        vUpdateFields.Clear()
        vUpdateFields.Add("record_type", CDBField.FieldTypes.cftCharacter, "O")
        mvEnv.Connection.UpdateRecords("sticky_notes", vUpdateFields, vWhereFields, False)

        'Update Credit Customers
        vWhereFields.Clear()
        vWhereFields.Add("contact_number", ContactNumber)
        vUpdateFields.Clear()
        vUpdateFields.Add("customer_type", CDBField.FieldTypes.cftCharacter, "O")
        mvEnv.Connection.UpdateRecords("credit_customers", vUpdateFields, vWhereFields, False)

        'Copy Contact Record
        Dim vOrganisation As New Organisation(mvEnv)
        With vList
          .Clear()
          .Add("OrganisationNumber", ContactNumber)
          .Add("ContactNumber", ContactNumber)
          .Add("AddressNumber", vAddressNumber)
          .Add("Name", Surname)
          .Add("StdCode", StdCode)
          .Add("Telephone", Telephone)
          .Add("Source", Source)
          .Add("SourceDate", SourceDate)
          .Add("Status", Status)
          .Add("StatusDate", StatusDate)
          .Add("Department", Department)
          .Add("Notes", Notes)
          .Add("OrganisationGroup", OrganisationGroup.DefaultGroupCode)
          .Add("OwnershipGroup", OwnershipGroup)
          .Add("AmendedBy", AmendedBy)
          .Add("AmendedOn", AmendedOn)
        End With
        vOrganisation.Create(vList, ContactNumber)
        vOrganisation.Save()
        mvClassFields(ContactFields.ContactType).Value = "O"    'Update contact
        Save()

        'Add record in contact_positions
        With vList
          .Clear()
          .Add("ContactNumber", ContactNumber)
          .Add("OrganisationNumber", ContactNumber)
          .Add("AddressNumber", vAddressNumber)
          .Add("Position", "")
          .Add("Mail", "Y")
          .Add("Current", "Y")
        End With
        Dim vPosition As New ContactPosition(mvEnv)
        vPosition.Create(vList)
        vPosition.Save()

        'Copy Relationship Links
        vWhereFields.Clear()
        vAnsiJoins.Clear()
        vWhereFields.Add("contact_number_1", ContactNumber)
        vAnsiJoins.Add("relationships r", "cl.relationship", "r.relationship")
        vWhereFields.Add("r.from_contact_group", OrganisationGroup.DefaultGroupCode, CDBField.FieldWhereOperators.fwoOpenBracket)
        vWhereFields.Add("r.from_contact_group#1", "", CDBField.FieldWhereOperators.fwoOR)
        vWhereFields.Add("r.to_contact_group", OrganisationGroup.DefaultGroupCode, CDBField.FieldWhereOperators.fwoOR)
        vWhereFields.Add("r.to_contact_group#1", "", CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoOR)
        With vUpdateFields
          .Clear()
          .Add("organisation_number_1", CDBField.FieldTypes.cftInteger)
          .Add("organisation_number_2", CDBField.FieldTypes.cftInteger)
          .Add("relationship", CDBField.FieldTypes.cftCharacter)
          .Add("valid_from", CDBField.FieldTypes.cftDate)
          .Add("valid_to", CDBField.FieldTypes.cftDate)
          .Add("historical", CDBField.FieldTypes.cftCharacter)
          .Add("notes", CDBField.FieldTypes.cftMemo)
          .Add("amended_by", CDBField.FieldTypes.cftCharacter)
          .Add("amended_on", CDBField.FieldTypes.cftDate)
        End With
        vDT = New CDBDataTable(mvEnv, New SQLStatement(mvEnv.Connection, "contact_number_2 as organisation_number_2,cl.relationship as relationship,valid_from,valid_to,historical,notes,cl.amended_by as amended_by,cl.amended_on as amended_on", "contact_links cl", vWhereFields, "", vAnsiJoins))
        If vDT IsNot Nothing Then
          For Each vRow As CDBDataRow In vDT.Rows
            For Each vColumn As CDBDataColumn In vDT.Columns
              vUpdateFields(vColumn.AttributeName).Value = vRow.Item(vColumn.AttributeName)
            Next
            vUpdateFields("organisation_number_1").Value = ContactNumber.ToString
            mvEnv.Connection.InsertRecord("organisation_links", vUpdateFields)
          Next

        End If
        If vUpdateFields("organisation_number_1").IntegerValue = ContactNumber Then
          vWhereFields.Clear()
          vWhereFields.Add("contact_number_1", ContactNumber)
          mvEnv.Connection.DeleteRecords("contact_links", vWhereFields, False)
        End If

        'Copy Contact Users
        vWhereFields.Clear()
        vWhereFields.Add("contact_number", ContactNumber)
        With vUpdateFields
          .Clear()
          .Add("organisation_number", CDBField.FieldTypes.cftInteger)
          .Add("department", CDBField.FieldTypes.cftCharacter)
          .Add("amended_by", CDBField.FieldTypes.cftCharacter)
          .Add("amended_on", CDBField.FieldTypes.cftDate)
        End With
        vDT = New CDBDataTable(mvEnv, New SQLStatement(mvEnv.Connection, "department,amended_by,amended_on", "contact_users", vWhereFields))
        If vDT IsNot Nothing Then
          For Each vRow As CDBDataRow In vDT.Rows
            For Each vColumn As CDBDataColumn In vDT.Columns
              vUpdateFields(vColumn.AttributeName).Value = vRow.Item(vColumn.AttributeName)
            Next
            vUpdateFields("organisation_number").Value = ContactNumber.ToString
            mvEnv.Connection.InsertRecord("organisation_users", vUpdateFields)
          Next
        End If
        mvEnv.Connection.CommitTransaction()
      Catch vException As Exception
        If mvEnv.Connection.InTransaction Then mvEnv.Connection.RollbackTransaction()
        Throw vException
      End Try
    End Sub

    Public ReadOnly Property IsPartOfJoint() As Boolean
      Get
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("relationship", mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDerivedToJointLink))
        vWhereFields.Add("contact_number_2", ContactNumber)
        Dim vCount As Integer = mvEnv.Connection.GetCount("contact_links", vWhereFields)
        If vCount > 0 Then Return True
        vWhereFields("relationship").Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlRealToJointLink)
        vCount = vCount + mvEnv.Connection.GetCount("contact_links", vWhereFields)
        If vCount > 0 Then Return True
        Return False
      End Get
    End Property

    Public Shared Function NotificationEMailAddress(ByVal pEnv As CDBEnvironment, ByVal pContactNumber As Integer) As String
      Dim vEmailAddresses As List(Of String) = GetEmailAddresses(pEnv, pContactNumber)
      If vEmailAddresses.Count > 0 Then
        Return vEmailAddresses(0)
      Else
        Dim vUser As New CDBUser(pEnv)
        vUser.InitFromContactNumber(pContactNumber)
        If vUser.Existing Then
          If vUser.EmailLogin.Length > 0 Then
            Return vUser.EmailLogin
          Else
            Return vUser.Logname
          End If
        Else
          Return ""
        End If
      End If
    End Function

    Public ReadOnly Property EmailAddress() As String
      Get
        If Not mvGotEmailAddresses Then
          mvEmailAddresses = GetEmailAddresses(mvEnv, ContactNumber)
          mvGotEmailAddresses = True
        End If
        If mvEmailAddresses.Count > 0 Then
          Return mvEmailAddresses(0)
        Else
          Return ""
        End If
      End Get
    End Property

    Public ReadOnly Property EmailAddresses() As String
      Get
        'Returns either all the auto-email addresses or the first potential e-mail address for the contact
        If Not mvGotEmailAddresses Then
          If ContactTypeCode.Length > 0 AndAlso ContactType = ContactTypes.ctcOrganisation AndAlso mvCurrentAddress IsNot Nothing AndAlso mvCurrentAddress.Existing Then
            mvEmailAddresses = GetEmailAddresses(mvEnv, ContactNumber, mvCurrentAddress.AddressNumber, True)
          Else
            mvEmailAddresses = GetEmailAddresses(mvEnv, ContactNumber)
          End If
          mvGotEmailAddresses = True
        End If
        Dim vAddresses As New StringBuilder
        For vIndex As Integer = 0 To mvEmailAddresses.Count - 1
          If vIndex > 0 Then vAddresses.Append(",")
          vAddresses.Append(mvEmailAddresses(vIndex))
        Next
        Return vAddresses.ToString
      End Get
    End Property

    Private Shared Function GetEmailAddresses(ByVal pEnv As CDBEnvironment, ByVal pContactNumber As Integer) As List(Of String)
      Return GetEmailAddresses(pEnv, pContactNumber, 0, False)
    End Function
    Private Shared Function GetEmailAddresses(ByVal pEnv As CDBEnvironment, ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer, ByVal pUseAddressNumber As Boolean) As List(Of String)
      'Returns either all the auto-email addresses or the first potential e-mail address for the contact
      Dim vEmailAddresses As New List(Of String)
      Dim vWhereFields As New CDBFields()
      If pUseAddressNumber = True AndAlso pAddressNumber > 0 Then
        vWhereFields.Add("com.address_number", pAddressNumber)
      Else
        vWhereFields.Add("com.contact_number", pContactNumber)
      End If
      vWhereFields.Add("d.email", "Y")
      vWhereFields.Add("is_active", "Y")
      Dim vAnsiJoins As New AnsiJoins()
      vAnsiJoins.Add("devices d", "com.device", "d.device")
      Dim vRecordSet As CDBRecordSet = New SQLStatement(pEnv.Connection, pEnv.Connection.DBSpecialCol("", "number") & ",d.auto_email", "communications com", vWhereFields, "preferred_method DESC, d.auto_email DESC, com.device", vAnsiJoins).GetRecordSet
      Dim vAddedAuto As Boolean
      Dim vContinue As Boolean = True
      While vRecordSet.Fetch AndAlso vContinue
        If Not vAddedAuto Then vAddedAuto = vRecordSet.Fields(2).Bool
        If vEmailAddresses.Count > 0 AndAlso vAddedAuto And Not vRecordSet.Fields(2).Bool Then vContinue = False
        If vContinue Then vEmailAddresses.Add(vRecordSet.Fields(1).Value)
      End While
      vRecordSet.CloseRecordSet()
      Return vEmailAddresses
    End Function

    Public Sub SetStatus(ByVal pContactNumber As Integer, ByVal pStatus As String, ByVal pStatusDate As String, ByVal pStatusReason As String)
      If Not (Existing AndAlso ContactNumber = pContactNumber) Then Init(pContactNumber)
      If Existing Then
        mvClassFields(ContactFields.Status).Value = pStatus
        mvClassFields(ContactFields.StatusDate).Value = pStatusDate
        mvClassFields(ContactFields.StatusReason).Value = pStatusReason
      End If
      Save()
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      SaveContact(pAmendedBy, pAudit, 0, 0)
    End Sub

    Public Overloads Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer)
      SaveContact(pAmendedBy, pAudit, pBatchNumber, pTransactionNumber)
    End Sub

    Private Sub SaveContact(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer)
      Dim vJournalNumber As Integer
      Dim vNewRecord As Boolean
      Dim vCSN As New ContactSearchName
      Dim vValidFrom As String
      Dim vJnrSuppression As String

      'Set any invalid / mandatory attributes
      SetValid(ContactFields.AllFields)
      If mvExisting Then
        If mvClassFields.Item(ContactFields.ContactNumber).ValueChanged Then RaiseError(DataAccessErrors.daeUpdateRecordPrimaryKey, "contacts", (mvClassFields(ContactFields.ContactNumber).SetValue))
        If ContactType <> ContactTypes.ctcOrganisation And mvClassFields.Item(ContactFields.Surname).ValueChanged Then vCSN.Update(mvEnv, ContactNumber, Surname)
        vJnrSuppression = mvEnv.GetConfig("cd_junior_suppression")
        If Len(vJnrSuppression) > 0 Then
          If JuniorContact Then
            'Either the junior contact flag has been set by the user with no date of birth or the date of birth has changed
            If mvClassFields.Item(ContactFields.DateOfBirth).ValueChanged Or Not IsDate(DateOfBirth) Then
              If IsDate(DateOfBirth) Then
                vValidFrom = DateOfBirth
              Else
                vValidFrom = TodaysDate()
              End If
              ContactSuppression.ContactTypeSaveSuppression(mvEnv, ContactSuppression.SuppressionEntryStyles.sesUpdateValidFrom, ContactTypes.ctcContact, ContactNumber, vJnrSuppression, vValidFrom, CDate(vValidFrom).AddYears(mvEnv.JuniorAgeLimit).ToString(CAREDateFormat))
            End If
          Else
            'The contact is not a junior so if the date of birth has changed then update any existing junior suppression
            If mvClassFields.Item(ContactFields.DateOfBirth).ValueChanged Then
              If IsDate(DateOfBirth) Then
                vValidFrom = DateOfBirth
                ContactSuppression.ContactTypeSaveSuppression(mvEnv, ContactSuppression.SuppressionEntryStyles.sesNoInsertAllowed Or ContactSuppression.SuppressionEntryStyles.sesUpdateValidFrom, ContactTypes.ctcContact, ContactNumber, vJnrSuppression, vValidFrom, CDate(vValidFrom).AddYears(mvEnv.JuniorAgeLimit).ToString(CAREDateFormat))
              End If
            End If
          End If
        End If
      Else
        vNewRecord = True
      End If
      SaveStatusHistory(pAmendedBy)
      If vNewRecord Then
        If mvEnv.GetConfigOption("jo_ws_contact_changes") AndAlso ContactType <> ContactTypes.ctcOrganisation Then
          vJournalNumber = mvEnv.AddJournalRecord(JournalTypes.jnlContact, JournalOperations.jnlInsert, ContactNumber, AddressNumber)
          pAudit = True
        End If
      Else
        If pBatchNumber <> 0 Then
          vJournalNumber = mvEnv.AddJournalRecord(JournalTypes.jnlContact, JournalOperations.jnlUpdate, ContactNumber, AddressNumber, 0, 0, 0, pBatchNumber, pTransactionNumber)
          pAudit = True
        End If
      End If
      MyBase.Save(pAmendedBy, pAudit, vJournalNumber)
      If vNewRecord AndAlso ContactType <> ContactTypes.ctcOrganisation Then vCSN.Create(mvEnv, ContactNumber, SurnameWithoutPrefix)
      Me.PrevalidationHonorifics = String.Empty
    End Sub

    Private Sub SaveStatusHistory(ByVal pAmendedBy As String)
      If Existing AndAlso ContactType <> ContactTypes.ctcOrganisation And mvClassFields.Item(ContactFields.Status).ValueChanged Then
        If mvEnv.GetConfigOption("cd_record_status_history") = True Then
          Dim vStatusHistory As New StatusHistory(mvEnv)
          Dim vParams As New CDBParameters
          vParams.Add("ContactNumber", ContactNumber)
          vParams.Add("Status", mvClassFields.Item(ContactFields.Status).SetValue)
          vParams.Add("StatusReason", mvClassFields.Item(ContactFields.StatusReason).SetValue)
          If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbResponseChannel) Then vParams.Add("ResponseChannel", mvClassFields.Item(ContactFields.ResponseChannel).SetValue)
          Dim vEndDate As String = mvClassFields.Item(ContactFields.StatusDate).Value
          If vEndDate.Length = 0 Then vEndDate = TodaysDate()
          vParams.Add("ValidTo", vEndDate)
          vStatusHistory.Create(vParams)
          vStatusHistory.Save(pAmendedBy)
        End If
        Dim vActionSet As New ActionSet
        mvStatusChangedAction = vActionSet.CreateStatusChangeAction(mvEnv, ContactGroupCode, ContactNumber, mvClassFields(ContactFields.Status).SetValue, Status)
      End If
    End Sub

    Public ReadOnly Property AccessCheckAddressLine() As String
      Get
        If CDBEnvironment.GetOwnershipAccessLevel(OwnershipAccessLevel) > CDBEnvironment.OwnershipAccessLevelTypes.oaltBrowse Then
          Return mvCurrentAddress.AddressLine
        Else
          Return ""
        End If
      End Get
    End Property

    Public ReadOnly Property OwnershipGroupDesc() As String
      Get
        GetOwnershipInfo()
        OwnershipGroupDesc = mvOwnershipGroupDesc
      End Get
    End Property
    Public ReadOnly Property PrincipalDepartmentDesc() As String
      Get
        GetOwnershipInfo()
        PrincipalDepartmentDesc = mvPrincipalDepartmentDesc
      End Get
    End Property
    Public ReadOnly Property OwnershipAccessLevel() As String
      Get
        GetOwnershipInfo()
        OwnershipAccessLevel = mvOwnershipAccessLevel
      End Get
    End Property
    Public ReadOnly Property OwnershipAccessLevelDesc() As String
      Get
        GetOwnershipInfo()
        OwnershipAccessLevelDesc = mvOwnershipAccessLevelDesc
      End Get
    End Property

    Private Sub GetOwnershipInfo()
      Dim vRecordSet As CDBRecordSet
      If Not mvOwnershipValid Then
        If mvEnv.OwnershipMethod = CDBEnvironment.OwnershipMethods.omOwnershipGroups Then
          vRecordSet = mvEnv.Connection.GetRecordSet("SELECT ownership_group_desc,department_desc,oal.ownership_access_level,ownership_access_level_desc FROM ownership_groups og, departments d, ownership_group_users ogu, ownership_access_levels oal WHERE og.ownership_group = '" & OwnershipGroup & "' AND d.department = og.principal_department AND ogu.ownership_group = og.ownership_group AND ogu.logname = '" & mvEnv.User.Logname & "' AND ogu.valid_from " & mvEnv.Connection.SQLLiteral("<=", CDBField.FieldTypes.cftDate, (TodaysDate())) & " AND (ogu.valid_to " & mvEnv.Connection.SQLLiteral(">=", CDBField.FieldTypes.cftDate, (TodaysDate())) & " OR ogu.valid_to IS NULL) AND oal.ownership_access_level = ogu.ownership_access_level")
          If vRecordSet.Fetch() Then
            mvOwnershipGroupDesc = vRecordSet.Fields(1).Value
            mvPrincipalDepartmentDesc = vRecordSet.Fields(2).Value
            mvOwnershipAccessLevel = vRecordSet.Fields(3).Value
            mvOwnershipAccessLevelDesc = vRecordSet.Fields(4).Value
          End If
          vRecordSet.CloseRecordSet()
        Else
          If Owners.Exists(mvEnv.User.Department) Then
            mvOwnershipAccessLevel = CDBEnvironment.GetOwnershipAccessLevelCode(CDBEnvironment.OwnershipAccessLevelTypes.oaltWrite)
          Else
            mvOwnershipAccessLevel = CDBEnvironment.GetOwnershipAccessLevelCode(CDBEnvironment.OwnershipAccessLevelTypes.oaltRead)
          End If
        End If
        If mvEnv.User.AccessLevel = CDBUser.UserAccessLevel.ualReadOnly AndAlso mvOwnershipAccessLevel = CDBEnvironment.GetOwnershipAccessLevelCode(CDBEnvironment.OwnershipAccessLevelTypes.oaltWrite) Then
          mvOwnershipAccessLevel = CDBEnvironment.GetOwnershipAccessLevelCode(CDBEnvironment.OwnershipAccessLevelTypes.oaltRead)
          mvOwnershipAccessLevelDesc = mvEnv.GetDescription("ownership_access_levels", "ownership_access_level", mvOwnershipAccessLevel)
        End If
        mvOwnershipValid = True
      End If
    End Sub

    Public Shared Function GetContactType(ByVal pType As String) As ContactTypes
      Select Case pType
        Case "C"
          GetContactType = ContactTypes.ctcContact
        Case "J"
          GetContactType = ContactTypes.ctcJoint
        Case Else
          GetContactType = ContactTypes.ctcOrganisation
      End Select
    End Function

    Public Sub SetAmended(ByRef pAmendedOn As String, ByRef pAmendedBy As String)
      mvClassFields.Item(ContactFields.AmendedOn).Value = pAmendedOn
      mvClassFields.Item(ContactFields.AmendedBy).Value = pAmendedBy
      mvAmendedValid = True
    End Sub

    Private Function IsJunior() As Boolean
      If mvJuniorContact Then
        Return True
      Else
        If IsDate(DateOfBirth) Then
          If CDate(DateOfBirth).AddYears(mvEnv.JuniorAgeLimit) < Today Then
            Return False
          Else
            Return True
          End If
        End If
      End If
    End Function

    Public Property JuniorContact() As Boolean
      Get
        Return mvJuniorContact
      End Get
      Set(ByVal Value As Boolean)
        mvJuniorContact = Value
      End Set
    End Property

    Public ReadOnly Property CommsDataTableColumns() As String
      Get
        Return "ContactNumber,AddressNumber,DirectNumber,MobileNumber,EMailAddress,SwitchboardNumber,FaxNumber,WebAddress"
      End Get
    End Property

    Public ReadOnly Property CommsDataTable() As CDBDataTable
      Get
        Dim vDirectNumber As String = ""
        Dim vMobileNumber As String = ""
        Dim vEMailAddress As String = ""
        Dim vSwitchboardNumber As String = ""
        Dim vFaxNumber As String = ""
        Dim vWebAddress As String = ""
        Dim vComm As New Communication(mvEnv)
        Dim vWhereFields As New CDBFields
        vWhereFields.Add(mvClassFields(ContactFields.ContactNumber).Name, ContactNumber)
        vWhereFields.Add("is_active", "Y")
        Dim vContactComms As List(Of Communication) = vComm.GetList(Of Communication)(vComm, vWhereFields)
        For Each vContactComm As Communication In vContactComms
          If vContactComm.Device = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDirectDevice) Then
            If (vDirectNumber.Length = 0 OrElse vContactComm.DeviceDefault) AndAlso vContactComm.ExDirectory = False Then vDirectNumber = vContactComm.PhoneNumber
          ElseIf vContactComm.Device = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlMobileDevice) Then
            If (vMobileNumber.Length = 0 OrElse vContactComm.DeviceDefault = True) AndAlso vContactComm.ExDirectory = False Then vMobileNumber = vContactComm.PhoneNumber
          ElseIf vContactComm.Device = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlEmailDevice) Then
            If vEMailAddress.Length = 0 OrElse vContactComm.DeviceDefault = True Then vEMailAddress = vContactComm.Number
          End If
        Next
        Dim vPositionComms As List(Of Communication)
        If Address.AddressType = Address.AddressTypes.ataOrganisation Then
          vWhereFields.Clear()
          vWhereFields.Add(mvClassFields(ContactFields.AddressNumber).Name, AddressNumber)
          vWhereFields.Add("is_active", "Y")
          vPositionComms = vComm.GetList(Of Communication)(vComm, vWhereFields)
          For Each vOrgComm As Communication In vPositionComms
            If vOrgComm.Device = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlSwitchboardDevice) Then
              If vSwitchboardNumber.Length = 0 OrElse vOrgComm.DeviceDefault Then vSwitchboardNumber = vOrgComm.PhoneNumber
            ElseIf vOrgComm.Device = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlFaxDevice) Then
              If vFaxNumber.Length = 0 OrElse vOrgComm.DeviceDefault = True Then vFaxNumber = vOrgComm.PhoneNumber
            ElseIf vOrgComm.Device = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlWebDevice) Then
              If vWebAddress.Length = 0 OrElse vOrgComm.DeviceDefault = True Then vWebAddress = vOrgComm.Number
            End If
          Next
        End If
        Dim vTable As New CDBDataTable
        vTable.AddColumnsFromList(CommsDataTableColumns)
        Dim vRow As CDBDataRow = vTable.AddRow
        With vRow
          .Item(1) = CStr(ContactNumber)
          .Item(2) = CStr(AddressNumber)
          .Item(3) = vDirectNumber
          .Item(4) = vMobileNumber
          .Item(5) = vEMailAddress
          .Item(6) = vSwitchboardNumber
          .Item(7) = vFaxNumber
          .Item(8) = vWebAddress
        End With
        Return vTable
      End Get
    End Property

    Public Overrides ReadOnly Property DataTable() As CDBDataTable
      Get
        'This function is only used by WEB Services at present
        'Please let me know if you want to change it (SDT)
        Dim vOrganisation As New Organisation(mvEnv)
        Dim vWhereFields As New CDBFields

        If ContactType = ContactTypes.ctcOrganisation Then vOrganisation.Init(ContactNumber)
        Dim vTable As New CDBDataTable
        vTable.AddColumnsFromList(DataTableColumns)
        Dim vRow As CDBDataRow = vTable.AddRow
        With vRow
          .Item(1) = CStr(ContactNumber)
          .Item(2) = CStr(AddressNumber)
          .Item(3) = Name
          .Item(4) = TitleName
          .Item(5) = Initials
          .Item(6) = Forenames
          .Item(7) = Surname
          .Item(8) = Honorifics
          .Item(9) = mvClassFields(ContactFields.Salutation).Value
          .Item(10) = LabelName
          .Item(11) = PreferredForename
          .Item(12) = SexCode
          .Item(13) = DateOfBirth
          vTable.Columns.Item(13).FieldType = CDBField.FieldTypes.cftDate
          If ContactType = ContactTypes.ctcOrganisation Then
            .Item(14) = vOrganisation.Source
            .Item(15) = vOrganisation.SourceDate
            .Item(16) = vOrganisation.SourceDesc
            .Item(17) = vOrganisation.Status
            .Item(18) = vOrganisation.StatusDesc
            .Item(19) = vOrganisation.StatusDate
            .Item(20) = vOrganisation.StatusReason
            .Item(21) = vOrganisation.PhoneNumber
            .Item(74) = vOrganisation.StatusRgbValue.ToString
          Else
            .Item(14) = Source
            .Item(15) = SourceDate
            .Item(16) = SourceDesc
            .Item(17) = Status
            .Item(18) = StatusDesc
            .Item(19) = StatusDate
            .Item(20) = StatusReason
            .Item(21) = PhoneNumber
            .Item(74) = StatusRgbValue.ToString
          End If
          vTable.Columns.Item(15).FieldType = CDBField.FieldTypes.cftDate
          vTable.Columns.Item(19).FieldType = CDBField.FieldTypes.cftDate
          .Item(22) = mvClassFields(ContactFields.ExDirectory).Value
          .Item(23) = Address.HouseName
          .Item(24) = Address.AddressText
          .Item(25) = Address.Town
          .Item(26) = Address.County
          .Item(27) = Address.Postcode
          .Item(28) = Address.Country
          .Item(29) = Address.CountryDescription
          .Item(30) = Address.BranchName
          .Item(31) = Address.AddressLine
          .Item(32) = mvClassFields(ContactFields.ContactType).Value
          If ContactType = ContactTypes.ctcOrganisation Then
            .Item(33) = Position
            .Item(34) = CStr(vOrganisation.OrganisationNumber)
            .Item(35) = vOrganisation.Name
            .Item(36) = vOrganisation.Abbreviation
            .Item(37) = vOrganisation.Notes
            .Item(38) = vOrganisation.AmendedOn
            .Item(39) = vOrganisation.AmendedBy
            .Item(40) = vOrganisation.OwnershipGroup
            .Item(41) = vOrganisation.OwnershipGroupDesc
            .Item(42) = vOrganisation.PrincipalDepartmentDesc
            .Item(43) = vOrganisation.OwnershipAccessLevel
            .Item(44) = vOrganisation.OwnershipAccessLevelDesc
            .Item(48) = vOrganisation.OrganisationGroupCode
            .Item(78) = vOrganisation.ResponseChannel
          Else
            .Item(33) = Position
            .Item(34) = CStr(OrganisationNumber)
            .Item(35) = OrganisationName
            .Item(36) = ""
            .Item(37) = Notes
            .Item(38) = AmendedOn
            .Item(39) = AmendedBy
            .Item(40) = OwnershipGroup
            .Item(41) = OwnershipGroupDesc
            .Item(42) = PrincipalDepartmentDesc
            .Item(43) = OwnershipAccessLevel
            .Item(44) = OwnershipAccessLevelDesc
            .Item(48) = ContactGroupCode
            .Item(78) = ResponseChannel
          End If
          vTable.Columns.Item(38).FieldType = CDBField.FieldTypes.cftDate
          vWhereFields.Clear()
          vWhereFields.Add("unique_id", CDBField.FieldTypes.cftLong, ContactNumber)
          .Item(45) = CStr(mvEnv.Connection.GetCount("sticky_notes", vWhereFields))
          .Item(46) = mvClassFields(ContactFields.DobEstimated).Value
          .Item(47) = Address.AddressMultiLine
          .Item(49) = CStr(mvEnv.EntityGroups(.Item(48)).RgbValue)
          .Item(50) = CStr(ActionCount)
          If ContactType = ContactTypes.ctcOrganisation Then
            .Item(51) = vOrganisation.Department
          Else
            .Item(51) = Department
          End If
          .Item(52) = VATCategory
          .Item(53) = VATNumber
          .Item(54) = PrincipalUser.PrincipalUserLogname
          .Item(55) = PrincipalUser.PrincipalUserReason
          If ContactType = ContactTypes.ctcOrganisation Then
            .Item(56) = CStr(vOrganisation.ContactNumber) 'J443 unchanged in case the DefaultContactNumber is used elsewhere
            If vOrganisation.ContactNumber <> ContactNumber Then
              .Item(57) = vOrganisation.DefaultContact.Name
            Else
              .Item(57) = "" 'J443 - Organisation Name not to be displayed as DefaultContact
            End If
          Else
            .Item(56) = ""
            .Item(57) = ""
          End If
          .Item(58) = mvEnv.GetDescription("departments", "department", .Item(51)) 'Item(51) is Deparment
          .Item(59) = "" 'StatusGroup
          .Item(60) = "" 'StatusGroupDesc    - Only populated if chosen and used by web services
          If PrincipalUser.Existing Then
            .Item(61) = PrincipalUser.PrincipalUserName
            .Item(62) = PrincipalUser.PrincipalUserContact.PhoneNumber
          End If
          .Item(63) = Address.Branch
          .Item(64) = PreferredCommunication
          If ContactType = ContactTypes.ctcOrganisation Then
            .Item(65) = vOrganisation.WebAddress
          Else
            .Item(65) = WebAddress
          End If
          .Item(66) = PrefixHonorifics
          .Item(67) = SurnamePrefix
          .Item(68) = InformalSalutation
          If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataDutchSupport) Then .Item(69) = Address.BuildingNumber
          .Item(70) = If(Address.AddressType = Address.AddressTypes.ataContact, "C", "O")
          .Item(71) = NameGatheringSource
          .Item(72) = NiNumber
          If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLabelNameFormatCode) Then
            .Item(73) = LabelNameFormatCode
          End If
          If mvPositionCurrent Then
            Dim vPosition As String = Position
            If OrganisationName.Length > 0 Then
              If Position.Length > 0 Then vPosition = vPosition & ", "
              vPosition = vPosition & OrganisationName
            End If
            .Item(75) = vPosition
          Else
            .Item(75) = ""
          End If
          If mvHistoricalAddress Then
            .Item(76) = ""
            .Item(77) = ""
          Else
            .Item(76) = Address.AddressLine
            .Item(77) = Address.AddressMultiLine
          End If
          .Item(79) = mvEnv.GetDescription("response_channels", "response_channel", .Item(78)) 'Item(78) is Response Channel
          If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbExamsQualsRegistrationGrading) Then
            .Item(80) = ContactReference
          Else
            .Item(80) = ""
          End If
        End With
        Return vTable
      End Get
    End Property

    Public Function IsJointContact(ByVal pTitles As SortedList(Of String, Title), ByRef pTitle As Title) As Boolean
      If LabelNameFormatCode.Length > 0 Then
        'check joint title flag on labelnameformatcodes table
        Dim vJointTitle As String = mvEnv.Connection.GetValue("SELECT joint_title FROM label_name_format_codes WHERE label_name_format_code = '" & LabelNameFormatCode & "'")
        Return BooleanValue(vJointTitle)
      End If
      Dim vTitle As Title = Nothing
      If Not pTitle Is Nothing Then
        If pTitle.Existing Then vTitle = pTitle
      Else
        If pTitles.ContainsKey(TitleName) Then
          vTitle = pTitles(TitleName)
        End If
      End If
      If Not vTitle Is Nothing Then
        Return vTitle.JointTitle
      Else
        If mvEnv.GetConfigOption("cd_joint_contact_support", True) Then
          If InStr(TitleName, "&") > 0 Then
            Return True
          ElseIf InStr(Initials, "&") > 0 Then
            Return True
          ElseIf InStr(Forenames, "&") > 0 Then
            Return True
          ElseIf InStr(Surname, "&") > 0 Then
            Return True
          End If
        End If
      End If
    End Function

    Public Shared Function GetTitles(ByVal pEnv As CDBEnvironment) As SortedList(Of String, Title)
      Dim vTitle As New Title()
      vTitle.Init(pEnv)
      Dim vSQL As New SQLStatement(pEnv.Connection, vTitle.GetRecordSetFields(Title.TitleRecordSetTypes.trtAll), "titles")
      Dim vTitles As New SortedList(Of String, Title)
      Dim vRS As CDBRecordSet = vSQL.GetRecordSet
      While vRS.Fetch
        vTitle = New Title
        vTitle.InitFromRecordSet(pEnv, vRS, Title.TitleRecordSetTypes.trtAll)
        vTitles.Add(vRS.Fields(1).Value, vTitle)
      End While
      vRS.CloseRecordSet()
      Return vTitles
    End Function

    Public Sub SetStatus(ByVal pParams As CDBParameters)
      'Used by Smart Client, Web Services and ContactOrg Data Import
      Dim vStatusChanged As Boolean = False
      Dim vGoneAwayRemoved As Boolean = False
      Dim vPreviousStatusDate As Date
      If pParams.Exists("Status") Then
        vStatusChanged = Status <> pParams("Status").Value
        If Status = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAStatus) AndAlso vStatusChanged Then
          'Status was Gone Away now being changed or cleared so Remove Gone Away
          vGoneAwayRemoved = True
          If IsDate(StatusDate) Then
            vPreviousStatusDate = DateValue(StatusDate)
          End If
        End If
        Status = pParams("Status").Value
      End If
      If pParams.Exists("StatusReason") Then StatusReason = pParams("StatusReason").Value
      If pParams.Exists("StatusDate") Then StatusDate = pParams("StatusDate").Value

      Dim vControlStatus As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDeceasedStatus)
      If ContactType = ContactTypes.ctcOrganisation Then vControlStatus = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlClosedOrganisationStatus)
      If mvClassFields.Item(ContactFields.Status).ValueChanged = True AndAlso vControlStatus.Length > 0 Then
        If pParams("Status").Value = vControlStatus Then
          If mvStatusUpdateTypes.Length = 0 Then mvStatusUpdateTypes = UCase$(mvEnv.GetConfig("cd_close_contact_historic_data"))
          If mvStatusUpdateTypes.Length > 0 Then
            If mvStatusUpdateTypes.Contains("PAYPLANS") = True AndAlso pParams.Exists("CancellationReason") = False Then
              Dim vWhereFields As New CDBFields(New CDBField("contact_number", ContactNumber))
              vWhereFields.Add("cancellation_reason", "", CDBField.FieldWhereOperators.fwoEqual)
              If mvEnv.Connection.GetCount("orders", vWhereFields) > 0 Then RaiseError(DataAccessErrors.daeSetStatusCancelReasonRequired, vControlStatus)
            End If
          End If
        End If
      End If

      If ContactType <> ContactTypes.ctcOrganisation AndAlso vStatusChanged Then
        If Status = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAStatus) Then
          'If status is Gone Away status then Mark as Gone Away
          MarkAsGoneAway(pSaveContact:=False, pSetStatusReason:=False)
        ElseIf vGoneAwayRemoved Then
          'If Gone Away status removed then remove Gone Away status / suppression
          RemoveGoneAway(False, True, vPreviousStatusDate)
        End If

        If ContactType = ContactTypes.ctcJoint Then
          'If joint then set status on individuals within the joint
          For Each vIndividualLink As ContactLink In GetJointLinks()
            Dim vIndividualContact As New Contact(mvEnv)
            vIndividualContact.Init(vIndividualLink.ContactNumber2)
            If vIndividualContact.Status <> mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDeceasedStatus) Then
              '20339: if individual status isn't deceased then update the status from the joint
              vStatusChanged = vIndividualContact.Status <> Status
              vGoneAwayRemoved = (vIndividualContact.Status = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAStatus) AndAlso vStatusChanged)
              vIndividualContact.Status = Status
              vIndividualContact.StatusDate = StatusDate
              vIndividualContact.StatusReason = StatusReason
              If vStatusChanged AndAlso vIndividualContact.Status = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlGAStatus) Then
                'If status is Gone Away status then Mark as Gone Away with status reason 'automatic'
                vIndividualContact.MarkAsGoneAway(pSaveContact:=False, pSetStatusReason:=True)
              ElseIf vGoneAwayRemoved Then
                'If Gone Away status removed then remove Gone Away status / suppression
                vIndividualContact.RemoveGoneAway(False, True, vPreviousStatusDate)
              End If
              vIndividualContact.Save()
            End If
          Next
        End If
      End If
    End Sub

    Public Sub SetHistoricData(ByVal pParams As CDBParameters)
      'Used by Smart Client / Web Services only for Contacts & Organisations
      If mvClassFields.Item(ContactFields.Status).ValueChanged Then
        Dim vControlStatus As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDeceasedStatus)
        If ContactType = ContactTypes.ctcOrganisation Then vControlStatus = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlClosedOrganisationStatus)
        Dim vSetHistoricData As Boolean
        If vControlStatus.Length > 0 Then
          If pParams("Status").Value = vControlStatus Then vSetHistoricData = True
        End If
        If vSetHistoricData Then
          'Contact / Organisation Status has been set to the Deceased / Closed Status so set data as historic
          If mvStatusUpdateTypes.Length = 0 Then mvStatusUpdateTypes = UCase$(mvEnv.GetConfig("cd_close_contact_historic_data"))
          Dim vTrans As Boolean
          Dim vUpdateFields As CDBFields
          Dim vWhereFields As CDBFields
          If mvStatusUpdateTypes.Length > 0 Then
            If mvEnv.Connection.InTransaction = False Then
              mvEnv.Connection.StartTransaction()
              vTrans = True
            End If
            If InStr(mvStatusUpdateTypes, "PAYPLANS") > 0 And pParams.HasValue("CancellationReason") = True Then
              'Cancel all Payment Plans
              vWhereFields = New CDBFields
              vWhereFields.Add("contact_number", CDBField.FieldTypes.cftLong, ContactNumber)
              vWhereFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, "")
              Dim vPaymentPlan As New PaymentPlan
              vPaymentPlan.Init(mvEnv)
              Dim vSQL As String = "SELECT " & vPaymentPlan.GetRecordSetFields(PaymentPlan.PayPlanRecordSetTypes.pprstAll) & " FROM orders o WHERE " & mvEnv.Connection.WhereClause(vWhereFields)
              Dim vRS As CDBRecordSet
              vRS = mvEnv.Connection.GetRecordSet(vSQL)
              While vRS.Fetch
                vPaymentPlan = New PaymentPlan
                vPaymentPlan.InitFromRecordSet(mvEnv, vRS, PaymentPlan.PayPlanRecordSetTypes.pprstAll)
                vPaymentPlan.Cancel(PaymentPlan.PaymentPlanCancellationTypes.pctPaymentPlan, pParams("CancellationReason").Value, "", "", mvEnv.User.UserID, pParams.ParameterExists("CancellationSource").Value)
              End While
              vRS.CloseRecordSet()
            End If
            If mvStatusUpdateTypes.Contains("ACTIVITIES") Then
              'Set Sctivities as historic
              vWhereFields = New CDBFields
              With vWhereFields
                .Add("contact_number", CDBField.FieldTypes.cftLong, ContactNumber)
                .Add("valid_from", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoLessThanEqual)
                .Add("valid_to", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoGreaterThan)
              End With
              vUpdateFields = New CDBFields(New CDBField("valid_to", CDBField.FieldTypes.cftDate, TodaysDate))
              vUpdateFields.AddAmendedOnBy(mvEnv.User.UserID, TodaysDate)
              mvEnv.Connection.UpdateRecords("contact_categories", vUpdateFields, vWhereFields, False)
              If ContactType = ContactTypes.ctcOrganisation Then
                vWhereFields(1).Name = "organisation_number"
                mvEnv.Connection.UpdateRecords("organisation_categories", vUpdateFields, vWhereFields, False)
              End If
            End If
            If mvStatusUpdateTypes.Contains("RELATIONSHIPS") Then
              'Set Relationships as historic
              vWhereFields = New CDBFields
              With vWhereFields
                .Add("contact_number_1", CDBField.FieldTypes.cftLong, ContactNumber.ToString, CType(CDBField.FieldWhereOperators.fwoEqual + CDBField.FieldWhereOperators.fwoOpenBracket, CDBField.FieldWhereOperators))
                .Add("contact_number_2", CDBField.FieldTypes.cftLong, ContactNumber.ToString, CType(CDBField.FieldWhereOperators.fwoEqual + CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
                .Add("valid_from", CDBField.FieldTypes.cftDate, "", CType(CDBField.FieldWhereOperators.fwoEqual + CDBField.FieldWhereOperators.fwoOpenBracket, CDBField.FieldWhereOperators))
                .Add("valid_from#2", CDBField.FieldTypes.cftDate, TodaysDate, CType(CDBField.FieldWhereOperators.fwoLessThanEqual + CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
                .Add("valid_to", CDBField.FieldTypes.cftDate, "", CType(CDBField.FieldWhereOperators.fwoEqual + CDBField.FieldWhereOperators.fwoOpenBracket, CDBField.FieldWhereOperators))
                .Add("valid_to#2", CDBField.FieldTypes.cftDate, TodaysDate, CType(CDBField.FieldWhereOperators.fwoGreaterThan + CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
                .Add("historical", CDBField.FieldTypes.cftCharacter, "N")
              End With
              vUpdateFields = New CDBFields(New CDBField("valid_to", CDBField.FieldTypes.cftDate, TodaysDate))
              With vUpdateFields
                .Add("historical", "Y")
                .AddAmendedOnBy(mvEnv.User.UserID, TodaysDate)
              End With
              mvEnv.Connection.UpdateRecords("contact_links", vUpdateFields, vWhereFields, False)
              If ContactType = ContactTypes.ctcOrganisation Then
                vWhereFields(1).Name = "organisation_number_1"
                vWhereFields(2).Name = "organisation_number_2"
                mvEnv.Connection.UpdateRecords("organisation_links", vUpdateFields, vWhereFields, False)
              End If
            End If
            If mvStatusUpdateTypes.Contains("GIFTAID") AndAlso Not (ContactType = ContactTypes.ctcOrganisation) Then
              'Set open Gift Aid Declarations as historic (set valid_to set to status_date)
              vWhereFields = New CDBFields
              With vWhereFields
                .Add("contact_number", CDBField.FieldTypes.cftLong, ContactNumber)
                .Add("end_date", CDBField.FieldTypes.cftDate, StatusDate, CDBField.FieldWhereOperators.fwoNullOrGreaterThan)
                .Add("start_date", CDBField.FieldTypes.cftDate, StatusDate, CDBField.FieldWhereOperators.fwoNullOrLessThanEqual)
              End With
              vUpdateFields = New CDBFields(New CDBField("end_date", CDBField.FieldTypes.cftDate, StatusDate))
              vUpdateFields.AddAmendedOnBy(mvEnv.User.UserID)
              mvEnv.Connection.UpdateRecords("gift_aid_declarations", vUpdateFields, vWhereFields, False)
            End If
            If vTrans Then mvEnv.Connection.CommitTransaction()
          End If
        End If
      End If
    End Sub

    Friend Sub ProcessContactPositionsMerge(ByVal pContactMerge As Boolean, ByVal pCheckPositionAddress As Boolean, ByVal pDContact As Contact, ByVal pAllOrigPositions As List(Of ContactPosition), ByVal pAllDupPositions As List(Of ContactPosition))
      Dim vDPStarted As String = ""      'Duplicate Position started
      Dim vDPFinished As String = ""     'Duplicate Position finished
      Dim vOPStarted As String = ""      'Original Position started
      Dim vOPFinished As String = ""     'Original Position finished
      Dim vNewStarted As String = ""     'New original started
      Dim vNewFinished As String = ""    'New original finished
      Dim vNewDupStarted As String = ""  'New duplicate started
      Dim vNewDupFinished As String = "" 'New duplicate finished
      Dim vDeletePositions As New List(Of ContactPosition)  'Positions to be deleted
      Dim vSavePositions As New List(Of ContactPosition)    'For each Position to be deleted, this collection will hold the original ContactPositionNumber

      If pAllOrigPositions.Count > 0 And pAllDupPositions.Count > 0 Then
        Dim vOverlap As Boolean
        Dim vUpdateDupPosition As Boolean
        For Each vDupPosition As ContactPosition In pAllDupPositions
          For Each vOrigPosition As ContactPosition In pAllOrigPositions
            If (pContactMerge = True And (vOrigPosition.OrganisationNumber = vDupPosition.OrganisationNumber)) Or (pContactMerge = False And (vOrigPosition.ContactNumber = vDupPosition.ContactNumber)) Then
              'Contact Merge - Both Positions are for the same Organisation
              'Organisation Merge - Both Positions are for the same Contact
              'A Contact can only have 1 current Position at an Organisation
              vOverlap = False
              vUpdateDupPosition = False
              vDPStarted = If(vDupPosition.Started.Length > 0, vDupPosition.Started, DateSerial(1900, 1, 1).ToString(CAREDateFormat))
              vDPFinished = If(vDupPosition.Finished.Length > 0, vDupPosition.Finished, DateSerial(9998, 12, 31).ToString(CAREDateFormat))
              vOPStarted = If(vOrigPosition.Started.Length > 0, vOrigPosition.Started, DateSerial(1900, 1, 1).ToString(CAREDateFormat))
              vOPFinished = If(vOrigPosition.Finished.Length > 0, vOrigPosition.Finished, DateSerial(9998, 12, 31).ToString(CAREDateFormat))
              vNewStarted = vOrigPosition.Started
              vNewFinished = vOrigPosition.Finished
              vNewDupStarted = vDupPosition.Started
              vNewDupFinished = vDupPosition.Finished

              '1) If we need to account for different sites then try and update duplicate to not overlap
              If pCheckPositionAddress Then
                If (pContactMerge = False) Or (pContactMerge = True And (vOrigPosition.AddressNumber <> vDupPosition.AddressNumber)) Then
                  If (CDate(vDPStarted) < CDate(vOPStarted)) And (CDate(vDPFinished) > CDate(vOPStarted)) Then
                    'Duplicate starts before original
                    If CDate(vDPFinished) >= DateAdd(Microsoft.VisualBasic.DateInterval.Day, 1, CDate(vOPFinished)) Then
                      'Duplicate finishes after original - change the start date
                      vUpdateDupPosition = True
                      vOverlap = True
                      vNewStarted = vDupPosition.Started
                      vNewDupStarted = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, 1, CDate(vOPFinished)))
                    ElseIf CDate(vDPStarted) <= DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, CDate(vOPStarted)) Then
                      'Change the finished date
                      vUpdateDupPosition = True
                      vNewDupFinished = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, CDate(vOPStarted)))
                    End If
                  ElseIf (CDate(vDPFinished) > CDate(vOPFinished)) And (CDate(vDPStarted) < CDate(vOPFinished)) Then
                    'Duplicate ends after original
                    If DateAdd(Microsoft.VisualBasic.DateInterval.Day, 1, CDate(vOPFinished)) <= CDate(vDPFinished) Then
                      'Change start date
                      vUpdateDupPosition = True
                      vNewDupStarted = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, 1, CDate(vOPFinished)))
                    End If
                  End If
                  If vUpdateDupPosition Then
                    With vDupPosition
                      .Update(.Position, .Mail, .Current, vNewDupStarted, vNewDupFinished, .PositionLocation, 0, .PositionFunction, .PositionSeniority)
                      .Save()
                    End With
                    vDPStarted = If(vDupPosition.Started.Length > 0, vDupPosition.Started, DateSerial(1900, 1, 1).ToString(CAREDateFormat))
                    vDPFinished = If(vDupPosition.Finished.Length > 0, vDupPosition.Finished, DateSerial(9998, 12, 31).ToString(CAREDateFormat))
                  End If
                End If
              End If

              '2) Original & Duplicate overlap with Original starting before Duplicate
              If CDate(vOPStarted) < CDate(vDPStarted) Then
                'Original started before Duplicate started
                If CDate(vOPFinished) > CDate(vDPStarted) Then
                  'Original finished after Duplicate started
                  vOverlap = True
                  'Duplicate finished after original?
                  If CDate(vDPFinished) > CDate(vOPFinished) Then vNewFinished = vDupPosition.Finished
                End If
              End If

              '3) Original & Duplicate overlap with Duplicate starting before Original
              If CDate(vOPStarted) > CDate(vDPStarted) Then
                'Original started after Duplicate
                If CDate(vDPFinished) > CDate(vOPStarted) Then
                  'Original started before Duplicate finished
                  vOverlap = True
                  'Duplicate finished after original?
                  vNewStarted = vDupPosition.Started
                  If CDate(vDPFinished) > CDate(vOPFinished) Then vNewFinished = vDupPosition.Finished
                End If
              End If

              '4) Original & Duplicate overlap with both starting on same date
              If CDate(vOPStarted) = CDate(vDPStarted) Then
                'Both start on same date
                vOverlap = True
                If CDate(vDPFinished) > CDate(vOPFinished) Then vNewFinished = vDupPosition.Finished
              End If

              If vOverlap Then
                If vUpdateDupPosition = False Then
                  vDeletePositions.Add(vDupPosition) 'Add this to a collection of Positions to be deleted
                  vSavePositions.Add(vOrigPosition)
                End If

                'Check that changing Position dates will not cause an overlap
                For Each vPosition As ContactPosition In pAllOrigPositions
                  If vPosition.ContactPositionNumber <> vOrigPosition.ContactPositionNumber Then
                    If (pContactMerge = True And (vOrigPosition.OrganisationNumber = vPosition.OrganisationNumber)) Or (pContactMerge = False And (vOrigPosition.ContactNumber = vPosition.ContactNumber)) Then
                      If IsDate(vPosition.Started) Or IsDate(vPosition.Finished) Then
                        If IsDate(vPosition.Started) And IsDate(vNewStarted) Then
                          If CDate(vNewStarted) < CDate(vPosition.Started) Then
                            If IsDate(vNewFinished) Then
                              If CDate(vNewFinished) > CDate(vPosition.Started) Then
                                vNewFinished = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, CDate(vPosition.Started)))
                              End If
                            Else
                              vNewFinished = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, CDate(vPosition.Started)))
                            End If
                          Else
                            If IsDate(vPosition.Finished) Then
                              If CDate(vPosition.Finished) >= CDate(vNewStarted) Then
                                vNewStarted = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, 1, CDate(vPosition.Finished)))
                              End If
                            End If
                          End If
                        ElseIf IsDate(vPosition.Started) Then
                          If IsDate(vNewFinished) Then
                            If CDate(vNewFinished) >= CDate(vPosition.Started) Then
                              vNewFinished = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, CDate(vPosition.Started)))
                            End If
                          Else
                            vNewFinished = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, CDate(vPosition.Started)))
                          End If
                        ElseIf IsDate(vNewStarted) Then
                          If IsDate(vPosition.Finished) Then
                            If CDate(vNewStarted) <= CDate(vPosition.Finished) Then
                              vNewStarted = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, 1, CDate(vPosition.Finished)))
                            End If
                          End If
                        Else
                          vNewStarted = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, 1, CDate(vPosition.Finished)))
                        End If
                      Else
                        '
                      End If
                    End If
                  End If
                Next vPosition
                With vOrigPosition
                  If vUpdateDupPosition Then
                    .Update(.Position, .Mail, .Current, vNewStarted, vNewFinished, .PositionLocation, 0, .PositionFunction, .PositionSeniority)
                  Else
                    'Duplicate Position is to be deleted so if Position/Location/Function/Seniority not set then set them from the duplicate
                    .Update(If(.Position.Length > 0, .Position, vDupPosition.Position), .Mail, .Current, vNewStarted, vNewFinished, If(.PositionLocation.Length > 0, .PositionLocation, vDupPosition.PositionLocation), 0, If(.PositionFunction.Length > 0, .PositionFunction, vDupPosition.PositionFunction), If(.PositionSeniority.Length > 0, .PositionSeniority, vDupPosition.PositionSeniority))
                  End If
                End With
              End If
            End If
          Next vOrigPosition
        Next vDupPosition

        'Now update / delete everything as required
        If vDeletePositions.Count > 0 Then
          mvEnv.Connection.StartTransaction()
          Dim vWhereFields As New CDBFields(New CDBField("contact_position_number", 0))
          For Each vPosition As ContactPosition In vDeletePositions
            If vPosition.ContactPositionNumber > 0 Then
              vWhereFields(1).Value = vPosition.ContactPositionNumber.ToString
              mvEnv.Connection.DeleteRecords("contact_positions", vWhereFields)
            End If
          Next
          For Each vPosition As ContactPosition In pAllOrigPositions
            vPosition.Save()
          Next vPosition
          mvEnv.Connection.CommitTransaction()

          'Once the Positions are merged, deal with the ContactPositionActivities
          For vIndex As Integer = 0 To vDeletePositions.Count - 1
            DoCategoriesMerge(pDContact, vSavePositions.Item(vIndex).ContactPositionNumber, vDeletePositions.Item(vIndex).ContactPositionNumber)
          Next

          If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPositionLinks) Then
            'Now deal with ContactPositionLinks
            'As with Contact/Organisation Links, ignore any duplicates
            With vWhereFields
              .Clear()
              .Add("contact_position_number")
            End With
            Dim vUpdateFields As New CDBFields(New CDBField("contact_position_number"))
            For vIndex As Integer = 0 To vDeletePositions.Count - 1
              vWhereFields(1).Value = vDeletePositions.Item(vIndex).ContactPositionNumber.ToString
              vUpdateFields(1).Value = vSavePositions.Item(vIndex).ContactPositionNumber.ToString
              mvEnv.Connection.UpdateRecords("contact_position_links", vUpdateFields, vWhereFields, False)
            Next
          End If
        End If
      End If

    End Sub

    Public Sub DoOrgAmalgamation(ByRef pJob As JobSchedule, ByVal pConn As CDBConnection, ByVal pDOrg As Contact, ByVal pDBANotes As String, ByVal pStatus As String, ByVal pOwnershipGroup As String)
      'Amalgamate Organisations
      'This class is the Organisation that will remain live
      'pDOrg is the Organisation that is being closed

      Try
        '1) Process Activities
        pJob.InfoMessage = "Processing Activities"

        Dim vSQLStatement As SQLStatement
        Dim vAmendedBy As String = "Amalgamation"
        Dim vWhereFields As New CDBFields(New CDBField("organisation_number", pDOrg.ContactNumber))
        If mvEnv.Connection.GetCount("organisation_categories", vWhereFields) > 0 Then
          'Only need to do some processing if pDOrg has some categories
          '(a) Find all Categories on old Organisation that need to be transferred to the new Organisation
          With vWhereFields
            .Clear()
            .Add("organisation_number", pDOrg.ContactNumber)
            .Add("valid_from", CDBField.FieldTypes.cftDate, "", CType(CDBField.FieldWhereOperators.fwoEqual + CDBField.FieldWhereOperators.fwoOpenBracket, CDBField.FieldWhereOperators))
            .Add("valid_from#2", CDBField.FieldTypes.cftDate, TodaysDate(), CType(CDBField.FieldWhereOperators.fwoLessThan + CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
            .Add("valid_to", CDBField.FieldTypes.cftDate, "", CType(CDBField.FieldWhereOperators.fwoEqual + CDBField.FieldWhereOperators.fwoOpenBracket, CDBField.FieldWhereOperators))
            .Add("valid_to#2", CDBField.FieldTypes.cftDate, TodaysDate(), CType(CDBField.FieldWhereOperators.fwoGreaterThan + CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
            .Add("notes", CDBField.FieldTypes.cftMemo, "")
          End With
          Dim vOrgCategory As New OrganisationCategory(mvEnv)
          Dim vAttrs As String = vOrgCategory.GetRecordSetFields()
          '(a) Insert new OrganisationCategory starting today (only where notes are null)
          Dim vSQL As String = "INSERT INTO organisation_categories (" & vAttrs.Replace("cc.", "").Replace("notes,", "") & ") SELECT " & vAttrs.Replace("cc.valid_from", pConn.SQLLiteral("", Date.Parse(TodaysDate))).Replace("cc.amended_by", "'" & vAmendedBy & "'").Replace("cc.amended_on", pConn.SQLLiteral("", Date.Parse(TodaysDate))).Replace("notes,", "")
          vSQL &= " FROM organisation_categories cc WHERE " & pConn.WhereClause(vWhereFields)
          pConn.StartTransaction()
          pConn.ExecuteSQL(vSQL, CDBConnection.cdbExecuteConstants.sqlIgnoreDuplicate)
          '(b) Insert new OrganisationCategory starting today (only where notes are not null - as notes is a memo field they have to be dealt with separately for Oracle)
          vWhereFields("notes").WhereOperator = CDBField.FieldWhereOperators.fwoNotEqual
          vSQLStatement = New SQLStatement(mvEnv.Connection, vAttrs, "organisation_categories cc", vWhereFields)
          Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
          Dim vOrigCategory As OrganisationCategory
          Dim vNewCategory As OrganisationCategory
          While vRS.Fetch
            vOrigCategory = New OrganisationCategory(mvEnv)
            vOrigCategory.InitFromRecordSet(vRS)
            vNewCategory = New OrganisationCategory(mvEnv)
            vNewCategory.AmalgamateOrganisationCategory(vOrigCategory, TodaysDate, vOrigCategory.ValidTo)
            vNewCategory.Save(vAmendedBy, True)
          End While
          vRS.CloseRecordSet()
          '(c) Update existing OrganisationCategory to end yesterday
          vWhereFields.Remove("notes")
          Dim vUpdateFields As New CDBFields(New CDBField("valid_to", CDBField.FieldTypes.cftDate, DateAdd(DateInterval.Day, -1, Date.Parse(TodaysDate)).ToShortDateString))
          vUpdateFields.AddAmendedOnBy(vAmendedBy)
          pConn.UpdateRecords("organisation_categories", vUpdateFields, vWhereFields, False)
          pConn.CommitTransaction()
          '(d) Now perform a standard Categories merge - just merging OrganisationCategories starting on/after today
          DoCategoriesMerge(pDOrg, True)
        End If

        '2) Process Positions
        'A Contact can only have 1 current Position at an Organisation at any time (irrespective of site)
        ' - If the Contacts are the same then check for overlapping Position dates
        pJob.InfoMessage = "Processing Positions"
        '(a) Find all Positions on old Organisation
        With vWhereFields
          .Clear()
          .Add("organisation_number", pDOrg.ContactNumber)
        End With
        If pConn.GetCount("contact_positions", vWhereFields, "") > 0 Then
          Dim vCP As New ContactPosition(mvEnv)
          Dim vAllDupPositions As New List(Of ContactPosition)
          Dim vAllOrigPositions As New List(Of ContactPosition)
          vWhereFields.Add("contact_number", CDBField.FieldTypes.cftInteger, pDOrg.ContactNumber.ToString, CDBField.FieldWhereOperators.fwoNotEqual)
          vSQLStatement = New SQLStatement(pConn, vCP.GetRecordSetFields(), "contact_positions cp", vWhereFields, "contact_number, started" & mvEnv.Connection.DBSortByNullsFirst & ", finished" & IIf(mvEnv.Connection.NullsSortAtEnd, "", " DESC").ToString)
          Dim vDPosUpdateParams As New CDBParameters()
          vDPosUpdateParams.Add("Finished", CDBField.FieldTypes.cftDate, DateAdd(DateInterval.Day, -1, Date.Parse(TodaysDate)).ToShortDateString)
          Dim vOPosUpdateParams As New CDBParameters()
          vOPosUpdateParams.Add("Started", CDBField.FieldTypes.cftDate, TodaysDate())
          vOPosUpdateParams.Add("AddressNumber", AddressNumber)
          Dim vNewCP As ContactPosition
          Dim vPosRS As CDBRecordSet = vSQLStatement.GetRecordSet()
          While vPosRS.Fetch
            vCP = New ContactPosition(mvEnv)
            vCP.InitFromRecordSet(vPosRS)
            If (IsDate(vCP.Started) = False) OrElse (IsDate(vCP.Started) AndAlso CDate(vCP.Started) <= CDate(TodaysDate())) Then
              If (IsDate(vCP.Finished) = False) OrElse (IsDate(vCP.Finished) AndAlso CDate(vCP.Finished) >= CDate(TodaysDate())) Then
                '(b i) End the current Position and create a new Position to move to the new Organisation
                vNewCP = New ContactPosition(mvEnv)
                vNewCP.Clone(vCP)
                vNewCP.Update(vOPosUpdateParams)
                vAllDupPositions.Add(vNewCP)
                vCP.Update(vDPosUpdateParams)
                pConn.StartTransaction()
                vCP.SaveWithAddressLink(True, vAmendedBy)
                vNewCP.Save(vAmendedBy)
                vNewCP.SaveWithAddressLink(True, vAmendedBy)
                vNewCP.ClonePositionData(vCP.ContactPositionNumber, TodaysDate, vAmendedBy)
                vCP.UpdatePositionData()
                pConn.CommitTransaction()
              End If
            ElseIf IsDate(vCP.Started) AndAlso CDate(vCP.Started) > CDate(TodaysDate()) Then
              '(b ii) Move Position to new Organisation
              vAllDupPositions.Add(vCP)
            End If
          End While
          vPosRS.CloseRecordSet()

          '(c) Find all Positions on current Organisation
          vWhereFields(1).Value = ContactNumber.ToString
          vWhereFields(2).Value = ContactNumber.ToString
          vCP = New ContactPosition(mvEnv)
          vSQLStatement = New SQLStatement(pConn, vCP.GetRecordSetFields(), "contact_positions cp", vWhereFields, "contact_number, started" & mvEnv.Connection.DBSortByNullsFirst & ", finished" & IIf(mvEnv.Connection.NullsSortAtEnd, "", " DESC").ToString)
          vPosRS = vSQLStatement.GetRecordSet()
          While vPosRS.Fetch
            vCP = New ContactPosition(mvEnv)
            vCP.InitFromRecordSet(vPosRS)
            vAllOrigPositions.Add(vCP)
          End While
          vPosRS.CloseRecordSet()

          '(d) Perform a standard Positions merge
          ProcessContactPositionsMerge(False, True, pDOrg, vAllOrigPositions, vAllDupPositions)

          '(e) Now move any remaining Positions to the new Organisation (need to move ContactAddresses as well)
          With vWhereFields
            .Clear()
            .Add("organisation_number", pDOrg.ContactNumber)
            .Add("started", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
          End With
          With vOPosUpdateParams
            .Clear()
            .Add("OrganisationNumber", ContactNumber)
            .Add("AddressNumber", AddressNumber)
          End With
          vCP = New ContactPosition(mvEnv)
          vSQLStatement = New SQLStatement(pConn, vCP.GetRecordSetFields, "contact_positions cp", vWhereFields)
          vPosRS = vSQLStatement.GetRecordSet()
          While vPosRS.Fetch
            vCP = New ContactPosition(mvEnv)
            vCP.InitFromRecordSet(vPosRS)
            vCP.Update(vOPosUpdateParams)
            vCP.SaveWithAddressLink(True, vAmendedBy, True)
          End While
          vPosRS.CloseRecordSet()
        End If

        '(3) Process Relationships
        pJob.InfoMessage = "Processing Relationships"

        '(i) OrganisationLinks
        With vWhereFields
          .Clear()
          .Add("organisation_number_1", CDBField.FieldTypes.cftInteger, ContactNumber & "," & pDOrg.ContactNumber, CDBField.FieldWhereOperators.fwoIn)
          .Add("organisation_number_2", CDBField.FieldTypes.cftInteger, ContactNumber & "," & pDOrg.ContactNumber, CType(CDBField.FieldWhereOperators.fwoIn + CDBField.FieldWhereOperators.fwoOR, CDBField.FieldWhereOperators))
        End With
        If pConn.GetCount("organisation_links", vWhereFields, "") > 0 Then
          '(a) Find all Relationships that are current and need to be moved to the new Organisation
          Dim vAttr1 As String = "organisation_number_1"
          Dim vAttr2 As String = "organisation_number_2"
          Dim vUpdateFields As New CDBFields
          For vIndex As Integer = 1 To 2
            If vIndex = 2 Then
              vAttr1 = "organisation_number_2"
              vAttr2 = "organisation_number_1"
            End If
            With vWhereFields
              .Clear()
              .Add(vAttr1, pDOrg.ContactNumber)
              .Add(vAttr2, ContactNumber, CDBField.FieldWhereOperators.fwoNotEqual)
              .Add("valid_from", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOpenBracket)
              .Add("valid_from#2", CDBField.FieldTypes.cftDate, TodaysDate, CType(CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoLessThan + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
              .Add("valid_to", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOpenBracket)
              .Add("valid_to#2", CDBField.FieldTypes.cftDate, TodaysDate, CType(CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoGreaterThanEqual + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
            End With
            Dim vOrgLink As New OrganisationLink(mvEnv)
            Dim vNewOrgLink As OrganisationLink
            vSQLStatement = New SQLStatement(pConn, vOrgLink.GetRecordSetFields(), "organisation_links ol", vWhereFields)
            Dim vLinkRS As CDBRecordSet = vSQLStatement.GetRecordSet()
            Dim vDLinkUpdateParams As New CDBParameters
            vDLinkUpdateParams.Add("ValidTo", CDBField.FieldTypes.cftDate, DateAdd(DateInterval.Day, -1, Date.Parse(TodaysDate)).ToShortDateString)
            Dim vOLinkUpdateParams As New CDBParameters
            vOLinkUpdateParams.Add("ValidFrom", CDBField.FieldTypes.cftDate, TodaysDate)
            While vLinkRS.Fetch
              vOrgLink = New OrganisationLink(mvEnv)
              vOrgLink.InitFromRecordSet(vLinkRS)
              vNewOrgLink = New OrganisationLink(mvEnv)
              vNewOrgLink.AmalgamateOrganisationChangeContact(vOrgLink, ContactNumber, (vIndex <> 1))
              vOrgLink.Update(vDLinkUpdateParams)
              vNewOrgLink.Update(vOLinkUpdateParams)
              If Not UpdateOrganisationLinks(pConn, CARE.Access.ContactLink.ContactLinkTypes.cltOrganisation, vOrgLink, vNewOrgLink, vAmendedBy) Then
                'set end date on amalgamated orgs link
                vOrgLink.Save(vAmendedBy)
              End If
            End While
            vLinkRS.CloseRecordSet()

            '(b) Update all Relationships that start >= Today
            With vWhereFields
              .Clear()
              .Add(vAttr1, pDOrg.ContactNumber)
              .Add(vAttr2, ContactNumber, CDBField.FieldWhereOperators.fwoNotEqual)
              .Add("valid_from", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
            End With
            With vUpdateFields
              .Clear()
              .Add(vAttr1, ContactNumber)
              .AddAmendedOnBy(vAmendedBy)
            End With
            pConn.UpdateRecords("organisation_links", vUpdateFields, vWhereFields, False)
          Next
        End If
        '(ii) ContactLinks
        With vWhereFields
          .Clear()
          .Add("contact_number_1", CDBField.FieldTypes.cftInteger, ContactNumber & "," & pDOrg.ContactNumber, CDBField.FieldWhereOperators.fwoIn)
          .Add("contact_number_2", CDBField.FieldTypes.cftInteger, ContactNumber & "," & pDOrg.ContactNumber, CType(CDBField.FieldWhereOperators.fwoIn + CDBField.FieldWhereOperators.fwoOR, CDBField.FieldWhereOperators))
        End With
        If pConn.GetCount("contact_links", vWhereFields, "") > 0 Then
          '(a) Find all Relationships that are current and need to be moved to the new Organisation
          Dim vAttr1 As String = "contact_number_1"
          Dim vAttr2 As String = "contact_number_2"
          Dim vUpdateFields As New CDBFields
          For vIndex As Integer = 1 To 2
            If vIndex = 2 Then
              vAttr1 = "contact_number_2"
              vAttr2 = "contact_number_1"
            End If
            With vWhereFields
              .Clear()
              .Add(vAttr1, pDOrg.ContactNumber)
              .Add(vAttr2, ContactNumber, CDBField.FieldWhereOperators.fwoNotEqual)
              .Add("valid_from", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOpenBracket)
              .Add("valid_from#2", CDBField.FieldTypes.cftDate, TodaysDate, CType(CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoLessThan + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
              .Add("valid_to", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOpenBracket)
              .Add("valid_to#2", CDBField.FieldTypes.cftDate, TodaysDate, CType(CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoGreaterThanEqual + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
            End With
            Dim vConLink As New ContactLink(mvEnv)
            Dim vNewConLink As ContactLink
            vSQLStatement = New SQLStatement(pConn, vConLink.GetRecordSetFields(), "contact_links cl", vWhereFields)
            Dim vLinkRS As CDBRecordSet = vSQLStatement.GetRecordSet()
            Dim vDLinkUpdateParams As New CDBParameters
            vDLinkUpdateParams.Add("ValidTo", CDBField.FieldTypes.cftDate, DateAdd(DateInterval.Day, -1, Date.Parse(TodaysDate)).ToShortDateString)
            Dim vOLinkUpdateParams As New CDBParameters
            vOLinkUpdateParams.Add("ValidFrom", CDBField.FieldTypes.cftDate, TodaysDate)
            While vLinkRS.Fetch
              vConLink = New ContactLink(mvEnv)
              vConLink.InitFromRecordSet(vLinkRS)
              vNewConLink = New ContactLink(mvEnv)
              vNewConLink.AmalgamateOrganisationChangeContact(vConLink, ContactNumber, (vIndex <> 1))
              vConLink.Update(vDLinkUpdateParams)
              vNewConLink.Update(vOLinkUpdateParams)
              If Not UpdateOrganisationLinks(pConn, CARE.Access.ContactLink.ContactLinkTypes.cltContact, vConLink, vNewConLink, vAmendedBy) Then
                'set end date on amalgamated contact link
                vConLink.Save(vAmendedBy)
              End If
            End While
            vLinkRS.CloseRecordSet()

            '(b) Update all Relationships that start >= Today
            With vWhereFields
              .Clear()
              .Add(vAttr1, pDOrg.ContactNumber)
              .Add(vAttr2, ContactNumber, CDBField.FieldWhereOperators.fwoNotEqual)
              .Add("valid_from", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
            End With
            With vUpdateFields
              .Clear()
              .Add(vAttr1, ContactNumber)
              .AddAmendedOnBy(vAmendedBy)
            End With
            pConn.UpdateRecords("contact_links", vUpdateFields, vWhereFields, False)
          Next
        End If

        '4) Update Organisation as required
        pJob.InfoMessage = "Updating Amalgamated Organisation"

        Dim vOrgUpdateParams As New CDBParameters
        vOrgUpdateParams.Add("Status", pStatus)
        vOrgUpdateParams.Add("OwnershipGroup", pOwnershipGroup)
        Dim vOrg As New Organisation(mvEnv)
        vOrg.Init(pDOrg.ContactNumber)
        vOrg.Update(vOrgUpdateParams)
        pDOrg.Update(vOrgUpdateParams)
        pConn.StartTransaction()
        vOrg.Save(vAmendedBy)
        pDOrg.Save(vAmendedBy)
        pConn.CommitTransaction()

        '5) Insert dba notes
        pJob.InfoMessage = "Completing Amalgamation"

        Dim vInsertFields As New CDBFields(New CDBField("master", ContactNumber))
        vInsertFields.Add("duplicate", pDOrg.ContactNumber)
        vInsertFields.Add("notes", CDBField.FieldTypes.cftMemo, pDBANotes)
        vInsertFields.Add("merged_on", CDBField.FieldTypes.cftDate, TodaysDate)
        pConn.InsertRecord("dba_notes", vInsertFields)

      Catch vEX As Exception
        Throw vEX
      End Try

    End Sub

    Private Function UpdateOrganisationLinks(ByVal pConn As CDBConnection, ByVal pLinkType As ContactLink.ContactLinkTypes, ByVal pOrigLink As ContactLink, ByVal pNewLink As ContactLink, ByVal pAmendedBy As String) As Boolean
      'Used by Organisation Amalgamation and will ignore any duplicate errors
      Dim vMerge As Boolean
      On Error Resume Next
      If pNewLink.MergeLinks(pLinkType) Then
        pConn.StartTransaction()
        pOrigLink.Save(pAmendedBy)
        pNewLink.Save(pAmendedBy)
        pConn.CommitTransaction()
        vMerge = True
      End If
      Return vMerge
    End Function

    Private Sub DoCategoriesMerge(ByVal pDContact As Contact)
      DoCategoriesMerge(pDContact, 0, 0, False)
    End Sub
    Private Sub DoCategoriesMerge(ByVal pDContact As Contact, ByVal pOPositionNumber As Integer, ByVal pDPositionNumber As Integer)
      DoCategoriesMerge(pDContact, pOPositionNumber, pDPositionNumber, False)
    End Sub
    Private Sub DoCategoriesMerge(ByVal pDContact As Contact, ByVal pCheckDates As Boolean)
      DoCategoriesMerge(pDContact, 0, 0, pCheckDates)
    End Sub

    Public ReadOnly Property SalutationValid() As Boolean
      Get
        Return mvSalutationValid
      End Get
    End Property

    Public ReadOnly Property InformalSalutationValid() As Boolean
      Get
        Return mvInformalSalutationValid
      End Get
    End Property

    Public ReadOnly Property LabelNameValid() As Boolean
      Get
        Return mvLabelNameValid
      End Get
    End Property

    Public Function MakeAllPositionsHistoric(ByVal pNewAddress As Address, ByVal pFinished As String, ByVal pMoveType As ContactPosition.PositionMoveTypes, Optional ByVal pNewPosition As String = "", Optional ByVal pNewStarted As String = "", Optional ByVal pNewFinished As String = "", Optional ByVal pNewLocation As String = "", Optional ByVal pNewMail As String = "", Optional ByVal pNewCurrent As String = "", Optional ByVal pNewOrganisationNumber As Integer = 0, Optional ByVal pNewFunction As String = "", Optional ByVal pNewSeniority As String = "") As ContactPosition
      Dim vContactPosition As New ContactPosition(mvEnv)
      Dim vFields As New CDBFields
      Dim vWhereFields As New CDBFields

      ' This procedure assumes that the GetPositions has been called on the contact get get all the current positions for the contact
      If mvContactPositions Is Nothing Then GetPositions(0, 0, "", "", "", ContactPosition.CurrentSettingTypes.cstCurrent)
      If mvContactPositions.Count > 0 Then
        For Each vContactPosition In mvContactPositions
          vContactPosition.UpdateAddresses(Me, pNewAddress, pFinished, pMoveType)
        Next vContactPosition
        With vWhereFields
          .Clear()
          .Add("contact_number", CDBField.FieldTypes.cftLong, ContactNumber)
          .Add("is_active", CDBField.FieldTypes.cftCharacter, "Y")
        End With

        'Mark the roles as Historic
        If pFinished <> "" Then
          With vFields
            .Clear()
            .AddAmendedOnBy(AmendedBy, AmendedOn)
            .Add("valid_to", CDBField.FieldTypes.cftDate, pFinished)
            .Add("is_active", CDBField.FieldTypes.cftCharacter, "N")
            mvEnv.Connection.UpdateRecords("contact_roles", vFields, vWhereFields, False)
          End With
        End If
        'Mark the Positions as Historic
        vWhereFields(2).Name = "current"
        vWhereFields(2).SpecialColumn = True
        With vFields
          .Clear()
          .AddAmendedOnBy(AmendedBy, AmendedOn)
          .Add("mail", CDBField.FieldTypes.cftCharacter, "N")
          .Add("current", CDBField.FieldTypes.cftCharacter, "N")
          .Item("current").SpecialColumn = True
          .Add("finished", CDBField.FieldTypes.cftDate, pFinished)
          mvEnv.Connection.UpdateRecords("contact_positions", vFields, vWhereFields, False)
        End With
      End If
      If pMoveType <> ContactPosition.PositionMoveTypes.pmtLeave Then
        vContactPosition = New ContactPosition(mvEnv)
        vContactPosition.Create(ContactNumber, If(pNewAddress Is Nothing, 0, pNewAddress.AddressNumber), pNewOrganisationNumber, pNewMail, pNewCurrent, pNewPosition, pNewStarted, pNewFinished, pNewLocation, pNewFunction, pNewSeniority)
        vContactPosition.Save()
        Return vContactPosition
      Else
        Return Nothing
      End If
    End Function

    Public Function UpdateJointContact(ByVal pJoint As Integer, ByVal pContact2 As Integer) As Boolean
      Dim vJoint As New Contact(mvEnv)
      Dim vContact2 As New Contact(mvEnv)

      vJoint.Init(pJoint)
      vContact2.Init(pContact2)

      If vJoint.Existing And vContact2.Existing Then
        If vJoint.ContactType = ContactTypes.ctcJoint And vContact2.ContactType <> ContactTypes.ctcJoint Then
          With vContact2
            If Surname = .Surname Then 'Same surname
              vJoint.Surname = Surname
              If Len(TitleName) > 0 And Len(.TitleName) > 0 Then 'Salutation is Dear xx & xx surname
                vJoint.Salutation = "Dear " & TitleName & " & " & .TitleName & " " & Surname
              Else
                vJoint.Salutation = "Dear Members"
              End If
              'Label name is Title Initials & Title Initials Surname
              vJoint.LabelName = LTrim(TitleName & " ") & LTrim(Initials & " ") & "& " & LTrim(.TitleName & " ") & LTrim(.Initials & " ") & Surname
            Else 'Different surname
              vJoint.Surname = Surname & " & " & .Surname
              If Len(TitleName) > 0 And Len(.TitleName) > 0 Then 'Salutation is Dear xx surname & xx joint surname
                vJoint.Salutation = "Dear " & TitleName & " " & Surname & " & " & .TitleName & " " & .Surname
              Else
                vJoint.Salutation = "Dear Members"
              End If
              'Label name is Title Initials Surname & Title Initials Surname
              vJoint.LabelName = LTrim(TitleName & " ") & LTrim(Initials & " ") & Surname & " & " & LTrim(.TitleName & " ") & LTrim(.Initials & " ") & .Surname
            End If
          End With
          vJoint.Save()
          Return True
        End If
      Else
        Return False
      End If
    End Function

    Public Sub UpdateDummyContactInfo(ByVal pSurname As String, ByVal pLabelName As String, ByVal pSource As String, ByVal pSourceDate As String, ByVal pDepartment As String)
      If mvClassFields(ContactFields.LabelName).Value.Length = 0 Then mvClassFields(ContactFields.LabelName).Value = pLabelName
      mvClassFields(ContactFields.Surname).Value = pSurname
      mvClassFields(ContactFields.Source).Value = pSource
      mvClassFields(ContactFields.SourceDate).Value = pSourceDate
      mvSourceDesc = ""
      Department = pDepartment
      UpdateOwner()
    End Sub

    Public Property AddressHistorical As Boolean
      Get
        Return mvAddressHistorical
      End Get
      Set(value As Boolean)
        mvAddressHistorical = value
      End Set
    End Property
    Public Property ContactGroup As ContactGroup
      Get
        If mvContactGroup Is Nothing AndAlso String.IsNullOrWhiteSpace(Me.ContactGroupCode) = False Then
          Me.ContactGroup = Me.GetRelatedInstance(Of ContactGroup)({Contact.ContactFields.ContactGroup})
        End If
        Return mvContactGroup
      End Get
      Set(value As ContactGroup)
        mvContactGroup = value
        If value IsNot Nothing AndAlso value.EntityGroupCode <> Me.ContactGroupCode Then
          Me.ContactGroupCode = value.EntityGroupCode
        End If
      End Set
    End Property

    ''' <summary>Delete the Contact following a Contact Merge.</summary>
    ''' <remarks>This method does NOT check data or delete other related data.
    '''  It must only be called after a merge when we know all related data has been moved.</remarks>
    Friend Sub DeleteMergedContact(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
    End Sub

#End Region

  End Class
End Namespace
