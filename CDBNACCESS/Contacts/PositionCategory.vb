Namespace Access

  Public Class PositionCategory
    Inherits ContactCategory

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      mvClassFields.Add("contact_position_activity_id", CDBField.FieldTypes.cftInteger).PrimaryKey = True
      mvClassFields.Add("contact_position_number", CDBField.FieldTypes.cftLong)
      MyBase.AddFields()
      mvClassFields.RemoveAt(2)   'Remove contact_category_number
      mvClassFields.RemoveAt(2)   'Remove contact_number
      mvClassFields.SetControlNumberField(ContactCategoryFields.ContactCategoryNumber, "PCG")
    End Sub

    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "contact_position_activities"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------

#Region "Non AutoGenerated Code"

    Protected Overrides Sub SetValid()
      MyBase.SetValid()

      If Me.IsMerging = False Then
        If Me.Existing = True AndAlso Me.IsValidForUpdate = False Then
          RaiseError(DataAccessErrors.daeActivityAlreadyExistsInTimePeriod)
        End If
        ValidateAgainstPositionDates()
      End If
    End Sub

    Protected Overrides Sub CheckForQualifyingPositions(ByVal pDelete As Boolean)
      Dim vMaxRegistrationCategory As New ContactCategory(mvEnv)
      Dim vCurrentRegistrationCategory As New ContactCategory(mvEnv)
      Dim vRegDaysAdjustment As Double
      Dim vContactNumber As Integer

      If mvEnv.GetConfigOption("cd_use_qualifying_positions") = True AndAlso
        Activity = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivity) AndAlso
        ActivityValue = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivityVal) Then
        'User is recording a Temporary Registration Position Activity:
        'Set Quantity to duration (days covered)
        'Ensure Maximum Registration & Current Registration have been recorded
        'Modify Qty on Current & Max Registration to reflect that used up.
        vContactNumber = IntegerValue(mvEnv.Connection.GetValue("SELECT contact_number FROM contact_positions WHERE contact_position_number = " & ContactNumber))
        mvClassFields.Item(ContactCategoryFields.Quantity).Value = CStr(DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(ValidFrom), CDate(ValidTo)) + 1)
        vMaxRegistrationCategory.Init(vContactNumber, mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlMaxPermittedDaysActivity), mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlMaxPermittedDaysActivityVal))
        If vMaxRegistrationCategory.Existing = False Then RaiseError(DataAccessErrors.daeMissingRegistrationActivity)
        vCurrentRegistrationCategory.Init(vContactNumber, mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDaysRemainingActivity), mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDaysRemainingActivityVal))
        If vCurrentRegistrationCategory.Existing = False Then RaiseError(DataAccessErrors.daeMissingRegistrationActivity)
        If mvExisting = False Then
          vRegDaysAdjustment = Val(mvClassFields.Item(ContactCategoryFields.Quantity).Value) - PositionActivityDaysOverlap(vContactNumber, ContactNumber, mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivity), mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivityVal), ValidFrom, ValidTo)
        ElseIf mvExisting = True Then
          If pDelete = True Then
            vRegDaysAdjustment = DoubleValue(Quantity) * -1 + PositionActivityDaysOverlap(vContactNumber, ContactNumber, mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivity), mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivityVal), ValidFrom, ValidTo)
          ElseIf mvClassFields.Item(ContactCategoryFields.Quantity).Value <> mvClassFields.Item(ContactCategoryFields.Quantity).SetValue Then
            vRegDaysAdjustment = CDbl(mvClassFields.Item(ContactCategoryFields.Quantity).Value) - CDbl(mvClassFields.Item(ContactCategoryFields.Quantity).SetValue)
            'Make Ajustments for any overlap at beginning/end
            If mvClassFields.Item(ContactCategoryFields.ValidFrom).ValueChanged Then
              If CDate(ValidFrom) > CDate(mvClassFields.Item(ContactCategoryFields.ValidFrom).SetValue) Then
                vRegDaysAdjustment = vRegDaysAdjustment + PositionActivityDaysOverlap(vContactNumber, ContactNumber, mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivity), mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivityVal), mvClassFields.Item(ContactCategoryFields.ValidFrom).SetValue, CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, CDate(ValidFrom))))
              Else
                vRegDaysAdjustment = vRegDaysAdjustment - PositionActivityDaysOverlap(vContactNumber, ContactNumber, mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivity), mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivityVal), ValidFrom, CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, CDate(mvClassFields.Item(ContactCategoryFields.ValidFrom).SetValue))))
              End If
            End If
            If mvClassFields.Item(ContactCategoryFields.ValidTo).ValueChanged Then
              If CDate(ValidTo) < CDate(mvClassFields.Item(ContactCategoryFields.ValidTo).SetValue) Then
                vRegDaysAdjustment = vRegDaysAdjustment + PositionActivityDaysOverlap(vContactNumber, ContactNumber, mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivity), mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivityVal), CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, 1, CDate(ValidTo))), mvClassFields.Item(ContactCategoryFields.ValidTo).SetValue)
              Else
                vRegDaysAdjustment = vRegDaysAdjustment - PositionActivityDaysOverlap(vContactNumber, ContactNumber, mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivity), mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlQualifyingPositionActivityVal), CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, 1, CDate(mvClassFields.Item(ContactCategoryFields.ValidTo).SetValue))), ValidTo)
              End If
            End If
          End If
        End If
        If vRegDaysAdjustment <> 0 Then
          If vRegDaysAdjustment > CDbl(vMaxRegistrationCategory.Quantity) Or vRegDaysAdjustment > CDbl(vCurrentRegistrationCategory.Quantity) Then
            RaiseError(DataAccessErrors.daeExceedsRegistrationActivity)
          End If
          vCurrentRegistrationCategory.Quantity = (DoubleValue(vCurrentRegistrationCategory.Quantity) - vRegDaysAdjustment).ToString
          vCurrentRegistrationCategory.Save()
          vMaxRegistrationCategory.Quantity = (DoubleValue(vMaxRegistrationCategory.Quantity) - vRegDaysAdjustment).ToString
          vMaxRegistrationCategory.Save()
        End If
      Else
        MyBase.CheckForQualifyingPositions(pDelete)
      End If
    End Sub

    Private Function PositionActivityDaysOverlap(ByVal pContactNumber As Integer, ByVal pContactPositionNumber As Integer, ByVal pActivity As String, ByVal pActivityValue As String, ByVal pFromDate As String, ByVal pToDate As String) As Integer
      'Sum up number of days overlap with other Contact Position Activities for current Contact
      'of a specified type.
      Dim vTo As Date = CDate(pToDate)
      Dim vFrom As Date = CDate(pFromDate)
      Dim vSQL As String = "SELECT valid_from, valid_to FROM contact_positions cp, contact_position_activities cpa "
      vSQL = vSQL & " WHERE cp.contact_number = " & pContactNumber & " AND cp.contact_position_number <> " & pContactPositionNumber & " AND cpa.contact_position_number = cp.contact_position_number AND cpa.activity = '" & pActivity & "' AND cpa.activity_value = '" & pActivityValue & "'"
      vSQL = vSQL & " AND ((cpa.valid_from " & mvEnv.Connection.SQLLiteral("<=", CDBField.FieldTypes.cftDate, pFromDate) & " AND cpa.valid_to " & mvEnv.Connection.SQLLiteral(">=", CDBField.FieldTypes.cftDate, pFromDate) & ")"
      vSQL = vSQL & " OR (valid_from " & mvEnv.Connection.SQLLiteral(">", CDBField.FieldTypes.cftDate, pFromDate) & " AND valid_from " & mvEnv.Connection.SQLLiteral("<=", CDBField.FieldTypes.cftDate, pToDate) & ")"
      vSQL = vSQL & ") ORDER BY valid_from"
      Dim vTotalOverlapDays As Integer
      Dim vRecordSet As CDBRecordSet = mvEnv.Connection.GetRecordSet(vSQL)
      While vRecordSet.Fetch
        Dim vOverlapFrom As Date = CDate(vRecordSet.Fields(1).Value)
        Dim vOverlapTo As Date = CDate(vRecordSet.Fields(2).Value)
        If vOverlapFrom < vFrom Then vOverlapFrom = vFrom
        If vOverlapTo > vTo Then vOverlapTo = vTo
        vTotalOverlapDays = vTotalOverlapDays + CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Day, vOverlapFrom, vOverlapTo) + 1)
        vFrom = DateAdd(Microsoft.VisualBasic.DateInterval.Day, 1, vOverlapTo)
      End While
      vRecordSet.CloseRecordSet()
      Return vTotalOverlapDays
    End Function

    Public Sub AmalgamateOrganisationPositionCategory(ByVal pRecord As PositionCategory, ByVal pNewContactPositionNumber As Integer, ByVal pNewValidFrom As String)
      CopyValues(pRecord)
      With mvClassFields
        .Item(ContactCategoryFields.ContactNumber).Value = pNewContactPositionNumber.ToString
        .Item(ContactCategoryFields.ValidFrom).Value = pNewValidFrom
      End With
    End Sub

    Public Sub MovePositionActivities(ByVal pRecord As PositionCategory, ByVal pNewContactPositionNumber As Integer, ByVal pNewPosStart As String, ByVal pNewPosFinish As String)
      'Copy old Position Activity values to new Position Activity record
      CopyValues(pRecord)
      With mvClassFields
        'Set new Contact Position Number
        .Item(ContactCategoryFields.ContactNumber).Value = pNewContactPositionNumber.ToString
        Dim vValidFrom As String = .Item(ContactCategoryFields.ValidFrom).Value
        Dim vValidTo As String = .Item(ContactCategoryFields.ValidTo).Value
        'If Valid From before new Position Start then set Valid From to be new Position Start
        If IsDate(pNewPosStart) AndAlso IsDate(vValidFrom) AndAlso Date.Compare(CDate(pNewPosStart), CDate(vValidFrom)) > 0 Then
          .Item(ContactCategoryFields.ValidFrom).Value = pNewPosStart
          vValidFrom = .Item(ContactCategoryFields.ValidFrom).Value
        End If
        'If Valid To after new Position Finish then set Valid To to be new Position Finish
        If IsDate(pNewPosFinish) AndAlso IsDate(vValidTo) AndAlso Date.Compare(CDate(vValidTo), CDate(pNewPosFinish)) > 0 Then
          mvClassFields.Item(ContactCategoryFields.ValidTo).Value = pNewPosFinish
          vValidTo = mvClassFields.Item(ContactCategoryFields.ValidTo).Value
        End If
        'Validate new activity dates
        If IsDate(vValidFrom) AndAlso IsDate(vValidTo) Then
          If Date.Compare(CDate(vValidFrom), CDate(vValidTo)) > 0 Then RaiseError(DataAccessErrors.daeInvalidDateRange)
        End If
      End With
    End Sub

    Private Sub ValidateAgainstPositionDates()
      Dim vPosition As New ContactPosition(Me.Environment)
      vPosition.Init(ContactNumber)   'ContactNumber property is ContactPositionNumber
      If vPosition.Existing Then
        If vPosition.ValidateDatesAgainstDependencies(Me, vPosition.Started, vPosition.Finished) = False Then
          RaiseError(DataAccessErrors.daePositionCategoryInvalidDates)
        End If
      End If
    End Sub

#End Region

  End Class
End Namespace