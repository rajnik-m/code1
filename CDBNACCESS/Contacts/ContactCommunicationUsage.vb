Namespace Access

  Public Class ContactCommunicationUsage
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum ContactCommunicationUsageFields
      AllFields = 0
      ContactNumber
      CommunicationNumber
      CommunicationUsage
      Notes
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("communication_number", CDBField.FieldTypes.cftLong)
        .Add("communication_usage")
        .Add("notes", CDBField.FieldTypes.cftMemo)

        .Item(ContactCommunicationUsageFields.ContactNumber).PrimaryKey = True
        .Item(ContactCommunicationUsageFields.CommunicationNumber).PrimaryKey = True
        .Item(ContactCommunicationUsageFields.CommunicationUsage).PrimaryKey = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ccu"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "contact_communication_usages"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(ContactCommunicationUsageFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CommunicationNumber() As Integer
      Get
        Return mvClassFields(ContactCommunicationUsageFields.CommunicationNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CommunicationUsage() As String
      Get
        Return mvClassFields(ContactCommunicationUsageFields.CommunicationUsage).Value
      End Get
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(ContactCommunicationUsageFields.Notes).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ContactCommunicationUsageFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ContactCommunicationUsageFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Public Overloads Sub Create(ByRef pComm As Communication, ByRef pUsage As String, ByRef pNotes As String)
      CheckClassFields()
      If pComm.ContactNumber = 0 Then
        mvClassFields(ContactCommunicationUsageFields.ContactNumber).IntegerValue = pComm.Contact.ContactNumber
      Else
        mvClassFields(ContactCommunicationUsageFields.ContactNumber).IntegerValue = pComm.ContactNumber
      End If
      mvClassFields(ContactCommunicationUsageFields.CommunicationNumber).IntegerValue = pComm.CommunicationNumber
      mvClassFields(ContactCommunicationUsageFields.CommunicationUsage).Value = pUsage
      mvClassFields(ContactCommunicationUsageFields.Notes).Value = pNotes
    End Sub

    Public Overloads Sub CopyValues(ByVal pRecord As CARERecord, ByVal pNewContactNumber As Integer, ByVal pNewCommNumber As Integer)
      MyBase.CopyValues(pRecord)
      mvClassFields(ContactCommunicationUsageFields.ContactNumber).IntegerValue = pNewContactNumber
      mvClassFields(ContactCommunicationUsageFields.CommunicationNumber).IntegerValue = pNewCommNumber
    End Sub

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      If Not mvExisting Then
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbCommunicationsUsage) Then
          Dim vWhereFields As New CDBFields
          vWhereFields.Add("communication_usage", CommunicationUsage)
          vWhereFields.Add("single_usage", "Y")
          Dim vSQL As New SQLStatement(mvEnv.Connection, "device", "communication_usages", vWhereFields)
          Dim vRS As CDBRecordSet = vSQL.GetRecordSet
          If vRS.Fetch Then
            'This is a single usage code so we must remove any other records for the contact with the same usage code
            vWhereFields.Clear()
            vWhereFields.Add("contact_number", ContactNumber)
            vWhereFields.Add("communication_usage", CommunicationUsage)
            If mvEnv.Connection.DeleteRecords(mvClassFields.DatabaseTableName, vWhereFields, False) > 0 Then
              'There was a contact communications record with the usage on it so there could be a communications record with that usage which must be cleared
              Dim vUpdateFields As New CDBFields
              vUpdateFields.Add("communication_usage")
              'ignore the communication record we are adding the usage for
              vWhereFields.Add("Communication_number", CommunicationNumber, CDBField.FieldWhereOperators.fwoNotEqual)
              mvEnv.Connection.UpdateRecords("communications", vUpdateFields, vWhereFields, False)
            End If
          End If
        End If
      End If
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

#End Region
  End Class
End Namespace
