Namespace Access

  Partial Public Class Organisation
    Inherits CARERecord

    Private mvOrganisationGroup As OrganisationGroup

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum OrganisationFields
      AllFields = 0
      OrganisationNumber
      AddressNumber
      ContactNumber
      Name
      SortName
      Abbreviation
      DiallingCode
      StdCode
      Telephone
      Source
      SourceDate
      Status
      StatusDate
      StatusReason
      Department
      Notes
      OrganisationGroup
      OwnershipGroup
      ResponseChannel
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("organisation_number", CDBField.FieldTypes.cftLong)
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("name", CDBField.FieldTypes.cftUnicode)
        .Add("sort_name", CDBField.FieldTypes.cftUnicode)
        .Add("abbreviation", CDBField.FieldTypes.cftUnicode)
        .Add("dialling_code")
        .Add("std_code")
        .Add("telephone")
        .Add("source")
        .Add("source_date", CDBField.FieldTypes.cftDate)
        .Add("status")
        .Add("status_date", CDBField.FieldTypes.cftDate)
        .Add("status_reason", CDBField.FieldTypes.cftMemo)
        .Add("department")
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("organisation_group")
        .Add("ownership_group")
        .Add("response_channel")

        .Item(OrganisationFields.OrganisationNumber).PrimaryKey = True
        .Item(OrganisationFields.OrganisationNumber).PrefixRequired = True
        .Item(OrganisationFields.AddressNumber).PrefixRequired = True
        .Item(OrganisationFields.ContactNumber).PrefixRequired = True

        .Item(OrganisationFields.ResponseChannel).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbResponseChannel)

        .SetControlNumberField(OrganisationFields.OrganisationNumber, "C")
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "o"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "organisations"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property OrganisationNumber() As Integer
      Get
        Return mvClassFields(OrganisationFields.OrganisationNumber).IntegerValue
      End Get
    End Property
    Public Property AddressNumber() As Integer
      Get
        Return mvClassFields(OrganisationFields.AddressNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(OrganisationFields.AddressNumber).IntegerValue = value
      End Set
    End Property
    Public Property ContactNumber() As Integer
      Get
        Return mvClassFields.Item(OrganisationFields.ContactNumber).LongValue
      End Get
      Set(ByVal Value As Integer)
        mvClassFields.Item(OrganisationFields.ContactNumber).IntegerValue = Value
      End Set
    End Property
    Public Property Name() As String
      Get
        Return mvClassFields.Item(OrganisationFields.Name).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.Name).Value = Value
        mvAbbreviationValid = False
        mvSortNameValid = False
      End Set
    End Property
    Public Property SortName() As String
      Get
        SetValid(OrganisationFields.SortName)
        Return mvClassFields.Item(OrganisationFields.SortName).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.SortName).Value = Value
      End Set
    End Property

    Public ReadOnly Property SortNameValid() As Boolean 'BR15881 created to allow access to mvSortNameValid from XMLUpdateData
      Get
        SetValid(OrganisationFields.SortName)
        Return mvSortNameValid
      End Get
    End Property

    Public Property Abbreviation() As String
      Get
        If mvExisting = False Or mvClassFields(OrganisationFields.Name).ValueChanged Then SetValid(OrganisationFields.Abbreviation)
        Return mvClassFields.Item(OrganisationFields.Abbreviation).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.Abbreviation).Value = Value
        mvAbbreviationValid = True
      End Set
    End Property

    Public Property DiallingCode() As String
      Get
        Return mvClassFields.Item(OrganisationFields.DiallingCode).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.DiallingCode).Value = Value
      End Set
    End Property
    Public Property STDCode() As String
      Get
        Return mvClassFields.Item(OrganisationFields.StdCode).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.StdCode).Value = Value
      End Set
    End Property
    Public Property Telephone() As String
      Get
        Return mvClassFields.Item(OrganisationFields.Telephone).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.Telephone).Value = Value
      End Set
    End Property
    Public Property Source() As String
      Get
        Source = mvClassFields.Item(OrganisationFields.Source).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.Source).Value = Value
        mvSourceDateValid = False
        mvSourceDesc = ""
      End Set
    End Property

    Public ReadOnly Property SourceDesc() As String
      Get
        If mvSourceDesc.Length = 0 Then
          mvSourceDesc = mvEnv.GetDescription("sources", "source", Source)
        End If
        Return mvSourceDesc
      End Get
    End Property

    Public Property SourceDate() As String
      Get
        SetValid(OrganisationFields.SourceDate)
        Return mvClassFields.Item(OrganisationFields.SourceDate).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.SourceDate).Value = Value
        mvSourceDateValid = True
      End Set
    End Property

    Public Property Status() As String
      Get
        Return mvClassFields.Item(OrganisationFields.Status).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.Status).Value = Value
        mvStatusDesc = ""
        mvStatusRgbValue = 0
        mvStatusDateValid = False
      End Set
    End Property

    Public ReadOnly Property StatusDesc() As String
      Get
        If mvStatusDesc.Length = 0 Then GetStatusInfo()
        Return mvStatusDesc
      End Get
    End Property
    Public ReadOnly Property StatusRgbValue() As Integer
      Get
        If mvStatusDesc.Length = 0 Then GetStatusInfo()
        Return mvStatusRgbValue
      End Get
    End Property

    Private Sub GetStatusInfo()
      mvStatusDesc = ""
      mvStatusRgbValue = 0
      If Status.Length > 0 Then
        Dim vSQL As New SQLStatement(mvEnv.Connection, "status_desc,rgb_value", "statuses", New CDBField("status", Status))
        Dim vRS As CDBRecordSet = vSQL.GetRecordSet
        If vRS.Fetch Then
          mvStatusDesc = vRS.Fields(1).Value
          mvStatusRgbValue = vRS.Fields(2).IntegerValue
        End If
      End If
    End Sub

    Public Property StatusDate() As String
      Get
        SetValid(OrganisationFields.StatusDate)
        Return mvClassFields.Item(OrganisationFields.StatusDate).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.StatusDate).Value = Value
        mvStatusDateValid = True
      End Set
    End Property

    Public Property StatusReason() As String
      Get
        Return mvClassFields(OrganisationFields.StatusReason).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(OrganisationFields.StatusReason).Value = value
      End Set
    End Property
    Public Property Department() As String
      Get
        Return mvClassFields.Item(OrganisationFields.Department).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.Department).Value = Value
      End Set
    End Property
    Public Property Notes() As String
      Get
        Return mvClassFields.Item(OrganisationFields.Notes).MultiLineValue
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.Notes).Value = Value
      End Set
    End Property
    Public Property ResponseChannel() As String
      Get
        Return mvClassFields(OrganisationFields.ResponseChannel).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(OrganisationFields.ResponseChannel).Value = value
      End Set
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(OrganisationFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(OrganisationFields.AmendedOn).Value
      End Get
    End Property
    Public Property OrganisationGroupCode() As String
      Get
        Dim vGroup As String = mvClassFields(OrganisationFields.OrganisationGroup).Value
        If vGroup.Length = 0 Then vGroup = mvEnv.EntityGroups.DefaultGroup(EntityGroup.EntityGroupTypes.egtOrganisation).EntityGroupCode
        Return vGroup
      End Get
      Set(ByVal value As String)
        mvClassFields(OrganisationFields.OrganisationGroup).Value = value
      End Set
    End Property
    Public Property OwnershipGroup() As String
      Get
        Return mvClassFields(OrganisationFields.OwnershipGroup).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(OrganisationFields.OwnershipGroup).Value = Value
      End Set
    End Property

#End Region

#Region "Non-AutoGenerated Code"

    Public Function GetRecordSetFieldsPhoneGroup() As String
      Return GetRecordSetFieldsPhone() & ",organisation_group"
    End Function

    Public Function GetRecordSetFieldsPhone() As String
      Return "o.organisation_number,o.dialling_code,o.std_code,o.telephone"
    End Function

    Public Function GetRecordSetFieldsNamePhone() As String
      Return "o.organisation_number,o.contact_number,name,sort_name,abbreviation,o.dialling_code,o.std_code,o.telephone"
    End Function

    Public Sub InitFromRecordSetPhone(ByVal pRecordSet As CDBRecordSet)
      MyBase.InitFromRecordSetFields(pRecordSet, GetRecordSetFieldsPhone)
    End Sub

    Public Sub InitFromAddress(ByVal pAddressNumber As Integer)
      Dim vRecordSet As CDBRecordSet
      Dim vAttrs As String = GetRecordSetFields() & ",historical"
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("oa.address_number", pAddressNumber)
      Dim vAnsiJoins As New AnsiJoins()
      vAnsiJoins.Add("organisation_addresses oa", "oa.organisation_number", "o.organisation_number", Data.AnsiJoin.AnsiJoinTypes.InnerJoin)
      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vAttrs, "organisations o", vWhereFields, "", vAnsiJoins)
      vRecordSet = vSQLStatement.GetRecordSet
      If vRecordSet.Fetch() = True Then
        InitFromRecordSet(vRecordSet)
        mvAddressHistorical = vRecordSet.Fields("historical").Bool
      Else
        Init()
        SetDefaults()
      End If
      vRecordSet.CloseRecordSet()
    End Sub

    Public Sub InitNumberOnly(ByVal pOrganisationNumber As Integer)
      Init()
      mvClassFields.Item(OrganisationFields.OrganisationNumber).IntegerValue = pOrganisationNumber
    End Sub

    Public ReadOnly Property PhoneNumber() As String
      Get
        Dim vPhoneNumber As New StringBuilder
        If DiallingCode.Length > 0 Then
          vPhoneNumber.Append("(")
          vPhoneNumber.Append(DiallingCode)
          vPhoneNumber.Append(") ")
        End If
        If STDCode.Length > 0 Then
          vPhoneNumber.Append(STDCode)
          vPhoneNumber.Append(" ")
        End If
        vPhoneNumber.Append(Telephone)
        Return vPhoneNumber.ToString
      End Get
    End Property

    Public Function GetAbbreviation(ByVal pString As String, ByVal pInitials As Boolean) As String
      Dim vString As String = CapitaliseWords(pString)
      If vString.StartsWith("The") Then vString = vString.Substring(3) 'NoTranslate

      If vString.EndsWith(".") Then vString = vString.TrimEnd(".".ToCharArray)
      If vString.EndsWith("PLC") Then vString = vString.Substring(0, vString.Length - 3)
      If vString.EndsWith("AG") Then vString = vString.Substring(0, vString.Length - 2)
      If vString.EndsWith("Ltd") Then vString = vString.Substring(0, vString.Length - 3) 'NoTranslate
      If vString.EndsWith("Pty") Then vString = vString.Substring(0, vString.Length - 3) 'NoTranslate
      If vString.EndsWith("Inc") Then vString = vString.Substring(0, vString.Length - 3) 'NoTranslate
      If vString.EndsWith("Limited") Then vString = vString.Substring(0, vString.Length - 7) 'NoTranslate
      If vString.EndsWith("Gmbh") Then vString = vString.Substring(0, vString.Length - 4) 'NoTranslate
      If vString.EndsWith("Sa") Then vString = vString.Substring(0, vString.Length - 2) 'NoTranslate

      Dim vAbbreviation As New StringBuilder
      For Each vChar As Char In vString
        If vChar = Char.ToUpper(vChar) AndAlso vChar >= "A" AndAlso vChar <= "Z" Then vAbbreviation.Append(Char.ToLower(vChar))
      Next
      Dim vResult As String = vAbbreviation.ToString
      If (vResult.Length < 3) AndAlso (pInitials = False) Then vResult = FirstWord(vString.Trim).ToLower
      If vResult.Length > 10 Then vResult = vResult.Substring(0, 10)
      Return vResult
    End Function

    Protected Overrides Sub SetValid()
      Me.SetValid(OrganisationFields.AllFields)
    End Sub

    Private Overloads Sub SetValid(ByVal pField As OrganisationFields)
      If pField = OrganisationFields.AllFields Then MyBase.SetValid()
      'Add code here to ensure all values are valid before saving
      With mvClassFields
        If pField = OrganisationFields.AllFields AndAlso ContactNumber = 0 Then .Item(OrganisationFields.ContactNumber).LongValue = OrganisationNumber
        If (pField = OrganisationFields.AllFields OrElse pField = OrganisationFields.Abbreviation) AndAlso .Item(OrganisationFields.Abbreviation).Value.Length = 0 Then .Item(OrganisationFields.Abbreviation).Value = GetAbbreviation(Name, False)
        If (pField = OrganisationFields.AllFields OrElse pField = OrganisationFields.SortName) AndAlso .Item(OrganisationFields.SortName).Value.Length = 0 Then .Item(OrganisationFields.SortName).Value = TruncateString(Name, 20)
        If pField = OrganisationFields.SortName Then 'BR15881
          If .Item(OrganisationFields.SortName).SetValue <> TruncateString(.Item(OrganisationFields.Name).SetValue, 20) Then
            mvSortNameValid = True ' SortName is not the dafault value, although it is valid, so don't change it or the dummy contact surname
          Else
            mvSortNameValid = False ' SortName is default value, so we can change the dummy contact surname to Organisation.SortName 
          End If
        End If
        If (pField = OrganisationFields.AllFields OrElse pField = OrganisationFields.StatusDate) Then
          If Not mvStatusDateValid Then
            If Status.Length > 0 Then
              If .Item(OrganisationFields.StatusDate).Value.Length = 0 Then .Item(OrganisationFields.StatusDate).Value = TodaysDate()
            Else
              .Item(OrganisationFields.StatusDate).Value = ""
            End If
            mvStatusDateValid = True
          End If
        End If
        If (pField = OrganisationFields.AllFields OrElse pField = OrganisationFields.SourceDate) Then
          If Not mvSourceDateValid Then
            If .Item(OrganisationFields.SourceDate).Value.Length = 0 Then .Item(OrganisationFields.SourceDate).Value = TodaysDate()
            mvSourceDateValid = True
          End If
        End If
        If (pField = OrganisationFields.AllFields OrElse pField = OrganisationFields.Department) AndAlso .Item(OrganisationFields.Department).Value.Length = 0 Then .Item(OrganisationFields.Department).Value = mvEnv.User.Department
        If (pField = OrganisationFields.AllFields) Or (pField = OrganisationFields.OrganisationGroup) Then
          'Have to look at the class field value not the property 
          If mvClassFields(OrganisationFields.OrganisationGroup).Value.Length = 0 Then OrganisationGroupCode = mvEnv.EntityGroups.DefaultGroup(EntityGroup.EntityGroupTypes.egtOrganisation).EntityGroupCode 'Set to default
        End If
        'Removed amended on and by as they will be set in the base class
      End With
    End Sub

    Public Sub SetStatus(ByVal pParams As CDBParameters)
      'Used by Smart Client / Web Services only
      Status = pParams("Status").Value
      If pParams.Exists("StatusReason") Then StatusReason = pParams("StatusReason").Value
      If pParams.Exists("StatusDate") Then StatusDate = pParams("StatusDate").Value
    End Sub

    Public WriteOnly Property ImportOrganisationNumber() As Integer
      Set(ByVal value As Integer)
        mvClassFields(OrganisationFields.OrganisationNumber).IntegerValue = value
      End Set
    End Property

    Public Sub SetAmended(ByRef pAmendedOn As String, ByRef pAmendedBy As String)
      mvClassFields.Item(OrganisationFields.AmendedOn).Value = pAmendedOn
      mvClassFields.Item(OrganisationFields.AmendedBy).Value = pAmendedBy
      mvOverrideAmended = True
    End Sub

    Public Sub CloneOrganisation(ByVal pOldOrganisation As Organisation)
      'Clone the Organisation details
      Clone(pOldOrganisation)
      Dim vDefaultOrgName As String = mvEnv.EntityGroups(OrganisationGroupCode).GetDefaultName()  'J1404
      If vDefaultOrgName.Length > 0 Then
        Name = vDefaultOrgName
      ElseIf Name.StartsWith("Copy of ") = False Then
        Name = Substring(("Copy of " & Name), 0, 80)
      End If
      MyBase.SetControlNumber()  'Get the new organisation number
      ContactNumber = If(pOldOrganisation.OrganisationNumber = pOldOrganisation.ContactNumber, OrganisationNumber, pOldOrganisation.ContactNumber)  'Set the default contact

      'Clone the default Address
      Address.Clone(pOldOrganisation.Address)

      'Setup the new organisation address link record
      Dim vOldOA As New OrganisationAddress(mvEnv)
      vOldOA.Init(pOldOrganisation.OrganisationNumber, pOldOrganisation.AddressNumber)
      Dim vNewOA As New OrganisationAddress(mvEnv)
      vNewOA.Clone(vOldOA, OrganisationNumber)

      'Setup the new dummy contact address link record
      Dim vOldCA As New ContactAddress(mvEnv)
      vOldCA.Init(pOldOrganisation.OrganisationNumber, pOldOrganisation.AddressNumber)
      Dim vNewCA As New ContactAddress(mvEnv)
      vNewCA.Clone(vOldCA, OrganisationNumber)

      'Setup the dummy contact
      Dim vOldContact As New Contact(mvEnv)
      vOldContact.Init(pOldOrganisation.OrganisationNumber)
      Dim vNewContact As New Contact(mvEnv)
      If vDefaultOrgName.Length > 0 Then  'Use the new surname, sort name, labelname, salutation etc when defaulting the organisation name
        vNewContact.Init()
        vNewContact.VATCategory = vOldContact.VATCategory 'VAT Category should not be changed
      Else
        vNewContact.Clone(vOldContact)
      End If

      'Get all the control numbers outside of the transaction
      Address.SetControlNumber()  'Get the new address number
      mvClassFields.Item(OrganisationFields.AddressNumber).IntegerValue = Address.AddressNumber
      mvEnv.CacheControlNumbers(CDBEnvironment.CachedControlNumberTypes.ccnAddressLink, 2)
      mvEnv.CacheControlNumbers(CDBEnvironment.CachedControlNumberTypes.ccnPosition, 1)

      'Copy Organisation Address Usages
      '(a) Find all address usages that need to be copied for the new Organisation having Null Notes
      Dim vOldAddUsage As New ContactAddressUsage
      vOldAddUsage.Init(mvEnv, ContactAddressUsage.ContactAddresssUsageLinkTypes.caultOrganisation)
      Dim vAttrs As String = vOldAddUsage.GetRecordSetFields(ContactAddressUsage.ContactAddressUsageRecordSetTypes.caurtAll).Replace("cau.", "")
      Dim vSQL As New StringBuilder("INSERT INTO organisation_address_usages (")
      vSQL.Append(vAttrs.Replace("notes,", ""))
      vSQL.Append(") ")
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("organisation_number", pOldOrganisation.OrganisationNumber)
      vWhereFields.Add("address_number", pOldOrganisation.AddressNumber)
      vWhereFields.Add("notes", CDBField.FieldTypes.cftMemo, "")
      vSQL.Append(New SQLStatement(mvEnv.Connection, vAttrs.Replace("organisation_number", OrganisationNumber.ToString).Replace("address_number", AddressNumber.ToString).Replace("notes,", ""), "organisation_address_usages", vWhereFields).SQL)
      Dim vInsertColl As New CollectionList(Of String)
      vInsertColl.Add((vInsertColl.Count + 1).ToString, vSQL.ToString)
      '(b) Find all address usages that need to be copied for the new Organisation having Non Null Notes - as notes is a memo field they have to be dealt with separately for Oracle
      vWhereFields("notes").WhereOperator = CDBField.FieldWhereOperators.fwoNotEqual
      Dim vRS As CDBRecordSet = New SQLStatement(mvEnv.Connection, vAttrs, "organisation_address_usages", vWhereFields).GetRecordSet
      Dim vNewAddUsage As ContactAddressUsage
      Dim vNewAddUsageColl As New CollectionList(Of ContactAddressUsage)
      While vRS.Fetch
        vNewAddUsage = New ContactAddressUsage
        vNewAddUsage.Init(mvEnv, ContactAddressUsage.ContactAddresssUsageLinkTypes.caultOrganisation)
        vNewAddUsage.Create(OrganisationNumber, AddressNumber, vRS.Fields("address_usage").Value, vRS.Fields("notes").Value)
        vNewAddUsageColl.Add((vNewAddUsageColl.Count + 1).ToString, vNewAddUsage)
      End While
      vRS.CloseRecordSet()

      'Copy the Positions
      'Find all non-historic Positions on old Organisation
      vWhereFields.Clear()
      vWhereFields.Add("organisation_number", pOldOrganisation.OrganisationNumber)
      vWhereFields.Add("contact_number", pOldOrganisation.OrganisationNumber, CDBField.FieldWhereOperators.fwoNotEqual)
      vWhereFields.Add("address_number", pOldOrganisation.AddressNumber)
      vWhereFields.Add("finished", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoNullOrGreaterThanEqual)
      Dim vOldCP As New ContactPosition(mvEnv)
      vRS = New SQLStatement(mvEnv.Connection, vOldCP.GetRecordSetFields, "contact_positions cp", vWhereFields).GetRecordSet
      Dim vOldCPColl As New CollectionList(Of ContactPosition)
      While vRS.Fetch
        vOldCP = New ContactPosition(mvEnv)
        vOldCP.InitFromRecordSet(vRS)
        vOldCPColl.Add(vOldCP.ContactPositionNumber.ToString, vOldCP)
      End While
      vRS.CloseRecordSet()
      Dim vParams As New CDBParameters
      vParams.Add("AddressNumber", AddressNumber)
      vParams.Add("OrganisationNumber", OrganisationNumber)
      Dim vParams2 As New CDBParameters
      vParams2.Add("OrganisationNumber", OrganisationNumber)
      Dim vNewCP As ContactPosition
      Dim vOldRole As New ContactRole(mvEnv)
      Dim vNewRole As ContactRole
      Dim vNewCPColl As New CollectionList(Of ContactPosition)
      Dim vNewRoleColl As New CollectionList(Of ContactRole)
      For Each vOldCP In vOldCPColl
        vNewCP = New ContactPosition(mvEnv)
        vNewCP.Clone(vOldCP, vParams)
        vNewCP.SetControlNumber()
        vNewCPColl.Add(vNewCP.ContactPositionNumber.ToString, vNewCP)
        'Copy Position Roles
        vWhereFields.Clear()
        vWhereFields.Add("organisation_number", pOldOrganisation.OrganisationNumber)
        vWhereFields.Add("contact_number", vOldCP.ContactNumber)
        vRS = New SQLStatement(mvEnv.Connection, vOldRole.GetRecordSetFields, "contact_roles cr", vWhereFields).GetRecordSet
        While vRS.Fetch
          vOldRole.InitFromRecordSet(vRS)
          vNewRole = New ContactRole(mvEnv)
          vNewRole.Clone(vOldRole, vParams2)
          vNewRole.SetControlNumber()
          vNewRoleColl.Add(vNewRole.ContactRoleNumber.ToString, vNewRole)
        End While
        vRS.CloseRecordSet()
      Next

      'Copy Organisation Categories
      '(a) Find all non-historic Categories on old Organisation that need to be copied for the new Organisation having Null Notes
      Dim vOldCategory As New OrganisationCategory(mvEnv)
      Dim vRSFields As String = vOldCategory.GetRecordSetFields.Replace("cc.", "")
      vAttrs = vRSFields.Replace("notes,", "")
      vSQL = New StringBuilder("INSERT INTO organisation_categories (")
      vSQL.Append(vAttrs)
      vSQL.Append(") ")
      With vWhereFields
        .Clear()
        .Add("organisation_number", pOldOrganisation.OrganisationNumber)
        .Add("valid_to", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoNullOrGreaterThanEqual)
        .Add("notes", CDBField.FieldTypes.cftMemo, "")
      End With
      vSQL.Append(New SQLStatement(mvEnv.Connection, vAttrs.Replace("organisation_number", OrganisationNumber.ToString), "organisation_categories", vWhereFields).SQL)
      vInsertColl.Add((vInsertColl.Count + 1).ToString, vSQL.ToString)
      '(b) Find all non-historic Categories on old Organisation that need to be copied for the new Organisation having Non Null Notes - as notes is a memo field they have to be dealt with separately for Oracle
      vWhereFields("notes").WhereOperator = CDBField.FieldWhereOperators.fwoNotEqual
      vRS = New SQLStatement(mvEnv.Connection, vRSFields, "organisation_categories", vWhereFields).GetRecordSet
      Dim vNewCategory As OrganisationCategory
      Dim vNewCategoryColl As New CollectionList(Of OrganisationCategory)
      While vRS.Fetch
        vOldCategory.InitFromRecordSet(vRS)
        vNewCategory = New OrganisationCategory(mvEnv)
        vNewCategory.CopyValues(vOldCategory, OrganisationNumber)
        vNewCategoryColl.Add((vNewCategoryColl.Count + 1).ToString, vNewCategory)
      End While
      vRS.CloseRecordSet()

      'Copy Organisation Suppressions
      '(a) Find all non-historic Suppressions on old Organisation that need to be copied for the new Organisation having Null Notes
      Dim vOldSupp As New OrganisationSuppression(mvEnv)
      vOldSupp.Init(ContactSuppression.ContactSuppressionTypes.cstOrganisation)
      vRSFields = vOldSupp.GetRecordSetFields.Replace("cs.", "")
      vAttrs = vRSFields.Replace("notes,", "")
      vSQL = New StringBuilder("INSERT INTO organisation_suppressions (")
      vSQL.Append(vAttrs)
      vSQL.Append(") ")
      vWhereFields.Clear()
      vWhereFields.Add("organisation_number", pOldOrganisation.OrganisationNumber)
      vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoNullOrGreaterThanEqual)
      vWhereFields.Add("notes", CDBField.FieldTypes.cftMemo, "")
      vSQL.Append(New SQLStatement(mvEnv.Connection, vAttrs.Replace("organisation_number", OrganisationNumber.ToString), "organisation_suppressions", vWhereFields).SQL)
      vInsertColl.Add((vInsertColl.Count + 1).ToString, vSQL.ToString)
      '(b) Find all non-historic Suppressions on old Organisation that need to be copied for the new Organisation having Non Null Notes - as notes is a memo field they have to be dealt with separately for Oracle
      vWhereFields("notes").WhereOperator = CDBField.FieldWhereOperators.fwoNotEqual
      vRS = New SQLStatement(mvEnv.Connection, vRSFields, "organisation_suppressions", vWhereFields).GetRecordSet
      Dim vNewSupp As OrganisationSuppression
      Dim vNewSuppColl As New CollectionList(Of OrganisationSuppression)
      While vRS.Fetch
        vOldSupp.InitFromRecordSet(vRS)
        vNewSupp = New OrganisationSuppression(mvEnv)
        vNewSupp.CopyValues(vOldSupp, OrganisationNumber)
        vNewSuppColl.Add((vNewSuppColl.Count + 1).ToString, vNewSupp)
      End While
      vRS.CloseRecordSet()

      'Copy Organisation Relationships
      '(a) Find all non-historic Links on old Organisation that need to be copied for the new Organisation having Null Notes
      Dim vOldLink As New OrganisationLink(mvEnv)
      vRSFields = vOldLink.GetRecordSetFields.Replace("ol.", "")
      vAttrs = vRSFields.Replace("notes,", "")
      Dim vInsertSQL As New StringBuilder("INSERT INTO organisation_links (")
      vInsertSQL.Append(vAttrs)
      vInsertSQL.Append(") ")
      vWhereFields.Clear()
      vWhereFields.Add("organisation_number_1", pOldOrganisation.OrganisationNumber)
      vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoNullOrGreaterThanEqual)
      vWhereFields.Add("notes", CDBField.FieldTypes.cftMemo, "")
      vSQL = New StringBuilder(vInsertSQL.ToString)
      vSQL.Append(New SQLStatement(mvEnv.Connection, vAttrs.Replace("organisation_number_1", OrganisationNumber.ToString), "organisation_links", vWhereFields).SQL)
      vInsertColl.Add((vInsertColl.Count + 1).ToString, vSQL.ToString)
      vWhereFields("organisation_number_1").Name = "organisation_number_2"
      vSQL = New StringBuilder(vInsertSQL.ToString)
      vSQL.Append(New SQLStatement(mvEnv.Connection, vAttrs.Replace("organisation_number_2", OrganisationNumber.ToString), "organisation_links", vWhereFields).SQL)
      vInsertColl.Add((vInsertColl.Count + 1).ToString, vSQL.ToString)
      '(b) Find all non-historic Links on old Organisation that need to be copied for the new Organisation having Non Null Notes - as notes is a memo field they have to be dealt with separately for Oracle
      vWhereFields("organisation_number_1").Name = "organisation_number_1"
      vWhereFields("organisation_number_1").WhereOperator = CDBField.FieldWhereOperators.fwoOpenBracket
      vWhereFields.Insert(2, "organisation_number_2", New CDBField("organisation_number_2", pOldOrganisation.OrganisationNumber, CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket))
      vWhereFields("notes").WhereOperator = CDBField.FieldWhereOperators.fwoNotEqual
      vRS = New SQLStatement(mvEnv.Connection, vRSFields, "organisation_links", vWhereFields).GetRecordSet
      Dim vNewLink As OrganisationLink
      Dim vNewLinkColl As New CollectionList(Of OrganisationLink)
      While vRS.Fetch
        vOldLink.InitFromRecordSet(vRS)
        vNewLink = New OrganisationLink(mvEnv)
        vNewLink.CopyValues(vOldLink, pOldOrganisation.OrganisationNumber, OrganisationNumber)
        vNewLinkColl.Add((vNewLinkColl.Count + 1).ToString, vNewLink)
      End While
      vRS.CloseRecordSet()

      'Copy Organisation Communication Numbers
      vWhereFields.Clear()
      vWhereFields.Add("address_number", pOldOrganisation.AddressNumber)
      vWhereFields.Add("contact_number", "")
      vWhereFields.Add("is_active", "Y")
      Dim vOldComm As New Communication(mvEnv)
      Dim vOldCommColl As New CollectionList(Of Communication)
      vRS = New SQLStatement(mvEnv.Connection, vOldComm.GetRecordSetFields, "communications com", vWhereFields).GetRecordSet
      While vRS.Fetch
        vOldComm = New Communication(mvEnv)
        vOldComm.InitFromRecordSet(vRS)
        vOldCommColl.Add(vOldComm.CommunicationNumber.ToString, vOldComm)
      End While
      vRS.CloseRecordSet()
      vParams.Clear()
      vParams.Add("AddressNumber", AddressNumber)
      Dim vNewComm As Communication
      Dim vNewCommColl As New CollectionList(Of Communication)
      Dim vNewCommUsageColl As New CollectionList(Of ContactCommunicationUsage)
      For Each vOldComm In vOldCommColl
        vNewComm = New Communication(mvEnv)
        vNewComm.Clone(vOldComm, vParams)
        vNewComm.SetControlNumber()
        vNewCommColl.Add(vNewComm.CommunicationNumber.ToString, vNewComm)
        'Copy Organisation Communication Number Usages
        '(a) Find all Comm Usages on old Organisation Comm record that need to be copied for the new Organisation Comm having Null Notes
        Dim vOldCommUsage As New ContactCommunicationUsage(mvEnv)
        vRSFields = vOldCommUsage.GetRecordSetFields.Replace("ccu.", "")
        vAttrs = vRSFields.Replace("notes,", "")
        vSQL = New StringBuilder("INSERT INTO contact_communication_usages (")
        vSQL.Append(vAttrs)
        vSQL.Append(") ")
        vWhereFields.Clear()
        vWhereFields.Add("communication_number", vOldComm.CommunicationNumber)
        vWhereFields.Add("notes", CDBField.FieldTypes.cftMemo, "")
        vSQL.Append(New SQLStatement(mvEnv.Connection, vAttrs.Replace("contact_number", OrganisationNumber.ToString).Replace("communication_number", vNewComm.CommunicationNumber.ToString), "contact_communication_usages", vWhereFields).SQL)
        vInsertColl.Add((vInsertColl.Count + 1).ToString, vSQL.ToString)
        '(b) Find all Comm Usages on old Organisation Comm record that need to be copied for the new Organisation Comm having Non Null Notes - as notes is a memo field they have to be dealt with separately for Oracle
        vWhereFields("notes").WhereOperator = CDBField.FieldWhereOperators.fwoNotEqual
        vRS = New SQLStatement(mvEnv.Connection, vRSFields, "contact_communication_usages", vWhereFields).GetRecordSet
        Dim vNewCommUsage As ContactCommunicationUsage
        While vRS.Fetch
          vOldCommUsage.InitFromRecordSet(vRS)
          vNewCommUsage = New ContactCommunicationUsage(mvEnv)
          vNewCommUsage.CopyValues(vOldCommUsage, OrganisationNumber, vNewComm.CommunicationNumber)
          vNewCommUsageColl.Add((vNewCommUsageColl.Count + 1).ToString, vNewCommUsage)
        End While
        vRS.CloseRecordSet()
      Next

      'Copy Organisation Documents
      Dim vNewCommLog As CommunicationsLog
      Dim vNewCommLogColl As New CollectionList(Of CommunicationsLog) 'Used to store the new records with Null Document
      Dim vNewCommLogDocumentColl As New CollectionList(Of CommunicationsLog) 'Used to handle the records with Document
      Dim vIndex As Integer = 1 '1 is to read records having Null document
      While vIndex <= 2
        vWhereFields.Clear()
        vWhereFields.Add("contact_number", pOldOrganisation.OrganisationNumber)
        vWhereFields.Add("document", CDBField.FieldTypes.cftBulk, "", If(vIndex = 1, CDBField.FieldWhereOperators.fwoEqual, CDBField.FieldWhereOperators.fwoNotEqual))
        Dim vOldCommLog As New CommunicationsLog(mvEnv)
        vRS = New SQLStatement(mvEnv.Connection, vOldCommLog.GetRecordSetFields, "communications_log cl", vWhereFields).GetRecordSet
        Dim vOldCommLogColl As New CollectionList(Of CommunicationsLog)
        'Add records in a collection as a RecordSet will be required for each of these records
        While vRS.Fetch
          vOldCommLog = New CommunicationsLog(mvEnv)
          vOldCommLog.InitFromRecordSet(vRS)
          vOldCommLogColl.Add(vOldCommLog.CommunicationsLogNumber.ToString, vOldCommLog)
        End While
        vRS.CloseRecordSet()
        vParams.Clear()
        vParams.Add("AddressNumber", AddressNumber)
        vParams.Add("ContactNumber", OrganisationNumber)
        Dim vCommLogLink As CommunicationsLogLink
        Dim vCommLogSubject As New CommunicationsLogSubject
        vCommLogSubject.Init(mvEnv)
        Dim vExternalAppication As ExternalApplication
        For Each vOldCommLog In vOldCommLogColl
          vNewCommLog = New CommunicationsLog(mvEnv)
          vNewCommLog.Clone(vOldCommLog, vParams)
          vNewCommLog.SetControlNumber()
          If vIndex = 1 Then
            vNewCommLogColl.Add(vNewCommLog.CommunicationsLogNumber.ToString, vNewCommLog)
          Else
            vExternalAppication = New ExternalApplication(mvEnv)
            vExternalAppication.Init(vOldCommLog.ExternalApplicationCode)
            Dim vDocumentNotFound As Boolean = False
            Dim vFileName As String = ""
            If vExternalAppication.Existing Then
              Try
                vFileName = mvEnv.GetDocument(CDBEnvironment.GetDocumentLocations.gdlCommunicationsLog, vOldCommLog.CommunicationsLogNumber.ToString, vExternalAppication.ExternalStorage, vExternalAppication.Extension)
              Catch ex As Exception
                vDocumentNotFound = True
              End Try
              vDocumentNotFound = vFileName.Length = 0
            Else
              vDocumentNotFound = True
            End If
            If vDocumentNotFound Then 'If the document is not found then just continue saving the record without the document
              vNewCommLogColl.Add(vNewCommLog.CommunicationsLogNumber.ToString, vNewCommLog)
            Else
              vNewCommLogDocumentColl.Add(vFileName, vNewCommLog)
            End If
          End If
          'Copy Comm Log Links
          vInsertSQL = New StringBuilder("INSERT INTO communications_log_links (")
          vCommLogLink = New CommunicationsLogLink
          vCommLogLink.Init(mvEnv)
          vAttrs = vCommLogLink.GetRecordSetFields(CommunicationsLogLink.CommunicationsLogLinkRecordSetTypes.cllrtAll).Replace("cll.", "")
          vInsertSQL.Append(vAttrs)
          vInsertSQL.Append(") ")
          vWhereFields.Clear()
          vWhereFields.Add("communications_log_number", vOldCommLog.CommunicationsLogNumber)
          vWhereFields.Add("contact_number", pOldOrganisation.OrganisationNumber, CDBField.FieldWhereOperators.fwoNotEqual)
          vAttrs = vAttrs.Replace("communications_log_number", vNewCommLog.CommunicationsLogNumber.ToString)
          vSQL = New StringBuilder(vInsertSQL.ToString)
          vSQL.Append(New SQLStatement(mvEnv.Connection, vAttrs, "communications_log_links", vWhereFields).SQL)
          vInsertColl.Add((vInsertColl.Count + 1).ToString, vSQL.ToString)
          vWhereFields("contact_number").WhereOperator = CDBField.FieldWhereOperators.fwoEqual
          vSQL = New StringBuilder(vInsertSQL.ToString)
          vSQL.Append(New SQLStatement(mvEnv.Connection, vAttrs.Replace("contact_number", OrganisationNumber.ToString).Replace("address_number", AddressNumber.ToString), "communications_log_links", vWhereFields).SQL)
          vInsertColl.Add((vInsertColl.Count + 1).ToString, vSQL.ToString)
          'Copy Comm Log Doc Links
          vInsertSQL = New StringBuilder("INSERT INTO communications_log_doc_links (")
          vCommLogLink = New CommunicationsLogLink
          vCommLogLink.Init(mvEnv, , , , CommunicationsLogLink.DocumentLinkTypes.dltDocumentToDocument)
          vAttrs = vCommLogLink.GetRecordSetFields(CommunicationsLogLink.CommunicationsLogLinkRecordSetTypes.cllrtAll).Replace("cll.", "")
          vInsertSQL.Append(vAttrs)
          vInsertSQL.Append(") ")
          vWhereFields.Clear()
          vWhereFields.Add("communications_log_number_1", vOldCommLog.CommunicationsLogNumber)
          vSQL = New StringBuilder(vInsertSQL.ToString)
          vSQL.Append(New SQLStatement(mvEnv.Connection, vAttrs.Replace("communications_log_number_1", vNewCommLog.CommunicationsLogNumber.ToString), "communications_log_doc_links", vWhereFields).SQL)
          vInsertColl.Add((vInsertColl.Count + 1).ToString, vSQL.ToString)
          vWhereFields("communications_log_number_1").Name = "communications_log_number_2"
          vSQL = New StringBuilder(vInsertSQL.ToString)
          vSQL.Append(New SQLStatement(mvEnv.Connection, vAttrs.Replace("communications_log_number_2", vNewCommLog.CommunicationsLogNumber.ToString), "communications_log_doc_links", vWhereFields).SQL)
          vInsertColl.Add((vInsertColl.Count + 1).ToString, vSQL.ToString)
          'Copy Comm Log Subjects
          vSQL = New StringBuilder("INSERT INTO communications_log_subjects (")
          vAttrs = vCommLogSubject.GetRecordSetFields(CommunicationsLogSubject.CommunicationsLogSubjectRecordSetTypes.clsrtAll).Replace("cls.", "")
          vSQL.Append(vAttrs)
          vSQL.Append(") ")
          vWhereFields.Clear()
          vWhereFields.Add("communications_log_number", vOldCommLog.CommunicationsLogNumber)
          vSQL.Append(New SQLStatement(mvEnv.Connection, vAttrs.Replace("communications_log_number", vNewCommLog.CommunicationsLogNumber.ToString), "communications_log_subjects", vWhereFields).SQL)
          vInsertColl.Add((vInsertColl.Count + 1).ToString, vSQL.ToString)
        Next
        vIndex += 1
      End While

      'Copy External Tables Data
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataOrgGroupCustomTables) Then
        vParams.Clear()
        vParams.Add("OrganisationGroup", OrganisationGroupCode)
        vParams.Add("Client", mvEnv.ClientCode)
        Dim vOrgGroup As New OrganisationGroup(mvEnv)
        vOrgGroup.Init(vParams)
        If vOrgGroup.CustomTableNames.Length > 0 Then
          For Each vCustomTable As String In vOrgGroup.CustomTableNames.Split(","c)
            vCustomTable = vCustomTable.Trim
            vWhereFields.Clear()
            vWhereFields.Add("table_name", vCustomTable)
            vWhereFields.Add("is_base_table_attribute", "Y")
            vWhereFields.Add("type", "M", CDBField.FieldWhereOperators.fwoNotEqual) 'Ignore any memo or bulk fields. Such fields should not be mandatory.
            vRS = New SQLStatement(mvEnv.Connection, "attribute_name,type", "maintenance_attributes", vWhereFields).GetRecordSet
            Dim vOrgAttributeFound As Boolean = False
            vSQL = New StringBuilder
            While vRS.Fetch
              If vSQL.Length > 0 Then vSQL.Append(",")
              If vRS.Fields("attribute_name").Value = "organisation_number" Then vOrgAttributeFound = True
              vSQL.Append(vRS.Fields("attribute_name").Value)
            End While
            vRS.CloseRecordSet()
            If vOrgAttributeFound Then  'Only if the custom table contains an organisation_number attribute
              vAttrs = vSQL.ToString
              vSQL = New StringBuilder("INSERT INTO ")
              With vSQL
                .Append(vCustomTable)
                .Append(" (")
                .Append(vAttrs)
                .Append(") ")
                vWhereFields.Clear()
                vWhereFields.Add("organisation_number", pOldOrganisation.OrganisationNumber)
                .Append(New SQLStatement(mvEnv.Connection, vAttrs.Replace("organisation_number", OrganisationNumber.ToString).Replace("address_number", AddressNumber.ToString), vCustomTable, vWhereFields).SQL)
                vInsertColl.Add((vInsertColl.Count + 1).ToString, vSQL.ToString)
              End With
            End If
          Next
        End If
      End If

      'Save the organisation, address, address links and the dummy contact records
      mvEnv.Connection.StartTransaction()
      Address.Save(mvEnv.User.UserID, True)
      Save(mvEnv.User.UserID, True)
      AddUser(Department, True)
      vNewOA.AddressNumber = Address.AddressNumber
      vNewOA.Save(mvEnv.User.UserID, True)
      vNewCA.AddressNumber = Address.AddressNumber
      vNewCA.Save(mvEnv.User.UserID, True)
      AddDummyContact(vNewContact)
      Dim vCP As New ContactPosition(mvEnv) 'Create a new position record for the dummy contact i.e. default contact
      vCP.Create(OrganisationNumber, AddressNumber, OrganisationNumber, "Y", "Y")
      vCP.Save(mvEnv.User.UserID, True)

      'Save Address Usages
      For vIndex = 0 To vNewAddUsageColl.Count - 1
        vNewAddUsageColl(vIndex).Save(mvEnv.User.UserID)
      Next
      'Save Positions
      For vIndex = 0 To vNewCPColl.Count - 1
        vNewCPColl(vIndex).Save(mvEnv.User.UserID)
        'Save Position Categories and Links
        vNewCPColl(vIndex).ClonePositionData(vOldCPColl(vIndex).ContactPositionNumber)
      Next
      'Save Position Roles
      For Each vNewRole In vNewRoleColl
        vNewRole.Save(mvEnv.User.UserID)
      Next
      'Save Categories
      For Each vNewCategory In vNewCategoryColl
        vNewCategory.Save(mvEnv.User.UserID)
      Next
      'Save Suppressions
      For Each vNewSupp In vNewSuppColl
        vNewSupp.Save(mvEnv.User.UserID)
      Next
      'Save Relationships
      For Each vNewLink In vNewLinkColl
        vNewLink.Save(mvEnv.User.UserID)
      Next
      'Save Communications
      For Each vNewComm In vNewCommColl
        vNewComm.Save(mvEnv.User.UserID)
      Next
      'Save Comm Usages
      For Each vCommUsage As ContactCommunicationUsage In vNewCommUsageColl
        vCommUsage.Save(mvEnv.User.UserID)
      Next
      'Save Comm Log
      For Each vNewCommLog In vNewCommLogColl
        vNewCommLog.Save(mvEnv.User.UserID)
      Next
      'Save Comm Log with Document data
      For Each vNewCommLog In vNewCommLogDocumentColl
        vNewCommLog.Save(mvEnv.User.UserID)

        Dim vExternalApplication As New ExternalApplication(mvEnv)
        vExternalApplication.Init(vNewCommLog.ExternalApplicationCode)

        Dim vFileName As String = vNewCommLogDocumentColl.FindKey(vNewCommLog)
        If vExternalApplication.ExternalStorage Then
          ' Need to copy the file to the correct storage path
          Dim vNewFile As String = vExternalApplication.NewDocumentName(vNewCommLog.CommunicationsLogNumber.ToString)
          Try
            FileCopy(vFileName, vNewFile)
          Catch vEx As Exception
            'Ignore error
          End Try
          vNewCommLog.SaveDocument(vNewFile, True)
        Else
          vNewCommLog.SaveDocument(vFileName, False)
          My.Computer.FileSystem.DeleteFile(vFileName)
        End If
      Next
      'Save all INSERT SQL statements that we have produced above
      For Each vInsert As String In vInsertColl
        mvEnv.Connection.ExecuteSQL(vInsert)
      Next
      mvEnv.Connection.CommitTransaction()
    End Sub

    ''' <summary>Delete the Organisation following an Organisation Merge.</summary>
    ''' <remarks>This method does NOT check data, delete the dummy Contact or delete other related data.
    '''  It must only be called after a merge when we know all related data has been moved.</remarks>
    Friend Sub DeleteMergedOrganisation(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
    End Sub

#End Region

    Public Property AddressHistorical As Boolean
      Get
        Return mvAddressHistorical
      End Get
      Set(value As Boolean)
        mvAddressHistorical = value
      End Set
    End Property
    Public Property OrganisationGroup As OrganisationGroup
      Get
        If mvOrganisationGroup Is Nothing AndAlso String.IsNullOrWhiteSpace(Me.OrganisationGroupCode) = False Then
          Me.OrganisationGroup = Me.GetRelatedInstance(Of OrganisationGroup)({Organisation.OrganisationFields.OrganisationGroup})
        End If
        Return mvOrganisationGroup
      End Get
      Set(value As OrganisationGroup)
        mvOrganisationGroup = value
        If value IsNot Nothing AndAlso value.EntityGroupCode <> Me.OrganisationGroupCode Then
          Me.OrganisationGroupCode = value.EntityGroupCode
        End If
      End Set
    End Property

  End Class
End Namespace
