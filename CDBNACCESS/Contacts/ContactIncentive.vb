Namespace Access

  Public Class ContactIncentive
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum ContactIncentiveFields
      AllFields = 0
      ContactNumber
      Source
      Product
      Quantity
      DateFulfilled
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("source")
        .Add("product")
        .Add("quantity", CDBField.FieldTypes.cftLong)
        .Add("date_fulfilled", CDBField.FieldTypes.cftDate)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return False
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ci"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "contact_incentives"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(ContactIncentiveFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Source() As String
      Get
        Return mvClassFields(ContactIncentiveFields.Source).Value
      End Get
    End Property
    Public ReadOnly Property ProductCode() As String
      Get
        Return mvClassFields(ContactIncentiveFields.Product).Value
      End Get
    End Property
    Public ReadOnly Property Quantity() As Integer
      Get
        Return mvClassFields(ContactIncentiveFields.Quantity).IntegerValue
      End Get
    End Property
    Public ReadOnly Property DateFulfilled() As String
      Get
        Return mvClassFields(ContactIncentiveFields.DateFulfilled).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Private mvContactIncentives As CollectionList(Of ContactIncentive) = Nothing
    Private mvContactIncentiveResponse As ContactIncentiveResponse

    Public Overrides Function GetAddRecordMandatoryParameters() As String
      Return "ContactNumber,Source"
    End Function


    Protected Overrides Sub PreValidateCreateParameters(ByVal pParameterList As CDBParameters)
      If pParameterList.Exists("Product") = False Then
        Dim vProduct As String() = pParameterList("IncentiveProduct").Value.Split(","c)
        Dim vQuantity As String() = pParameterList("IncentiveQuantity").Value.Split(","c)
        pParameterList.Add("Product", vProduct(0))
        pParameterList.Add("Quantity", vQuantity(0))
        If UBound(vProduct) > 0 Then
          mvContactIncentives = New CollectionList(Of ContactIncentive)
          Dim vContactIncentive As ContactIncentive
          Dim vList As New CDBParameters
          With vList
            .Add("ContactNumber", pParameterList("ContactNumber").Value)
            .Add("Source", pParameterList("Source").Value)
            .Add("Product")
            .Add("Quantity")
          End With
          For vIndex As Integer = 1 To UBound(vProduct)
            If mvContactIncentives IsNot Nothing Then
              vList("Product").Value = vProduct(vIndex)
              vList("Quantity").Value = vQuantity(vIndex)
              vContactIncentive = New ContactIncentive(mvEnv)
              vContactIncentive.Create(vList)
              mvContactIncentives.Add(vIndex.ToString, vContactIncentive)
              If mvContactIncentiveResponse Is Nothing Then
                mvContactIncentiveResponse = New ContactIncentiveResponse(mvEnv)
                Dim vResponseList As New CDBParameters
                With vResponseList
                  .Add("ContactNumber", pParameterList("ContactNumber").Value)
                  .Add("Source", pParameterList("Source").Value)
                  .Add("AddressNumber", pParameterList("AddressNumber").Value)
                  .Add("DateResponded", TodaysDate())
                  mvContactIncentiveResponse.Create(vResponseList)
                End With
              End If
            End If
          Next
        ElseIf UBound(vProduct) = 0 Then
          mvContactIncentiveResponse = New ContactIncentiveResponse(mvEnv)
          Dim vResponseList As New CDBParameters
          With vResponseList
            .Add("ContactNumber", pParameterList("ContactNumber").Value)
            .Add("Source", pParameterList("Source").Value)
            .Add("AddressNumber", pParameterList("AddressNumber").Value)
            .Add("DateResponded", TodaysDate())
            mvContactIncentiveResponse.Create(vResponseList)
          End With
        End If
      End If
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
      If mvContactIncentives IsNot Nothing Then
        For Each vContactIncentive As ContactIncentive In mvContactIncentives
          vContactIncentive.Save(pAmendedBy, pAudit)
        Next
      End If
      If mvContactIncentiveResponse IsNot Nothing Then
        mvContactIncentiveResponse.Save()
      End If
    End Sub

#End Region
  End Class
End Namespace
