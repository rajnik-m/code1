Namespace Access

  Public Class CommunicationsLog
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum CommunicationsLogFields
      AllFields = 0
      CommunicationsLogNumber
      ContactNumber
      AddressNumber
      DocumentType
      CreatedBy
      Precis
      DocumentClass
      Direction
      OurReference
      TheirReference
      Document
      Department
      StandardDocument
      Archiver
      Recipient
      Forwarded
      Completed
      Dated
      Received
      Package
      InUseBy
      Distributed
      CallDuration
      TotalDuration
      Source
      Subject
      SelectionSet
      EmailTo
      EmailFrom
      EmailReplyTo
      EmailCc
      EmailBcc
      EmailBodyIsHtml
      OriginalUri
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("communications_log_number", CDBField.FieldTypes.cftLong).PrefixRequired = True
        .Add("contact_number", CDBField.FieldTypes.cftLong).PrefixRequired = True
        .Add("address_number", CDBField.FieldTypes.cftLong).PrefixRequired = True
        .Add("document_type").PrefixRequired = True
        .Add("created_by")
        .Add("precis", CDBField.FieldTypes.cftMemo)
        .Add("document_class")
        .Add("direction")
        .Add("our_reference")
        .Add("their_reference")
        .Add("document", CDBField.FieldTypes.cftBulk)
        .Add("department")
        .Add("standard_document")
        .Add("archiver")
        .Add("recipient")
        .Add("forwarded", CDBField.FieldTypes.cftDate)
        .Add("completed", CDBField.FieldTypes.cftDate)
        .Add("dated", CDBField.FieldTypes.cftDate)
        .Add("received", CDBField.FieldTypes.cftDate)
        .Add("package").PrefixRequired = True
        .Add("in_use_by")
        .Add("distributed").SpecialColumn = True
        .Add("call_duration")
        .Add("total_duration")
        .Add("source")
        .Add("subject")
        .Add("selection_set", CDBField.FieldTypes.cftInteger).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbTelemarketing)
        .Add("email_to").PrefixRequired = True
        .Add("email_from").PrefixRequired = True
        .Add("email_reply_to").PrefixRequired = True
        .Add("email_cc").PrefixRequired = True
        .Add("email_bcc").PrefixRequired = True
        .Add("email_body_is_html").PrefixRequired = True
        .Add("original_uri")

        .Item(CommunicationsLogFields.CommunicationsLogNumber).PrimaryKey = True
        .SetControlNumberField(CommunicationsLogFields.CommunicationsLogNumber, "CO")
        If Not mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbEmailTemplates) Then
          .Item(CommunicationsLogFields.EmailTo).InDatabase = False
          .Item(CommunicationsLogFields.EmailFrom).InDatabase = False
          .Item(CommunicationsLogFields.EmailReplyTo).InDatabase = False
          .Item(CommunicationsLogFields.EmailCc).InDatabase = False
          .Item(CommunicationsLogFields.EmailBcc).InDatabase = False
          .Item(CommunicationsLogFields.EmailBodyIsHtml).InDatabase = False
        End If
      End With
    End Sub

    Private mvTopicChanged As Boolean

    Protected Overrides Sub ClearFields()
      mvTopicChanged = False
      mvDocument = Nothing
    End Sub

    Public ReadOnly Property TopicChanged() As Boolean
      Get
        Return mvTopicChanged
      End Get
    End Property

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return False
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "cl"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "communications_log"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property CommunicationsLogNumber() As Integer
      Get
        Return mvClassFields(CommunicationsLogFields.CommunicationsLogNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(CommunicationsLogFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AddressNumber() As Integer
      Get
        Return mvClassFields(CommunicationsLogFields.AddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property DocumentType() As String
      Get
        Return mvClassFields(CommunicationsLogFields.DocumentType).Value
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(CommunicationsLogFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property Precis() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Precis).Value
      End Get
    End Property
    Public ReadOnly Property DocumentClass() As String
      Get
        Return mvClassFields(CommunicationsLogFields.DocumentClass).Value
      End Get
    End Property
    Public ReadOnly Property Direction() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Direction).Value
      End Get
    End Property
    Public ReadOnly Property OurReference() As String
      Get
        Return mvClassFields(CommunicationsLogFields.OurReference).Value
      End Get
    End Property
    Public ReadOnly Property TheirReference() As String
      Get
        Return mvClassFields(CommunicationsLogFields.TheirReference).Value
      End Get
    End Property
    Private mvDocument As Byte() = Nothing
    Public ReadOnly Property Document() As Byte()
      Get
        If mvDocument Is Nothing Then
          mvDocument = DirectCast((New SQLStatement(mvEnv.Connection,
                                              "document",
                                              Me.DatabaseTableName,
                                              New CDBFields({New CDBField("communications_log_number",
                                                                          mvClassFields(CommunicationsLogFields.CommunicationsLogNumber).Value,
                                                                          CDBField.FieldWhereOperators.fwoEqual)}))).
                                GetDataTable.Rows(0)(0), Byte())
        End If
        Return mvDocument
      End Get
    End Property
    Public ReadOnly Property Department() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Department).Value
      End Get
    End Property
    Public ReadOnly Property StandardDocument() As String
      Get
        Return mvClassFields(CommunicationsLogFields.StandardDocument).Value
      End Get
    End Property
    Public ReadOnly Property Archiver() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Archiver).Value
      End Get
    End Property
    Public ReadOnly Property Recipient() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Recipient).Value
      End Get
    End Property
    Public ReadOnly Property Forwarded() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Forwarded).Value
      End Get
    End Property
    Public ReadOnly Property Completed() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Completed).Value
      End Get
    End Property
    Public ReadOnly Property Dated() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Dated).Value
      End Get
    End Property
    Public ReadOnly Property Received() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Received).Value
      End Get
    End Property
    Public ReadOnly Property ExternalApplicationCode() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Package).Value
      End Get
    End Property
    Public ReadOnly Property InUseBy() As String
      Get
        Return mvClassFields(CommunicationsLogFields.InUseBy).Value
      End Get
    End Property
    Public ReadOnly Property Distributed() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Distributed).Value
      End Get
    End Property
    Public ReadOnly Property CallDuration() As String
      Get
        Return mvClassFields(CommunicationsLogFields.CallDuration).Value
      End Get
    End Property
    Public ReadOnly Property TotalDuration() As String
      Get
        Return mvClassFields(CommunicationsLogFields.TotalDuration).Value
      End Get
    End Property
    Public ReadOnly Property Source() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Source).Value
      End Get
    End Property
    Public ReadOnly Property Subject() As String
      Get
        Return mvClassFields(CommunicationsLogFields.Subject).Value
      End Get
    End Property
    Public ReadOnly Property EmailTo As String
      Get
        Return mvClassFields(CommunicationsLogFields.EmailTo).Value
      End Get
    End Property
    Public ReadOnly Property EmailFrom As String
      Get
        Return mvClassFields(CommunicationsLogFields.EmailFrom).Value
      End Get
    End Property
    Public ReadOnly Property EmailReplyTo As String
      Get
        Return mvClassFields(CommunicationsLogFields.EmailReplyTo).Value
      End Get
    End Property
    Public ReadOnly Property EmailCc As String
      Get
        Return mvClassFields(CommunicationsLogFields.EmailCc).Value
      End Get
    End Property
    Public ReadOnly Property EmailBcc As String
      Get
        Return mvClassFields(CommunicationsLogFields.EmailBcc).Value
      End Get
    End Property
    Public ReadOnly Property EmailBodyIsHtml As Boolean
      Get
        Return mvClassFields(CommunicationsLogFields.EmailBodyIsHtml).Bool
      End Get
    End Property
    Public Property OriginalUri As String
      Get
        Return mvClassFields(CommunicationsLogFields.OriginalUri).Value
      End Get
      Set(value As String)
        Dim vActualValue As String = String.Empty
        Dim vTestUri As Uri = Nothing
        If Uri.TryCreate(value, UriKind.Absolute, vTestUri) AndAlso Not String.IsNullOrWhiteSpace(System.IO.Path.GetFileName(vTestUri.LocalPath)) Then
          vActualValue = vTestUri.AbsoluteUri
        Else
          RaiseError(DataAccessErrors.daeParameterValueInvalid, "OriginalUri", value)
        End If
        mvClassFields.Item(CommunicationsLogFields.OriginalUri).Value = vActualValue
      End Set
    End Property

#End Region

#Region "Non-Autogenerated Code"

    <Flags()> _
    Private Enum docSourceConstants
      docSourcePrecis = 1
      docSourceBlank = 2
      docSourceTopAndTail = 4
      docSourceStdMerge = 8
      docSourceTemplate = 16
      docSourceScan = 32
      docSourceOther = 64
      docSourceStdPrecis = 128
      docSourceEmail = 256
      docSourceEmailMerge = 512
    End Enum

    Public Enum DocumentStyles              '       WP Doc | Mail Merge | Source | Std Doc
      dsnNone
      dsnPrecisOnly                         '         N    |     N      |   W    |    N
      dsnBlankDocument                      '         W    |     N      |   W    |    N
      dsnTopAndTailedDocument               '         W    |     N      |   W    |    N
      dsnStandardDocumentWithMerge          '         W    |     Y      |   W    |    Y
      dsnStandardDocumentTemplate           '         W    |     N      |   W    |    Y
      dsnStandardDocumentPrecis             '         N    |     N      |   W    |    Y
      dsnScannedImage                       '         N    |     N      |   S    |    N
      dsnOther                              '         N    |     N      |   O    |    N
      dsnBlankEmail                         '         W    |     N      |   E    |    N
      dsnStandardEmailWithMerge             '         W    |     Y      |   E    |    Y
    End Enum

    Public Function GetDocumentStyleTable() As CDBDataTable
      Dim vTypes() As String
      Dim vStyles As docSourceConstants
      Dim vTable As New CDBDataTable
      'Set the document sources
      vTypes = StrConv(mvEnv.GetConfig("document_source_types"), vbUpperCase).Split("|"c)
      For Each vItem As String In vTypes
        Select Case vItem
          Case "PRECIS"
            vStyles = vStyles Or docSourceConstants.docSourcePrecis
          Case "BLANK"
            vStyles = vStyles Or docSourceConstants.docSourceBlank
          Case "TOPTAIL"
            vStyles = vStyles Or docSourceConstants.docSourceTopAndTail
          Case "STDMERGE"
            vStyles = vStyles Or docSourceConstants.docSourceStdMerge
          Case "TEMPLATE"
            vStyles = vStyles Or docSourceConstants.docSourceTemplate
          Case "SCAN"
            vStyles = vStyles Or docSourceConstants.docSourceScan
          Case "OTHER"
            vStyles = vStyles Or docSourceConstants.docSourceOther
          Case "STDPRECIS"
            vStyles = vStyles Or docSourceConstants.docSourceStdPrecis
          Case "EMAIL"
            vStyles = vStyles Or docSourceConstants.docSourceEmail
          Case "EMAILMRG"
            vStyles = vStyles Or docSourceConstants.docSourceEmailMerge
        End Select
      Next
      If vStyles = 0 Then vStyles = docSourceConstants.docSourcePrecis Or docSourceConstants.docSourceBlank Or docSourceConstants.docSourceTopAndTail Or docSourceConstants.docSourceStdMerge Or docSourceConstants.docSourceTemplate Or docSourceConstants.docSourceScan Or docSourceConstants.docSourceOther Or docSourceConstants.docSourceStdPrecis

      vTable.AddColumnsFromList("DocumentStyle,DocumentStyleDesc")
      If (vStyles And docSourceConstants.docSourcePrecis) = docSourceConstants.docSourcePrecis Then vTable.AddRowFromItems(CInt(DocumentStyles.dsnPrecisOnly).ToString, ProjectText.String19235) 'Precis Only
      If (vStyles And docSourceConstants.docSourceBlank) = docSourceConstants.docSourceBlank Then vTable.AddRowFromItems(CInt(DocumentStyles.dsnBlankDocument).ToString, ProjectText.String19236) 'Blank Document
      If (vStyles And docSourceConstants.docSourceTopAndTail) = docSourceConstants.docSourceTopAndTail Then vTable.AddRowFromItems(CInt(DocumentStyles.dsnTopAndTailedDocument).ToString, ProjectText.String19237) 'Top & Tailed Document
      If (vStyles And docSourceConstants.docSourceStdMerge) = docSourceConstants.docSourceStdMerge Then vTable.AddRowFromItems(CInt(DocumentStyles.dsnStandardDocumentWithMerge).ToString, ProjectText.String19238) 'Standard Document with Merge
      If (vStyles And docSourceConstants.docSourceTemplate) = docSourceConstants.docSourceTemplate Then vTable.AddRowFromItems(CInt(DocumentStyles.dsnStandardDocumentTemplate).ToString, ProjectText.String19239) 'Standard Document/Template
      If (vStyles And docSourceConstants.docSourceScan) = docSourceConstants.docSourceScan Then vTable.AddRowFromItems(CInt(DocumentStyles.dsnScannedImage).ToString, ProjectText.String19240) 'Scanned or Imported Image
      If (vStyles And docSourceConstants.docSourceOther) = docSourceConstants.docSourceOther Then vTable.AddRowFromItems(CInt(DocumentStyles.dsnOther).ToString, ProjectText.String19241) 'Use Other Packages
      If (vStyles And docSourceConstants.docSourceStdPrecis) = docSourceConstants.docSourceStdPrecis Then vTable.AddRowFromItems(CInt(DocumentStyles.dsnStandardDocumentPrecis).ToString, ProjectText.String19226) 'Standard Document Precis Only
      If (vStyles And docSourceConstants.docSourceEmail) = docSourceConstants.docSourceEmail Then vTable.AddRowFromItems(CInt(DocumentStyles.dsnBlankEmail).ToString, ProjectText.BlankEmail) 'Blank Email
      If (vStyles And docSourceConstants.docSourceEmailMerge) = docSourceConstants.docSourceEmailMerge Then vTable.AddRowFromItems(CInt(DocumentStyles.dsnStandardEmailWithMerge).ToString, ProjectText.StandardEmailWithMerge) 'Standard Email With Merge
      Return vTable
    End Function

    Public ReadOnly Property Name() As String
      Get
        Return CommunicationsLogNumber & " - " & OurReference
      End Get
    End Property

    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("communications_log_number", CommunicationsLogNumber)
      If mvEnv.Connection.GetCount("meetings", vWhereFields) > 0 Then RaiseError(DataAccessErrors.daeCannotDeleteMeetingDocument)
      vWhereFields.Clear()
      vWhereFields.Add("document_number", CDBField.FieldTypes.cftLong, CommunicationsLogNumber)
      If mvEnv.Connection.GetCount("document_actions", vWhereFields) > 0 Then RaiseError(DataAccessErrors.daeCannotDeleteActionDocument)
      vWhereFields.Clear()
      vWhereFields.Add("communications_log_number", CDBField.FieldTypes.cftLong, CommunicationsLogNumber)
      'Delete the communications log's references, links, history & subjects & trans
      mvEnv.Connection.DeleteRecordsMultiTable("communications_log_references,communications_log_links,communications_log_history,communications_log_subjects", vWhereFields)
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataLinkToCommunication) Then
        'Delete the communications log's trans
        mvEnv.Connection.DeleteRecords("communications_log_trans", vWhereFields, False)
      End If
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDocumentLogLinks) Then
        'Delete the communications log's trans
        mvEnv.Connection.DeleteRecords("document_log_links", vWhereFields, False)
      End If
      'Delete the communications log's sticky notes
      With vWhereFields
        .Clear()
        .Add("unique_id", CDBField.FieldTypes.cftLong, CommunicationsLogNumber)
        .Add("record_type", CDBField.FieldTypes.cftCharacter, "D")
      End With
      mvEnv.Connection.DeleteRecords("sticky_notes", vWhereFields, False)
      'Delete the communications log's document links
      With vWhereFields
        .Clear()
        .Add("communications_log_number_1", CDBField.FieldTypes.cftLong, CommunicationsLogNumber)
      End With
      mvEnv.Connection.DeleteRecords("communications_log_doc_links", vWhereFields, False)
      With vWhereFields
        .Clear()
        .Add("communications_log_number_2", CommunicationsLogNumber)
      End With
      mvEnv.Connection.DeleteRecords("communications_log_doc_links", vWhereFields, False)
      'Finally delete the document and its data from the communications log
      DeleteAttachments()
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Overloads Sub Update(ByVal pDocumentType As String, ByVal pDocumentClass As String, ByVal pOurReference As String, ByVal pDated As String, ByVal pSource As String, ByVal pSubject As String, ByVal pPrecis As String, ByVal pDirection As String)
      With mvClassFields
        .Item(CommunicationsLogFields.DocumentType).Value = pDocumentType
        .Item(CommunicationsLogFields.DocumentClass).Value = pDocumentClass
        .Item(CommunicationsLogFields.Dated).Value = pDated
        .Item(CommunicationsLogFields.Source).Value = pSource
        .Item(CommunicationsLogFields.Subject).Value = pSubject
        .Item(CommunicationsLogFields.Precis).Value = pPrecis
        .Item(CommunicationsLogFields.OurReference).Value = pOurReference
        .Item(CommunicationsLogFields.Direction).Value = pDirection
      End With
    End Sub

    Public Sub SaveWithLinks(ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer, ByVal pTopic As String, ByVal pSubTopic As String, ByVal pQuantity As String, Optional ByVal pAmendedBy As String = "")
      Dim vLink As CommunicationsLogLink
      Dim vLinkType1 As CommunicationsLogLink.CommunicationLogLinkTypes
      Dim vLinkType2 As CommunicationsLogLink.CommunicationLogLinkTypes
      Dim vPrimary As New CommunicationsLogSubject
      Dim vSubject As New CommunicationsLogSubject
      Dim vHistory As New CommunicationsLogHistory
      Dim vAction As CommunicationsLogHistory.CommunicationsLogHistoryActions
      Dim vFields As New CDBFields
      Dim vSaveSubjectRequired As Boolean

      If Not mvExisting Then mvEnv.CacheControlNumbers(CDBEnvironment.CachedControlNumberTypes.ccnJournal, 2)
      SetValid()
      Dim vTransactionStarted As Boolean = mvEnv.Connection.StartTransaction()
      Try
        If mvExisting Then
          If pTopic.Length > 0 And pSubTopic.Length > 0 Then
            vPrimary.Init(mvEnv, CommunicationsLogNumber) 'Get the current primary subject
            If vPrimary.Existing And ((pTopic <> vPrimary.Topic) Or (pSubTopic <> vPrimary.SubTopic) Or (Val(pQuantity) <> vPrimary.Quantity)) Then
              vSubject.Init(mvEnv, CommunicationsLogNumber, pTopic, pSubTopic)
              If vSubject.Existing Then
                vSubject.MakePrimary()
                vSubject.Update(pTopic, pSubTopic, pQuantity)
                vSubject.Save(pAmendedBy, True)
              Else
                vPrimary.Update(pTopic, pSubTopic, pQuantity)
                vPrimary.Save(pAmendedBy, True)
                mvTopicChanged = True
              End If
            End If
          End If
          If pContactNumber > 0 And pAddressNumber > 0 Then
            mvClassFields.Item(CommunicationsLogFields.ContactNumber).IntegerValue = pContactNumber
            mvClassFields.Item(CommunicationsLogFields.AddressNumber).IntegerValue = pAddressNumber
          End If
          vAction = CommunicationsLogHistory.CommunicationsLogHistoryActions.clhaUpdated
        Else
          vAction = CommunicationsLogHistory.CommunicationsLogHistoryActions.clhaCreated
          If pContactNumber > 0 And pAddressNumber > 0 Then 'Check for anonymous document from TCR
            vLink = New CommunicationsLogLink
            'BR15619 notified and processed flags should automatically be set to true for the sender
            Dim vNotified1 As Boolean
            Dim vNotified2 As Boolean
            Dim vProcessed1 As Boolean
            Dim vProcessed2 As Boolean
            If Direction = "O" Then
              vLinkType1 = CommunicationsLogLink.CommunicationLogLinkTypes.clltAddressee
              vLinkType2 = CommunicationsLogLink.CommunicationLogLinkTypes.clltSender
              vNotified2 = True
              vProcessed2 = True
            Else
              vLinkType1 = CommunicationsLogLink.CommunicationLogLinkTypes.clltSender
              vNotified1 = True
              vProcessed1 = True
              vLinkType2 = CommunicationsLogLink.CommunicationLogLinkTypes.clltAddressee
            End If
            vLink = New CommunicationsLogLink
            vLink.Create(CommunicationsLogLink.DocumentLinkTypes.dltDocumentToContact, mvEnv, CommunicationsLogNumber, ContactNumber, AddressNumber, vLinkType1, vNotified1, vProcessed1)
            mvEnv.AddJournalRecord(JournalTypes.jnlDocument, JournalOperations.jnlInsert, ContactNumber, AddressNumber, CommunicationsLogNumber)
            vLink = New CommunicationsLogLink
            vLink.Create(CommunicationsLogLink.DocumentLinkTypes.dltDocumentToContact, mvEnv, CommunicationsLogNumber, pContactNumber, pAddressNumber, vLinkType2, vNotified2, vProcessed2)
            mvEnv.AddJournalRecord(JournalTypes.jnlDocument, JournalOperations.jnlInsert, pContactNumber, pAddressNumber, CommunicationsLogNumber)
          End If
          vSubject.Init(mvEnv)
          vSubject.Create(CommunicationsLogNumber, pTopic, pSubTopic, True, pQuantity)
          vSaveSubjectRequired = True
        End If
        vHistory.Init(mvEnv)
        vHistory.Create(CommunicationsLogNumber, vAction)
        vHistory.Save(pAmendedBy)
        Save(pAmendedBy, True) 'pAmendedBy
        If vSaveSubjectRequired Then vSubject.Save(pAmendedBy, True) 'Do this last so that extended auditing can pick up the contact number
        If vTransactionStarted Then
          mvEnv.Connection.CommitTransaction()
        End If
      Catch
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Sub

    Protected Overrides Sub SetValid()
      MyBase.SetValid()
      If OurReference.Length = 0 Then mvClassFields(CommunicationsLogFields.OurReference).Value = GetDocumentReference(CommunicationsLogNumber)
      If Department.Length = 0 Then mvClassFields(CommunicationsLogFields.Department).Value = mvEnv.User.Department
    End Sub

    Public Sub SaveDocument(ByVal pDocumentName As String, ByVal pExternal As Boolean)
      Dim vFields As New CDBFields
      Dim vFileName As String

      If pExternal Then 'External storage
        vFileName = "FILENAME=" & pDocumentName 'return new filename
        vFields.Add("document", CDBField.FieldTypes.cftBulk, vFileName)
      Else
        vFields.Add("document", CDBField.FieldTypes.cftFile, pDocumentName)
      End If
      mvEnv.Connection.UpdateRecords(DatabaseTableName, vFields, mvClassFields.WhereFields)
    End Sub

    Public Sub SetDistributed(ByVal pDocDefaults As DocumentDefault, ByVal pDocumentType As String)
      mvClassFields.Item(CommunicationsLogFields.InUseBy).SetValue = "x"   'Use this to force the in_use_by field to be updated
      mvClassFields.Item(CommunicationsLogFields.InUseBy).Value = ""
      mvClassFields.Item(CommunicationsLogFields.Distributed).Value = "Y"
      If pDocumentType.Length > 0 Then mvClassFields.Item(CommunicationsLogFields.DocumentType).Value = pDocumentType
      With pDocDefaults
        If .Existing Then
          If .DocumentClass.Length > 0 Then mvClassFields(CommunicationsLogFields.DocumentClass).Value = .DocumentClass
          If .Department.Length > 0 Then mvClassFields(CommunicationsLogFields.Department).Value = .Department
          If .OurReference.Length > 0 Then mvClassFields(CommunicationsLogFields.OurReference).Value = .OurReference
          If .Precis.Length > 0 Then mvClassFields(CommunicationsLogFields.Precis).Value = .Precis
          If .ContactNumber > 0 Then mvClassFields(CommunicationsLogFields.ContactNumber).IntegerValue = .ContactNumber
          If .AddressNumber > 0 Then mvClassFields(CommunicationsLogFields.AddressNumber).IntegerValue = .AddressNumber
          If pDocumentType.Length = 0 Then
            If .DocumentType.Length > 0 Then mvClassFields(CommunicationsLogFields.DocumentType).Value = .DocumentType
          End If
        End If
      End With
    End Sub

    Public Property ExternalDocumentName() As String
      Get
        Dim vResult As String = String.Empty
        If IsHeldExternally Then
          vResult = CStr((New ASCIIEncoding).GetChars(Document)).Substring(9)
        End If
        Return vResult
      End Get
      Protected Set(ByVal pDocumentPath As String)
        If System.IO.File.Exists(pDocumentPath) Then
          Me.SaveDocument(pDocumentPath, True)
        Else
          Throw New System.IO.FileNotFoundException("Only existing files can be set as external documents", pDocumentPath)
        End If
      End Set
    End Property

    Public ReadOnly Property IsHeldExternally As Boolean
      Get
        Return Document.Length > 9 AndAlso CStr((New ASCIIEncoding).GetChars(Document)).StartsWith("FILENAME=", StringComparison.CurrentCultureIgnoreCase)
      End Get
    End Property

    Public Sub RelocateExternalDocument(pDestination As String)
      If Not String.IsNullOrWhiteSpace(ExternalDocumentName) Then
        System.IO.File.Move(ExternalDocumentName, pDestination & System.IO.Path.DirectorySeparatorChar & System.IO.Path.GetFileName(ExternalDocumentName))
        ExternalDocumentName = pDestination & System.IO.Path.DirectorySeparatorChar & System.IO.Path.GetFileName(ExternalDocumentName)
      Else
        Throw New NotSupportedException(ErrorText.DaeDocumentNotExternal)
      End If
    End Sub

    ''' <summary>
    ''' Saves the email content for this communications log.
    ''' </summary>
    ''' <param name="pEmail">The email.</param>
    ''' <exception cref="System.InvalidOperationException">
    ''' Attempt to set the Document property of an uninitialised coummunications log object
    ''' or
    ''' Attempt to set the Document property of an unsaved coummunications log object
    ''' or
    ''' Attempt to set the Document property of an email coummunications log updated no records
    ''' or
    ''' Attempt to update the Document property of an email coummunications log that already contains data
    ''' </exception>
    Public Sub SaveEmail(ByVal pEmail As CDBEmailContent)
      If Not CommunicationsLogNumber > 0 Then
        Throw New InvalidOperationException(ErrorText.DaeObjectNotInitialised)
      End If
      If Not Existing Then
        Throw New InvalidOperationException(ErrorText.DaeObjectNotPersisted)
      End If
      If pEmail.Content.Length = 0 Then
        Throw New InvalidOperationException(ErrorText.DaeNoEmailBody)
      End If
      Dim vTransactionStarted As Boolean = mvEnv.Connection.StartTransaction
      Try
        If GetEmail() Is Nothing Then
          Dim vSql As New StringBuilder
          Dim vParamName As String = String.Empty
          Dim vParameter As IDbDataParameter = mvEnv.Connection.GetDBParameterFromByteArray(mvClassFields(CommunicationsLogFields.Document).Name,
                                                                                            pEmail.Content,
                                                                                            vParamName)
          vSql.AppendLine("UPDATE " & Me.DatabaseTableName & " ")
          vSql.AppendLine("SET    " & mvClassFields(CommunicationsLogFields.Document).Name & " = " & vParamName & " ")
          vSql.AppendLine("WHERE  " & mvClassFields(CommunicationsLogFields.CommunicationsLogNumber).Name & " = " & Me.CommunicationsLogNumber.ToString)
          Using vCommand As IDbCommand = mvEnv.Connection.CreateCommand
            vCommand.CommandType = CommandType.Text
            vCommand.CommandText = vSql.ToString
            vCommand.Parameters.Add(vParameter)
            If vCommand.ExecuteNonQuery() <> 1 Then
              Throw New InvalidOperationException(String.Format(ErrorText.String16072, Me.DatabaseTableName))
            End If
            For Each vAttachment In pEmail.Attachments
              SaveAttachment(vAttachment)
            Next vAttachment
            If vTransactionStarted Then
              mvEnv.Connection.CommitTransaction()
            End If
          End Using
        Else
        Throw New InvalidOperationException(ErrorText.DaeEmailContentImmutable)
        End If
      Catch ex As Exception
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Sub

    ''' <summary>
    ''' Saves the an attachment linked to this communicaitons log attachment.
    ''' </summary>
    ''' <param name="pNewAttachment">The new attachment.</param>
    ''' <exception cref="System.ArgumentNullException">pNewAttachment</exception>
    ''' <exception cref="System.InvalidOperationException">Specified attachement does not exist</exception>
    ''' <remarks>If the supplied <see cref="CDBEmailAttachment"/> contains an ID, it is assumed to be an 
    ''' existing attachment and just a link is created.  If not, the attachment is saved as a new attachment
    ''' and the link is created to that.</remarks>
    Private Sub SaveAttachment(pNewAttachment As CDBEmailAttachment)
      If pNewAttachment Is Nothing Then
        Throw New ArgumentNullException("pNewAttachment")
      End If
      Dim vTransactionStarted As Boolean = mvEnv.Connection.StartTransaction
      Try
        Dim vAttachment As Attachment = Nothing
        If pNewAttachment.Id > 0 Then
          vAttachment = Attachment.GetInstance(mvEnv, pNewAttachment.Id)
          If vAttachment Is Nothing Then
            Throw New InvalidOperationException(ErrorText.DaeAttachmentNotFound)
          End If
        Else
          vAttachment = Attachment.CreateInstance(mvEnv, pNewAttachment.Name, pNewAttachment.Content)
          vAttachment.Save()
        End If
        Dim vAttachmentLink As AttachmentLink = AttachmentLink.CreateInstance(mvEnv,
                                                                              vAttachment.AttachmentId,
                                                                              Me.DatabaseTableName,
                                                                              Me.CommunicationsLogNumber)
        vAttachmentLink.Save()
        If vTransactionStarted Then
          mvEnv.Connection.CommitTransaction()
        End If
      Catch ex As Exception
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Sub

    ''' <summary>
    ''' Gets the email content for this communications log.
    ''' </summary>
    ''' <returns></returns>
    Public Function GetEmail() As CDBEmailContent
      Dim vResult As New CDBEmailContent With {.IsBodyHtml = Me.EmailBodyIsHtml,
                                               .Attachments = New List(Of CDBEmailAttachment)}
      Dim vSql As New SQLStatement(mvEnv.Connection,
                                   mvClassFields(CommunicationsLogFields.Document).Name,
                                   Me.DatabaseTableName,
                                   New CDBField(mvClassFields(CommunicationsLogFields.CommunicationsLogNumber).Name,
                                                Me.CommunicationsLogNumber,
                                                 CDBField.FieldWhereOperators.fwoEqual))
      Dim vDataRow As DataRow = vSql.GetDataTable.Rows(0)
      vResult.Content = If(vDataRow(0).GetType Is GetType(DBNull), Nothing, CType(vDataRow(0), Byte()))
      Dim vAttachments = New List(Of CDBEmailAttachment)
      For Each vAttachmentLinkRow As DataRow In New SQLStatement(mvEnv.Connection,
                                                                 "attachment_link_id",
                                                                 "attachment_links",
                                                                 New CDBFields({New CDBField("attachment_link_table",
                                                                                            Me.DatabaseTableName),
                                                                                New CDBField("attachment_link_foreign_id",
                                                                                             Me.CommunicationsLogNumber)})).GetDataTable().AsEnumerable
        Dim vAttachmentLink As AttachmentLink = AttachmentLink.GetInstance(mvEnv, CInt(vAttachmentLinkRow("attachment_link_id")))
        vResult.Attachments.Add(New CDBEmailAttachment With {.Id = vAttachmentLink.Attachment.AttachmentId,
                                                             .Name = vAttachmentLink.Attachment.Name,
                                                             .Content = vAttachmentLink.Attachment.Document})

      Next vAttachmentLinkRow
      If vResult.Content Is Nothing OrElse Not vResult.Content.Length > 0 Then
        vResult = Nothing
      End If
      Return vResult
    End Function

    ''' <summary>
    ''' Deletes the attachments for this communnications log.
    ''' </summary>
    Private Sub DeleteAttachments()
      Dim vTransactionStarted As Boolean = mvEnv.Connection.StartTransaction
      Try
        For Each vAttachmentLinkRow As DataRow In New SQLStatement(mvEnv.Connection,
                                                                   "attachment_link_id",
                                                                   "attachment_links",
                                                                   New CDBFields({New CDBField("attachment_link_table",
                                                                                              Me.DatabaseTableName),
                                                                                  New CDBField("attachment_link_foreign_id",
                                                                                               Me.CommunicationsLogNumber)})).GetDataTable().AsEnumerable
          Dim vAttachmentLink As AttachmentLink = AttachmentLink.GetInstance(mvEnv, CInt(vAttachmentLinkRow("attachment_link_id")))
          vAttachmentLink.Delete()
        Next vAttachmentLinkRow
        If vTransactionStarted Then
          mvEnv.Connection.CommitTransaction()
        End If
      Catch ex As Exception
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Sub
#End Region
  End Class
End Namespace
