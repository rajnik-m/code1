Imports System.Net.Mail

Namespace Access

  Public Class Communication
    Inherits CARERecord
    Implements IRecordCreate

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum CommunicationFields
      AllFields = 0
      AddressNumber
      ContactNumber
      Device
      ExDirectory
      DiallingCode
      StdCode
      Number
      Extension
      Notes
      CliNumber
      CommunicationNumber
      ValidFrom
      ValidTo
      IsActive
      Mail
      DeviceDefault
      PreferredMethod
      Archive
      CommunicationUsage
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("device")
        .Add("ex_directory")
        .Add("dialling_code")
        .Add("std_code")
        .Add("number")
        .Add("extension")
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("cli_number")
        .Add("communication_number", CDBField.FieldTypes.cftLong)
        .Add("valid_from", CDBField.FieldTypes.cftDate)
        .Add("valid_to", CDBField.FieldTypes.cftDate)
        .Add("is_active")
        .Add("mail")
        .Add("device_default")
        .Add("preferred_method")
        .Add("archive")
        .Add("communication_usage")

        .Item(CommunicationFields.Device).PrefixRequired = True
        .Item(CommunicationFields.CommunicationNumber).PrimaryKey = True
        .SetControlNumberField(CommunicationFields.CommunicationNumber, "CM")
        .Item(CommunicationFields.Number).SpecialColumn = True
        .Item(CommunicationFields.Archive).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbArchiveCommunications)
        .Item(CommunicationFields.CommunicationUsage).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbCommunicationsUsage)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "com"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "communications"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property AddressNumber() As Integer
      Get
        Return mvClassFields(CommunicationFields.AddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(CommunicationFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Device() As String
      Get
        Return mvClassFields(CommunicationFields.Device).Value
      End Get
    End Property
    Public ReadOnly Property Archive() As Boolean
      Get
        Return mvClassFields(CommunicationFields.Archive).Bool
      End Get
    End Property
    Public ReadOnly Property ExDirectory() As Boolean
      Get
        Return mvClassFields(CommunicationFields.ExDirectory).Bool
      End Get
    End Property
    Public ReadOnly Property DiallingCode() As String
      Get
        Return mvClassFields(CommunicationFields.DiallingCode).Value
      End Get
    End Property
    Public ReadOnly Property StdCode() As String
      Get
        Return mvClassFields(CommunicationFields.StdCode).Value
      End Get
    End Property
    Public ReadOnly Property Number() As String
      Get
        Return mvClassFields(CommunicationFields.Number).Value
      End Get
    End Property
    Public ReadOnly Property Extension() As String
      Get
        Return mvClassFields(CommunicationFields.Extension).Value
      End Get
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(CommunicationFields.Notes).Value
      End Get
    End Property
    Public ReadOnly Property CliNumber() As String
      Get
        Return mvClassFields(CommunicationFields.CliNumber).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(CommunicationFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(CommunicationFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property CommunicationNumber() As Integer
      Get
        Return mvClassFields(CommunicationFields.CommunicationNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ValidFrom() As String
      Get
        Return mvClassFields(CommunicationFields.ValidFrom).Value
      End Get
    End Property
    Public ReadOnly Property ValidTo() As String
      Get
        Return mvClassFields(CommunicationFields.ValidTo).Value
      End Get
    End Property
    Public ReadOnly Property IsActive() As Boolean
      Get
        Return mvClassFields(CommunicationFields.IsActive).Bool
      End Get
    End Property
    Public ReadOnly Property Mail() As String
      Get
        Return mvClassFields(CommunicationFields.Mail).Value
      End Get
    End Property
    Public ReadOnly Property DeviceDefault() As Boolean
      Get
        Return mvClassFields(CommunicationFields.DeviceDefault).Bool
      End Get
    End Property
    Public ReadOnly Property PreferredMethod() As Boolean
      Get
        Return mvClassFields(CommunicationFields.PreferredMethod).Bool
      End Get
    End Property
    Public ReadOnly Property CommunicationUsage() As String
      Get
        Return mvClassFields(CommunicationFields.CommunicationUsage).Value
      End Get
    End Property
#End Region

#Region "Non-Auto Generated Code"

    Private mvContact As Contact
    Private mvAddress As Address
    Private mvSubsCount As Integer
    Private mvSubsChecked As Boolean
    Private mvEmailDevice As Boolean
    Private mvAutoEmailDevice As Boolean
    Private mvWWWAddress As Boolean
    Private mvDeviceInfoChecked As Boolean

    Protected Overrides Sub ClearFields()
      mvContact = Nothing
      mvAddress = Nothing
      mvSubsChecked = False
      mvDeviceInfoChecked = False
    End Sub

    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      mvClassFields(CommunicationFields.IsActive).Value = "Y"
      mvClassFields(CommunicationFields.Mail).Value = "Y"
      mvClassFields(CommunicationFields.ExDirectory).Value = "N"
      mvClassFields(CommunicationFields.DeviceDefault).Value = "N"
      mvClassFields(CommunicationFields.PreferredMethod).Value = "N"
      mvClassFields(CommunicationFields.Archive).Value = "N"
    End Sub

    Protected Overrides Sub SetValid()
      MyBase.SetValid()
      ValidateEmailAddress()
      ValidateWebAddress()
      SetCurrent()
    End Sub

    Private Sub ValidateEmailAddress()
      If Me.EmailDevice AndAlso
         BooleanValue(Me.Environment.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlEmailForceSmtpAddress)) Then
        Try
          Dim mailAddress As New MailAddress(Me.Number)
        Catch ex As Exception
          RaiseError(DataAccessErrors.daeInvalidEmailAddress, Me.Number)
        End Try
      End If
    End Sub

    Private Sub ValidateWebAddress()
      Dim vURI As New Uri("https://www.advancednfp.com/customer-support/supporthome.aspx") 'Initialised to avoid warning message.
      Dim vURIString As String = String.Empty
      If Me.WWWAddressDevice Then
        If Me.Number.ToLower().StartsWith("www.") Then
          vURIString = "http://" + Me.Number 'URI.TryCreate requires this although www. is valid.
        Else
          vURIString = Me.Number
        End If
        If Not Uri.TryCreate(vURIString, UriKind.Absolute, vURI) Then
          RaiseError(DataAccessErrors.daeInvalidWebAddress, Me.Number)
        End If
      End If
    End Sub

    Private Sub SetCurrent()
      Dim vActive As Boolean = True

      If IsDate(ValidFrom) Or IsDate(ValidTo) Then
        If IsDate(ValidFrom) Then
          If Date.Parse(ValidFrom) > Date.Parse(TodaysDate) Then vActive = False
        End If
        If IsDate(ValidTo) Then
          If Date.Parse(ValidTo) < Date.Parse(TodaysDate) Then vActive = False
        End If
      End If
      mvClassFields(CommunicationFields.IsActive).Value = IIf(vActive, "Y", "N").ToString
      If Not IsActive Then
        mvClassFields(CommunicationFields.Mail).Value = "N"
        mvClassFields(CommunicationFields.PreferredMethod).Value = "N"
        mvClassFields(CommunicationFields.DeviceDefault).Value = "N"
      End If
    End Sub

    Public ReadOnly Property Address() As Address
      Get
        If mvAddress Is Nothing Then
          mvAddress = New Address(mvEnv)
          mvAddress.Init(AddressNumber)
        End If
        Return mvAddress
      End Get
    End Property

    Public ReadOnly Property Contact() As Contact
      Get
        If mvContact Is Nothing Then
          mvContact = New Contact(mvEnv)
          If ContactNumber > 0 Then
            mvContact.Init(ContactNumber)
          Else
            If Address.AddressType = Address.AddressTypes.ataOrganisation Then mvContact.Init(Address.OrganisationNumber)
          End If
        End If
        Return mvContact
      End Get
    End Property

    Public Function CheckUsedElsewhere() As Boolean

      If Not mvSubsChecked Then
        mvSubsChecked = True
        If CommunicationNumber > 0 Then
          Dim vWhereFields As New CDBFields
          With vWhereFields
            .Add("contact_number", Contact.ContactNumber)
            .Add("communication_number", CommunicationNumber)
          End With
          mvSubsCount = mvEnv.Connection.GetCount("subscriptions", vWhereFields)
          If mvSubsCount = 0 Then mvSubsCount = mvEnv.Connection.GetCount("order_details", vWhereFields)
        End If
      End If
      Return mvSubsCount > 0
    End Function

    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataCommunicationsUsages) Then
        Dim vWhereFields As New CDBFields
        'BR13766: Don't add contact number when its Null ie the communication record is for Organisation
        If ContactNumber > 0 Then vWhereFields.Add("contact_number", ContactNumber)
        vWhereFields.Add("communication_number", CommunicationNumber)
        mvEnv.Connection.DeleteRecords("contact_communication_usages", vWhereFields, False)
      End If
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Overloads Sub Init(ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer, Optional ByVal pDevice As String = "", Optional ByVal pSTDCode As String = "", Optional ByVal pNumber As String = "", Optional ByVal pCommunicationNumber As Integer = 0)
      CheckClassFields()
      Dim vFields As New CDBFields
      If pContactNumber > 0 Then vFields.Add((mvClassFields.Item(CommunicationFields.ContactNumber).Name), pContactNumber)
      If pAddressNumber > 0 Then vFields.Add((mvClassFields.Item(CommunicationFields.AddressNumber).Name), pAddressNumber)
      If pCommunicationNumber > 0 Then vFields.Add((mvClassFields.Item(CommunicationFields.CommunicationNumber).Name), pCommunicationNumber)
      If pDevice.Length > 0 Then vFields.Add((mvClassFields.Item(CommunicationFields.Device).Name), pDevice).SpecialColumn = True 'Force alias
      If pSTDCode.Length > 0 Then vFields.Add((mvClassFields.Item(CommunicationFields.StdCode).Name), pSTDCode)
      If pNumber.Length > 0 Then vFields.Add((mvClassFields.Item(CommunicationFields.Number).Name), pNumber).SpecialColumn = True 'Force alias
      vFields.TableAlias = TableAlias
      If pContactNumber > 0 Or pAddressNumber > 0 Or pCommunicationNumber > 0 Then
        MyBase.InitWithPrimaryKey(vFields)
      Else
        SetDefaults()
      End If
    End Sub

    Public ReadOnly Property PhoneNumber() As String
      Get
        Dim vPhoneNumber As String = ""
        If DiallingCode.Length > 0 Then vPhoneNumber = "(" & DiallingCode & ") "
        If StdCode.Length > 0 Then vPhoneNumber = vPhoneNumber & StdCode & " "
        Return vPhoneNumber & Number
      End Get
    End Property

    Public Function CreateInstance(ByVal pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New Communication(mvEnv)
    End Function

    Public ReadOnly Property EmailDevice() As Boolean
      Get
        CheckDeviceInfo()
        Return mvEmailDevice
      End Get
    End Property

    Public ReadOnly Property WWWAddressDevice() As Boolean
      Get
        CheckDeviceInfo()
        Return mvWWWAddress
      End Get
    End Property

    Private Sub CheckDeviceInfo()
      If Not mvDeviceInfoChecked Then
        Dim vSQL As New SQLStatement(mvEnv.Connection, "email,auto_email,www_address", "devices", New CDBFields(New CDBField("device", Device)))
        Dim vRecordSet As CDBRecordSet = vSQL.GetRecordSet()
        If vRecordSet.Fetch Then
          mvEmailDevice = vRecordSet.Fields("email").Bool
          mvAutoEmailDevice = vRecordSet.Fields.FieldExists("auto_email").Bool
          mvWWWAddress = vRecordSet.Fields.FieldExists("www_address").Bool
        Else
          RaiseError(DataAccessErrors.daeInvalidCode, "Device")
        End If
        vRecordSet.CloseRecordSet()
        mvDeviceInfoChecked = True
      End If
    End Sub

    Public Sub SetAsDefault(ByVal pContact As Contact, ByVal pAlways As Boolean)
      'This function is only used by WEB Services at present
      'Please let me know if you want to change it (SDT)
      Dim vOrg As New Organisation(mvEnv)

      If EmailDevice Or WWWAddressDevice Then
        If pAlways Then RaiseError(DataAccessErrors.daeCommunicationsDefaultInvalid)
      Else
        If pContact.ContactType = Contact.ContactTypes.ctcOrganisation Then
          With vOrg
            .Init(pContact.ContactNumber)
            If .Existing Then
              If .Telephone = "" Or pAlways Then
                .DiallingCode = DiallingCode
                .STDCode = StdCode
                .Telephone = Number
                .Save(mvEnv.User.UserID, True)
              End If
            End If
          End With
        Else
          With pContact
            If .Telephone = "" Or pAlways Then
              .DiallingCode = DiallingCode
              .StdCode = StdCode
              .Telephone = Number
              .ExDirectory = ExDirectory
              .Save(mvEnv.User.UserID, True)
            End If
          End With
        End If
      End If
    End Sub

    Public Overloads Sub Create(ByVal pContactType As Contact.ContactTypes, ByVal pContactNumber As Integer, ByVal pParams As CDBParameters)
      MyBase.SetControlNumber()
      If pContactType <> Contact.ContactTypes.ctcOrganisation Then mvClassFields.Item(CommunicationFields.ContactNumber).IntegerValue = pContactNumber
      Update(pParams)
    End Sub

    Public Overrides Sub Update(ByVal pParams As CDBParameters)
      Dim vNumber As String

      With mvClassFields
        If pParams.OptionalValue("AddressNumber", AddressNumber) > 0 Then
          .Item(CommunicationFields.AddressNumber).IntegerValue = pParams.OptionalValue("AddressNumber", AddressNumber)
        Else
          .Item(CommunicationFields.AddressNumber).Value = ""
        End If
        .Item(CommunicationFields.DiallingCode).Value = pParams.OptionalValue("DiallingCode", DiallingCode)
        .Item(CommunicationFields.StdCode).Value = pParams.OptionalValue("STDCode", StdCode)
        .Item(CommunicationFields.Number).Value = pParams.OptionalValue("Number", Number)
        .Item(CommunicationFields.Device).Value = pParams.OptionalValue("Device", Device)
        If pParams.HasValue("Archive") Then .Item(CommunicationFields.Archive).Value = pParams("Archive").Value
        If pParams.HasValue("ExDirectory") Then .Item(CommunicationFields.ExDirectory).Value = pParams("ExDirectory").Value
        If Not EmailDevice And Not WWWAddressDevice Then
          'If we have no dialling code and no std code then both could be in the number so check
          vNumber = Number
          If (Len(DiallingCode) = 0) And (Len(StdCode) = 0) Then
            .Item(CommunicationFields.DiallingCode).Value = ExtractDiallingCode(mvEnv, vNumber)
            .Item(CommunicationFields.Number).Value = vNumber
          End If
          If Len(StdCode) = 0 Then
            .Item(CommunicationFields.StdCode).Value = ExtractSTDCode(mvEnv, vNumber, True)
            .Item(CommunicationFields.Number).Value = vNumber
          End If
          If Len(.Item(CommunicationFields.Number).Value) > 20 Then RaiseError(DataAccessErrors.daeCommunicationsNumberInvalid)
          .Item(CommunicationFields.CliNumber).Value = ExtractCliNumber(mvEnv, String.Concat(StdCode, Number))
          .Item(CommunicationFields.PreferredMethod).Value = pParams.OptionalValue("PreferredMethod", (mvClassFields(CommunicationFields.PreferredMethod).Value))
        Else
          .Item(CommunicationFields.CliNumber).Value = ""
          If WWWAddressDevice Then
            .Item(CommunicationFields.PreferredMethod).Value = "N"
          Else
            .Item(CommunicationFields.PreferredMethod).Value = pParams.OptionalValue("PreferredMethod", (mvClassFields(CommunicationFields.PreferredMethod).Value))
          End If
        End If
        .Item(CommunicationFields.Extension).Value = pParams.OptionalValue("Extension", Extension)
        .Item(CommunicationFields.Notes).Value = pParams.OptionalValue("Notes", Notes)
        .Item(CommunicationFields.ValidFrom).Value = pParams.OptionalValue("ValidFrom", ValidFrom)
        .Item(CommunicationFields.ValidTo).Value = pParams.OptionalValue("ValidTo", ValidTo)
        .Item(CommunicationFields.Mail).Value = pParams.OptionalValue("Mail", (mvClassFields(CommunicationFields.Mail).Value))
        .Item(CommunicationFields.DeviceDefault).Value = pParams.OptionalValue("DeviceDefault", (mvClassFields(CommunicationFields.DeviceDefault).Value))
        .Item(CommunicationFields.CommunicationUsage).Value = pParams.OptionalValue("CommunicationUsage", CommunicationUsage)
        SetCurrent()
        SetDeviceDefaultAndPreferred()
        If Not IsActive And pParams.ParameterExists("ClearDefault").Bool Then ClearDefault()
      End With
    End Sub
    ''' <summary>
    ''' Clear existing Preferred or Default prior to setting a new Preferred or Default.
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub SetDeviceDefaultAndPreferred()
      Dim vWhereFields As New CDBFields
      Dim vUpdateFields As New CDBFields
      If ContactNumber = 0 Then
        'The Contact is an Organisation. On the communications table Organisation numbers are not used, the contact number is NULL
        'So the address number is used with null to identify the communications records. BR20850.
        vWhereFields.Add("contact_number", 0, CDBField.FieldWhereOperators.fwoNullOrEqual)
        vWhereFields.Add("address_number", AddressNumber)
      Else
        vWhereFields.Add("contact_number", ContactNumber)
      End If
      vWhereFields.Add("communication_number", CommunicationNumber, CDBField.FieldWhereOperators.fwoNotEqual)

      If PreferredMethod = True And mvClassFields(CommunicationFields.PreferredMethod).ValueChanged Then
        'Set all other records to preferred false
        vUpdateFields.Add("preferred_method", "N")
        mvEnv.Connection.UpdateRecords("communications", vUpdateFields, vWhereFields, False)
      End If
      If DeviceDefault = True Then
        vWhereFields.Add("device", Device)
        vUpdateFields.Clear()
        vUpdateFields.Add("device_default", "N")
        mvEnv.Connection.UpdateRecords("communications", vUpdateFields, vWhereFields, False)
      End If
    End Sub

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      If mvClassFields(CommunicationFields.CommunicationUsage).InDatabase AndAlso mvClassFields(CommunicationFields.CommunicationUsage).ValueChanged Then
        'If usage added then add corresponding contact communication usage record if it does not already exist
        If CommunicationUsage.Length > 0 Then
          Dim vUsageExists As Boolean
          If mvExisting Then
            'This is an existing communication record so the usage might already exist
            Dim vWhereFields As New CDBFields
            vWhereFields.Add("communication_number", CommunicationNumber)
            vWhereFields.Add("communication_usage", CommunicationUsage)
            vUsageExists = mvEnv.Connection.GetCount("contact_communication_usages", vWhereFields) > 0
          End If
          If Not vUsageExists Then
            Dim vCCU As New ContactCommunicationUsage(mvEnv)
            vCCU.Create(Me, CommunicationUsage, "")
            vCCU.Save(pAmendedBy, pAudit, pJournalNumber)
          End If
        End If
      End If
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Sub ClearDefault()
      If Contact.ContactType = Contact.ContactTypes.ctcOrganisation Then
        Dim vOrg As New Organisation(mvEnv)
        With vOrg
          .Init(Contact.ContactNumber)
          If .Existing Then
            If .Telephone = Number And .STDCode = StdCode Then
              .DiallingCode = ""
              .STDCode = ""
              .Telephone = ""
              .Save()
            End If
          End If
        End With
      Else
        With Contact
          If .Telephone = Number And .StdCode = StdCode Then
            .DiallingCode = ""
            .StdCode = ""
            .Telephone = ""
            .ExDirectory = False
            .Save()
          End If
        End With
      End If
    End Sub

    Private Shared Function ExtractDiallingCode(pEnv As CDBEnvironment, ByRef pNumber As String) As String
      'The number may be in one of the following formats
      ' +44 1189340335  +44 01189340335 +44 (0)1189340335
      ' (44)1189340335  (44)01189340335
      ' +(44)1189340335  +(44)01189340335
      ' +44 (118) 9340335
      Dim vPos As Integer
      Dim vPosSpace As Integer
      Dim vPosOB As Integer
      Dim vPosCB As Integer
      Dim pValid As Boolean
      Dim vDiallingCode As String = ""

      pNumber = pNumber.Trim
      If pNumber.StartsWith("+") Or pNumber.StartsWith("(") Then
        If pNumber.StartsWith("+") Then 'Remove leading + and any following space
          pNumber = pNumber.Substring(1).TrimStart
        End If
        If pNumber.StartsWith("(") Then 'If open bracket is next then pull dialling code out
          vPosCB = InStr(pNumber, ")")
          If vPosCB > 0 Then
            vDiallingCode = ValidateDiallingCode(pEnv, Mid(pNumber, 2, vPosCB - 2), pValid)
            If pValid Then pNumber = LTrim(Mid(pNumber, vPosCB + 1))
          End If
        Else
          vPosSpace = InStr(pNumber, " ")
          vPosOB = InStr(pNumber, "(")
          vPos = GetMinInteger(vPosOB, vPosSpace, 0)
          If vPos > 0 Then
            vDiallingCode = ValidateDiallingCode(pEnv, Mid(pNumber, 1, vPos - 1), pValid)
            If pValid Then pNumber = LTrim(Mid(pNumber, vPos))
          End If
        End If
      End If
      Return vDiallingCode
    End Function

    Private Shared Function ValidateDiallingCode(pEnv As CDBEnvironment, ByVal pCode As String, ByRef pValid As Boolean) As String
      Dim vDiallingCode As String = pCode.Trim
      If vDiallingCode.Length > 0 And Not vDiallingCode.StartsWith("0") Then
        If vDiallingCode = "44" Then
          pValid = True
          Return vDiallingCode
        Else
          If pEnv.GetDescription("dialling_codes", "dialling_code", vDiallingCode).Length > 0 Then
            pValid = True
            Return vDiallingCode
          End If
        End If
      End If
      Return ""
    End Function

    Private Shared Function ExtractSTDCode(pEnv As CDBEnvironment, ByRef pNumber As String, ByVal pValidate As Boolean) As String
      Dim vPos As Integer
      Dim vValid As Boolean

      'Attempt to extract STD code from pNumber
      'The following code was extracted from the GetCommsItem method of the DataImportContactOrg class
      pNumber = pNumber.Trim
      Dim vSTDCode As String = ""
      If pNumber.StartsWith("(") Then
        vPos = InStr(pNumber, ")")
        If vPos > 0 And vPos < 9 Then
          vSTDCode = ValidateSTDCode(pEnv, Mid(pNumber, 2, vPos - 2), vValid)
          If pValidate And Not vValid Then vSTDCode = ""
          If vSTDCode.Length > 0 Then pNumber = Mid(pNumber, vPos + 1)
        End If
      Else
        Dim vPosDash As Integer = InStr(pNumber, "-")
        Dim vPosSpace As Integer = InStr(pNumber, " ")
        vPos = GetMinInteger(vPosDash, vPosSpace, 0)
        If vPos > 0 And vPos < 9 Then
          vSTDCode = ValidateSTDCode(pEnv, Left(pNumber, vPos - 1), vValid)
          If pValidate And Not vValid Then vSTDCode = ""
          If Len(vSTDCode) > 0 Then pNumber = Mid(pNumber, vPos + 1)
        End If
      End If
      pNumber = ReplaceString(pNumber, "-", " ").Trim
      Return vSTDCode
    End Function

    Private Shared Function ValidateSTDCode(pEnv As CDBEnvironment, ByRef pCode As String, ByRef pValid As Boolean) As String
      Dim vSTDCode As String = pCode.Trim
      If vSTDCode.Length > 0 And vSTDCode.StartsWith("0") Then
        If pEnv.GetDescription("std_codes", "std_code", vSTDCode).Length > 0 Then
          pValid = True
        End If
        Return vSTDCode
      End If
      Return ""
    End Function
    'BR19494
    Public Shared Function CheckPhoneNumber(ByVal vPhoneNumber As String) As Boolean
      If vPhoneNumber.StartsWith("+") Then 'Remove leading + and any following space
        vPhoneNumber = vPhoneNumber.Substring(1).TrimStart
      End If
      If vPhoneNumber.Contains("(") Then  'Remove any Brackets
        vPhoneNumber = ReplaceString(vPhoneNumber, "(", "").Trim
        vPhoneNumber = ReplaceString(vPhoneNumber, ")", "").Trim
      End If
      vPhoneNumber = ReplaceString(vPhoneNumber, " ", "")
      If Not IsNumeric(vPhoneNumber) Then
        Return False
      Else
        If vPhoneNumber.Contains(",") OrElse vPhoneNumber.StartsWith("-") OrElse vPhoneNumber.EndsWith("-") OrElse vPhoneNumber.StartsWith("+") OrElse vPhoneNumber.EndsWith("+") OrElse vPhoneNumber.Contains(".") Then
          Return False
        Else
          Return True
        End If
      End If
    End Function
    Public Shared Function GetMinInteger(ByVal pNum1 As Integer, ByVal pNum2 As Integer, ByVal pGreaterThan As Integer) As Integer
      'Returns the minimum of two numbers which is above pGreaterThan
      'Does not work very well with negative figures

      If pNum1 > pGreaterThan And pNum1 < pNum2 Then
        Return pNum1
      ElseIf pNum1 > pGreaterThan And pNum2 <= pGreaterThan Then
        Return pNum1
      ElseIf pNum2 > pGreaterThan And pNum2 < pNum1 Then
        Return pNum2
      ElseIf pNum2 > pGreaterThan And pNum1 <= pGreaterThan Then
        Return pNum2
      ElseIf pNum1 = pNum2 And pNum1 > pGreaterThan Then
        Return pNum1
      Else
        Return pGreaterThan
      End If
    End Function

    Public Function Duplicate(ByVal pEnv As CDBEnvironment, ByVal pContactType As Contact.ContactTypes, ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer, ByVal pDevice As String, ByVal pSTDCode As String, ByVal pNumber As String) As Boolean
      Dim vFound As Boolean
      Dim vUpdateSTD As Boolean

      System.Diagnostics.Debug.Assert((pContactNumber > 0 Or pAddressNumber > 0) And Len(pDevice) > 0, "")

      Dim vCLINumber As String = ExtractNumber(pSTDCode) & ExtractNumber(pNumber)
      Init()
      Dim vFields As New CDBFields
      If pContactNumber > 0 And pContactType <> Contact.ContactTypes.ctcOrganisation Then vFields.Add((mvClassFields.Item(CommunicationFields.ContactNumber).Name), CDBField.FieldTypes.cftLong, pContactNumber)
      If pAddressNumber > 0 And pContactType = Contact.ContactTypes.ctcOrganisation Then vFields.Add((mvClassFields.Item(CommunicationFields.AddressNumber).Name), CDBField.FieldTypes.cftLong, pAddressNumber)
      If pDevice.Length > 0 Then
        mvClassFields(CommunicationFields.Device).Value = pDevice
        vFields.Add((mvClassFields.Item(CommunicationFields.Device).Name), pDevice).SpecialColumn = True 'Force alias
      End If

      vFields.TableAlias = "com"
      Dim vRecordSet As CDBRecordSet = mvEnv.Connection.GetRecordSet("SELECT " & GetRecordSetFields() & " FROM " & DatabaseTableName & " com, devices d WHERE " & mvEnv.Connection.WhereClause(vFields) & " AND com.device = d.device")
      Dim vSTDCode As String = ""
      With vRecordSet
        Dim vNumber As String = ""
        While .Fetch() And Not vFound
          If (.Fields.Item("cli_number").Value.Length > 0) And (.Fields.Item("cli_number").Value = vCLINumber) Then
            'Do not want to report a match if both of these are null - e.g. an Email address will have null for CliNumber
            vFound = True
          Else
            If pSTDCode.Length = 0 Then
              Dim vCheckSTDCode As Boolean = True
              If pDevice.Length > 0 Then 'BR14519: 'Do not check STDCode for WWW or Email
                vCheckSTDCode = Not (WWWAddressDevice OrElse EmailDevice)
              End If
              If vCheckSTDCode Then vSTDCode = ExtractSTDCode(mvEnv, pNumber, True)
              vNumber = pNumber
            Else
              vSTDCode = pSTDCode
              vNumber = pNumber
            End If
            'BR17216 - Email address Checks
            If EmailDevice And vNumber.Contains("@") Then
              Dim vFieldValue As String
              vFieldValue = .Fields.Item("number").Value
              If BooleanValue(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlEmailCaseSensitive)) Then  'BR19523
                If String.Compare(Substring(vFieldValue, 0, InStr(vFieldValue, "@")), Substring(vNumber, 0, InStr(vNumber, "@")), StringComparison.InvariantCulture) = 0 Then
                  If String.Compare(Substring(vFieldValue, InStr(vFieldValue, "@")), Substring(vNumber, InStr(vNumber, "@")), StringComparison.InvariantCultureIgnoreCase) = 0 Then vFound = True
                End If
              Else
                If String.Compare(vFieldValue, vNumber, StringComparison.InvariantCultureIgnoreCase) = 0 Then
                  vFound = True
                End If
              End If
            Else
              If .Fields.Item("std_code").Value = vSTDCode And .Fields.Item("number").Value = vNumber Then
                vFound = True
              ElseIf pSTDCode.Length > 0 And .Fields.Item("std_code").Value.Length = 0 And .Fields.Item("number").Value = pSTDCode & pNumber Then
                vFound = True
              ElseIf ((pSTDCode.Length = 0 And vSTDCode.Length > 0 And .Fields.Item("std_code").Value.Length > 0 And (.Fields.Item("std_code").Value <> vSTDCode)) And (.Fields.Item("address_number").LongValue = pAddressNumber) And (.Fields.Item("number").Value = vNumber)) Then
                'No StdCode has been passed in, the StdCode has been extracted from the number, the record found has an StdCode and this is differnt from the new StdCode
                'And address is the same and number is the same
                '= Contact/Org Import has found that only the StdCode has changed
                If vSTDCode = ExtractSTDCode(mvEnv, pNumber, True) Then
                  'Only set as a duplicate if the new StdCode is valid
                  vFound = True
                  vUpdateSTD = True 'Will need to update the ClassFields as otherwise we don't know what it was changed to
                End If
              End If
            End If
          End If
          If vFound Then InitFromRecordSet(vRecordSet)
        End While
        .CloseRecordSet()
      End With
      If vFound = True And vUpdateSTD = True Then mvClassFields.Item("std_code").Value = vSTDCode
      Return vFound
    End Function

    Public Function GetRecordSetFieldsPhone() As String
      'Modify below to add each recordset type as required
      Return "com.contact_number,com.address_number,com.communication_number,dialling_code,std_code,ex_directory," & mvEnv.Connection.DBSpecialCol("com", "number")
    End Function

    Public Sub InitFromRecordSetPhone(ByVal pRecordSet As CDBRecordSet)
      Init()
      Dim vFields As CDBFields = pRecordSet.Fields
      mvExisting = True
      With mvClassFields
        'Always include the primary key attributes
        'Modify below to handle each recordset type as required
        .SetOptionalItem(CommunicationFields.CommunicationNumber, vFields)
        .SetItem(CommunicationFields.AddressNumber, vFields)
        .SetItem(CommunicationFields.ContactNumber, vFields)
        .SetItem(CommunicationFields.ExDirectory, vFields)
        .SetItem(CommunicationFields.DiallingCode, vFields)
        .SetItem(CommunicationFields.StdCode, vFields)
        .SetItem(CommunicationFields.Number, vFields)
      End With
    End Sub

    Public Sub SetAmended(ByVal pAmendedOn As String, ByVal pAmendedBy As String)
      mvClassFields.Item(CommunicationFields.AmendedOn).Value = pAmendedOn
      mvClassFields.Item(CommunicationFields.AmendedBy).Value = pAmendedBy
      mvOverrideAmended = True
    End Sub

    Public Sub SetCommunicationNumber(ByVal pCommunicationNumber As Integer)
      'Used to set the CommunicationNumber (i) by Import using the control number already found, (ii) CommsMaint when adding Usages
      If mvClassFields(CommunicationFields.CommunicationNumber).IntegerValue = 0 Then mvClassFields(CommunicationFields.CommunicationNumber).IntegerValue = pCommunicationNumber
    End Sub

    Public Overrides Sub AddDeleteCheckItems()
      AddDeleteCheckItem("contact_emailings", "communication_number", "a contact emailing")
    End Sub

#End Region

    Friend Shared Function ExtractCliNumber(pEnv As CDBEnvironment, pNumber As String) As String
      ExtractDiallingCode(pEnv, pNumber) 'Do nothing with the dialling code, it is not included in the cli number
      Dim vSTDCode As String = ExtractSTDCode(pEnv, pNumber, True)
      vSTDCode = ExtractNumber(vSTDCode)
      Dim vNumber As String = ExtractNumber(pNumber)
      Return vSTDCode & vNumber
    End Function

  End Class
End Namespace
