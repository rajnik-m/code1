Imports CARE.Access.PostcodeValidation

Namespace Access

  Public Class Address
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Protected Friend Enum AddressFields
      AllFields = 0
      AddressNumber
      AddressType
      HouseName
      Address
      Town
      County
      Country
      Postcode
      Sortcode
      MosaicCode
      Paf
      Branch
      AddressLine1
      AddressLine2
      AddressLine3
      AddressLine4
      BuildingNumber
      DeliveryPointSuffix
      AddressConfirmed
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("address_type")
        .Add("house_name", CDBField.FieldTypes.cftMemo)
        .Add("address", CDBField.FieldTypes.cftMemo)
        .Add("town")
        .Add("county")
        .Add("country").PrefixRequired = True
        .Add("postcode")
        .Add("sortcode")
        .Add("mosaic_code")
        .Add("paf")
        .Add("branch")
        .Add("address_line1")
        .Add("address_line2")
        .Add("address_line3")
        .Add("address_line4")
        .Add("building_number")
        .Add("delivery_point_suffix")
        .Add("address_confirmed", CDBField.FieldTypes.cftDate)

        .Item(AddressFields.AddressNumber).PrimaryKey = True
        .Item(AddressFields.AddressNumber).PrefixRequired = True
        .Item(AddressFields.Branch).PrefixRequired = True
        .Item(AddressFields.Country).PrefixRequired = True

        .Item(AddressFields.DeliveryPointSuffix).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataAddressDPS)
        .Item(AddressFields.BuildingNumber).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataDutchSupport)
        .Item(AddressFields.AddressConfirmed).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbAddressConfirmed)

        .SetControlNumberField(AddressFields.AddressNumber, "A")
        If mvEnv.GetConfigOption("reformat_address_lines") Then
          mvAddressLinesLength = CInt(mvEnv.Connection.GetValue("SELECT entry_length FROM maintenance_attributes WHERE attribute_name = 'address_line1' and table_name = 'addresses'"))
        Else
          mvAddressLinesLength = 35
        End If
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "a"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "addresses"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property AddressNumber() As Integer
      Get
        Return mvClassFields(AddressFields.AddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AddressType() As AddressTypes
      Get
        Select Case mvClassFields(AddressFields.AddressType).Value
          Case "O"
            Return AddressTypes.ataOrganisation
          Case Else
            Return AddressTypes.ataContact
        End Select
      End Get
    End Property
    Public ReadOnly Property HouseName() As String
      Get
        Return mvClassFields(AddressFields.HouseName).Value
      End Get
    End Property
    Public ReadOnly Property AddressCode() As String
      Get
        Return mvClassFields(AddressFields.Address).Value
      End Get
    End Property
    Public ReadOnly Property Town() As String
      Get
        Return mvClassFields(AddressFields.Town).Value
      End Get
    End Property
    Public ReadOnly Property County() As String
      Get
        Return mvClassFields(AddressFields.County).Value
      End Get
    End Property
    Public ReadOnly Property Country() As String
      Get
        Return mvClassFields(AddressFields.Country).Value
      End Get
    End Property
    Public Property Postcode() As String
      Get
        Return mvClassFields(AddressFields.Postcode).Value
      End Get
      Set(value As String)
        mvClassFields(AddressFields.Postcode).Value = value
      End Set
    End Property
    Public ReadOnly Property Sortcode() As String
      Get
        Return mvClassFields(AddressFields.Sortcode).Value
      End Get
    End Property
    Public ReadOnly Property MosaicCode() As String
      Get
        Return mvClassFields(AddressFields.MosaicCode).Value
      End Get
    End Property
    Public ReadOnly Property Paf() As String
      Get
        Return mvClassFields(AddressFields.Paf).Value
      End Get
    End Property
    Public Property Branch() As String
      Get
        Return mvClassFields(AddressFields.Branch).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(AddressFields.Branch).Value = value
      End Set
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(AddressFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(AddressFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property AddressLine1() As String
      Get
        Return mvClassFields(AddressFields.AddressLine1).Value
      End Get
    End Property
    Public ReadOnly Property AddressLine2() As String
      Get
        Return mvClassFields(AddressFields.AddressLine2).Value
      End Get
    End Property
    Public ReadOnly Property AddressLine3() As String
      Get
        Return mvClassFields(AddressFields.AddressLine3).Value
      End Get
    End Property
    Public ReadOnly Property AddressLine4() As String
      Get
        Return mvClassFields(AddressFields.AddressLine4).Value
      End Get
    End Property
    Public ReadOnly Property BuildingNumber() As String
      Get
        Return mvClassFields(AddressFields.BuildingNumber).Value
      End Get
    End Property
    Public ReadOnly Property DeliveryPointSuffix() As String
      Get
        Return mvClassFields(AddressFields.DeliveryPointSuffix).Value
      End Get
    End Property
    Public ReadOnly Property AddressConfirmed() As String
      Get
        Return mvClassFields(AddressFields.AddressConfirmed).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Public Enum AddressTypes
      ataContact = 1
      ataOrganisation = 2
    End Enum

    Private mvCountryValid As Boolean
    Private mvCountryDescription As String
    Private mvUK As Boolean
    Private mvMailMergeAddress As String
    Private mvOrganisationNumber As Integer
    Private mvOrganisationName As String
    Private mvOrgValid As Boolean
    Private mvEasting As Integer
    Private mvNorthing As Integer
    Private mvLEACode As String = ""
    Private mvLEAName As String = ""
    Private mvAddressFormat As String = ""

    Protected Overrides Sub ClearFields()
      mvCountryValid = False
      mvCountryDescription = ""
      mvUK = False
      mvMailMergeAddress = ""
      mvOrgValid = False
      mvEasting = 0
      mvNorthing = 0
      mvLEACode = ""
      mvLEAName = ""
    End Sub

    Public Function GetRecordSetFieldsDetails() As String
      Dim vFields As String = "a.address_number,address,house_name,town,county,postcode,a.branch,a.country,address_type"
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataDutchSupport) Then vFields &= ",building_number"
      Return vFields
    End Function

    Public Function GetRecordSetFieldsCountry() As String
      Dim vFields As String = GetRecordSetFieldsDetails() & ",sortcode,uk,country_desc"
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbCountryAddressFormat) Then vFields &= ",address_format"
      Return vFields
    End Function

    Public Overloads Sub Init(ByVal pAddressNumber As Integer)
      InitClassFields()
      If pAddressNumber > 0 Then
        Dim vRecordSet As CDBRecordSet = mvEnv.Connection.GetRecordSet("SELECT " & GetRecordSetFields(AddressRecordSetTypes.artAll) & " FROM addresses a,countries co WHERE address_number = " & pAddressNumber & " AND a.country = co.country")
        If vRecordSet.Fetch Then
          InitFromRecordSet(mvEnv, vRecordSet, AddressRecordSetTypes.artAll)
        Else
          SetDefaults()
        End If
        vRecordSet.CloseRecordSet()
      Else
        SetDefaults()
      End If
      mvAddressBlank = mvClassFields.Item(AddressFields.Address).Value = " "
    End Sub

    Public Sub InitFromRecordSetCountry(ByVal pRecordSet As CDBRecordSet)
      Dim vFields As String = GetRecordSetFieldsDetails() & ",sortcode"
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbCountryAddressFormat) Then
        If pRecordSet.Fields.ContainsKey("address_line1") Then vFields &= ",address_line1"
        If pRecordSet.Fields.ContainsKey("address_line2") Then vFields &= ",address_line2"
        If pRecordSet.Fields.ContainsKey("address_line3") Then vFields &= ",address_line3"
      End If
      MyBase.InitFromRecordSetFields(pRecordSet, vFields)
      mvUK = pRecordSet.Fields("uk").Bool
      mvCountryDescription = pRecordSet.Fields("country_desc").Value
      If pRecordSet.Fields.ContainsKey("address_format") Then mvAddressFormat = pRecordSet.Fields("address_format").Value
      GetCountryDescription() 'BR17231
      mvCountryValid = True
      mvAddressBlank = mvClassFields.Item(AddressFields.Address).Value = " "
    End Sub

    Public Function TownAddressLine() As String
      Dim vTown As String = Town
      If vTown.Length > 0 Then vTown &= " - "
      Return vTown & AddressLine()
    End Function

    Public Function AddressLine() As String
      Return FormatAddress(False)
    End Function

    Private Function FormatAddress(ByVal pMultiLine As Boolean) As String
      Dim vSeparator As String
      Dim vAddress As New StringBuilder

      If pMultiLine Then
        vSeparator = vbCrLf
      Else
        vSeparator = ", "
      End If

      If mvAddressFormat.Length = 0 Then GetCountryDescription()

      If Country.Length > 0 And mvAddressFormat.Length > 0 Then
        vAddress.Append(CountryAddressFormat(pMultiLine, mvAddressFormat))
      Else
        With mvClassFields
          Dim vHouseName As String = .Item(AddressFields.HouseName).Value
          Dim vTown As String = .Item(AddressFields.Town).Value
          Dim vCounty As String = .Item(AddressFields.County).Value
          Dim vCountry As String = .Item(AddressFields.Country).Value
          Dim vPostcode As String = .Item(AddressFields.Postcode).Value
          If IsBuildingNumberCountry() Then
            If (.Item(AddressFields.Address).MultiLineValue.IndexOf(vbCrLf, 0) + 1) > 0 Then
              vAddress.Append(Replace(.Item(AddressFields.Address).MultiLineValue, vbLf, " " & BuildingNumber & vbLf, 1, 1))
            Else
              vAddress.Append(.Item(AddressFields.Address).MultiLineValue())
              vAddress.Append(" ")
              vAddress.Append(BuildingNumber)
            End If
          Else
            vAddress.Append(.Item(AddressFields.Address).MultiLineValue())
          End If
          If pMultiLine Then
            vAddress = New StringBuilder(vAddress.ToString.Trim(" "c))
          Else
            vAddress = New StringBuilder(vAddress.ToString.Replace(vbCr, "").Replace(vbLf, " ").Trim(" "c))
          End If
          'Add the house name if present
          If vHouseName.Length > 0 Then
            If vAddress.Length > 0 Then
              If vCountry = "CH" And mvEnv.GetConfig("uniserv_post_ch").Length > 0 Then
                vAddress.Append(vSeparator)
                vAddress.Append(vHouseName)
              Else
                vAddress.Insert(0, vHouseName)
                vAddress.Insert(vHouseName.Length, vSeparator)
              End If
            Else
              vAddress.Append(vHouseName)
            End If
          End If
          'If Switzerland then add the postcode here
          Dim vEuroFormat As Boolean
          If vCountry = "CH" OrElse vCountry = "D" OrElse IsBuildingNumberCountry() Then
            If vPostcode.Length > 0 Then
              If vAddress.Length > 0 Then vAddress.Append(vSeparator)
              vAddress.Append(vPostcode)
            End If
            If vTown.Length > 0 Then
              vAddress.Append(" ")
              vAddress.Append(vTown)
            End If
            vEuroFormat = True
          End If

          If vTown.Length > 0 And Not vEuroFormat Then
            If vAddress.Length > 0 Then vAddress.Append(vSeparator)
            vAddress.Append(vTown)
          End If
          If vCounty.Length > 0 Then
            vAddress.Append(vSeparator)
            vAddress.Append(vCounty)
          End If
          If vPostcode.Length > 0 And Not vEuroFormat Then
            vAddress.Append(vSeparator)
            vAddress.Append(vPostcode)
          End If

          If vCountry.Length > 0 And vCountry <> mvEnv.DefaultCountry Then
            'There is a country code and it is not the default country
            GetCountryDescription()
            If Not (mvUK And mvEnv.DefaultCountry = "UK") Then
              vAddress.Append(vSeparator)
              vAddress.Append(mvCountryDescription)
            End If
          End If
        End With
      End If
      Return vAddress.ToString
    End Function

    Private Function CountryAddressFormat(ByVal pMultiLine As Boolean, ByVal pAddressFormat As String) As String
      Dim vAddressFormat As String = ""
      Dim vAddress As New StringBuilder
      Dim vAddressFormatFields() As String

      vAddressFormatFields = pAddressFormat.Split(CChar(","))
      If pAddressFormat.ToLower.Contains("addressline") Then CheckSetAddressLines()
      If vAddressFormatFields.GetUpperBound(0) > 0 Then
        For Each vString As String In vAddressFormatFields
          With mvClassFields
            Select Case vString.ToLower
              Case "buildingnumber"
                vAddress.Append(.Item(AddressFields.BuildingNumber).Value)
              Case "housename"
                vAddress.Append(.Item(AddressFields.HouseName).Value)
              Case "addressline1"
                vAddress.Append(.Item(AddressFields.AddressLine1).Value)
              Case "addressline2"
                vAddress.Append(.Item(AddressFields.AddressLine2).Value)
              Case "addressline3"
                vAddress.Append(.Item(AddressFields.AddressLine3).Value)
              Case "addressline4"
                vAddress.Append(.Item(AddressFields.AddressLine4).Value)
              Case "town"
                vAddress.Append(.Item(AddressFields.Town).Value)
              Case "postcode"
                vAddress.Append(.Item(AddressFields.Postcode).Value)
              Case "country"
                vAddress.Append(.Item(AddressFields.Country).Value)
              Case "county"
                vAddress.Append(.Item(AddressFields.County).Value)
              Case "countrydescription"
                GetCountryDescription()
                vAddress.Append(mvCountryDescription)
              Case "space"
                vAddress.Append(" ")
              Case "comma"
                vAddress.Append(",")
              Case "newline"
                If pMultiLine Then
                  If Not vAddress.ToString.EndsWith(vbCrLf) Then vAddress.Append(vbCrLf)
                Else
                  If Not vAddress.ToString.EndsWith(", ") Then vAddress.Append(", ")
                End If
              Case Else
                vAddress.Append(vString)
            End Select
          End With
        Next
      Else
        vAddress.Append("")
      End If
      If vAddress.ToString.EndsWith(", ") Then
        Dim vNewAddress As String = vAddress.ToString.Remove(vAddress.ToString.Length - Len(", "))
        vAddress.Clear()
        vAddress.Append(vNewAddress)
      End If
      If vAddress.ToString.EndsWith(vbCrLf) Then
        Dim vNewAddress As String = vAddress.ToString.Remove(vAddress.ToString.Length - Len(vbCrLf))
        vAddress.Clear()
        vAddress.Append(vNewAddress)
      End If

      Return vAddress.ToString
    End Function

    ''' <summary>Checks and sets the address lines from the address, where the address is not blank but the address line(s) are not set</summary>
    Private Sub CheckSetAddressLines()
      If mvAddressBlank = False AndAlso mvClassFields.Item(AddressFields.AddressLine1).Value.Length = 0 Then
        SetAddressField(mvClassFields.Item(AddressFields.Address).Value)
      End If
    End Sub


    Private Function IsBuildingNumberCountry() As Boolean
      Return String.Format("|{0}|", mvEnv.GetConfig("building_number_country_codes")).Contains(String.Format("|{0}|", Country))
    End Function

    Private Sub GetCountryDescription()
      If Not mvCountryValid Then
        If Country.Length > 0 Then
          Dim vCountry As Country = mvEnv.Country(Country)
          If Not vCountry Is Nothing AndAlso vCountry.Existing Then
            mvCountryDescription = vCountry.CountryDesc
            mvUK = vCountry.Uk
            mvAddressFormat = vCountry.AddressFormat
          End If
        End If
        mvCountryValid = True
      End If
    End Sub
    Private Function ToIAddress() As PostcoderAddress
      Return New PostcoderAddress With {.AddressID = AddressNumber,
                                        .Address = AddressCode,
                                        .BuildingNumber = BuildingNumber,
                                        .County = County,
                                        .OrganisationName = OrganisationName,
                                        .Postcode = Postcode,
                                        .Town = Town,
                                        .DPS = DeliveryPointSuffix,
                                        .LEACode = mvLEACode,
                                        .LEAName = mvLEAName,
                                        .Easting = mvEasting,
                                        .Northing = mvNorthing
                                       }
    End Function

    Public ReadOnly Property UK() As Boolean
      Get
        UK = mvUK
      End Get
    End Property

    Public ReadOnly Property CountryDescription() As String
      Get
        CountryDescription = mvCountryDescription
      End Get
    End Property

    Public ReadOnly Property OrganisationName() As String
      Get
        If AddressType = AddressTypes.ataOrganisation Then
          If Not mvOrgValid Then GetOrganisationDetails()
          Return mvOrganisationName
        End If
        Return ""
      End Get
    End Property

    Public ReadOnly Property OrganisationNumber() As Integer
      Get
        If AddressType = AddressTypes.ataOrganisation Then
          If Not mvOrgValid Then GetOrganisationDetails()
          Return mvOrganisationNumber
        End If
      End Get
    End Property

    Private Sub GetOrganisationDetails()
      Dim vRecordSet As CDBRecordSet = mvEnv.Connection.GetRecordSet("SELECT o.organisation_number,name FROM organisation_addresses oa, organisations o WHERE oa.address_number = " & AddressNumber & " AND oa.organisation_number = o.organisation_number")
      If vRecordSet.Fetch Then
        mvOrganisationNumber = vRecordSet.Fields(1).LongValue
        mvOrganisationName = vRecordSet.Fields(2).Value
      End If
      vRecordSet.CloseRecordSet()
      mvOrgValid = True
    End Sub


    Private Sub ChangeAddress(ByVal pJob As JobSchedule, ByVal pTable As String, ByVal pConTo As Long, ByVal pConFrom As Long, ByVal pAddTo As Long, ByVal pAddFrom As Long, ByVal pConAttr As String, ByVal pAddAttr As String)
      Dim vUpdateFields As New CDBFields
      Dim vWhereFields As New CDBFields

      If Not pJob Is Nothing Then pJob.InfoMessage = String.Format(ProjectText.String31251, StrConv(Replace(pTable, "_", " "), VbStrConv.ProperCase)) 'Transferring: %s
      mvEnv.Connection.StartTransaction()
      vUpdateFields.Add(pAddAttr, CDBField.FieldTypes.cftLong, pAddTo)
      If Len(pConAttr) > 0 Then vWhereFields.Add(pConAttr, CDBField.FieldTypes.cftLong, pConFrom)
      vWhereFields.Add(pAddAttr, CDBField.FieldTypes.cftLong, pAddFrom)
      mvEnv.Connection.UpdateRecords(pTable, vUpdateFields, vWhereFields, False)
      'Delete any that are left behind - Why should any be left behind?
      mvEnv.Connection.DeleteRecords(pTable, vWhereFields, False)
      mvEnv.Connection.CommitTransaction()
    End Sub

    Public Function AddressDetailsChanged() As Boolean
      'Used by UpdateAddress Web Service to determine whether any of the address fields have changed
      Dim vAddressChanged As Boolean
      For vIndex As AddressFields = AddressFields.Address To AddressFields.DeliveryPointSuffix
        If mvClassFields.Item(vIndex).ValueChanged Then vAddressChanged = True
        If vAddressChanged Then Exit For
      Next
      Return vAddressChanged
    End Function

    Public Overrides Sub Delete(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      CheckUsedElsewhere(mvClassFields)
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("address_number", AddressNumber)
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataAddressDPS) Then mvEnv.Connection.DeleteRecords("address_data", vWhereFields, False)
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public ReadOnly Property IsUk As Boolean
      Get
        If Not mvCountryValid Then
          Using vCountryData As DataTable = New SQLStatement(Environment.Connection,
                                                             "uk",
                                                             "countries",
                                                             New CDBFields({New CDBField("country", Me.Country)})).GetDataTable
            If vCountryData.Rows.Count > 0 Then
              mvUK = (vCountryData.Rows(0).Field(Of String)("uk").Equals("Y", StringComparison.InvariantCultureIgnoreCase))
            Else
              mvUK = False
            End If
          End Using
        End If
        Return mvUK
      End Get
    End Property
#End Region

  End Class
End Namespace
