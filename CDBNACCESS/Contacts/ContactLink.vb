Imports Advanced.LanguageExtensions

Namespace Access

  Public Class ContactLink
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Protected Enum ContactLinkFields
      AllFields = 0
      ContactLinkNumber
      ContactNumber1
      ContactNumber2
      Relationship
      ValidFrom
      ValidTo
      Historical
      Notes
      RelationshipStatus
      AmendedBy
      AmendedOn
    End Enum

    Dim mvOldValidFrom As String = ""
    Dim mvOldValidTo As String = ""
    Private mvComplementaryLink As ContactLink

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("contact_link_number", CDBField.FieldTypes.cftLong)
        .Add("contact_number_1", CDBField.FieldTypes.cftLong)
        .Add("contact_number_2", CDBField.FieldTypes.cftLong)
        .Add("relationship")
        .Add("valid_from", CDBField.FieldTypes.cftDate)
        .Add("valid_to", CDBField.FieldTypes.cftDate)
        .Add("historical")
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("relationship_status")
        .Item(ContactLinkFields.ContactLinkNumber).PrimaryKey = True
        .SetControlNumberField(ContactLinkFields.ContactLinkNumber, "CLN")
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias As String
      Get
        Return "cl"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName As String
      Get
        Return If(Me.LinkType = ContactLinkTypes.cltOrganisation, "organisation_links", "contact_links")
      End Get
    End Property
    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
      Me.AllowsOverlaps = False
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ContactLinkNumber As Integer
      Get
        Return mvClassFields(ContactLinkFields.ContactLinkNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber1 As Integer
      Get
        Return mvClassFields(ContactLinkFields.ContactNumber1).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber2 As Integer
      Get
        Return mvClassFields(ContactLinkFields.ContactNumber2).IntegerValue
      End Get
    End Property
    Public ReadOnly Property RelationshipCode As String
      Get
        Return mvClassFields(ContactLinkFields.Relationship).Value
      End Get
    End Property
    Public Property ValidFrom As String
      Get
        Return mvClassFields(ContactLinkFields.ValidFrom).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(ContactLinkFields.ValidFrom).Value = value
      End Set
    End Property
    Public Property ValidTo As String
      Get
        Return mvClassFields(ContactLinkFields.ValidTo).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(ContactLinkFields.ValidTo).Value = value
      End Set
    End Property
    Public ReadOnly Property Historical As Boolean
      Get
        Return mvClassFields(ContactLinkFields.Historical).Bool
      End Get
    End Property
    Public ReadOnly Property Notes As String
      Get
        Return mvClassFields(ContactLinkFields.Notes).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy As String
      Get
        Return mvClassFields(ContactLinkFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn As String
      Get
        Return mvClassFields(ContactLinkFields.AmendedOn).Value
      End Get
    End Property
    Protected Property RelationshipStatus As String
      Get
        Return mvClassFields(ContactLinkFields.RelationshipStatus).Value
      End Get
      Set(value As String)
        mvClassFields(ContactLinkFields.RelationshipStatus).Value = value
      End Set
    End Property
    Protected ReadOnly Property OldValidFrom As String
      Get
        Return mvOldValidFrom
      End Get
    End Property
    Protected ReadOnly Property OldValidTo As String
      Get
        Return mvOldValidTo
      End Get
    End Property

#End Region

#Region "Non AutoGenerated Code"

    Protected Overrides Sub SetValid()
      MyBase.SetValid()
      SetHistorical()
    End Sub

    ''' <summary>
    ''' Initialises the current instance of the class from the primary key of the record.
    ''' </summary>
    ''' <param name="pLinkNumber"></param>
    ''' <remarks>Note that Link Numbers are unique across 2 tables, the Contact Links and Organisation Links tables.
    ''' This method will attempt retrieve its data from the current Link Type (i.e. Contact or Organisation Link).
    ''' If no data is found then it will attempt to retrieve data from the other Link Type.  
    ''' If no data is found in either table, it will reset its Link Type to its state prior to initialisation.
    ''' </remarks>
    Public Overrides Sub Init(pLinkNumber As Integer)
      Me.Init()
      MyBase.Init(pLinkNumber)
      If Me.Existing = False Then
        Dim vCurrentLinkType As ContactLinkTypes = Me.LinkType
        Dim vOtherType = If(Me.LinkType = ContactLinkTypes.cltOrganisation, ContactLinkTypes.cltContact, ContactLinkTypes.cltOrganisation)
        SetLinkType(vOtherType) 'Links are stored in contacT_links or organisation_links with the PK being unique across the 2 tables.  This is because there's only 1 web method to service the 2 tables.
        MyBase.Init(pLinkNumber)
        If Me.Existing = False Then 'also doesn't exist in the other table
          SetLinkType(vCurrentLinkType) 'reset back to the original type
        End If
      End If
    End Sub
    Public Overloads Sub Init(ByVal pContactNumber1 As Integer, ByVal pContactNumber2 As Integer, ByVal pRelationship As String)
      MyBase.Init()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(ContactLinkFields.ContactNumber1).Name, pContactNumber1)
      vWhereFields.Add(mvClassFields(ContactLinkFields.ContactNumber2).Name, pContactNumber2)
      vWhereFields.Add(mvClassFields(ContactLinkFields.Relationship).Name, pRelationship)
      InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Overloads Sub Create(ByVal pContactNumber1 As Integer, ByVal pContactNumber2 As Integer, ByVal pRelationship As String, ByVal pValidFrom As String)
      Init()
      mvClassFields(ContactLinkFields.ContactNumber1).IntegerValue = pContactNumber1
      mvClassFields(ContactLinkFields.ContactNumber2).IntegerValue = pContactNumber2
      mvClassFields(ContactLinkFields.Relationship).Value = pRelationship
      mvClassFields(ContactLinkFields.ValidFrom).Value = pValidFrom
    End Sub

    Public Sub SetValidFrom(ByVal pStartDate As String)
      If Historical Then
        mvClassFields(ContactLinkFields.ValidTo).Value = ""
      Else
        If ValidFrom.Length > 0 Then
          If CDate(ValidFrom) > CDate(pStartDate) Then mvClassFields(ContactLinkFields.ValidFrom).Value = pStartDate
        End If
      End If
      SetHistorical()
    End Sub

    Private Sub SetHistorical()
      Dim vActive As Boolean = True
      If IsDate(ValidFrom) Or IsDate(ValidTo) Then
        If IsDate(ValidFrom) Then
          If CDate(ValidFrom) > Date.Today Then vActive = False
        End If
        If IsDate(ValidTo) Then
          If CDate(ValidTo) < Date.Today Then vActive = False
        End If
      End If
      mvClassFields(ContactLinkFields.Historical).Value = IIf(vActive, "N", "Y").ToString
    End Sub

    Public Sub SetValidTo(ByVal pValidTo As String)
      If pValidTo.Length > 0 Then
        mvClassFields(ContactLinkFields.ValidTo).Value = pValidTo
      Else
        mvClassFields(ContactLinkFields.ValidTo).Value = TodaysDate()
      End If
      SetHistorical()
    End Sub

    Friend Sub AmalgamateOrganisationChangeContact(ByVal pOldLink As ContactLink, ByVal pContactNumber As Integer, ByVal pUpdateContact2 As Boolean)
      CopyValues(pOldLink)
      Dim vField As ContactLinkFields = ContactLinkFields.ContactNumber1
      If pUpdateContact2 Then vField = ContactLinkFields.ContactNumber2
      mvClassFields.Item(vField).Value = pContactNumber.ToString
    End Sub

    Public Function MergeLinks(ByRef pLinkType As ContactLinkTypes) As Boolean
      MergeLinks(pLinkType, False)
    End Function

    Public Function MergeLinks(ByRef pLinktype As ContactLinkTypes, ByVal pHistoricSet As Boolean) As Boolean
      'before save check that it doesn't overlap with any existing
      'if it does merge them
      Dim vTableName As String
      Dim vContact1 As String
      Dim vContact2 As String

      If pLinktype = ContactLinkTypes.cltContact Then
        vTableName = "contact_links"
        vContact1 = "contact_number_1"
        vContact2 = "contact_number_2"
      Else
        vTableName = "organisation_links"
        vContact1 = "organisation_number_1"
        vContact2 = "organisation_number_2"
      End If

      Dim vWhere As New CDBFields
      vWhere.Add("relationship", CDBField.FieldTypes.cftCharacter, RelationshipCode)
      vWhere.Add(vContact1, CDBField.FieldTypes.cftCharacter, ContactNumber1)
      vWhere.Add(vContact2, CDBField.FieldTypes.cftCharacter, ContactNumber2)

      vWhere.Add("valid_from", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoEqual)
      vWhere.Add("valid_to", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoEqual)

      ' get link where details are same and dates are null
      If mvEnv.Connection.GetCount(vTableName, vWhere) = 0 Then
        'get overlapping organisation_links records
        'get any existing links with same relationship, organisation_number_1 and organisation_number_2, that overlap the new
        vWhere.Clear()
        vWhere.Add("relationship", CDBField.FieldTypes.cftCharacter, RelationshipCode)
        vWhere.Add(vContact1, CDBField.FieldTypes.cftCharacter, ContactNumber1)
        vWhere.Add(vContact2, CDBField.FieldTypes.cftCharacter, ContactNumber2)

        'existing falls completely inside new period
        vWhere.Add("valid_from", CDBField.FieldTypes.cftDate, ValidFrom, CDBField.FieldWhereOperators.fwoOpenBracketTwice Or CDBField.FieldWhereOperators.fwoGreaterThanEqual)
        vWhere.Add("valid_from#2", CDBField.FieldTypes.cftDate, ValidTo, CDBField.FieldWhereOperators.fwoLessThanEqual)
        vWhere.Add("valid_to", CDBField.FieldTypes.cftDate, ValidFrom, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
        vWhere.Add("valid_to#2", CDBField.FieldTypes.cftDate, ValidTo, CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoLessThanEqual)

        'existing starts before new and finishes during new
        vWhere.Add("valid_from#3", CDBField.FieldTypes.cftDate, ValidFrom, CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoLessThanEqual)
        vWhere.Add("valid_to#3", CDBField.FieldTypes.cftDate, ValidFrom, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
        vWhere.Add("valid_to#4", CDBField.FieldTypes.cftDate, ValidTo, CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoLessThanEqual)

        'existing starts during new and finishes after new
        vWhere.Add("valid_from#4", CDBField.FieldTypes.cftDate, ValidFrom, CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoGreaterThanEqual)
        vWhere.Add("valid_from#5", CDBField.FieldTypes.cftDate, ValidTo, CDBField.FieldWhereOperators.fwoLessThanEqual)
        vWhere.Add("valid_to#5", CDBField.FieldTypes.cftDate, ValidTo, CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoGreaterThanEqual)

        'existing starts before new and finishes after new
        vWhere.Add("valid_from#6", CDBField.FieldTypes.cftDate, ValidFrom, CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoLessThanEqual)
        vWhere.Add("valid_to#6", CDBField.FieldTypes.cftDate, ValidTo, CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoGreaterThanEqual)

        'existing starts before new starts and existing has null end date
        vWhere.Add("valid_from#7", CDBField.FieldTypes.cftDate, ValidFrom, CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoLessThanEqual)
        vWhere.Add("valid_to#7", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoEqual)

        'existing ends before new ends and has null start date
        vWhere.Add("valid_from#8", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoEqual)
        vWhere.Add("valid_to#8", CDBField.FieldTypes.cftDate, ValidTo, CDBField.FieldWhereOperators.fwoCloseBracketTwice Or CDBField.FieldWhereOperators.fwoLessThanEqual)

        'if coming from CarePortal and previous has been set historic then don't include the Historic when merging
        If pHistoricSet Then
          vWhere.Add("valid_to#9", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoNotEqual)
          vWhere.Add("amended_on", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoNotEqual)
        End If
        'get all overlapping records
        Dim vOrgLink As OrganisationLink
        Dim vConLink As ContactLink
        'Dim vAttrs As String
        Dim vSQLStatement As SQLStatement
        If pLinktype = ContactLinkTypes.cltContact Then
          vConLink = New ContactLink(mvEnv)
          'vAttrs = (vConLink.GetRecordSetFields.Replace("cl.", ""))
          vSQLStatement = New SQLStatement(mvEnv.Connection, vConLink.GetRecordSetFields, "contact_links cl", vWhere)
        Else
          vOrgLink = New OrganisationLink(mvEnv)
          'vAttrs = (vOrgLink.GetRecordSetFields.Replace("ol.", ""))
          vSQLStatement = New SQLStatement(mvEnv.Connection, vOrgLink.GetRecordSetFields, "organisation_links ol", vWhere)
        End If

        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        Dim vStartDateNotSet As Boolean
        Dim vEndDateNotSet As Boolean
        While vRS.Fetch
          If ValidFrom.Length = 0 OrElse vRS.Fields("valid_from").Value.Length = 0 Then
            vStartDateNotSet = True
          Else
            If CDate(vRS.Fields("valid_from").Value) < CDate(ValidFrom) Then ValidFrom = vRS.Fields("valid_from").Value
          End If
          If ValidTo.Length = 0 OrElse vRS.Fields("valid_to").Value.Length = 0 Then
            vEndDateNotSet = True
          Else
            If CDate(vRS.Fields("valid_to").Value) > CDate(ValidTo) Then ValidTo = vRS.Fields("valid_to").Value
          End If
        End While
        If vStartDateNotSet Then ValidFrom = ""
        If vEndDateNotSet Then ValidTo = ""
        mvEnv.Connection.DeleteRecords(vTableName, vWhere, False)
        Return True
      Else
        Return False
      End If
    End Function

    Public Overloads Sub CopyValues(ByVal pRecord As CARERecord, ByVal pOldContactNumber As Integer, ByVal pNewContactNumber As Integer)
      MyBase.CopyValues(pRecord)
      If ContactNumber1 = pOldContactNumber Then
        mvClassFields(ContactLinkFields.ContactNumber1).IntegerValue = pNewContactNumber
      Else
        mvClassFields(ContactLinkFields.ContactNumber2).IntegerValue = pNewContactNumber
      End If
    End Sub

    Public Property AllowsOverlaps As Boolean


    Public Property ComplementaryLink As ContactLink
      Get
        If mvComplementaryLink Is Nothing AndAlso Me.Relationship IsNot Nothing AndAlso
          Me.Relationship.ComplementaryRelationship.HasValue Then
          mvComplementaryLink = New ContactLink(mvEnv)
          Dim vComplementaryContact As New Contact(Me.Environment)
          vComplementaryContact.Init(Me.ContactNumber2)
          Dim vComplementaryLinkType As ContactLinkTypes = If(vComplementaryContact.ContactType = Contact.ContactTypes.ctcContact, ContactLinkTypes.cltContact, ContactLinkTypes.cltOrganisation)
          mvComplementaryLink.Init(mvEnv, vComplementaryLinkType, Me.ContactNumber2, Me.ContactNumber1, Me.Relationship.ComplementaryRelationship, Me.ClassFields(ContactLinkFields.ValidFrom).SetValue, Me.ClassFields(ContactLinkFields.ValidTo).SetValue)
          If mvComplementaryLink.Existing = False Then
            mvComplementaryLink.InitNew(Me.Environment, vComplementaryLinkType, Me.ContactNumber2, Me.ContactNumber1, Me.Relationship.ComplementaryRelationship) 'The record will need to be synced - Check the SaveInternal method for this
          End If
        End If
        Return mvComplementaryLink
      End Get
      Private Set(value As ContactLink)
        mvComplementaryLink = value
      End Set
    End Property

#End Region

    Protected Overridable Sub CheckOverlaps()
      If Me.AllowsOverlaps = False Then
        Dim vWhere As New CDBFields

        vWhere.Add(Me.ClassFields(ContactLinkFields.ContactNumber1).Name, Me.ContactNumber1)
        vWhere.Add(Me.ClassFields(ContactLinkFields.ContactNumber2).Name, Me.ContactNumber2)

        vWhere.Add(Me.ClassFields(ContactLinkFields.Relationship).Name, Me.RelationshipCode)

        If Me.Existing Then
          vWhere.Add(Me.ClassFields(ContactLinkFields.ContactLinkNumber).Name, Me.ContactLinkNumber, CDBField.FieldWhereOperators.fwoNotEqual)
        End If

        vWhere = SQLStatement.BuildOverlappingWhere(Me.Environment.Connection,
                                                  Me.ClassFields(ContactLinkFields.ValidFrom),
                                                  Me.ClassFields(ContactLinkFields.ValidTo), vWhere)

        If Me.Environment.Connection.GetCount(Me.DatabaseTableName, vWhere) > 0 Then
          RaiseError(DataAccessErrors.daeCannotAddRelationship)
        End If
      End If
    End Sub

  End Class
End Namespace
