Namespace Access

  Public Class ContactPositionTimesheet
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum ContactPositionTimesheetFields
      AllFields = 0
      TimesheetNumber
      ContactPositionNumber
      ContactRoleNumber
      TimesheetDate
      DurationHours
      DurationMinutes
      TimesheetDesc
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("timesheet_number", CDBField.FieldTypes.cftInteger)
        .Add("contact_position_number", CDBField.FieldTypes.cftInteger)
        .Add("contact_role_number", CDBField.FieldTypes.cftInteger)
        .Add("timesheet_date", CDBField.FieldTypes.cftDate)
        .Add("duration_hours", CDBField.FieldTypes.cftInteger)
        .Add("duration_minutes", CDBField.FieldTypes.cftInteger)
        .Add("timesheet_desc", CDBField.FieldTypes.cftMemo)

        .Item(ContactPositionTimesheetFields.TimesheetNumber).PrimaryKey = True
        .Item(ContactPositionTimesheetFields.TimesheetNumber).PrefixRequired = True
        .SetControlNumberField(ContactPositionTimesheetFields.TimesheetNumber, "PTN")
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "cpt"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "contact_position_timesheet"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property TimesheetNumber() As Integer
      Get
        Return mvClassFields(ContactPositionTimesheetFields.TimesheetNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactPositionNumber() As Integer
      Get
        Return mvClassFields(ContactPositionTimesheetFields.ContactPositionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactRoleNumber() As Integer
      Get
        Return mvClassFields(ContactPositionTimesheetFields.ContactRoleNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property TimesheetDate() As String
      Get
        Return mvClassFields(ContactPositionTimesheetFields.TimesheetDate).Value
      End Get
    End Property
    Public ReadOnly Property DurationHours() As Integer
      Get
        Return mvClassFields(ContactPositionTimesheetFields.DurationHours).IntegerValue
      End Get
    End Property
    Public ReadOnly Property DurationMinutes() As Integer
      Get
        Return mvClassFields(ContactPositionTimesheetFields.DurationMinutes).IntegerValue
      End Get
    End Property
    Public ReadOnly Property TimesheetDesc() As String
      Get
        Return mvClassFields(ContactPositionTimesheetFields.TimesheetDesc).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ContactPositionTimesheetFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ContactPositionTimesheetFields.AmendedOn).Value
      End Get
    End Property
#End Region
    Protected Overrides Sub PreValidateCreateParameters(ByVal pParameterList As CDBParameters)
      ValidateParameters(pParameterList)
    End Sub
    Protected Overrides Sub PreValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      ValidateParameters(pParameterList)
    End Sub

    Protected Overrides Sub PostValidateUpdateParameters(pParameterList As CDBParameters)
      MyBase.PostValidateUpdateParameters(pParameterList)
      If mvClassFields(ContactPositionTimesheetFields.ContactPositionNumber).ValueChanged And Existing Then
        RaiseError(DataAccessErrors.daePositionTimesheetCannotChangePosition)
      End If
      If mvClassFields(ContactPositionTimesheetFields.TimesheetDate).ValueChanged And Existing Then
        RaiseError(DataAccessErrors.daePositionTimesheetCannotChangeDate)
      End If

    End Sub

    Private Sub ValidateParameters(ByVal pParameterList As CDBParameters)
      Dim vZeroDurationHours As Boolean
      Dim vTotalMinutes As Integer  'Total duration in minutes for contact position

      Dim vPosition As New ContactPosition(mvEnv)
      If pParameterList.ParameterExists("ContactPositionNumber").IntegerValue > 0 Then
        vPosition.Init(pParameterList("ContactPositionNumber").IntegerValue)
      ElseIf ContactPositionNumber > 0 Then
        vPosition.Init(ContactPositionNumber)
      End If

      'Check TimesheetDate against Position Started and Finished dates 
      If vPosition.Started <> "" Then
        If CDate(pParameterList("TimesheetDate").Value) < CDate(vPosition.Started) Then
          RaiseError(DataAccessErrors.daePositionTimesheetDateInconsistentWithPosition)
        End If
      End If
      If vPosition.Finished <> "" Then
        If CDate(pParameterList("TimesheetDate").Value) > CDate(vPosition.Finished) Then
          RaiseError(DataAccessErrors.daePositionTimesheetDateInconsistentWithPosition)
        End If
      End If

      'DurationHours or DurationMinutes parameter must be passed
      If Not (pParameterList.ContainsKey("DurationHours") Or pParameterList.ContainsKey("DurationMinutes")) Then
        RaiseError(DataAccessErrors.daeDurationMustBeBetween1MinuteAnd24Hours, "")
      End If

      'Check DurationHours value
      If pParameterList.ContainsKey("DurationHours") Then
        If pParameterList("DurationHours").IntegerValue < 0 _
          Or pParameterList("DurationHours").IntegerValue > 24 Then
          RaiseError(DataAccessErrors.daeDurationMustBeBetween1MinuteAnd24Hours, "")
        ElseIf pParameterList("DurationHours").IntegerValue = 0 Then
          vZeroDurationHours = True
        End If
        vTotalMinutes = 60 * pParameterList("DurationHours").IntegerValue
      Else
        vZeroDurationHours = True
      End If

      'Check DurationMinutes value
      If pParameterList.ContainsKey("DurationMinutes") Then
        If vZeroDurationHours = True Then
          If pParameterList("DurationMinutes").IntegerValue <= 0 Then
            RaiseError(DataAccessErrors.daeDurationMustBeBetween1MinuteAnd24Hours, "")
          ElseIf pParameterList("DurationMinutes").IntegerValue > 1440 Then
            RaiseError(DataAccessErrors.daeDurationMustBeBetween1MinuteAnd24Hours, "")
          End If
        Else
          If pParameterList("DurationMinutes").IntegerValue < 0 Then
            RaiseError(DataAccessErrors.daeDurationMustBeBetween1MinuteAnd24Hours, "")
          ElseIf pParameterList("DurationMinutes").IntegerValue > 0 _
            And pParameterList("DurationHours").IntegerValue = 24 Then
            RaiseError(DataAccessErrors.daeDurationMustBeBetween1MinuteAnd24Hours, "")
          ElseIf pParameterList("DurationMinutes").IntegerValue >= 60 Then
            RaiseError(DataAccessErrors.daeDurationMinutesMustBeBetween1And59, "")
          End If
        End If
        vTotalMinutes += pParameterList("DurationMinutes").IntegerValue
      End If

      'Check ContactRole
      Dim vRole As New ContactRole(mvEnv)
      vRole.Init()
      If pParameterList.ContainsKey("ContactRoleNumber") Then
        vRole.Init(pParameterList("ContactRoleNumber").IntegerValue)
        If Not vRole.Existing Then
          RaiseError(DataAccessErrors.daeInvalidParameter, "ContactRoleNumber")
        ElseIf vRole.ContactNumber <> vPosition.ContactNumber Then
          RaiseError(DataAccessErrors.daePositionTimesheetRoleInconsistentWithPosition)
        ElseIf vRole.OrganisationNumber <> vPosition.OrganisationNumber Then
          RaiseError(DataAccessErrors.daePositionTimesheetRoleInconsistentWithPosition)
        End If
      ElseIf pParameterList.ContainsKey("Role") Then
        If pParameterList("Role").Value = "" Then
          pParameterList.Add("ContactRoleNumber")
        Else
          Dim vWhereFields As New CDBFields
          vWhereFields.Add("contact_number", vPosition.ContactNumber)
          vWhereFields.Add("organisation_number", vPosition.OrganisationNumber)
          vWhereFields.Add("role", pParameterList("Role").Value)
          Dim vDT As DataTable = vRole.GetDataTable(vWhereFields)
          If vDT.Rows.Count <> 1 Then
            RaiseError(DataAccessErrors.daePositionTimesheetRoleInconsistentWithPosition)
          Else
            For Each vDataRow As DataRow In vDT.Rows
              pParameterList.Add("ContactRoleNumber", IntegerValue(vDataRow("ContactRoleNumber").ToString))
              vRole.Init(pParameterList("ContactRoleNumber").IntegerValue)
              Exit For 'There cannot be more than one record
            Next
          End If
        End If
      End If
      If vRole.Existing Then
        Dim vTimesheetDate As Date = Date.Parse(If(pParameterList.ContainsKey("TimesheetDate"), pParameterList("TimesheetDate").Value, TimesheetDate))
        If (IsDate(vRole.ValidFrom) = True AndAlso vTimesheetDate.CompareTo(Date.Parse(vRole.ValidFrom)) < 0) _
        OrElse (IsDate(vRole.ValidTo) = True AndAlso vTimesheetDate.CompareTo(Date.Parse(vRole.ValidTo)) > 0) Then
          RaiseError(DataAccessErrors.daePositionTimesheetRoleInconsistentWithPosition)
        End If
      End If

      'Check total Hours and Minutes
      Dim vDS As DataSelection
      Dim vParams As New CDBParameters()
      vParams.Add("ContactPositionNumber", vPosition.ContactPositionNumber)
      vDS = New DataSelection(mvEnv, DataSelection.DataSelectionTypes.dstContactPositionTimesheets, vParams, DataSelection.DataSelectionListType.dsltDefault, DataSelection.DataSelectionUsages.dsuNone)
      For Each vRow In vDS.DataTable().Rows
        If pParameterList.ContainsKey("TimesheetNumber") _
        AndAlso (IntegerValue(vRow.Item("ContactTimesheetNumber")) = IntegerValue(pParameterList("TimesheetNumber").Value)) Then
          'ignore
        Else
          If CDate(vRow.Item("TimesheetDate")) = CDate(pParameterList("TimesheetDate").Value) Then
            vTotalMinutes += IntegerValue(vRow.Item("DurationHours").ToString) * 60
            vTotalMinutes += IntegerValue(vRow.Item("DurationMinutes").ToString)
            If vTotalMinutes > 1440 Then
              RaiseError(DataAccessErrors.daeTotalTimeCannotBeGreaterThan24Hours)
            End If
          End If
        End If
      Next
    End Sub



  End Class
End Namespace
