Namespace Access

  Public Class CDBUser
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum CDBUserFields
      AllFields = 0
      NetworkLogname
      Logname
      Department
      AccessLevel
      AccessControlGroup
      OwnershipGroup
      FullName
      Position
      ContactNumber
      OrganisationNumber
      EmailLogin
      EmailPassword
      RemoteUser
      PersonalDb
      HistoryOnly
      MenuItem
      Printer
      LabelStyle
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("network_logname")
        .Add("logname")
        .Add("department")
        .Add("access_level")
        .Add("access_control_group")
        .Add("ownership_group")
        .Add("full_name")
        .Add("position")
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("organisation_number", CDBField.FieldTypes.cftLong)
        .Add("email_login")
        .Add("email_password")
        .Add("remote_user")
        .Add("personal_db")
        .Add("history_only")
        .Add("menu_item")
        .Add("printer")
        .Add("label_style")

        .Item(CDBUserFields.Logname).PrimaryKey = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "u"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "users"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property NetworkLogname() As String
      Get
        Return mvClassFields(CDBUserFields.NetworkLogname).Value
      End Get
    End Property
    ''' <summary>The Logname of the user in the Users table in the database. 
    ''' When using Web Services this will be set to the Logname supplied to the Web Service, defaulting to guest. 
    ''' The Logname should NOT be used for setting attributes such as amended_by, instead use the <see cref="UserID">UserID</see>.</summary>
    Public ReadOnly Property Logname() As String
      Get
        Return mvClassFields(CDBUserFields.Logname).Value
      End Get
    End Property
    Public ReadOnly Property Department() As String
      Get
        Return mvClassFields(CDBUserFields.Department).Value
      End Get
    End Property
    Public ReadOnly Property AccessLevelCode() As String
      Get
        Return mvClassFields(CDBUserFields.AccessLevel).Value
      End Get
    End Property
    Public ReadOnly Property AccessControlGroup() As String
      Get
        If mvClassFields(CDBUserFields.AccessControlGroup).Value.Length = 0 Then
          Return "MAIN"
        Else
          Return mvClassFields(CDBUserFields.AccessControlGroup).Value
        End If
      End Get
    End Property
    Public ReadOnly Property OwnershipGroup() As String
      Get
        Return mvClassFields(CDBUserFields.OwnershipGroup).Value
      End Get
    End Property
    Public ReadOnly Property FullName() As String
      Get
        Return mvClassFields(CDBUserFields.FullName).Value
      End Get
    End Property
    Public ReadOnly Property Position() As String
      Get
        Return mvClassFields(CDBUserFields.Position).Value
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(CDBUserFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property OrganisationNumber() As Integer
      Get
        Return mvClassFields(CDBUserFields.OrganisationNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property EmailLogin() As String
      Get
        Return mvClassFields(CDBUserFields.EmailLogin).Value
      End Get
    End Property
    Public ReadOnly Property EmailPassword() As String
      Get
        Return mvClassFields(CDBUserFields.EmailPassword).Value
      End Get
    End Property
    Public ReadOnly Property RemoteUser() As Boolean
      Get
        Return mvClassFields(CDBUserFields.RemoteUser).Bool
      End Get
    End Property
    Public ReadOnly Property PersonalDb() As String
      Get
        Return mvClassFields(CDBUserFields.PersonalDb).Value
      End Get
    End Property
    Public ReadOnly Property HistoryOnly() As String
      Get
        Return mvClassFields(CDBUserFields.HistoryOnly).Value
      End Get
    End Property
    Public ReadOnly Property MenuItem() As String
      Get
        Return mvClassFields(CDBUserFields.MenuItem).Value
      End Get
    End Property
    Public ReadOnly Property Printer() As String
      Get
        Return mvClassFields(CDBUserFields.Printer).Value
      End Get
    End Property
    Public ReadOnly Property LabelStyle() As String
      Get
        Return mvClassFields(CDBUserFields.LabelStyle).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(CDBUserFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(CDBUserFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Public Enum UserAccessLevel
      ualNone
      ualReadOnly
      ualUser
      ualSupervisor
      ualDatabaseAdministrator
    End Enum

    Private mvLogname As String
    Private mvPassword As String
    Private mvDatabaseLogname As String
    Private mvUserID As String
    Private mvNetworkLogname As String

    Private mvAccessControl As SortedList
    Private mvAccessControlRead As Boolean
    Private mvSalesContactNumber As Integer
    Private mvSalesContactChecked As Boolean

    Protected Overrides Sub ClearFields()
      mvAccessControlRead = False
      mvSalesContactChecked = False
    End Sub


    Friend Sub New(ByVal pEnv As CDBEnvironment, ByVal pLogname As String, ByVal pPassword As String, ByVal pDatabaseLogname As String, ByVal pUserID As String)
      Me.New(pEnv, pLogname, pPassword, pDatabaseLogname, pUserID, "")
    End Sub

    Friend Sub New(ByVal pEnv As CDBEnvironment, ByVal pLogname As String, ByVal pPassword As String, ByVal pDatabaseLogname As String, ByVal pUserID As String, ByVal pNetworkLogname As String)
      MyBase.New(pEnv)
      mvLogname = pLogname
      mvPassword = pPassword
      If pDatabaseLogname.Length > 0 Then
        mvDatabaseLogname = pDatabaseLogname
      Else
        mvDatabaseLogname = pLogname
      End If
      If pUserID.Length > 0 Then
        mvUserID = pUserID
      Else
        mvUserID = pUserID
      End If
      mvNetworkLogname = pNetworkLogname
    End Sub

    Friend Sub InitWithLogname()
      Try
        Initialise()
      Catch vEx As Exception
        If vEx.Message.IndexOf("email_password", System.StringComparison.CurrentCultureIgnoreCase) >= 0 OrElse _
          vEx.Message.IndexOf("network_logname", System.StringComparison.CurrentCultureIgnoreCase) >= 0 Then
          mvClassFields(CDBUserFields.EmailPassword).InDatabase = False
          mvClassFields(CDBUserFields.NetworkLogname).InDatabase = False
          mvNetworkLogname = String.Empty
          Initialise()
        End If
      End Try
      mvLogname = mvClassFields(CDBUserFields.Logname).Value
      If mvUserID.Length = 0 Then mvUserID = mvLogname
    End Sub

    Private Sub Initialise()
      If Not String.IsNullOrEmpty(mvNetworkLogname) Then
        InitialiseWithNetworkLogname()
      Else
        InitialiseWithLogname()
      End If
    End Sub

    Private Sub InitialiseWithLogname()
      Me.IsWindowsUser = False
      Me.InitWithPrimaryKey(New CDBFields({New CDBField("logname", mvLogname),
                                             New CDBField("history_only", "Y", CDBField.FieldWhereOperators.fwoNotEqual)}))
    End Sub

    Private Sub InitialiseWithNetworkLogname()
      Me.IsWindowsUser = False
      Me.InitWithPrimaryKey(New CDBFields({New CDBField("network_logname", mvNetworkLogname),
                                           New CDBField("history_only", "Y", CDBField.FieldWhereOperators.fwoNotEqual)}))
      If Me.Existing Then
        Me.IsWindowsUser = True
      End If
    End Sub

    Private mvIsWindowsUser As Boolean = False
    Public Property IsWindowsUser As Boolean
      Get
        Return mvIsWindowsUser
      End Get
      Private Set(value As Boolean)
        mvIsWindowsUser = value
      End Set
    End Property
    Friend Sub InitForNewDatabase(pUserID As String)
      Me.Init()
      mvClassFields(CDBUserFields.Logname).Value = pUserID
      mvUserID = pUserID
    End Sub

    Friend ReadOnly Property InitialLogname() As String
      Get
        Return mvLogname
      End Get
    End Property

    Friend ReadOnly Property Password() As String
      Get
        Return mvPassword
      End Get
    End Property

    Friend ReadOnly Property DatabaseLogname() As String
      Get
        Return mvDatabaseLogname
      End Get
    End Property

    ''' <summary>The ID of the current user which may be different to the <see cref="Logname">Logname</see>.
    ''' The Smart Client will set the UserID to the same as the Logname, whilst Web Services will set it to the value passed into the Web Service.
    ''' This should always be used when setting attributes such as amended_by.</summary>
    Public ReadOnly Property UserID() As String
      Get
        Return mvUserID
      End Get
    End Property

    Public Sub SetUserID(ByVal vRU As RegisteredUser)
      If vRU IsNot Nothing Then
        mvUserID = Convert.ToString(vRU.ContactNumber)
      End If
    End Sub

    Public ReadOnly Property AccessLevel() As CDBUser.UserAccessLevel
      Get
        Select Case AccessLevelCode
          Case "D"
            Return UserAccessLevel.ualDatabaseAdministrator
          Case "S"
            Return UserAccessLevel.ualSupervisor
          Case "R"
            Return UserAccessLevel.ualReadOnly
          Case Else
            Return UserAccessLevel.ualUser
        End Select
      End Get
    End Property

    Private mvOwnershipLevels As CollectionList(Of CDBEnvironment.OwnershipAccessLevelTypes)

    Public Function AccessLevelFromOwnershipGroup(ByVal pOwnershipGroup As String) As CDBEnvironment.OwnershipAccessLevelTypes
      If mvEnv.OwnershipMethod = CDBEnvironment.OwnershipMethods.omOwnershipGroups Then
        If mvOwnershipLevels Is Nothing Then
          mvOwnershipLevels = New CollectionList(Of CDBEnvironment.OwnershipAccessLevelTypes)()
          Dim vWhereFields As New CDBFields()
          vWhereFields.Add("logname", Logname)
          vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoLessThanEqual)
          vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoNullOrGreaterThanEqual)
          Dim vRecordSet As CDBRecordSet = New SQLStatement(mvEnv.Connection, "ownership_group,ownership_access_level", "ownership_group_users ogu", vWhereFields).GetRecordSet
          While vRecordSet.Fetch
            If Not mvOwnershipLevels.ContainsKey(vRecordSet.Fields(1).Value) Then
              mvOwnershipLevels.Add(vRecordSet.Fields(1).Value, CDBEnvironment.GetOwnershipAccessLevel(vRecordSet.Fields(2).Value))
            End If
          End While
          vRecordSet.CloseRecordSet()
        End If
        If mvOwnershipLevels.ContainsKey(pOwnershipGroup) Then
          Return mvOwnershipLevels(pOwnershipGroup)
        Else
          Return CDBEnvironment.OwnershipAccessLevelTypes.oaltBrowse
        End If
      Else
        Return CDBEnvironment.OwnershipAccessLevelTypes.oaltWrite
      End If
    End Function

    Public ReadOnly Property AccessControlTable(ByVal pUsage As DataSelection.DataSelectionUsages) As CDBDataTable
      Get
        Dim vRow As CDBDataRow

        Dim vDT As New CDBDataTable
        vDT.AddColumnsFromList("Item,Access,Visible")
        If Not mvAccessControlRead Then InitAccessControl(mvEnv.Connection, pUsage)
        For Each vItem As String In mvAccessControl.Keys
          vRow = vDT.AddRow
          vRow.Item(1) = vItem.ToString
          vRow.Item(2) = mvAccessControl.Item(vItem.ToString).ToString
          vRow.Item(3) = IIf(mvEnv.OptionEnabled(vItem.ToString) And HasAccessRights(vItem.ToString), "Y", "N").ToString
        Next
        Return vDT
      End Get
    End Property

    Public Function HasAccessRights(ByVal pItem As String) As Boolean
      Dim vRequiredAccessLevel As UserAccessLevel
      Dim vValue As String

      If pItem.Length > 0 Then
        If pItem.StartsWith("AM") Then 'All Admin Items Need DBA Access
          vRequiredAccessLevel = UserAccessLevel.ualDatabaseAdministrator
        ElseIf pItem.StartsWith("CDAE") Then 'All Contacts Events items Need User Access
          If pItem = "CDAEAE" Then 'Authorise Expenses needs supervisor
            vRequiredAccessLevel = UserAccessLevel.ualSupervisor
          Else
            vRequiredAccessLevel = UserAccessLevel.ualUser
          End If
        ElseIf pItem.StartsWith("CDAM") Then 'All Contacts Admin items Need User Access
          vRequiredAccessLevel = UserAccessLevel.ualUser
        ElseIf pItem.StartsWith("SMDD") Then 'All System Manager De-Dup Items Need Supervisor Access
          vRequiredAccessLevel = UserAccessLevel.ualSupervisor
        ElseIf pItem.StartsWith("SMFM") Then 'All System Manager Financial Batch Items Need Supervisor Access
          vRequiredAccessLevel = UserAccessLevel.ualSupervisor
        Else
          Select Case pItem
            Case "QAONLY"
              vRequiredAccessLevel = UserAccessLevel.ualNone
              'The following items require User Access Level - Not Read-Only
              'Selection Manager, User Comments, Document Distributor, Action Finder, Schedule Tasks
            Case "CDTMSM", "CDTMUC", "CDTMDD", "CDFMAF", "GETMST"
              vRequiredAccessLevel = UserAccessLevel.ualUser
              'Event Finder, Meeting Finder Telephone Call Recording
              'Document Creator, New Record, Modify Record
            Case "CDFMEF", "CDFMMF", "CDTMTC", "CDTMDC", "CDEMNE", "CDEMMO"
              vRequiredAccessLevel = UserAccessLevel.ualUser
              'New Document, Document Actions, Edit Document, Delete Document, Update Document
            Case "CDDPND", "CDDPAC", "CDDPED", "CDDPDE", "CDDPUP"
              vRequiredAccessLevel = UserAccessLevel.ualUser
              'The following items require Supervisor Access Level
              'Close Open Batch, New Credit Customer, Remove Credit Stop Code, Amend Invoice Payment Due, Allocations
            Case "CDAMCO", "CDCSNC", "CDCSRS", "CDAPAP", "CDAPAL", "CDEVVC", "SMMKGD", "SMMEFM", "SMFSES"
              vRequiredAccessLevel = UserAccessLevel.ualSupervisor
              'The following items require DBA Access Level
              'Administration Manager,  Postcode Validation, Reset Available Packages
            Case "CDAMAM", "CDAMPV", "CDAMRP", "CDFLSQ", "SMAMSQ"
              vRequiredAccessLevel = UserAccessLevel.ualDatabaseAdministrator
            Case Else
              vRequiredAccessLevel = UserAccessLevel.ualReadOnly
          End Select
        End If
        If Not mvAccessControlRead Then InitAccessControl(mvEnv.Connection, DataSelection.DataSelectionUsages.dsuCare)
        If mvAccessControl.Count > 0 Then
          If mvAccessControl.ContainsKey(pItem) Then
            vValue = mvAccessControl(pItem).ToString
            Select Case vValue
              Case "D"
                vRequiredAccessLevel = UserAccessLevel.ualDatabaseAdministrator
              Case "S"
                vRequiredAccessLevel = UserAccessLevel.ualSupervisor
              Case "U"
                vRequiredAccessLevel = UserAccessLevel.ualUser
              Case "R"
                vRequiredAccessLevel = UserAccessLevel.ualReadOnly
              Case "N"
                vRequiredAccessLevel = UserAccessLevel.ualNone
            End Select
          End If
        End If
        If AccessLevel >= vRequiredAccessLevel AndAlso vRequiredAccessLevel <> UserAccessLevel.ualNone Then Return (True)
      Else
        Return True
      End If
    End Function

    Private Sub InitAccessControl(ByVal pConn As CDBConnection, ByVal pUsage As DataSelection.DataSelectionUsages)
      Dim vRecordSet As CDBRecordSet

      mvAccessControl = New SortedList
      Dim vFields As String = "access_control_item, access_level"
      Dim vWhereFields As New CDBFields
      If pUsage = DataSelection.DataSelectionUsages.dsuSmartClient Then
        vWhereFields.Add("ac.access_control_item", "SM*", CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoNotLike)
        vWhereFields.Add("ac.access_control_item#9", "SELECT access_control_item FROM access_control_items WHERE access_control_area='SMFMBM' OR access_control_area='SMMMMD'", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoIn Or CDBField.FieldWhereOperators.fwoCloseBracket)
        vWhereFields.Add("ac.access_control_item#1", "AM*", CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoNotLike)
        vWhereFields.Add("ac.access_control_item#2", "'AMAMAN','AMAMDL','AMFMIC'", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoIn Or CDBField.FieldWhereOperators.fwoCloseBracket)
        vWhereFields.Add("ac.access_control_item#3", "CDFL*", CDBField.FieldWhereOperators.fwoNotLike)
        vWhereFields.Add("ac.access_control_item#4", "CDEM*", CDBField.FieldWhereOperators.fwoNotLike)
        vWhereFields.Add("ac.access_control_item#5", "CDVM*", CDBField.FieldWhereOperators.fwoNotLike)
        vWhereFields.Add("ac.access_control_item#6", "CDFM*", CDBField.FieldWhereOperators.fwoNotLike)
        vWhereFields.Add("ac.access_control_item#7", "CDTM*", CDBField.FieldWhereOperators.fwoNotLike)
        vWhereFields.Add("ac.access_control_item#8", "CDAM*", CDBField.FieldWhereOperators.fwoNotLike)
      End If
      vRecordSet = New SQLStatement(pConn, vFields, "access_control_items ac", vWhereFields).GetRecordSet
      While vRecordSet.Fetch()
        mvAccessControl.Add(vRecordSet.Fields(1).Value, vRecordSet.Fields(2).Value)
      End While
      vRecordSet.CloseRecordSet()
      vWhereFields.Add("access_control_group", AccessControlGroup)
      vRecordSet = New SQLStatement(pConn, vFields, "access_control ac ", vWhereFields).GetRecordSet
      While vRecordSet.Fetch()
        If mvAccessControl.ContainsKey(vRecordSet.Fields(1).Value) Then mvAccessControl(vRecordSet.Fields(1).Value) = vRecordSet.Fields(2).Value
      End While
      vRecordSet.CloseRecordSet()
      mvAccessControlRead = True
    End Sub

    Public Sub InitFromContactNumber(ByVal pContactNumber As Integer)
      InitFromContactNumber(pContactNumber, "")
    End Sub
    Public Sub InitFromContactNumber(ByVal pContactNumber As Integer, ByVal pLogname As String)
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add("contact_number", pContactNumber)
      If pLogname.Length > 0 Then vWhereFields.Add("logname", pLogname)
      Me.InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Sub AddOwnershipJoins(ByVal pAnsiJoins As AnsiJoins, ByVal pAlias As String)
      If mvEnv.OwnershipMethod = CDBEnvironment.OwnershipMethods.omOwnershipGroups Then
        pAnsiJoins.Add("ownership_groups og ", pAlias & ".ownership_group", "og.ownership_group")
        pAnsiJoins.Add("departments d", "og.principal_department", "d.department")
        pAnsiJoins.Add("ownership_group_users ogu", "og.ownership_group", "ogu.ownership_group")
        pAnsiJoins.Add("ownership_access_levels oal", "ogu.ownership_access_level", "oal.ownership_access_level")
      End If
    End Sub

    Public Sub AddOwnershipWhere(ByVal pWhereFields As CDBFields, ByVal pAlias As String)
      If mvEnv.OwnershipMethod = CDBEnvironment.OwnershipMethods.omOwnershipGroups Then
        pWhereFields.Add("ogu.logname", Logname)
        pWhereFields.Add("ogu.valid_from", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoLessThanEqual)
        pWhereFields.Add("ogu.valid_to", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoGreaterThanEqual Or CDBField.FieldWhereOperators.fwoOpenBracket)
        pWhereFields.Add("ogu.valid_to#1", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket)
      End If
    End Sub

    Public ReadOnly Property SalesContactNumber() As Integer
      Get
        If mvSalesContactChecked = False Then
          If ContactNumber > 0 Then
            mvSalesContactNumber = IntegerValue(mvEnv.Connection.GetValue("SELECT contact_number FROM sales_persons WHERE contact_number = " & ContactNumber))
            mvSalesContactChecked = True
          End If
        End If
        Return mvSalesContactNumber
      End Get
    End Property

    Public ReadOnly Property AccessLevelCodeList() As String
      Get
        Dim vIndex As Integer
        Dim vList As String = ""

        For vIndex = AccessLevel To UserAccessLevel.ualReadOnly Step -1
          Select Case vIndex
            Case UserAccessLevel.ualReadOnly
              vList = vList & ", 'R'"
            Case UserAccessLevel.ualUser
              vList = vList & ", 'U'"
            Case UserAccessLevel.ualSupervisor
              vList = vList & ", 'S'"
            Case UserAccessLevel.ualDatabaseAdministrator
              vList = vList & ", 'D'"
          End Select
        Next
        Return Mid$(vList, 3)
      End Get
    End Property
#End Region

  End Class
End Namespace
