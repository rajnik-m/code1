Namespace Access

  Public Class EplPage
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum EplPageFields
      AllFields = 0
      EplPageNumber
      FpPageType
      Client
      Department
      Logname
      GroupCode
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("epl_page_number", CDBField.FieldTypes.cftLong)
        .Add("fp_page_type").PrefixRequired = True
        .Add("client")
        .Add("department")
        .Add("logname")
        .Add("group_code")

        .Item(EplPageFields.EplPageNumber).PrimaryKey = True
        .SetControlNumberField(EplPageFields.EplPageNumber, "GT")
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ep"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "epl_pages"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property EplPageNumber() As Integer
      Get
        Return mvClassFields(EplPageFields.EplPageNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property FpPageType() As String
      Get
        Return mvClassFields(EplPageFields.FpPageType).Value
      End Get
    End Property
    Public ReadOnly Property Client() As String
      Get
        Return mvClassFields(EplPageFields.Client).Value
      End Get
    End Property
    Public ReadOnly Property Department() As String
      Get
        Return mvClassFields(EplPageFields.Department).Value
      End Get
    End Property
    Public ReadOnly Property Logname() As String
      Get
        Return mvClassFields(EplPageFields.Logname).Value
      End Get
    End Property
    Public ReadOnly Property GroupCode() As String
      Get
        Return mvClassFields(EplPageFields.GroupCode).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(EplPageFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(EplPageFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Private mvPageNumbers As StringList

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvPageNumbers = Nothing
    End Sub

    Public ReadOnly Property PageNumbers As StringList
      Get
        Return mvPageNumbers
      End Get
    End Property

    Public Overloads Sub Init(ByVal pPageType As String, ByVal pGroupCode As String)
      Me.Init(pPageType, pGroupCode, "", "")
    End Sub
    Public Overloads Sub Init(ByVal pPageType As String, ByVal pGroupCode As String, ByVal pDepartment As String, ByVal pLogname As String)
      CheckClassFields()

      If String.IsNullOrEmpty(pLogname) = False AndAlso pLogname.Length > 0 AndAlso String.IsNullOrEmpty(pDepartment) = True Then
        'Where User parameter supplied but Department not supplied (Department Any) include for User Department
        Dim vDisplayUser As New CDBUser(mvEnv)
        vDisplayUser.Init(pLogname)
        pDepartment = vDisplayUser.Department
      End If

      Dim vWhereFields As New CDBFields()
      Dim vFWO As CDBField.FieldWhereOperators = CDBField.FieldWhereOperators.fwoEqual
      If pPageType.Contains(",") Then
        Dim vStringList As New StringList(pPageType)
        vFWO = CDBField.FieldWhereOperators.fwoIn
        pPageType = vStringList.InList
      ElseIf pPageType.Contains("*") Then
        vFWO = CDBField.FieldWhereOperators.fwoLike
      End If
      vWhereFields.Add(mvClassFields(EplPageFields.FpPageType).Name, pPageType, vFWO)
      vWhereFields.Add(mvClassFields(EplPageFields.GroupCode).Name, pGroupCode)
      vWhereFields.AddClientDeptLogname(mvEnv.ClientCode, pDepartment, pLogname)
      Dim vSQL As New SQLStatement(mvEnv.Connection, GetRecordSetFields, DatabaseTableName & " " & TableAlias, vWhereFields)
      vSQL.SetOrderByClientDeptLogname(mvClassFields(EplPageFields.GroupCode).Name)
      Dim vRS As CDBRecordSet = vSQL.GetRecordSet
      Dim vList As New List(Of String)
      If vRS.Fetch Then
        InitFromRecordSet(vRS)
        mvPageNumbers = New StringList(EplPageNumber.ToString)
        If pPageType.Contains("*") Then       'For QBE there may be many customised pages
          vList.Add(FpPageType)
          While vRS.Fetch
            Dim vEplPage As New EplPage(mvEnv)
            vEplPage.InitFromRecordSet(vRS)
            If Not vList.Contains(vEplPage.FpPageType) Then
              vList.Add(vEplPage.FpPageType)
              mvPageNumbers.Add(vEplPage.EplPageNumber.ToString)
            End If
          End While
        End If
      End If
      vRS.CloseRecordSet()
    End Sub

    Public Overloads Sub Create(ByVal pPageType As String, ByVal pGroupCode As String)
      Me.Create(pPageType, pGroupCode, "", "")
    End Sub
    Public Overloads Sub Create(ByVal pPageType As String, ByVal pGroupCode As String, ByVal pDepartment As String, ByVal pLogname As String)
      mvClassFields(EplPageFields.FpPageType).Value = pPageType
      mvClassFields(EplPageFields.Client).Value = mvEnv.ClientCode
      mvClassFields(EplPageFields.GroupCode).Value = pGroupCode
      If pDepartment.Length > 0 Then
        mvClassFields(EplPageFields.Department).Value = pDepartment
      ElseIf pLogname.Length > 0 Then
        mvClassFields(EplPageFields.Logname).Value = pLogname
      End If
    End Sub

#End Region


  End Class
End Namespace
