Imports System.IO
Imports Microsoft.Win32

Namespace Access

  Partial Public Class JobSchedule
    Inherits CARERecord
    Implements IEquatable(Of JobSchedule)

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum JobScheduleFields
      AllFields = 0
      JobNumber
      JobDesc
      CommandLine
      DueDate
      RunDate
      EndDate
      JobFrequency
      JobStatus
      ErrorStatus
      JobProcessor
      NotifyStatus
      SubmittedBy
      SubmittedOn
      UpdateJobParameterDates
      SmartClientJob
      JobID
      JobFailed
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("job_number", CDBField.FieldTypes.cftLong)
        .Add("job_desc")
        .Add("command_line")
        .Add("due_date", CDBField.FieldTypes.cftTime)
        .Add("run_date", CDBField.FieldTypes.cftTime)
        .Add("end_date", CDBField.FieldTypes.cftTime)
        .Add("job_frequency")
        .Add("job_status")
        .Add("error_status", CDBField.FieldTypes.cftMemo)
        .Add("job_processor")
        .Add("notify_status")
        .Add("submitted_by")
        .Add("submitted_on", CDBField.FieldTypes.cftDate)
        .Add("update_job_parameter_dates")
        .Add("smart_client_job")
        .Add("job_id")
        .Add("job_failed")

        .Item(JobScheduleFields.JobNumber).PrimaryKey = True

        If mvEnv.InitialisingDatabase = False Then
          .Item(JobScheduleFields.SmartClientJob).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataJobScheduleSmartClientJob)
          .Item(JobScheduleFields.JobID).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbJobScheduleJobId)
          .Item(JobScheduleFields.JobFailed).InDatabase = mvEnv.Connection.AttributeExists("job_schedule", "job_failed")
        End If
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return False
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "js"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "job_schedule"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property JobNumber() As Integer
      Get
        Return mvClassFields(JobScheduleFields.JobNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property JobID() As String
      Get
        Return mvClassFields(JobScheduleFields.JobID).Value
      End Get
    End Property
    Public ReadOnly Property JobDesc() As String
      Get
        Return mvClassFields(JobScheduleFields.JobDesc).Value
      End Get
    End Property
    Public ReadOnly Property CommandLine() As String
      Get
        Return mvClassFields(JobScheduleFields.CommandLine).Value
      End Get
    End Property
    Public ReadOnly Property DueDate() As String
      Get
        Return mvClassFields(JobScheduleFields.DueDate).Value
      End Get
    End Property
    Public ReadOnly Property RunDate() As String
      Get
        Return mvClassFields(JobScheduleFields.RunDate).Value
      End Get
    End Property
    Public ReadOnly Property EndDate() As String
      Get
        Return mvClassFields(JobScheduleFields.EndDate).Value
      End Get
    End Property
    Public ReadOnly Property JobFrequency() As String
      Get
        Return mvClassFields(JobScheduleFields.JobFrequency).Value
      End Get
    End Property
    Public ReadOnly Property JobStatus() As JobStatuses
      Get
        Select Case mvClassFields(JobScheduleFields.JobStatus).Value
          Case "W"
            Return JobStatuses.jbsWaiting
          Case "S"
            Return JobStatuses.jbsStarted
          Case "R"
            Return JobStatuses.jbsRunning
          Case "C"
            Return JobStatuses.jbsCompleted
          Case "B"
            Return JobStatuses.jbsAbortRequested
          Case "A"
            Return JobStatuses.jbsAborted
          Case Else
            Return JobStatuses.jbsInfoMessage
        End Select
      End Get
    End Property
    Public ReadOnly Property ErrorStatus() As String
      Get
        Return mvClassFields(JobScheduleFields.ErrorStatus).Value
      End Get
    End Property
    Public ReadOnly Property SubmittedBy() As String
      Get
        Return mvClassFields(JobScheduleFields.SubmittedBy).Value
      End Get
    End Property
    Public ReadOnly Property SubmittedOn() As String
      Get
        Return mvClassFields(JobScheduleFields.SubmittedOn).Value
      End Get
    End Property
    Public ReadOnly Property UpdateJobParameterDates() As String
      Get
        Return mvClassFields(JobScheduleFields.UpdateJobParameterDates).Value
      End Get
    End Property
    Public ReadOnly Property SmartClientJob() As String
      Get
        SmartClientJob = mvClassFields(JobScheduleFields.SmartClientJob).Value
        If SmartClientJob = "" Then SmartClientJob = "N"
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Public Enum JobScheduleRecordSetTypes       'These are bit values
      jsrtAll = &HFFFF
      'ADD additional recordset types here
    End Enum
    Public Enum JobStatuses
      jbsWaiting
      jbsStarted
      jbsRunning
      jbsCompleted
      jbsProcessed
      jbsReportStarted
      jbsReportCompleted
      jbsReportProcessed
      jbsReportSelection
      jbsInfoMessage
      jbsAbortRequested
      jbsAborted
    End Enum

    Public Enum JobNotifyStatuses
      jnsNone
      jnsStarted
      jnsCompleted
      jnsStartedAndCompleted
    End Enum

    Public Enum TaskJobTypes
      tjtNone = 0
      tjtExpirePaymentPlans
      tjtMailsortUpdate
      tjtPriceChange
      tjtRemoveArrears
      tjtDirectDebitRun
      tjtDDClaimFile
      tjtMembershipSuspension
      tjtAutoSOReconciliation
      tjtStatementLoader
      tjtDDMandateFile
      tjtDDCreditFile
      tjtCCClaimFile
      tjtCCClaimReport
      tjtCardSalesFile
      tjtCardSalesReport
      tjtCreditCardRun
      tjtEventTotalsUpdate
      tjtThankYouLetters
      tjtRenewalsAndReminders
      tjtPayingInSlips
      tjtCashBookPosting
      tjtBatchUpdate
      tjtMailingCount
      tjtMailingRun
      tjtGenerateMarketingData
      tjtGenerateAddressGeoRegions
      tjtContactDeDuplication
      tjtBulkMerge
      tjtFutureMembershipChanges
      tjtCreateJournalFiles
      tjtPickingList
      tjtConfirmStockAllocation
      tjtBackOrderAllocation
      tjtDespatchNotes
      tjtInvoiceTransfer
      tjtBatchPurge
      tjtBackOrderPurge
      tjtPickingAndDespatchPurge
      tjtGiftAidClaim
      tjtGiftAidPotentialClaim
      tjtDataImport
      tjtManualSOReconciliation
      tjtAmendmentHistoryView
      tjtSetPostDatedContacts
      tjtGAYEPaymentLoader
      tjtGAYEReconciliation
      tjtBankDataLoad
      tjtCAFProvisionalBatchClaim
      tjtCAFCardSalesReport
      tjtCAFExpectedPaymentsReport
      tjtCAFPaymentLoader
      tjtMailingDocumentProduction
      tjtBankTransactionsReport
      tjtPurchasedProductReport
      tjtBranchDonationsReport
      tjtJuniorMembershipAnalysisReport
      tjtOutstandingBatchesReport
      tjtCAFPaymentReconciliation
      tjtBranchIncomeReport
      tjtConvertManualDirectDebits
      tjtBACSRejections
      tjtBallotPaperProduction
      tjtAssumedVotingRights
      tjtPeriodStatsGenerateData
      tjtPeriodStatsReport
      tjtSelectionTester
      tjtUpdateActionStatus
      tjtPostPayments
      tjtListAllContacts
      tjtPurgePrizeDrawBatches
      tjtPayrollPledgeCancellation
      tjtStandingOrderCancellation
      tjtDirectDebitMailing
      tjtStandingOrderMailing
      tjtSubscriptionMailing
      tjtMemberMailing
      tjtMembCardMailing
      tjtPayerMailing
      tjtSelectionManagerMailing
      tjtCustomerTransfer
      tjtUpdateSearchNames
      tjtStockExport
      tjtGADConfirmation
      tjtGASPotentialClaim
      tjtGASTaxClaim
      tjtPOTransferSuppliers
      tjtUpdatePaymentSchedule
      tjtUpdateGovernmentRegions
      tjtPayrollPledgeMailing
      tjtCreditCardAuthorisationReport
      tjtBulkAddressMerge
      tjtUpdatePaymentPlanProducts
      tjtCheckPaymentPlans
      tjtMemberFulfilment
      tjtDormantContactDeletion
      tjtScheduledReport
      tjtPostTaxPGReconciliation
      tjtPISStatementLoader
      tjtPISReconciliation
      tjtPublicCollectionsFulfilment
      tjtEventBookerMailing
      tjtEventDelegateMailing
      tjtEventPersonnelMailing
      tjtEventSponsorMailing
      tjtDutchElectronicPaymentsLoader
      tjtDutchElectronicPaymentsReconciliation
      tjtBulkGiftAidUpdate
      tjtIrishGiftAidMailing
      tjtIrishGiftAidPotentialClaim
      tjtIrishGiftAidTaxClaim
      tjtBulkContactDeletion
      tjtProcessAddressChanges
      tjtBulkOrganisationMerge
      tjtAllocateDonationToBox
      tjtPrintBoxLabels
      tjtShipDistributionBoxes
      tjtSetBoxesArrived
      tjtChequeProduction
      tjtGenerateRollOfHonour
      tjtCheetahMailMetaData
      tjtCheetahMailEventData
      tjtCheetahMailTotals
      tjtBulkMailerStatistics
      tjtEMailProcessor
      tjtDistributionBoxReports
      tjtEventBlockBooking
      tjtPurchaseOrderGeneration
      tjtPurchaseOrderPrint
      tjtIssueResources
      tjtCancelEvent
      tjtDatabaseUpgrade
      tjtApplyCPDPoints
      tjtSelectMailing
      tjtRegisterSurvey
      tjtCreditStatementGeneration
      tjtCancelProvisionalBookings
      tjtPostcodeValidation
      tjtProcessPurchaseOrderPayments
      tjtUploadBACSMessagingData
      tjtApplyPaymentPlanSurcharges
      tjtRecalculateLoanInterest
      tjtExamAllocateCandidateNumbers
      tjtExamAllocateMarkers
      tjtExamApplyGrading
      tjtExamGenerateExemptionInvoices
      tjtDataUpdates
      tjtExamBookerMailing
      tjtExamCandidateMailing
      tjtExamLoadCsvResults
      tjtUpdateLoanInterestRates
      tjtCheckNonCoreTables
      tjtGenerateTableCreationFiles
      tjtGetReportData
      tjtGetConfigNameData
      tjtBulkUpdateActivity
      tjtRegenerateMessageQueue
      tjtTransferPaymentPlanChanges
      tjtMoveExternalDocuments
      tjtExamCertificates
      tjtExamCertificateReprints
      tjtUpdatePrincipalUser
      tjtUpdateFutureMembershipType
      tjtProcessCertificateData
      tjtPurgeStickyNotes
      'When adding a new task insert and entry in this enum before jtyLastJobType
      'Then add a description to the TaskDescription property
      'Then add a Name to the select case in the TaskName Property Let
      'Then add a page code GetPageCode function if one exists
      tjtLastJobType            'Not Valid
    End Enum

    Private mvParameters As CDBParameters  'Used as parameters for the job
    Private mvSupressJobSchedule As Boolean
    Private mvTaskJobType As TaskJobTypes
    Private mvReportSelectionSection As String = ""
    Private mvJobName As String = String.Empty
    Private mvOutputFiles As List(Of JobOutputFile)

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvTaskJobType = TaskJobTypes.tjtNone
      mvOutputFiles = Nothing
    End Sub

    Public Overloads Sub Init()
      Init(0)
    End Sub

    Public Overloads Sub Init(ByVal pJobNumber As Integer)
      If pJobNumber > 0 Then
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("job_number", CDBField.FieldTypes.cftLong, pJobNumber.ToString)
        Dim vRecordSet As CDBRecordSet = New SQLStatement(mvEnv.Connection, GetRecordSetFields(JobScheduleRecordSetTypes.jsrtAll), "job_schedule js", vWhereFields).GetRecordSet
        If vRecordSet.Fetch() = True Then
          InitFromRecordSet(vRecordSet, JobScheduleRecordSetTypes.jsrtAll)
        Else
          InitClassFields()
          mvClassFields.Item(JobScheduleFields.JobNumber).IntegerValue = pJobNumber
        End If
        vRecordSet.CloseRecordSet()
      Else
        InitClassFields()
      End If
    End Sub

    Public Overloads Sub Init(ByVal pJobId As String)
      If pJobId IsNot Nothing AndAlso pJobId.Length > 0 Then
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("job_id", pJobId)
        Dim vRecordSet As CDBRecordSet = New SQLStatement(mvEnv.Connection, GetRecordSetFields(JobScheduleRecordSetTypes.jsrtAll), "job_schedule js", vWhereFields).GetRecordSet
        If vRecordSet.Fetch() = True Then
          InitFromRecordSet(vRecordSet, JobScheduleRecordSetTypes.jsrtAll)
        End If
        vRecordSet.CloseRecordSet()
      End If
    End Sub

    Public Overloads Sub InitFromRecordSet(ByVal pRecordSet As CDBRecordSet, ByVal pRSType As JobScheduleRecordSetTypes)
      Dim vFields As CDBFields = pRecordSet.Fields
      InitClassFields()
      mvExisting = True
      With mvClassFields
        'Always include the primary key attributes
        .SetItem(JobScheduleFields.JobNumber, vFields)
        'Modify below to handle each recordset type as required
        If (pRSType And JobScheduleRecordSetTypes.jsrtAll) = JobScheduleRecordSetTypes.jsrtAll Then
          .SetItem(JobScheduleFields.JobDesc, vFields)
          .SetItem(JobScheduleFields.CommandLine, vFields)
          If mvClassFields(JobScheduleFields.CommandLine).Value.Length > 0 Then
            'Set up the job name 
            mvJobName = mvClassFields(JobScheduleFields.CommandLine).Value.Split(" "c)(6)
          End If
          .SetItem(JobScheduleFields.DueDate, vFields)
          .SetItem(JobScheduleFields.RunDate, vFields)
          .SetItem(JobScheduleFields.EndDate, vFields)
          .SetItem(JobScheduleFields.JobFrequency, vFields)
          .SetItem(JobScheduleFields.JobStatus, vFields)
          .SetItem(JobScheduleFields.ErrorStatus, vFields)
          .SetOptionalItem(JobScheduleFields.JobProcessor, vFields)
          .SetOptionalItem(JobScheduleFields.NotifyStatus, vFields)
          .SetOptionalItem(JobScheduleFields.SubmittedBy, vFields)
          .SetOptionalItem(JobScheduleFields.SubmittedOn, vFields)
          .SetOptionalItem(JobScheduleFields.UpdateJobParameterDates, vFields)
          .SetOptionalItem(JobScheduleFields.SmartClientJob, vFields)
        End If
      End With
    End Sub

    Public Overloads Function GetRecordSetFields(ByVal pRSType As JobScheduleRecordSetTypes) As String
      Dim vFields As String = ""
      'Modify below to add each recordset type as required
      If pRSType = JobScheduleRecordSetTypes.jsrtAll Then
        CheckClassFields()
        vFields = mvClassFields.FieldNames(mvEnv, TableAlias)
      Else
        '
      End If
      Return vFields
    End Function

    Private Function ScheduleJob() As String

      InitClassFields()
      mvClassFields.Item(JobScheduleFields.JobDesc).Value = mvParameters("JobName").Value
      mvClassFields.Item(JobScheduleFields.CommandLine).Value = mvParameters("CommandLine").Value
      If mvParameters.Exists("JobId") Then mvClassFields.Item(JobScheduleFields.JobID).Value = mvParameters("JobId").Value

      mvClassFields.Item(JobScheduleFields.JobFrequency).Value = mvParameters.OptionalValue("JobFrequency", "O")
      mvClassFields.Item(JobScheduleFields.JobProcessor).Value = mvParameters.OptionalValue("JobProcessor", "")
      mvClassFields.Item(JobScheduleFields.NotifyStatus).Value = mvParameters.OptionalValue("NotifyStatus", "N")
      mvClassFields.Item(JobScheduleFields.UpdateJobParameterDates).Value = mvParameters.OptionalValue("UpdateJobParameterDates", "N")
      mvClassFields.Item(JobScheduleFields.SmartClientJob).Value = mvParameters.OptionalValue("SmartClientJob", IIf(IsNETJob(mvParameters("JobName").Value), "Y", "N").ToString)
      Dim vStatus As String
      If mvParameters.OptionalValue("StartJob", "N") = "Y" Then
        vStatus = JobStatusCode(JobStatuses.jbsStarted)
        mvClassFields.Item(JobScheduleFields.DueDate).Value = Now.ToString(CAREDateTimeFormat)
        mvClassFields.Item(JobScheduleFields.RunDate).Value = Now.ToString(CAREDateTimeFormat)
      Else
        vStatus = JobStatusCode(JobStatuses.jbsWaiting)
        mvClassFields.Item(JobScheduleFields.DueDate).Value = mvParameters("DueDate").Value
      End If
      mvClassFields.Item(JobScheduleFields.JobStatus).Value = vStatus
      If mvParameters.Exists("SubmittedBy") AndAlso mvParameters("SubmittedBy").Value.Length <> 0 Then
        mvClassFields.Item(JobScheduleFields.SubmittedBy).Value = mvParameters("SubmittedBy").Value
      Else
        mvClassFields.Item(JobScheduleFields.SubmittedBy).Value = mvEnv.User.Logname
      End If
      mvClassFields.Item(JobScheduleFields.SubmittedOn).Value = TodaysDate()
      If mvClassFields.Item(JobScheduleFields.JobFailed).InDatabase Then
        mvClassFields.Item(JobScheduleFields.JobFailed).Value = "N"
      End If
      AddSchedule()
      Return "Scheduled Successfully"
    End Function

    Public Sub ScheduleJob(ByVal pEnv As CDBEnvironment, ByVal pDesc As String, ByVal pCommandLine As String, Optional ByVal pStart As Boolean = False, Optional ByVal pDueDate As Date = #12:00:00 AM#, Optional ByVal pJobFrequency As String = "O", Optional ByVal pJobProcessor As String = "", Optional ByVal pNotifyStatus As String = "", Optional ByVal pUpdateParameterDates As String = "N", Optional ByVal pSubmittedBy As String = "")
      Dim vFields As New CDBFields
      Dim vStatus As String

      'CALLED FROM
      'Tasks TaskInterface Class (about to run a task with no Job number)
      'Forms ScheduleJobInterface Class (job added via job processor form)
      'Forms JobProcessor Form (job processed so adding new job for repeating jobs)
      mvEnv = pEnv
      InitClassFields()
      mvClassFields.Item(JobScheduleFields.JobDesc).Value = pDesc
      mvClassFields.Item(JobScheduleFields.JobFrequency).Value = pJobFrequency
      mvClassFields.Item(JobScheduleFields.CommandLine).Value = pCommandLine
      If pStart Then
        mvClassFields.Item(JobScheduleFields.DueDate).Value = TodaysDateAndTime()
        mvClassFields.Item(JobScheduleFields.RunDate).Value = TodaysDateAndTime()
        vStatus = JobStatusCode(JobStatuses.jbsStarted) 'Started
      Else
        mvClassFields.Item(JobScheduleFields.DueDate).Value = CStr(pDueDate)
        vStatus = JobStatusCode(JobStatuses.jbsWaiting) 'Waiting
      End If
      mvClassFields.Item(JobScheduleFields.JobStatus).Value = vStatus
      mvClassFields.Item(JobScheduleFields.JobProcessor).Value = pJobProcessor
      If pNotifyStatus.Length > 0 Then
        mvClassFields.Item(JobScheduleFields.NotifyStatus).Value = pNotifyStatus
      Else
        mvClassFields.Item(JobScheduleFields.NotifyStatus).Value = "N"
      End If
      If pSubmittedBy.Length = 0 Then
        mvClassFields.Item(JobScheduleFields.SubmittedBy).Value = mvEnv.User.Logname
      Else
        mvClassFields.Item(JobScheduleFields.SubmittedBy).Value = pSubmittedBy
      End If
      mvClassFields.Item(JobScheduleFields.SubmittedOn).Value = TodaysDate()
      mvClassFields.Item(JobScheduleFields.UpdateJobParameterDates).Value = pUpdateParameterDates
      AddSchedule()
    End Sub

    Private Function JobStatusCode(ByVal pStatus As JobStatuses) As String
      Select Case pStatus
        Case JobStatuses.jbsWaiting
          Return "W"
        Case JobStatuses.jbsStarted
          Return "S"
        Case JobStatuses.jbsRunning
          Return "R"
        Case JobStatuses.jbsCompleted
          Return "C"
        Case JobStatuses.jbsAbortRequested
          Return "B"
        Case JobStatuses.jbsAborted
          Return "A"
        Case Else
          Return ""
      End Select
    End Function

    Private Sub AddSchedule()
      mvClassFields.Item(JobScheduleFields.JobNumber).IntegerValue = mvEnv.GetControlNumber("JN")
      UpdateBatches(True, JobNumber)
      If mvClassFields.Item(JobScheduleFields.JobFailed).InDatabase AndAlso mvClassFields.Item(JobScheduleFields.JobFailed).Value <> "Y" AndAlso mvClassFields.Item(JobScheduleFields.JobFailed).Value <> "N" Then
        mvClassFields.Item(JobScheduleFields.JobFailed).Value = "N"
      End If
      Save()

      mvEnv.Connection.CommitTransaction()
    End Sub

    Private Sub UpdateBatches(ByVal pScheduling As Boolean, ByVal pJobNumber As Long)
      Dim vFirstBatch As Long
      Dim vLastBatch As Long
      Dim vBatchCount As Long
      Dim vWhereFields As New CDBFields
      Dim vUpdateFields As New CDBFields
      Dim vRecordSet As CDBRecordSet
      Dim vBatchType As String = ""
      Dim vBatchNumbersList As String = ""
      Dim vTemp() As String

      'If the job involves batches then if scheduling a new job
      'we must check if the batches are already in a job
      'If they are then we want to generate an error and not continue with the job
      'If completing a job and we got an error we must clear the job number

      Select Case JobDesc
        Case "BatchUpdate"
          vFirstBatch = mvParameters("BatchNumber").LongValue
          vBatchCount = 1
        Case "CardSalesFile", "CardSalesReport", "CreditCardAuthorityClaim", "CreditCardAuthorityReport", "CAFVoucherClaimReport", "CAFCardSalesReport"
          If mvParameters.Exists("BatchNumbers") Then
            vBatchNumbersList = mvParameters("BatchNumbers").Value
            vTemp = vBatchNumbersList.Split(","c)
            vBatchCount = UBound(vTemp) + 1
          Else
            vFirstBatch = mvParameters("BatchNumber").LongValue
            vBatchCount = 1
          End If
        Case "DirectDebitClaimFile", "DirectDebitCreditFile"
          vFirstBatch = mvParameters("BatchNumber").LongValue
          vLastBatch = mvParameters.ParameterExists("BatchNumber2").LongValue
          If vLastBatch > 0 Then vBatchCount = vLastBatch - vFirstBatch Else vBatchCount = 1
          If JobDesc = "DirectDebitClaimFile" Then vBatchType = "DD" Else vBatchType = "DR"
      End Select

      If vBatchCount > 0 Then
        vUpdateFields.Add("job_number", CDBField.FieldTypes.cftLong)
        If vBatchNumbersList.Length > 0 Then
          vWhereFields.Add("batch_number", CDBField.FieldTypes.cftLong, vBatchNumbersList, CDBField.FieldWhereOperators.fwoIn)
        Else
          If vBatchCount = 1 Then
            vWhereFields.Add("batch_number", CDBField.FieldTypes.cftLong, vFirstBatch.ToString)
          Else
            vWhereFields.Add("batch_number", CDBField.FieldTypes.cftLong, vFirstBatch.ToString, CDBField.FieldWhereOperators.fwoBetweenFrom)
            vWhereFields.Add("batch_number2", CDBField.FieldTypes.cftLong, vLastBatch.ToString, CDBField.FieldWhereOperators.fwoBetweenTo)
          End If
          Select Case JobDesc
            Case "DirectDebitClaimFile", "DirectDebitCreditFile"
              vWhereFields.Add("batch_type", CDBField.FieldTypes.cftCharacter, vBatchType)
            Case Else
              'do nothing
          End Select
        End If
        If pScheduling Then
          vUpdateFields(1).Value = pJobNumber.ToString
          mvEnv.Connection.StartTransaction()
          vWhereFields.Add("b.job_number", CDBField.FieldTypes.cftLong, "js.job_number")
          vRecordSet = New SQLStatement(mvEnv.Connection, "batch_number,b.job_number", "batches b, job_schedule js", vWhereFields).GetRecordSet
          While vRecordSet.Fetch() = True
            If vRecordSet.Fields(2).LongValue > 0 Then RaiseError(DataAccessErrors.daeBatchJobNumber, vRecordSet.Fields(1).Value, vRecordSet.Fields(2).Value)
          End While
          vRecordSet.CloseRecordSet()
          vWhereFields.Remove("b.job_number")
        Else
          vWhereFields.Add("job_number", CDBField.FieldTypes.cftLong, pJobNumber.ToString)
        End If
        mvEnv.Connection.UpdateRecords("batches", vUpdateFields, vWhereFields, False)
      End If
    End Sub
    Public Property SupressJobSchedule() As Boolean
      Get
        Return mvSupressJobSchedule
      End Get
      Set(ByVal value As Boolean)
        mvSupressJobSchedule = value
      End Set
    End Property
    Public ReadOnly Property NotifyStatus() As JobNotifyStatuses
      Get
        Select Case mvClassFields(JobScheduleFields.NotifyStatus).Value
          Case "E"
            NotifyStatus = JobNotifyStatuses.jnsStarted
          Case "C"
            NotifyStatus = JobNotifyStatuses.jnsCompleted
          Case "B"
            NotifyStatus = JobNotifyStatuses.jnsStartedAndCompleted
          Case Else
            NotifyStatus = JobNotifyStatuses.jnsNone
        End Select
      End Get
    End Property
    Public Property JobProcessor() As String
      Get
        Return mvClassFields(JobScheduleFields.JobProcessor).Value
      End Get
      Set(ByVal value As String)
        mvClassFields.Item(JobScheduleFields.JobProcessor).Value = value
      End Set
    End Property

    Public ReadOnly Property IsNETJob(ByVal pName As String) As Boolean
      Get
        Select Case pName
          'Add any new .NET Job(Task)
          Case "CheetahMailMetaData", "CheetahMailEventData", "CheetahMailTotals", "BulkMailerStatistics", "EMailProcessor", "CreateUnallocatedBoxes", "DistributionBoxReports", "SetShippingInformation", _
            "SetArrivalInformation"
            '.NET Job (Task)
            Return True
          Case "TestApp"
            '.NET Job TESTING
            Return True
          Case Else
            'VB6 Job (Task)
            Return True     'for now
        End Select
      End Get
    End Property
    Public ReadOnly Property JobName() As String
      Get
        Return mvJobName
      End Get
    End Property

    Public Sub InitJob(ByVal pJobName As String, ByVal pCommandLine As String)
      'Always schedule a job before running it asynchronously(from .NET)
      mvParameters = New CDBParameters
      mvParameters.Add("JobName", pJobName)
      mvParameters.Add("CommandLine", pCommandLine)
      mvParameters.Add("StartJob", "Y")
      ScheduleJob()
      mvParameters = GetCDBParameterList(GetParameterList(CommandLine).XMLParameterString())
      mvJobName = pJobName
    End Sub

    Public Function ProcessJob(ByVal pParams As CDBParameters) As CDBParameters
      'Currently used for Asynchronous processing only.
      'Always schedule a job before running it asynchronously(from .NET)
      'Smart Client calls VB6 code if we only want to schedule a job

      mvParameters = pParams
      mvJobName = mvParameters("JobName").Value

      Dim vScheduleOnly As Boolean = mvParameters.Exists("JobFrequency") AndAlso mvParameters.Exists("DueDate")
      Dim vResult As New CDBParameters
      Dim vDotNetJob As Boolean

      Dim vCommandLine As New StringBuilder
      If IsNETJob(mvJobName) Then
        vCommandLine.Append("CDBNTask.exe %1 %2 %3 %4 %5 ")
        vDotNetJob = True
      Else
        vCommandLine.Append("CDBTask.exe %1 %2 %3 %4 %5 ")
      End If
      vCommandLine.Append(mvJobName)
      vCommandLine.Append(" ")
      Dim vIgnore As Boolean
      For Each vParam As CDBParameter In mvParameters
        vIgnore = False
        If vParam.Name.StartsWith("ReportDestination") OrElse vParam.Name.StartsWith("MailingFilename") Then
          If Left$(vParam.Value, 2) = "\\" Then
            'UNC path so leave alone as the file will end up in the correct location without us doing anything
            vParam.Value = """" & vParam.Value & """"
          Else
            Select Case vParam.Value
              Case "Print"
                If vScheduleOnly Then RaiseError(DataAccessErrors.daeCannotSchedulePrint)
              Case "Preview"
                If vScheduleOnly Then RaiseError(DataAccessErrors.daeCannotSchedulePrintPreview)
              Case "None"
                'OK
              Case "PrintXML"
                If vScheduleOnly Then RaiseError(DataAccessErrors.daeCannotSchedulePrint)
              Case "PreviewXML"
                If vScheduleOnly Then RaiseError(DataAccessErrors.daeCannotSchedulePrintPreview)
              Case Else
                'Must be a local filename
                If vScheduleOnly Then RaiseError(DataAccessErrors.daeCannotScheduleNonUNCFilename)
            End Select
          End If
        ElseIf vParam.Name.StartsWith("InputFilename") OrElse vParam.Name.StartsWith("UpgradeDatabaseFile") _
          OrElse vParam.Name.StartsWith("UpdateViewFile") OrElse vParam.Name.StartsWith("UpdateMaintenanceFile") _
          OrElse vParam.Name.StartsWith("UpdateConfigFile") OrElse vParam.Name.StartsWith("UpdateJournalFile") _
          OrElse vParam.Name.StartsWith("UpdateReportFile") OrElse vParam.Name.StartsWith("UpdateSearchAreaFile") _
          OrElse vParam.Name.StartsWith("UpdateParametersFile") OrElse vParam.Name.StartsWith("UpgradeSQLFile") _
          OrElse vParam.Name.StartsWith("UpgradeLogFile") Then
          vParam.Value = """" & vParam.Value & """"
        ElseIf vParam.Name.StartsWith("Postcode") Then
          vParam.Value = """" & vParam.Value & """"
        ElseIf vParam.Name.StartsWith("CreatedOn") Then
          vParam.Value = """" & vParam.Value & """"
        ElseIf vParam.Name.StartsWith("Notes") Then  '      vNotes = pJob.Parameters.Item("Notes").Value 'Mandatory
          vParam.Value = """" & vParam.Value & """"
        Else
          Select Case vParam.Name
            Case "IgnoreUnknownParameters", "Culture", "Database", "UserLogname", "UserID", "Delay"
              vIgnore = True      'Ignore
            Case "DueDate", "JobFrequency", "UpdateJobParameterDates", "JobProcessor", "NotifyStatus", "JobName"
              vIgnore = True
          End Select
        End If
        If Not vIgnore Then
          vCommandLine.Append(vParam.Name)
          vCommandLine.Append("=")
          vCommandLine.Append(vParam.Value)
          vCommandLine.Append(" ")
        End If
      Next
      'Always schedule a job with Started status if its running now
      If Not vScheduleOnly Then mvParameters.Add("StartJob", "Y")
      mvParameters.Add("CommandLine", vCommandLine.ToString.TrimEnd)
      ScheduleJob()
      If vScheduleOnly Then
        If TaskJobType = TaskJobTypes.tjtBatchUpdate Then
          Dim vBatchNumbers() As String
          vBatchNumbers = mvParameters("BatchNumbers").Value.Split(","c)
          Dim vLastBatchNumber As String = ""
          For Each vBatchNumber As String In vBatchNumbers
            If vLastBatchNumber.Length > 0 Then
              mvParameters("BatchNumber").Value = vBatchNumber
              Dim vNewCommandLine As String = CommandLine.Replace("BatchNumber=" & vLastBatchNumber, "BatchNumber=" & vBatchNumber)
              ScheduleDuplicate(vNewCommandLine)
            End If
            vLastBatchNumber = vBatchNumber
          Next
        End If
        vResult.Add("ResultStatus", JobDesc & ": " & "Successfully Scheduled")
      End If
      Return vResult
    End Function

    Public Sub ScheduleDuplicate(pCommandLine As String)
      'Make a duplicate job schedule record with just the command line changed
      mvExisting = False
      mvClassFields.ClearSetValues()
      mvClassFields.Item(JobScheduleFields.CommandLine).Value = pCommandLine
      AddSchedule()
    End Sub

    Public Sub Execute()
      Dim vCommandLine As String = CommandLine
      vCommandLine = vCommandLine.Replace("%1", mvEnv.INISection)
      vCommandLine = vCommandLine.Replace("%2", mvEnv.ClientCode)
      'SDT 19/8/09 After extensive review the logname was changed back to logname to handle not requiring a guest record in the users table
      vCommandLine = vCommandLine.Replace("%3", mvEnv.User.Logname)   '  mvEnv.User.DatabaseLogname
      vCommandLine = vCommandLine.Replace("%4", mvEnv.User.Password)
      vCommandLine = vCommandLine.Replace("%5", JobNumber.ToString & " RunTask")

      Dim vPos As Integer = vCommandLine.IndexOf(" ")
      Dim vExeName As String = vCommandLine.Substring(0, vPos)
      If vExeName.ToUpper.StartsWith("CDBTASK") Then
        Dim vDir As String = GetSetting("CARE", "install", "directory", "")
        If vDir.Length = 0 Then
          Dim vReader As New INIReader
          vReader.Section = "Install"
          vDir = vReader.ReadString("directory")
          If vDir.Length > 0 Then
            If Not File.Exists(Path.Combine(vDir, vExeName)) Then vDir = ""
          End If
        End If
        If vDir.Length > 0 Then vExeName = Path.Combine(vDir, vExeName)
      End If
      vCommandLine = vCommandLine.Substring(vPos + 1)
      Try
        Dim vStartInfo As New ProcessStartInfo(vExeName, vCommandLine)
        Dim vProcess As Process = Process.Start(vStartInfo)
        vProcess.WaitForExit()
      Catch vEx As Exception
        Init(JobNumber)
        Complete("ERROR:" & Resources.ErrorText.String29363, True)
        RaiseError(DataAccessErrors.daeCannotFindCDBTask)
      End Try
    End Sub

    Public Sub Complete(ByVal pStatus As String)
      Complete(pStatus, False)
    End Sub

    Public Sub Complete(ByVal pStatus As String, ByVal pFailed As Boolean)

      'Check in case it never got started
      If mvExisting Then
        mvClassFields(JobScheduleFields.JobStatus).Value = JobStatusCode(JobStatuses.jbsCompleted)  'Complete
        mvClassFields(JobScheduleFields.EndDate).Value = TodaysDateAndTime()                          'Set End date
        mvClassFields(JobScheduleFields.ErrorStatus).Value = pStatus                                'Set Error Status
        If pFailed Then
          If mvClassFields.Item(JobScheduleFields.JobFailed).InDatabase Then
            mvClassFields(JobScheduleFields.JobFailed).Bool = True
          End If
        Else
          If mvClassFields.Item(JobScheduleFields.JobFailed).InDatabase Then
            mvClassFields(JobScheduleFields.JobFailed).Bool = False
          End If
        End If
        Save()
        If pFailed Then
          UpdateBatches(False, JobNumber) 'Update batch to remove job number
        End If
      End If
    End Sub

    Public Sub RequestAbort()
      If JobStatus <> JobStatuses.jbsCompleted Then
        mvClassFields(JobScheduleFields.JobStatus).Value = JobStatusCode(JobStatuses.jbsAbortRequested)
        mvClassFields(JobScheduleFields.EndDate).Value = TodaysDateAndTime()                          'Set End date
        mvClassFields(JobScheduleFields.ErrorStatus).Value = "Abort Job requested"                        'Set Error Status
        If mvClassFields.Item(JobScheduleFields.JobFailed).InDatabase Then
          mvClassFields(JobScheduleFields.JobFailed).Bool = True
        End If
        Save()
      End If
    End Sub

    Public Sub Abort(ByVal pStatus As String)
      If JobStatus = JobStatuses.jbsAbortRequested Then
        mvClassFields(JobScheduleFields.JobStatus).Value = JobStatusCode(JobStatuses.jbsAborted)
        mvClassFields(JobScheduleFields.EndDate).Value = TodaysDateAndTime()
        mvClassFields(JobScheduleFields.ErrorStatus).Value = pStatus
        If mvClassFields.Item(JobScheduleFields.JobFailed).InDatabase Then
          mvClassFields(JobScheduleFields.JobFailed).Bool = True
        End If
        Save()
      End If
    End Sub

    Public Function Start() As Boolean
      Dim vSuccess As Boolean
      If mvExisting Then
        vSuccess = True
        'Try to update job using the status and the job number. This will raise
        'an error if it is unable to update the record which would mean that the
        'job has already begun execution on another processor
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("job_number", CDBField.FieldTypes.cftLong, mvClassFields(JobScheduleFields.JobNumber).Value)
        vWhereFields.Add("job_status", mvClassFields(JobScheduleFields.JobStatus).Value)

        Dim vUpdateFields As New CDBFields
        vUpdateFields.Add("job_status", JobStatusCode(JobStatuses.jbsStarted))  'Started
        vUpdateFields.Add("run_date", CDBField.FieldTypes.cftTime, TodaysDateAndTime)
        If mvClassFields.Item(JobScheduleFields.JobFailed).InDatabase Then
          vUpdateFields.Add("job_failed", CDBField.FieldTypes.cftCharacter, "N")
        End If

        Try
          mvEnv.Connection.UpdateRecords(DatabaseTableName, vUpdateFields, vWhereFields)
          mvClassFields(JobScheduleFields.JobStatus).Value = JobStatusCode(JobStatuses.jbsStarted)  'Started
          mvClassFields(JobScheduleFields.RunDate).Value = TodaysDateAndTime()  'Set Run date
          mvLastEventTime = Now
          mvLastUpdateTime = Now
          mvStartTime = Now
        Catch vEx As Exception
          vSuccess = False
        End Try
      End If
      Return vSuccess
    End Function

    Public ReadOnly Property TaskDescription() As String
      Get
        ' Just add the Smart Client tasks as appropriate
        Select Case JobDesc
          Case "CheetahMailMetaData"
            Return "Cheetah Mail Metadata"
          Case "CheetahMailEventData"
            Return "Cheetah Mail Event Data"
          Case "CheetahMailTotals"
            Return "Cheetah Mail Totals"
          Case "BulkMailerStatistics"
            Return "Bulk Mailer Statistics"
          Case "EMailProcessor"
            Return "EMail Processor"
          Case "SetArrivalInformation"
            Return "Set Arrival Information"
          Case "MailingRun"
            Return "Mailing Run"
          Case "UpdatePrincipalUser"
            Return "Update Principal User"
          Case "UpdateFutureMembershipType"
            Return "Update Future Membership Type"
          Case "ProcessCertificateData"
            Return "Process Certificate Data"
          Case Else
            Return "Unknown Task"
        End Select
      End Get
    End Property

    Public Property TaskJobType() As TaskJobTypes
      Get
        If mvTaskJobType = TaskJobTypes.tjtNone Then
          If mvJobName.Length = 0 AndAlso mvClassFields(JobScheduleFields.CommandLine).Value.Length > 0 Then
            'Set up the job name 
            mvJobName = mvClassFields(JobScheduleFields.CommandLine).Value.Split(" "c)(6)
          End If
          mvTaskJobType = GetTaskJobType(mvJobName)
        End If
        Return mvTaskJobType
      End Get
      Set(ByVal Value As TaskJobTypes)
        mvTaskJobType = Value
      End Set
    End Property

    ''' <summary>
    ''' Did this job fail
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public ReadOnly Property Failed As Boolean
      Get
        Dim vResult As Boolean = False
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbJobFailureFlag) Then
          vResult = mvClassFields(JobScheduleFields.JobFailed).Bool
        End If
        Return vResult
      End Get
    End Property

    Public Sub SetRunningStatus()
      If mvExisting Then
        mvClassFields(JobScheduleFields.JobStatus).Value = JobStatusCode(JobStatuses.jbsRunning)
        mvStartTime = Now
        mvLastUpdateTime = Now
        If mvClassFields.Item(JobScheduleFields.JobFailed).InDatabase AndAlso mvClassFields.Item(JobScheduleFields.JobFailed).Value <> "Y" AndAlso mvClassFields.Item(JobScheduleFields.JobFailed).Value <> "N" Then
          mvClassFields.Item(JobScheduleFields.JobFailed).Value = "N"
        End If
        Save()
      End If
    End Sub

    Public Property ReportSelectionSection() As String
      Get
        Return mvReportSelectionSection
      End Get
      Set(ByVal value As String)
        mvReportSelectionSection = value
        RaiseEvent StatusChange(JobStatuses.jbsReportSelection)
        If DateDiff("n", mvLastUpdateTime, Now) > 1 Or DateDiff("n", mvStartTime, Now) > 5 Then     'Update record every minute
          UpdateStatus("Report '" & ReportName & "' Selecting Data For Section '" & mvReportSelectionSection & "'")
        End If
      End Set
    End Property

    Public Shared Function GetPageCode(ByVal pTaskJobType As TaskJobTypes) As String
      Select Case pTaskJobType
        Case TaskJobTypes.tjtStatementLoader
          Return "PASL"
        Case TaskJobTypes.tjtDirectDebitRun
          Return "PDDR"
        Case TaskJobTypes.tjtDDClaimFile
          Return "PDDF"
        Case TaskJobTypes.tjtMembershipSuspension
          Return "PMSU"
        Case TaskJobTypes.tjtAutoSOReconciliation
          Return "PASO"
        Case TaskJobTypes.tjtDDMandateFile
          Return "PDDM"
        Case TaskJobTypes.tjtDDCreditFile
          Return "PDDC"
        Case TaskJobTypes.tjtCCClaimFile
          Return "PCCF"
        Case TaskJobTypes.tjtCCClaimReport
          Return "PCCP"
        Case TaskJobTypes.tjtCardSalesFile
          Return "PCSF"
        Case TaskJobTypes.tjtCardSalesReport
          Return "PCSR"
        Case TaskJobTypes.tjtCreditCardRun
          Return "PCCR"
        Case TaskJobTypes.tjtThankYouLetters
          Return "PTYL"
        Case TaskJobTypes.tjtRenewalsAndReminders
          Return "PRAR"
        Case TaskJobTypes.tjtPayingInSlips
          Return "PPIS"
        Case TaskJobTypes.tjtCashBookPosting
          Return "PCBP"
        Case TaskJobTypes.tjtGiftAidClaim
          Return "PGAC"
        Case TaskJobTypes.tjtGenerateMarketingData
          Return "PMDG"
        Case TaskJobTypes.tjtGenerateAddressGeoRegions
          Return "PMAG"
        Case TaskJobTypes.tjtContactDeDuplication
          Return "PCDD"
        Case TaskJobTypes.tjtBulkMerge
          Return "PMRG"
        Case TaskJobTypes.tjtMailingRun
          Return "PMLG"
        Case TaskJobTypes.tjtFutureMembershipChanges
          Return "PFMC"
        Case TaskJobTypes.tjtCreateJournalFiles
          Return "PCJF"
        Case TaskJobTypes.tjtPickingList
          Return "PPLP"
        Case TaskJobTypes.tjtConfirmStockAllocation
          Return "PCSA"
        Case TaskJobTypes.tjtDespatchNotes
          Return "PDNT"
        Case TaskJobTypes.tjtInvoiceTransfer
          Return "PIVT"
        Case TaskJobTypes.tjtBatchPurge
          Return "PBPU"
        Case TaskJobTypes.tjtBackOrderPurge
          Return "PBOP"
        Case TaskJobTypes.tjtPickingAndDespatchPurge
          Return "PPDP"
        Case TaskJobTypes.tjtGiftAidPotentialClaim
          Return "PGAP"
        Case TaskJobTypes.tjtManualSOReconciliation
          Return "PMSO"
        Case TaskJobTypes.tjtAmendmentHistoryView
          Return "PAHR"
        Case TaskJobTypes.tjtGAYEPaymentLoader
          Return "PGYL"
        Case TaskJobTypes.tjtGAYEReconciliation
          Return "PGYR"
        Case TaskJobTypes.tjtBankDataLoad
          Return "PBDL"
        Case TaskJobTypes.tjtCAFProvisionalBatchClaim
          Return "PCPB"
        Case TaskJobTypes.tjtCAFCardSalesReport
          Return "PCCS"
        Case TaskJobTypes.tjtCAFExpectedPaymentsReport
          Return "PCEP"
        Case TaskJobTypes.tjtCAFPaymentLoader
          Return "PCPL"
        Case TaskJobTypes.tjtMailingDocumentProduction
          Return "PMDP"
        Case TaskJobTypes.tjtBankTransactionsReport
          Return "PBTR"
        Case TaskJobTypes.tjtPurchasedProductReport
          Return "PPPR"
        Case TaskJobTypes.tjtBranchDonationsReport
          Return "PBDR"
        Case TaskJobTypes.tjtJuniorMembershipAnalysisReport
          Return "PJMA"
        Case TaskJobTypes.tjtOutstandingBatchesReport
          Return "POBR"
        Case TaskJobTypes.tjtCAFPaymentReconciliation
          Return "PCPR"
        Case TaskJobTypes.tjtBranchIncomeReport
          Return "PBIR"
        Case TaskJobTypes.tjtConvertManualDirectDebits
          Return "PCMD"
        Case TaskJobTypes.tjtBACSRejections
          Return "PBRJ"
        Case TaskJobTypes.tjtBallotPaperProduction
          Return "PBPP"
        Case TaskJobTypes.tjtAssumedVotingRights
          Return "PAVR"
        Case TaskJobTypes.tjtPeriodStatsReport
          Return "PPSR"
        Case TaskJobTypes.tjtPriceChange
          Return "PPCU"
        Case TaskJobTypes.tjtSelectionTester
          Return "PSLT"
        Case TaskJobTypes.tjtPostPayments
          Return "PPAY"
        Case TaskJobTypes.tjtListAllContacts
          Return "PLAC"
        Case TaskJobTypes.tjtPurgePrizeDrawBatches
          Return "PPZD"
        Case TaskJobTypes.tjtPayrollPledgeCancellation
          Return "PPPC"
        Case TaskJobTypes.tjtStandingOrderCancellation
          Return "PSOC"
        Case TaskJobTypes.tjtDirectDebitMailing
          Return "PDMM"
        Case TaskJobTypes.tjtStandingOrderMailing
          Return "PSOM"
        Case TaskJobTypes.tjtSubscriptionMailing
          Return "PSUM"
        Case TaskJobTypes.tjtMemberMailing
          Return "PMEM"
        Case TaskJobTypes.tjtMembCardMailing
          Return "PMCM"
        Case TaskJobTypes.tjtPayerMailing
          Return "PPAM"
        Case TaskJobTypes.tjtSelectionManagerMailing
          Return "PSMM"
        Case TaskJobTypes.tjtCustomerTransfer
          Return "PCUT"
        Case TaskJobTypes.tjtStockExport
          Return "PSTE"
        Case TaskJobTypes.tjtEventTotalsUpdate
          Return "EVTU"
        Case TaskJobTypes.tjtGADConfirmation
          Return "PGDC"
        Case TaskJobTypes.tjtGASPotentialClaim
          Return "PGSP"
        Case TaskJobTypes.tjtGASTaxClaim
          Return "PGST"
        Case TaskJobTypes.tjtPOTransferSuppliers
          Return "POTS"
        Case TaskJobTypes.tjtUpdatePaymentSchedule
          Return "PUPS"
        Case TaskJobTypes.tjtPayrollPledgeMailing
          Return "PPPM"
        Case TaskJobTypes.tjtCreditCardAuthorisationReport
          Return "PCCA"
        Case TaskJobTypes.tjtBulkAddressMerge
          Return "PAMG"
        Case TaskJobTypes.tjtUpdatePaymentPlanProducts
          Return "PUPP"
        Case TaskJobTypes.tjtCheckPaymentPlans
          Return "PCPP"
        Case TaskJobTypes.tjtMemberFulfilment
          Return "PNMF"
        Case TaskJobTypes.tjtScheduledReport
          Return "PSRP"
        Case TaskJobTypes.tjtPostTaxPGReconciliation
          Return "PPGR"
        Case TaskJobTypes.tjtPISStatementLoader
          Return "PCBL"
        Case TaskJobTypes.tjtPISReconciliation
          Return "APSR"
        Case TaskJobTypes.tjtPublicCollectionsFulfilment
          Return "PACF"
        Case TaskJobTypes.tjtEventBookerMailing
          Return "PEBM"
        Case TaskJobTypes.tjtEventDelegateMailing
          Return "PEDM"
        Case TaskJobTypes.tjtEventPersonnelMailing
          Return "PEPM"
        Case TaskJobTypes.tjtEventSponsorMailing
          Return "PESM"
        Case TaskJobTypes.tjtDutchElectronicPaymentsLoader
          Return "PDPL"
        Case TaskJobTypes.tjtDutchElectronicPaymentsReconciliation
          Return "PDPP"
        Case TaskJobTypes.tjtBulkGiftAidUpdate
          Return "PGBU"
        Case TaskJobTypes.tjtIrishGiftAidMailing
          Return "PIGM"
        Case TaskJobTypes.tjtIrishGiftAidPotentialClaim
          Return "PIGP"
        Case TaskJobTypes.tjtIrishGiftAidTaxClaim
          Return "PIGT"
        Case TaskJobTypes.tjtBulkContactDeletion
          Return "PDAC"
        Case TaskJobTypes.tjtProcessAddressChanges
          Return "PACH"
        Case TaskJobTypes.tjtBulkOrganisationMerge
          Return "POMG"
        Case TaskJobTypes.tjtAllocateDonationToBox
          Return "PADB"
        Case TaskJobTypes.tjtPrintBoxLabels
          Return "PPBL"
        Case TaskJobTypes.tjtShipDistributionBoxes
          Return "PSBX"
        Case TaskJobTypes.tjtSetBoxesArrived
          Return "PSBA"
        Case TaskJobTypes.tjtChequeProduction
          Return "POCP"
        Case TaskJobTypes.tjtGenerateRollOfHonour
          Return "PGRH"
        Case TaskJobTypes.tjtCheetahMailMetaData
          Return "PCMM"
        Case TaskJobTypes.tjtCheetahMailEventData
          Return "PCME"
        Case TaskJobTypes.tjtCheetahMailTotals
          Return "PCMT"
        Case TaskJobTypes.tjtBulkMailerStatistics
          Return "PBLK"
        Case TaskJobTypes.tjtEMailProcessor
          Return ""
        Case TaskJobTypes.tjtDistributionBoxReports
          Return "PDBR"
        Case TaskJobTypes.tjtEventBlockBooking
          Return "EVBB"
        Case TaskJobTypes.tjtPurchaseOrderGeneration
          Return "POAG"
        Case TaskJobTypes.tjtPurchaseOrderPrint
          Return "POPR"
        Case TaskJobTypes.tjtIssueResources
          Return "EGIR"
        Case TaskJobTypes.tjtCancelEvent
          Return "PCBM"
        Case TaskJobTypes.tjtDatabaseUpgrade
          Return "DBUG"
        Case TaskJobTypes.tjtDataImport
          Return "PDIM"
        Case TaskJobTypes.tjtApplyCPDPoints
          Return "PACP"
        Case TaskJobTypes.tjtSelectMailing
          Return "PSMA"
        Case TaskJobTypes.tjtRegisterSurvey
          Return "RGSR"
        Case TaskJobTypes.tjtCreditStatementGeneration
          Return "PCSG"
        Case TaskJobTypes.tjtCancelProvisionalBookings
          Return "PCPE"
        Case TaskJobTypes.tjtPostcodeValidation
          Return "PCVA"
        Case TaskJobTypes.tjtProcessPurchaseOrderPayments
          Return "PPOP"
        Case TaskJobTypes.tjtUploadBACSMessagingData
          Return "CBMD"
        Case TaskJobTypes.tjtApplyPaymentPlanSurcharges
          Return "PAPS"
        Case TaskJobTypes.tjtExamAllocateCandidateNumbers
          Return "EXAC"
        Case TaskJobTypes.tjtExamAllocateMarkers
          Return "EXAM"
        Case TaskJobTypes.tjtExamApplyGrading
          Return "EXAG"
        Case TaskJobTypes.tjtExamGenerateExemptionInvoices
          Return "EXEI"
        Case TaskJobTypes.tjtExamBookerMailing
          Return "PXBM"
        Case TaskJobTypes.tjtExamCandidateMailing
          Return "PXCM"
        Case TaskJobTypes.tjtExamLoadCsvResults
          Return "EXLC"
        Case TaskJobTypes.tjtRecalculateLoanInterest
          Return "PRLI"
        Case TaskJobTypes.tjtUpdateLoanInterestRates
          Return "PULI"
        Case TaskJobTypes.tjtCheckNonCoreTables
          Return "PNCT"
        Case TaskJobTypes.tjtGenerateTableCreationFiles
          Return "GTCF"
        Case TaskJobTypes.tjtGetReportData
          Return "GRPD"
        Case TaskJobTypes.tjtGetConfigNameData
          Return "GCND"
        Case TaskJobTypes.tjtBulkUpdateActivity
          Return "BUAC"
        Case TaskJobTypes.tjtRegenerateMessageQueue
          Return "PRMQ"
        Case TaskJobTypes.tjtTransferPaymentPlanChanges
          Return "TPPC"
        Case TaskJobTypes.tjtMoveExternalDocuments
          Return "MDOC"
        Case TaskJobTypes.tjtUpdatePrincipalUser
          Return "PUPU"
        Case TaskJobTypes.tjtUpdateFutureMembershipType
          Return "UFMT"
        Case TaskJobTypes.tjtProcessCertificateData
          Return "EXCP"
        Case Else
          Return ""
      End Select
    End Function

    Public Function GetTaskJobType(ByVal pName As String) As TaskJobTypes
      'Task Names SHOULD NOT contain spaces...EVER
      Select Case pName
        Case "ExpirePaymentPlans"
          Return TaskJobTypes.tjtExpirePaymentPlans
        Case "MailsortUpdate"
          Return TaskJobTypes.tjtMailsortUpdate
        Case "PriceChange"
          Return TaskJobTypes.tjtPriceChange
        Case "RemoveArrears"
          Return TaskJobTypes.tjtRemoveArrears
        Case "DirectDebitRun"
          Return TaskJobTypes.tjtDirectDebitRun
        Case "DirectDebitClaimFile"
          Return TaskJobTypes.tjtDDClaimFile
        Case "MembershipSuspension"
          Return TaskJobTypes.tjtMembershipSuspension
        Case "AutoSOReconciliation"
          Return TaskJobTypes.tjtAutoSOReconciliation
        Case "StatementLoader"
          Return TaskJobTypes.tjtStatementLoader
        Case "DirectDebitMandateFile"
          Return TaskJobTypes.tjtDDMandateFile
        Case "DirectDebitCreditFile"
          Return TaskJobTypes.tjtDDCreditFile
        Case "CreditCardAuthorityClaim"
          Return TaskJobTypes.tjtCCClaimFile
        Case "CreditCardAuthorityReport"
          Return TaskJobTypes.tjtCCClaimReport
        Case "CardSalesFile"
          Return TaskJobTypes.tjtCardSalesFile
        Case "CardSalesReport"
          Return TaskJobTypes.tjtCardSalesReport
        Case "CreditCardRun"
          Return TaskJobTypes.tjtCreditCardRun
        Case "ThankYouLetterProduction"
          Return TaskJobTypes.tjtThankYouLetters
        Case "RenewalsAndReminders"
          Return TaskJobTypes.tjtRenewalsAndReminders
        Case "PayingInSlipProduction"
          Return TaskJobTypes.tjtPayingInSlips
        Case "CashBookPosting"
          Return TaskJobTypes.tjtCashBookPosting
        Case "BatchUpdate"
          Return TaskJobTypes.tjtBatchUpdate
        Case "MailingCount"
          Return TaskJobTypes.tjtMailingCount
        Case "MailingRun"
          Return TaskJobTypes.tjtMailingRun
        Case "GenerateMarketingData"
          Return TaskJobTypes.tjtGenerateMarketingData
        Case "GenerateAddressGeoRegions", "UpdateRegionalData"
          Return TaskJobTypes.tjtGenerateAddressGeoRegions
        Case "ContactDeDuplication"
          Return TaskJobTypes.tjtContactDeDuplication
        Case "BulkMerge"
          Return TaskJobTypes.tjtBulkMerge
        Case "FutureMembershipChanges"
          Return TaskJobTypes.tjtFutureMembershipChanges
        Case "CreateJournalFiles"
          Return TaskJobTypes.tjtCreateJournalFiles
        Case "PickingListProduction"
          Return TaskJobTypes.tjtPickingList
        Case "ConfirmStockAllocation"
          Return TaskJobTypes.tjtConfirmStockAllocation
        Case "BackOrderAllocation"
          Return TaskJobTypes.tjtBackOrderAllocation
        Case "DespatchNotes"
          Return TaskJobTypes.tjtDespatchNotes
        Case "InvoiceTransfer"
          Return TaskJobTypes.tjtInvoiceTransfer
        Case "BatchPurge"
          Return TaskJobTypes.tjtBatchPurge
        Case "BackOrderPurge"
          Return TaskJobTypes.tjtBackOrderPurge
        Case "PickingAndDespatchPurge"
          Return TaskJobTypes.tjtPickingAndDespatchPurge
        Case "GiftAidClaim"
          Return TaskJobTypes.tjtGiftAidClaim
        Case "GiftAidPotentialClaim"
          Return TaskJobTypes.tjtGiftAidPotentialClaim
        Case "DataImport"
          Return TaskJobTypes.tjtDataImport
        Case "ManualSOReconciliation"
          Return TaskJobTypes.tjtManualSOReconciliation
        Case "AmendmentHistoryView"
          Return TaskJobTypes.tjtAmendmentHistoryView
        Case "SetPostDatedContacts"
          Return TaskJobTypes.tjtSetPostDatedContacts
        Case "PayrollGivingPaymentLoader"
          Return TaskJobTypes.tjtGAYEPaymentLoader
        Case "PayrollGivingReconciliation"
          Return TaskJobTypes.tjtGAYEReconciliation
        Case "LoadBankData"
          Return TaskJobTypes.tjtBankDataLoad
        Case "CAFVoucherClaimReport"
          Return TaskJobTypes.tjtCAFProvisionalBatchClaim
        Case "CAFCardSalesReport"
          Return TaskJobTypes.tjtCAFCardSalesReport
        Case "CAFExpectedPaymentsReport"
          Return TaskJobTypes.tjtCAFExpectedPaymentsReport
        Case "CAFPaymentLoader"
          Return TaskJobTypes.tjtCAFPaymentLoader
        Case "MailingDocumentProduction"
          Return TaskJobTypes.tjtMailingDocumentProduction
        Case "BankTransactionsReport"
          Return TaskJobTypes.tjtBankTransactionsReport
        Case "PurchasedProductReport"
          Return TaskJobTypes.tjtPurchasedProductReport
        Case "BranchDonationsReport"
          Return TaskJobTypes.tjtBranchDonationsReport
        Case "JuniorMemberAnalysisReport"
          Return TaskJobTypes.tjtJuniorMembershipAnalysisReport
        Case "OutstandingBatchesReport"
          Return TaskJobTypes.tjtOutstandingBatchesReport
        Case "CAFPaymentReconciliation"
          Return TaskJobTypes.tjtCAFPaymentReconciliation
        Case "BranchIncomeReport"
          Return TaskJobTypes.tjtBranchIncomeReport
        Case "ConvertManualDirectDebits"
          Return TaskJobTypes.tjtConvertManualDirectDebits
        Case "BACSMessaging"
          Return TaskJobTypes.tjtBACSRejections
        Case "BallotPaperProduction"
          Return TaskJobTypes.tjtBallotPaperProduction
        Case "AssumedVotingRightsReport"
          Return TaskJobTypes.tjtAssumedVotingRights
        Case "GeneratePeriodStatistics"
          Return TaskJobTypes.tjtPeriodStatsGenerateData
        Case "PeriodStatisticsReport"
          Return TaskJobTypes.tjtPeriodStatsReport
        Case "SelectionTester"
          Return TaskJobTypes.tjtSelectionTester
        Case "UpdateActionStatus"
          Return TaskJobTypes.tjtUpdateActionStatus
        Case "TransferPayments"
          Return TaskJobTypes.tjtPostPayments
        Case "ListAllContacts"
          Return TaskJobTypes.tjtListAllContacts
        Case "PurgePrizeDrawBatches"
          Return TaskJobTypes.tjtPurgePrizeDrawBatches
        Case "GAYEPledgesBulkCancellation"
          Return TaskJobTypes.tjtPayrollPledgeCancellation
        Case "StandingOrderCancellation"
          Return TaskJobTypes.tjtStandingOrderCancellation
        Case "DirectDebitMailing"
          Return TaskJobTypes.tjtDirectDebitMailing
        Case "StandingOrderMailing"
          Return TaskJobTypes.tjtStandingOrderMailing
        Case "SubscriptionMailing"
          Return TaskJobTypes.tjtSubscriptionMailing
        Case "MemberMailing"
          Return TaskJobTypes.tjtMemberMailing
        Case "MembershipCardMailing"
          Return TaskJobTypes.tjtMembCardMailing
        Case "PayerMailing"
          Return TaskJobTypes.tjtPayerMailing
        Case "SelectionManagerMailing"
          Return TaskJobTypes.tjtSelectionManagerMailing
        Case "CustomerTransfer"
          Return TaskJobTypes.tjtCustomerTransfer
        Case "UpdateSearchNames"
          Return TaskJobTypes.tjtUpdateSearchNames
        Case "StockMovementExport"
          Return TaskJobTypes.tjtStockExport
        Case "EventTotalsUpdate"
          Return TaskJobTypes.tjtEventTotalsUpdate
        Case "GADConfirmation"
          Return TaskJobTypes.tjtGADConfirmation
        Case "GASponsorshipPotentialClaim"
          Return TaskJobTypes.tjtGASPotentialClaim
        Case "GASponsoredEventTaxClaim"
          Return TaskJobTypes.tjtGASTaxClaim
        Case "TransferSuppliers"
          Return TaskJobTypes.tjtPOTransferSuppliers
        Case "UpdatePaymentSchedule"
          Return TaskJobTypes.tjtUpdatePaymentSchedule
        Case "UpdateGovernmentRegions"
          Return TaskJobTypes.tjtUpdateGovernmentRegions
        Case "PayrollGivingPledgeMailing"
          Return TaskJobTypes.tjtPayrollPledgeMailing
        Case "CCAuthorisationReport"
          Return TaskJobTypes.tjtCreditCardAuthorisationReport
        Case "BulkAddressMerge"
          Return TaskJobTypes.tjtBulkAddressMerge
        Case "UpdatePaymentPlanProducts"
          Return TaskJobTypes.tjtUpdatePaymentPlanProducts
        Case "CheckPaymentPlans"
          Return TaskJobTypes.tjtCheckPaymentPlans
        Case "MemberFulfilment"
          Return TaskJobTypes.tjtMemberFulfilment
        Case "DormantContactDeletion"
          Return TaskJobTypes.tjtDormantContactDeletion
        Case "ScheduledReport"
          Return TaskJobTypes.tjtScheduledReport
        Case "PostTaxPGReconciliation"
          Return TaskJobTypes.tjtPostTaxPGReconciliation
        Case "PISStatementLoader"
          Return TaskJobTypes.tjtPISStatementLoader
        Case "PISReconciliation"
          Return TaskJobTypes.tjtPISReconciliation
        Case "CollectionsFulfilment"
          Return TaskJobTypes.tjtPublicCollectionsFulfilment
        Case "EventBookerMailing"
          Return TaskJobTypes.tjtEventBookerMailing
        Case "EventDelegateMailing"
          Return TaskJobTypes.tjtEventDelegateMailing
        Case "EventPersonnelMailing"
          Return TaskJobTypes.tjtEventPersonnelMailing
        Case "EventSponsorMailing"
          Return TaskJobTypes.tjtEventSponsorMailing
        Case "DutchPaymentsLoader"
          Return TaskJobTypes.tjtDutchElectronicPaymentsLoader
        Case "DutchPaymentsReconciliation"
          Return TaskJobTypes.tjtDutchElectronicPaymentsReconciliation
        Case "BulkGiftAidUpdate"
          Return TaskJobTypes.tjtBulkGiftAidUpdate
        Case "IrishGiftAidMailing"
          Return TaskJobTypes.tjtIrishGiftAidMailing
        Case "IrishGiftAidPotentialClaim"
          Return TaskJobTypes.tjtIrishGiftAidPotentialClaim
        Case "IrishGiftAidTaxClaim"
          Return TaskJobTypes.tjtIrishGiftAidTaxClaim
        Case "BulkContactDeletion"
          Return TaskJobTypes.tjtBulkContactDeletion
        Case "ProcessAddressChanges"
          Return TaskJobTypes.tjtProcessAddressChanges
        Case "BulkOrganisationMerge"
          Return TaskJobTypes.tjtBulkOrganisationMerge
        Case "AllocateDonations"
          Return TaskJobTypes.tjtAllocateDonationToBox
        Case "CreateUnallocatedBoxes"
          Return TaskJobTypes.tjtPrintBoxLabels
        Case "SetShippingInformation"
          Return TaskJobTypes.tjtShipDistributionBoxes
        Case "SetArrivalInformation"
          Return TaskJobTypes.tjtSetBoxesArrived
        Case "ChequeProduction"
          Return TaskJobTypes.tjtChequeProduction
        Case "GenerateRollOfHonour"
          Return TaskJobTypes.tjtGenerateRollOfHonour
        Case "CheetahMailMetaData"
          Return TaskJobTypes.tjtCheetahMailMetaData
        Case "CheetahMailEventData"
          Return TaskJobTypes.tjtCheetahMailEventData
        Case "CheetahMailTotals"
          Return TaskJobTypes.tjtCheetahMailTotals
        Case "BulkMailerStatistics"
          Return TaskJobTypes.tjtBulkMailerStatistics
        Case "EmailProcessor"
          Return TaskJobTypes.tjtEMailProcessor
        Case "DistributionBoxReports"
          Return TaskJobTypes.tjtDistributionBoxReports
        Case "EventBlockBooking"
          Return TaskJobTypes.tjtEventBlockBooking
        Case "AutoGeneratePurchaseOrder"
          Return TaskJobTypes.tjtPurchaseOrderGeneration
        Case "PrintPurchaseOrder"
          Return TaskJobTypes.tjtPurchaseOrderPrint
        Case "IssueResources"
          Return TaskJobTypes.tjtIssueResources
        Case "CancellationBlockMove"
          Return TaskJobTypes.tjtCancelEvent
        Case "DatabaseUpgrade"
          Return TaskJobTypes.tjtDatabaseUpgrade
        Case "ApplyPoints"
          Return TaskJobTypes.tjtApplyCPDPoints
        Case "SelectMailing"
          Return TaskJobTypes.tjtSelectMailing
        Case "RegisterSurvey"
          Return TaskJobTypes.tjtRegisterSurvey
        Case "CreditStatementGeneration"
          Return TaskJobTypes.tjtCreditStatementGeneration
        Case "CancelProvisionalBookings"
          Return TaskJobTypes.tjtCancelProvisionalBookings
        Case "PostcodeValidation"
          Return TaskJobTypes.tjtPostcodeValidation
        Case "ProcessPurchaseOrderPayments"
          Return TaskJobTypes.tjtProcessPurchaseOrderPayments
        Case "UploadBACSMessagingData"
          Return TaskJobTypes.tjtUploadBACSMessagingData
        Case "ApplyPaymentPlanSurcharges"
          Return TaskJobTypes.tjtApplyPaymentPlanSurcharges
        Case "ReCalculateLoanInterest"
          Return TaskJobTypes.tjtRecalculateLoanInterest
        Case "ExamAllocateCandidateNumbers"
          Return TaskJobTypes.tjtExamAllocateCandidateNumbers
        Case "ExamAllocateMarkers"
          Return TaskJobTypes.tjtExamAllocateMarkers
        Case "ExamApplyGrading"
          Return TaskJobTypes.tjtExamApplyGrading
        Case "ExamGenerateExemptionInvoices"
          Return TaskJobTypes.tjtExamGenerateExemptionInvoices
        Case "ExamLoadCsvResults"
          Return TaskJobTypes.tjtExamLoadCsvResults
        Case "DataUpdates"
          Return TaskJobTypes.tjtDataUpdates
        Case "ExamBookerMailing"
          Return TaskJobTypes.tjtExamBookerMailing
        Case "ExamCandidateMailing"
          Return TaskJobTypes.tjtExamCandidateMailing
        Case "UpdateLoanInterestRates"
          Return TaskJobTypes.tjtUpdateLoanInterestRates
        Case "CheckNonCoreTables"
          Return TaskJobTypes.tjtCheckNonCoreTables
        Case "GenerateTableCreationFiles"
          Return TaskJobTypes.tjtGenerateTableCreationFiles
        Case "GetReportData"
          Return TaskJobTypes.tjtGetReportData
        Case "GetConfigNameData"
          Return TaskJobTypes.tjtGetConfigNameData
        Case "BulkUpdateActivity"
          Return TaskJobTypes.tjtBulkUpdateActivity
        Case "RegenerateMessageQueue"
          Return TaskJobTypes.tjtRegenerateMessageQueue
        Case "TransferPaymentPlanChanges"
          Return TaskJobTypes.tjtTransferPaymentPlanChanges
        Case "CertificateReprints"
          Return TaskJobTypes.tjtExamCertificateReprints
        Case "UpdatePrincipalUser"
          Return TaskJobTypes.tjtUpdatePrincipalUser
        Case "UpdateFutureMembershipType"
          Return TaskJobTypes.tjtUpdateFutureMembershipType
        Case "PurgeStickyNotes"
          Return TaskJobTypes.tjtPurgeStickyNotes
        Case "ProcessCertificateData"
          Return TaskJobTypes.tjtProcessCertificateData
        Case Else
          Return TaskJobTypes.tjtNone
      End Select
    End Function

    Public ReadOnly Property OutputFiles() As List(Of JobOutputFile)
      Get
        If mvOutputFiles Is Nothing Then mvOutputFiles = New List(Of JobOutputFile)
        Return mvOutputFiles
      End Get
    End Property

#End Region

#Region "IEquatable Interface"

    Public Overloads Function Equals(ByVal pOther As JobSchedule) As Boolean _
                       Implements IEquatable(Of CARE.Access.JobSchedule).Equals
      If JobNumber = pOther.JobNumber Then
        Return True
      Else
        Return False
      End If
    End Function

#End Region

  End Class

#Region "JobOutputFile Class"

  Public Class JobOutputFile

    Public Enum JobOutputFileTypes
      None
      Print
      Preview
      Save
    End Enum

    Public ParameterName As String
    Public ServerFilename As String
    Public ClientFilename As String
    Public OutputType As JobOutputFileTypes
    Public OutputFileInfo As FileInfo

    Public Sub New(ByVal pOutputType As JobOutputFileTypes, ByVal pParameterName As String, ByVal pServerFileName As String, ByVal pClientFileName As String)
      OutputType = pOutputType
      ParameterName = pParameterName
      ServerFilename = pServerFileName
      ClientFilename = pClientFileName
    End Sub

  End Class

#End Region

End Namespace
