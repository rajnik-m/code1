Imports System.Linq

Namespace Access
  Public Class CDBControl
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Protected Enum CDBControlFields
      AllFields = 0
      FpApplication
      FpPageType
      SequenceNumber
      ControlType
      TableName
      AttributeName
      ControlTop
      ControlLeft
      ControlWidth
      ControlHeight
      ControlCaption
      CaptionWidth
      HelpText
      Visible
      ResourceId
      ContactGroup
      ParameterName
      MandatoryItem
      ReadonlyItem
      DefaultValue

      AttributeNameDesc
      Type
      EntryLength
      ToCase
      NullsInvalid
      MinimumValue
      MaximumValue
      DomainValues
      Pattern
      ValidationTable
      ValidationAttribute
      RestrictionAttribute
      Maintenance
      PrimaryKey
      AttributeNotes
    End Enum
    Private mvOldSequenceNumber As Integer = 0
    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("fp_application")
        .Add("fp_page_type")
        .Add("sequence_number", CDBField.FieldTypes.cftLong)
        .Add("control_type")
        .Add("table_name")
        .Add("attribute_name")
        .Add("control_top", CDBField.FieldTypes.cftLong)
        .Add("control_left", CDBField.FieldTypes.cftLong)
        .Add("control_width", CDBField.FieldTypes.cftLong)
        .Add("control_height", CDBField.FieldTypes.cftLong)
        .Add("control_caption")
        .Add("caption_width", CDBField.FieldTypes.cftInteger)
        .Add("help_text")
        .Add("visible")
        .Add("resource_id", CDBField.FieldTypes.cftLong)
        .Add("contact_group")
        .Add("parameter_name")
        .Add("mandatory_item")
        .Add("readonly_item")
        .Add("default_value", CDBField.FieldTypes.cftCharacter)

        .Add("attribute_name_desc")
        .Add("type")
        .Add("entry_length", CDBField.FieldTypes.cftInteger)
        .Add("case")
        .Add("nulls_invalid")
        .Add("minimum_value", CDBField.FieldTypes.cftNumeric)
        .Add("maximum_value", CDBField.FieldTypes.cftNumeric)
        .Add("domain_values", CDBField.FieldTypes.cftMemo)
        .Add("pattern")
        .Add("validation_table")
        .Add("validation_attribute")
        .Add("restriction_attribute")
        .Add("maintenance")
        .Add("primary_key")
        .Add("attribute_notes", CDBField.FieldTypes.cftMemo)

        .Item(CDBControlFields.MandatoryItem).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataWebPageSuppressions)
        .Item(CDBControlFields.ReadonlyItem).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataControlReadonlyAndPanels)
        .Item(CDBControlFields.DefaultValue).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataDefaultValue)
        .Item(CDBControlFields.FpApplication).PrimaryKey = True
        .Item(CDBControlFields.FpPageType).PrimaryKey = True
        .Item(CDBControlFields.SequenceNumber).PrimaryKey = True
        .Item(CDBControlFields.ControlType).PrimaryKey = True
        .Item(CDBControlFields.ControlTop).PrimaryKey = True
        .Item(CDBControlFields.ControlLeft).PrimaryKey = True

        .Item(CDBControlFields.TableName).PrefixRequired = True
        .Item(CDBControlFields.AttributeName).PrefixRequired = True
        .Item(CDBControlFields.SequenceNumber).PrefixRequired = True

        .Item(CDBControlFields.ToCase).SpecialColumn = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return False
      End Get
    End Property

    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "fc"
      End Get
    End Property

    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "fp_controls"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------

    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------

    Public ReadOnly Property FpApplication() As String
      Get
        Return mvClassFields(CDBControlFields.FpApplication).Value
      End Get
    End Property

    Public ReadOnly Property FpPageType() As String
      Get
        Return mvClassFields(CDBControlFields.FpPageType).Value
      End Get
    End Property

    Public Property SequenceNumber() As Integer
      Get
        Return mvClassFields(CDBControlFields.SequenceNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(CDBControlFields.SequenceNumber).IntegerValue = value
      End Set
    End Property

    Public Property ControlType() As String
      Get
        Return mvClassFields(CDBControlFields.ControlType).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(CDBControlFields.ControlType).Value = value
      End Set
    End Property

    Public ReadOnly Property TableName() As String
      Get
        Return mvClassFields(CDBControlFields.TableName).Value
      End Get
    End Property

    Public ReadOnly Property AttributeName() As String
      Get
        Return mvClassFields(CDBControlFields.AttributeName).Value
      End Get
    End Property

    Public Property ControlTop() As Integer
      Get
        Return mvClassFields(CDBControlFields.ControlTop).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(CDBControlFields.ControlTop).IntegerValue = value
      End Set
    End Property

    Public Property ControlLeft() As Integer
      Get
        Return mvClassFields(CDBControlFields.ControlLeft).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(CDBControlFields.ControlLeft).IntegerValue = value
      End Set
    End Property

    Public ReadOnly Property ControlWidth() As Integer
      Get
        Return mvClassFields(CDBControlFields.ControlWidth).IntegerValue
      End Get
    End Property

    Public ReadOnly Property ControlHeight() As Integer
      Get
        Return mvClassFields(CDBControlFields.ControlHeight).IntegerValue
      End Get
    End Property

    Public Property ControlCaption() As String
      Get
        Return mvClassFields(CDBControlFields.ControlCaption).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(CDBControlFields.ControlCaption).Value = value
      End Set
    End Property

    Public Property CaptionWidth() As Integer
      Get
        Return mvClassFields(CDBControlFields.CaptionWidth).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(CDBControlFields.CaptionWidth).IntegerValue = value
      End Set
    End Property

    Public Property HelpText() As String
      Get
        Return mvClassFields(CDBControlFields.HelpText).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(CDBControlFields.HelpText).Value = value
      End Set
    End Property

    Public Property Visible() As Boolean
      Get
        Return mvClassFields(CDBControlFields.Visible).Bool
      End Get
      Set(ByVal value As Boolean)
        mvClassFields(CDBControlFields.Visible).Bool = value
      End Set
    End Property

    Public ReadOnly Property VisibleChanged() As Boolean
      Get
        Return mvClassFields(CDBControlFields.Visible).ValueChanged
      End Get
    End Property

    Public ReadOnly Property ResourceId() As Integer
      Get
        Return mvClassFields(CDBControlFields.ResourceId).IntegerValue
      End Get
    End Property

    Public ReadOnly Property ContactGroup() As String
      Get
        Return mvClassFields(CDBControlFields.ContactGroup).Value
      End Get
    End Property

    Public Property ParameterName() As String
      Get
        Return mvClassFields(CDBControlFields.ParameterName).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(CDBControlFields.ParameterName).Value = value
      End Set
    End Property

    Public ReadOnly Property AttributeNameDesc() As String
      Get
        Return mvClassFields(CDBControlFields.AttributeNameDesc).Value
      End Get
    End Property

    Public Property Type() As CDBField.FieldTypes
      Get
        Return CDBField.GetFieldType(mvClassFields(CDBControlFields.Type).Value)
      End Get
      Set(ByVal value As CDBField.FieldTypes)
        mvClassFields(CDBControlFields.Type).Value = CDBField.GetFieldTypeCode(value)
      End Set
    End Property

    Public Property EntryLength() As Integer
      Get
        Return mvClassFields(CDBControlFields.EntryLength).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(CDBControlFields.EntryLength).IntegerValue = value
      End Set
    End Property

    Public Property ToCase() As String
      Get
        Return mvClassFields(CDBControlFields.ToCase).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(CDBControlFields.ToCase).Value = value
      End Set
    End Property

    Public Property NullsInvalid() As Boolean
      Get
        Return mvClassFields(CDBControlFields.NullsInvalid).Bool
      End Get
      Set(ByVal value As Boolean)
        mvClassFields(CDBControlFields.NullsInvalid).Bool = value
      End Set
    End Property

    Public ReadOnly Property MinimumValue() As String
      Get
        Return mvClassFields(CDBControlFields.MinimumValue).Value
      End Get
    End Property

    Public ReadOnly Property MaximumValue() As String
      Get
        Return mvClassFields(CDBControlFields.MaximumValue).Value
      End Get
    End Property

    Public ReadOnly Property DomainValues() As String
      Get
        Return mvClassFields(CDBControlFields.DomainValues).Value
      End Get
    End Property

    Public Property Pattern() As String
      Get
        Return mvClassFields(CDBControlFields.Pattern).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(CDBControlFields.Pattern).Value = value
      End Set
    End Property

    Public ReadOnly Property ValidationTable() As String
      Get
        Return mvClassFields(CDBControlFields.ValidationTable).Value
      End Get
    End Property

    Public ReadOnly Property ValidationAttribute() As String
      Get
        Return mvClassFields(CDBControlFields.ValidationAttribute).Value
      End Get
    End Property

    Public ReadOnly Property RestrictionAttribute() As String
      Get
        Return mvClassFields(CDBControlFields.RestrictionAttribute).Value
      End Get
    End Property

    Public ReadOnly Property Maintenance() As String
      Get
        Return mvClassFields(CDBControlFields.Maintenance).Value
      End Get
    End Property

    Public Property PrimaryKey() As String
      Get
        Return mvClassFields(CDBControlFields.PrimaryKey).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(CDBControlFields.PrimaryKey).Value = value
      End Set
    End Property

    Public Property ReadOnlyItem() As Boolean
      Get
        Return mvClassFields(CDBControlFields.ReadonlyItem).Bool
      End Get
      Set(ByVal value As Boolean)
        mvClassFields(CDBControlFields.ReadonlyItem).Bool = value
      End Set
    End Property

    Public ReadOnly Property AttributeNotes() As String
      Get
        Return mvClassFields(CDBControlFields.AttributeNotes).Value
      End Get
    End Property

    Public ReadOnly Property OldSequenceNumber() As Integer
      Get
        Return mvOldSequenceNumber
      End Get
    End Property

#End Region

#Region "Non-AutoGenerated Code"

    Private Const CODE_WIDTH As Integer = 900            'Width of code box
    Private Const COMBO_OFFSET As Integer = 50           'X Gap between code box and combo box
    Private Const COMBO_WIDTH As Integer = 3900 '5200          '5300 3585 'Width of combo box
    Private Const ITEM_HEIGHT As Integer = 420           'Height of each field (min for two line labels)
    Private Const CAPTION_WIDTH As Integer = 1700
    Private Const DESC_WIDTH As Integer = CODE_WIDTH + COMBO_OFFSET + COMBO_WIDTH    'Width of contact or Org description
    Private mvNextToPreviousItem As Boolean


    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
    End Sub

    Public Overrides Function GetRecordSetFields() As String
      Return MyBase.GetRecordSetFields().Replace(mvEnv.Connection.DBSpecialCol(TableAlias, "case"), mvEnv.Connection.DBSpecialCol("ma", "case"))
    End Function

    Public Function GetFPRecordsetFields() As String

      Dim vExcludedIndexes As New List(Of CDBControlFields) From
      {CDBControlFields.AttributeNameDesc, CDBControlFields.Type, CDBControlFields.EntryLength, CDBControlFields.NullsInvalid,
      CDBControlFields.MinimumValue, CDBControlFields.MaximumValue, CDBControlFields.DomainValues, CDBControlFields.Pattern,
      CDBControlFields.ValidationTable, CDBControlFields.ValidationAttribute, CDBControlFields.RestrictionAttribute,
      CDBControlFields.Maintenance, CDBControlFields.PrimaryKey, CDBControlFields.AttributeNotes, CDBControlFields.ToCase}
      Dim vNotFPFields As New List(Of ClassField)
      vExcludedIndexes.ForEach(Sub(vIdx) vNotFPFields.Add(mvClassFields(vIdx)))

      Return Me.GetRecordSetFieldsExclude(vNotFPFields)
    End Function

    Public Function GetControlFields() As String
      MyBase.Init()
      Dim vFieldNames As String = MyBase.GetRecordSetFields
      Dim vPos As Integer = vFieldNames.IndexOf(mvClassFields(CDBControlFields.AttributeNameDesc).Name)
      Return vFieldNames.Substring(0, vPos - 1)
    End Function

    Public Overrides Sub InitFromRecordSet(ByVal pRecordSet As CDBRecordSet)
      MyBase.InitFromRecordSet(pRecordSet)
      mvClassFields(CDBControlFields.NullsInvalid).SetValue = BooleanString(MustFieldBeMandatory)
      If mvClassFields(CDBControlFields.MandatoryItem).Value = "" Then
        mvClassFields(CDBControlFields.MandatoryItem).SetValue = mvClassFields(CDBControlFields.NullsInvalid).Value
      End If
      If mvClassFields(CDBControlFields.ReadonlyItem).Value = "" Then
        mvClassFields(CDBControlFields.ReadonlyItem).SetValue = "N"
      End If
      If mvClassFields(CDBControlFields.DefaultValue).Value = "" Then
        mvClassFields(CDBControlFields.DefaultValue).SetValue = String.Empty
      End If
      If ResourceId > 0 Then
        If ResourceId = mvEnv.BranchResourceID Then
          mvClassFields.Item(CDBControlFields.ControlCaption).Value = mvEnv.GetBranchText(DataSelectionText.String14600)
        Else
          'TODO mvClassFields.Item(CDBControlFields.ControlCaption).Value = gvSystem.LoadString(ResourceId)
        End If
      End If
      Select Case AttributeName
        Case "account_number"
          Select Case FpPageType
            Case "PCDI"       'DirectDebits
              mvClassFields(CDBControlFields.EntryLength).SetValue = mvEnv.BankAccountEntryLength(True).ToString
            Case "PCSO"       'Standing Order
              mvClassFields(CDBControlFields.EntryLength).SetValue = mvEnv.BankAccountEntryLength(False).ToString
          End Select
        Case "action_change_reason"
          If String.Equals(FpPageType, "MFAS", StringComparison.CurrentCultureIgnoreCase) Then
            If mvEnv.Connection.GetCount("action_change_reasons", Nothing) > 0 Then
              mvClassFields.Item(CDBControlFields.MandatoryItem).SetValue = BooleanString(True)
              mvClassFields.Item(CDBControlFields.NullsInvalid).SetValue = BooleanString(True)
              mvClassFields.Item(CDBControlFields.Visible).SetValue = BooleanString(True)
            Else
              mvClassFields.Item(CDBControlFields.MandatoryItem).SetValue = BooleanString(False)
            End If
          End If
        Case "address"
          If TableName = "addresses" AndAlso EntryLength > 0 AndAlso ControlType = "txt" Then
            'Oracle has this as a 200-char field rather than a text field
            mvClassFields(CDBControlFields.EntryLength).SetValue = "0"
            mvClassFields(CDBControlFields.Type).SetValue = "M"
          End If
        Case "amended_by", "amended_on"
          If String.Equals(FpPageType, "WMNT", StringComparison.CurrentCultureIgnoreCase) Then
            mvClassFields.Item(CDBControlFields.MandatoryItem).SetValue = BooleanString(False)    'Display fields so make them non-mandatory
          End If
        Case "exam_centre_code"
          If String.Equals(FpPageType, "EXA", System.StringComparison.CurrentCultureIgnoreCase) Then
            'Trader has been incorrectly set-up to use a mandatory attribute here when it should have been non-mandatory by default
            'So if there are no customisations it should be non-mandatory
            If pRecordSet.Fields("mandatory_item").Value.Length = 0 Then
              mvClassFields(CDBControlFields.NullsInvalid).SetValue = BooleanString(False)
              mvClassFields.Item(CDBControlFields.MandatoryItem).SetValue = BooleanString(False)
            End If
          End If
        Case "government_region"
          Select Case FpPageType
            Case "PLCO", "PLCU", "PLOR", "PLOU"
              'ContactFinder, ContactFinder-Uniserve, OrganisationFinder, OrganisationFinder-Uniserve
              mvClassFields.Item(CDBControlFields.Visible).SetValue = BooleanString(mvEnv.GetConfigOption("cd_use_government_regions", False))
          End Select
        Case "cpd_points", "cpd_points_2"
          If Type = CDBField.FieldTypes.cftNumeric AndAlso mvEnv.GetConfigOption("cpd_points_allow_numeric") = False Then
            'Change both Value and SetValue as we do not want to update this in database
            mvClassFields.Item(CDBControlFields.Type).Value = "I"
            mvClassFields.Item(CDBControlFields.Type).SetValue = "I"
          End If
        Case "none"
          If String.Equals(FpPageType, "MCCY", StringComparison.CurrentCultureIgnoreCase) AndAlso mvClassFields.Item(CDBControlFields.FpApplication).Value.Length = 0 _
          AndAlso mvClassFields.Item(CDBControlFields.SequenceNumber).IntegerValue = 1 _
          AndAlso mvClassFields.Item(CDBControlFields.ControlType).Value.Equals("hdr", StringComparison.CurrentCultureIgnoreCase) Then
            'CPD Cycle Maintenance - if we have the default controls set the header text
            mvClassFields.Item(CDBControlFields.ControlCaption).Value = ProjectText.CPDCycleMaintenance
          End If
        Case "workstream_desc"
          If String.Equals(FpPageType, "WMNT", StringComparison.CurrentCultureIgnoreCase) Then
            mvClassFields.Item(CDBControlFields.Type).SetValue = "M"    'Make it multi-line
          End If
        Case "workstream_id"
          If String.Equals(FpPageType, "WMNT", StringComparison.CurrentCultureIgnoreCase) Then
            mvClassFields.Item(CDBControlFields.MandatoryItem).SetValue = BooleanString(False)  'Display field so make it non-mandatory
          End If
      End Select

      Select Case ParameterName
        Case "EarliestScheduleDateDisplay", "LatestScheduleDateDisplay"
          If String.Equals(FpPageType, "WMNT", StringComparison.CurrentCultureIgnoreCase) Then
            mvClassFields.Item(CDBControlFields.MandatoryItem).SetValue = BooleanString(False)  'Display fields so make it non-mandatory
          End If
      End Select
    End Sub

    Private Function MustFieldBeMandatory() As Boolean
      Dim vResult As Boolean = NullsInvalid
      If FpPageType.Equals("MFCE", StringComparison.InvariantCultureIgnoreCase) Then
        If (Me.TableName.Equals("communications", StringComparison.InvariantCultureIgnoreCase) AndAlso
            AttributeName.Equals("number", StringComparison.InvariantCultureIgnoreCase)) OrElse
           (Me.TableName.Equals("organisations", StringComparison.InvariantCultureIgnoreCase) AndAlso
            AttributeName.Equals("name", StringComparison.InvariantCultureIgnoreCase)) OrElse
           (Me.TableName.Equals("principal_users", StringComparison.InvariantCultureIgnoreCase) AndAlso
            AttributeName.Equals("principal_user", StringComparison.InvariantCultureIgnoreCase)) Then
          mvClassFields(CDBControlFields.NullsInvalid).SetValue = BooleanString(False)
          vResult = False
        End If
      End If
      Return vResult
    End Function

    Public Sub InitFromConfigData(ByVal pEnv As CDBEnvironment, ByVal pConfigName As String)
      Dim vRS As CDBRecordSet
      mvEnv = pEnv
      InitClassFields()
      vRS = mvEnv.Connection.GetRecordSet("SELECT * FROM config_names WHERE config_name = '" & pConfigName & "'")
      If vRS.Fetch() Then
        With mvClassFields
          .Item(CDBControlFields.TableName).Value = "config"
          .Item(CDBControlFields.AttributeName).Value = "config_value"
          .Item(CDBControlFields.MandatoryItem).Bool = True
          .Item(CDBControlFields.EntryLength).Value = vRS.Fields.Item("entry_length").Value
          .Item(CDBControlFields.MinimumValue).Value = vRS.Fields.Item("minimum_value").Value
          .Item(CDBControlFields.MaximumValue).Value = vRS.Fields.Item("maximum_value").Value
          .Item(CDBControlFields.DomainValues).Value = vRS.Fields.Item("domain_values").Value
          .Item(CDBControlFields.Type).Value = vRS.Fields.Item("type").Value
          '.Item(CDBControlFields.Case).Value = vRS.Fields.Item("case").Value
          .Item(CDBControlFields.Pattern).Value = vRS.Fields.Item("pattern").Value
          .Item(CDBControlFields.ValidationTable).Value = vRS.Fields.Item("validation_table").Value
          .Item(CDBControlFields.ValidationAttribute).Value = vRS.Fields.Item("validation_attribute").Value
        End With
      Else
        RaiseError(DataAccessErrors.daeMissingMaintenanceData, "config_names", pConfigName)
      End If
      vRS.CloseRecordSet()
    End Sub

    Public Overloads Sub InitFromMaintenanceData(ByVal pEnv As CDBEnvironment, ByVal pTableName As String, ByVal pFieldName As String, ByVal pFieldDesc As String, ByVal pFieldType As String, Optional ByVal pForceViewTest As Boolean = False)
      mvEnv = pEnv
      InitClassFields()
      Dim vTables As String = Nothing
      If pTableName.ToLower.StartsWith("ext_") OrElse pTableName.ToLower.StartsWith(pEnv.ClientCode.ToLower & "_") OrElse pTableName.ToUpper.StartsWith("V") OrElse pForceViewTest Then
        Dim vView As New ViewName
        vView.Init(mvEnv, pTableName)
        If vView.Existing Then
          Dim vParams As New CDBParameters
          vParams.InitFromUniqueList((vView.TableNames))
          vTables = vParams.InList
        End If
        pForceViewTest = True  'Stop Recursion
      End If
      If String.IsNullOrEmpty(vTables) Then vTables = "'" & pTableName & "'"
      Dim vFieldName As String = pFieldName
      Select Case vFieldName
        'commented this bit out as is causes the address number to become mandatory
        'in tables where it is not. eg. contact_groups
        'Case "contact_number", "address_number"
        '  vTables = "'contacts'"
        Case "government_region"
          vFieldName = "mosaic_code"
        Case "contact_source", "organisation_source", "category_source"
          vFieldName = "source"
        Case "contact_source_desc", "organisation_source_desc", "category_source_desc"
          vFieldName = "source_desc"
        Case "contact_source_date", "organisation_source_date"
          vFieldName = "source_date"
        Case "organisation_name"
          vFieldName = "name"
          vTables = "'organisations'"
        Case "address_valid_from", "position_valid_from"
          vFieldName = "valid_from"
        Case "address_valid_to", "position_valid_to"
          vFieldName = "valid_to"
        Case "delegate_position"
          vFieldName = "position"
          vTables = "'delegates'"
        Case "delegate_position"
          vFieldName = "position"
          vTables = "'delegates'"
        Case "delegate_organisation_name"
          vFieldName = "organisation_name"
          vTables = "'delegates'"
        Case "mailing_department"
          vFieldName = "department"
          vTables = "'mailings'"
        Case "sold_by"
          vFieldName = "sales_contact_number"
      End Select
      Dim vRecordSet As CDBRecordSet = mvEnv.Connection.GetRecordSet("SELECT * FROM maintenance_attributes WHERE attribute_name = '" & vFieldName & "' AND table_name IN(" & vTables & ")")
      Dim vFound As Boolean
      While vRecordSet.Fetch And vFound = False
        Dim vFields As CDBFields = vRecordSet.Fields
        With mvClassFields
          .SetItem(CDBControlFields.TableName, vFields)
          .SetItem(CDBControlFields.AttributeName, vFields)
          .SetItem(CDBControlFields.AttributeNameDesc, vFields)
          .SetItem(CDBControlFields.Type, vFields)
          .SetItem(CDBControlFields.EntryLength, vFields)
          .SetItem(CDBControlFields.ToCase, vFields)
          .SetItem(CDBControlFields.NullsInvalid, vFields)
          .SetItem(CDBControlFields.MinimumValue, vFields)
          .SetItem(CDBControlFields.MaximumValue, vFields)
          .SetItem(CDBControlFields.DomainValues, vFields)
          .SetItem(CDBControlFields.Pattern, vFields)
          .SetItem(CDBControlFields.ValidationTable, vFields)
          .SetItem(CDBControlFields.ValidationAttribute, vFields)
          .SetItem(CDBControlFields.RestrictionAttribute, vFields)
          If Len(ValidationTable) > 0 Then vFound = True
        End With
      End While
      vRecordSet.CloseRecordSet()
      If Len(AttributeName) = 0 Then
        Debug.Print("No Validation for " & pFieldName & " in table/view " & vTables)
        If pForceViewTest = False Then
          InitFromMaintenanceData(pEnv, pTableName, pFieldName, pFieldDesc, pFieldType, True)
        Else
          With mvClassFields
            .Item(CDBControlFields.TableName).Value = pTableName
            .Item(CDBControlFields.AttributeName).Value = pFieldName
            .Item(CDBControlFields.AttributeNameDesc).Value = pFieldDesc
            .Item(CDBControlFields.Type).Value = pFieldType
            .Item(CDBControlFields.EntryLength).LongValue = 10
          End With
        End If
      End If
    End Sub

    Public Function GetFieldsAsParameters() As CDBParameters
      Dim vParams As New CDBParameters
      Dim vField As ClassField
      Dim vIndex As CDBControlFields

      For vIndex = 0 To CDBControlFields.RestrictionAttribute
        Select Case vIndex
          Case CDBControlFields.TableName, CDBControlFields.AttributeName, CDBControlFields.AttributeNameDesc To CDBControlFields.RestrictionAttribute
            vField = mvClassFields(vIndex)
            vParams.Add(ProperName(vField.Name), vField.FieldType, vField.Value)
        End Select
      Next
      Return vParams
    End Function

    Public Sub SetApplication(ByVal pApplication As Integer)
      For vIndex As CDBControlFields = CDBControlFields.FpApplication To CDBControlFields.ParameterName
        mvClassFields(vIndex).SetValueOnly = ""
      Next
      mvClassFields(CDBControlFields.FpApplication).IntegerValue = pApplication
      mvExisting = False
    End Sub

    Public Sub SetControlLocation(ByVal pX As Integer, ByVal pY As Integer)
      If FpApplication.Length > 0 Then
        mvClassFields(CDBControlFields.ControlLeft).IntegerValue = pX
        mvClassFields(CDBControlFields.ControlTop).IntegerValue = pY
      End If
    End Sub

    Public Sub SetControlHeightAndLocation(ByVal pHeight As Integer, ByVal pX As Integer, ByVal pY As Integer)
      mvClassFields(CDBControlFields.ControlHeight).IntegerValue = pHeight
      mvClassFields(CDBControlFields.ControlLeft).IntegerValue = pX
      mvClassFields(CDBControlFields.ControlTop).IntegerValue = pY
    End Sub

    Public Sub SetParameterNameCasing()
      If ParameterName = ParameterName.ToLower Then mvClassFields(CDBControlFields.ParameterName).Value = ProperName(ParameterName)
    End Sub

    ''' <summary>
    ''' Adjusts the length of the text control and its caption
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub SetControlWidth()
      Dim vControlWidth As Integer
      Dim vCaptionWidth As Integer = CAPTION_WIDTH

      If mvClassFields(CDBControlFields.AttributeName).Value = "amended_by" OrElse mvClassFields(CDBControlFields.AttributeName).Value = "created_by" Then
        vControlWidth = CAPTION_WIDTH
      ElseIf mvClassFields(CDBControlFields.AttributeName).Value = "amended_on" OrElse mvClassFields(CDBControlFields.AttributeName).Value = "created_on" Then
        vControlWidth = CAPTION_WIDTH
        vCaptionWidth = GetControlWidth(3)
      ElseIf mvClassFields(CDBControlFields.AttributeName).Value = "amended_version" OrElse mvClassFields(CDBControlFields.AttributeName).Value = "created_version" Then
        vControlWidth = CAPTION_WIDTH
        vCaptionWidth = GetControlWidth(3)
      ElseIf mvClassFields(CDBControlFields.AttributeName).Value = "master_action" Then
        vControlWidth = GetControlWidth(0)
      Else
        vControlWidth = GetControlWidth(EntryLength)
      End If

      mvClassFields(CDBControlFields.ControlWidth).IntegerValue = vControlWidth
      mvClassFields(CDBControlFields.CaptionWidth).IntegerValue = vCaptionWidth
    End Sub

    Public Sub SetValidationData(ByVal pValidationTable As String, ByVal pValidationAttribute As String)
      mvClassFields(CDBControlFields.ValidationTable).Value = pValidationTable
      mvClassFields(CDBControlFields.ValidationAttribute).Value = pValidationAttribute
    End Sub

    Private Function GetControlWidth(ByVal pLength As Integer) As Integer
      Dim vControlWidth As Integer
      Dim vCharWidth As Integer
      If pLength > 0 Then
        'now set the width of the control, a single W is 270 twips, but a double is only 440
        Select Case pLength
          Case 1
            vCharWidth = 270
          Case 2
            vCharWidth = 220
          Case 3
            vCharWidth = 200
          Case Else
            vCharWidth = 180
        End Select

        vControlWidth = pLength * vCharWidth
      Else
        'must be a memo field
        vControlWidth = DESC_WIDTH
      End If
      If vControlWidth < 270 Then vControlWidth = 270
      If vControlWidth > DESC_WIDTH Then vControlWidth = DESC_WIDTH
      If AttributeName.Contains("address_number") AndAlso AttributeName <> "non_address_number" Then vControlWidth = DESC_WIDTH

      Return vControlWidth
    End Function

    Public Shadows Sub Update(ByVal pCaption As String, ByVal pVisible As Boolean, ByVal pControlWidth As Integer, ByVal pControlHeight As Integer, ByVal pMandatory As Boolean, ByVal pSequenceNumber As Integer, ByVal pReadonly As Boolean, ByVal pDefaultValue As String, ByVal pTop As Integer, ByVal pLeft As Integer, ByVal pNextToPreviousItem As Boolean, ByVal pHelpText As String, pContactGroup As String, ByVal pCaptionWidth As Integer)
      mvClassFields(CDBControlFields.ControlCaption).Value = pCaption
      mvClassFields(CDBControlFields.Visible).Bool = pVisible
      mvClassFields(CDBControlFields.ControlWidth).IntegerValue = pControlWidth
      mvClassFields(CDBControlFields.ControlHeight).IntegerValue = pControlHeight
      mvClassFields(CDBControlFields.MandatoryItem).Bool = pMandatory
      mvClassFields(CDBControlFields.ReadonlyItem).Bool = pReadonly
      If mvClassFields(CDBControlFields.SequenceNumber).IntegerValue <> pSequenceNumber Then
        mvOldSequenceNumber = mvClassFields(CDBControlFields.SequenceNumber).IntegerValue
      End If
      mvClassFields(CDBControlFields.SequenceNumber).IntegerValue = pSequenceNumber
      mvClassFields(CDBControlFields.DefaultValue).Value = pDefaultValue
      mvClassFields(CDBControlFields.ControlTop).IntegerValue = pTop
      mvClassFields(CDBControlFields.ControlLeft).IntegerValue = pLeft
      mvClassFields(CDBControlFields.HelpText).Value = pHelpText
      mvClassFields(CDBControlFields.ContactGroup).Value = pContactGroup
      mvClassFields(CDBControlFields.CaptionWidth).IntegerValue = pCaptionWidth
      mvNextToPreviousItem = pNextToPreviousItem
    End Sub

    Public Sub CreateCopy(ByVal pApplication As Integer, ByVal pSequenceNumber As Integer, ByVal pCaption As String, ByVal pControlTop As Integer, ByVal pControlType As String)
      SetApplication(pApplication)
      mvClassFields(CDBControlFields.SequenceNumber).IntegerValue = pSequenceNumber
      mvClassFields(CDBControlFields.ControlCaption).Value = pCaption
      mvClassFields(CDBControlFields.ControlTop).IntegerValue = pControlTop
      mvClassFields(CDBControlFields.ControlType).Value = pControlType
    End Sub

    Public Sub RevertPageControls(ByVal pApplication As Integer, ByVal pPageCode As String)
      If pPageCode.Length > 0 Then
        CheckClassFields()
        Dim vWhereFields As New CDBFields()
        If pApplication > 0 Then
          vWhereFields.Add(mvClassFields(CDBControlFields.FpApplication).Name, pApplication.ToString)
        Else
          vWhereFields.Add(mvClassFields(CDBControlFields.FpApplication).Name, "", CDBField.FieldWhereOperators.fwoNotEqual)
        End If
        vWhereFields.Add(mvClassFields(CDBControlFields.FpPageType).Name, pPageCode)
        DeleteByForeignKeys(vWhereFields)
      End If
    End Sub

    Public Sub InitTabControl(ByVal pCaption As String, ByVal pContactGroup As String)
      CheckClassFields()
      With mvClassFields
        .Item(CDBControlFields.TableName).Value = "none"
        .Item(CDBControlFields.AttributeName).Value = "none"
        .Item(CDBControlFields.ControlType).Value = "tab"
        .Item(CDBControlFields.ControlTop).IntegerValue = 100
        .Item(CDBControlFields.ControlLeft).IntegerValue = 100
        .Item(CDBControlFields.ControlWidth).IntegerValue = 5000
        .Item(CDBControlFields.ControlHeight).IntegerValue = 300
        .Item(CDBControlFields.Visible).Bool = True
        .Item(CDBControlFields.ControlCaption).Value = pCaption
        .Item(CDBControlFields.AttributeNameDesc).Value = pContactGroup
        .Item(CDBControlFields.ParameterName).Value = "TAB_" & Replace$(pCaption, " ", "")
      End With
    End Sub

    Public Sub InitFromCustomFinderControl(ByVal pCustomFinderControl As CustomFinderControl)
      CheckClassFields()
      With mvClassFields
        .Item(CDBControlFields.TableName).Value = pCustomFinderControl.TableName
        .Item(CDBControlFields.AttributeName).Value = pCustomFinderControl.AttributeName
        .Item(CDBControlFields.ControlTop).IntegerValue = pCustomFinderControl.ControlTop
        .Item(CDBControlFields.ControlLeft).IntegerValue = pCustomFinderControl.ControlLeft
        .Item(CDBControlFields.ControlWidth).IntegerValue = pCustomFinderControl.ControlWidth
        .Item(CDBControlFields.ControlHeight).IntegerValue = pCustomFinderControl.ControlHeight
        .Item(CDBControlFields.ControlCaption).Value = pCustomFinderControl.ControlCaption
        .Item(CDBControlFields.ControlType).Value = pCustomFinderControl.ControlType
        .Item(CDBControlFields.CaptionWidth).IntegerValue = pCustomFinderControl.CaptionWidth
        .Item(CDBControlFields.ParameterName).Value = ProperName(pCustomFinderControl.ParameterName)
        .Item(CDBControlFields.Visible).Bool = True

        .Item(CDBControlFields.AttributeNameDesc).Value = pCustomFinderControl.MaintenanceAttribute.AttributeNameDesc
        .Item(CDBControlFields.Type).Value = pCustomFinderControl.MaintenanceAttribute.Type
        .Item(CDBControlFields.EntryLength).IntegerValue = pCustomFinderControl.MaintenanceAttribute.EntryLength
        .Item(CDBControlFields.ToCase).Value = pCustomFinderControl.MaintenanceAttribute.ToCase
        .Item(CDBControlFields.NullsInvalid).Bool = pCustomFinderControl.MaintenanceAttribute.NullsInvalid
        .Item(CDBControlFields.MinimumValue).Value = pCustomFinderControl.MaintenanceAttribute.MinimumValue
        .Item(CDBControlFields.MaximumValue).Value = pCustomFinderControl.MaintenanceAttribute.MaximumValue
        .Item(CDBControlFields.DomainValues).Value = pCustomFinderControl.MaintenanceAttribute.DomainValues
        .Item(CDBControlFields.Pattern).Value = pCustomFinderControl.MaintenanceAttribute.Pattern
        .Item(CDBControlFields.ValidationTable).Value = pCustomFinderControl.MaintenanceAttribute.ValidationTable
        .Item(CDBControlFields.ValidationAttribute).Value = pCustomFinderControl.MaintenanceAttribute.ValidationAttribute
        .Item(CDBControlFields.RestrictionAttribute).Value = pCustomFinderControl.MaintenanceAttribute.RestrictionAttribute

        If pCustomFinderControl.Mandatory.Length > 0 Then .Item(CDBControlFields.NullsInvalid).Bool = BooleanValue(pCustomFinderControl.Mandatory)
      End With
    End Sub

    Public Sub InitFromCustomFormControl(ByVal pCustomFormControl As CustomFormControl)
      CheckClassFields()
      With mvClassFields
        .Item(CDBControlFields.TableName).Value = pCustomFormControl.TableName
        .Item(CDBControlFields.AttributeName).Value = pCustomFormControl.AttributeName
        .Item(CDBControlFields.ControlTop).IntegerValue = pCustomFormControl.ControlTop
        .Item(CDBControlFields.ControlLeft).IntegerValue = pCustomFormControl.ControlLeft
        .Item(CDBControlFields.ControlWidth).IntegerValue = pCustomFormControl.ControlWidth
        .Item(CDBControlFields.ControlHeight).IntegerValue = pCustomFormControl.ControlHeight
        .Item(CDBControlFields.ControlCaption).Value = pCustomFormControl.ControlCaption
        .Item(CDBControlFields.ControlType).Value = pCustomFormControl.ControlType
        .Item(CDBControlFields.CaptionWidth).IntegerValue = pCustomFormControl.CaptionWidth
        .Item(CDBControlFields.ParameterName).Value = pCustomFormControl.ParameterName
        .Item(CDBControlFields.Visible).Bool = True
        .Item(CDBControlFields.AttributeNameDesc).Value = pCustomFormControl.MaintenanceAttribute.AttributeNameDesc
        .Item(CDBControlFields.Type).Value = pCustomFormControl.MaintenanceAttribute.Type
        .Item(CDBControlFields.EntryLength).IntegerValue = pCustomFormControl.MaintenanceAttribute.EntryLength
        .Item(CDBControlFields.ToCase).Value = pCustomFormControl.MaintenanceAttribute.ToCase
        .Item(CDBControlFields.NullsInvalid).Bool = pCustomFormControl.MaintenanceAttribute.NullsInvalid
        .Item(CDBControlFields.MinimumValue).Value = pCustomFormControl.MaintenanceAttribute.MinimumValue
        .Item(CDBControlFields.MaximumValue).Value = pCustomFormControl.MaintenanceAttribute.MaximumValue
        .Item(CDBControlFields.DomainValues).Value = pCustomFormControl.MaintenanceAttribute.DomainValues
        .Item(CDBControlFields.Pattern).Value = pCustomFormControl.MaintenanceAttribute.Pattern
        .Item(CDBControlFields.ValidationTable).Value = pCustomFormControl.MaintenanceAttribute.ValidationTable
        .Item(CDBControlFields.ValidationAttribute).Value = pCustomFormControl.MaintenanceAttribute.ValidationAttribute
        .Item(CDBControlFields.RestrictionAttribute).Value = pCustomFormControl.MaintenanceAttribute.RestrictionAttribute
        If pCustomFormControl.RestrictionAttributes.Length > 0 Then
          .Item(CDBControlFields.RestrictionAttribute).Value = pCustomFormControl.RestrictionAttributes
        End If

        .Item(CDBControlFields.MandatoryItem).Value = BooleanString(NullsInvalid)
        .Item(CDBControlFields.DefaultValue).Value = pCustomFormControl.DefaultValue
      End With
    End Sub

    Public Shadows Sub InitWithPrimaryKey(ByVal pWhereFields As CDBFields)
      CheckClassFields()
      Dim vSQL As New SQLStatement(mvEnv.Connection, GetFPRecordsetFields(), mvClassFields.TableNameAndAlias, pWhereFields)
      Dim vRecordSet As CDBRecordSet = vSQL.GetRecordSet
      If vRecordSet.Fetch() = True Then
        InitFromRecordSetFields(vRecordSet, GetFPRecordsetFields())
      Else
        Init()
      End If
      vRecordSet.CloseRecordSet()
    End Sub

    Public Sub AddColumnsForDataTable(ByVal pDataTable As CDBDataTable, ByVal pForMaintenance As Boolean, ByVal pMultiplePages As Boolean)
      CheckClassFields()
      If pMultiplePages Then AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.FpPageType))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.TableName))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.AttributeName))
      ' If pForMaintenance Then
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.SequenceNumber))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.MandatoryItem))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ReadonlyItem))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ContactGroup))
      'End If
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.DefaultValue))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ControlType))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ControlTop))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ControlLeft))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ControlWidth))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ControlHeight))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ControlCaption))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.CaptionWidth))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.HelpText))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.Visible))

      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.AttributeNameDesc))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.Type))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.EntryLength))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ToCase))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.NullsInvalid))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.MinimumValue))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.MaximumValue))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.DomainValues))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.Pattern))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ValidationTable))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ValidationAttribute))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.RestrictionAttribute))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ResourceId))
      AddColumnFromClassField(pDataTable, mvClassFields(CDBControlFields.ParameterName))
      'pDataTable.AddColumn("DefaultValue", CDBField.FieldTypes.cftCharacter).AttributeName = "default_value"
    End Sub

    Private Sub AddColumnFromClassField(ByVal pDataTable As CDBDataTable, ByVal pClassField As ClassField)
      pDataTable.AddColumn(pClassField.ProperName, pClassField.FieldType).AttributeName = pClassField.Name
    End Sub

    Public Sub AddRowForDataTable(ByVal pDataTable As CDBDataTable)
      Dim vRow As CDBDataRow = pDataTable.AddRow
      For Each vColumn As CDBDataColumn In pDataTable.Columns
        Select Case vColumn.Name
          Case "Type"
            vRow.Item(vColumn.Name) = CInt(Type).ToString
          Case "DefaultValue"
            vRow.Item(vColumn.Name) = mvClassFields(vColumn.AttributeName).Value
          Case Else
            vRow.Item(vColumn.Name) = mvClassFields(vColumn.AttributeName).Value
        End Select
      Next
    End Sub

    Public Sub UpdatePageSequences(ByVal pCount As Integer)
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(CDBControlFields.FpApplication).Name, FpApplication)
      vWhereFields.Add(mvClassFields(CDBControlFields.FpPageType).Name, FpPageType)
      Dim vUpdateFields As New CDBFields
      vUpdateFields.Add(mvClassFields(CDBControlFields.SequenceNumber).Name, CDBField.FieldTypes.cftInteger, String.Format("{0} + {1}", mvClassFields(CDBControlFields.SequenceNumber).Name, pCount))
      mvEnv.Connection.UpdateRecords(DatabaseTableName, vUpdateFields, vWhereFields)
    End Sub

    Public Sub ModifyOriginalSequence(ByVal pDifference As Integer)
      mvClassFields(CDBControlFields.SequenceNumber).SetValueOnly = CStr(CInt(mvClassFields(CDBControlFields.SequenceNumber).SetValue) + pDifference)
    End Sub

    Public Sub SaveFPControlAs(ByVal pApplication As String, ByVal pPageType As String, ByVal pSequenceNo As Integer, Optional ByVal pHide As Boolean = False)
      Dim vFields As New CDBFields

      With vFields
        .Add("fp_application", pApplication)
        .Add("fp_page_type", pPageType)
        .Add("sequence_number", pSequenceNo)
        .Add("control_type", ControlType)
        .Add("table_name", TableName)
        .Add("attribute_name", AttributeName)
        .Add("control_top", ControlTop)
        .Add("control_left", ControlLeft)
        .Add("control_width", ControlWidth)
        .Add("control_height", ControlHeight)
        .Add("control_caption", ControlCaption)
        .Add("caption_width", CaptionWidth)
        .Add("help_text", HelpText)
        If pHide Then
          .Add("visible", "N")
        Else
          .Add("visible", mvClassFields.Item(CDBControlFields.Visible).Value)
        End If
        .Add("resource_id", ResourceId)
        If mvClassFields(CDBControlFields.ParameterName).InDatabase Then .Add("parameter_name", ParameterName)
        mvEnv.Connection.InsertRecord("fp_controls", vFields)
      End With
    End Sub

    Public Property DefaultValue() As String
      Get
        Return mvClassFields.Item(CDBControlFields.DefaultValue).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields.Item(CDBControlFields.DefaultValue).Value = Value
      End Set
    End Property

    Public Sub InitFromVariableCriteria(ByVal pEnv As CDBEnvironment, ByVal pCriteria As VariableCriteria)
      Dim vRS As CDBRecordSet

      mvEnv = pEnv
      InitClassFields()

      vRS = mvEnv.Connection.GetRecordSet("SELECT entry_length," & mvEnv.Connection.DBSpecialCol("maintenance_attributes", "case") & ", nulls_invalid, minimum_value, maximum_value, domain_values, restriction_attribute FROM maintenance_attributes WHERE table_name = '" & pCriteria.TableName & "' AND attribute_name = '" & pCriteria.MainAttr & "'")
      If vRS.Fetch() Then
        With mvClassFields
          .Item(CDBControlFields.TableName).Value = pCriteria.TableName
          .Item(CDBControlFields.AttributeName).Value = pCriteria.MainAttr
          .Item(CDBControlFields.AttributeNameDesc).Value = pCriteria.ColumnHeading
          .Item(CDBControlFields.Type).Value = pCriteria.DataType
          .Item(CDBControlFields.EntryLength).Value = vRS.Fields.Item("entry_length").Value
          .Item(CDBControlFields.ToCase).Value = vRS.Fields.Item("case").Value
          .Item(CDBControlFields.NullsInvalid).Value = vRS.Fields.Item("nulls_invalid").Value
          .Item(CDBControlFields.MinimumValue).Value = vRS.Fields.Item("minimum_value").Value
          .Item(CDBControlFields.MaximumValue).Value = vRS.Fields.Item("maximum_value").Value
          .Item(CDBControlFields.DomainValues).Value = vRS.Fields.Item("domain_values").Value
          .Item(CDBControlFields.Pattern).Value = pCriteria.Pattern
          .Item(CDBControlFields.ValidationTable).Value = pCriteria.ValTable
          .Item(CDBControlFields.ValidationAttribute).Value = pCriteria.ValAttribute
          .Item(CDBControlFields.RestrictionAttribute).Value = vRS.Fields.Item("restriction_attribute").Value

          If pCriteria.AttributeName = "period" Or pCriteria.DataType = "D" Then
            .Item(CDBControlFields.ControlType).Value = "dtp"
            .Item(CDBControlFields.ControlWidth).LongValue = 1600
          ElseIf Len(pCriteria.ValTable) > 0 Then
            .Item(CDBControlFields.ControlType).Value = "txt"
            .Item(CDBControlFields.ControlWidth).LongValue = 2000
            If pCriteria.AttributeName = "subsidiary_value" Then
              .Item(CDBControlFields.RestrictionAttribute).Value = pCriteria.MainAttr & "=" & pCriteria.MainValue
            End If
          ElseIf Len(pCriteria.Pattern) > 0 Then
            If pCriteria.Pattern = "[YN]" Then
              .Item(CDBControlFields.ControlType).Value = "chk"
              .Item(CDBControlFields.ControlWidth).LongValue = 2000
            Else
              .Item(CDBControlFields.ControlType).Value = "cbo"
              .Item(CDBControlFields.ControlWidth).LongValue = 2000
            End If
          Else
            .Item(CDBControlFields.ControlType).Value = "txt"
            .Item(CDBControlFields.ControlWidth).LongValue = 1200
          End If
          .Item(CDBControlFields.ControlTop).LongValue = 100
          .Item(CDBControlFields.ControlLeft).LongValue = 100
          .Item(CDBControlFields.ControlHeight).LongValue = 300
          .Item(CDBControlFields.ControlCaption).Value = pCriteria.VariableName
          .Item(CDBControlFields.CaptionWidth).LongValue = 2000
          .Item(CDBControlFields.Visible).Bool = True
        End With
      Else
        RaiseError(DataAccessErrors.daeMissingMaintenanceData, (pCriteria.TableName), (pCriteria.MainAttr))
      End If
      vRS.CloseRecordSet()
    End Sub

    Public Function DataType(ByVal pAttributeName As String) As CDBField.FieldTypes
      CheckAttributeExists((pAttributeName))
      Return mvClassFields.ItemDataType(pAttributeName)
    End Function

    Public WriteOnly Property DataValue(ByVal pAttributeName As String) As String
      Set(ByVal Value As String)
        CheckAttributeExists((pAttributeName))
        mvClassFields.ItemValue(pAttributeName) = Value
      End Set
    End Property

    Private Sub CheckAttributeExists(ByVal pAttributeName As String)
      If Not mvClassFields.ContainsKey(pAttributeName) Then
        Select Case pAttributeName
          Case "sequence_number"
            mvClassFields.Add(pAttributeName, CDBField.FieldTypes.cftInteger)
          Case Else
            mvClassFields.Add(pAttributeName, CDBField.FieldTypes.cftCharacter)
        End Select
      End If
    End Sub

    Public ReadOnly Property NextToPreviousItem As Boolean
      Get
        Return mvNextToPreviousItem
      End Get
    End Property

#End Region

    Public Overrides Function ToString() As String
      'This is the text returned by the debugger when viewing items in a list (like the EditPanelInfo.PanelItems property)
      Dim vToken As String = String.Format("{0} ({1}{2}{3}) - {4}", Me.ParameterName, Me.TableName, If(String.IsNullOrWhiteSpace(Me.TableName), "", "."), Me.AttributeName, Me.ControlType.ToString())
      Return String.Format("{0} - {1}", MyBase.ToString(), vToken)
    End Function

    Public Function Rectangle() As Drawing.Rectangle
      Return New Drawing.Rectangle(Me.ControlLeft, Me.ControlTop, Me.ControlWidth, Me.ControlHeight)
    End Function

    Public ReadOnly Property ControlRight As Integer
      Get
        Return Me.ControlLeft + Me.ControlWidth
      End Get
    End Property
    Public ReadOnly Property ControlBottom As Integer
      Get
        Return Me.ControlTop + Me.ControlHeight
      End Get
    End Property

  End Class
End Namespace
