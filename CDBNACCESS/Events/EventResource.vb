Namespace Access

  Public Class EventResource
    Inherits CARERecord

#Region "AutoGenerated Code"
    Public Enum EventResourceRecordSetTypes       'These are bit values
      errtAll = &HFFFF
      'ADD additional recordset types here
      errtKeyValues = 1
      errtQuantityAllocation = 2
      errtDescriptions = 4
    End Enum
'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum EventResourceFields
      AllFields = 0
      SessionNumber
      Product
      Rate
      CopyTo
      DespatchTo
      IssueBasis
      Issued
      ResourceNumber
      ResourceType
      QuantityRequired
      QuantityIssued
      Allocated
      Notes
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("session_number", CDBField.FieldTypes.cftLong)
        .Add("product")
        .Add("rate")
        .Add("copy_to")
        .Add("despatch_to")
        .Add("issue_basis")
        .Add("issued", CDBField.FieldTypes.cftDate)
        .Add("resource_number", CDBField.FieldTypes.cftLong)
        .Add("resource_type")
        .Add("quantity_required", CDBField.FieldTypes.cftLong)
        .Add("quantity_issued", CDBField.FieldTypes.cftLong)
        .Add("allocated")
        .Add("notes", CDBField.FieldTypes.cftMemo).PrefixRequired = True

        .Item(EventResourceFields.SessionNumber).PrimaryKey = True
        .Item(EventResourceFields.ResourceNumber).PrimaryKey = True

        .Item(EventResourceFields.Product).PrefixRequired = True
        .Item(EventResourceFields.Rate).PrefixRequired = True
        .Item(EventResourceFields.Allocated).PrefixRequired = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "er"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "event_resources"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property SessionNumber() As Integer
      Get
        Return mvClassFields(EventResourceFields.SessionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ProductCode() As String
      Get
        Return mvClassFields(EventResourceFields.Product).Value
      End Get
    End Property
    Public ReadOnly Property RateCode() As String
      Get
        Return mvClassFields(EventResourceFields.Rate).Value
      End Get
    End Property
    Public ReadOnly Property CopyTo() As String
      Get
        Return mvClassFields(EventResourceFields.CopyTo).Value
      End Get
    End Property
    Public ReadOnly Property DespatchTo() As String
      Get
        Return mvClassFields(EventResourceFields.DespatchTo).Value
      End Get
    End Property
    Public ReadOnly Property IssueBasis() As String
      Get
        Return mvClassFields(EventResourceFields.IssueBasis).Value
      End Get
    End Property
    Public Property Issued() As String
      Get
        Return mvClassFields(EventResourceFields.Issued).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(EventResourceFields.Issued).Value = value
      End Set
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(EventResourceFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(EventResourceFields.AmendedBy).Value
      End Get
    End Property
    Public  Property ResourceNumber() As Integer
      Get
        Return mvClassFields(EventResourceFields.ResourceNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(EventResourceFields.ResourceNumber).IntegerValue = value
      End Set
    End Property
    Public ReadOnly Property ResourceTypeCode() As String
      Get
        Return mvClassFields.Item(EventResourceFields.ResourceType).Value
      End Get
    End Property
    Public ReadOnly Property ResourceType() As ResourceTypes
      Get
        Return ResourceTypeFromCode(mvClassFields.Item(EventResourceFields.ResourceType).Value)
      End Get
    End Property
    Public ReadOnly Property QuantityRequired() As Integer
      Get
        Return mvClassFields(EventResourceFields.QuantityRequired).IntegerValue
      End Get
    End Property
    Public ReadOnly Property QuantityIssued() As Integer
      Get
        Return mvClassFields(EventResourceFields.QuantityIssued).IntegerValue
      End Get
    End Property
    Public Property Allocated() As Boolean
      Get
        Return mvClassFields(EventResourceFields.Allocated).Bool
      End Get
      Set(ByVal value As Boolean)
        mvClassFields(EventResourceFields.Allocated).Bool = value
      End Set
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(EventResourceFields.Notes).Value
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Public Enum ResourceTypes
      rtInternal
      rtExternal
      rtNone
    End Enum

    Public Enum IssueToTypes
      ittSingleIssue
      ittEachPersonnel
      ittEachAttendee
    End Enum

    Private mvAppointmentDescription As String
    Private mvExternalResource As ExternalResource
    Private mvSession As EventSession
    Private mvInternalResource As InternalResource

    Protected Overrides Sub ClearFields()
      mvAppointmentDescription = ""
      mvExternalResource = Nothing
      mvSession = Nothing
      mvInternalResource = Nothing
    End Sub

    Public ReadOnly Property ExternalResource() As ExternalResource
      Get
        If mvExternalResource Is Nothing Then
          If ResourceType = ResourceTypes.rtExternal And ResourceNumber > 0 Then
            mvExternalResource = New ExternalResource
            mvExternalResource.Init(mvEnv, ResourceNumber)
          End If
        End If
        Return mvExternalResource
      End Get
    End Property

    Public Shared Function ResourceTypeFromCode(ByVal pResourceType As String) As ResourceTypes
      Select Case pResourceType
        Case "E"
          Return ResourceTypes.rtExternal
        Case "I"
          Return ResourceTypes.rtInternal
        Case Else
          Return ResourceTypes.rtNone
      End Select
    End Function

    Public Property AppointmentDescription() As String
      Get
        AppointmentDescription = mvAppointmentDescription
      End Get
      Set(ByVal Value As String)
        mvAppointmentDescription = Value
      End Set
    End Property

    Protected Overrides Sub PreValidateUpdateParameters(ByVal pParameterList As CDBParameters)
			If pParameterList.ContainsKey("IssueDate") Then pParameterList.Add("Issued", pParameterList("IssueDate").Value)
		End Sub

		Protected Overrides Sub PreValidateCreateParameters(ByVal pParameterList As CDBParameters)
			If pParameterList.ContainsKey("IssueDate") Then pParameterList.Add("Issued", pParameterList("IssueDate").Value)
		End Sub

    Public Overloads Sub Init(ByVal pResourceNumber As Integer, ByVal pSessionNumber As Integer)
      Init(pResourceNumber, pSessionNumber, "", "")
    End Sub

    Public Overloads Sub Init(ByVal pResourceNumber As Integer, ByVal pSessionNumber As Integer, ByVal pProduct As String, ByVal pCopyTo As String)
      CheckClassFields()
      If (pResourceNumber > 0) OrElse (pSessionNumber > 0 AndAlso pProduct.Length > 0 AndAlso pCopyTo.Length > 0) Then
        Dim vWhereFields As New CDBFields()
        vWhereFields.Add(mvClassFields(EventResourceFields.SessionNumber).Name, pSessionNumber)
        If pResourceNumber > 0 Then
          vWhereFields.Add(mvClassFields(EventResourceFields.ResourceNumber).Name, pResourceNumber)
        Else
          vWhereFields.Add(mvClassFields(EventResourceFields.Product).Name, pProduct)
          vWhereFields.Add(mvClassFields(EventResourceFields.CopyTo).Name, pCopyTo)
        End If
        MyBase.InitWithPrimaryKey(vWhereFields)
      Else
        Init()
      End If
    End Sub

    Public Sub CheckCalendarConflict()
      If ResourceType = ResourceTypes.rtInternal Then
        If (mvExisting = False AndAlso Allocated = True) OrElse (mvExisting = True And (Allocated = True And (ResourceNumber <> IntegerValue(mvClassFields.Item(EventResourceFields.ResourceNumber).SetValue) Or mvClassFields.Item(EventResourceFields.Allocated).SetValue <> "Y"))) Then
          If InternalResource.InternalResourceType = InternalResource.InternalResourceTypes.irtContact Then
            Dim vStart As String
            vStart = Session.StartDate & " " & Session.StartTime
            Dim vEnd As String
            vEnd = Session.EndDate & " " & Session.EndTime
            Dim vAppointment As New ContactAppointment(mvEnv)
            vAppointment.Init()
            vAppointment.CheckCalendarConflict(InternalResource.ResourceContactNumber, vStart, vEnd, ContactAppointment.ContactAppointmentTypes.catOther, SessionNumber, True)
          End If
        End If
      End If
    End Sub

    Public ReadOnly Property Session() As EventSession
      Get
        If mvSession Is Nothing Then
          mvSession = New EventSession
          mvSession.Init(mvEnv, SessionNumber)
        End If
        Return mvSession
      End Get
    End Property

    Public ReadOnly Property InternalResource() As InternalResource
      Get
        If mvInternalResource Is Nothing Then
          If ResourceType = ResourceTypes.rtInternal And ResourceNumber > 0 Then
            mvInternalResource = New InternalResource(mvEnv)
            mvInternalResource.Init(ResourceNumber)
          End If
        End If
        Return mvInternalResource
      End Get
    End Property

    Friend Sub InitFromResource(ByVal pEvent As CDBEvent, ByRef pResource As EventResource, ByRef pNewEvent As CDBEvent)
      With pResource
        mvClassFields.Item(EventResourceFields.SessionNumber).IntegerValue = pNewEvent.Sessions(pEvent.Sessions.IndexOf(pEvent.Sessions.Item(.SessionNumber.ToString))).SessionNumber
        mvClassFields.Item(EventResourceFields.Product).Value = .ProductCode
        mvClassFields.Item(EventResourceFields.Rate).Value = .RateCode
        mvClassFields.Item(EventResourceFields.CopyTo).Value = .CopyTo
        mvClassFields.Item(EventResourceFields.DespatchTo).Value = .DespatchTo
        mvClassFields.Item(EventResourceFields.IssueBasis).Value = .IssueBasis
        mvClassFields.Item(EventResourceFields.ResourceType).Value = .ResourceTypeCode
        mvClassFields.Item(EventResourceFields.QuantityRequired).IntegerValue = .QuantityRequired
        mvClassFields.Item(EventResourceFields.QuantityIssued).IntegerValue = 0
        mvClassFields.Item(EventResourceFields.Allocated).Bool = False
        mvClassFields.Item(EventResourceFields.Notes).Value = .Notes
      End With
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      SetValid()
      If Allocated Then
        Select Case IssueToFromCode(CopyTo)
          Case IssueToTypes.ittSingleIssue
            mvClassFields(EventResourceFields.QuantityIssued).IntegerValue = QuantityRequired
          Case IssueToTypes.ittEachAttendee
            mvClassFields(EventResourceFields.QuantityIssued).IntegerValue = QuantityRequired * Session.NumberOfAttendees
          Case IssueToTypes.ittEachPersonnel
            Dim vWhereFields As New CDBFields
            vWhereFields.Add("session_number", SessionNumber)
            mvClassFields(EventResourceFields.QuantityIssued).IntegerValue = QuantityRequired * mvEnv.Connection.GetCount("event_personnel", vWhereFields)
        End Select
      End If
      'Cancel previous Internal Resource if changed
      Dim vAppointment As New ContactAppointment(mvEnv)
      Dim vStockMovement As New StockMovement
      Dim vReason As String
      If mvExisting And ResourceType = ResourceTypes.rtInternal Then
        If (ResourceNumber <> IntegerValue(mvClassFields.Item(EventResourceFields.ResourceNumber).SetValue) And mvClassFields.Item(EventResourceFields.Allocated).SetValue = "Y") Or (Allocated = False And mvClassFields.Item(EventResourceFields.Allocated).SetValue = "Y") Then
          Dim vPrevInternalResource As New InternalResource(mvEnv)
          vPrevInternalResource.Init(IntegerValue(mvClassFields.Item(EventResourceFields.ResourceNumber).SetValue))
          If vPrevInternalResource.InternalResourceType = InternalResource.InternalResourceTypes.irtContact Then
            'Cancel Calendar booking
            vAppointment.Init(vPrevInternalResource.ResourceContactNumber, ContactAppointment.GetAppointmentTypeCode(ContactAppointment.ContactAppointmentTypes.catOther), SessionNumber)
            If vAppointment.Existing Then vAppointment.Delete()
          End If
          If vPrevInternalResource.InternalResourceType = InternalResource.InternalResourceTypes.irtProduct Then
            If vPrevInternalResource.Product.StockItem Then
              'Reset Stock Levels
              vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlStockReasonReversal)
              vStockMovement.Create(mvEnv, vPrevInternalResource.ProductCode, QuantityIssued, vReason)
            End If
          End If
        ElseIf (QuantityIssued <> IntegerValue(mvClassFields.Item(EventResourceFields.QuantityIssued).SetValue) And mvClassFields.Item(EventResourceFields.Allocated).SetValue = "Y") Or (Allocated = False And mvClassFields.Item(EventResourceFields.Allocated).SetValue = "Y") Then
          If InternalResource.Product.StockItem Then
            'Reset Stock Levels
            vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlStockReasonReversal)
            vStockMovement.Create(mvEnv, InternalResource.ProductCode, IntegerValue(mvClassFields.Item(EventResourceFields.QuantityIssued).SetValue) - QuantityIssued, vReason)
          End If
        End If
      End If
      If ResourceType = ResourceTypes.rtInternal Then
        If InternalResource.InternalResourceType = InternalResource.InternalResourceTypes.irtProduct Then
          mvClassFields.Item(EventResourceFields.Product).Value = InternalResource.ProductCode
          mvClassFields.Item(EventResourceFields.Rate).Value = InternalResource.RateCode
        End If
        If (mvExisting = False And Allocated = True) Or (mvExisting = True And (Allocated = True And (ResourceNumber <> Val(mvClassFields.Item(EventResourceFields.ResourceNumber).SetValue) Or mvClassFields.Item(EventResourceFields.Allocated).SetValue <> "Y"))) Then
          If InternalResource.InternalResourceType = InternalResource.InternalResourceTypes.irtContact Then
            Dim vStart As String = Session.StartDate & " " & Session.StartTime
            Dim vEnd As String = Session.EndDate & " " & Session.EndTime
            vAppointment.Init()
            vAppointment.Create(InternalResource.ResourceContactNumber, vStart, vEnd, ContactAppointment.ContactAppointmentTypes.catOther, AppointmentDescription, SessionNumber)
            vAppointment.Save()
          ElseIf InternalResource.InternalResourceType = InternalResource.InternalResourceTypes.irtProduct Then
            'Update stock levels
            If InternalResource.Product.StockItem Then
              vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlStockReasonSale)
              vStockMovement.Create(mvEnv, InternalResource.ProductCode, (QuantityIssued * -1), vReason)
            End If
          End If
        End If
      End If
      mvClassFields.VerifyUnique(mvEnv.Connection)
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      If ResourceType = ResourceTypes.rtInternal And Allocated = True Then
        If InternalResource.InternalResourceType = InternalResource.InternalResourceTypes.irtContact Then
          'Cancel Calendar booking
          Dim vAppointment As New ContactAppointment(mvEnv)
          vAppointment.Init(InternalResource.ResourceContactNumber, ContactAppointment.GetAppointmentTypeCode(ContactAppointment.ContactAppointmentTypes.catOther), SessionNumber)
          If vAppointment.Existing Then vAppointment.Delete()
        ElseIf InternalResource.InternalResourceType = InternalResource.InternalResourceTypes.irtProduct Then
          'Reset stock levels
          If InternalResource.Product.StockItem Then
            Dim vStockMovement As New StockMovement
            Dim vReason As String
            vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlStockReasonReversal)
            vStockMovement.Create(mvEnv, InternalResource.ProductCode, QuantityIssued, vReason)
          End If
        End If
      End If
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
      Init()
    End Sub

    Public Shared Function IssueToFromCode(ByVal pIssueToCode As String) As IssueToTypes
      Select Case pIssueToCode
        Case "1"
          Return IssueToTypes.ittSingleIssue
        Case "P"
          Return IssueToTypes.ittEachPersonnel
        Case "A"
          Return IssueToTypes.ittEachAttendee
      End Select
    End Function

#End Region

    Public Overloads Function GetRecordSetFields(ByVal pRSType As EventResourceRecordSetTypes) As String
      Dim vFields As String
      If (pRSType And EventResourceRecordSetTypes.errtAll) > 0 Then
        If mvClassFields Is Nothing Then InitClassFields()
        vFields = mvClassFields.FieldNames(mvEnv, "er")
      Else
        vFields = "er.session_number,er.product,copy_to"
        If mvClassFields.Item(EventResourceFields.ResourceNumber).InDatabase Then vFields = vFields & ",er.resource_number"
        If (pRSType And EventResourceRecordSetTypes.errtQuantityAllocation) > 0 Then
          vFields = vFields & ",quantity_required,quantity_issued,allocated"
        End If
        If (pRSType And EventResourceRecordSetTypes.errtDescriptions) > 0 Then
          vFields = vFields & ",resource_type"
        End If
      End If
      Return vFields
    End Function
    Public Overloads Sub InitFromRecordSet(ByVal pRecordSet As CDBRecordSet, ByVal pRSType As EventResourceRecordSetTypes)
      Dim vFields As CDBFields

      InitClassFields()
      vFields = pRecordSet.Fields
      mvExisting = True
      With mvClassFields
        'Always include the primary key attributes
        .SetOptionalItem(EventResourceFields.ResourceNumber, vFields)
        .SetItem(EventResourceFields.SessionNumber, vFields)
        .SetItem(EventResourceFields.Product, vFields)
        .SetItem(EventResourceFields.CopyTo, vFields)
        'Modify below to handle each recordset type as required
        If (pRSType And EventResourceRecordSetTypes.errtQuantityAllocation) > 0 Then
          .SetItem(EventResourceFields.QuantityRequired, vFields)
          .SetItem(EventResourceFields.QuantityIssued, vFields)
          .SetItem(EventResourceFields.Allocated, vFields)
        End If
        If (pRSType And EventResourceRecordSetTypes.errtDescriptions) = EventResourceRecordSetTypes.errtDescriptions Then
          .SetItem(EventResourceFields.ResourceType, vFields)
        End If
        If (pRSType And EventResourceRecordSetTypes.errtAll) = EventResourceRecordSetTypes.errtAll Then
          .SetItem(EventResourceFields.Rate, vFields)
          .SetItem(EventResourceFields.DespatchTo, vFields)
          .SetItem(EventResourceFields.IssueBasis, vFields)
          .SetItem(EventResourceFields.Issued, vFields)
          .SetItem(EventResourceFields.AmendedOn, vFields)
          .SetItem(EventResourceFields.AmendedBy, vFields)
          .SetItem(EventResourceFields.Notes, vFields)
        End If
      End With
    End Sub

  End Class
End Namespace
