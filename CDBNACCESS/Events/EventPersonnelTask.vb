Namespace Access

  Public Class EventPersonnelTask
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum EventPersonnelTaskFields
      AllFields = 0
      EventPersonnelNumber
      PersonnelTask
      EventPersonnelTaskNumber
      StartDate
      StartTime
      EndDate
      EndTime
      Notes
      EventNumber
      ExternalTaskID
      AmendedBy
      AmendedOn
    End Enum

    Private mvPersonnelTaskDesc As String = ""

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("event_personnel_number", CDBField.FieldTypes.cftLong)
        .Add("personnel_task")
        .Add("event_personnel_task_number", CDBField.FieldTypes.cftLong)
        .Add("start_date", CDBField.FieldTypes.cftDate)
        .Add("start_time")
        .Add("end_date", CDBField.FieldTypes.cftDate)
        .Add("end_time")
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("event_number", CDBField.FieldTypes.cftLong)
        .Add("external_task_id")

        .Item(EventPersonnelTaskFields.EventPersonnelTaskNumber).PrimaryKey = True
        .SetControlNumberField(EventPersonnelTaskFields.EventPersonnelTaskNumber, "ET")
        .Item(EventPersonnelTaskFields.ExternalTaskID).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbOutlookIntegration)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ept"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "event_personnel_tasks"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property EventPersonnelNumber() As Integer
      Get
        Return mvClassFields(EventPersonnelTaskFields.EventPersonnelNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PersonnelTask() As String
      Get
        Return mvClassFields(EventPersonnelTaskFields.PersonnelTask).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(EventPersonnelTaskFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(EventPersonnelTaskFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property EventPersonnelTaskNumber() As Integer
      Get
        Return mvClassFields(EventPersonnelTaskFields.EventPersonnelTaskNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property StartDate() As String
      Get
        Return mvClassFields(EventPersonnelTaskFields.StartDate).Value
      End Get
    End Property
    Public ReadOnly Property StartTime() As String
      Get
        Return mvClassFields(EventPersonnelTaskFields.StartTime).Value
      End Get
    End Property
    Public ReadOnly Property EndDate() As String
      Get
        Return mvClassFields(EventPersonnelTaskFields.EndDate).Value
      End Get
    End Property
    Public ReadOnly Property EndTime() As String
      Get
        Return mvClassFields(EventPersonnelTaskFields.EndTime).Value
      End Get
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(EventPersonnelTaskFields.Notes).Value
      End Get
    End Property
    Public ReadOnly Property EventNumber() As Integer
      Get
        Return mvClassFields(EventPersonnelTaskFields.EventNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExternalTaskID As String
      Get
        Return mvClassFields(EventPersonnelTaskFields.ExternalTaskId).Value
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Private mvEventPersonnel As EventPersonnel
    Private mvEvent As CDBEvent

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvPersonnelTaskDesc = ""
      mvEventPersonnel = Nothing
      mvEvent = Nothing
    End Sub

    Public ReadOnly Property PersonnelTaskDesc() As String
      Get
        If mvPersonnelTaskDesc.Length = 0 And PersonnelTask.Length > 0 Then
          Dim vSQL As New SQLStatement(mvEnv.Connection, "personnel_task_desc", "personnel_tasks", New CDBField("personnel_task", PersonnelTask))
          mvPersonnelTaskDesc = vSQL.GetValue
        End If
        Return mvPersonnelTaskDesc
      End Get
    End Property

    Public Overloads Sub Init(ByVal pEventPersonnelNumber As Integer, ByVal pPersonnelTask As String)
      Init(pEventPersonnelNumber, pPersonnelTask, 0)
    End Sub

    Public Overloads Sub Init(ByVal pEventPersonnelNumber As Integer, ByVal pPersonnelTask As String, ByVal pEventPersonnelTaskNumber As Integer)
      If pEventPersonnelNumber > 0 Or pEventPersonnelTaskNumber > 0 Then
        CheckClassFields()
        Dim vWhereFields As New CDBFields
        If pEventPersonnelTaskNumber > 0 Then
          vWhereFields.Add(mvClassFields(EventPersonnelTaskFields.EventPersonnelTaskNumber).Name, pEventPersonnelTaskNumber)
        Else
          vWhereFields.Add(mvClassFields(EventPersonnelTaskFields.EventPersonnelNumber).Name, pEventPersonnelNumber)
          vWhereFields.Add(mvClassFields(EventPersonnelTaskFields.PersonnelTask).Name, pPersonnelTask)
        End If
        InitWithPrimaryKey(vWhereFields)
      Else
        Init()
      End If
    End Sub

    Public ReadOnly Property EventPersonnel() As EventPersonnel
      Get
        If mvEventPersonnel Is Nothing And EventPersonnelNumber > 0 Then
          mvEventPersonnel = New EventPersonnel(mvEnv)
          mvEventPersonnel.Init(EventPersonnelNumber)
        End If
        Return mvEventPersonnel
      End Get
    End Property

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      Dim vStart As String = String.Format("{0} {1}", StartDate, StartTime)
      Dim vEnd As String = String.Format("{0} {1}", EndDate, EndTime)
      Dim vAppointment As New ContactAppointment(mvEnv)
      If StartDate.Length > 0 AndAlso StartTime.Length > 0 AndAlso EndDate.Length > 0 AndAlso EndTime.Length > 0 Then
        'We need to handle contact appointments for the personnel tasks
        If EventPersonnelNumber > 0 Then
          vAppointment.Init()
          vAppointment.CheckCalendarConflict(EventPersonnel.ContactNumber, vStart, vEnd, ContactAppointment.ContactAppointmentTypes.catPersonnelTask, EventPersonnel.SessionNumber, False)
        End If
        SetValid()
        If EventPersonnelNumber > 0 Then
          If mvExisting Then
            vAppointment.Init(EventPersonnel.ContactNumber, _
                 ContactAppointment.GetAppointmentTypeCode(ContactAppointment.ContactAppointmentTypes.catPersonnelTask), _
                 IntegerValue(mvClassFields.Item(EventPersonnelTaskFields.EventPersonnelTaskNumber).SetValue))
            If vAppointment.Existing Then
              vAppointment.ModifyCalendarEntry(EventPersonnel.ContactNumber, vStart, vEnd, EventPersonnelTaskNumber, AppointmentDesc)
            Else
              vAppointment.Create(EventPersonnel.ContactNumber, vStart, vEnd, ContactAppointment.ContactAppointmentTypes.catPersonnelTask, AppointmentDesc, EventPersonnelTaskNumber)
              vAppointment.Save()
            End If
          Else
            vAppointment.Init()
            vAppointment.Create(EventPersonnel.ContactNumber, vStart, vEnd, ContactAppointment.ContactAppointmentTypes.catPersonnelTask, AppointmentDesc, EventPersonnelTaskNumber)
            vAppointment.Save()
          End If
        End If
      End If
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Overrides Sub Delete(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      Dim vAppointment As New ContactAppointment(mvEnv)
      If EventPersonnelNumber > 0 Then
        vAppointment.Init(EventPersonnel.ContactNumber, _
           ContactAppointment.GetAppointmentTypeCode(ContactAppointment.ContactAppointmentTypes.catPersonnelTask), _
           EventPersonnelTaskNumber)
        If vAppointment.Existing Then vAppointment.Delete()
      End If
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Private Function EventHeader() As CDBEvent
      Dim vEventNumber As Integer
      If mvEvent Is Nothing Then
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("ep.event_personnel_number", EventPersonnelNumber)
        Dim vAnsiJoins As New AnsiJoins
        vAnsiJoins.Add("sessions s", "s.session_number", "ep.session_number")
        Dim vSQL As New SQLStatement(mvEnv.Connection, "event_number", "event_personnel ep", vWhereFields, "", vAnsiJoins)
        vEventNumber = vSQL.GetIntegerValue
        mvEvent = New CDBEvent(mvEnv)
        mvEvent.Init(vEventNumber)
      End If
      Return mvEvent
    End Function

    Private Function AppointmentDesc() As String
      Return String.Format("{0} : {1}", EventHeader.EventDesc, PersonnelTaskDesc)
    End Function

#End Region


  End Class
End Namespace
