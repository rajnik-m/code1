Namespace Access

  Partial Public Class EventPersonnel
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum EventPersonnelFields
      AllFields = 0
      SessionNumber
      ContactNumber
      AddressNumber
      PersonnelFunction
      Confirmed
      ConfirmedBy
      ExpensesReceived
      Expenses
      AuthorisedOn
      AuthorisedBy
      Task
      StartDate
      EndDate
      StartTime
      EndTime
      EventPersonnelNumber
      Position
      OrganisationName
      IssueResources
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("session_number", CDBField.FieldTypes.cftLong)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("function").SpecialColumn = True
        .Add("confirmed", CDBField.FieldTypes.cftDate)
        .Add("confirmed_by")
        .Add("expenses_received", CDBField.FieldTypes.cftDate)
        .Add("expenses", CDBField.FieldTypes.cftNumeric)
        .Add("authorised_on", CDBField.FieldTypes.cftDate)
        .Add("authorised_by")
        .Add("task", CDBField.FieldTypes.cftMemo)
        .Add("start_date", CDBField.FieldTypes.cftDate)
        .Add("end_date", CDBField.FieldTypes.cftDate)
        .Add("start_time")
        .Add("end_time")
        .Add("event_personnel_number", CDBField.FieldTypes.cftLong)
        .Add("position")
        .Add("organisation_name")
        .Add("issue_resources")

        .Item(EventPersonnelFields.EventPersonnelNumber).PrimaryKey = True

        .Item(EventPersonnelFields.SessionNumber).PrefixRequired = True
        .Item(EventPersonnelFields.StartDate).PrefixRequired = True
        .Item(EventPersonnelFields.EndDate).PrefixRequired = True
        .Item(EventPersonnelFields.StartTime).PrefixRequired = True
        .Item(EventPersonnelFields.EndTime).PrefixRequired = True



        .SetControlNumberField(EventPersonnelFields.EventPersonnelNumber, "EP")
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ep"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "event_personnel"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property SessionNumber() As Integer
      Get
        Return mvClassFields(EventPersonnelFields.SessionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(EventPersonnelFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public Property AddressNumber() As Integer
      Get
        Return mvClassFields(EventPersonnelFields.AddressNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(EventPersonnelFields.AddressNumber).IntegerValue = value
      End Set
    End Property
    Public ReadOnly Property PersonnelFunction() As String
      Get
        Return mvClassFields(EventPersonnelFields.PersonnelFunction).Value
      End Get
    End Property
    Public ReadOnly Property Confirmed() As String
      Get
        Return mvClassFields(EventPersonnelFields.Confirmed).Value
      End Get
    End Property
    Public ReadOnly Property ConfirmedBy() As String
      Get
        Return mvClassFields(EventPersonnelFields.ConfirmedBy).Value
      End Get
    End Property
    Public ReadOnly Property ExpensesReceived() As String
      Get
        Return mvClassFields(EventPersonnelFields.ExpensesReceived).Value
      End Get
    End Property
    Public ReadOnly Property Expenses() As Double
      Get
        Return mvClassFields(EventPersonnelFields.Expenses).DoubleValue
      End Get
    End Property
    Public ReadOnly Property AuthorisedOn() As String
      Get
        Return mvClassFields(EventPersonnelFields.AuthorisedOn).Value
      End Get
    End Property
    Public ReadOnly Property AuthorisedBy() As String
      Get
        Return mvClassFields(EventPersonnelFields.AuthorisedBy).Value
      End Get
    End Property
    Public ReadOnly Property Task() As String
      Get
        Return mvClassFields(EventPersonnelFields.Task).Value
      End Get
    End Property
    Public ReadOnly Property StartDate() As String
      Get
        Return mvClassFields(EventPersonnelFields.StartDate).Value
      End Get
    End Property
    Public ReadOnly Property EndDate() As String
      Get
        Return mvClassFields(EventPersonnelFields.EndDate).Value
      End Get
    End Property
    Public ReadOnly Property StartTime() As String
      Get
        Return mvClassFields(EventPersonnelFields.StartTime).Value
      End Get
    End Property
    Public ReadOnly Property EndTime() As String
      Get
        Return mvClassFields(EventPersonnelFields.EndTime).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(EventPersonnelFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(EventPersonnelFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property EventPersonnelNumber() As Integer
      Get
        Return mvClassFields(EventPersonnelFields.EventPersonnelNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Position() As String
      Get
        Return mvClassFields(EventPersonnelFields.Position).Value
      End Get
    End Property
    Public ReadOnly Property OrganisationName() As String
      Get
        Return mvClassFields(EventPersonnelFields.OrganisationName).Value
      End Get
    End Property
    Public ReadOnly Property IssueResources() As Boolean
      Get
        Return mvClassFields(EventPersonnelFields.IssueResources).Bool
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Public Overloads Sub Init(ByVal pSessionNumber As Integer, ByVal pContactNumber As Integer)
      Dim vWhereFields As New CDBFields
      CheckClassFields()
      If pSessionNumber > 0 Then
        vWhereFields.Add(mvClassFields(EventPersonnelFields.SessionNumber).Name, pSessionNumber)
        vWhereFields.Add(mvClassFields(EventPersonnelFields.ContactNumber).Name, pContactNumber)
        InitWithPrimaryKey(vWhereFields)
      Else
        Init()
      End If
    End Sub

    Public Overloads Sub Create(ByVal pSessionNumber As Integer, ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer, Optional ByVal pParams As CDBParameters = Nothing)
      Init()
      mvClassFields.Item(EventPersonnelFields.SessionNumber).IntegerValue = pSessionNumber
      mvClassFields.Item(EventPersonnelFields.ContactNumber).IntegerValue = pContactNumber
      mvClassFields.Item(EventPersonnelFields.AddressNumber).IntegerValue = pAddressNumber
      mvClassFields.Item(EventPersonnelFields.IssueResources).Bool = False
      If Not pParams Is Nothing Then Update(pParams)
    End Sub

    Public Overrides Sub Update(ByVal pParams As CDBParameters)
      Dim vFields As New CDBFields
      With mvClassFields
        If pParams.Exists("ContactNumber") Then .Item(EventPersonnelFields.ContactNumber).Value = pParams("ContactNumber").Value
        If pParams.Exists("AddressNumber") Then .Item(EventPersonnelFields.AddressNumber).Value = pParams("AddressNumber").Value
        If pParams.Exists("ChairPerson") Then
          If pParams("ChairPerson").Bool Then
            .Item(EventPersonnelFields.PersonnelFunction).Value = "C"
          Else
            .Item(EventPersonnelFields.PersonnelFunction).Value = ""
          End If
        End If
        If pParams.Exists("ConfirmedOn") Then .Item(EventPersonnelFields.Confirmed).Value = pParams("ConfirmedOn").Value
        If pParams.Exists("ExpensesReceived") Then .Item(EventPersonnelFields.ExpensesReceived).Value = pParams("ExpensesReceived").Value
        If pParams.Exists("Expenses") Then .Item(EventPersonnelFields.Expenses).Value = pParams("Expenses").Value
        If pParams.Exists("Task") Then .Item(EventPersonnelFields.Task).Value = pParams("Task").Value
        If pParams.Exists("StartDate") Then .Item(EventPersonnelFields.StartDate).Value = pParams("StartDate").Value
        If pParams.Exists("EndDate") Then .Item(EventPersonnelFields.EndDate).Value = pParams("EndDate").Value
        If pParams.Exists("StartTime") Then .Item(EventPersonnelFields.StartTime).Value = pParams("StartTime").Value
        If pParams.Exists("EndTime") Then .Item(EventPersonnelFields.EndTime).Value = pParams("EndTime").Value
        If pParams.Exists("Position") Then .Item(EventPersonnelFields.Position).Value = pParams("Position").Value
        If pParams.Exists("OrganisationName") Then .Item(EventPersonnelFields.OrganisationName).Value = pParams("OrganisationName").Value
        If pParams.Exists("IssueEventResources") Then .Item(EventPersonnelFields.IssueResources).Value = pParams("IssueEventResources").Value
        If pParams.Exists("AuthorisedBy") Then .Item(EventPersonnelFields.AuthorisedBy).Value = pParams("AuthorisedBy").Value
        If pParams.Exists("AuthorisedOn") Then .Item(EventPersonnelFields.AuthorisedOn).Value = pParams("AuthorisedOn").Value
        If .Item(EventPersonnelFields.ContactNumber).ValueChanged Then
          vFields.Add("contact_number", CDBField.FieldTypes.cftLong, ContactNumber)
          If mvEnv.Connection.GetCount("personnel", vFields) = 0 Then
            vFields.AddAmendedOnBy(mvEnv.User.UserID)
            mvEnv.Connection.InsertRecord("personnel", vFields)
          End If
        End If
      End With
    End Sub

    Public Sub CheckCalendarConflict()
      Dim vStart As String = StartDate & " " & StartTime
      Dim vEnd As String = EndDate & " " & EndTime
      Dim vAppointment As New ContactAppointment(mvEnv)
      vAppointment.Init()
      vAppointment.CheckCalendarConflict(ContactNumber, vStart, vEnd, ContactAppointment.ContactAppointmentTypes.catPersonnel, SessionNumber, False)
    End Sub

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      SetValid()
      'We need to handle contact appointments for the personnel
      Dim vStart As String = StartDate & " " & StartTime
      Dim vEnd As String = EndDate & " " & EndTime
      Dim vAppointment As New ContactAppointment(mvEnv)

      If mvExisting Then
        vAppointment.Init(IntegerValue(mvClassFields.Item(EventPersonnelFields.ContactNumber).SetValue), _
                         ContactAppointment.GetAppointmentTypeCode(ContactAppointment.ContactAppointmentTypes.catPersonnel), _
                         IntegerValue(mvClassFields.Item(EventPersonnelFields.SessionNumber).SetValue))
        If vAppointment.Existing Then
          If String.IsNullOrEmpty(AppointmentDescription) Then AppointmentDescription = vAppointment.Description
          vAppointment.ModifyCalendarEntry(ContactNumber, vStart, vEnd, SessionNumber, AppointmentDescription)
        Else
          vAppointment.Create(ContactNumber, vStart, vEnd, ContactAppointment.ContactAppointmentTypes.catPersonnel, AppointmentDescription, SessionNumber)
          vAppointment.Save()
        End If
      Else
        vAppointment.Init()
        vAppointment.Create(ContactNumber, vStart, vEnd, ContactAppointment.ContactAppointmentTypes.catPersonnel, AppointmentDescription, SessionNumber)
        vAppointment.Save()
      End If
      If Confirmed.Length > 0 And (mvExisting = False Or mvClassFields.Item(EventPersonnelFields.Confirmed).SetValue.Length = 0) Then
        mvClassFields(EventPersonnelFields.ConfirmedBy).Value = mvEnv.User.UserID
      End If
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Overrides Sub Delete(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      Dim vAppointment As New ContactAppointment(mvEnv)
      vAppointment.Init(IntegerValue(mvClassFields.Item(EventPersonnelFields.ContactNumber).SetValue), _
                 ContactAppointment.GetAppointmentTypeCode(ContactAppointment.ContactAppointmentTypes.catPersonnel), _
                 IntegerValue(mvClassFields.Item(EventPersonnelFields.SessionNumber).SetValue))
      If vAppointment.Existing Then vAppointment.Delete()
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Sub SaveWithoutAppointment(ByVal pAmendedBy As String, Optional ByRef pAHC As ClassFields.AmendmentHistoryCreation = ClassFields.AmendmentHistoryCreation.ahcDefault)
      SetValid()
      If mvClassFields.Item(EventPersonnelFields.Confirmed).Value.Length > 0 And (mvExisting = False Or mvClassFields.Item(EventPersonnelFields.Confirmed).SetValue = "") Then
        mvClassFields(EventPersonnelFields.ConfirmedBy).Value = mvEnv.User.UserID
      End If
      mvClassFields.Save(mvEnv, mvExisting, pAmendedBy, mvClassFields.CreateAmendmentHistory(mvEnv, pAHC), 0)
    End Sub

    Friend Sub InitFromPersonnel(ByVal pEvent As CDBEvent, ByRef pPersonnel As EventPersonnel, ByRef pNewEvent As CDBEvent)
      Dim vDays As Long
      With pPersonnel
        mvClassFields.Item(EventPersonnelFields.SessionNumber).IntegerValue = pNewEvent.Sessions(pEvent.Sessions.IndexOf(pEvent.Sessions.Item(.SessionNumber.ToString))).SessionNumber
        mvClassFields.Item(EventPersonnelFields.ContactNumber).IntegerValue = .ContactNumber
        mvClassFields.Item(EventPersonnelFields.AddressNumber).IntegerValue = .AddressNumber
        mvClassFields.Item(EventPersonnelFields.Task).Value = .Task
        vDays = DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(pEvent.StartDate), CDate(pPersonnel.StartDate))
        mvClassFields.Item(EventPersonnelFields.StartDate).Value = CDate(pNewEvent.StartDate).AddDays(vDays).ToString(CAREDateFormat)
        mvClassFields.Item(EventPersonnelFields.StartTime).Value = .StartTime
        vDays = DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(pEvent.StartDate), CDate(pPersonnel.EndDate))
        mvClassFields.Item(EventPersonnelFields.EndDate).Value = CDate(pNewEvent.StartDate).AddDays(vDays).ToString(CAREDateFormat)
        mvClassFields.Item(EventPersonnelFields.EndTime).Value = .EndTime
        mvClassFields.Item(EventPersonnelFields.PersonnelFunction).Value = .PersonnelFunction
        mvClassFields.Item(EventPersonnelFields.Position).Value = .Position
        mvClassFields.Item(EventPersonnelFields.OrganisationName).Value = .OrganisationName
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataEventFinancialAnalysis) Then
          mvClassFields.Item(EventPersonnelFields.IssueResources).Bool = .IssueResources
        End If
      End With
    End Sub

#End Region

  End Class
End Namespace
