Namespace Access

  Partial Public Class CDBEvent
    Inherits CARERecord

#Region "AutoGenerated Code"

    Public Enum EventCandidateNumberingMethods
      ecnmFirstSessionSequence
      ecnmBlockSessionsSequence
    End Enum

    Private mvLowestSessionNumber As Integer
    Private mvPricingMatrixValid As Boolean

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum EventFields
      AllFields = 0
      EventNumber
      EventDesc
      Venue
      VenueReference
      VenueConfirmed
      VenueConfirmedBy
      Branch
      StartDate
      External
      AttendeesChecked
      EvaluationsProcessed
      CancellationReason
      CancelledOn
      CancelledBy
      Booking
      BookingsClose
      MultiSession
      FreeOfCharge
      NextSessionNumber
      NextBookingNumber
      NextOptionNumber
      Source
      QpFormType
      QpLinkNumber
      Template
      MoveSessionDates
      MasterAction
      EventReference
      CandidateNumberingMethod
      FirstCandidateNumber
      CandidateNumberBlockSize
      EligibilityCheckRequired
      EligibilityCheckText
      DeferredBookingAct
      DeferredBookingActValue
      RejectedBookingAct
      RejectedBookingActValue
      Department
      EventStatus
      ChargeForWaiting
      WaitingListControlMethod
      EventGroup
      LongDescription
      EventClass
      ActivityGroup
      RelationshipGroup
      TargetIncome
      SponsoredCosts
      SponsorshipIncome
      DonationIncome
      BookingIncome
      OtherIncome
      TotalIncome
      TotalCosts
      TotalExpenditure
      ReturnOnInvestment
      DelegateContribution
      GiftAidDeclarationCount
      GiftAidDeclarationValue
      FinancialLastCalculated
      BalanceBookingFee
      BalanceBookingDue
      MinimumSponsorshipAmount
      SponsorshipDue
      PledgedAmountDue
      SponsorshipLastCalculated
      SponsorshipProduct
      SponsorshipRate
      NumberOfBookings
      NameAttendees
      EventPricingMatrix
      WebPublish
      AdminEmailAddress
      IncludeView
      ExcludeView
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("event_number", CDBField.FieldTypes.cftLong)
        .Add("event_desc")
        .Add("venue")
        .Add("venue_reference")
        .Add("venue_confirmed", CDBField.FieldTypes.cftDate)
        .Add("venue_confirmed_by")
        .Add("branch")
        .Add("start_date", CDBField.FieldTypes.cftDate)
        .Add("external")
        .Add("attendees_checked", CDBField.FieldTypes.cftDate)
        .Add("evaluations_processed", CDBField.FieldTypes.cftDate)
        .Add("cancellation_reason")
        .Add("cancelled_on", CDBField.FieldTypes.cftDate)
        .Add("cancelled_by")
        .Add("booking")
        .Add("bookings_close", CDBField.FieldTypes.cftDate)
        .Add("multi_session")
        .Add("free_of_charge")
        .Add("next_session_number", CDBField.FieldTypes.cftInteger)
        .Add("next_booking_number", CDBField.FieldTypes.cftInteger)
        .Add("next_option_number", CDBField.FieldTypes.cftInteger)
        .Add("source")
        .Add("qp_form_type", CDBField.FieldTypes.cftInteger)
        .Add("qp_link_number", CDBField.FieldTypes.cftLong)
        .Add("template")
        .Add("move_session_dates")
        .Add("master_action", CDBField.FieldTypes.cftLong)
        .Add("event_reference")
        .Add("candidate_numbering_method")
        .Add("first_candidate_number", CDBField.FieldTypes.cftLong)
        .Add("candidate_number_block_size", CDBField.FieldTypes.cftLong)
        .Add("eligibility_check_required")
        .Add("eligibility_check_text", CDBField.FieldTypes.cftMemo)
        .Add("deferred_booking_act")
        .Add("deferred_booking_act_value")
        .Add("rejected_booking_act")
        .Add("rejected_booking_act_value")
        .Add("department")
        .Add("event_status")
        .Add("charge_for_waiting")
        .Add("waiting_list_control_method")
        .Add("event_group")
        .Add("long_description", CDBField.FieldTypes.cftMemo)
        .Add("event_class")
        .Add("activity_group")
        .Add("relationship_group")
        .Add("target_income", CDBField.FieldTypes.cftNumeric)
        .Add("sponsored_costs", CDBField.FieldTypes.cftNumeric)
        .Add("sponsorship_income", CDBField.FieldTypes.cftNumeric)
        .Add("donation_income", CDBField.FieldTypes.cftNumeric)
        .Add("booking_income", CDBField.FieldTypes.cftNumeric)
        .Add("other_income", CDBField.FieldTypes.cftNumeric)
        .Add("total_income", CDBField.FieldTypes.cftNumeric)
        .Add("total_costs", CDBField.FieldTypes.cftNumeric)
        .Add("total_expenditure", CDBField.FieldTypes.cftNumeric)
        .Add("return_on_investment", CDBField.FieldTypes.cftNumeric)
        .Add("delegate_contribution", CDBField.FieldTypes.cftNumeric)
        .Add("gift_aid_declaration_count", CDBField.FieldTypes.cftLong)
        .Add("gift_aid_declaration_value", CDBField.FieldTypes.cftNumeric)
        .Add("financial_last_calculated", CDBField.FieldTypes.cftDate)
        .Add("balance_booking_fee", CDBField.FieldTypes.cftNumeric)
        .Add("balance_booking_due", CDBField.FieldTypes.cftDate)
        .Add("minimum_sponsorship_amount", CDBField.FieldTypes.cftNumeric)
        .Add("sponsorship_due", CDBField.FieldTypes.cftDate)
        .Add("pledged_amount_due", CDBField.FieldTypes.cftDate)
        .Add("sponsorship_last_calculated", CDBField.FieldTypes.cftDate)
        .Add("sponsorship_product")
        .Add("sponsorship_rate")
        .Add("number_of_bookings", CDBField.FieldTypes.cftLong)
        .Add("name_attendees")
        .Add("event_pricing_matrix")
        .Add("web_publish")
        .Add("admin_email_address")
        .Add("include_view")
        .Add("exclude_view")

        .Item(EventFields.EventNumber).PrimaryKey = True

        .Item(EventFields.External).SpecialColumn = True

        .Item(EventFields.NumberOfBookings).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataEventFixedPrice)
        .Item(EventFields.NameAttendees).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataEventFixedPrice)
        .Item(EventFields.EventPricingMatrix).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataEventPricingMatrix)
        .Item(EventFields.WebPublish).PrefixRequired = True
        .Item(EventFields.WebPublish).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbEventWebPublish)
        .Item(EventFields.AdminEmailAddress).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbAdminEmailAddress)
        .Item(EventFields.IncludeView).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbExamTraderDefaults)
        .Item(EventFields.ExcludeView).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbExamTraderDefaults)

        .SetControlNumberField(EventFields.EventNumber, "EV")
      End With
      mvEventTopics = Nothing
      mvPricingMatrixValid = False
      CalculateTotalsErrorCount = 0
      CalculateTotalsErrorFields = New StringBuilder()
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "e"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "events"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property EventNumber() As Integer
      Get
        Return mvClassFields(EventFields.EventNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property EventDesc() As String
      Get
        Return mvClassFields(EventFields.EventDesc).Value
      End Get
    End Property
    Public ReadOnly Property Venue() As String
      Get
        Return mvClassFields(EventFields.Venue).Value
      End Get
    End Property
    Public ReadOnly Property VenueReference() As String
      Get
        Return mvClassFields(EventFields.VenueReference).Value
      End Get
    End Property
    Public ReadOnly Property VenueConfirmed() As String
      Get
        Return mvClassFields(EventFields.VenueConfirmed).Value
      End Get
    End Property
    Public ReadOnly Property VenueConfirmedBy() As String
      Get
        Return mvClassFields(EventFields.VenueConfirmedBy).Value
      End Get
    End Property
    Public ReadOnly Property Branch() As String
      Get
        Return mvClassFields(EventFields.Branch).Value
      End Get
    End Property
    Public ReadOnly Property StartDate() As String
      Get
        Return mvClassFields(EventFields.StartDate).Value
      End Get
    End Property
    Public ReadOnly Property External() As Boolean
      Get
        Return mvClassFields(EventFields.External).Bool
      End Get
    End Property
    Public ReadOnly Property AttendeesChecked() As String
      Get
        Return mvClassFields(EventFields.AttendeesChecked).Value
      End Get
    End Property
    Public ReadOnly Property EvaluationsProcessed() As String
      Get
        Return mvClassFields(EventFields.EvaluationsProcessed).Value
      End Get
    End Property
    Public ReadOnly Property CancellationReason() As String
      Get
        Return mvClassFields(EventFields.CancellationReason).Value
      End Get
    End Property
    Public ReadOnly Property CancelledOn() As String
      Get
        Return mvClassFields(EventFields.CancelledOn).Value
      End Get
    End Property
    Public ReadOnly Property CancelledBy() As String
      Get
        Return mvClassFields(EventFields.CancelledBy).Value
      End Get
    End Property
    Public ReadOnly Property Booking() As Boolean
      Get
        Return mvClassFields(EventFields.Booking).Bool
      End Get
    End Property
    Public ReadOnly Property BookingsClose() As String
      Get
        Return mvClassFields(EventFields.BookingsClose).Value
      End Get
    End Property
    Public ReadOnly Property MultiSession() As Boolean
      Get
        Return mvClassFields(EventFields.MultiSession).Bool
      End Get
    End Property
    Public ReadOnly Property FreeOfCharge() As Boolean
      Get
        Return mvClassFields(EventFields.FreeOfCharge).Bool
      End Get
    End Property
    Public ReadOnly Property NextSessionNumber() As Integer
      Get
        Return mvClassFields(EventFields.NextSessionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property NextBookingNumber() As Integer
      Get
        Return mvClassFields(EventFields.NextBookingNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property NextOptionNumber() As Integer
      Get
        Return mvClassFields(EventFields.NextOptionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Source() As String
      Get
        Return mvClassFields(EventFields.Source).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(EventFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(EventFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property QpFormType() As String
      Get
        Return mvClassFields(EventFields.QpFormType).Value
      End Get
    End Property
    Public ReadOnly Property QpLinkNumber() As Integer
      Get
        Return mvClassFields(EventFields.QpLinkNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Template() As Boolean
      Get
        Return mvClassFields(EventFields.Template).Bool
      End Get
    End Property
    Public ReadOnly Property MoveSessionDates() As Boolean
      Get
        Return mvClassFields(EventFields.MoveSessionDates).Bool
      End Get
    End Property
    Public ReadOnly Property MasterAction() As Integer
      Get
        Return mvClassFields(EventFields.MasterAction).IntegerValue
      End Get
    End Property
    Public ReadOnly Property EventReference() As String
      Get
        Return mvClassFields(EventFields.EventReference).Value
      End Get
    End Property
    Public Property CandidateNumberingMethod() As EventCandidateNumberingMethods
      Get
        Select Case mvClassFields.Item(EventFields.CandidateNumberingMethod).Value
          Case "B"
            CandidateNumberingMethod = EventCandidateNumberingMethods.ecnmBlockSessionsSequence
          Case Else
            CandidateNumberingMethod = EventCandidateNumberingMethods.ecnmFirstSessionSequence
        End Select
      End Get
      Set(ByVal Value As EventCandidateNumberingMethods)
        Select Case Value
          Case EventCandidateNumberingMethods.ecnmBlockSessionsSequence
            mvClassFields.Item(EventFields.CandidateNumberingMethod).Value = "B"
          Case Else
            mvClassFields.Item(EventFields.CandidateNumberingMethod).Value = "I"
        End Select
      End Set
    End Property
    Public ReadOnly Property FirstCandidateNumber() As Integer
      Get
        Return mvClassFields(EventFields.FirstCandidateNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CandidateNumberBlockSize() As Integer
      Get
        Return mvClassFields(EventFields.CandidateNumberBlockSize).IntegerValue
      End Get
    End Property
    Public ReadOnly Property EligibilityCheckRequired() As Boolean
      Get
        Return mvClassFields(EventFields.EligibilityCheckRequired).Bool
      End Get
    End Property
    Public ReadOnly Property EligibilityCheckText() As String
      Get
        Return mvClassFields(EventFields.EligibilityCheckText).Value
      End Get
    End Property
    Public ReadOnly Property DeferredBookingAct() As String
      Get
        Return mvClassFields(EventFields.DeferredBookingAct).Value
      End Get
    End Property
    Public ReadOnly Property DeferredBookingActValue() As String
      Get
        Return mvClassFields(EventFields.DeferredBookingActValue).Value
      End Get
    End Property
    Public ReadOnly Property RejectedBookingAct() As String
      Get
        Return mvClassFields(EventFields.RejectedBookingAct).Value
      End Get
    End Property
    Public ReadOnly Property RejectedBookingActValue() As String
      Get
        Return mvClassFields(EventFields.RejectedBookingActValue).Value
      End Get
    End Property
    Public ReadOnly Property Department() As String
      Get
        Return mvClassFields(EventFields.Department).Value
      End Get
    End Property
    Public ReadOnly Property EventStatus() As String
      Get
        Return mvClassFields(EventFields.EventStatus).Value
      End Get
    End Property
    Public ReadOnly Property ChargeForWaiting() As Boolean
      Get
        Return mvClassFields(EventFields.ChargeForWaiting).Bool
      End Get
    End Property
    Public ReadOnly Property WaitingListControlMethod() As String
      Get
        Return mvClassFields(EventFields.WaitingListControlMethod).Value
      End Get
    End Property
    Public Property EventGroupCode() As String
      Get
        Return mvClassFields(EventFields.EventGroup).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(EventFields.EventGroup).Value = value
      End Set
    End Property
    Public ReadOnly Property LongDescription() As String
      Get
        Return mvClassFields(EventFields.LongDescription).Value
      End Get
    End Property
    Public ReadOnly Property EventClass() As String
      Get
        Return mvClassFields(EventFields.EventClass).Value
      End Get
    End Property
    Public ReadOnly Property ActivityGroup() As String
      Get
        Return mvClassFields(EventFields.ActivityGroup).Value
      End Get
    End Property
    Public ReadOnly Property RelationshipGroup() As String
      Get
        Return mvClassFields(EventFields.RelationshipGroup).Value
      End Get
    End Property
    Public ReadOnly Property TargetIncome() As Double
      Get
        Return mvClassFields(EventFields.TargetIncome).DoubleValue
      End Get
    End Property
    Public ReadOnly Property SponsoredCosts() As Double
      Get
        Return mvClassFields(EventFields.SponsoredCosts).DoubleValue
      End Get
    End Property
    Public ReadOnly Property SponsorshipIncome() As Double
      Get
        Return mvClassFields(EventFields.SponsorshipIncome).DoubleValue
      End Get
    End Property
    Public ReadOnly Property DonationIncome() As Double
      Get
        Return mvClassFields(EventFields.DonationIncome).DoubleValue
      End Get
    End Property
    Public ReadOnly Property BookingIncome() As Double
      Get
        Return mvClassFields(EventFields.BookingIncome).DoubleValue
      End Get
    End Property
    Public ReadOnly Property OtherIncome() As Double
      Get
        Return mvClassFields(EventFields.OtherIncome).DoubleValue
      End Get
    End Property
    Public ReadOnly Property TotalIncome() As Double
      Get
        Return mvClassFields(EventFields.TotalIncome).DoubleValue
      End Get
    End Property
    Public ReadOnly Property TotalCosts() As Double
      Get
        Return mvClassFields(EventFields.TotalCosts).DoubleValue
      End Get
    End Property
    Public ReadOnly Property TotalExpenditure() As Double
      Get
        Return mvClassFields(EventFields.TotalExpenditure).DoubleValue
      End Get
    End Property
    Public ReadOnly Property ReturnOnInvestment() As Double
      Get
        Return mvClassFields(EventFields.ReturnOnInvestment).DoubleValue
      End Get
    End Property
    Public ReadOnly Property DelegateContribution() As Double
      Get
        Return mvClassFields(EventFields.DelegateContribution).DoubleValue
      End Get
    End Property
    Public ReadOnly Property GiftAidDeclarationCount() As Integer
      Get
        Return mvClassFields(EventFields.GiftAidDeclarationCount).IntegerValue
      End Get
    End Property
    Public ReadOnly Property GiftAidDeclarationValue() As Double
      Get
        Return mvClassFields(EventFields.GiftAidDeclarationValue).DoubleValue
      End Get
    End Property
    Public ReadOnly Property FinancialLastCalculated() As String
      Get
        Return mvClassFields(EventFields.FinancialLastCalculated).Value
      End Get
    End Property
    Public ReadOnly Property BalanceBookingFee() As Double
      Get
        Return mvClassFields(EventFields.BalanceBookingFee).DoubleValue
      End Get
    End Property
    Public ReadOnly Property BalanceBookingDue() As String
      Get
        Return mvClassFields(EventFields.BalanceBookingDue).Value
      End Get
    End Property
    Public ReadOnly Property MinimumSponsorshipAmount() As Double
      Get
        Return mvClassFields(EventFields.MinimumSponsorshipAmount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property SponsorshipDue() As String
      Get
        Return mvClassFields(EventFields.SponsorshipDue).Value
      End Get
    End Property
    Public ReadOnly Property PledgedAmountDue() As String
      Get
        Return mvClassFields(EventFields.PledgedAmountDue).Value
      End Get
    End Property
    Public ReadOnly Property SponsorshipLastCalculated() As String
      Get
        Return mvClassFields(EventFields.SponsorshipLastCalculated).Value
      End Get
    End Property
    Public ReadOnly Property SponsorshipProduct() As String
      Get
        Return mvClassFields(EventFields.SponsorshipProduct).Value
      End Get
    End Property
    Public ReadOnly Property SponsorshipRate() As String
      Get
        Return mvClassFields(EventFields.SponsorshipRate).Value
      End Get
    End Property
    Public Property NumberOfBookings() As Integer
      Get
        Return mvClassFields(EventFields.NumberOfBookings).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(EventFields.NumberOfBookings).IntegerValue = value
      End Set
    End Property
    Public ReadOnly Property EventPricingMatrix() As String
      Get
        Return mvClassFields(EventFields.EventPricingMatrix).Value
      End Get
    End Property
    Public ReadOnly Property NameAttendees() As Boolean
      Get
        Return mvClassFields(EventFields.NameAttendees).Bool
      End Get
    End Property
    Public ReadOnly Property WebPublish() As Boolean
      Get
        Return mvClassFields(EventFields.WebPublish).Bool
      End Get
    End Property
    Public ReadOnly Property AdminEmailAddress() As String
      Get
        Return mvClassFields(EventFields.AdminEmailAddress).Value
      End Get
    End Property
    Public ReadOnly Property IncludeView() As String
      Get
        Return mvClassFields(EventFields.IncludeView).Value
      End Get
    End Property
    Public ReadOnly Property ExcludeView() As String
      Get
        Return mvClassFields(EventFields.ExcludeView).Value
      End Get
    End Property

    Public ReadOnly Property PricingMatrixValid() As Boolean
      Get
        Return mvPricingMatrixValid
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Private Const MAX_ITEMS_PER_EVENT As Integer = 9999
    Private Const ITEMS_MULTIPLIER As Integer = MAX_ITEMS_PER_EVENT + 1

    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      mvClassFields(EventFields.EventGroup).Value = EventGroup.DefaultGroupCode

      'Add code here to initialise the class with default values for a new record
      mvClassFields.Item(EventFields.NextSessionNumber).IntegerValue = 1
      mvClassFields.Item(EventFields.NextBookingNumber).IntegerValue = 1
      mvClassFields.Item(EventFields.NextOptionNumber).IntegerValue = 1
      mvClassFields.Item(EventFields.StartDate).Value = TodaysDate()
      mvClassFields.Item(EventFields.Booking).Bool = False

      Dim vNumberingMethod As String = mvEnv.GetConfig("ev_candidate_numbering_method")
      If vNumberingMethod.Length = 0 Then vNumberingMethod = "I"
      mvClassFields.Item(EventFields.CandidateNumberingMethod).Value = vNumberingMethod
      mvClassFields.Item(EventFields.FirstCandidateNumber).IntegerValue = 1
      mvClassFields.Item(EventFields.CandidateNumberBlockSize).IntegerValue = 1000
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataEventWaitingListControl) Then
        mvClassFields.Item(EventFields.WaitingListControlMethod).Value = "A"
        mvClassFields.Item(EventFields.ChargeForWaiting).Value = "Y"
      End If
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataEventFixedPrice) Then
        mvClassFields.Item(EventFields.NameAttendees).Bool = True
      End If
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbEventWebPublish) Then
        mvClassFields.Item(EventFields.WebPublish).Bool = False
      End If
    End Sub

    Public ReadOnly Property DataTableColumns() As String
      Get
        Dim vColumns As New StringBuilder("EventNumber,EventDesc,Reference,Subject,SubjectDesc,SkillLevel,SkillLevelDesc,StartDate,StartTime,EndDate")
        vColumns.Append(",EndTime,Branch,Venue,VenueDesc,VenueReference,Location,NumberOfAttendees,MaximumAttendees,NumberOnWaitingList,NumberInterested")
        vColumns.Append(",Status,StatusDesc,Booking,BookingsClose,AmendedOn,AmendedBy,FreeOfCharge,LongDescription")
        vColumns.Append(",EventClass,EventClassDesc,Notes,Source,SourceDesc,EventGroup,BranchCode")
        vColumns.Append(",TargetIncome,SponsoredCosts,SponsorshipIncome,DonationIncome,BookingIncome,OtherIncome,TotalIncome")
        vColumns.Append(",TotalCosts,TotalExpenditure,ReturnOnInvestment,DelegateContribution,GiftAidDeclarationCount,GiftAidDeclarationValue")
        vColumns.Append(",FinancialLastCalculated,BalanceBookingFee,BalanceBookingDue,MinimumSponsorshipAmount,SponsorshipDue,PledgedAmountDue,SponsorshipLastCalculated")
        vColumns.Append(",MinimumAttendees,TargetAttendees,MaximumOnWaitingList,MultiSession,WaitingListControlMethod,ChargeForWaiting,Template,MoveSessionDates")
        vColumns.Append(",External,Organiser,PriceToAttendees,QpFormType,ActivityGroup,RelationshipGroup,FirstCandidateNumber,CandidateNumberBlockSize,CandidateNumberingMethod")
        vColumns.Append(",EligibilityCheckRequired,EligibilityCheckText,DeferredBookingAct,DeferredBookingActValue,RejectedBookingAct,RejectedBookingActValue,OrganiserReference")
        vColumns.Append(",Department,UserIsOwner,GroupRGBValue,Product,Rate,NameAttendees,NumberOfBookings,BookingStatusDesc,EventPricingMatrix,ContainsBookings,SessionExternalAppID,WebPublish")
        vColumns.Append(",IncludeView,ExcludeView,AdminEmailAddress,CancellationReason,CancellationReasonDesc,CancelledBy,CancelledOn,MasterAction")
        Return vColumns.ToString
      End Get
    End Property

    Public Overrides ReadOnly Property DataTable() As CDBDataTable
      Get
        Dim vTable As New CDBDataTable
        vTable.AddColumnsFromList(DataTableColumns)
        Dim vRow As CDBDataRow = vTable.AddRow
        With vRow
          .Item(1) = CStr(EventNumber)
          .Item(2) = EventDesc
          .Item(3) = EventReference
          .Item(4) = BaseSession.Subject
          .Item(5) = mvEnv.GetDescription("subjects", "subject", BaseSession.Subject)
          .Item(6) = BaseSession.SkillLevel
          .Item(7) = mvEnv.GetDescription("skill_levels", "skill_level", BaseSession.SkillLevel)
          .Item(8) = BaseSession.StartDate
          .Item(9) = BaseSession.StartTime
          .Item(10) = BaseSession.EndDate
          .Item(11) = BaseSession.EndTime
          .Item(12) = mvEnv.GetDescription("branches", "branch", Branch)
          .Item(13) = Venue
          .Item(14) = mvEnv.GetDescription("venues", "venue", Venue)
          .Item(15) = VenueReference
          .Item(16) = BaseSession.Location
          .Item(17) = CStr(BaseSession.NumberOfAttendees)
          .Item(18) = CStr(BaseSession.MaximumAttendees)
          .Item(19) = CStr(BaseSession.NumberOnWaitingList)
          .Item(20) = CStr(BaseSession.NumberInterested)
          .Item(21) = EventStatus
          .Item(22) = mvEnv.GetDescription("event_statuses", "event_status", EventStatus)
          .Item(23) = mvClassFields(EventFields.Booking).Value
          .Item(24) = BookingsClose
          .Item(25) = AmendedOn
          .Item(26) = AmendedBy
          .Item(27) = mvClassFields(EventFields.FreeOfCharge).Value
          .Item(28) = LongDescription
          .Item(29) = EventClass
          .Item(30) = mvEnv.GetDescription("event_classes", "event_class", EventClass)
          .Item(31) = BaseSession.Notes
          .Item(32) = Source
          .Item(33) = mvEnv.GetDescription("sources", "source", Source)
          .Item(34) = EventGroupCode
          .Item(35) = Branch
          .Item(36) = mvClassFields(EventFields.TargetIncome).Value
          .Item(37) = mvClassFields(EventFields.SponsoredCosts).Value
          .Item(38) = mvClassFields(EventFields.SponsorshipIncome).Value
          .Item(39) = mvClassFields(EventFields.DonationIncome).Value
          .Item(40) = mvClassFields(EventFields.BookingIncome).Value
          .Item(41) = mvClassFields(EventFields.OtherIncome).Value
          .Item(42) = mvClassFields(EventFields.TotalIncome).Value
          .Item(43) = mvClassFields(EventFields.TotalCosts).Value
          .Item(44) = mvClassFields(EventFields.TotalExpenditure).Value
          .Item(45) = mvClassFields(EventFields.ReturnOnInvestment).Value
          .Item(46) = mvClassFields(EventFields.DelegateContribution).Value
          .Item(47) = mvClassFields(EventFields.GiftAidDeclarationCount).Value
          .Item(48) = mvClassFields(EventFields.GiftAidDeclarationValue).Value
          .Item(49) = mvClassFields(EventFields.FinancialLastCalculated).Value
          .Item(50) = mvClassFields(EventFields.BalanceBookingFee).Value
          .Item(51) = mvClassFields(EventFields.BalanceBookingDue).Value
          .Item(52) = mvClassFields(EventFields.MinimumSponsorshipAmount).Value
          .Item(53) = mvClassFields(EventFields.SponsorshipDue).Value
          .Item(54) = mvClassFields(EventFields.PledgedAmountDue).Value
          .Item(55) = mvClassFields(EventFields.SponsorshipLastCalculated).Value

          .Item(56) = CStr(BaseSession.MinimumAttendees)
          .Item(57) = CStr(BaseSession.TargetAttendees)
          .Item(58) = CStr(BaseSession.MaximumOnWaitingList)
          .Item(59) = mvClassFields(EventFields.MultiSession).Value
          .Item(60) = mvClassFields(EventFields.WaitingListControlMethod).Value
          .Item(61) = mvClassFields(EventFields.ChargeForWaiting).Value
          .Item(62) = mvClassFields(EventFields.Template).Value
          .Item(63) = mvClassFields(EventFields.MoveSessionDates).Value
          .Item(64) = mvClassFields(EventFields.External).Value
          .Item(65) = Organiser.Organiser
          .Item(66) = Organiser.PriceToAttendees
          If mvClassFields(EventFields.QpFormType).Value <> "0" Then .Item(67) = mvClassFields(EventFields.QpFormType).Value
          .Item(68) = mvClassFields(EventFields.ActivityGroup).Value
          .Item(69) = mvClassFields(EventFields.RelationshipGroup).Value
          .Item(70) = mvClassFields(EventFields.FirstCandidateNumber).Value
          .Item(71) = mvClassFields(EventFields.CandidateNumberBlockSize).Value
          .Item(72) = mvClassFields(EventFields.CandidateNumberingMethod).Value
          .Item(73) = mvClassFields(EventFields.EligibilityCheckRequired).Value
          .Item(74) = mvClassFields(EventFields.EligibilityCheckText).Value
          .Item(75) = mvClassFields(EventFields.DeferredBookingAct).Value
          .Item(76) = mvClassFields(EventFields.DeferredBookingActValue).Value
          .Item(77) = mvClassFields(EventFields.RejectedBookingAct).Value
          .Item(78) = mvClassFields(EventFields.RejectedBookingActValue).Value
          .Item(79) = Organiser.Reference
          .Item(80) = Department
          .Item(81) = If(UserIsOwner, "Y", "N")
          .Item(82) = CStr(mvEnv.EntityGroups(EventGroupCode).RgbValue)
          .Item(83) = mvClassFields(EventFields.SponsorshipProduct).Value
          .Item(84) = mvClassFields(EventFields.SponsorshipRate).Value
          .Item(85) = If(NameAttendees, "Y", "N")
          .Item(86) = mvClassFields(EventFields.NumberOfBookings).Value
          .Item(87) = BookingStatusDesc
          .Item(88) = mvClassFields.Item(EventFields.EventPricingMatrix).Value
          .Item(89) = If(ContainsBookings = True, "Y", "N")
          .Item(90) = BaseSession.ExternalAppointmentId
          .Item(91) = mvClassFields(EventFields.WebPublish).Value
          .Item(92) = mvClassFields(EventFields.IncludeView).Value
          .Item(93) = mvClassFields(EventFields.ExcludeView).Value
          .Item(94) = mvClassFields(EventFields.AdminEmailAddress).Value

          .Item(95) = mvClassFields(EventFields.CancellationReason).Value
          .Item(96) = mvEnv.GetDescription("cancellation_reasons", "cancellation_reason", CancellationReason)
          .Item(97) = mvClassFields(EventFields.CancelledBy).Value
          .Item(98) = mvClassFields(EventFields.CancelledOn).Value
          .Item(99) = If(HasActions = True, mvClassFields.Item(EventFields.MasterAction).Value, "0")    'Only return the MasterAction if it is linked to Actions
        End With
        Return vTable
      End Get
    End Property

    Public ReadOnly Property BookingStatusDesc() As String
      Get
        If mvExisting Then
          Dim vEventFull As Boolean
          Dim vSessionFull As Boolean
          For Each vSession As EventSession In Sessions
            If vSession.NumberOfAttendees >= vSession.MaximumAttendees Then
              If vSession.SessionNumber = LowestSessionNumber Then
                vEventFull = True
              Else
                vSessionFull = True
              End If
            End If
          Next vSession
          If vEventFull Then
            Return ProjectText.String17129 'FULLY BOOKED
          ElseIf vSessionFull Then
            Return ProjectText.String17130 'SOME SESSIONS FULLY BOOKED
          End If
        Else
          Return ""
        End If
        Return ""
      End Get
    End Property

    Public ReadOnly Property ContainsBookings() As Boolean
      Get
        If mvExisting Then
          Return (mvEnv.Connection.GetCount("event_bookings", Nothing, "event_number = " & EventNumber) > 0)
        Else
          Return False
        End If
      End Get
    End Property

    Public Function UserIsOwner() As Boolean
      If mvEnv.GetConfigOption("ev_ownership") Then
        If Existing = False Then 'Creating new - grant access
          Return True
        ElseIf Department.Length = 0 Then
          Return True
        Else
          Return Owners.ContainsKey(mvEnv.User.Department)
        End If
      Else
        Return True
      End If
    End Function

    Public ReadOnly Property Owners() As CollectionList(Of EventOwner)
      Get
        If mvEventOwners Is Nothing Then InitEventOwners()
        Return mvEventOwners
      End Get
    End Property

    Public ReadOnly Property BaseItemNumber() As Integer
      Get
        Return EventNumber * ITEMS_MULTIPLIER
      End Get
    End Property

    Public ReadOnly Property LowestSessionNumber() As Integer
      Get
        If mvLowestSessionNumber = 0 Then
          Dim vWhereClause As New CDBFields
          vWhereClause.Add("event_number", EventNumber)
          vWhereClause.Add("session_type", "0")

          Dim vSQLStatement As New SQLStatement(mvEnv.Connection, "session_number", "sessions", vWhereClause)
          Dim vDataTable As DataTable = vSQLStatement.GetDataTable
          If vDataTable.Rows.Count > 0 Then
            mvLowestSessionNumber = CInt(vDataTable.Rows(0).Item(0).ToString)
          End If
        End If
        Return mvLowestSessionNumber
      End Get
    End Property

    Public ReadOnly Property MaxItemNumber() As Integer
      Get
        Return (EventNumber * ITEMS_MULTIPLIER) + MAX_ITEMS_PER_EVENT
      End Get
    End Property

    Public Sub UpperCaseEventReference()
      mvClassFields.Item(EventFields.EventReference).Value = EventReference.ToUpper
    End Sub

    Public Sub CalculateTotals()
      Dim vWhereFields As New CDBFields
      Dim vRecordSet As CDBRecordSet
      Dim vNotInSQL As String
      Dim vSundryCost As New SundryCost
      Dim vDLU As New DeclarationLinesUnclaimed(mvEnv)
      Dim vDPL As New DeclarationPotentialLine
      Dim vDTC As New DeclarationTaxClaim

      'Each calculated figure will be compared to the maximum allowed (according to maintenance attributes)
      'If it exceeds the maximum then it's not updated and error returned
      Dim vCalculatedValue As Double = 0
      Dim vMaxValue As Double = 0

      '(1) Sponsored Costs
      vMaxValue = 0
      If MaintenanceAttributes.Count > 0 AndAlso MaintenanceAttributes.ContainsKey(mvClassFields.Item(EventFields.SponsoredCosts).Name) Then
        vMaxValue = DoubleValue(MaintenanceAttributes(mvClassFields.Item(EventFields.SponsoredCosts).Name).MaximumValue)
      End If
      vSundryCost.Init(mvEnv)
      vWhereFields.Add("sc.record_type", CDBField.FieldTypes.cftCharacter, vSundryCost.GetSundryCostTypeCode(SundryCost.SundryCostTypes.sctEvent))
      vWhereFields.Add("sc.unique_id", EventNumber)
      vWhereFields.Add("sc.contact_number", CDBField.FieldTypes.cftLong, "", CDBField.FieldWhereOperators.fwoNotEqual)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT SUM(sponsorship_value) AS sponsorship_total FROM sundry_costs sc WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      vCalculatedValue = 0
      If vRecordSet.Fetch Then
        vCalculatedValue = vRecordSet.Fields(1).DoubleValue
      End If
      vRecordSet.CloseRecordSet()
      If vMaxValue > 0 AndAlso vCalculatedValue.CompareTo(vMaxValue) > 0 Then
        SetCalculateTotalsError(mvClassFields.Item(EventFields.SponsoredCosts).Caption)
      Else
        mvClassFields(EventFields.SponsoredCosts).Value = FixedFormat(vCalculatedValue)
      End If
      CalculateSponsorshipIncome()

      '(3) Donation Income
      vMaxValue = 0
      vCalculatedValue = 0
      If MaintenanceAttributes.Count > 0 AndAlso MaintenanceAttributes.ContainsKey(mvClassFields.Item(EventFields.DonationIncome).Name) Then
        vMaxValue = DoubleValue(MaintenanceAttributes(mvClassFields.Item(EventFields.DonationIncome).Name).MaximumValue)
      End If
      vWhereFields.Clear()
      mvClassFields(EventFields.DonationIncome).Value = CStr(0)
      vWhereFields.Add("es.event_number", EventNumber)
      vWhereFields.Add("fhd.source", CDBField.FieldTypes.cftLong, "es.source")
      vWhereFields.Add("p.product", CDBField.FieldTypes.cftLong, "fhd.product", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("p.donation", CDBField.FieldTypes.cftCharacter, "Y", CDBField.FieldWhereOperators.fwoEqual)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT SUM(fhd.amount) AS fhd_total FROM event_sources es, financial_history_details fhd, products p WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      If vRecordSet.Fetch Then vCalculatedValue = vRecordSet.Fields(1).DoubleValue
      vRecordSet.CloseRecordSet()

      vWhereFields.Clear()
      vWhereFields.Add("efl.event_number", EventNumber)
      vWhereFields.Add("fhd.batch_number", CDBField.FieldTypes.cftLong, "efl.batch_number")
      vWhereFields.Add("fhd.transaction_number", CDBField.FieldTypes.cftLong, "efl.transaction_number")
      vWhereFields.Add("fhd.line_number", CDBField.FieldTypes.cftLong, "efl.line_number")
      vWhereFields.Add("p.product", CDBField.FieldTypes.cftLong, "fhd.product", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("p.donation", CDBField.FieldTypes.cftCharacter, "Y", CDBField.FieldWhereOperators.fwoEqual)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT SUM(fhd.amount) AS fhd_total FROM event_financial_links efl, financial_history_details fhd, products p WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      If vRecordSet.Fetch Then vCalculatedValue += vRecordSet.Fields(1).DoubleValue
      vRecordSet.CloseRecordSet()
      vCalculatedValue = FixTwoPlaces(vCalculatedValue)
      If vMaxValue > 0 AndAlso vCalculatedValue.CompareTo(vMaxValue) > 0 Then
        SetCalculateTotalsError(mvClassFields.Item(EventFields.DonationIncome).Caption)
      Else
        mvClassFields(EventFields.DonationIncome).Value = FixedFormat(vCalculatedValue)
      End If

      '(4) Booking Income
      vMaxValue = 0
      vCalculatedValue = 0
      If MaintenanceAttributes.Count > 0 AndAlso MaintenanceAttributes.ContainsKey(mvClassFields.Item(EventFields.BookingIncome).Name) Then
        vMaxValue = DoubleValue(MaintenanceAttributes(mvClassFields.Item(EventFields.BookingIncome).Name).MaximumValue)
      End If
      vWhereFields.Clear()
      vWhereFields.Add("eb.event_number", EventNumber, CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("eb.cancellation_reason", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("fhd.batch_number", CDBField.FieldTypes.cftLong, "eb.batch_number", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("fhd.transaction_number", CDBField.FieldTypes.cftLong, "eb.transaction_number", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("fhd.line_number", CDBField.FieldTypes.cftLong, "eb.line_number", CDBField.FieldWhereOperators.fwoEqual)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT SUM(fhd.amount) AS fhd_total FROM event_bookings eb, financial_history_details fhd WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      If vRecordSet.Fetch Then vCalculatedValue = vRecordSet.Fields(1).DoubleValue
      vRecordSet.CloseRecordSet()
      If vMaxValue > 0 AndAlso vCalculatedValue.CompareTo(vMaxValue) > 0 Then
        SetCalculateTotalsError(mvClassFields.Item(EventFields.BookingIncome).Caption)
      Else
        mvClassFields(EventFields.BookingIncome).Value = FixedFormat(vCalculatedValue)
      End If

      '(5) Other Income
      vWhereFields.Clear()
      vMaxValue = 0
      vCalculatedValue = 0
      If MaintenanceAttributes.Count > 0 AndAlso MaintenanceAttributes.ContainsKey(mvClassFields.Item(EventFields.OtherIncome).Name) Then
        vMaxValue = DoubleValue(MaintenanceAttributes(mvClassFields.Item(EventFields.OtherIncome).Name).MaximumValue)
      End If
      vWhereFields.Add("es.event_number", EventNumber)
      vWhereFields.Add("fhd.source", CDBField.FieldTypes.cftLong, "es.source")
      vWhereFields.Add("p.product", CDBField.FieldTypes.cftLong, "fhd.product", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("p.donation", CDBField.FieldTypes.cftCharacter, "N", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("p.sponsorship_event", CDBField.FieldTypes.cftCharacter, "N", CDBField.FieldWhereOperators.fwoNullOrEqual)
      vNotInSQL = "SELECT batch_number from event_bookings eb WHERE eb.batch_number = fhd.batch_number AND eb.transaction_number = fhd.transaction_number AND eb.line_number = fhd.line_number"
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT SUM(fhd.amount) AS fhd_total FROM event_sources es, financial_history_details fhd, products p WHERE " & mvEnv.Connection.WhereClause(vWhereFields) & " AND fhd.batch_number NOT IN (" & vNotInSQL & ")")
      If vRecordSet.Fetch Then vCalculatedValue = vRecordSet.Fields(1).DoubleValue
      vRecordSet.CloseRecordSet()

      vWhereFields.Clear()
      vWhereFields.Add("efl.event_number", EventNumber)
      vWhereFields.Add("fhd.batch_number", CDBField.FieldTypes.cftLong, "efl.batch_number")
      vWhereFields.Add("fhd.transaction_number", CDBField.FieldTypes.cftLong, "efl.transaction_number")
      vWhereFields.Add("fhd.line_number", CDBField.FieldTypes.cftLong, "efl.line_number")
      vWhereFields.Add("p.product", CDBField.FieldTypes.cftLong, "fhd.product", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("p.donation", CDBField.FieldTypes.cftCharacter, "N", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("p.sponsorship_event", CDBField.FieldTypes.cftCharacter, "N", CDBField.FieldWhereOperators.fwoNullOrEqual)
      vNotInSQL = "SELECT batch_number from event_bookings eb WHERE eb.batch_number = fhd.batch_number AND eb.transaction_number = fhd.transaction_number AND eb.line_number = fhd.line_number"
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT SUM(fhd.amount) AS fhd_total FROM event_financial_links efl, financial_history_details fhd, products p WHERE " & mvEnv.Connection.WhereClause(vWhereFields) & " AND fhd.batch_number NOT IN (" & vNotInSQL & ")")
      If vRecordSet.Fetch Then vCalculatedValue += vRecordSet.Fields(1).DoubleValue
      vRecordSet.CloseRecordSet()
      vCalculatedValue = FixTwoPlaces(vCalculatedValue)
      If vMaxValue > 0 AndAlso vCalculatedValue.CompareTo(vMaxValue) > 0 Then
        SetCalculateTotalsError(mvClassFields.Item(EventFields.OtherIncome).Caption)
      Else
        mvClassFields(EventFields.OtherIncome).Value = FixedFormat(vCalculatedValue)
      End If

      '(6) Total Income
      vMaxValue = 0
      If MaintenanceAttributes.Count > 0 AndAlso MaintenanceAttributes.ContainsKey(mvClassFields.Item(EventFields.TotalIncome).Name) Then
        vMaxValue = DoubleValue(MaintenanceAttributes(mvClassFields.Item(EventFields.TotalIncome).Name).MaximumValue)
      End If
      vCalculatedValue = (mvClassFields(EventFields.DonationIncome).DoubleValue + mvClassFields(EventFields.SponsorshipIncome).DoubleValue + mvClassFields(EventFields.BookingIncome).DoubleValue + mvClassFields(EventFields.OtherIncome).DoubleValue)
      If vMaxValue > 0 AndAlso vCalculatedValue.CompareTo(vMaxValue) > 0 Then
        SetCalculateTotalsError(mvClassFields.Item(EventFields.TotalIncome).Caption)
      Else
        mvClassFields(EventFields.TotalIncome).Value = FixedFormat(vCalculatedValue)
      End If

      '(7) Total Costs
      vMaxValue = 0
      vCalculatedValue = 0
      vWhereFields.Clear()
      vWhereFields.Add("sc.record_type", CDBField.FieldTypes.cftCharacter, vSundryCost.GetSundryCostTypeCode(SundryCost.SundryCostTypes.sctEvent))
      vWhereFields.Add("sc.unique_id", EventNumber)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT SUM(full_amount) AS cost_total FROM sundry_costs sc WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      If vRecordSet.Fetch Then vCalculatedValue = vRecordSet.Fields(1).DoubleValue
      vRecordSet.CloseRecordSet()
      Dim vTotalCosts As Double = vCalculatedValue

      '(8) Total Expenditure
      'This is the figure calculated above for Total Costs
      vMaxValue = 0
      If MaintenanceAttributes.Count > 0 AndAlso MaintenanceAttributes.ContainsKey(mvClassFields.Item(EventFields.TotalExpenditure).Name) Then
        vMaxValue = DoubleValue(MaintenanceAttributes(mvClassFields.Item(EventFields.TotalExpenditure).Name).MaximumValue)
      End If
      If vMaxValue > 0 AndAlso vCalculatedValue.CompareTo(vMaxValue) > 0 Then
        SetCalculateTotalsError(mvClassFields.Item(EventFields.TotalExpenditure).Caption)
      Else
        mvClassFields(EventFields.TotalExpenditure).Value = FixedFormat(vCalculatedValue)
      End If

      vMaxValue = 0
      If MaintenanceAttributes.Count > 0 AndAlso MaintenanceAttributes.ContainsKey(mvClassFields.Item(EventFields.TotalCosts).Name) Then
        vMaxValue = DoubleValue(MaintenanceAttributes(mvClassFields.Item(EventFields.TotalCosts).Name).MaximumValue)
      End If
      vWhereFields.Add("sc.amount", CDBField.FieldTypes.cftNumeric, "0", CDBField.FieldWhereOperators.fwoEqual)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT SUM(sponsorship_value) AS sponsorship_total FROM sundry_costs sc WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      If vRecordSet.Fetch Then vTotalCosts += vRecordSet.Fields(1).DoubleValue
      vRecordSet.CloseRecordSet()
      vTotalCosts = FixTwoPlaces(vTotalCosts)
      If vMaxValue > 0 AndAlso vTotalCosts.CompareTo(vMaxValue) > 0 Then
        SetCalculateTotalsError(mvClassFields.Item(EventFields.TotalCosts).Caption)
      Else
        mvClassFields(EventFields.TotalCosts).Value = FixedFormat(vTotalCosts)
      End If

      '(9) Return on Investment
      If mvClassFields(EventFields.TotalCosts).DoubleValue > 0 Then
        vMaxValue = 0
        If MaintenanceAttributes.Count > 0 AndAlso MaintenanceAttributes.ContainsKey(mvClassFields.Item(EventFields.ReturnOnInvestment).Name) Then
          vMaxValue = DoubleValue(MaintenanceAttributes(mvClassFields.Item(EventFields.ReturnOnInvestment).Name).MaximumValue)
        End If
        Dim vReturnOnInvestment As Double = (mvClassFields(EventFields.TotalIncome).DoubleValue / mvClassFields(EventFields.TotalCosts).DoubleValue) * 100
        If vMaxValue > 0 AndAlso vReturnOnInvestment.CompareTo(vMaxValue) > 0 Then
          vReturnOnInvestment = vMaxValue     'Just set to maximum value
        End If
        mvClassFields(EventFields.ReturnOnInvestment).Value = FixedFormat(vReturnOnInvestment)
      End If

      '(10) Delegate Contribution
      If BaseSession.NumberOfAttendees > 0 Then
        vMaxValue = 0
        If MaintenanceAttributes.Count > 0 AndAlso MaintenanceAttributes.ContainsKey(mvClassFields.Item(EventFields.DelegateContribution).Name) Then
          vMaxValue = DoubleValue(MaintenanceAttributes(mvClassFields.Item(EventFields.DelegateContribution).Name).MaximumValue)
        End If
        vCalculatedValue = (mvClassFields(EventFields.TotalIncome).DoubleValue - mvClassFields(EventFields.TotalCosts).DoubleValue) / BaseSession.NumberOfAttendees
        vCalculatedValue = FixTwoPlaces(vCalculatedValue)
        If vMaxValue > 0 AndAlso vCalculatedValue.CompareTo(vMaxValue) > 0 Then
          SetCalculateTotalsError(mvClassFields.Item(EventFields.DelegateContribution).Caption)
        Else
          mvClassFields(EventFields.DelegateContribution).Value = FixedFormat(vCalculatedValue)
        End If
      End If

      '(11) GAD Count
      mvClassFields(EventFields.GiftAidDeclarationCount).Value = CStr(0)
      vWhereFields.Clear()
      vWhereFields.Add("es.event_number", EventNumber, CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("gad.source", CDBField.FieldTypes.cftLong, "es.source", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("gad.cancellation_reason", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoEqual)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT COUNT(gad.declaration_number) AS dtcl_count FROM event_sources es, gift_aid_declarations gad WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      If vRecordSet.Fetch Then
        mvClassFields(EventFields.GiftAidDeclarationCount).Value = CStr(vRecordSet.Fields(1).LongValue)
      End If
      vRecordSet.CloseRecordSet()

      '(12) GAD Value

      '(12a): GAD claimed lines total where Event Source exists
      vMaxValue = 0
      vCalculatedValue = 0
      If MaintenanceAttributes.Count > 0 AndAlso MaintenanceAttributes.ContainsKey(mvClassFields.Item(EventFields.GiftAidDeclarationValue).Name) Then
        vMaxValue = DoubleValue(MaintenanceAttributes(mvClassFields.Item(EventFields.GiftAidDeclarationValue).Name).MaximumValue)
      End If
      vWhereFields.Clear()
      vWhereFields.Add("es.event_number", EventNumber, CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("gad.source", CDBField.FieldTypes.cftLong, "es.source", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("gad.cancellation_reason", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("dtcl.cd_number", CDBField.FieldTypes.cftLong, "gad.declaration_number", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("dtcl.declaration_or_covenant_number", CDBField.FieldTypes.cftCharacter, "D", CDBField.FieldWhereOperators.fwoEqual)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT SUM(dtcl.amount_claimed) AS dtcl_total FROM event_sources es, gift_aid_declarations gad, declaration_tax_claim_lines dtcl WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      If vRecordSet.Fetch Then vCalculatedValue = vRecordSet.Fields(1).DoubleValue
      vRecordSet.CloseRecordSet()

      '(12b): GAD claimed lines total where Event Financial Link exists
      vWhereFields.Clear()
      vWhereFields.Add("efl.event_number", EventNumber, CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("dtcl.batch_number", CDBField.FieldTypes.cftLong, "efl.batch_number")
      vWhereFields.Add("dtcl.transaction_number", CDBField.FieldTypes.cftLong, "efl.transaction_number")
      vWhereFields.Add("dtcl.line_number", CDBField.FieldTypes.cftLong, "efl.line_number")
      vWhereFields.Add("dtcl.declaration_or_covenant_number", CDBField.FieldTypes.cftCharacter, "D", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("gad.declaration_number", CDBField.FieldTypes.cftLong, "dtcl.cd_number")
      vWhereFields.Add("gad.cancellation_reason", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoEqual)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT SUM(dtcl.amount_claimed) AS dtcl_total FROM event_financial_links efl, declaration_tax_claim_lines dtcl, gift_aid_declarations gad WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      If vRecordSet.Fetch Then vCalculatedValue += vRecordSet.Fields(1).DoubleValue
      vRecordSet.CloseRecordSet()

      '(12c): GAD unclaimed lines total where Event Source exists
      vWhereFields.Clear()
      vWhereFields.Add("es.event_number", EventNumber, CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("gad.source", CDBField.FieldTypes.cftLong, "es.source", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("gad.cancellation_reason", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("dlu.cd_number", CDBField.FieldTypes.cftLong, "gad.declaration_number", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("dlu.declaration_or_covenant_number", CDBField.FieldTypes.cftCharacter, "D", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("fh.batch_number", CDBField.FieldTypes.cftLong, "dlu.batch_number", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("fh.transaction_number", CDBField.FieldTypes.cftLong, "dlu.transaction_number", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("tr.date_from", CDBField.FieldTypes.cftLong, "fh.transaction_date", CDBField.FieldWhereOperators.fwoLessThanEqual)
      vWhereFields.Add("tr.date_to", CDBField.FieldTypes.cftLong, "fh.transaction_date", CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT tax_percent, " & vDLU.GetRecordSetFields() & " FROM event_sources es, gift_aid_declarations gad, declaration_lines_unclaimed dlu, financial_history fh, tax_rates tr WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      While vRecordSet.Fetch
        vDTC.Init(mvEnv)
        vDLU.InitFromRecordSet(vRecordSet)
        vDPL.InitFromUnclaimed(mvEnv, vDTC, vDLU, vRecordSet.Fields("tax_percent").LongValue)
        vCalculatedValue += vDPL.AmountClaimed
      End While
      vRecordSet.CloseRecordSet()

      '(12d): GAD unclaimed lines total where Event Financial Link exists
      vWhereFields.Clear()
      vWhereFields.Add("efl.event_number", EventNumber, CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("dlu.batch_number", CDBField.FieldTypes.cftLong, "efl.batch_number")
      vWhereFields.Add("dlu.transaction_number", CDBField.FieldTypes.cftLong, "efl.transaction_number")
      vWhereFields.Add("dlu.line_number", CDBField.FieldTypes.cftLong, "efl.line_number")
      vWhereFields.Add("dlu.declaration_or_covenant_number", CDBField.FieldTypes.cftCharacter, "D", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("gad.declaration_number", CDBField.FieldTypes.cftLong, "dlu.cd_number")
      vWhereFields.Add("gad.cancellation_reason", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("fh.batch_number", CDBField.FieldTypes.cftLong, "dlu.batch_number", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("fh.transaction_number", CDBField.FieldTypes.cftLong, "dlu.transaction_number", CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("tr.date_from", CDBField.FieldTypes.cftLong, "fh.transaction_date", CDBField.FieldWhereOperators.fwoLessThanEqual)
      vWhereFields.Add("tr.date_to", CDBField.FieldTypes.cftLong, "fh.transaction_date", CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT tax_percent, " & vDLU.GetRecordSetFields() & " FROM event_financial_links efl, declaration_lines_unclaimed dlu, gift_aid_declarations gad, financial_history fh, tax_rates tr WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      While vRecordSet.Fetch
        vDTC.Init(mvEnv)
        vDLU.InitFromRecordSet(vRecordSet)
        vDPL.InitFromUnclaimed(mvEnv, vDTC, vDLU, vRecordSet.Fields("tax_percent").LongValue)
        vCalculatedValue += vDPL.AmountClaimed
      End While
      vRecordSet.CloseRecordSet()
      If vMaxValue > 0 AndAlso vCalculatedValue.CompareTo(vMaxValue) > 0 Then
        SetCalculateTotalsError(mvClassFields.Item(EventFields.GiftAidDeclarationValue).Caption)
      Else
        mvClassFields(EventFields.GiftAidDeclarationValue).Value = FixedFormat(vCalculatedValue)
      End If

      mvClassFields(EventFields.FinancialLastCalculated).Value = TodaysDate()
    End Sub

    Public Sub CalculateDelegateTotals()
      'First clear all delegate amounts
      Dim vUpdateFields As New CDBFields
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("event_number", CDBField.FieldTypes.cftLong, EventNumber)
      vUpdateFields.Add("donation_total", CDBField.FieldTypes.cftNumeric, 0)
      vUpdateFields.Add("sponsorship_total", CDBField.FieldTypes.cftNumeric, 0)
      vUpdateFields.Add("booking_payment_amount", CDBField.FieldTypes.cftNumeric, 0)
      vUpdateFields.Add("other_payments_total", CDBField.FieldTypes.cftNumeric, 0)
      mvEnv.Connection.UpdateRecords("delegates", vUpdateFields, vWhereFields, False)
      vWhereFields.Clear()
      vWhereFields.Add("event_delegate_number", CDBField.FieldTypes.cftLong)

      Dim vSQL As String = "SELECT d.event_delegate_number, dt.donation_total, st.sponsorship_total, bpa.booking_payment_amount, opa.other_payments_amount "
      vSQL = vSQL & " FROM delegates d"
      vSQL = vSQL & " LEFT OUTER JOIN "
      vSQL = vSQL & " (SELECT event_delegate_number, sum(fhd.amount) as donation_total"
      vSQL = vSQL & " FROM delegates d1, financial_history fh, financial_history_details fhd, products p, event_sources es"
      vSQL = vSQL & " WHERE d1.event_number = " & EventNumber
      vSQL = vSQL & " AND d1.contact_number = fh.contact_number AND fhd.batch_number = fh.batch_number AND fhd.transaction_number = fh.transaction_number"
      vSQL = vSQL & " AND p.product = fhd.product AND p.donation = 'Y' AND fhd.source = es.source AND es.event_number = d1.event_number"
      vSQL = vSQL & " GROUP BY d1.event_delegate_number) dt ON d.event_delegate_number = dt.event_delegate_number"
      vSQL = vSQL & " LEFT OUTER JOIN "
      vSQL = vSQL & " (SELECT event_delegate_number, sum(fhd.amount) as sponsorship_total"
      vSQL = vSQL & " FROM delegates d1, financial_history fh, financial_history_details fhd, products p, event_sources es"
      vSQL = vSQL & " WHERE d1.event_number = " & EventNumber
      vSQL = vSQL & " AND d1.contact_number = fh.contact_number AND fhd.batch_number = fh.batch_number AND fhd.transaction_number = fh.transaction_number"
      vSQL = vSQL & " AND p.product = fhd.product AND p.sponsorship_event = 'Y' AND fhd.source = es.source AND es.event_number = d1.event_number"
      vSQL = vSQL & " GROUP BY d1.event_delegate_number) st ON d.event_delegate_number = st.event_delegate_number"
      vSQL = vSQL & " LEFT OUTER JOIN "
      vSQL = vSQL & " (SELECT event_delegate_number, fhd.amount / eb.quantity as booking_payment_amount"
      vSQL = vSQL & " FROM event_bookings eb,financial_history fh, financial_history_details fhd, delegates d1"
      vSQL = vSQL & " WHERE eb.event_number = " & EventNumber
      vSQL = vSQL & " AND eb.cancellation_reason IS NULL AND fh.batch_number = eb.batch_number AND fh.transaction_number = eb.transaction_number"
      vSQL = vSQL & " AND fhd.batch_number = fh.batch_number AND fhd.transaction_number = fh.transaction_number"
      vSQL = vSQL & " AND eb.booking_number = d1.booking_number) bpa ON d.event_delegate_number = bpa.event_delegate_number"
      vSQL = vSQL & " LEFT OUTER JOIN "
      vSQL = vSQL & " (SELECT event_delegate_number, sum(fhd.amount) as other_payments_amount  "
      vSQL = vSQL & " FROM event_bookings eb, delegates d1, financial_history fh, financial_history_details fhd, products p , event_sources es "
      vSQL = vSQL & " WHERE eb.event_number = " & EventNumber
      vSQL = vSQL & " AND eb.booking_number = d1.booking_number AND d1.contact_number = fh.contact_number"
      vSQL = vSQL & " AND fhd.batch_number = fh.batch_number AND fhd.transaction_number = fh.transaction_number"
      vSQL = vSQL & " AND p.product = fhd.product AND p.donation = 'N' AND (p.sponsorship_event = 'N' or p.sponsorship_event is null )"
      vSQL = vSQL & " AND fhd.source = es.source AND es.event_number = d1.event_number"
      vSQL = vSQL & " AND fh.batch_number NOT IN (SELECT batch_number from event_bookings eb"
      vSQL = vSQL & " WHERE eb.batch_number = fhd.batch_number AND eb.transaction_number = fhd.transaction_number AND eb.line_number = fhd.line_number)"
      vSQL = vSQL & " GROUP BY d1.event_delegate_number) opa ON d.event_delegate_number = opa.event_delegate_number"
      vSQL = vSQL & " WHERE d.event_number = " & EventNumber

      Dim vDelgateNumber As Integer
      Dim vDonationTotal As Double
      Dim vSponsorshipTotal As Double
      Dim vBookingPaymentAmount As Double
      Dim vOtherPaymentsAmount As Double

      Dim vRecordSet As CDBRecordSet = mvEnv.Connection.GetRecordSet(vSQL)
      While vRecordSet.Fetch
        vDelgateNumber = vRecordSet.Fields(1).LongValue
        vDonationTotal = vRecordSet.Fields(2).DoubleValue
        vSponsorshipTotal = vRecordSet.Fields(3).DoubleValue
        vBookingPaymentAmount = vRecordSet.Fields(4).DoubleValue
        vOtherPaymentsAmount = vRecordSet.Fields(5).DoubleValue
        If vDonationTotal <> 0 Or vSponsorshipTotal <> 0 Or vBookingPaymentAmount <> 0 Or vOtherPaymentsAmount <> 0 Then
          vWhereFields(1).Value = CStr(vDelgateNumber)
          vUpdateFields(1).Value = CStr(vDonationTotal)
          vUpdateFields(2).Value = CStr(vSponsorshipTotal)
          vUpdateFields(3).Value = CStr(vBookingPaymentAmount)
          vUpdateFields(4).Value = CStr(vOtherPaymentsAmount)
          mvEnv.Connection.UpdateRecords("delegates", vUpdateFields, vWhereFields)
        End If
      End While
      vRecordSet.CloseRecordSet()
      mvClassFields(EventFields.SponsorshipLastCalculated).Value = TodaysDate()
    End Sub

    Public Function SessionNamesDataTable() As CDBDataTable
      Dim vRow As CDBDataRow
      Dim vTable As New CDBDataTable
      vTable.AddColumnsFromList("SessionNumber,SessionName")
      If MultiSession Then
        vRow = vTable.AddRow
        vRow.Item(1) = CStr(BaseSession.SessionNumber)
        vRow.Item(2) = ProjectText.String26708 '<Any Sessions>
      End If
      For Each vSession As EventSession In Sessions
        If vSession.SessionType <> "0" Or Not MultiSession Then
          vRow = vTable.AddRow
          vRow.Item(1) = CStr(vSession.SessionNumber)
          vRow.Item(2) = vSession.SessionDesc
        End If
      Next vSession
      Return vTable
    End Function

    ''' <summary>Does this <see cref="CDBEvent">Event</see> have any Actions linked to it?</summary>
    ''' <returns>True if the Event has Actions linked to it, otherwise False</returns>
    Private ReadOnly Property HasActions() As Boolean
      Get
        Dim vHasActions As Boolean = False
        If MasterAction > 0 Then
          If mvEnv.Connection.GetCount("actions", New CDBFields(New CDBField("master_action", MasterAction))) > 0 Then vHasActions = True
        End If
        Return vHasActions
      End Get
    End Property

    ''' <summary>The total number of attributes that could not be updated when using CalculateTotals.</summary>
    Public Property CalculateTotalsErrorCount As Integer
    ''' <summary>The names of the attributes that ad errors when using CalculateTotals.</summary>
    Public Property CalculateTotalsErrorFields As StringBuilder

    Private Sub SetCalculateTotalsError(ByVal pAttributeName As String)
      If Not String.IsNullOrWhiteSpace(pAttributeName) Then
        If CalculateTotalsErrorFields Is Nothing Then
          CalculateTotalsErrorCount = 0
          CalculateTotalsErrorFields = New StringBuilder()
        End If
        CalculateTotalsErrorCount += 1
        CalculateTotalsErrorFields.AppendLine(pAttributeName)
      End If
    End Sub

#Region "Topics"
    Private mvEventTopics As CollectionList(Of EventTopic)
    Public ReadOnly Property EventTopics() As CollectionList(Of EventTopic)
      Get
        If mvEventTopics Is Nothing Then InitEventTopics()
        Return mvEventTopics
      End Get
    End Property
    Private Sub InitEventTopics()
      mvEventTopics = New CollectionList(Of EventTopic)
      Dim vET As New EventTopic(mvEnv)
      Dim vWhereFields As New CDBFields(New CDBField("event_number", EventNumber))
      Dim vSQL As New SQLStatement(mvEnv.Connection, vET.GetRecordSetFields(), "event_topics et", vWhereFields)
      Dim vRS As CDBRecordSet = vSQL.GetRecordSet()
      While vRS.Fetch = True
        vET = New EventTopic(mvEnv)
        vET.InitFromRecordSet(vRS)
        mvEventTopics.Add(vET.Topic & "/" & vET.SubTopic, vET)
      End While
      vRS.CloseRecordSet()
    End Sub
#End Region

#End Region

  End Class
End Namespace
