Namespace Access

  Public Class MeetingLink
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum MeetingLinkFields
      AllFields = 0
      MeetingNumber
      ContactNumber
      LinkType
      Notified
      Attended
      MeetingRole
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("meeting_number", CDBField.FieldTypes.cftLong)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("link_type")
        .Add("notified")
        .Add("attended")
        .Add("meeting_role")

        .Item(MeetingLinkFields.MeetingNumber).PrimaryKey = True

        .Item(MeetingLinkFields.ContactNumber).PrimaryKey = True

        .Item(MeetingLinkFields.LinkType).PrimaryKey = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ml"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "meeting_links"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property MeetingNumber() As Integer
      Get
        Return mvClassFields(MeetingLinkFields.MeetingNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(MeetingLinkFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property LinkType() As String
      Get
        Return mvClassFields(MeetingLinkFields.LinkType).Value
      End Get
    End Property
    Public ReadOnly Property Notified() As String
      Get
        Return mvClassFields(MeetingLinkFields.Notified).Value
      End Get
    End Property
    Public ReadOnly Property Attended() As String
      Get
        Return mvClassFields(MeetingLinkFields.Attended).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(MeetingLinkFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(MeetingLinkFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property MeetingRole() As String
      Get
        Return mvClassFields(MeetingLinkFields.MeetingRole).Value
      End Get
    End Property
#End Region

    Public Overloads Sub Init(ByVal pContactNumber As Integer, ByVal pLinkType As String)
      MyBase.Init()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(MeetingLinkFields.ContactNumber).Name, pContactNumber)
      vWhereFields.Add(mvClassFields(MeetingLinkFields.LinkType).Name, pLinkType)
      InitWithPrimaryKey(vWhereFields)
    End Sub


    Public Overloads Sub Init(ByVal pMeetingNumber As Integer, ByVal pContactNumber As Integer, ByVal pLinkType As String)
      MyBase.Init()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(MeetingLinkFields.MeetingNumber).Name, pMeetingNumber)
      vWhereFields.Add(mvClassFields(MeetingLinkFields.ContactNumber).Name, pContactNumber)
      vWhereFields.Add(mvClassFields(MeetingLinkFields.LinkType).Name, pLinkType)
      InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Sub DeleteMeetingLinks(ByVal pMeetingNumber As Integer)
      DeleteMeetingLinks(pMeetingNumber, 0, "")
    End Sub
    Public Sub DeleteMeetingLinks(ByVal pMeetingNumber As Integer, ByVal pContactNumber As Integer, ByVal pLinkType As String)
      Dim vFields As New CDBFields
      vFields.Add("meeting_number", pMeetingNumber)
      If pContactNumber > 0 Then vFields.Add("contact_number", pContactNumber)
      If pLinkType.Length > 0 Then vFields.Add("link_type", pLinkType)
      mvEnv.Connection.DeleteRecords("meeting_links", vFields, False)
    End Sub

    Public Sub UpdateMeetingLink(ByVal pContactNumber As Integer, ByVal pNotified As String, ByVal pLinkType As String, Optional ByVal pMeetingNumber As Integer = 0)
      Dim vUpdateFields As New CDBFields
      Dim vWhereFields As New CDBFields
      vUpdateFields.Add("Notified", pNotified)
      vWhereFields.Add("contact_number", pContactNumber).SpecialColumn = True
      vWhereFields.Add("link_type", pLinkType)
      If pMeetingNumber > 0 Then vWhereFields.Add("meeting_number", pMeetingNumber)
      mvEnv.Connection.UpdateRecords(mvClassFields.DatabaseTableName, vUpdateFields, vWhereFields, False)
    End Sub

    Friend Sub UpdateMeetingNumber(ByVal pNewMeetingNumber As Integer)
      mvClassFields(MeetingLinkFields.MeetingNumber).IntegerValue = pNewMeetingNumber
    End Sub

  End Class
End Namespace
