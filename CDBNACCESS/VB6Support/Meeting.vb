Namespace Access

  Public Class Meeting
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum MeetingFields
      AllFields = 0
      MeetingNumber
      MeetingDesc
      MeetingDate
      MeetingType
      MeetingLocation
      DurationDays
      DurationHours
      DurationMinutes
      Preamble
      Notes
      Agenda
      CommunicationsLogNumber
      MasterAction
      OwnerContactNumber
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("meeting_number", CDBField.FieldTypes.cftLong)
        .Add("meeting_desc")
        .Add("meeting_date", CDBField.FieldTypes.cftTime)
        .Add("meeting_type")
        .Add("meeting_location")
        .Add("duration_days", CDBField.FieldTypes.cftInteger)
        .Add("duration_hours", CDBField.FieldTypes.cftInteger)
        .Add("duration_minutes", CDBField.FieldTypes.cftInteger)
        .Add("preamble", CDBField.FieldTypes.cftMemo)
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("agenda", CDBField.FieldTypes.cftMemo)
        .Add("communications_log_number", CDBField.FieldTypes.cftLong)
        .Add("master_action", CDBField.FieldTypes.cftLong)
        .Add("owner_contact_number", CDBField.FieldTypes.cftLong)

        .Item(MeetingFields.MeetingNumber).PrimaryKey = True
        .SetControlNumberField(MeetingFields.MeetingNumber, "ME")
        .Item(MeetingFields.OwnerContactNumber).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataOwnerContactNumber)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "m"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "meetings"
      End Get
    End Property

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvMeetingLinks = Nothing
    End Sub

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property MeetingNumber() As Integer
      Get
        Return mvClassFields(MeetingFields.MeetingNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property MeetingDesc() As String
      Get
        Return mvClassFields(MeetingFields.MeetingDesc).Value
      End Get
    End Property
    Public ReadOnly Property MeetingDate() As String
      Get
        Return mvClassFields(MeetingFields.MeetingDate).Value
      End Get
    End Property
    Public ReadOnly Property MeetingType() As String
      Get
        Return mvClassFields(MeetingFields.MeetingType).Value
      End Get
    End Property
    Public ReadOnly Property MeetingLocation() As String
      Get
        Return mvClassFields(MeetingFields.MeetingLocation).Value
      End Get
    End Property
    Public ReadOnly Property DurationDays() As Integer
      Get
        Return mvClassFields(MeetingFields.DurationDays).IntegerValue
      End Get
    End Property
    Public ReadOnly Property DurationHours() As Integer
      Get
        Return mvClassFields(MeetingFields.DurationHours).IntegerValue
      End Get
    End Property
    Public ReadOnly Property DurationMinutes() As Integer
      Get
        Return mvClassFields(MeetingFields.DurationMinutes).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Preamble() As String
      Get
        Return mvClassFields(MeetingFields.Preamble).Value
      End Get
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(MeetingFields.Notes).Value
      End Get
    End Property
    Public ReadOnly Property Agenda() As String
      Get
        Return mvClassFields(MeetingFields.Agenda).Value
      End Get
    End Property
    Public ReadOnly Property CommunicationsLogNumber() As Integer
      Get
        Return mvClassFields(MeetingFields.CommunicationsLogNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property MasterAction() As Integer
      Get
        Return mvClassFields(MeetingFields.MasterAction).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(MeetingFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(MeetingFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property OwnerContactNumber() As Integer
      Get
        Return mvClassFields(MeetingFields.OwnerContactNumber).IntegerValue
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Private mvMeetingLinks As List(Of MeetingLink)

    Public Function Links() As List(Of MeetingLink)
      If mvMeetingLinks Is Nothing Then
        mvMeetingLinks = New List(Of MeetingLink)

        Dim vWhereFields As New CDBFields(New CDBField("meeting_number", MeetingNumber))
        Dim vMeetingLink As New MeetingLink(mvEnv)
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vMeetingLink.GetRecordSetFields, "meeting_links ml", vWhereFields)
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        While vRS.Fetch
          vMeetingLink = New MeetingLink(mvEnv)
          vMeetingLink.InitFromRecordSet(vRS)
          mvMeetingLinks.Add(vMeetingLink)
        End While
        vRS.CloseRecordSet()
      End If
      Return mvMeetingLinks
    End Function

    Public Sub CopyLinks(ByVal pMeetingNumber As Integer)
      'copy meeting links from another meeting to this one
      Dim vWhereFields As New CDBFields(New CDBField("meeting_number", pMeetingNumber))
      Dim vMeetingLink As New MeetingLink(mvEnv)
      Dim vNewMeetingLink As New MeetingLink(mvEnv)
      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vMeetingLink.GetRecordSetFields, "meeting_links ml", vWhereFields)
      Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
      While vRS.Fetch
        vMeetingLink = New MeetingLink(mvEnv)
        vMeetingLink.InitFromRecordSet(vRS)
        vNewMeetingLink.CopyValues(vMeetingLink)
        vNewMeetingLink.UpdateMeetingNumber(MeetingNumber)
        vNewMeetingLink.Save()
      End While
      vRS.CloseRecordSet()
    End Sub

    Public Sub UpdateAfterDuplicate(ByVal pDescription As String, ByVal pDate As String, ByVal pCommsLogNo As Integer)
      mvClassFields(MeetingFields.MeetingDesc).Value = pDescription
      mvClassFields(MeetingFields.MeetingDate).Value = pDate
      mvClassFields(MeetingFields.CommunicationsLogNumber).Value = pCommsLogNo.ToString
    End Sub
#End Region

  End Class
End Namespace
