Namespace Access

  Public Class ExternalApplication
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum ExternalApplicationFields
      AllFields = 0
      Package
      PackageDesc
      PackageName
      PackagePath
      DocfileExtension
      StorageType
      StoragePath
      PackageRunstring
      CommunicationType
      CommunicationVersion
      TopicOrObjectName
      ClassName
      MergeFileType
      MailMergeLetter
      WordProcessorDocument
      DocumentSource
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("package")
        .Add("package_desc")
        .Add("package_name", CDBField.FieldTypes.cftMemo)
        .Add("package_path", CDBField.FieldTypes.cftMemo)
        .Add("docfile_extension")
        .Add("storage_type")
        .Add("storage_path")
        .Add("package_runstring")
        .Add("communication_type")
        .Add("communication_version")
        .Add("topic_or_object_name")
        .Add("class_name")
        .Add("merge_file_type")
        .Add("mail_merge_letter")
        .Add("word_processor_document")
        .Add("document_source")

        .Item(ExternalApplicationFields.Package).PrimaryKey = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return False
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "eap"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "packages"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property Package() As String
      Get
        Return mvClassFields(ExternalApplicationFields.Package).Value
      End Get
    End Property
    Public ReadOnly Property PackageDesc() As String
      Get
        Return mvClassFields(ExternalApplicationFields.PackageDesc).Value
      End Get
    End Property
    Public ReadOnly Property PackageName() As String
      Get
        Return mvClassFields(ExternalApplicationFields.PackageName).Value
      End Get
    End Property
    Public ReadOnly Property PackagePath() As String
      Get
        Return mvClassFields(ExternalApplicationFields.PackagePath).Value
      End Get
    End Property
    Public ReadOnly Property Extension() As String
      Get
        Return mvClassFields(ExternalApplicationFields.DocfileExtension).Value
      End Get
    End Property
    Public ReadOnly Property StorageType() As String
      Get
        Return mvClassFields(ExternalApplicationFields.StorageType).Value
      End Get
    End Property
    Public ReadOnly Property StoragePath() As String
      Get
        Return mvClassFields(ExternalApplicationFields.StoragePath).Value
      End Get
    End Property
    Public ReadOnly Property PackageRunstring() As String
      Get
        Return mvClassFields(ExternalApplicationFields.PackageRunstring).Value
      End Get
    End Property
    Public ReadOnly Property CommunicationType() As Integer
      Get
        Return mvClassFields(ExternalApplicationFields.CommunicationType).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CommunicationVersion() As String
      Get
        Return mvClassFields(ExternalApplicationFields.CommunicationVersion).Value
      End Get
    End Property
    Public ReadOnly Property TopicOrObjectName() As String
      Get
        Return mvClassFields(ExternalApplicationFields.TopicOrObjectName).Value
      End Get
    End Property
    Public ReadOnly Property ClassName() As String
      Get
        Return mvClassFields(ExternalApplicationFields.ClassName).Value
      End Get
    End Property
    Public ReadOnly Property MergeFileType() As Integer
      Get
        Return mvClassFields(ExternalApplicationFields.MergeFileType).IntegerValue
      End Get
    End Property
    Public ReadOnly Property MailMergeLetter() As String
      Get
        Return mvClassFields(ExternalApplicationFields.MailMergeLetter).Value
      End Get
    End Property
    Public ReadOnly Property WordProcessorDocument() As String
      Get
        Return mvClassFields(ExternalApplicationFields.WordProcessorDocument).Value
      End Get
    End Property
    Public ReadOnly Property DocumentSource() As String
      Get
        Return mvClassFields(ExternalApplicationFields.DocumentSource).Value
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Public Enum DocumentSourceTypes
      dstNoSource
      dstWordProcessor
      dstScanner
      dstEmail
      dstOther
    End Enum

    Public ReadOnly Property ExternalStorage() As Boolean
      Get
        Return StorageType = "E"
      End Get
    End Property

    Public Function NewDocumentName(ByVal pName As String) As String
      Dim vName As String

      If ExternalStorage And pName.Length > 0 Then
        Select Case pName.Length
          Case Is > 8
            vName = Left$(pName, 8)
          Case 8
            vName = pName
          Case 7
            vName = "C" & pName
          Case 6
            vName = "CD" & pName
          Case Else
            vName = "CDB" & pName
        End Select
        vName &= Extension
        vName = IO.Path.Combine(StoragePath, vName)
        'If this code changes the name based on the file existing then it will keep creating new files each time an update is performed
        'so commented out
        'If My.Computer.FileSystem.FileExists(vName) Then
        'Return IO.Path.Combine(StoragePath, IO.Path.GetFileNameWithoutExtension(vName) & "_" & CStr(System.Environment.TickCount) & Extension)
        'Else
        Return vName
        'End If
      Else
      Return GetWindowsTempFileName(Extension)
      End If
    End Function

#End Region
  End Class
End Namespace
