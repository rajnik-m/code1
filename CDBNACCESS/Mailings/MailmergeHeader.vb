Imports System.IO
Namespace Access

  Public Class MailmergeHeader
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum MailmergeHeaderFields
      AllFields = 0
      MailmergeHeader
      MailmergeHeaderDesc
      MailmergeFields
      Client
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("mailmerge_header")
        .Add("mailmerge_header_desc")
        .Add("mailmerge_fields", CDBField.FieldTypes.cftMemo)
        .Add("client")

        .Item(MailmergeHeaderFields.MailmergeHeader).PrimaryKey = True
        If Not mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbEmailTemplates) Then
          mvClassFields(MailmergeHeaderFields.Client).InDatabase = False
        End If
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property

    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "mh"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "mailmerge_headers"
      End Get
    End Property

    Public Overloads Sub Init(pPrimaryKey As String)
      MyBase.Init()
      Dim vWhereFields As New CDBFields({New CDBField(mvClassFields(MailmergeHeaderFields.MailmergeHeader).Name, pPrimaryKey, CDBField.FieldWhereOperators.fwoEqual)})

      If mvClassFields(MailmergeHeaderFields.Client).InDatabase Then
        vWhereFields.Add(New CDBField(mvClassFields(MailmergeHeaderFields.Client).Name, mvEnv.ClientCode, CDBField.FieldWhereOperators.fwoNullOrEqual))
      End If

      Dim vSql As New SQLStatement(mvEnv.Connection,
                                   If(mvClassFields(MailmergeHeaderFields.Client).InDatabase, "CASE WHEN " & mvClassFields(MailmergeHeaderFields.Client).Name & " IS NULL THEN 99 ELSE 0 END AS sequence, ", "") & Me.GetRecordSetFields,
                                   Me.DatabaseTableName & " " & Me.TableAlias,
                                   vWhereFields,
                                   If(mvClassFields(MailmergeHeaderFields.Client).InDatabase, "sequence", ""))
      vSql.MaxRows = 1

      Dim vData As DataTable = vSql.GetDataTable
      If vData.Rows.Count > 0 Then
        MyBase.InitFromDataRow(vData.Rows(0), False)
      End If
    End Sub

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property MailmergeHeaderCode() As String
      Get
        Return mvClassFields(MailmergeHeaderFields.MailmergeHeader).Value
      End Get
    End Property
    Public ReadOnly Property MailmergeHeaderDesc() As String
      Get
        Return mvClassFields(MailmergeHeaderFields.MailmergeHeaderDesc).Value
      End Get
    End Property
    Public ReadOnly Property MailmergeFields() As String
      Get
        Return mvClassFields(MailmergeHeaderFields.MailmergeFields).Value
      End Get
    End Property
    Public ReadOnly Property Client() As String
      Get
        Return mvClassFields(MailmergeHeaderFields.Client).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(MailmergeHeaderFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(MailmergeHeaderFields.AmendedOn).Value
      End Get
    End Property
#End Region
#Region "Non-AutoGenerated Code"
    Public Function GetHeaderFile() As String
      Dim vMergeFileName As String = Path.GetTempFileName()
      Dim vHeader As String = MailmergeFields & vbCrLf
      For vIndex As Integer = 1 To vHeader.Length
        If Substring(vHeader, vIndex, 1) = "," Then vHeader = vHeader & ","
      Next
      vHeader = vHeader & vbCrLf     'Word wont accept the merge file unless a data line is included
      File.WriteAllText(vMergeFileName, vHeader)

      Return vMergeFileName
    End Function
#End Region
  End Class
End Namespace
