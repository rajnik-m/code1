Imports System.Net.Mail
Imports System.Text.RegularExpressions
Imports System.IO
Imports System.Drawing
Imports System.Drawing.Imaging

Namespace Access

  Public Class EmailJob
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum EmailJobFields
      AllFields = 0
      EmailJobNumber
      MailingNumber
      FromEmailAddress
      FromDisplayName
      StandardDocument
      NumberOfEmails
      NumberProcessed
      NumberFailed
      MergeFields
      Subject
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("email_job_number", CDBField.FieldTypes.cftLong)
        .Add("mailing_number", CDBField.FieldTypes.cftLong)
        .Add("from_email_address")
        .Add("from_display_name")
        .Add("standard_document")
        .Add("number_of_emails", CDBField.FieldTypes.cftLong)
        .Add("number_processed", CDBField.FieldTypes.cftLong)
        .Add("number_failed", CDBField.FieldTypes.cftLong)
        .Add("merge_fields", CDBField.FieldTypes.cftMemo)
        .Add("subject")

        .Item(EmailJobFields.Subject).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbMailingHistoryTopic)
        .Item(EmailJobFields.EmailJobNumber).PrimaryKey = True
        .SetControlNumberField(EmailJobFields.EmailJobNumber, "EJ")
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ej"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "email_jobs"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property EmailJobNumber() As Integer
      Get
        Return mvClassFields(EmailJobFields.EmailJobNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property MailingNumber() As Integer
      Get
        Return mvClassFields(EmailJobFields.MailingNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property FromEmailAddress() As String
      Get
        Return mvClassFields(EmailJobFields.FromEmailAddress).Value
      End Get
    End Property
    Public ReadOnly Property FromDisplayName() As String
      Get
        Return mvClassFields(EmailJobFields.FromDisplayName).Value
      End Get
    End Property
    Public ReadOnly Property StandardDocumentCode() As String
      Get
        Return mvClassFields(EmailJobFields.StandardDocument).Value
      End Get
    End Property
    Public ReadOnly Property NumberOfEmails() As Integer
      Get
        Return mvClassFields(EmailJobFields.NumberOfEmails).IntegerValue
      End Get
    End Property
    Public ReadOnly Property NumberProcessed() As Integer
      Get
        Return mvClassFields(EmailJobFields.NumberProcessed).IntegerValue
      End Get
    End Property
    Public ReadOnly Property NumberFailed() As Integer
      Get
        Return mvClassFields(EmailJobFields.NumberFailed).IntegerValue
      End Get
    End Property
    Public ReadOnly Property MergeFields() As String
      Get
        Return mvClassFields(EmailJobFields.MergeFields).Value
      End Get
    End Property
    Public ReadOnly Property Subject() As String
      Get
        Return mvClassFields(EmailJobFields.Subject).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(EmailJobFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(EmailJobFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Private mvStandardDocument As StandardDocument = Nothing
    Private mvMergeFields As ArrayListEx = Nothing
    Private mvBaseDocument As String = ""
    Private mvSubject As String = ""
    Private mvAttachments As List(Of String)

    Public Sub SendEmail(ByVal pSubject As String, ByVal pBodyText As String, ByVal pEMailAddress As String, ByVal pMergeData As String)
      'Implementation for one off job to send an email
      Dim vParams As New CDBParameters
      vParams.Add("FromEmailAddress", mvEnv.GetConfig("notification_email_address", "notification@advancednfp.com"))
      vParams.Add("FromDisplayName", mvEnv.GetConfig("notification_email_name", "Advanced NFP Notification"))
      vParams.Add("StandardDocument", "NONE")
      vParams.Add("MergeFields", "contact_number")
      vParams.Add("MailingNumber", 0)
      vParams.Add("Subject", pSubject)
      Create(vParams)
      SetNumberOfEMails(1)
      CheckSetup()
      mvEnv.Connection.StartTransaction()
      Save(mvEnv.User.UserID)
      mvSubject = pSubject
      mvBaseDocument = pBodyText
      Dim vEmailQueueItem As EmailQueueItem = New EmailQueueItem(mvEnv)
      Dim vItemParams As New CDBParameters
      vItemParams.Add("EmailJobNumber", EmailJobNumber)
      vItemParams.Add("EmailItemNumber", 1)
      vItemParams.Add("MergeData", pMergeData)
      vItemParams.Add("EmailAddress", pEMailAddress)
      vEmailQueueItem.Create(vItemParams)
      vEmailQueueItem.Save(mvEnv.User.UserID)
      mvEnv.Connection.CommitTransaction()
      ProcessEmailsAsynch()     'Run Asynch
    End Sub

    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      mvClassFields(EmailJobFields.NumberProcessed).IntegerValue = 0
      mvClassFields(EmailJobFields.NumberOfEmails).IntegerValue = 0
      mvClassFields(EmailJobFields.NumberFailed).IntegerValue = 0
      mvStandardDocument = Nothing
      mvMergeFields = Nothing
      mvBaseDocument = ""
    End Sub

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvAttachments = Nothing
    End Sub

    Public ReadOnly Property Attachments() As List(Of String)
      Get
        If mvAttachments Is Nothing Then
          mvAttachments = New List(Of String)
          If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbBulkEmailAttachments) Then
            Dim vSQLStatement As New SQLStatement(mvEnv.Connection, "email_attachment", "email_job_attachments", New CDBField("email_job_number", CDBField.FieldTypes.cftInteger, EmailJobNumber.ToString, CDBField.FieldWhereOperators.fwoEqual))
            Dim vRecordSet As CDBRecordSet = vSQLStatement.GetRecordSet
            While vRecordSet.Fetch
              mvAttachments.Add(vRecordSet.Fields("email_attachment").Value)
            End While
            vRecordSet.CloseRecordSet()
          End If
        End If
        Return mvAttachments
      End Get
    End Property

    Protected Overrides Sub PostValidateCreateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PostValidateCreateParameters(pParameterList)
      If MailingNumber = 0 AndAlso pParameterList.Exists("MailingNumber") = False Then
        mvClassFields(EmailJobFields.MailingNumber).IntegerValue = mvEnv.GetControlNumber("MA")
      End If
    End Sub

    Public Sub SetNumberOfEMails(ByVal pNumberOfEMails As Integer)
      mvClassFields(EmailJobFields.NumberOfEmails).IntegerValue = pNumberOfEMails
    End Sub

    Public Sub AddAttachment(ByVal pFileName As String)
      If mvAttachments Is Nothing Then mvAttachments = New List(Of String)
      If Not mvAttachments.Contains(pFileName) Then
        mvAttachments.Add(pFileName)
        Dim vEmailAttachment As New EmailJobAttachment(mvEnv)
        Dim vParams As New CDBParameters
        vParams.Add("EmailAttachment", pFileName)
        vParams.Add("EmailJobNumber", mvClassFields(EmailJobFields.EmailJobNumber).IntegerValue)
        vEmailAttachment.Create(vParams)
        vEmailAttachment.Save()
      End If
    End Sub

    Public Function JobsToBeProcessedFields(ByVal pJobNumber As Integer) As CDBFields
      CheckClassFields()
      Dim vWhereFields As New CDBFields()
      If pJobNumber > 0 Then vWhereFields.Add(mvClassFields(EmailJobFields.EmailJobNumber).Name, pJobNumber)
      vWhereFields.Add(mvClassFields(EmailJobFields.NumberProcessed).Name, CDBField.FieldTypes.cftInteger, mvClassFields(EmailJobFields.NumberOfEmails).Name, CDBField.FieldWhereOperators.fwoLessThan)
      Return vWhereFields
    End Function

    Public Sub IncrementNumberFailed()
      Dim vUpdateFields As New CDBFields
      vUpdateFields.Add(mvClassFields(EmailJobFields.NumberFailed).Name, CDBField.FieldTypes.cftInteger, mvClassFields(EmailJobFields.NumberFailed).Name & " + 1")
      vUpdateFields.Add(mvClassFields(EmailJobFields.NumberProcessed).Name, CDBField.FieldTypes.cftInteger, mvClassFields(EmailJobFields.NumberProcessed).Name & " + 1")
      Dim vWhereFields As CDBFields = mvClassFields.WhereFields
      mvEnv.Connection.UpdateRecords(DatabaseTableName, vUpdateFields, vWhereFields)
    End Sub

    Public Sub IncrementNumberProcessed()
      Dim vUpdateFields As New CDBFields
      vUpdateFields.Add(mvClassFields(EmailJobFields.NumberProcessed).Name, CDBField.FieldTypes.cftInteger, mvClassFields(EmailJobFields.NumberProcessed).Name & " + 1")
      Dim vWhereFields As CDBFields = mvClassFields.WhereFields
      mvEnv.Connection.UpdateRecords(DatabaseTableName, vUpdateFields, vWhereFields)
    End Sub

    Public Sub CheckSetup()
      If Not mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataEmailJobs) Then RaiseError(DataAccessErrors.daeDatabaseUpgrade)
      If mvEnv.GetConfig("email_smtp_server").Length = 0 Then RaiseError(DataAccessErrors.daeInvalidConfig, "email_smtp_server")
    End Sub

    Public Function GetSMTPClient() As SmtpClient
      Dim vSMTP As New SmtpClient(mvEnv.GetConfig("email_smtp_server"))
      vSMTP.UseDefaultCredentials = True
      Return vSMTP
    End Function

    Private Function HasContactEmailings(ByRef pLastMailingNumber As Integer) As Boolean
      Dim vHasContactEmailings As Boolean
      If MailingNumber <> pLastMailingNumber Then
        'Find out if there are contact emailing records for this email job
        vHasContactEmailings = False
        If MailingNumber > 0 Then
          Dim vWhereFields As New CDBFields()
          vWhereFields.Add("mailing_number", MailingNumber)
          If mvEnv.Connection.GetCount("contact_emailings", vWhereFields) > 0 Then vHasContactEmailings = True
        End If
        pLastMailingNumber = MailingNumber
      End If
      Return vHasContactEmailings
    End Function

    Public Function GetStandardDocumentData(ByRef pMergeFields As ArrayListEx, ByRef pBaseDocument As String) As StandardDocument
      If mvStandardDocument Is Nothing Then
        mvStandardDocument = New StandardDocument(mvEnv)
        mvStandardDocument.Init(StandardDocumentCode)
        Dim vFileName As String = Nothing
        If MailingNumber > 0 Then
          'See if we have a mailing history document for this job
          vFileName = mvEnv.GetDocument(CDBEnvironment.GetDocumentLocations.gdlMailingHistoryDocuments, MailingNumber.ToString, False, String.Empty)
        End If
        If String.IsNullOrEmpty(vFileName) Then
          mvStandardDocument.ReadStandardDocumentText()
          mvBaseDocument = My.Computer.FileSystem.ReadAllText(mvStandardDocument.StandardDocumentText)
          My.Computer.FileSystem.DeleteFile(mvStandardDocument.StandardDocumentText)
        Else
          mvBaseDocument = My.Computer.FileSystem.ReadAllText(vFileName)
          My.Computer.FileSystem.DeleteFile(vFileName)
        End If
        mvMergeFields = New ArrayListEx(MergeFields, True)
      End If
      pMergeFields = mvMergeFields
      pBaseDocument = mvBaseDocument
      Return mvStandardDocument
    End Function

    Public Sub ProcessEmailsAsynch()
      mvEnv = mvEnv.GetCopyEnvironment
      Dim vThreadStart As New Threading.ThreadStart(AddressOf DoProcessEmails)
      Dim vThread As New Threading.Thread(vThreadStart)
      vThread.IsBackground = True
      'System.Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo(System.Threading.Thread.CurrentThread.CurrentCulture.Name)
      vThread.Start()
    End Sub

    Private Sub DoProcessEmails()
      ProcessEmails(GetSMTPClient, 0, 0, 0)
    End Sub

    Public Sub ProcessEmails(ByVal pSMTP As SmtpClient, ByRef pLastMailingNumber As Integer, ByRef vCount As Integer, ByRef vFailed As Integer)
      Dim vHasContactEmailings As Boolean = HasContactEmailings(pLastMailingNumber)
      System.Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo(System.Threading.Thread.CurrentThread.CurrentCulture.Name)
      Dim vEMailItem As New EmailQueueItem(mvEnv)
      Dim vItemTable As DataTable = vEMailItem.GetDataTable(vEMailItem.ItemsToBeProcessedFields(EmailJobNumber))
      For Each vItemRow As DataRow In vItemTable.Rows
        'For each item process the row
        vEMailItem.InitFromDataRow(vItemRow)
        Dim vInProgress As Boolean
        If vEMailItem.ProcessedStatus = "U" Then        'Found an unprocessed item 
          vEMailItem.SetProcessing()
          Try
            vEMailItem.Save()                           'Mark it as in progress and save it
            vInProgress = True
          Catch ex As Exception
            'Failed to set the item as in progress - should only be if another process is processing it so ignore it just for now
          End Try
          If vInProgress Then
            Dim vContactEmailing As New ContactEmailing(mvEnv)
            If vHasContactEmailings AndAlso MailingNumber > 0 AndAlso vEMailItem.ContactNumber > 0 Then
              vContactEmailing.InitFromMailingNumberAndContact(MailingNumber, vEMailItem.ContactNumber)
            End If
            'Try sending the mail
            Dim vErrorCode As Integer = 0
            Try

              Dim vBaseDocument As String = ""
              Dim vMergeFields As ArrayListEx = Nothing
              Dim vNewDocument As String = ""
              Dim vSubject As String = ""
              Dim vEMailAddress As String = ""
              Dim vHTML As Boolean
              If mvSubject.Length > 0 Then
                vEMailAddress = vEMailItem.EmailAddress
                vSubject = mvSubject
                vNewDocument = mvBaseDocument
              Else
                Dim vSTDDoc As StandardDocument = GetStandardDocumentData(vMergeFields, vBaseDocument)
                If Subject.Length > 0 Then
                  vSubject = Subject
                Else
                  vSubject = vSTDDoc.Subject
                End If
                vHTML = True
                'Merge the data with the document
                Dim vDataFields As New ArrayListEx(vEMailItem.MergeData, True)
                Dim vContactNumber As Integer
                vNewDocument = vBaseDocument
                For vIndex As Integer = 0 To vMergeFields.Count - 1
                  vNewDocument = Replace$(vNewDocument, "&lt;&lt;" & vMergeFields(vIndex).ToString & "&gt;&gt;", vDataFields(vIndex).ToString)
                  vNewDocument = Replace$(vNewDocument, "<<" & vMergeFields(vIndex).ToString & ">>", vDataFields(vIndex).ToString)
                  If vMergeFields(vIndex).ToString = "EMail" Then vEMailAddress = vDataFields(vIndex).ToString
                  If vMergeFields(vIndex).ToString = "Contact Number" Then vContactNumber = IntegerValue(vDataFields(vIndex).ToString)
                Next
              End If
              vCount += 1
              'Create the message and Send the email
              Dim vMailMessage As New MailMessage(FromEmailAddress, vEMailAddress, vSubject, vNewDocument)
              Dim vMailAddress As New MailAddress(FromEmailAddress, FromDisplayName)
              vMailMessage.Sender = vMailAddress
              Dim vMailAttachment As System.Net.Mail.Attachment = Nothing
              vMailMessage.IsBodyHtml = vHTML
              ProcessMergedImages(vMailMessage)

              'Add attachments if it is supported by the database and the attachment file exists
              If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbBulkEmailAttachments) Then
                For Each vAttachment As String In Attachments
                  vMailAttachment = New System.Net.Mail.Attachment(vAttachment)
                  vMailMessage.Attachments.Add(vMailAttachment)
                Next
              End If

              pSMTP.Send(vMailMessage)
            Catch smtpEx As SmtpException
              vErrorCode = smtpEx.StatusCode
            Catch vExF As System.FormatException
              vErrorCode = 1
            Catch vFNFEx As System.IO.FileNotFoundException
              vErrorCode = 3
            Catch vIOEx As System.IO.IOException
              vErrorCode = 4 'user may not have permissions to access the file
            Catch ex As Exception
              vErrorCode = 2
            Finally
              mvEnv.Connection.StartTransaction()
              If vErrorCode = 0 Then
                vEMailItem.SetProcessed()                   'Mark it as successfully processed
                vEMailItem.Save()
                IncrementNumberProcessed()
                If vContactEmailing.Existing Then
                  vContactEmailing.SetProcessed()
                  vContactEmailing.Save()
                End If
              Else
                vEMailItem.SetFailed(vErrorCode)            'Mark it as failed
                vEMailItem.Save()
                vFailed += 1
                IncrementNumberFailed()
                If vContactEmailing.Existing Then
                  vContactEmailing.SetFailed(vErrorCode)
                  vContactEmailing.Save()
                End If
              End If
              mvEnv.Connection.CommitTransaction()
            End Try
          End If
        End If
      Next
    End Sub

    Private Shared Sub ProcessMergedImages(pMailMessage As Net.Mail.MailMessage)
      Dim vPattern As String = "&lt;IMAGEFIELD\((.*?)\)&gt;"
      Dim vMatches As MatchCollection = Regex.Matches(pMailMessage.Body, vPattern)
      If vMatches.Count > 0 Then
        For Each vMatch As Match In vMatches
          GenerateInlineImage(pMailMessage, vMatch.Value)
        Next
      End If
    End Sub

    Private Shared Sub GenerateInlineImage(pMailMessage As Net.Mail.MailMessage, vImageToken As String)
      Dim vImagePath As String = vImageToken.Replace("&lt;IMAGEFIELD(", "").Replace(")&gt;", "")
      If File.Exists(vImagePath) Then
        'Always attach the image. Some Html renderers (like my Outlook 2013) won't render the base64 image correctly.
        Dim vAtt As New System.Net.Mail.Attachment(vImagePath)
        vAtt.ContentId = Guid.NewGuid().ToString()
        pMailMessage.Attachments.Add(vAtt)

        'Also encode the image in base64.  This may not always work as support for base64 images is not universal
        If pMailMessage.IsBodyHtml Then
          Using vImg As Image = Image.FromFile(vImagePath)
            Using vMS As New MemoryStream()
              vImg.Save(vMS, ImageFormat.Jpeg)
              Dim vBytes() As Byte = vMS.ToArray()
              Dim vBase64Image As String = Convert.ToBase64String(vBytes)
              Dim vImgSource As String = String.Format("<img src=""data:image/jpeg;base64,{0}"" alt=""{1}""/>", vBase64Image, Path.GetFileName(vImagePath))
              pMailMessage.Body = pMailMessage.Body.Replace(vImageToken, vImgSource)
            End Using
          End Using
        End If
      End If
    End Sub

#End Region

  End Class
End Namespace
