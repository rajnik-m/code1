Namespace Access

  Public Class MailingTemplate
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum MailingTemplateFields
      AllFields = 0
      MailingTemplate
      MailingTemplateDesc
      StandardDocument
      EditAccessLevel
      ParagraphAccessLevel
      ExplicitSelection
      WarningSuppressions
      ExclusionSuppressions
      PrinterNumber
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("mailing_template")
        .Add("mailing_template_desc")
        .Add("standard_document")
        .Add("edit_access_level")
        .Add("paragraph_access_level")
        .Add("explicit_selection")
        .Add("warning_suppressions")
        .Add("exclusion_suppressions")
        .Add("printer_number", CDBField.FieldTypes.cftInteger)

        .Item(MailingTemplateFields.MailingTemplate).PrimaryKey = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "mt"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "mailing_templates"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property MailingTemplateCode() As String
      Get
        Return mvClassFields(MailingTemplateFields.MailingTemplate).Value
      End Get
    End Property
    Public ReadOnly Property MailingTemplateDesc() As String
      Get
        Return mvClassFields(MailingTemplateFields.MailingTemplateDesc).Value
      End Get
    End Property
    Public ReadOnly Property StandardDocumentCode() As String
      Get
        Return mvClassFields(MailingTemplateFields.StandardDocument).Value
      End Get
    End Property
    Public ReadOnly Property EditAccessLevel() As CDBUser.UserAccessLevel
      Get
        Select Case mvClassFields.Item(MailingTemplateFields.EditAccessLevel).Value
          Case "D"
            Return CDBUser.UserAccessLevel.ualDatabaseAdministrator
          Case "S"
            Return CDBUser.UserAccessLevel.ualSupervisor
          Case "R"
            Return CDBUser.UserAccessLevel.ualReadOnly
          Case "U"
            Return CDBUser.UserAccessLevel.ualUser
          Case Else
            Return CType(CDBUser.UserAccessLevel.ualDatabaseAdministrator + 1, CDBUser.UserAccessLevel)
        End Select
      End Get
    End Property
    Public ReadOnly Property ParagraphAccessLevel() As CDBUser.UserAccessLevel
      Get
        Select Case mvClassFields.Item(MailingTemplateFields.ParagraphAccessLevel).Value
          Case "D"
            Return CDBUser.UserAccessLevel.ualDatabaseAdministrator
          Case "S"
            Return CDBUser.UserAccessLevel.ualSupervisor
          Case "R"
            Return CDBUser.UserAccessLevel.ualReadOnly
          Case "U"
            Return CDBUser.UserAccessLevel.ualUser
          Case Else
            Return CType(CDBUser.UserAccessLevel.ualDatabaseAdministrator + 1, CDBUser.UserAccessLevel)
        End Select
      End Get
    End Property
    Public ReadOnly Property ExplicitSelection() As String
      Get
        Return mvClassFields(MailingTemplateFields.ExplicitSelection).Value
      End Get
    End Property
    Public ReadOnly Property WarningSuppressions() As String
      Get
        Return mvClassFields(MailingTemplateFields.WarningSuppressions).Value
      End Get
    End Property
    Public ReadOnly Property ExclusionSuppressions() As String
      Get
        Return mvClassFields(MailingTemplateFields.ExclusionSuppressions).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(MailingTemplateFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(MailingTemplateFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property PrinterNumber() As Integer
      Get
        Return mvClassFields(MailingTemplateFields.PrinterNumber).IntegerValue
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"
    Private mvStandardDoc As StandardDocument
    Private mvDocuments As CollectionList(Of MailingTemplateDocument)
    Private mvParagraphs As CollectionList(Of MailingTemplateParagraph)
    Private mvMailingDoc As ContactMailingDocument

    Public ReadOnly Property StandardDocument() As StandardDocument
      Get
        If mvStandardDoc Is Nothing Then
          mvStandardDoc = New StandardDocument(mvEnv)
          mvStandardDoc.Init(StandardDocumentCode)
        End If
        Return mvStandardDoc
      End Get
    End Property

    Public ReadOnly Property Documents() As CollectionList(Of MailingTemplateDocument)
      Get
        If mvDocuments Is Nothing Then
          mvDocuments = New CollectionList(Of MailingTemplateDocument)
          Dim vMTD As New MailingTemplateDocument(mvEnv)
          Dim vWhereFields As New CDBFields
          vWhereFields.Add("mailing_template", MailingTemplateCode)
          Dim vRecordSet As CDBRecordSet = New SQLStatement(mvEnv.Connection, vMTD.GetRecordSetFields, "mailing_template_documents mtd", vWhereFields).GetRecordSet
          With vRecordSet
            While .Fetch()
              vMTD.InitFromRecordSet(vRecordSet)
              mvDocuments.Add(vMTD.StandardDocumentCode, vMTD)
              vMTD = New MailingTemplateDocument(mvEnv)
            End While
            .CloseRecordSet()
          End With
        End If
        Return mvDocuments
      End Get
    End Property

    Public Sub SetIncludedParagraphs(ByVal pSelectedList As String)

      Dim vSelectedParas() As String = Split(pSelectedList, ",")
      For Each vMTP As MailingTemplateParagraph In Paragraphs
        vMTP.Include = False
        For vIndex As Integer = 0 To UBound(vSelectedParas)
          If vMTP.ParagraphNumber = Val(vSelectedParas(vIndex)) Then
            vMTP.Include = True
            Exit For
          End If
        Next
      Next
    End Sub
    Public ReadOnly Property Paragraphs() As CollectionList(Of MailingTemplateParagraph)
      Get
        Dim vMTP As New MailingTemplateParagraph(mvEnv)
        If mvParagraphs Is Nothing Then
          mvParagraphs = New CollectionList(Of MailingTemplateParagraph)
          Dim vWhereFields As New CDBFields
          vWhereFields.Add("mailing_template", MailingTemplateCode)
          Dim vRecordSet As CDBRecordSet = New SQLStatement(mvEnv.Connection, vMTP.GetRecordSetFields, "mailing_template_paragraphs mtp", vWhereFields, "sequence_number").GetRecordSet
          While vRecordSet.Fetch()
            vMTP.InitFromRecordSet(vRecordSet)
            mvParagraphs.Add(vMTP.ParagraphNumber.ToString, vMTP)
            vMTP = New MailingTemplateParagraph(mvEnv)
          End While
          vRecordSet.CloseRecordSet()
        End If
        Return mvParagraphs
      End Get
    End Property

    Public Function ContactWarningSuppressions(ByVal pContact As Contact, ByVal pOrganisation As Organisation) As String
      'Check if contact has a suppression for the WarningSuppressions & return the description
      Dim vWarnings As String = ""

      If WarningSuppressions.Length > 0 Then
        If Not pOrganisation Is Nothing Then
          Dim vOrganisationSuppression As New OrganisationSuppression(mvEnv)
          If vOrganisationSuppression.HasSuppressions(pOrganisation.OrganisationNumber, WarningSuppressions, vWarnings) Then vWarnings = vbCrLf & vWarnings & vbCrLf
        Else
          Dim vContactSuppression As New ContactSuppression(mvEnv)
          If vContactSuppression.HasSuppressions(pContact.ContactNumber, WarningSuppressions, vWarnings) Then vWarnings = vbCrLf & vWarnings & vbCrLf
        End If
      End If
      Return vWarnings
    End Function

    Public ReadOnly Property ContactHasExclusionSuppressions(ByVal pContact As Contact, ByVal pOrganisation As Organisation) As Boolean
      Get
        'Check if contact has a suppression for the ExclusionSuppression
        Dim vDesc As String = ""
        If ExclusionSuppressions.Length > 0 Then
          If Not pOrganisation Is Nothing Then
            Dim vOrganisationSuppression As New OrganisationSuppression(mvEnv)
            Return vOrganisationSuppression.HasSuppressions(pOrganisation.OrganisationNumber, ExclusionSuppressions, vDesc)
          Else
            Dim vContactSuppression As New ContactSuppression(mvEnv)
            Return vContactSuppression.HasSuppressions(pContact.ContactNumber, ExclusionSuppressions, vDesc)
          End If
        End If
      End Get
    End Property

    Public ReadOnly Property ContactMailingDocument() As ContactMailingDocument
      Get
        If mvMailingDoc Is Nothing Then mvMailingDoc = New ContactMailingDocument(mvEnv)
        Return mvMailingDoc
      End Get
    End Property

#End Region
  End Class
End Namespace
