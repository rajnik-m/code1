Namespace Access

  Public Class MailingHistory
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum MailingHistoryFields
      AllFields = 0
      Mailing
      MailingDate
      MailingBy
      NumberInMailing
      MailingNumber
      MailingFilename
      Notes
      IssueId
      NumberEmailsBounced
      NumberEmailsOpened
      NumberEmailsClicked
      Topic
      SubTopic
      Subject
    End Enum

    Public Enum CancelMailingTypes
      cmtEmail = 0
      cmtDocMail
      cmtAll
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("mailing")
        .Add("mailing_date", CDBField.FieldTypes.cftDate)
        .Add("mailing_by")
        .Add("number_in_mailing", CDBField.FieldTypes.cftLong)
        .Add("mailing_number", CDBField.FieldTypes.cftLong)
        .Add("mailing_filename")
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("issue_id")
        .Add("number_emails_bounced", CDBField.FieldTypes.cftLong)
        .Add("number_emails_opened", CDBField.FieldTypes.cftLong)
        .Add("number_emails_clicked", CDBField.FieldTypes.cftLong)
        .Add("topic")
        .Add("sub_topic")
        .Add("subject")

        mvClassFields(MailingHistoryFields.Topic).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbMailingHistoryTopic)
        mvClassFields(MailingHistoryFields.SubTopic).InDatabase = mvClassFields(MailingHistoryFields.Topic).InDatabase
        mvClassFields(MailingHistoryFields.Subject).InDatabase = mvClassFields(MailingHistoryFields.Topic).InDatabase

        .Item(MailingHistoryFields.MailingNumber).PrimaryKey = True
        .SetControlNumberField(MailingHistoryFields.MailingNumber, "MA")
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return False
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "mh"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "mailing_history"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property Mailing() As String
      Get
        Return mvClassFields(MailingHistoryFields.Mailing).Value
      End Get
    End Property
    Public ReadOnly Property MailingDate() As String
      Get
        Return mvClassFields(MailingHistoryFields.MailingDate).Value
      End Get
    End Property
    Public ReadOnly Property MailingBy() As String
      Get
        Return mvClassFields(MailingHistoryFields.MailingBy).Value
      End Get
    End Property
    Public ReadOnly Property NumberInMailing() As Integer
      Get
        Return mvClassFields(MailingHistoryFields.NumberInMailing).IntegerValue
      End Get
    End Property
    Public ReadOnly Property MailingNumber() As Integer
      Get
        Return mvClassFields(MailingHistoryFields.MailingNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property MailingFilename() As String
      Get
        Return mvClassFields(MailingHistoryFields.MailingFilename).Value
      End Get
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(MailingHistoryFields.Notes).Value
      End Get
    End Property
    Public ReadOnly Property IssueId() As String
      Get
        Return mvClassFields(MailingHistoryFields.IssueId).Value
      End Get
    End Property
    Public ReadOnly Property NumberEmailsBounced() As Integer
      Get
        Return mvClassFields(MailingHistoryFields.NumberEmailsBounced).IntegerValue
      End Get
    End Property
    Public ReadOnly Property NumberEmailsOpened() As Integer
      Get
        Return mvClassFields(MailingHistoryFields.NumberEmailsOpened).IntegerValue
      End Get
    End Property
    Public ReadOnly Property NumberEmailsClicked() As Integer
      Get
        Return mvClassFields(MailingHistoryFields.NumberEmailsClicked).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Topic() As String
      Get
        Return mvClassFields(MailingHistoryFields.Topic).Value
      End Get
    End Property
    Public ReadOnly Property SubTopic() As String
      Get
        Return mvClassFields(MailingHistoryFields.SubTopic).Value
      End Get
    End Property
    Public ReadOnly Property Subject() As String
      Get
        Return mvClassFields(MailingHistoryFields.Subject).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Public Sub InitByIssueID(ByVal pIssueID As String)
      Init()
      Dim vPrimaryKey As ClassField = mvClassFields.Item(MailingHistoryFields.IssueId)
      If vPrimaryKey.FieldType <> CDBField.FieldTypes.cftCharacter Then RaiseError(DataAccessErrors.daePrimaryKeyWrongDataType, mvClassFields.DatabaseTableName)
      Dim vWhereFields As New CDBFields(New CDBField(vPrimaryKey.Name, pIssueID))
      InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Sub IncrementNumberInMailing()
      Dim vUpdateFields As New CDBFields
      vUpdateFields.Add(mvClassFields(MailingHistoryFields.NumberInMailing).Name, CDBField.FieldTypes.cftInteger, mvClassFields(MailingHistoryFields.NumberInMailing).Name & " + 1")
      Dim vWhereFields As CDBFields = mvClassFields.WhereFields
      mvEnv.Connection.UpdateRecords(DatabaseTableName, vUpdateFields, vWhereFields)
    End Sub

    Public Sub DeleteEmailHistory(ByVal pMailingNumber As Integer, ByVal pTotalMailings As Integer, Optional ByRef pAmendedBy As String = "", Optional ByRef pAudit As Boolean = False)

      mvEnv.Connection.StartTransaction()

      Dim vWherefields As New CDBFields
      vWherefields.Add("mailing_number", pMailingNumber)

      'First check if there are any emailings
      Dim vEmailingCount As Integer = 0
      vEmailingCount = mvEnv.Connection.GetCount("contact_emailings", vWherefields)

      'If there are any emailings
      If vEmailingCount > 0 Then
        'delete from contact_emailings
        mvEnv.Connection.DeleteRecords("contact_emailings", vWherefields, False)

        'check if there are any other non-email mailings by checking total number of mailings
        Dim vTotalMailingCount As Integer = 0
        Dim vMailingCountSQL As New SQLStatement(mvEnv.Connection, "number_in_mailing", "mailing_history", vWherefields)
        vTotalMailingCount = IntegerValue(vMailingCountSQL.GetValue())

        If (vTotalMailingCount > vEmailingCount) Then
          'there are contact_mailings records for this mailing_number so update mailing_history number_in_mailing
          Dim vNewNumberInMailing As Integer = vTotalMailingCount - vEmailingCount
          Dim vUpdateFields As New CDBFields
          vUpdateFields.Add("number_in_mailing", vNewNumberInMailing)
          mvEnv.Connection.UpdateRecords("mailing_history", vUpdateFields, vWherefields)
        ElseIf vTotalMailingCount = vEmailingCount Then
          'there are no contact_mailings records for this mailing_number so we can delete the mailing_history record
          mvEnv.Connection.DeleteRecords("mailing_history", vWherefields, False)
        End If
      End If
      mvEnv.Connection.CommitTransaction()
    End Sub

#End Region

  End Class
End Namespace
