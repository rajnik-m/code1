Namespace Access

  Public Class ContactEmailing
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum ContactEmailingFields
      AllFields = 0
      ContactNumber
      AddressNumber
      CommunicationNumber
      MailingNumber
      ProcessedOn
      ProcessedStatus
      ErrorNumber
      OpenedDatetime
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("communication_number", CDBField.FieldTypes.cftLong)
        .Add("mailing_number", CDBField.FieldTypes.cftLong)
        .Add("processed_on", CDBField.FieldTypes.cftTime)
        .Add("processed_status")
        .Add("error_number", CDBField.FieldTypes.cftLong)
        .Add("opened_datetime", CDBField.FieldTypes.cftTime)

        .Item(ContactEmailingFields.ContactNumber).PrimaryKey = True
        .Item(ContactEmailingFields.AddressNumber).PrimaryKey = True
        .Item(ContactEmailingFields.CommunicationNumber).PrimaryKey = True
        .Item(ContactEmailingFields.MailingNumber).PrimaryKey = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return False
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ce"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "contact_emailings"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(ContactEmailingFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AddressNumber() As Integer
      Get
        Return mvClassFields(ContactEmailingFields.AddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CommunicationNumber() As Integer
      Get
        Return mvClassFields(ContactEmailingFields.CommunicationNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property MailingNumber() As Integer
      Get
        Return mvClassFields(ContactEmailingFields.MailingNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ProcessedOn() As String
      Get
        Return mvClassFields(ContactEmailingFields.ProcessedOn).Value
      End Get
    End Property
    Public ReadOnly Property ProcessedStatus() As String
      Get
        Return mvClassFields(ContactEmailingFields.ProcessedStatus).Value
      End Get
    End Property
    Public ReadOnly Property ErrorNumber() As Integer
      Get
        Return mvClassFields(ContactEmailingFields.ErrorNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property OpenedDatetime() As String
      Get
        Return mvClassFields(ContactEmailingFields.OpenedDatetime).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Public Shared Function GetInstance(ByRef pEnv As CDBEnvironment, ByRef pMailingHistory As MailingHistory, ByVal pEmailAddress As String) As ContactEmailing
      Dim vResult As New ContactEmailing(pEnv)
      Dim vContactNumber As Integer = 0
      Dim vAddressNumber As Integer = 0
      Dim vCommsNumber As Integer = 0
      vResult.GetContactEmailingParams(vContactNumber, vAddressNumber, vCommsNumber, pMailingHistory.MailingDate, pEmailAddress)
      vResult.InitFromMailingNumberAndContact(pMailingHistory.MailingNumber, vContactNumber)
      Return If(vResult.Existing, vResult, Nothing)
    End Function

    Public Shared Function CreateInstance(ByVal pEnv As CDBEnvironment, ByVal pContactNumber As Integer, ByVal pEmailAddress As String, ByVal pMailingNumber As String) As ContactEmailing
      Dim vResult As New ContactEmailing(pEnv)
      vResult.Init()
      Dim vContactNumber As Integer = pContactNumber
      Dim vAddressNumber As Integer = 0
      Dim vCommsNumber As Integer = 0
      vResult.GetContactEmailingParams(vContactNumber, vAddressNumber, vCommsNumber, TodaysDate, pEmailAddress)
      If vContactNumber <> pContactNumber Then
        RaiseError(DataAccessErrors.daeDotMailerSdkNotFound)
      End If
      vResult.mvClassFields(ContactEmailingFields.ContactNumber).IntegerValue = pContactNumber
      vResult.mvClassFields(ContactEmailingFields.AddressNumber).IntegerValue = vAddressNumber
      vResult.mvClassFields(ContactEmailingFields.CommunicationNumber).IntegerValue = vCommsNumber
      vResult.mvClassFields(ContactEmailingFields.MailingNumber).SetValue = pMailingNumber
      vResult.mvClassFields(ContactEmailingFields.ProcessedOn).SetValue = TodaysDate()
      Return vResult
    End Function

    Public Sub InitFromMailingNumberAndContact(ByVal pMailingNumber As Integer, ByVal pContactNumber As Integer)
      CheckClassFields()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(ContactEmailingFields.MailingNumber).Name, pMailingNumber)
      vWhereFields.Add(mvClassFields(ContactEmailingFields.ContactNumber).Name, pContactNumber)
      MyBase.InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Sub SetProcessed()
      mvClassFields(ContactEmailingFields.ProcessedOn).Value = TodaysDateAndTime()
      mvClassFields(ContactEmailingFields.ProcessedStatus).Value = "S"
      mvClassFields(ContactEmailingFields.ErrorNumber).IntegerValue = 0
    End Sub

    Public Sub SetFailed(ByVal pErrorNumber As Integer)
      mvClassFields(ContactEmailingFields.ProcessedOn).Value = TodaysDateAndTime()
      mvClassFields(ContactEmailingFields.ProcessedStatus).Value = "F"
      mvClassFields(ContactEmailingFields.ErrorNumber).IntegerValue = pErrorNumber
    End Sub

    Public Sub GetContactEmailingParams(ByRef pContactNumber As Integer, ByRef pAddressNumber As Integer, ByRef pCommsNumber As Integer, ByVal pMailDate As String, ByVal pEmail As String, Optional ByVal pConNumber As String = "")
      ' This function will try to get details about the contact using the email address we have in the data file.
      ' For Phase 1 CM development, we will probably not be getting any CARE values back in the file, so need to search
      Dim vWhereFields As New CDBFields
      If pConNumber <> String.Empty AndAlso pEmail = "" Then
        vWhereFields.Add("contact_number", CDBField.FieldTypes.cftInteger, IntegerValue(pConNumber))
        vWhereFields.Add("device", mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlEmailDevice))
        vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOpenBracket)
        vWhereFields.Add("valid_from#1", CDBField.FieldTypes.cftDate, pMailDate, CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoLessThanEqual Or CDBField.FieldWhereOperators.fwoCloseBracket)
        vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOpenBracket)
        vWhereFields.Add("valid_to#1", CDBField.FieldTypes.cftDate, pMailDate, CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoGreaterThanEqual Or CDBField.FieldWhereOperators.fwoCloseBracket)
        vWhereFields.Add("mail", "Y")
      ElseIf pConNumber <> String.Empty AndAlso pEmail <> String.Empty Then
        vWhereFields.Add("number", pEmail).SpecialColumn = True
        vWhereFields.Add("contact_number", CDBField.FieldTypes.cftInteger, IntegerValue(pConNumber))
        vWhereFields.Add("device", mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlEmailDevice))
        vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOpenBracket)
        vWhereFields.Add("valid_from#1", CDBField.FieldTypes.cftDate, pMailDate, CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoLessThanEqual Or CDBField.FieldWhereOperators.fwoCloseBracket)
        vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOpenBracket)
        vWhereFields.Add("valid_to#1", CDBField.FieldTypes.cftDate, pMailDate, CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoGreaterThanEqual Or CDBField.FieldWhereOperators.fwoCloseBracket)
        vWhereFields.Add("mail", "Y")
      Else
        vWhereFields.Add("number", pEmail).SpecialColumn = True
      End If
      Select Case mvEnv.Connection.GetCount("communications", vWhereFields)
        Case 0
          ' Strange - can't find the email address - cannot process
          pContactNumber = 0
          pAddressNumber = 0
          pCommsNumber = 0
        Case 1
          ' Heaven - just the one record - use 
          Dim vAttrs As String = "contact_number, address_number, communication_number"
          Dim vSQL As New SQLStatement(mvEnv.Connection, vAttrs, "communications", vWhereFields)
          Dim vRecSet As CDBRecordSet = vSQL.GetRecordSet
          If vRecSet.Fetch = True Then
            pContactNumber = vRecSet.Fields("contact_number").IntegerValue
            pAddressNumber = vRecSet.Fields("address_number").IntegerValue
            pCommsNumber = vRecSet.Fields("communication_number").IntegerValue
          End If
          vRecSet.CloseRecordSet()
        Case Is > 1
          ' Need to see which one was used (if possible)
          ' At this time, we will take the first record that was valid at the time of mailing which has the mail flag set 
          Dim vAttrs As String = "contact_number, address_number, communication_number, valid_from, valid_to, mail, device_default, preferred_method"
          Dim vSQL As New SQLStatement(mvEnv.Connection, vAttrs, "communications", vWhereFields, "communication_number desc")
          Dim vDataSet As System.Data.DataSet = mvEnv.Connection.GetDataSet(vSQL)
          For Each vDataRow As System.Data.DataRow In vDataSet.Tables(0).Rows
            Dim vDate As Date = Date.Parse(pMailDate)
            If Not IsDate(vDataRow("valid_from").ToString) Then vDataRow("valid_from") = "01/01/1900"
            If Not IsDate(vDataRow("valid_to").ToString) Then vDataRow("valid_to") = "31/12/2999"
            If vDate >= Date.Parse(vDataRow("valid_from").ToString) And vDate <= Date.Parse(vDataRow("valid_to").ToString) Then
              If vDataRow("mail").ToString = "Y" Then
                pContactNumber = Utilities.Common.IntegerValue(vDataRow("contact_number").ToString)
                pAddressNumber = Utilities.Common.IntegerValue(vDataRow("address_number").ToString)
                pCommsNumber = Utilities.Common.IntegerValue(vDataRow("communication_number").ToString)
                Exit For
              End If
            End If
          Next
          ' If we still have not found a record, we will have to take the first one in the list
          If pContactNumber = 0 OrElse pAddressNumber = 0 OrElse pCommsNumber = 0 Then
            pContactNumber = Utilities.Common.IntegerValue(vDataSet.Tables(0).Rows(0)("contact_number").ToString)
            pAddressNumber = Utilities.Common.IntegerValue(vDataSet.Tables(0).Rows(0)("address_number").ToString)
            pCommsNumber = Utilities.Common.IntegerValue(vDataSet.Tables(0).Rows(0)("communication_number").ToString)
          End If
      End Select
      'For contact_emailings records the assoicated communications record should not need an address number, so
      'if none exists, use the contacts default address.
      If pAddressNumber = 0 And pContactNumber > 0 Then
        Dim vAttrs As String = "address_number"
        Dim vContactWhereFields As New CDBFields
        vContactWhereFields.Add("contact_number", CDBField.FieldTypes.cftInteger, pContactNumber)
        Dim vSQL As New SQLStatement(mvEnv.Connection, vAttrs, "contacts", vContactWhereFields)
        Dim vRecSet As CDBRecordSet = vSQL.GetRecordSet
        If vRecSet.Fetch = True Then
          pAddressNumber = vRecSet.Fields("address_number").IntegerValue
        End If
        vRecSet.CloseRecordSet()
      End If

    End Sub

#End Region

  End Class
End Namespace
