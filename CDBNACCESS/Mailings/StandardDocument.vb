Namespace Access

  Public Class StandardDocument
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum StandardDocumentFields
      AllFields = 0
      StandardDocument
      StandardDocumentDesc
      DocumentType
      InstantPrint
      Topic
      SubTopic
      HistoryOnly
      MailmergeHeader
      StandardDocumentText
      Package
      InUseBy
      Precis
      Subject
      DocumentClass
      EmailFrom
      EmailReplyTo
      EmailCc
      EmailBcc
      EmailBodyIsHtml
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("standard_document")
        .Add("standard_document_desc")
        .Add("document_type")
        .Add("instant_print")
        .Add("topic")
        .Add("sub_topic")
        .Add("history_only")
        .Add("mailmerge_header")
        .Add("standard_document_text", CDBField.FieldTypes.cftBulk)
        .Add("package")
        .Add("in_use_by")
        .Add("precis", CDBField.FieldTypes.cftMemo)
        .Add("subject")
        .Add("document_class")
        .Add("email_from").PrefixRequired = True
        .Add("email_reply_to").PrefixRequired = True
        .Add("email_cc").PrefixRequired = True
        .Add("email_bcc").PrefixRequired = True
        .Add("email_body_is_html").PrefixRequired = True

        .Item(StandardDocumentFields.StandardDocument).PrimaryKey = True
        If Not mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbEmailTemplates) Then
          .Item(StandardDocumentFields.EmailFrom).InDatabase = False
          .Item(StandardDocumentFields.EmailReplyTo).InDatabase = False
          .Item(StandardDocumentFields.EmailCc).InDatabase = False
          .Item(StandardDocumentFields.EmailBcc).InDatabase = False
          .Item(StandardDocumentFields.EmailBodyIsHtml).InDatabase = False
        End If
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "sd"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "standard_documents"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property StandardDocumentCode() As String
      Get
        Return mvClassFields(StandardDocumentFields.StandardDocument).Value
      End Get
    End Property
    Public ReadOnly Property StandardDocumentDesc() As String
      Get
        Return mvClassFields(StandardDocumentFields.StandardDocumentDesc).Value
      End Get
    End Property
    Public ReadOnly Property DocumentType() As String
      Get
        Return mvClassFields(StandardDocumentFields.DocumentType).Value
      End Get
    End Property
    Public ReadOnly Property InstantPrint() As String
      Get
        Return mvClassFields(StandardDocumentFields.InstantPrint).Value
      End Get
    End Property
    Public ReadOnly Property Topic() As String
      Get
        Return mvClassFields(StandardDocumentFields.Topic).Value
      End Get
    End Property
    Public ReadOnly Property SubTopic() As String
      Get
        Return mvClassFields(StandardDocumentFields.SubTopic).Value
      End Get
    End Property
    Public ReadOnly Property HistoryOnly() As String
      Get
        Return mvClassFields(StandardDocumentFields.HistoryOnly).Value
      End Get
    End Property
    Public ReadOnly Property MailmergeHeader() As String
      Get
        Return mvClassFields(StandardDocumentFields.MailmergeHeader).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(StandardDocumentFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(StandardDocumentFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property StandardDocumentText() As String
      Get
        Return mvClassFields(StandardDocumentFields.StandardDocumentText).Value
      End Get
    End Property
    Public ReadOnly Property ExternalApplicationCode() As String
      Get
        Return mvClassFields(StandardDocumentFields.Package).Value
      End Get
    End Property
    Public ReadOnly Property InUseBy() As String
      Get
        Return mvClassFields(StandardDocumentFields.InUseBy).Value
      End Get
    End Property
    Public ReadOnly Property Precis() As String
      Get
        Return mvClassFields(StandardDocumentFields.Precis).Value
      End Get
    End Property
    Public ReadOnly Property Subject() As String
      Get
        Return mvClassFields(StandardDocumentFields.Subject).Value
      End Get
    End Property
    Public ReadOnly Property DocumentClass() As String
      Get
        Return mvClassFields(StandardDocumentFields.DocumentClass).Value
      End Get
    End Property
    Public ReadOnly Property EmailFrom As String
      Get
        Return mvClassFields(StandardDocumentFields.EmailFrom).Value
      End Get
    End Property
    Public ReadOnly Property EmailReplyTo As String
      Get
        Return mvClassFields(StandardDocumentFields.EmailReplyTo).Value
      End Get
    End Property
    Public ReadOnly Property EmailCc As String
      Get
        Return mvClassFields(StandardDocumentFields.EmailCc).Value
      End Get
    End Property
    Public ReadOnly Property EmailBcc As String
      Get
        Return mvClassFields(StandardDocumentFields.EmailBcc).Value
      End Get
    End Property
    Public ReadOnly Property EmailBodyIsHtml As Boolean
      Get
        Return mvClassFields(StandardDocumentFields.EmailBodyIsHtml).Bool
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Public Sub ReadStandardDocumentText()
      MyBase.ReadBulkAttribute(StandardDocumentFields.StandardDocumentText)
    End Sub

    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      If InUseBy.Length > 0 And InUseBy <> mvEnv.User.UserID Then RaiseError(DataAccessErrors.daeCannotDeleteInUse, InUseBy)
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
      DeleteAttachments()
    End Sub

    Public Overloads Sub Create(ByVal pEnv As CDBEnvironment, ByVal pParams As CDBParameters)
      Init()
      mvClassFields(StandardDocumentFields.StandardDocument).Value = pParams("StandardDocument").Value
      mvClassFields(StandardDocumentFields.DocumentType).Value = pParams("DocumentType").Value
      If pParams.HasValue("Package") Then mvClassFields(StandardDocumentFields.Package).Value = pParams("Package").Value
      If pParams.HasValue("MailmergeHeader") Then mvClassFields(StandardDocumentFields.MailmergeHeader).Value = pParams("MailmergeHeader").Value
      Update(pParams)
    End Sub

    Public Overrides Sub Update(ByVal pParams As CDBParameters)
      If pParams.HasValue("StandardDocumentDesc") Then mvClassFields(StandardDocumentFields.StandardDocumentDesc).Value = pParams("StandardDocumentDesc").Value
      If pParams.Exists("DocumentClass") Then mvClassFields(StandardDocumentFields.DocumentClass).Value = pParams("DocumentClass").Value
      If pParams.HasValue("Topic") Then mvClassFields(StandardDocumentFields.Topic).Value = pParams("Topic").Value
      If pParams.HasValue("SubTopic") Then mvClassFields(StandardDocumentFields.SubTopic).Value = pParams("SubTopic").Value
      If pParams.HasValue("InstantPrint") Then mvClassFields(StandardDocumentFields.InstantPrint).Value = pParams("InstantPrint").Value
      If pParams.HasValue("HistoryOnly") Then mvClassFields(StandardDocumentFields.HistoryOnly).Value = pParams("HistoryOnly").Value
      If pParams.Exists("Precis") Then mvClassFields(StandardDocumentFields.Precis).Value = pParams("Precis").Value
      If pParams.Exists("DocumentSubject") Then mvClassFields(StandardDocumentFields.Subject).Value = pParams("DocumentSubject").Value
      If pParams.Exists("EmailFrom") Then mvClassFields(StandardDocumentFields.EmailFrom).Value = pParams("EmailFrom").Value
      If pParams.Exists("EmailCc") Then mvClassFields(StandardDocumentFields.EmailCc).Value = pParams("EmailCc").Value
      If pParams.Exists("EmailBcc") Then mvClassFields(StandardDocumentFields.EmailBcc).Value = pParams("EmailBcc").Value
      If pParams.Exists("EmailReplyTo") Then mvClassFields(StandardDocumentFields.EmailReplyTo).Value = pParams("EmailReplyTo").Value
      If pParams.Exists("EmailBodyIsHtml") Then mvClassFields(StandardDocumentFields.EmailBodyIsHtml).Value = pParams("EmailBodyIsHtml").Value
      mvClassFields(StandardDocumentFields.InUseBy).Value = ""
      If pParams.HasValue("Locked") Then
        If pParams("Locked").Bool Then mvClassFields(StandardDocumentFields.InUseBy).Value = mvEnv.User.UserID
      End If
    End Sub

    Public Sub SaveDocument(ByVal pDocumentName As String, ByVal pExternal As Boolean)
      Dim vFields As New CDBFields
      Dim vFileName As String

      If pExternal Then 'External storage
        vFileName = "FILENAME=" & pDocumentName 'return new filename
        vFields.Add("standard_document_text", CDBField.FieldTypes.cftBulk, vFileName)
      Else
        vFields.Add("standard_document_text", CDBField.FieldTypes.cftFile, pDocumentName)
      End If
      vFields.AddAmendedOnBy(mvEnv.User.UserID)
      mvEnv.Connection.UpdateRecords(DatabaseTableName, vFields, mvClassFields.WhereFields)
    End Sub

    ''' <summary>
    ''' Saves the email content for this standard document.
    ''' </summary>
    ''' <param name="pEmail">The email.</param>
    ''' <exception cref="System.InvalidOperationException">
    ''' Attempt to set the Document property of an uninitialised standard document object
    ''' or
    ''' Attempt to set the Document property of an unsaved standard document object
    ''' or
    ''' Attempt to set the Document property of an email standard document updated no records
    ''' </exception>
    Public Sub SaveEmail(ByVal pEmail As CDBEmailContent)
      If String.IsNullOrWhiteSpace(Me.StandardDocumentCode) Then
        Throw New InvalidOperationException(ErrorText.DaeObjectNotInitialised)
      End If
      If Not Existing Then
        Throw New InvalidOperationException(ErrorText.DaeObjectNotPersisted)
      End If
      Dim vTransactionStarted As Boolean = mvEnv.Connection.StartTransaction
      Try
        Dim vSql As New StringBuilder
        Dim vParamName As String = String.Empty
        Dim vParameter As IDbDataParameter = mvEnv.Connection.GetDBParameterFromByteArray(mvClassFields(StandardDocumentFields.StandardDocumentText).Name,
                                                                                          pEmail.Content,
                                                                                          vParamName)
        vSql.AppendLine("UPDATE " & Me.DatabaseTableName & " ")
        vSql.AppendLine("SET    " & mvClassFields(StandardDocumentFields.StandardDocumentText).Name & " = " & vParamName & " ")
        vSql.AppendLine("WHERE  " & mvClassFields(StandardDocumentFields.StandardDocument).Name & " = '" & Me.StandardDocumentCode & "'")
        Using vCommand As IDbCommand = mvEnv.Connection.CreateCommand
          vCommand.CommandType = CommandType.Text
          vCommand.CommandText = vSql.ToString
          vCommand.Parameters.Add(vParameter)
          If vCommand.ExecuteNonQuery() <> 1 Then
            Throw New InvalidOperationException(String.Format(ErrorText.String16072, Me.DatabaseTableName))
          End If
          DeleteAttachments()
          For Each vAttachment In pEmail.Attachments
            SaveAttachment(vAttachment)
          Next vAttachment
          If vTransactionStarted Then
            mvEnv.Connection.CommitTransaction()
          End If
        End Using
      Catch ex As Exception
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Sub

    ''' <summary>
    ''' Saves the an attachment linked to this standard document attachment.
    ''' </summary>
    ''' <param name="pNewAttachment">The new attachment.</param>
    ''' <exception cref="System.ArgumentNullException">pNewAttachment</exception>
    ''' <exception cref="System.InvalidOperationException">Specified attachement does not exist</exception>
    ''' <remarks>If the supplied <see cref="CDBEmailAttachment"/> contains an ID, it is assumed to be an 
    ''' existing attachment and just a link is created.  If not, the attachment is saved as a new attachment
    ''' and the link is created to that.</remarks>
    Private Sub SaveAttachment(pNewAttachment As CDBEmailAttachment)
      If pNewAttachment Is Nothing Then
        Throw New ArgumentNullException("pNewAttachment")
      End If
      Dim vTransactionStarted As Boolean = mvEnv.Connection.StartTransaction
      Try
        Dim vAttachment As Attachment = Nothing
        If pNewAttachment.Id > 0 Then
          vAttachment = Attachment.GetInstance(mvEnv, pNewAttachment.Id)
          If vAttachment Is Nothing Then
            Throw New InvalidOperationException(ErrorText.DaeAttachmentNotFound)
          End If
        Else
          vAttachment = Attachment.CreateInstance(mvEnv, pNewAttachment.Name, pNewAttachment.Content)
          vAttachment.Save()
        End If
        Dim vAttachmentLink As AttachmentLink = AttachmentLink.CreateInstance(mvEnv,
                                                                              vAttachment.AttachmentId,
                                                                              Me.DatabaseTableName,
                                                                              Me.StandardDocumentCode)
        vAttachmentLink.Save()
        If vTransactionStarted Then
          mvEnv.Connection.CommitTransaction()
        End If
      Catch ex As Exception
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Sub

    ''' <summary>
    ''' Gets the email content for this standard document.
    ''' </summary>
    ''' <returns></returns>
    Public Function GetEmail() As CDBEmailContent
      Dim vResult As New CDBEmailContent With {.IsBodyHtml = Me.EmailBodyIsHtml,
                                               .Attachments = New List(Of CDBEmailAttachment)}
      Dim vSql As New SQLStatement(mvEnv.Connection,
                                   mvClassFields(StandardDocumentFields.StandardDocumentText).Name,
                                   Me.DatabaseTableName,
                                   New CDBField(mvClassFields(StandardDocumentFields.StandardDocument).Name,
                                                Me.StandardDocumentCode,
                                                 CDBField.FieldWhereOperators.fwoEqual))
      Dim vDataRow As DataRow = vSql.GetDataTable.Rows(0)
      vResult.Content = If(vDataRow(0).GetType Is GetType(DBNull), Nothing, CType(vDataRow(0), Byte()))
      Dim vAttachments = New List(Of CDBEmailAttachment)
      For Each vAttachmentLinkRow As DataRow In New SQLStatement(mvEnv.Connection,
                                                                 "attachment_link_id",
                                                                 "attachment_links",
                                                                 New CDBFields({New CDBField("attachment_link_table",
                                                                                            Me.DatabaseTableName),
                                                                                New CDBField("attachment_link_foreign_id",
                                                                                             Me.StandardDocumentCode)})).GetDataTable().AsEnumerable
        Dim vAttachmentLink As AttachmentLink = AttachmentLink.GetInstance(mvEnv, CInt(vAttachmentLinkRow("attachment_link_id")))
        vResult.Attachments.Add(New CDBEmailAttachment With {.Id = vAttachmentLink.Attachment.AttachmentId,
                                                             .Name = vAttachmentLink.Attachment.Name,
                                                             .Content = vAttachmentLink.Attachment.Document})

      Next vAttachmentLinkRow
      If vResult.Content Is Nothing OrElse Not vResult.Content.Length > 0 Then
        vResult = Nothing
      End If
      Return vResult
    End Function

    ''' <summary>
    ''' Deletes the attachments for this standard document.
    ''' </summary>
    Private Sub DeleteAttachments()
      Dim vTransactionStarted As Boolean = mvEnv.Connection.StartTransaction
      Try
        For Each vAttachmentLinkRow As DataRow In New SQLStatement(mvEnv.Connection,
                                                                   "attachment_link_id",
                                                                   "attachment_links",
                                                                   New CDBFields({New CDBField("attachment_link_table",
                                                                                              Me.DatabaseTableName),
                                                                                  New CDBField("attachment_link_foreign_id",
                                                                                               Me.StandardDocumentCode)})).GetDataTable().AsEnumerable
          Dim vAttachmentLink As AttachmentLink = AttachmentLink.GetInstance(mvEnv, CInt(vAttachmentLinkRow("attachment_link_id")))
          vAttachmentLink.Delete()
        Next vAttachmentLinkRow
        If vTransactionStarted Then
          mvEnv.Connection.CommitTransaction()
        End If
      Catch ex As Exception
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Sub
#End Region

  End Class
End Namespace
