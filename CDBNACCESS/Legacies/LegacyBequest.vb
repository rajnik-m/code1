Namespace Access

  Public Class LegacyBequest
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum LegacyBequestFields
      AllFields = 0
      LegacyNumber
      BequestNumber
      BequestDescription
      BequestType
      BequestSubType
      BequestStatus
      ExpectedValue
      EstimatedOutstanding
      Estimate
      Product
      Rate
      ExpectedFractionQuantity
      ExpectedFractionDivision
      Notes
      ConditionMetDate
      DistributionCode
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("legacy_number", CDBField.FieldTypes.cftLong)
        .Add("bequest_number", CDBField.FieldTypes.cftLong)
        .Add("bequest_description")
        .Add("bequest_type")
        .Add("bequest_sub_type")
        .Add("bequest_status")
        .Add("expected_value", CDBField.FieldTypes.cftNumeric)
        .Add("estimated_outstanding", CDBField.FieldTypes.cftNumeric)
        .Add("estimate")
        .Add("product")
        .Add("rate")
        .Add("expected_fraction_quantity", CDBField.FieldTypes.cftInteger)
        .Add("expected_fraction_division", CDBField.FieldTypes.cftInteger)
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("condition_met_date", CDBField.FieldTypes.cftDate)
        .Add("distribution_code")

        .Item(LegacyBequestFields.LegacyNumber).PrimaryKey = True

        .Item(LegacyBequestFields.BequestNumber).PrimaryKey = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "lb"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "legacy_bequests"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property LegacyNumber() As Integer
      Get
        Return mvClassFields(LegacyBequestFields.LegacyNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property BequestNumber() As Integer
      Get
        Return mvClassFields(LegacyBequestFields.BequestNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property BequestDescription() As String
      Get
        Return mvClassFields(LegacyBequestFields.BequestDescription).Value
      End Get
    End Property
    Public ReadOnly Property BequestType() As String
      Get
        Return mvClassFields(LegacyBequestFields.BequestType).Value
      End Get
    End Property
    Public ReadOnly Property BequestSubType() As String
      Get
        Return mvClassFields(LegacyBequestFields.BequestSubType).Value
      End Get
    End Property
    Public ReadOnly Property BequestStatus() As String
      Get
        Return mvClassFields(LegacyBequestFields.BequestStatus).Value
      End Get
    End Property
    Public ReadOnly Property ExpectedValue() As Double
      Get
        Return mvClassFields(LegacyBequestFields.ExpectedValue).DoubleValue
      End Get
    End Property
    Public ReadOnly Property EstimatedOutstanding() As Double
      Get
        Return mvClassFields(LegacyBequestFields.EstimatedOutstanding).DoubleValue
      End Get
    End Property
    Public ReadOnly Property Estimate() As String
      Get
        Return mvClassFields(LegacyBequestFields.Estimate).Value
      End Get
    End Property
    Public ReadOnly Property ProductCode() As String
      Get
        Return mvClassFields(LegacyBequestFields.Product).Value
      End Get
    End Property
    Public ReadOnly Property RateCode() As String
      Get
        Return mvClassFields(LegacyBequestFields.Rate).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(LegacyBequestFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(LegacyBequestFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property ExpectedFractionQuantity() As Integer
      Get
        Return mvClassFields(LegacyBequestFields.ExpectedFractionQuantity).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ExpectedFractionDivision() As Integer
      Get
        Return mvClassFields(LegacyBequestFields.ExpectedFractionDivision).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(LegacyBequestFields.Notes).Value
      End Get
    End Property
    Public ReadOnly Property ConditionMetDate() As String
      Get
        Return mvClassFields(LegacyBequestFields.ConditionMetDate).Value
      End Get
    End Property
    Public ReadOnly Property DistributionCode() As String
      Get
        Return mvClassFields(LegacyBequestFields.DistributionCode).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Private mvReceipts As CollectionList(Of LegacyBequestReceipt)
    Private mvProduct As Product

    Protected Overrides Sub ClearFields()
      mvReceipts = Nothing
      mvProduct = Nothing
    End Sub

    Public Overloads Sub Init(ByVal pLegacyNumber As Integer, ByVal pBequestNumber As Integer)
      CheckClassFields()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(LegacyBequestFields.LegacyNumber).Name, pLegacyNumber)
      vWhereFields.Add(mvClassFields(LegacyBequestFields.BequestNumber).Name, pBequestNumber)
      MyBase.InitWithPrimaryKey(vWhereFields)
    End Sub

    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      mvClassFields(LegacyBequestFields.ExpectedFractionDivision).Value = "1"
      mvClassFields(LegacyBequestFields.ExpectedFractionQuantity).Value = "1"
    End Sub

    Protected Overrides Sub SetValid()
      MyBase.SetValid()
    End Sub

    Public Overrides Function GetAddRecordMandatoryParameters() As String
      Return "LegacyNumber,BequestDescription,Estimate,Product,Rate"
    End Function

    Protected Overrides Sub PostValidateCreateParameters(ByVal pParameterList As CDBParameters)
      ValidateFractionAndDivision()
      MyBase.PostValidateCreateParameters(pParameterList)
      Dim vLegacy As New ContactLegacy(mvEnv)
      vLegacy.Init(LegacyNumber)
      If vLegacy.Existing = False Then Throw New CareException("Legacy not found", 1, "")
      mvClassFields(LegacyBequestFields.BequestNumber).IntegerValue = vLegacy.AllocateNextBequestNumber
    End Sub

    Protected Overrides Sub PostValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      ValidateFractionAndDivision()
      MyBase.PostValidateUpdateParameters(pParameterList)
    End Sub

    Private Sub ValidateFractionAndDivision()
      If mvClassFields(LegacyBequestFields.ExpectedFractionDivision).Value.Length > 0 Then
        If mvClassFields(LegacyBequestFields.ExpectedFractionQuantity).Value.Length = 0 Then
          RaiseError(DataAccessErrors.daeLegacyFQMustBeSet)                          'Fraction Quantity must be specified if Fraction Division has been specified
        ElseIf ExpectedFractionQuantity > ExpectedFractionDivision Then
          RaiseError(DataAccessErrors.daeLegacyFQNotGreater)                         'Fraction Quantity cannot be greater than Fraction Division
        ElseIf ExpectedFractionQuantity > 1 And ExpectedFractionQuantity = ExpectedFractionDivision Then
          RaiseError(DataAccessErrors.daeLegacyFQNotSame)                            'Fraction Quantity and Fraction Division can only be the same if set to 1
        ElseIf ExpectedFractionDivision = 0 Then
          RaiseError(DataAccessErrors.daeLegacyFDNotZero)                            'Fraction Division must be greater than 0
        End If
      ElseIf mvClassFields(LegacyBequestFields.ExpectedFractionQuantity).Value.Length > 0 Then
        RaiseError(DataAccessErrors.daeLegacyFDMustBeSet)                          'Fraction Division must be specified if Fraction Quantity has been specified
      End If
    End Sub

    Public Sub SetExpectedValueAndOutstanding(ByVal pResidue As Double)
      Dim vOldExpectedVale As Double = ExpectedValue
      mvClassFields(LegacyBequestFields.ExpectedValue).DoubleValue = pResidue * ExpectedFractionQuantity / ExpectedFractionDivision
      'New outstanding amount = (new value - (old value - old outstanding amount))
      mvClassFields(LegacyBequestFields.EstimatedOutstanding).DoubleValue = ExpectedValue - (vOldExpectedVale - EstimatedOutstanding)
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      Dim vLegacy As New ContactLegacy(mvEnv)
      vLegacy.Init(LegacyNumber)

      Dim vStages As System.Data.DataTable = Nothing
      If Not Existing Then
        Dim vIncomeStage As New LegacyIncomeStage(mvEnv)
        Dim vWhereFields As New CDBFields()
        If mvEnv.GetConfig("opt_lg_income_stage_level") = "TYPE" Then
          vWhereFields.Add("bequest_type", BequestType)
        Else
          vWhereFields.Add("bequest_sub_type", BequestSubType)
        End If
        vStages = vIncomeStage.GetDataTable(vWhereFields)
      End If

      mvEnv.Connection.StartTransaction()
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)

      If vStages IsNot Nothing Then
        Dim vParams As New CDBParameters
        vParams.Add("LegacyNumber", LegacyNumber)
        vParams.Add("BequestNumber", BequestNumber)
        vParams.Add("StageMonthsDelay")
        vParams.Add("StagePercentage")
        Dim vForecast As New LegacyBequestForecast(mvEnv)
        Dim vIncomeStage As New LegacyIncomeStage(mvEnv)
        For Each vRow As System.Data.DataRow In vStages.Rows
          vIncomeStage.InitFromDataRow(vRow)
          vParams("StageMonthsDelay").Value = vIncomeStage.StageMonthsDelay.ToString
          vParams("StagePercentage").Value = vIncomeStage.StagePercentage.ToString
          vForecast.Create(vParams)
          vForecast.Save(pAmendedBy, pAudit, pJournalNumber)
        Next
      End If
      vLegacy.SetExpectedAmountFromBequests()
      vLegacy.Save(pAmendedBy, pAudit, pJournalNumber)
      mvEnv.Connection.CommitTransaction()
    End Sub

    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      If mvEnv.Connection.GetCount("legacy_bequest_receipts", mvClassFields.WhereFields) > 0 Then
        RaiseError(DataAccessErrors.daeReceiptsExist)
      Else
        Dim vLegacy As New ContactLegacy(mvEnv)
        vLegacy.Init(LegacyNumber)
        mvEnv.Connection.StartTransaction()
        ' Delete any associated Forecasts & Expenses
        mvEnv.Connection.DeleteRecords("legacy_bequest_forecasts", mvClassFields.WhereFields, False)
        mvEnv.Connection.DeleteRecords("legacy_expenses", mvClassFields.WhereFields, False)
        MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
        vLegacy.SetExpectedAmountFromBequests()
        vLegacy.Save(pAmendedBy, pAudit, pJournalNumber)
        mvEnv.Connection.CommitTransaction()
      End If
    End Sub

    Public ReadOnly Property Product() As Product
      Get
        If mvProduct Is Nothing Then
          mvProduct = New Product(mvEnv)
          mvProduct.Init(ProductCode)
        End If
        Return mvProduct
      End Get
    End Property

    Public ReadOnly Property VatRate(ByVal pContact As Contact) As VatRate
      Get
        Return mvEnv.VATRate(Product.ProductVatCategory, pContact.VATCategory)
      End Get
    End Property

    Public Sub DeleteReceipt(ByVal pReceipt As Integer)
      Dim vReceipt As New LegacyBequestReceipt(mvEnv)
      With vReceipt
        .Init(pReceipt)
        mvClassFields.Item(LegacyBequestFields.EstimatedOutstanding).DoubleValue = EstimatedOutstanding + .Amount
        .Delete()
      End With
      Save()
    End Sub

    Public Sub AddReceipt(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pLineNumber As Integer, ByVal pAmount As Double, ByVal pDateReceived As String, ByVal pNotes As String)
      Dim vReceipt As New LegacyBequestReceipt(mvEnv)
      Dim vOutstanding As Double

      vReceipt.InitFromBequest(Me, pBatchNumber, pTransactionNumber, pLineNumber, pAmount, pDateReceived, pNotes)
      vReceipt.Save()
      If mvReceipts Is Nothing Then
        mvReceipts = New CollectionList(Of LegacyBequestReceipt)
      End If
      mvReceipts.Add(vReceipt.ReceiptNumber.ToString, vReceipt)
      vOutstanding = EstimatedOutstanding - pAmount
      mvClassFields.Item(LegacyBequestFields.EstimatedOutstanding).DoubleValue = If(vOutstanding >= 0, vOutstanding, 0)
      Save()
    End Sub

    Public ReadOnly Property Receipts() As CollectionList(Of LegacyBequestReceipt)
      Get
        Dim vRecordSet As CDBRecordSet
        Dim vReceipt As New LegacyBequestReceipt(mvEnv)

        If mvReceipts Is Nothing Then
          vReceipt.Init()
          mvReceipts = New CollectionList(Of LegacyBequestReceipt)
          vRecordSet = mvEnv.Connection.GetRecordSet("SELECT " & vReceipt.GetRecordSetFields() & " FROM legacy_bequest_receipts lbr WHERE legacy_number = " & LegacyNumber & " AND bequest_number = " & BequestNumber)
          While vRecordSet.Fetch()
            vReceipt = New LegacyBequestReceipt(mvEnv)
            vReceipt.InitFromRecordSet(vRecordSet)
            mvReceipts.Add(vReceipt.ReceiptNumber.ToString, vReceipt)
          End While
          vRecordSet.CloseRecordSet()
        End If
        Return mvReceipts
      End Get
    End Property

#End Region


  End Class
End Namespace
