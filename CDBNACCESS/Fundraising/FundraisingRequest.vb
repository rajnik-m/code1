Namespace Access

  Public Class FundraisingRequest
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum FundraisingRequestFields
      AllFields = 0
      FundraisingRequestNumber
      ContactNumber
      RequestDate
      RequestDescription
      FundraisingRequestStage
      FundraisingStatus
      FundraisingRequestType
      Source
      TargetAmount
      PledgedAmount
      PledgedDate
      ReceivedAmount
      ReceivedDate
      Notes
      ExpectedAmount
      GIKExpectedAmount
      GIKPledgedAmount
      GIKPledgedDate
      TotalGIKReceivedAmount
      LatestGIKReceivedDate
      NumberOfPayments
      RequestEndDate
      Logname
      CreatedBy
      CreatedOn
      TargetDate
      FundraisingBusinessType
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("fundraising_request_number", CDBField.FieldTypes.cftLong)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("request_date", CDBField.FieldTypes.cftDate)
        .Add("request_description")
        .Add("fundraising_request_stage")
        .Add("fundraising_status")
        .Add("fundraising_request_type")
        .Add("source")
        .Add("target_amount", CDBField.FieldTypes.cftNumeric)
        .Add("pledged_amount", CDBField.FieldTypes.cftNumeric)
        .Add("pledged_date", CDBField.FieldTypes.cftDate)
        .Add("received_amount", CDBField.FieldTypes.cftNumeric)
        .Add("received_date", CDBField.FieldTypes.cftDate)
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("expected_amount", CDBField.FieldTypes.cftNumeric)
        .Add("gik_expected_amount", CDBField.FieldTypes.cftNumeric)
        .Add("gik_pledged_amount", CDBField.FieldTypes.cftNumeric)
        .Add("gik_pledged_date", CDBField.FieldTypes.cftDate)
        .Add("total_gik_received_amount", CDBField.FieldTypes.cftNumeric)
        .Add("latest_gik_received_date", CDBField.FieldTypes.cftDate)
        .Add("number_of_payments", CDBField.FieldTypes.cftLong)
        .Add("request_end_date", CDBField.FieldTypes.cftDate)
        .Add("logname")
        .Add("created_by")
        .Add("created_on", CDBField.FieldTypes.cftDate)
        .Add("target_date", CDBField.FieldTypes.cftDate)
        .Add("fundraising_business_type")

        .Item(FundraisingRequestFields.FundraisingBusinessType).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbFundraisingBusinessType)
        .Item(FundraisingRequestFields.FundraisingRequestNumber).PrimaryKey = True
        .SetControlNumberField(FundraisingRequestFields.FundraisingRequestNumber, "FR")

        mvSupportsPaymentSchedule = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataFundraisingPayments)

        For vField As FundraisingRequestFields = FundraisingRequestFields.ExpectedAmount To FundraisingRequestFields.TargetDate
          .Item(vField).InDatabase = mvSupportsPaymentSchedule
        Next
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "fr"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "fundraising_requests"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property FundraisingRequestNumber() As Integer
      Get
        Return mvClassFields(FundraisingRequestFields.FundraisingRequestNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(FundraisingRequestFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property RequestDate() As String
      Get
        Return mvClassFields(FundraisingRequestFields.RequestDate).Value
      End Get
    End Property
    Public ReadOnly Property RequestDescription() As String
      Get
        Return mvClassFields(FundraisingRequestFields.RequestDescription).Value
      End Get
    End Property
    Public ReadOnly Property FundraisingRequestStage() As String
      Get
        Return mvClassFields(FundraisingRequestFields.FundraisingRequestStage).Value
      End Get
    End Property
    Public ReadOnly Property FundraisingStatus() As String
      Get
        Return mvClassFields(FundraisingRequestFields.FundraisingStatus).Value
      End Get
    End Property
    Public ReadOnly Property FundraisingRequestType() As String
      Get
        Return mvClassFields(FundraisingRequestFields.FundraisingRequestType).Value
      End Get
    End Property
    Public ReadOnly Property Source() As String
      Get
        Return mvClassFields(FundraisingRequestFields.Source).Value
      End Get
    End Property
    Public ReadOnly Property TargetAmount() As Double
      Get
        Return mvClassFields(FundraisingRequestFields.TargetAmount).DoubleValue
      End Get
    End Property
    Public Property PledgedAmount() As Double
      Get
        Return mvClassFields(FundraisingRequestFields.PledgedAmount).DoubleValue
      End Get
      Set(ByVal pValue As Double)
        mvClassFields(FundraisingRequestFields.PledgedAmount).DoubleValue = pValue
      End Set
    End Property
    Public ReadOnly Property PledgedDate() As String
      Get
        Return mvClassFields(FundraisingRequestFields.PledgedDate).Value
      End Get
    End Property
    Public ReadOnly Property ReceivedAmount() As Double
      Get
        Return mvClassFields(FundraisingRequestFields.ReceivedAmount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property ReceivedDate() As String
      Get
        Return mvClassFields(FundraisingRequestFields.ReceivedDate).Value
      End Get
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(FundraisingRequestFields.Notes).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(FundraisingRequestFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(FundraisingRequestFields.AmendedOn).Value
      End Get
    End Property

    Public ReadOnly Property ExpectedAmount() As Double
      Get
        Return mvClassFields(FundraisingRequestFields.ExpectedAmount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property GIKExpectedAmount() As Double
      Get
        Return mvClassFields(FundraisingRequestFields.GIKExpectedAmount).DoubleValue
      End Get
    End Property
    Public Property GIKPledgedAmount() As Double
      Get
        Return mvClassFields(FundraisingRequestFields.GIKPledgedAmount).DoubleValue
      End Get
      Set(ByVal pValue As Double)
        mvClassFields(FundraisingRequestFields.GIKPledgedAmount).DoubleValue = pValue
      End Set
    End Property
    Public ReadOnly Property GIKPledgedDate() As String
      Get
        Return mvClassFields(FundraisingRequestFields.GIKPledgedDate).Value
      End Get
    End Property
    Public ReadOnly Property TotalGIKReceivedAmount() As Double
      Get
        Return mvClassFields(FundraisingRequestFields.TotalGIKReceivedAmount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property LatestGIKReceivedDate() As String
      Get
        Return mvClassFields(FundraisingRequestFields.LatestGIKReceivedDate).Value
      End Get
    End Property
    Public Property NumberOfPayments() As Integer
      Get
        Return mvClassFields(FundraisingRequestFields.NumberOfPayments).IntegerValue
      End Get
      Set(ByVal pValue As Integer)
        mvClassFields(FundraisingRequestFields.NumberOfPayments).IntegerValue = pValue
      End Set
    End Property
    Public Property RequestEndDate() As String
      Get
        Return mvClassFields(FundraisingRequestFields.RequestEndDate).Value
      End Get
      Set(ByVal pValue As String)
        mvClassFields(FundraisingRequestFields.RequestEndDate).Value = pValue
      End Set
    End Property
    Public ReadOnly Property Logname() As String
      Get
        Return mvClassFields(FundraisingRequestFields.Logname).Value
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(FundraisingRequestFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(FundraisingRequestFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property FundraisingBusinessType() As String
      Get
        Return mvClassFields(FundraisingRequestFields.FundraisingBusinessType).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerate Code"

    Private mvSupportsPaymentSchedule As Boolean
    Private mvTargetChanged As Boolean
    Private mvPreviousTarget As Double
    Private mvChangeReason As String

    Private Structure AmountsChangeInfo
      Friend HasChanged As Boolean
      Friend PreviousAmount As String
      Friend ChangeReason As String
      Friend Sub New(ByVal pHasChanged As Boolean, ByVal pPrevious As String, ByVal pReason As String)
        PreviousAmount = pPrevious
        ChangeReason = pReason
        HasChanged = pHasChanged AndAlso pReason.Length > 0 AndAlso pPrevious.Length > 0
      End Sub
    End Structure

    Private mvIncomeChangeInfo As AmountsChangeInfo
    Private mvGIKChangeInfo As AmountsChangeInfo
    Private mvStatusChangeInfo As AmountsChangeInfo
    Private mvCreatePaymentSchedule As Boolean
    Private mvDefaultFundPayType As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDefaultFundPayType)

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvTargetChanged = False
    End Sub

    Protected Overrides Sub PreValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PreValidateUpdateParameters(pParameterList)
      mvPreviousTarget = TargetAmount
    End Sub

    Protected Overrides Sub PostValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PostValidateUpdateParameters(pParameterList)
      mvTargetChanged = mvExisting AndAlso mvClassFields(FundraisingRequestFields.TargetAmount).ValueChanged
      If mvTargetChanged Then mvChangeReason = pParameterList("ChangeReason").Value
      With mvClassFields(FundraisingRequestFields.ExpectedAmount)
        mvIncomeChangeInfo = New AmountsChangeInfo(.ValueChanged AndAlso .InDatabase, .SetValue, pParameterList.ParameterExists("IncomeChangeReason").Value)
      End With
      With mvClassFields(FundraisingRequestFields.GIKExpectedAmount)
        mvGIKChangeInfo = New AmountsChangeInfo(.ValueChanged AndAlso .InDatabase, .SetValue, pParameterList.ParameterExists("GikChangeReason").Value)
      End With
      With mvClassFields(FundraisingRequestFields.FundraisingStatus)
        mvStatusChangeInfo = New AmountsChangeInfo(.ValueChanged AndAlso mvSupportsPaymentSchedule, mvClassFields(FundraisingRequestFields.FundraisingStatus).SetValue, pParameterList.ParameterExists("StatusChangeReason").Value)
      End With
      DeleteNonPaidPaymentSchedule()
      'J1353 - for Web Service: Only allow GIK Pledged Amount to be changed when its not already set and there is atleast one GIK payment schedule
      Dim vIgnoreGIKPledgedAmount As Boolean = IsGIKPledged  'Ignore user input as once its pledged you cannot update this amount manually
      If Not vIgnoreGIKPledgedAmount AndAlso mvClassFields(FundraisingRequestFields.GIKPledgedAmount).Value.Length > 0 Then
        'Make sure there is atleast one GIK payment schedule before updating this amount
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("fundraising_payment_type", mvDefaultFundPayType, CDBField.FieldWhereOperators.fwoNotEqual)
        vWhereFields.Add("fundraising_request_number", FundraisingRequestNumber)
        Dim vSQL As New SQLStatement(mvEnv.Connection, "SUM(payment_amount)", "fundraising_payment_schedule", vWhereFields)
        vSQL.GroupBy = "fundraising_request_number"
        Dim vSumValue As String = vSQL.GetValue
        vIgnoreGIKPledgedAmount = vSumValue.Length = 0 OrElse DoubleValue(vSumValue) <> GIKPledgedAmount
      End If
      If vIgnoreGIKPledgedAmount Then mvClassFields(FundraisingRequestFields.GIKPledgedAmount).Value = mvClassFields(FundraisingRequestFields.GIKPledgedAmount).SetValue
    End Sub

    Protected Overrides Sub PostValidateCreateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PostValidateCreateParameters(pParameterList)
      mvCreatePaymentSchedule = CanCreatePaymentSchedule()
      mvClassFields(FundraisingRequestFields.GIKPledgedAmount).Value = "" 'J1353: Dont allow saving a new record with GIK Pledged Amount
    End Sub

    Private Function CanCreatePaymentSchedule() As Boolean
      Dim vDefaultFundStatus As String = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDefaultFundStatus)
      If mvSupportsPaymentSchedule AndAlso vDefaultFundStatus.Length > 0 AndAlso mvDefaultFundPayType.Length > 0 AndAlso _
         vDefaultFundStatus = FundraisingStatus AndAlso NumberOfPayments > 0 AndAlso RequestEndDate.Length > 0 Then
        Return True
      End If
    End Function
    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      Dim vTrans As Boolean = mvEnv.Connection.StartTransaction()
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
      CreatePaymentSchedule(pJournalNumber, False)
      If mvTargetChanged Then
        Dim vTarget As New FundraisingRequestTarget(mvEnv)
        Dim vParams As New CDBParameters
        vParams.Add("FundraisingRequestNumber", FundraisingRequestNumber)
        vParams.Add("PreviousTargetAmount", mvPreviousTarget)
        vParams.Add("TargetAmount", TargetAmount)
        vParams.Add("ChangeReason", mvChangeReason)
        vTarget.Create(vParams)
        vTarget.Save(pAmendedBy, pAudit, pJournalNumber)
      End If
      If mvIncomeChangeInfo.HasChanged Then
        Dim vHistory As New FundraisingExpectedAmountHistory(mvEnv)
        Dim vParams As New CDBParameters
        vParams.Add("FundraisingRequestNumber", FundraisingRequestNumber)
        vParams.Add("PreviousExpectedAmount", mvIncomeChangeInfo.PreviousAmount)
        vParams.Add("ExpectedAmount", ExpectedAmount)
        vParams.Add("ChangeReason", mvIncomeChangeInfo.ChangeReason)
        vParams.Add("IsIncomeAmount", "Y")
        vHistory.Create(vParams)
        vHistory.Save(pAmendedBy, pAudit, pJournalNumber)
      End If
      If mvGIKChangeInfo.HasChanged Then
        Dim vHistory As New FundraisingExpectedAmountHistory(mvEnv)
        Dim vParams As New CDBParameters
        vParams.Add("FundraisingRequestNumber", FundraisingRequestNumber)
        vParams.Add("PreviousExpectedAmount", mvGIKChangeInfo.PreviousAmount)
        vParams.Add("ExpectedAmount", GIKExpectedAmount)
        vParams.Add("ChangeReason", mvGIKChangeInfo.ChangeReason)
        vHistory.Create(vParams)
        If mvIncomeChangeInfo.HasChanged Then System.Threading.Thread.Sleep(1000)
        vHistory.Save(pAmendedBy, pAudit, pJournalNumber)
      End If
      If mvStatusChangeInfo.HasChanged Then
        Dim vHistory As New FundraisingRequestStatusHistory(mvEnv)
        Dim vParams As New CDBParameters
        vParams.Add("FundraisingRequestNumber", FundraisingRequestNumber)
        vParams.Add("PreviousFundraisingStatus", mvStatusChangeInfo.PreviousAmount)
        vParams.Add("FundraisingStatus", FundraisingStatus)
        vParams.Add("ChangeReason", mvStatusChangeInfo.ChangeReason)
        vHistory.Create(vParams)
        vHistory.Save(pAmendedBy, pAudit, pJournalNumber)
      End If
      If vTrans Then mvEnv.Connection.CommitTransaction()
    End Sub
    Private Sub DeleteNonPaidPaymentSchedule()
      If mvExisting AndAlso (mvClassFields(FundraisingRequestFields.NumberOfPayments).ValueChanged OrElse mvClassFields(FundraisingRequestFields.PledgedAmount).ValueChanged) Then
        'BR14291: Just Pledged Amount is changed. Only proceed if the total payment schedule amount does not match with new pledged amount
        Dim vContinue As Boolean = True
        Dim vWhereFields As New CDBFields
        If mvClassFields(FundraisingRequestFields.NumberOfPayments).ValueChanged = False Then
          With vWhereFields
            .Add("fundraising_request_number", FundraisingRequestNumber)
            .Add("fundraising_payment_type", mvDefaultFundPayType)
          End With
          vContinue = PledgedAmount <> DoubleValue(mvEnv.Connection.GetValue(New SQLStatement(mvEnv.Connection, "SUM(payment_amount)", "fundraising_payment_schedule", vWhereFields).SQL))
        End If
        If vContinue Then
          If CanCreatePaymentSchedule() Then
            If mvClassFields(FundraisingRequestFields.NumberOfPayments).SetValue.Length > 0 Then
              vWhereFields = New CDBFields
              With vWhereFields
                .Add("fundraising_request_number", FundraisingRequestNumber)
                .Add("fundraising_payment_type", mvDefaultFundPayType)
                .Add("received_amount", "")
              End With
              ''delete non-complete actions for the scheduled payments that are to be deleted
              ''get action_numbers from fundraising_actions linked to the scheduled_payments that we are going to delete
              Dim vWhere As New CDBFields
              With vWhere
                .Add("a.action_number", CDBField.FieldTypes.cftLong, "fa.action_number")
                .Add("completed_on", CDBField.FieldTypes.cftDate, "")
                .Add("scheduled_payment_number", CDBField.FieldTypes.cftInteger, New SQLStatement(mvEnv.Connection, "scheduled_payment_number", "fundraising_payment_schedule", vWhereFields).SQL, CDBField.FieldWhereOperators.fwoIn)
              End With
              Dim vRecordSet As CDBRecordSet = New SQLStatement(mvEnv.Connection, "a.action_number", "fundraising_actions fa,actions a", vWhere).GetRecordSet
              Dim vActionNumbers As String = ""
              While vRecordSet.Fetch()
                'Build a list of action numbers (for delete)
                If vActionNumbers.Length > 0 Then vActionNumbers = vActionNumbers & ","
                vActionNumbers = vActionNumbers & vRecordSet.Fields(1).Value
              End While
              vRecordSet.CloseRecordSet()
              If vActionNumbers.Length > 0 Then
                Dim vFields As New CDBFields
                Dim vInTrans As Boolean
                If Not mvEnv.Connection.InTransaction Then
                  mvEnv.Connection.StartTransaction()
                  vInTrans = True
                End If
                vFields.Add("action_number", CDBField.FieldTypes.cftLong, vActionNumbers, CDBField.FieldWhereOperators.fwoIn)
                mvEnv.Connection.DeleteRecords("actions", vFields, False)
                mvEnv.Connection.DeleteRecords("contact_actions", vFields, False)
                mvEnv.Connection.DeleteRecords("organisation_actions", vFields, False)
                If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataFundraisingPayments) Then
                  mvEnv.Connection.DeleteRecords("fundraising_actions", vFields, False)
                End If
                If vInTrans Then mvEnv.Connection.CommitTransaction()
              End If
              'Update any associated actions before deleting these records
              Dim vLinkedWhereFields As New CDBFields
              vLinkedWhereFields.Add("scheduled_payment_number", CDBField.FieldTypes.cftInteger, New SQLStatement(mvEnv.Connection, "scheduled_payment_number", "fundraising_payment_schedule", vWhereFields).SQL, CDBField.FieldWhereOperators.fwoIn)
              Dim vUpdateFields As New CDBFields
              vUpdateFields.Add("scheduled_payment_number", "")
              mvEnv.Connection.UpdateRecords("fundraising_actions", vUpdateFields, vLinkedWhereFields, False)

              'Delete any linked transactions which have not been processed
              Dim vFPH As New FundraisingPaymentHistory(mvEnv)
              vFPH.DeleteByForeignKey(New CDBField("scheduled_payment_number", CDBField.FieldTypes.cftInteger, New SQLStatement(mvEnv.Connection, "scheduled_payment_number", "fundraising_payment_schedule", vWhereFields).SQL, CDBField.FieldWhereOperators.fwoIn))

              mvEnv.Connection.DeleteRecords("fundraising_payment_schedule", vWhereFields, False)
            End If
            If NumberOfPayments > 0 Then CreatePaymentSchedule(0, True)
          Else
            mvClassFields(FundraisingRequestFields.NumberOfPayments).Value = mvClassFields(FundraisingRequestFields.NumberOfPayments).SetValue
          End If
        End If
      End If
    End Sub
    Private Sub CreatePaymentSchedule(ByVal pJournalNumber As Integer, ByVal pRecreate As Boolean)
      If mvCreatePaymentSchedule OrElse pRecreate Then
        Dim vParams As New CDBParameters
        With vParams
          .Add("FundraisingRequestNumber", FundraisingRequestNumber)
          .Add("FundraisingPaymentType", mvDefaultFundPayType)
          .Add("CreatedBy", mvEnv.User.UserID)
          .Add("CreatedOn", TodaysDate)
          .Add("ScheduledPaymentDesc")
          .Add("PaymentAmount", CDBField.FieldTypes.cftNumeric)
          .Add("DueDate")
          .Add("SkipValidation", "Y")
        End With
        Dim vAmount As Double = PledgedAmount
        If vAmount = 0 Then vAmount = ExpectedAmount
        Dim vRequestEndDate As Date = Date.Parse(RequestEndDate)
        Dim vDateDiff As Double = DateDiff(DateInterval.Day, Today, vRequestEndDate)
        Dim vNumberOfDays As Double   'Declaring as double but the variable will always use the integer value (decimal value=.0)
        If vDateDiff < NumberOfPayments Then
          If vDateDiff <= 0 Then
            If vDateDiff < 0 Then
              vRequestEndDate = Today
              mvClassFields(FundraisingRequestFields.RequestEndDate).Value = TodaysDate()
            End If
            mvClassFields(FundraisingRequestFields.NumberOfPayments).Value = "1"
            vNumberOfDays = 0
          Else
            mvClassFields(FundraisingRequestFields.NumberOfPayments).Value = vDateDiff.ToString
            vNumberOfDays = 1
          End If
        Else
          vNumberOfDays = Int(vDateDiff / NumberOfPayments)  'Use the Integer part of the double value
        End If
        Dim vIndex As Integer = 1
        Dim vContinue As Boolean = True
        Dim vNumberOfPayments As Integer = NumberOfPayments
        If pRecreate Then
          Dim vWhereFields As New CDBFields
          vWhereFields.Add("fundraising_request_number", CDBField.FieldTypes.cftInteger, FundraisingRequestNumber)
          vWhereFields.Add("fundraising_payment_type", mvDefaultFundPayType)
          Dim vSQL As New SQLStatement(mvEnv.Connection, "COUNT(*),SUM(payment_amount)", "fundraising_payment_schedule", vWhereFields)
          Dim vRS As CDBRecordSet = vSQL.GetRecordSet
          If vRS.Fetch Then
            If vRS.Fields(1).IntegerValue > 0 Then
              If vRS.Fields(1).IntegerValue > NumberOfPayments Then
                mvClassFields(FundraisingRequestFields.NumberOfPayments).IntegerValue = vRS.Fields(1).IntegerValue
                vNumberOfPayments = NumberOfPayments
                vContinue = False
              Else
                vAmount -= vRS.Fields(2).DoubleValue
                If vRS.Fields(1).IntegerValue = NumberOfPayments Then NumberOfPayments += 1
                vNumberOfPayments -= vRS.Fields(1).IntegerValue
                'Reset NumberOfDays due to vNumberOfPayments change
                If vNumberOfDays = NumberOfPayments Then
                  vNumberOfDays = vNumberOfPayments
                ElseIf vNumberOfDays > 0 AndAlso vNumberOfDays = Int(vDateDiff / NumberOfPayments) Then
                  vNumberOfDays = Int(vDateDiff / vNumberOfPayments) 'Use the Integer part of the double value
                End If
                vIndex += vRS.Fields(1).IntegerValue
              End If
            End If
          End If
          vRS.CloseRecordSet()
        End If
        If vContinue Then
          vParams("PaymentAmount").Value = IIf(vNumberOfPayments = 0, vAmount, FixTwoPlaces(vAmount / vNumberOfPayments)).ToString
          vParams.Add("Automatic", "Y")
          Dim vDate As Date = Today.AddDays(vNumberOfDays)
          Dim vAmountDiff As Double = vAmount
          While vDate <= vRequestEndDate
            vAmountDiff = Math.Round(vAmountDiff - vParams("PaymentAmount").DoubleValue, 2)
            'BR14921: Always add vAmountDiff for last record
            If (vDate = vRequestEndDate OrElse vDate.AddDays(vNumberOfDays) > vRequestEndDate) Then 'AndAlso vAmountDiff > 0 Then
              vParams("PaymentAmount").Value = (vParams("PaymentAmount").DoubleValue + vAmountDiff).ToString
            End If
            vParams("ScheduledPaymentDesc").Value = "Payment " & vIndex.ToString
            vParams("DueDate").Value = vDate.ToString(CAREDateFormat)
            Dim vFundPaymentSchedule As New FundraisingPaymentSchedule(mvEnv)
            vFundPaymentSchedule.Create(vParams)
            vFundPaymentSchedule.Save(mvEnv.User.UserID, True, pJournalNumber)
            If vDate = vRequestEndDate Then Exit While
            vDate = vDate.AddDays(vNumberOfDays)
            vIndex += 1
          End While
        End If
      End If
    End Sub
    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
      Dim vWhereField As New CDBField("fundraising_request_number", FundraisingRequestNumber)
      Dim vTarget As New FundraisingRequestTarget(mvEnv)
      vTarget.DeleteByForeignKey(vWhereField)
      If mvSupportsPaymentSchedule Then
        Dim vFPH As New FundraisingPaymentHistory(mvEnv)
        vFPH.DeleteByForeignKey(New CDBField("scheduled_payment_number", CDBField.FieldTypes.cftInteger, New SQLStatement(mvEnv.Connection, "scheduled_payment_number", "fundraising_payment_schedule", New CDBFields(vWhereField)).SQL, CDBField.FieldWhereOperators.fwoIn))
        Dim vFPS As New FundraisingPaymentSchedule(mvEnv)
        vFPS.DeleteByForeignKey(vWhereField)
        Dim vFRSH As New FundraisingRequestStatusHistory(mvEnv)
        vFRSH.DeleteByForeignKey(vWhereField)
        Dim vFEAH As New FundraisingExpectedAmountHistory(mvEnv)
        vFEAH.DeleteByForeignKey(vWhereField)
        Dim vActionNumbers As String = ""
        Dim vRecordSet As CDBRecordSet = New SQLStatement(mvEnv.Connection, "action_number", "fundraising_actions", vWhereField).GetRecordSet
        While vRecordSet.Fetch()
          'Build a list of action numbers (to delete)
          If vActionNumbers.Length > 0 Then vActionNumbers = vActionNumbers & ","
          vActionNumbers = vActionNumbers & vRecordSet.Fields(1).Value
        End While
        vRecordSet.CloseRecordSet()
        If vActionNumbers.Length > 0 Then
          Dim vFields As New CDBFields
          Dim vInTrans As Boolean
          If Not mvEnv.Connection.InTransaction Then
            mvEnv.Connection.StartTransaction()
            vInTrans = True
          End If
          vFields.Add("action_number", CDBField.FieldTypes.cftLong, vActionNumbers, CDBField.FieldWhereOperators.fwoIn)
          mvEnv.Connection.DeleteRecords("actions", vFields, False)
          mvEnv.Connection.DeleteRecords("contact_actions", vFields, False)
          mvEnv.Connection.DeleteRecords("organisation_actions", vFields, False)
          If vInTrans Then mvEnv.Connection.CommitTransaction()
        End If
        Dim vFA As New FundraisingAction(mvEnv)
        vFA.DeleteByForeignKey(vWhereField)
      End If
    End Sub
    Public ReadOnly Property IsGIKPledged() As Boolean
      'Used to determine if the GIK Amount has been Pledged or not.
      Get
        Return mvClassFields(FundraisingRequestFields.GIKPledgedAmount).SetValue.Length > 0
      End Get
    End Property
#End Region

  End Class
End Namespace
