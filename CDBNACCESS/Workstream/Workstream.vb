Namespace Access

  Public Class Workstream
    Inherits CARERecord
    Implements IRecordCreate

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum WorkstreamFields
      AllFields = 0
      WorkstreamId
      WorkstreamDesc
      WorkstreamGroup
      StartDate
      EndDate
      WorkstreamGroupOutcome
      OutcomeDate
      Notes
      ContactNumber
      OwnershipGroup
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("workstream_id", CDBField.FieldTypes.cftInteger)
        .Add("workstream_desc")
        .Add("workstream_group")
        .Add("start_date", CDBField.FieldTypes.cftDate)
        .Add("end_date", CDBField.FieldTypes.cftDate)
        .Add("workstream_group_outcome")
        .Add("outcome_date", CDBField.FieldTypes.cftDate)
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("ownership_group")

        .Item(WorkstreamFields.WorkstreamId).PrimaryKey = True
        .Item(WorkstreamFields.WorkstreamId).PrefixRequired = True
        .SetControlNumberField(WorkstreamFields.WorkstreamId, "WID")

        .Item(WorkstreamFields.WorkstreamGroup).PrefixRequired = True
        .Item(WorkstreamFields.WorkstreamGroupOutcome).PrefixRequired = True
        .Item(WorkstreamFields.OwnershipGroup).PrefixRequired = True

      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ws"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "workstreams"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'IRecordCreate
    '--------------------------------------------------
    Public Function CreateInstance(ByVal pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New Workstream(mvEnv)
    End Function

    '--------------------------------------------------
    'AddDeleteCheckItems
    '--------------------------------------------------
    Public Overrides Sub AddDeleteCheckItems()
      AddDeleteCheckItem("action_links", "workstream_id", "Action Links")
      AddDeleteCheckItem("document_log_links", "workstream_id", "Document Links")
      AddDeleteCheckItem("category_links", "workstream_id", "Activity Links")
      AddDeleteCheckItem("workstream_links", "workstream_id", "Exam Booking Unit Links or Exam Schedule Links")
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property WorkstreamId() As Integer
      Get
        Return mvClassFields(WorkstreamFields.WorkstreamId).IntegerValue
      End Get
    End Property
    Public ReadOnly Property WorkstreamDesc() As String
      Get
        Return mvClassFields(WorkstreamFields.WorkstreamDesc).Value
      End Get
    End Property
    Public ReadOnly Property WorkstreamGroup() As String
      Get
        Return mvClassFields(WorkstreamFields.WorkstreamGroup).Value
      End Get
    End Property
    Public ReadOnly Property StartDate() As String
      Get
        Return mvClassFields(WorkstreamFields.StartDate).Value
      End Get
    End Property
    Public ReadOnly Property EndDate() As String
      Get
        Return mvClassFields(WorkstreamFields.EndDate).Value
      End Get
    End Property
    Public ReadOnly Property WorkstreamOutcome() As String
      Get
        Return mvClassFields(WorkstreamFields.WorkstreamGroupOutcome).Value
      End Get
    End Property
    Public ReadOnly Property OutcomeDate() As String
      Get
        Return mvClassFields(WorkstreamFields.OutcomeDate).Value
      End Get
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(WorkstreamFields.Notes).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(WorkstreamFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(WorkstreamFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As String
      Get
        Return mvClassFields(WorkstreamFields.ContactNumber).Value
      End Get
    End Property

    Public ReadOnly Property OwnershipGroup() As String
      Get
        Return mvClassFields(WorkstreamFields.OwnershipGroup).Value
      End Get
    End Property
#End Region

#Region "Non-generated Code"
    Public Overrides Function GetAddRecordMandatoryParameters() As String
      Return "WorkstreamGroup"
    End Function

    Protected Overrides Sub PreValidateCreateParameters(pParameterList As CDBParameters)
      MyBase.PreValidateCreateParameters(pParameterList)
      Using vWorkstreamGroupData As DataTable = (New SQLStatement(mvEnv.Connection,
                                                 "is_historic",
                                                 "workstream_groups",
                                                 New CDBFields({New CDBField("workstream_group", pParameterList("WorkstreamGroup").Value)}))).GetDataTable()
        If vWorkstreamGroupData.Rows.Count <> 1 OrElse Not CStr(vWorkstreamGroupData.Rows(0)("is_historic")).Equals("N", StringComparison.InvariantCultureIgnoreCase) Then
          RaiseError(DataAccessErrors.daeInvalidWorkstreamGroup, pParameterList("WorkstreamGroup").Value)
        End If
      End Using
    End Sub

    Public Function AddExamBookingUnits(pSelectionSet As Integer, revision As Integer) As Boolean
      Dim vTransactionStarted = mvEnv.Connection.StartTransaction
      Try
        Dim vWhereClause As New CDBFields({New CDBField("selection_set", pSelectionSet),
                                           New CDBField("Revision", revision)})
        For Each vExamBookingUnitId As Integer In (From vEBU As DataRow In New SQLStatement(mvEnv.Connection,
                                                                                            "exam_booking_unit_id",
                                                                                            "selected_exam_booking_units",
                                                                                            vWhereClause).GetDataTable.AsEnumerable
                                                   Select vEBU.Field(Of Integer)("exam_booking_unit_id"))
          AddExamBookingUnit(vExamBookingUnitId)
        Next vExamBookingUnitId
        Me.Environment.Connection.DeleteRecords("selected_exam_booking_units",
                                                vWhereClause)
        If vTransactionStarted Then
          mvEnv.Connection.CommitTransaction()
        End If
        Return True
      Catch
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Function

    Public Function AddExamBookingUnit(pExamBookingUnitId As Integer) As Boolean
      Dim vTransactionStarted = mvEnv.Connection.StartTransaction
      Try
        Dim vExamBookingUnit As New ExamBookingUnit(mvEnv)
        vExamBookingUnit.InitWithPrimaryKey(New CDBFields({New CDBField("exam_booking_unit_id", pExamBookingUnitId)}))
        AddExamBookingUnit(vExamBookingUnit)
        If vTransactionStarted Then
          mvEnv.Connection.CommitTransaction()
        End If
        Return True
      Catch
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Function

    Public Function AddExamBookingUnit(pExamBookingUnit As ExamBookingUnit) As Boolean
      Dim vTransactionStarted = mvEnv.Connection.StartTransaction
      Try
        Dim vLinkRecord As WorkstreamLink = WorkstreamLink.GetOrCreateinstance(Environment, Me, pExamBookingUnit)
        If Not vLinkRecord.Existing Then
          vLinkRecord.Save()
        End If
        If vTransactionStarted Then
          mvEnv.Connection.CommitTransaction()
        End If
        Return True
      Catch
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Function

    Public Function DeleteExamBookingUnit(pExamBookingUnitId As Integer) As Boolean
      Dim vTransactionStarted = mvEnv.Connection.StartTransaction
      Try
        Dim vExamBookingUnit As New ExamBookingUnit(mvEnv)
        vExamBookingUnit.InitWithPrimaryKey(New CDBFields({New CDBField("exam_booking_unit_id", pExamBookingUnitId)}))
        Dim vLinkRecord As WorkstreamLink = WorkstreamLink.GetOrCreateinstance(Environment, Me, vExamBookingUnit)
        If vLinkRecord.Existing Then
          vLinkRecord.Delete()
        Else
          Throw New ArgumentException(String.Format("No exam booking unit with the ID {0} is linked to workstream {1}.", CStr(pExamBookingUnitId), Me.WorkstreamId))
        End If
        If vTransactionStarted Then
          mvEnv.Connection.CommitTransaction()
        End If
        Return True
      Catch
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Function

    Public Function AddExamSchedule(pExamScheduleId As Integer) As Boolean
      Dim vTransactionStarted = mvEnv.Connection.StartTransaction
      Try
        Dim vExamSchedule As New ExamSchedule(mvEnv)
        vExamSchedule.InitWithPrimaryKey(New CDBFields({New CDBField("exam_schedule_id", pExamScheduleId)}))
        Dim vLinkRecord As WorkstreamLink = WorkstreamLink.GetOrCreateinstance(Environment, Me, vExamSchedule)
        If Not vLinkRecord.Existing Then
          vLinkRecord.Save()
        End If
        If vTransactionStarted Then
          mvEnv.Connection.CommitTransaction()
        End If
        Return True
      Catch
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Function

    Public Function DeleteExamSchedule(pExamScheduleId As Integer) As Boolean
      Dim vTransactionStarted = mvEnv.Connection.StartTransaction
      Try
        Dim vExamSchedule As New ExamSchedule(mvEnv)
        vExamSchedule.InitWithPrimaryKey(New CDBFields({New CDBField("exam_schedule_id", pExamScheduleId)}))
        Dim vLinkRecord As WorkstreamLink = WorkstreamLink.GetOrCreateinstance(Environment, Me, vExamSchedule)
        If vLinkRecord.Existing Then
          vLinkRecord.Delete()
        Else
          Throw New ArgumentException(String.Format("No exam schedule with the ID {0} is linked to workstream {1}.", CStr(pExamScheduleId), Me.WorkstreamId))
        End If
        If vTransactionStarted Then
          mvEnv.Connection.CommitTransaction()
        End If
        Return True
      Catch
        If vTransactionStarted Then
          mvEnv.Connection.RollbackTransaction()
        End If
        Throw
      End Try
    End Function

    Public Overrides Sub PreValidateParameterList(pType As CARERecord.MaintenanceTypes, pParameterList As CDBParameters)
      MyBase.PreValidateParameterList(pType, pParameterList)
      If pParameterList.ContainsKey("AmendedOn") Then pParameterList.Remove("AmendedOn")
      If pParameterList.ContainsKey("AmendedBy") Then pParameterList.Remove("AmendedBy")
      If pParameterList.ContainsKey("EarliestScheduleDateDisplay") Then pParameterList.Remove("EarliestScheduleDateDisplay")
      If pParameterList.ContainsKey("LatestScheduleDateDisplay") Then pParameterList.Remove("LatestScheduleDateDisplay")
    End Sub

    Protected Overrides Sub PostValidateCreateParameters(ByVal pParameterList As CDBParameters)
      If pParameterList.Exists("WorkstreamContactNumber") Then mvClassFields.Item(WorkstreamFields.ContactNumber).Value = pParameterList("WorkstreamContactNumber").Value
    End Sub

    Protected Overrides Sub PostValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      If pParameterList.Exists("WorkstreamContactNumber") Then mvClassFields.Item(WorkstreamFields.ContactNumber).Value = pParameterList("WorkstreamContactNumber").Value
    End Sub

#End Region
  End Class
End Namespace
