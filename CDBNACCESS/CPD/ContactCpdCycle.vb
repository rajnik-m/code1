Namespace Access

  Public Class ContactCpdCycle
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum ContactCpdCycleFields
      AllFields = 0
      ContactCpdCycleNumber
      ContactNumber
      CpdCycleType
      StartDate
      EndDate
      CycleDesc
      CpdCycleStatus
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("contact_cpd_cycle_number", CDBField.FieldTypes.cftLong)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("cpd_cycle_type")
        .Add("start_date", CDBField.FieldTypes.cftDate)
        .Add("end_date", CDBField.FieldTypes.cftDate)
        .Add("cycle_desc")
        .Add("cpd_cycle_status")

        .Item(ContactCpdCycleFields.ContactCpdCycleNumber).PrimaryKey = True

        .SetUniqueField(ContactCpdCycleFields.ContactNumber)
        .SetUniqueField(ContactCpdCycleFields.CpdCycleType)
        .SetUniqueField(ContactCpdCycleFields.StartDate)

        .SetControlNumberField(ContactCpdCycleFields.ContactCpdCycleNumber, "YN")
        .Item(ContactCpdCycleFields.CpdCycleStatus).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbCPDCycleStatus)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ccc"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "contact_cpd_cycles"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property ContactCpdCycleNumber() As Integer
      Get
        Return mvClassFields(ContactCpdCycleFields.ContactCpdCycleNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(ContactCpdCycleFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CpdCycleType() As String
      Get
        Return mvClassFields(ContactCpdCycleFields.CpdCycleType).Value
      End Get
    End Property
    Public ReadOnly Property StartDate() As String
      Get
        Return mvClassFields(ContactCpdCycleFields.StartDate).Value
      End Get
    End Property
    Public ReadOnly Property EndDate() As String
      Get
        Return mvClassFields(ContactCpdCycleFields.EndDate).Value
      End Get
    End Property
    Public ReadOnly Property CycleDesc() As String
      Get
        Return mvClassFields(ContactCpdCycleFields.CycleDesc).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ContactCpdCycleFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ContactCpdCycleFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property CPDCycleStatus As String
      Get
        Return mvClassFields(ContactCpdCycleFields.CpdCycleStatus).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Private mvCycleType As CpdCycleType
    Private mvContactCPDPeriods As CollectionList(Of ContactCpdPeriod)
    Private mvCreated As Boolean

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvContactCPDPeriods = Nothing
      mvCreated = False
    End Sub

    Public ReadOnly Property Created() As Boolean
      Get
        Return mvCreated
      End Get
    End Property

    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      ' Here we are deleting the points and periods as well as the cycle
      Dim vTransaction As Boolean = mvEnv.Connection.StartTransaction()

      For Each vPeriod As ContactCpdPeriod In ContactCPDPeriods
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("contact_cpd_period_number", vPeriod.ContactCpdPeriodNumber)
        'Delete any links to documents
        Dim vDocumentLink As New DocumentLink(mvEnv)
        vDocumentLink.DeleteByForeignKey(vWhereFields.Item("contact_cpd_period_number"))
        'Delete the Points
        Dim vPoint As New ContactCpdPoint(mvEnv)
        vPoint.DeleteByForeignKey(vWhereFields.Item("contact_cpd_period_number"))
        'Delete the Period
        vPeriod.Delete(pAmendedBy, pAudit, pJournalNumber)
      Next
      Dim vJournalNumber As Integer = mvEnv.AddJournalRecord(JournalTypes.jnlCPDCycles, JournalOperations.jnlDelete, ContactNumber, 0, ContactCpdCycleNumber)
      MyBase.Delete(pAmendedBy, True, vJournalNumber)

      If vTransaction Then mvEnv.Connection.CommitTransaction()
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      SetValid()
      Dim vTransaction As Boolean = mvEnv.Connection.StartTransaction()
      If Not Existing Or mvClassFields(ContactCpdCycleFields.StartDate).ValueChanged Or mvClassFields(ContactCpdCycleFields.EndDate).ValueChanged Then
        If Existing Then
          RegenerateCyclePeriods()
        Else
          If mvContactCPDPeriods Is Nothing Then GenerateCyclePeriods()
        End If
      End If
      Dim vJournalNumber As Integer
      If Existing Then
        vJournalNumber = mvEnv.AddJournalRecord(JournalTypes.jnlCPDCycles, JournalOperations.jnlUpdate, ContactNumber, 0, ContactCpdCycleNumber)
      Else
        vJournalNumber = mvEnv.AddJournalRecord(JournalTypes.jnlCPDCycles, JournalOperations.jnlInsert, ContactNumber, 0, ContactCpdCycleNumber)
      End If
      If Not Existing Then mvCreated = True
      MyBase.Save(pAmendedBy, True, vJournalNumber)
      If vTransaction Then mvEnv.Connection.CommitTransaction()
    End Sub

    Protected Overrides Sub SetValid()
      MyBase.SetValid()
      SetDatesFromYear()
      If StartDate.Length > 0 AndAlso EndDate.Length > 0 Then
        ' Set the description as the start month year - end month year
        mvClassFields(ContactCpdCycleFields.CycleDesc).Value = MonthName(CDate(StartDate).Month, True) & " " & CDate(StartDate).Year.ToString & " - " & MonthName(CDate(EndDate).Month, True) & " " & CDate(EndDate).Year.ToString
      End If
    End Sub

    Public Sub CheckValidity()
      'CPD Cycle Type cannot be updated
      If mvClassFields(ContactCpdCycleFields.CpdCycleType).ValueChanged And Existing Then
        RaiseError(DataAccessErrors.daeCannotUpdateCycleType)
      End If

      SetDatesFromYear()

      Dim vWhereFields As New CDBFields
      ' See if we already have this cycle type for the contact
      If mvExisting = False OrElse mvClassFields(ContactCpdCycleFields.StartDate).ValueChanged Then       ' Only do check for new records or if the start date has changed
        vWhereFields.Add("contact_number", ContactNumber)
        vWhereFields.Add("cpd_cycle_type", CpdCycleType)
        vWhereFields.Add("start_date", CDBField.FieldTypes.cftDate, StartDate)
        If mvEnv.Connection.GetCount("contact_cpd_cycles", vWhereFields) > 0 Then
          RaiseError(DataAccessErrors.daeRecordExists, "ContactNumber,CpdCycleType,StartDate")
        End If
      End If

      vWhereFields = New CDBFields
      If mvClassFields(ContactCpdCycleFields.StartDate).ValueChanged OrElse mvClassFields(ContactCpdCycleFields.EndDate).ValueChanged Then
        ' Check that start date is before the end date
        If CDate(StartDate) > CDate(EndDate) Then RaiseError(DataAccessErrors.daeStartDateAfterEndDate)
        ' Check that the CPD points will still be covered by the new dates
        vWhereFields.Add("contact_cpd_cycle_number", ContactCpdCycleNumber)
        vWhereFields.Add("start_date", CDBField.FieldTypes.cftDate, StartDate, CDBField.FieldWhereOperators.fwoLessThan Or CDBField.FieldWhereOperators.fwoOpenBracket)
        vWhereFields.Add("ccp.start_date", CDBField.FieldTypes.cftDate, EndDate, CDBField.FieldWhereOperators.fwoGreaterThan Or CDBField.FieldWhereOperators.fwoOR)
        vWhereFields.Add("end_date", CDBField.FieldTypes.cftDate, StartDate, CDBField.FieldWhereOperators.fwoLessThan Or CDBField.FieldWhereOperators.fwoOR)
        vWhereFields.Add("ccp.end_date", CDBField.FieldTypes.cftDate, EndDate, CDBField.FieldWhereOperators.fwoGreaterThan Or CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket)
        vWhereFields.Add("ccp.contact_cpd_period_number", CDBField.FieldTypes.cftLong, "ccpo.contact_cpd_period_number")
        If mvEnv.Connection.GetCount("contact_cpd_periods ccp,contact_cpd_points ccpo", vWhereFields) > 0 Then
          RaiseError(DataAccessErrors.daeCannotUpdateCyclePointsNotCovered)
        End If

        ' Check that the start date starts on the 1st of the cycle type's start month
        InitCycleType()
        Dim vEndDate As Date
        Dim vYears As Integer = Date.Parse(EndDate).Year - Date.Parse(StartDate).Year
        If mvCycleType.IsFixedCPDCycleType Then
          Dim vStartDate As Date = New Date(CDate(StartDate).Year, mvCycleType.StartMonth.Value, 1)
          If Date.Parse(StartDate).CompareTo(vStartDate) <> 0 Then RaiseError(DataAccessErrors.daeCPDStartDate) 'StartDate does not match calculated StartDate
          If mvCycleType.StartMonth.Value = 1 Then vYears += 1
          vEndDate = Date.Parse(StartDate).AddYears(vYears).AddDays(-1)
          If Date.Parse(EndDate).CompareTo(vEndDate) <> 0 Then RaiseError(DataAccessErrors.daeCPDEndDate) 'EndDate does not match calculated EndDate
        Else
          If Date.Parse(StartDate).Month = 1 AndAlso Date.Parse(StartDate).Day = 1 Then vYears += 1
          vEndDate = Date.Parse(StartDate).AddYears(vYears).AddDays(-1)
          If Date.Parse(EndDate).CompareTo(vEndDate) <> 0 Then RaiseError(DataAccessErrors.daeCPDCycleEndDateInvalid) 'EndDate does not match calculated EndDate
        End If
        If mvCycleType.DefaultDuration > 0 Then
          ' Check to make sure that the start and end dates are the default duration apart
          If (Date.Parse(StartDate).Year + mvCycleType.DefaultDuration) <> Date.Parse(EndDate).AddDays(1).Year Then
            RaiseError(DataAccessErrors.daeCPDDuration)
          End If
        End If
      End If

    End Sub

    Private Sub SetDatesFromYear()
      Dim vYear As Integer

      InitCycleType()
      ' Start Date
      If StartDate.Length = 4 AndAlso mvCycleType.StartMonth.HasValue Then
        vYear = IntegerValue(StartDate)
        Dim vStartDate As New Date(vYear, mvCycleType.StartMonth.Value, 1)
        mvClassFields(ContactCpdCycleFields.StartDate).Value = vStartDate.ToString(CAREDateFormat)
      End If
      'End Date
      If EndDate.Length = 4 AndAlso mvCycleType.EndMonth.HasValue Then
        vYear = IntegerValue(EndDate)
        Dim vEndDate As New Date(vYear, mvCycleType.EndMonth.Value, 1)
        vEndDate = vEndDate.AddMonths(1).AddDays(-1)
        mvClassFields(ContactCpdCycleFields.EndDate).Value = vEndDate.ToString(CAREDateFormat)
      End If
    End Sub

    Private Sub InitCycleType()
      If mvCycleType Is Nothing Then
        mvCycleType = New CpdCycleType(mvEnv)
        mvCycleType.Init(CpdCycleType)
      End If
    End Sub

    Private Sub RegenerateCyclePeriods()
      Dim vDate As String
      Dim vParams As CDBParameters
      Dim vContactCPDPeriod As ContactCpdPeriod
      Dim vExistingCPDPeriod As ContactCpdPeriod
      Dim vPeriodsList As String = ""

      vDate = StartDate
      While CDate(vDate) < CDate(EndDate)
        vExistingCPDPeriod = GetPeriodFromDate(0, vDate)
        If vExistingCPDPeriod Is Nothing Then
          ' A period with this start date does not exist already so create it
          vParams = New CDBParameters
          vParams.Add("ContactCpdCycleNumber", ContactCpdCycleNumber)
          vParams.Add("StartDate", CDBField.FieldTypes.cftDate, vDate)
          Dim vEndDate As New Date(CDate(vDate).Year, CDate(vDate).Month, CDate(vDate).Day)
          vEndDate = vEndDate.AddYears(1).AddDays(-1)
          vParams.Add("EndDate", CDBField.FieldTypes.cftDate, vEndDate.ToString)
          vContactCPDPeriod = New ContactCpdPeriod(mvEnv)
          vContactCPDPeriod.Create(vParams)
          vContactCPDPeriod.Save(AmendedBy)
          ContactCPDPeriods.Add(vContactCPDPeriod.ContactCpdPeriodNumber.ToString, vContactCPDPeriod)
          vPeriodsList = vPeriodsList & vContactCPDPeriod.ContactCpdPeriodNumber.ToString & ","
        Else
          'A period with this start date exists, do not create a new one, we will keep
          'the existing one as we may have links to the cpd points through it
          vPeriodsList = vPeriodsList & vExistingCPDPeriod.ContactCpdPeriodNumber.ToString & ","
        End If
        vDate = CDate(vDate).AddYears(1).ToString
      End While
      'Now delete all the periods that have not been created above or been found as existing above.
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("contact_cpd_cycle_number", ContactCpdCycleNumber)
      vWhereFields.Add("contact_cpd_period_number", Left$(vPeriodsList, vPeriodsList.Length - 1), CDBField.FieldWhereOperators.fwoNotIn)
      mvEnv.Connection.DeleteRecords("contact_cpd_periods", vWhereFields, False)
    End Sub

    Private ReadOnly Property ContactCPDPeriods() As CollectionList(Of ContactCpdPeriod)
      Get
        If mvContactCPDPeriods Is Nothing Then
          mvContactCPDPeriods = New CollectionList(Of ContactCpdPeriod)
          Dim vContactCPDPeriod As New ContactCpdPeriod(mvEnv)
          vContactCPDPeriod.Init()
          Dim vWhereFields As New CDBFields
          vWhereFields.Add("contact_cpd_cycle_number", ContactCpdCycleNumber)
          Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vContactCPDPeriod.GetRecordSetFields, "contact_cpd_periods ccp", vWhereFields)
          Dim vRecordSet As CDBRecordSet = vSQLStatement.GetRecordSet
          While vRecordSet.Fetch = True
            vContactCPDPeriod = New ContactCpdPeriod(mvEnv)
            vContactCPDPeriod.InitFromRecordSet(vRecordSet)
            mvContactCPDPeriods.Add(vContactCPDPeriod.ContactCpdPeriodNumber.ToString, vContactCPDPeriod)
          End While
          vRecordSet.CloseRecordSet()
        End If
        Return mvContactCPDPeriods
      End Get
    End Property

    Public Function GetPeriodFromDate(Optional ByVal pYear As Long = 0, Optional ByVal pStartDate As String = "") As ContactCpdPeriod
      ' This assumes that the month is January to December
      For Each vContactCPDPeriod As ContactCpdPeriod In ContactCPDPeriods
        If pYear > 0 Then
          If CDate(vContactCPDPeriod.StartDate).Year = pYear Then
            Return vContactCPDPeriod
          End If
        ElseIf Len(pStartDate) > 0 Then
          If CDate(vContactCPDPeriod.StartDate) = CDate(pStartDate) Then
            Return vContactCPDPeriod
          End If
        End If
      Next
      Return Nothing
    End Function

    Private Sub GenerateCyclePeriods(Optional ByVal pGetControlNumbers As Boolean = False, Optional ByVal pSave As Boolean = True)
      Dim vDate As String
      Dim vParams As CDBParameters
      Dim vContactCPDPeriod As ContactCpdPeriod

      InitCycleType()
      mvContactCPDPeriods = New CollectionList(Of ContactCpdPeriod)
      vDate = StartDate
      While CDate(vDate) < CDate(EndDate)
        vParams = New CDBParameters
        vParams.Add("ContactCpdCycleNumber", ContactCpdCycleNumber)
        vParams.Add("StartDate", CDBField.FieldTypes.cftDate, vDate)
        Dim vEndDate As New Date(CDate(vDate).Year, CDate(vDate).Month, CDate(vDate).Day)
        vEndDate = vEndDate.AddYears(1).AddDays(-1)
        vParams.Add("EndDate", CDBField.FieldTypes.cftDate, vEndDate.ToString)
        vContactCPDPeriod = New ContactCpdPeriod(mvEnv)
        vContactCPDPeriod.Create(vParams)
        If pSave Then vContactCPDPeriod.Save(AmendedBy)
        mvContactCPDPeriods.Add(CStr(vContactCPDPeriod.ContactCpdPeriodNumber), vContactCPDPeriod)
        vDate = CDate(vDate).AddYears(1).ToString
      End While
    End Sub

    Public Sub CreateCPDData(ByVal pParams As CDBParameters, Optional ByVal pCPDType As CpdCycleType = Nothing)
      Dim vCPDPeriod As ContactCpdPeriod
      Dim vTransactionStarted As Boolean
      Dim vCPDObjectiveBased As Boolean

      If Not pCPDType Is Nothing Then mvCycleType = pCPDType

      If pParams.Exists("CpdCycleNumber") Then
        Init(pParams("CpdCycleNumber").IntegerValue)
        If Not Existing Then RaiseError(DataAccessErrors.daeCPDCycleNotFound, pParams("CpdCycleNumber").Value)
        pParams("ContactNumber").Value = ContactNumber.ToString 'Must set this number so that the system can create journal records for CPD Points
      Else
        If Len(pParams.ParameterExists("CycleStartDate").Value) > 0 Then mvClassFields(ContactCpdCycleFields.StartDate).Value = pParams("CycleStartDate").Value
        If Len(pParams.ParameterExists("CycleEndDate").Value) > 0 Then mvClassFields(ContactCpdCycleFields.EndDate).Value = pParams("CycleEndDate").Value
        SetDatesFromYear()
        If Not pParams.Exists("CycleEndDate") Then
          mvClassFields(ContactCpdCycleFields.EndDate).Value = mvCycleType.EndDate(StartDate)
          pParams.Add("CycleEndDate", CDBField.FieldTypes.cftDate, EndDate)
        End If
        InitFromContact(pParams("ContactNumber").IntegerValue, pCPDType.CpdCycleTypeCode, StartDate, EndDate)
        If Not Existing Then
          Create(pParams)
          GenerateCyclePeriods()
        End If
      End If
      vCPDPeriod = GetPeriodFromDate(, pParams("PeriodStartDate").Value)
      If vCPDPeriod Is Nothing Then RaiseError(DataAccessErrors.daeCPDPeriodNotFound)
      If pCPDType IsNot Nothing AndAlso pCPDType.CpdType = "O" Then
        'CPD Objectives
        vCPDPeriod.AddObjective(pParams)
        vCPDObjectiveBased = True
      Else
        'CPD Points
        vCPDPeriod.AddPoint(pParams)
      End If
      If Not mvEnv.Connection.InTransaction Then
        mvEnv.Connection.StartTransaction()
        vTransactionStarted = True
      End If
      If Not vCPDObjectiveBased Then
        vCPDPeriod.SavePoints()
      Else
        vCPDPeriod.SaveObjectives()
      End If
      SavePeriods()
      Save()
      If vTransactionStarted Then mvEnv.Connection.CommitTransaction()
    End Sub

    Public Overloads Sub Create(ByVal pParams As CDBParameters)
      Init()
      With mvClassFields
        Update(pParams)
      End With
    End Sub

    Public Overloads Sub Update(ByVal pParams As CDBParameters)
      MyBase.Update(pParams)
      With mvClassFields
        If pParams.Exists("StartDate") Then
          .Item(ContactCpdCycleFields.StartDate).Value = pParams("StartDate").Value
        ElseIf pParams.Exists("CycleStartDate") Then
          .Item(ContactCpdCycleFields.StartDate).Value = pParams("CycleStartDate").Value
        End If
        If pParams.Exists("EndDate") Then
          .Item(ContactCpdCycleFields.EndDate).Value = pParams("EndDate").Value
        ElseIf pParams.Exists("CycleEndDate") Then
          .Item(ContactCpdCycleFields.EndDate).Value = pParams("CycleEndDate").Value
        End If
        CheckValidity()
      End With
    End Sub

    Protected Overrides Sub PostValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PostValidateUpdateParameters(pParameterList)
      SetValid()
      CheckValidity()
    End Sub

    Public Sub InitFromContact(Optional ByVal pContactNumber As Integer = 0, Optional ByVal pCpdCycleType As String = "", Optional ByVal pStartDate As String = "", Optional ByVal pEndDate As String = "")
      If pContactNumber > 0 Then
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("contact_number", pContactNumber)
        vWhereFields.Add("cpd_cycle_type", pCpdCycleType)
        vWhereFields.Add("start_date", CDBField.FieldTypes.cftDate, pStartDate)
        vWhereFields.Add("end_date", CDBField.FieldTypes.cftDate, pEndDate)
        MyBase.InitWithPrimaryKey(vWhereFields)
        If Not Existing Then
          mvClassFields(ContactCpdCycleFields.ContactNumber).IntegerValue = pContactNumber
          mvClassFields(ContactCpdCycleFields.CpdCycleType).Value = pCpdCycleType
          mvClassFields(ContactCpdCycleFields.StartDate).Value = pStartDate
          mvClassFields(ContactCpdCycleFields.EndDate).Value = pEndDate
        End If
      Else
        Init()
      End If
    End Sub

    Public Sub SavePeriods()
      If Not mvContactCPDPeriods Is Nothing Then
        For Each vCPDPeriod As ContactCpdPeriod In mvContactCPDPeriods
          vCPDPeriod.Save()
        Next
      End If
    End Sub
#End Region
  End Class
End Namespace
