Namespace Access
  Public Interface IAutoPaymentMethod
    ReadOnly Property Existing() As Boolean
    Sub Init(ByVal pEnv As CDBEnvironment, Optional ByVal pAutoPaymentNumber As Integer = 0)
    ReadOnly Property ContactNumber() As Integer
    ReadOnly Property AddressNumber() As Integer
    ReadOnly Property AutoPaymentNumber() As Integer
    Property BankAccount() As String
    Sub SetUnCancelled()
    Sub CreateAutoPMActivity()
    Sub SaveChanges(Optional ByVal pAmendedBy As String = "", Optional ByVal pAudit As Boolean = False)
  End Interface

  Partial Public Class PaymentPlan

    Public Enum PayPlanRecordSetTypes 'These are bit values
      pprstAll = &HFFS 'This does not include detail lines
      'ADD additional recordset types here
      pprstNumbers = &H1S
      pprstType = &H2S
      pprstPayment = &H4S
      pprstCancel = &H8S
      pprstRemainder = &H10S
      pprstPPDetails = &H18S
      pprstDetailLines = &H100S
      pprstDetailProduct = &H200S
      pprstAmendedAlias = &H400S
      pprstPaymentSchedules = &H800S
    End Enum

    'Keep the enum items in the same order as in the InitClassFields function
    Private Enum PaymentPlanFields
      ofAll = 0
      ofOrderNumber
      ofOrderType
      ofContactNumber
      ofAddressNumber
      ofOrderDate
      ofOrderTerm
      ofOrderTermUnits
      ofRenewalDate
      ofExpiryDate
      ofPaymentMethod
      ofPaymentFrequency
      ofFrequencyAmount
      ofAmount
      ofBalance
      ofArrears
      ofInAdvance
      ofRenewalAmount
      ofLastPayment
      ofLastPaymentDate
      ofNextPaymentDue
      ofBankersOrder
      ofDirectDebit
      ofCovenant
      ofCreditCard
      ofDetailLines
      ofNextDetailLine
      ofPaymentNumber
      ofNumberOfReminders
      ofCancellationReason
      ofCancelledOn
      ofCancelledBy
      ofReasonForDespatch
      ofBranch
      ofMembershipType
      ofSource
      ofTheirReference
      ofAmendedBy
      ofAmendedOn
      ofRenewalPending
      ofGiftMembership
      ofOneYearGift
      ofFutureCancellationDate
      ofFutureCancellationReason
      ofSalesContactNumber
      ofSalesGroup
      ofReprint
      ofRenewalDateChangeReason
      ofRenewalDateChangedBy
      ofRenewalDateChangedOn
      ofRenewalDateChangedValue
      ofResetOrderTerm
      ofCancellationSource
      ofFutureCancellationSource
      ofProvisional
      ofGiverContactNumber
      ofCreatedBy
      ofCreatedOn
      ofConfirmedOn
      ofFirstAmount
      ofPaymentScheduleAmendedOn
      ofClaimDay
      ofEligibleForGiftAid
      ofPackToMember
      ofRenewal
      ofMembershipProduct
      ofMembershipRate
      ofOneOffPayment
      ofStartMonth
      ofLoan
      ofCancelOneYearGiftApm
    End Enum

    'moved pptype to environment to fix a circular ref error

    Public Enum ppCovenant
      ppcCovenant
      ppcDepositedDeed
      ppcCancelled
      ppcNo
    End Enum

    Public Enum ppYesNoCancel
      ppYes
      ppNo
      ppCancelled
    End Enum

    Public Enum ppResetOrderTerm
      pprotYes
      pprotNo
      pprotNotSet
    End Enum

    Public Enum cdbValueKnownConstants
      cdbVKCNo = 0
      cdbVKCYes = -1
      cdbVKCunknown = 99
    End Enum

    ''' <summary>
    ''' The enumerations for Auto Pay Methods
    ''' </summary>
    ''' <remarks></remarks>
    Public Enum ppAutoPayMethods
      ''' <summary>
      ''' Standing Order
      ''' </summary>
      ppAPMSO
      ''' <summary>
      ''' Direct Debit
      ''' </summary>
      ppAPMDD
      ''' <summary>
      ''' Continuous Credit Card Authority
      ''' </summary>
      ppAPMCCCA
    End Enum

    Public Enum PaymentPlanCancellationTypes
      'pctAutoPayment = 1
      'pctCovenant = 2
      'pctPaymentPlan = 4            'Will cancel AutoPayment and Covenant
      'pctMembership = 8
      pctMembership = 1
      pctMember = 2
      pctCovenant = 4
      pctPaymentPlan = 8
      pctStandingOrder = 16
      pctDirectDebit = 32
      pctCCCA = 64
      pctAutoPayment = 128
    End Enum

    Public Enum MembershipPeriodTypes
      mptNone
      mptFirstPeriod
      mptSubsequentPeriod
    End Enum

    Public Enum OrderTermUnits
      otuNone
      otuMonthly
      otuWeekly
    End Enum

    Public Enum ChangePayerGiftMembershipTypes
      cpgmtNone
      cpgmtNonGift
      cpgmtGift
      cpgmtOneYearGift
    End Enum

    Public Enum AdvanceRenewalDateTypes
      ardtManual
      ardtAutomatic
    End Enum

    Public Enum PaymentHistoryOrderByTypes
      phobtNone
      phobtTransDatePaymentNumber
      phobtBatchTransactionLine
      phobtPostedPaymentNumberTransDate
    End Enum

    Public Enum ProportionalBalanceConfigSettings
      pbcsNone = 0
      pbcsExisting = 1
      pbcsNew = 2
      pbcsFullPayment = 4
      pbcsExistingPF = 8
    End Enum

    Public Enum ProRateBasisConfigSettings
      prbsNone
      prbsFrequencyBased
      prbsTimeBased
    End Enum

    Public Enum AutoPaymentClaimDateMethods
      apcdmDates = 1
      apcdmDays
      apcsmNextPayDue
    End Enum

    Public Enum PaymentPlanProblemTypes
      ppptContactDoesNotExist = 100 'Contact or Contact Address does  exist
      ppptRenewalDate = 200 'Payment Plan Renewal date is less than the or Date
      ppptNextDetailLineNumber = 300 'Next Detail line number is less than or equal the maximum line number
      ppptDetailLinesCount = 301 'Details Line count not equal to the number of detail lines
      ppptOrderDetailMissing = 302 'Details record missing
      ppptOrderBalanceTotal = 400 'Balance not equal to total of Details Balance
      ppptOrderArrearsTotal = 401 'Arrears not equal to total of Details Arrears
      ppptCovenantNotFound = 500 'Current Covenant flagged but not found
      ppptMoreThanOneCovenant = 501 'More than one current Covenant
      ppptStandingOrderNotFound = 502 'Current Standing order flagged but not found
      ppptMoreThanOneStandingOrder = 503 'More than one current Standing order
      ppptDirectDebitNotFound = 504 'Current Direct Debit flagged but not found
      ppptMoreThanOneDirectDebit = 505 'More than one current Direct Debit
      ppptCCCANotFound = 506 'Current Credit Card Authority flagged but not found
      ppptMoreThanOneCCCA = 507 'More than one current Credit Card Authority
      ppptMoreThanOneAutoPayment = 508 'More than one automatic payment method flag is set
      ppptUncancelledMember = 509 'Cancelled Membership Payment Plan has uncancelled member(s)
      ppptUncancelledCovenant = 510 'Cancelled Payment Plan has uncancelled Covenant(s)
      ppptUncancelledStandingOrder = 511 'Cancelled Payment Plan has uncancelled Standing order(s)
      ppptUncancelledDirectDebit = 512 'Cancelled Payment Plan has uncancelled Direct Debit(s)
      ppptUncancelledCCCA = 513 'Cancelled Payment Plan has uncancelled Credit Card Authority(ies)
      ppptCovenantCancelled = 514 'Current Covenant flagged but actually cancelled
      ppptStandingOrderCancelled = 515 'Current Standing order flagged but actually cancelled
      ppptDirectDebitCancelled = 516 'Current Direct Debit flagged but actually cancelled
      ppptRenewalPendingRenewalDate = 518 'The Renewal Pending flag is incorrect and the Renewal Date is wrong
      ppptRenewalPendingIncorrectlyY = 519 'The Renewal Pending flag is incorrectly set to 'Y'
      ppptRenewalDateIncorrect = 520 'The Renewal Date is incorrect
      ppptCCCACancelled = 526 'Current Credit Card Authority flagged but actually cancelled
      ppptStandingOrderAccountMissing = 600 'Current Standing order Contact Account details missing
      ppptDirectDebitAccountMissing = 601 'Current Direct Debit Contact Account details missing
      ppptCCCACreditCardMissing = 602 'Current Credit Card Authority Contact Credit Card details missing
      ppptFrequencyAmountZero = 700 'Frequency amount is zero - Balance and Renewal Amount are not zero
      ppptPaymentFrequencyNotFound = 701 'Payment Frequency details not found
      ppptFrequencyAmountIncorrect = 702 'No Longer Used
      ppptPaymentsDontMatchBalance = 800 'For a non-zero Balance the sum of Payment Schedule Outstanding Amount does not match the Balance
      ppptInAdvAndArrearsSet = 801 'Payment Plan has both In Advance and Arrears set
      ppptNegativeBalance = 802 'Payment Plan has a negative balance
      ppptNegativeDetailBalance = 803 'Payment Plan Detail balance add up to a negative balance
      ppptDetAmtNotSetForDon = 804 'Detail Amount not set for a zero proced product line
      ppptSOPPAmtNotEqualRenAmt = 805 'Payment Plan Amount does not match the Renewal Amount for Standing Order
      ppptSOAmtNotEqualPPFreqAmt = 806 'Standing Order Amount does not match the Payment Plan frequency Amount
      ppptNotRenewed = 807 'Payment Plan not renewed recently
      ppptRDNotEqualNPDFor99Term = 808 'Renewal Date does not match the next payment due date for payment plan with term of 99 years and balance zero.
      ppptRDNotMatchNPDFor1Term = 809 'Incorrect Renewal Date and Next payment Due Date for term of 1 year
      ppptOPHMissingBatchHeader = 811 'The Payment Plan Payments do not have corresponding Batch Headers
      ppptBalanceLessThanArrears = 812 'The Payment Plan Balance is Less than arrears
      ppptNoMembProdForMembership = 813 'Membership Payment Plan does not have a membership product on the first detail line
      ppptExtraMembProdOnDetail = 814 'Membership Product found on a Detail line other than the first for a Membership Payment Plan
      ppptRenAmtNotEqualFreqAmtRegDon = 815 'Regular Donation payment plan does not have the Renewal Amount same as the Frequency Amount
      ppptRenewalPendingIncorrectlyN = 816 'Renewal Pending set to 'N' for a newly renewed payment plan
      ppptIncorrectPPType = 817 'PaymentPlan Type Incorrect
      ppptFMTMembEqualsPPMembType = 818 'Future Membership Type: Membership on Payment plan should be for 'future' type and members membership type should be for the current membership type
      ppptFMTIncorrectRenPendForDetF = 819 'Future Memberships: Renewel pending set to 'N' for Payment Plan with Detail lines with a Time Status of 'F'
      ppptFMTMembNotEqualsPPMembType = 820 'Future Membership Type: The Members membership Type does not match the Payment Plans  membership type
      ppptFMTRenewedAtWrongMembType = 821 'Future Memberships: Renewed at the Wrong Membership Type
      ppptPayMetNotMatchAutoFlag = 822 'Payment Method does not match the Auto Payment Method flag
      ppptFrequencyAmtIncorrectForFreq = 823 'Frequency Amount incorrect for the specified frequency
      ppptNPDBeforeLastPayDate = 824 'Next Payment Due is before the Last Payment Date
      ppptRenewalDateFarAhead = 825 'Renewal Date is 18 months ahead from today
      ppptDetailLine1Missing = 826 'Payment Plan does not have Detail Number 1
      ppptDetBalLessArrearsMoreThanPrice = 827 'Payment Plan Detail Balance Less Arrears More than current price times quantity
      ppptOPSMissingFor1stYearFree = 828 'Payment Schedule Missing for the subsequent year of a Membership where the first year is free
      ppptOPSOutstandingNotEqualBal = 829 'Balance does not equal sum of schedule lines
      ppptIncorrFAPre5Payments = 830 'Incorrect Financial Adjustment of Pre 5.0 Payment Plan Payments
      ppptOPSRenewalDateIncorrectForAnnual = 831 'Payment plan with renewal_pending  'N' and a payment plan schedule record with due date > renewal date Applies to annually renewing payment plans and usually indicates where a renewal_date has not been rolled on
      ppptOPSDueDateFarInFutureForRenPendY = 832 'Payment plan with renewal_pending  'Y' and a payment plan schedule record with due date > renewal date + 1 year
      ppptOPSNotCreated = 833 'Payment Schedule Not Created
      ppptOPSDueDateNotInRenTerm = 834 'Payment Schedule Due Dates not within renewal term
      ppptProvNonProvSameDueDate = 835 'Provisional and non-Provisional OPS due on same date
      ppptOPHWithoutOPS = 836 'Payment Schedule Record Missing for Payment History
      ppptOPSStatusIncorrectP = 837 'Scheduled payment status is 'P' but Amount Due is less than or equal to Amount Outstanding
      ppptOPSStatusVAmt0ForNonFreePP = 838 'Provisional Status Schedule records with Amount Due of Zero for a Chargeble Payment Plan
      ppptOPSStatusVAmtDueNotEqualOutstanding = 839 'Provisional Status Schedule records Amount Due does not equal Amount Outstandin
      ppptOPSStatusVIncorrectAmount = 840 'Incorrect Provisional Schedule Record
      ppptMissingOPS = 841 'No Payment Schedule records but Payment Schedule Amended On is set
      ppptAnnualPPWithHalfBalDue = 842 'Annual Payment Plan with half balance due
      ppptOPSNotUsingAmtWhenBal0 = 843 'Schedule payment Records not using Amount when Balance is zero
      ppptOPSMoreThan1StatusV = 844 'More than one Provisional Status Schedule Records
      ppptOPSBothVandD = 845 'Both Due and Provisional Schedule records exist
      ppptOPSNextDueNotEqualFreqorBal = 846 'The next Schedule Amount Due does not equal Frequency Amount or Balance
      ppptOPS0RenAmtNon0DueDate1yearAhead = 847 'Schedule has zero amount, when Renewal Amount is non zero and the Due Date has been set One year ahead
      ppptProvMissingForRegDonWithBal0 = 848 'Provisional Status Payment Schedule record missing for Frequency amount for Regular Donations with balance zero
      ppptNPDAfterClaimDateOnD = 849 'Next Payment Due is later than the Claim Date on Status Due Schedule records
      ppptOPSStatusIncorrectForPosted = 850 'Payment Schedule records does not reflect Posted Status
      ppptOPHPointToWrongOPSForUV = 851 'Payment History points to incorrect Schedule record for Unprocessed and Provisional records
      ppptNoDueOPSForRenPendY = 852 'No Due Status Schedule records for Renewal Pending set
      ppptProvRecForCurrTerm = 853 'Provisional Schedule record set-up for current Renewl Term
      ppptOPSClaimDateInPast = 854 'Schedule records with a Claim Date in the past
      ppptOPSOutOfSync = 855 'Payment Schedule out of Synchronisation
      ppptOPSForProvPaymentsNotConfirmed = 856 'Payment Schedule Records for Provisional Payments not Updated to Confirmed
      ppptOPSAmtOutstanding0NotMatchStatus = 857 'The Payment Schedule Status does not reflect the Amount Outstanding of zero
      ppptOPSFStatusNoOPH = 858 'Payment History Records Missing For Fully Paid Schedule Records
      ppptOPSFStatusAndOPHAmtNotEqual = 859 'Order payment history is for a different amount than fully paid order payment schedule
      ppptExpectedBalIncorrect = 860 'Expected Balance Incorrect for Installment Payments
      ppptMissingMemberFutureType = 861 'Member_future_type record missing for a Payment Plan with automatic Future Membership Type
      ppptRenewalDateRolledForwardByAPM = 862 'No Longer Used
      ppptOPSStatusVAutoCancelledCreation = 863 'Provisional Status Payment Schedule record has Auto Pay Method Cancellation Creation Reason
      ppptSubValidToOutOfSync = 864 'Subscription Valid To dates not in synch with Renewal Date
      ppptMultipleFutureMemLines = 865 'There are duplicate Payment Plan Details records for Future Membership Changes
      pptNegativeRenewalAmount = 866    'Payment Plan has a negative Renewal Amount
    End Enum

    Public Enum PaymentPlanUpdateTypes
      pputNone = 0
      pputAddCreditCardAuthority = 1
      pputAddDirectDebit = 2
      pputAddStandingOrder = 4
      pputPaymentPlan = 8
      pputConversion = 16
      pputChangeMembershipType = 32
      'pputPPSummary
      'pputPPMaintenance
      'pputPPSummaryConversion
      'pputPPMaintenanceConversion
    End Enum

    Public Enum CMTProportionBalanceTypes
      cmtNone = 1
      cmtMonths = 2
      cmtFrequencyAmounts = 3
    End Enum

    Private Enum DDStartDateDefaultMethods  'Methods for determining date that will be used to work out default DD start date of payment plans 
      Unknown = 0
      UsingPayPlanStartDateOrToday 'Use the latest value from today's date or payment date start date
      UsingPayPlanStartDate
    End Enum

    'local variable(s) to hold property value(s)
    Private mvDetails As Collection
    Private mvDetail As PaymentPlanDetail
    Private mvSubsExtension As Boolean
    Private mvAutoSubsPaymentTypes() As String
    Private mvFixedRenewalCycle As String
    Private mvContinuousRenewals As Boolean
    Private mvFixedDDClaimDate As Boolean
    Private mvCreated As Boolean 'Flag to show payplan has been inserted
    Private mvAutoPaymentCreated As Boolean
    Private mvAutoPaymentSource As String 'Temporary until trader creates auto payments properly
    Private mvAutoPaymentCAF As Boolean 'Temporary until trader creates auto payments properly
    Private mvCovenantCreated As Boolean
    Private mvProportionalBalanceSetting As String
    Private mvFixedRenewalPrevious As Boolean
    Private mvSetFixedRenewalPrevious As Boolean
    Private mvProRateBasis As String
    Private mvAutoPaymentClaimDateMethod As AutoPaymentClaimDateMethods
    Private mvAutoPayClaimDateMethodSet As Boolean
    Private mvProcessRenewal As Boolean
    Private mvProcessFutureMembership As Boolean
    Private mvReinstateSkipPaymentsCount As Integer
    Private mvReinstateSkipPaymentsValue As Double
    Private mvReinstatePreprocessErrorMsg As String
    Private mvReinstatePreprocessFMTMsg As String
    Private mvHistoricAddressesErrorMsg As String
    Private mvProcessCMT As Boolean
    Private mvCMTProportionBalance As CMTProportionBalanceTypes
    Private mvFirstCMT As Boolean   'Only used in CMT when the PP has been renewed and there is/are payment(s) left for current year.
    Private mvSecondCMT As Boolean  'Only used in CMT when the PP has been renewed and there is/are payment(s) left for current year.
    Private mvFullMembershipPriceCMT As Nullable(Of Double) 'Used in CMT to calculate the Payment Frequency using the fulll new membership price
    Private mvWriteOffMissedPayments As Boolean   'Used when re-creating the payment schedule
    Private mvTraderBatchCategory As String

    'local variables to hold other objects
    Private mvPayer As Contact
    Private mvStandingOrder As StandingOrder
    Private mvDirectDebit As DirectDebit
    Private mvCreditCardAuthority As CreditCardAuthority
    Private mvCovenant As Covenant
    Private mvGiftAidCovenant As Covenant
    Private mvMember As Member
    Private mvCurrentMembers As Collection
    Private mvCurrentSubscriptions As Collection
    Private mvPaymentHistory As Collection
    Private mvScheduledPayments As Collection
    Private mvNewOrder As NewOrder
    Private mvLoan As Loan

    'local variables to hold PaymentFrequency Information
    Private mvGotPaymentFrequency As Boolean
    Private mvPaymentFreqFrequency As Integer
    Private mvPaymentFreqInterval As Integer
    Private mvPaymentFreqPeriod As PaymentFrequency.PaymentFrequencyPeriods

    'local variables to hold other value(s)
    Private mvUsesProductNumbers As Boolean
    Private mvProductNumbers As String
    Private mvAutoPayment As Boolean
    Private mvTransactionType As String 'Hold the Trader TransactionType to use when editing Payment Plan, set in LoadDetails
    Private mvMembershipNumber As Integer
    Private mvNoOfIntervals As Integer 'Hold the number of payment intervals since Payment Plan cancellation
    Private mvRenewAtSameRate As Boolean 'Hold the value of the config me_renew_at_same_rate
    Private mvRenewAtSameRateSet As Boolean 'To check if mvRenewAtSameRate has already been set or not
    Private mvRenewalDateSupplied As Boolean
    Private mvNPDDateUpdated As Boolean

    Private mvEnclosures As Collection
    Private mvIncentivesGenerated As Boolean
    Private mvIgnoreProductAndRate As Boolean 'Ignore product and rate flag from the I type incentive line
    Private mvSpecialInitialPeriod As Boolean 'Flag indicating that an I-type incentive is being used against as existing payment plan
    Private mvJoinDate As Date
    Private mvUseStartDateForTerm As Boolean
    Private mvOldMembershipIncentive As Boolean 'flag indicating if the old membership before the CMT had an incentive
    Private mvPaymentPlanChange As PaymentPlanChange

    'Standard Class Setup
    Private mvEnv As CDBEnvironment
    Private mvClassFields As ClassFields
    Private mvExisting As Boolean
    Private mvAmendedValid As Boolean
    Private mvInitialized As Boolean
    Private mvOriginalPriceDate As String

    'Private Properties set within this class
    Private Property PaymentFrequencyOffsetMonths As Integer

    Private Class ProrateBalanceData
      Friend Sub New(ByVal pNextPaymentDue As Date, ByVal pRenewalDate As Date, ByVal pChangeDate As Date)
        Me.NextPaymentDue = pNextPaymentDue
        Me.RenewalDate = pRenewalDate
        Me.ChangeDate = pChangeDate
      End Sub
      Friend NextPaymentDue As Date
      Friend RenewalDate As Date
      Friend ChangeDate As Date
      Friend MinDueDate As Nullable(Of Date)
    End Class

    '-----------------------------------------------------------
    ' PRIVATE PROCEDURES FOLLOW
    '-----------------------------------------------------------

    Private Function AutoSubsPaymentMethod() As Boolean
      Dim vIndex As Integer

      For vIndex = 0 To UBound(mvAutoSubsPaymentTypes)
        If mvAutoSubsPaymentTypes(vIndex) = mvClassFields(PaymentPlanFields.ofPaymentMethod).Value Then
          AutoSubsPaymentMethod = True
          Exit For
        End If
      Next
    End Function

    Private Sub CancelMemberData(ByVal pEnv As CDBEnvironment, ByRef pMembershipNumber As Integer, ByRef pMemberNumber As String, ByRef pContactNumber As Integer, ByRef pAddressNumber As Integer, ByRef pCancellationReason As String, ByRef pActivity As String, ByRef pActivityValue As String, ByRef pMailingSuppression As String, ByRef pLogname As String, ByRef pCancelMemberRecord As Boolean, ByRef pContactType As Contact.ContactTypes, ByVal pStatus As String, ByVal pCancellationReasonDesc As String, ByVal pCancellationSource As String, ByVal pStatusDate As String, ByVal pJoinedDate As String)
      Dim vCancelUpdateFields As New CDBFields
      Dim vMemberWhereFields As New CDBFields
      Dim vCatWhereFields As New CDBFields
      Dim vSuppWhereFields As New CDBFields
      Dim vSuppUpdateFields As New CDBFields
      Dim vConn As CDBConnection
      Dim vTable As String
      Dim vContact As New Contact(mvEnv)
      Dim vOrganisation As New Organisation(mvEnv)
      Dim vMember As New Member

      vConn = pEnv.Connection

      vMemberWhereFields.Add("membership_number", CDBField.FieldTypes.cftLong, pMembershipNumber)

      vCancelUpdateFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, pCancellationReason)
      vCancelUpdateFields.Add("cancelled_on", CDBField.FieldTypes.cftDate, TodaysDate)
      vCancelUpdateFields.Add("cancelled_by", CDBField.FieldTypes.cftCharacter, pLogname)
      If pCancellationSource.Length > 0 Then vCancelUpdateFields.Add("cancellation_source", CDBField.FieldTypes.cftCharacter, pCancellationSource)

      If pContactType = Contact.ContactTypes.ctcOrganisation Then
        vCatWhereFields.Add("organisation_number", CDBField.FieldTypes.cftLong, pContactNumber)
        vTable = "organisation"
        If pStatus.Length > 0 Then
          If Len(pStatusDate) = 0 Then pStatusDate = TodaysDate()
          vOrganisation.Init(pContactNumber)
          If (pContactNumber = Payer.ContactNumber) Then
            vOrganisation.Status = pStatus
            vOrganisation.StatusDate = pStatusDate 'TodaysDate
            If pCancellationReasonDesc.Length > 0 AndAlso
              String.IsNullOrWhiteSpace(vOrganisation.StatusReason) Then
              vOrganisation.StatusReason = pCancellationReasonDesc
            End If
          End If
          vOrganisation.Save()
        End If
      Else
        vCatWhereFields.Add("contact_number", CDBField.FieldTypes.cftLong, pContactNumber)
        vTable = "contact"
        If pStatus.Length > 0 Then
          If Len(pStatusDate) = 0 Then pStatusDate = TodaysDate()
          vContact.Init(pContactNumber)
          If (pContactNumber = Payer.ContactNumber) Then
            vContact.Status = pStatus
            vContact.StatusDate = pStatusDate
            If pCancellationReasonDesc.Length > 0 AndAlso
              String.IsNullOrWhiteSpace(vContact.StatusReason) Then
              vContact.StatusReason = pCancellationReasonDesc
            End If
          End If
          vContact.Save()
        End If
      End If

      vCatWhereFields.Add("activity", CDBField.FieldTypes.cftCharacter, pActivity)
      vCatWhereFields.Add("activity_value", CDBField.FieldTypes.cftCharacter, pActivityValue)
      vCatWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoGreaterThan)
      vCatWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, pJoinedDate)

      If pCancelMemberRecord Then UpdateMembers(vConn, vCancelUpdateFields, vMemberWhereFields, True)

      CancelCategories(pEnv, pContactType, vCatWhereFields, pJoinedDate, pLogname)

      Dim vOrganisationSuppression As New OrganisationSuppression(mvEnv)
      Dim vContactSuppression As New ContactSuppression(mvEnv)
      Dim pValidfrom As String = ""
      Dim pValidTo As String = ""
      Dim vExisting As Boolean

      If pContactType = Contact.ContactTypes.ctcOrganisation Then
        'check if the suppressions exists and is valid today
        'select suppression where validTo is not set or valid to is greater than today
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("organisation_number", pContactNumber)
        vWhereFields.Add("mailing_suppression", pMailingSuppression)
        vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoLessThanEqual)
        vWhereFields.Add("valid_from#2", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoEqual)
        'and starts today or before today
        vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoGreaterThanEqual)
        vWhereFields.Add("valid_to#2", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoEqual)
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vOrganisationSuppression.GetRecordSetFields, "organisation_suppressions cs", vWhereFields)
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        While vRS.Fetch 'if record returned (should only be one) get start and end dates
          pValidfrom = vRS.Fields("valid_from").Value
          pValidTo = vRS.Fields("valid_to").Value
          vExisting = True
        End While
        If vExisting Then
          vOrganisationSuppression.Init(ContactSuppression.ContactSuppressionTypes.cstOrganisation, pContactNumber, pMailingSuppression, pValidfrom, pValidTo)
          If vOrganisationSuppression.Existing Then
            vOrganisationSuppression.Cancel()
            vOrganisationSuppression.Save(pLogname)
          End If
        End If
      Else
        Dim vWhereFields As New CDBFields
        'get suppression if currently active
        'starts today or earlier
        vWhereFields.Add("contact_number", pContactNumber)
        vWhereFields.Add("mailing_suppression", pMailingSuppression)
        vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoLessThanEqual)
        vWhereFields.Add("valid_from#2", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoEqual)

        'and starts today or before today
        vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, TodaysDate, CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoGreaterThanEqual)
        vWhereFields.Add("valid_to#2", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket Or CDBField.FieldWhereOperators.fwoEqual)

        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vContactSuppression.GetRecordSetFields, "contact_suppressions cs", vWhereFields)
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        While vRS.Fetch 'if record returned (should only be one) get start and end dates
          pValidfrom = vRS.Fields("valid_from").Value
          pValidTo = vRS.Fields("valid_to").Value
          vExisting = True
        End While
        If vExisting Then
          vContactSuppression.Init(ContactSuppression.ContactSuppressionTypes.cstContact, pContactNumber, pMailingSuppression, pValidfrom, pValidTo)
          If vContactSuppression.Existing Then
            vContactSuppression.Cancel()
            vContactSuppression.Save(pLogname)
          End If
        End If
      End If

      'Update MembershipGroups
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataMembershipGroups) Then
        vMember.SetMembershipGroupsHistoric(pEnv, pMembershipNumber)
      End If

      pEnv.AddJournalRecord(JournalTypes.jnlMember, JournalOperations.jnlCancel, pContactNumber, pAddressNumber, pMembershipNumber)
    End Sub

    Private Sub DefinePPType()
      If mvClassFields(PaymentPlanFields.ofMembershipType).Value.Length > 0 Then
        mvClassFields(PaymentPlanFields.ofOrderType).Value = "M"
      ElseIf (mvClassFields(PaymentPlanFields.ofCovenant).Value = "I" Or mvClassFields(PaymentPlanFields.ofCovenant).Value = "D") Then
        mvClassFields(PaymentPlanFields.ofOrderType).Value = "C"
      ElseIf mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "Y" Then
        mvClassFields(PaymentPlanFields.ofOrderType).Value = "B"
      ElseIf mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "Y" Then
        mvClassFields(PaymentPlanFields.ofOrderType).Value = "D"
      ElseIf mvClassFields(PaymentPlanFields.ofCreditCard).Value = "Y" Then
        mvClassFields(PaymentPlanFields.ofOrderType).Value = "A"
      Else
        mvClassFields(PaymentPlanFields.ofOrderType).Value = "O"
      End If

      'Now check if we have a cancelled one(dd,so,ccca,cov) attachjed to the payment plan
      With mvClassFields(PaymentPlanFields.ofOrderType)
        If .Value = "O" Then
          If mvClassFields(PaymentPlanFields.ofCovenant).Value = "C" And Len(CancellationReason) > 0 Then
            mvClassFields(PaymentPlanFields.ofOrderType).Value = "C"
          ElseIf mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "C" And Len(CancellationReason) > 0 Then
            mvClassFields(PaymentPlanFields.ofOrderType).Value = "B"
          ElseIf mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "C" And Len(CancellationReason) > 0 Then
            mvClassFields(PaymentPlanFields.ofOrderType).Value = "D"
          ElseIf mvClassFields(PaymentPlanFields.ofCreditCard).Value = "C" And Len(CancellationReason) > 0 Then
            mvClassFields(PaymentPlanFields.ofOrderType).Value = "A"
          Else
            mvClassFields(PaymentPlanFields.ofOrderType).Value = "O"
          End If
        End If
      End With
    End Sub

    Private Sub GetPaymentFrequencyDetails()
      Dim vPF As PaymentFrequency

      If Not mvGotPaymentFrequency Then
        If mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value.Length > 0 Then
          Try
            vPF = mvEnv.GetPaymentFrequency((mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value))
          Catch vEx As CareException
            If vEx.ErrorNumber = DataAccessErrors.daePaymentFrequencyInvalid Then
              vPF = New PaymentFrequency
              vPF.Init(mvEnv)
            Else
              PreserveStackTrace(vEx)
              Throw vEx
            End If
          End Try
          mvGotPaymentFrequency = Len(vPF.PaymentFrequencyCode) > 0
          mvPaymentFreqFrequency = vPF.Frequency
          mvPaymentFreqInterval = vPF.Interval
          mvPaymentFreqPeriod = vPF.Period
          PaymentFrequencyOffsetMonths = vPF.OffsetMonths
        End If
      End If
    End Sub

    Private Function GetPPCovenant(ByRef pCovenant As String) As PaymentPlan.ppCovenant
      Select Case pCovenant
        Case "I"
          GetPPCovenant = PaymentPlan.ppCovenant.ppcCovenant
        Case "D"
          GetPPCovenant = PaymentPlan.ppCovenant.ppcDepositedDeed
        Case "C"
          GetPPCovenant = PaymentPlan.ppCovenant.ppcCancelled
        Case Else
          GetPPCovenant = PaymentPlan.ppCovenant.ppcNo
      End Select
    End Function

    Public Function GetPPType(ByRef pType As String) As CDBEnvironment.ppType
      Select Case pType
        Case "M"
          GetPPType = CDBEnvironment.ppType.pptMember
        Case "C"
          GetPPType = CDBEnvironment.ppType.pptCovenant
        Case "B"
          GetPPType = CDBEnvironment.ppType.pptSO
        Case "D"
          GetPPType = CDBEnvironment.ppType.pptDD
        Case "A"
          GetPPType = CDBEnvironment.ppType.pptCCCA
        Case "L"
          GetPPType = CDBEnvironment.ppType.pptLoan
        Case Else
          GetPPType = CDBEnvironment.ppType.pptOther
      End Select
    End Function

    Private Function GetAutomatedPaymentStatus(ByRef pValue As String) As PaymentPlan.ppYesNoCancel
      Select Case pValue
        Case "Y"
          GetAutomatedPaymentStatus = PaymentPlan.ppYesNoCancel.ppYes
        Case "C"
          GetAutomatedPaymentStatus = PaymentPlan.ppYesNoCancel.ppCancelled
        Case Else
          GetAutomatedPaymentStatus = PaymentPlan.ppYesNoCancel.ppNo
      End Select
    End Function

    Private Sub InitClassFields()
      If mvClassFields Is Nothing Then
        mvClassFields = New ClassFields
        'There should be an entry here for each field in the table
        'Keep these in the same order as the Fields enum
        With mvClassFields
          .DatabaseTableName = "orders"
          .Add("order_number", CDBField.FieldTypes.cftLong)
          .Add("order_type")
          .Add("contact_number", CDBField.FieldTypes.cftLong)
          .Add("address_number", CDBField.FieldTypes.cftLong)
          .Add("order_date", CDBField.FieldTypes.cftDate)
          .Add("order_term", CDBField.FieldTypes.cftInteger)
          .Add("order_term_units")
          .Add("renewal_date", CDBField.FieldTypes.cftDate)
          .Add("expiry_date", CDBField.FieldTypes.cftDate)
          .Add("payment_method")
          .Add("payment_frequency")
          .Add("frequency_amount", CDBField.FieldTypes.cftNumeric)
          .Add("amount", CDBField.FieldTypes.cftNumeric)
          .Add("balance", CDBField.FieldTypes.cftNumeric)
          .Add("arrears", CDBField.FieldTypes.cftNumeric)
          .Add("in_advance", CDBField.FieldTypes.cftNumeric)
          .Add("renewal_amount", CDBField.FieldTypes.cftNumeric)
          .Add("last_payment", CDBField.FieldTypes.cftNumeric)
          .Add("last_payment_date", CDBField.FieldTypes.cftDate)
          .Add("next_payment_due", CDBField.FieldTypes.cftDate)
          .Add("bankers_order")
          .Add("direct_debit")
          .Add("covenant")
          .Add("credit_card")
          .Add("detail_lines", CDBField.FieldTypes.cftInteger)
          .Add("next_detail_line", CDBField.FieldTypes.cftInteger)
          .Add("payment_number", CDBField.FieldTypes.cftInteger)
          .Add("number_of_reminders", CDBField.FieldTypes.cftInteger)
          .Add("cancellation_reason")
          .Add("cancelled_on", CDBField.FieldTypes.cftDate)
          .Add("cancelled_by")
          .Add("reason_for_despatch")
          .Add("branch")
          .Add("membership_type")
          .Add("source")
          .Add("their_reference")
          .Add("amended_by")
          .Add("amended_on", CDBField.FieldTypes.cftDate)
          .Add("renewal_pending")
          .Add("gift_membership")
          .Add("one_year_gift")
          .Add("future_cancellation_date", CDBField.FieldTypes.cftDate)
          .Add("future_cancellation_reason")
          .Add("sales_contact_number", CDBField.FieldTypes.cftLong)
          .Add("sales_group")
          .Add("reprint")
          .Add("renewal_change_reason")
          .Add("renewal_changed_by")
          .Add("renewal_changed_on", CDBField.FieldTypes.cftDate)
          .Add("renewal_change_value", CDBField.FieldTypes.cftInteger)
          .Add("reset_order_term", CDBField.FieldTypes.cftCharacter)
          .Add("cancellation_source")
          .Add("future_cancellation_source")
          .Add("provisional")
          .Add("giver_contact_number", CDBField.FieldTypes.cftLong)
          .Add("created_by")
          .Add("created_on", CDBField.FieldTypes.cftDate)
          .Add("confirmed_on", CDBField.FieldTypes.cftDate)
          .Add("first_amount", CDBField.FieldTypes.cftNumeric)
          .Add("payment_schedule_amended_on", CDBField.FieldTypes.cftDate)
          .Add("claim_day", CDBField.FieldTypes.cftInteger)
          .Add("eligible_for_gift_aid")
          .Add("pack_to_member")
          .Add("renewal")
          .Add("membership_product")
          .Add("membership_rate")
          .Add("one_off_payment")
          .Add("start_month", CDBField.FieldTypes.cftInteger)
          .Add("loan")
          .Add("cancel_one_year_gift_apm")
        End With
        mvClassFields(PaymentPlanFields.ofOrderNumber).SetPrimaryKeyOnly()

        mvSubsExtension = mvEnv.GetConfigOption("subscription_extension")
        mvAutoSubsPaymentTypes = Split(mvEnv.GetConfig("me_auto_subs_payment_types"), "|")
        mvFixedRenewalCycle = mvEnv.GetConfig("fixed_renewal_M")
        mvContinuousRenewals = mvEnv.GetConfigOption("option_continuous_renewal")
        mvFixedDDClaimDate = mvEnv.GetConfigOption("fp_dd_fixed_claim_date")
        mvProportionalBalanceSetting = mvEnv.GetConfig("fp_ppd_proportional_balance")
        mvProRateBasis = mvEnv.GetConfig("fp_ppd_prorate_basis")

        mvClassFields.Item(PaymentPlanFields.ofFirstAmount).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataMembershipProRating)
        mvClassFields.Item(PaymentPlanFields.ofPaymentScheduleAmendedOn).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments)
        mvClassFields.Item(PaymentPlanFields.ofClaimDay).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments)
        mvClassFields.Item(PaymentPlanFields.ofEligibleForGiftAid).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPayPlanEligibleForGiftAid)
        mvClassFields.Item(PaymentPlanFields.ofPackToMember).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPayPlanPackToMember)
        mvClassFields.Item(PaymentPlanFields.ofOneOffPayment).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataDutchSupport)
        mvClassFields.Item(PaymentPlanFields.ofStartMonth).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPaymentPlanStartMonth)
        mvClassFields.Item(PaymentPlanFields.ofLoan).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLoans)
        mvClassFields.Item(PaymentPlanFields.ofCancelOneYearGiftApm).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbCancelOneYearGiftApm)

        mvClassFields.Item(PaymentPlanFields.ofClaimDay).PrefixRequired = True

        mvClassFields.Item(PaymentPlanFields.ofRenewal).InDatabase = False
        mvClassFields.Item(PaymentPlanFields.ofMembershipProduct).InDatabase = False
        mvClassFields.Item(PaymentPlanFields.ofMembershipRate).InDatabase = False
      Else
        mvClassFields.ClearItems()
      End If

      mvPayer = Nothing
      mvStandingOrder = Nothing
      mvCreditCardAuthority = Nothing
      mvDirectDebit = Nothing
      mvCovenant = Nothing
      mvGiftAidCovenant = Nothing
      mvMember = Nothing
      mvScheduledPayments = Nothing
      mvNewOrder = Nothing
      mvLoan = Nothing

      mvDetails = New Collection
      mvDetail = New PaymentPlanDetail(Me)
      mvDetail.Init(mvEnv)
      mvCurrentMembers = New Collection
      mvCurrentSubscriptions = New Collection
      mvPaymentHistory = New Collection

      mvAutoPayment = False
      mvGotPaymentFrequency = False
      mvPaymentFreqFrequency = 0
      mvPaymentFreqInterval = 0
      PaymentFrequencyOffsetMonths = 0
      mvUsesProductNumbers = False
      mvProductNumbers = ""
      mvTransactionType = ""
      mvMembershipNumber = 0
      mvAmendedValid = False
      mvExisting = False
      mvCreated = False
      mvAutoPaymentCreated = False
      mvAutoPaymentSource = ""
      mvAutoPaymentCAF = False
      mvCovenantCreated = False
      mvProcessRenewal = False
      mvProcessFutureMembership = False
      mvProcessCMT = False
      mvWriteOffMissedPayments = False
      mvCMTOldPricing = Nothing
      mvCMTNewPricing = Nothing
      mvCMTNewTermMonths = 0
      mvCMTInAdvanceDetails = Nothing
      mvCMTRefundDetails = Nothing
      mvCMTProductDetails = Nothing

      mvPaymentPlanChange = Nothing
    End Sub

    Private Sub SetDefaults()

      'Add code here to initialise the class with default values for a new record
      mvClassFields(PaymentPlanFields.ofOrderTerm).Value = CStr(1)
      mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CStr(0)
      mvClassFields(PaymentPlanFields.ofBalance).Value = CStr(0)
      mvClassFields(PaymentPlanFields.ofArrears).Value = CStr(0)
      mvClassFields(PaymentPlanFields.ofInAdvance).Value = CStr(0)
      mvClassFields(PaymentPlanFields.ofRenewalAmount).Value = CStr(0)
      mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "N"
      mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "N"
      mvClassFields(PaymentPlanFields.ofCovenant).Value = "N"
      mvClassFields(PaymentPlanFields.ofCreditCard).Value = "N"
      mvClassFields(PaymentPlanFields.ofDetailLines).Value = CStr(0)
      mvClassFields(PaymentPlanFields.ofNextDetailLine).Value = CStr(1)
      mvClassFields(PaymentPlanFields.ofPaymentNumber).Value = CStr(0)
      mvClassFields(PaymentPlanFields.ofNumberOfReminders).Value = CStr(0)
      mvClassFields(PaymentPlanFields.ofRenewalPending).Value = "Y"
      mvClassFields(PaymentPlanFields.ofGiftMembership).Value = "N"
      mvClassFields(PaymentPlanFields.ofOneYearGift).Value = "N"
      mvClassFields(PaymentPlanFields.ofReprint).Value = "N"
      mvClassFields(PaymentPlanFields.ofPackToMember).Value = "N"
      mvClassFields(PaymentPlanFields.ofOneOffPayment).Value = "N"
      mvClassFields(PaymentPlanFields.ofCancelOneYearGiftApm).Value = "N"
    End Sub

    Private Sub SetFrequencyAmount()
      Dim vAmount As Double
      Dim vFixAmount As Double
      Dim vNumberOfPayments As Integer
      Dim vNextPaymentDue As Date
      Dim vLastPaymentDue As Date
      Dim vBalance As Double
      Dim vRenewalPending As Boolean

      If Len(mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value) > 0 And Len(mvClassFields(PaymentPlanFields.ofBalance).Value) > 0 Then
        GetPaymentFrequencyDetails()
        If mvPaymentFreqFrequency > 0 Then
          If Len(mvClassFields(PaymentPlanFields.ofAmount).Value) > 0 And StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
            'For Standing Orders must always use the FixedAmount to calculate the FrequencyAmount
            vBalance = mvClassFields(PaymentPlanFields.ofAmount).DoubleValue
            vRenewalPending = True
          Else
            If (Len(mvClassFields(PaymentPlanFields.ofRenewalAmount).Value) > 0 Or Len(mvClassFields(PaymentPlanFields.ofAmount).Value) > 0) And CDbl(mvClassFields(PaymentPlanFields.ofBalance).Value) = 0 Then
              If Len(mvClassFields(PaymentPlanFields.ofAmount).Value) > 0 Then
                vBalance = CDbl(mvClassFields(PaymentPlanFields.ofAmount).Value)
              Else
                vBalance = CDbl(mvClassFields(PaymentPlanFields.ofRenewalAmount).Value)
              End If
              vRenewalPending = True 'Force it to divide by the frequency as we start with a full years payment
            Else
              vBalance = CDbl(mvClassFields(PaymentPlanFields.ofBalance).Value)
              vRenewalPending = mvClassFields(PaymentPlanFields.ofRenewalPending).Bool
            End If
          End If
          If vRenewalPending Then
            'Assume we have the whole term to make the balance
            If MembershipType.Existing And MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm And FixedRenewalCycle And PreviousRenewalCycle And (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 And mvPaymentFreqFrequency > 1 Then
              'Creating new membership or adding a new PPD to a membership still in it's inital period
              vBalance = mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue
            End If
            vAmount = vBalance / mvPaymentFreqFrequency
            vFixAmount = Int(vAmount * 100) / 100
            If FixTwoPlaces(vFixAmount * mvPaymentFreqFrequency) < FixTwoPlaces(vBalance) Then vFixAmount = vFixAmount + 0.01
            mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CStr(vFixAmount)
          Else
            'Recalc frequency amount based on number of remaining payments and balance
            If Len(mvClassFields(PaymentPlanFields.ofRenewalDate).Value) > 0 And Len(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value) > 0 Then
              vLastPaymentDue = CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)
              If (mvPaymentFreqFrequency * mvPaymentFreqInterval) <> 12 And mvPaymentFreqInterval = 1 Then
                'Bit to handle ATL's 7 instalments per year
                vLastPaymentDue = vLastPaymentDue.AddYears(-1).AddMonths(mvPaymentFreqFrequency)
              End If
              If mvPaymentFreqFrequency = 1 Then
                vNextPaymentDue = CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)
              Else
                vNextPaymentDue = DateAdd(Microsoft.VisualBasic.DateInterval.Month, mvPaymentFreqInterval, CDate(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value))
              End If
              vNumberOfPayments = 1
              While DateDiff(Microsoft.VisualBasic.DateInterval.Day, vNextPaymentDue, vLastPaymentDue) > 0
                vNumberOfPayments = vNumberOfPayments + 1
                vNextPaymentDue = DateAdd(Microsoft.VisualBasic.DateInterval.Month, mvPaymentFreqInterval, vNextPaymentDue)
              End While
              vAmount = vBalance / vNumberOfPayments
              vFixAmount = Int(vAmount * 100) / 100
              If FixTwoPlaces(vFixAmount * vNumberOfPayments) < FixTwoPlaces(vBalance) Then vFixAmount = vFixAmount + 0.01
              mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CStr(vFixAmount)
            End If
          End If
          'End If
          'If First Amount is set and Frequency Amount has been changed and First Amount = original Frequency Amount then change First Amount to new Frequency Amount
          If mvClassFields(PaymentPlanFields.ofOrderDate).Value = mvClassFields(PaymentPlanFields.ofRenewalDate).Value And Len(mvClassFields(PaymentPlanFields.ofFirstAmount).Value) > 0 And mvClassFields(PaymentPlanFields.ofFrequencyAmount).SetValue <> mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value And mvClassFields(PaymentPlanFields.ofFirstAmount).DoubleValue = Val(mvClassFields(PaymentPlanFields.ofFrequencyAmount).SetValue) Then
            mvClassFields(PaymentPlanFields.ofFirstAmount).Value = mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value
          End If
        End If
      End If
    End Sub
    Public Function GetCovenantStatusCode(ByRef pCovenant As PaymentPlan.ppCovenant) As String
      Select Case pCovenant
        Case PaymentPlan.ppCovenant.ppcCovenant
          GetCovenantStatusCode = "I"
        Case PaymentPlan.ppCovenant.ppcDepositedDeed
          GetCovenantStatusCode = "D"
        Case PaymentPlan.ppCovenant.ppcCancelled
          GetCovenantStatusCode = "C"
        Case Else
          GetCovenantStatusCode = "N"
      End Select
    End Function

    Private Function SetPPType(ByRef pType As CDBEnvironment.ppType) As String
      Select Case pType
        Case CDBEnvironment.ppType.pptMember
          SetPPType = "M"
        Case CDBEnvironment.ppType.pptCovenant
          SetPPType = "C"
        Case CDBEnvironment.ppType.pptSO
          SetPPType = "B"
        Case CDBEnvironment.ppType.pptDD
          SetPPType = "D"
        Case CDBEnvironment.ppType.pptCCCA
          SetPPType = "A"
        Case CDBEnvironment.ppType.pptLoan
          SetPPType = "L"
        Case Else
          SetPPType = "O"
      End Select
    End Function

    Public Function GetAutomatedPaymentStatusCode(ByRef pValue As PaymentPlan.ppYesNoCancel) As String
      Select Case pValue
        Case PaymentPlan.ppYesNoCancel.ppYes
          GetAutomatedPaymentStatusCode = "Y"
        Case PaymentPlan.ppYesNoCancel.ppCancelled
          GetAutomatedPaymentStatusCode = "C"
        Case Else
          GetAutomatedPaymentStatusCode = "N"
      End Select
    End Function

    Private Sub SetRenewalData()
      If Len(mvClassFields(PaymentPlanFields.ofBalance).Value) > 0 And Len(mvClassFields(PaymentPlanFields.ofOrderTerm).Value) > 0 And Len(mvClassFields(PaymentPlanFields.ofOrderDate).Value) > 0 Then
        If Len(mvClassFields(PaymentPlanFields.ofRenewalDate).Value) = 0 Then 'ie Renewal date is blank
          If CDbl(mvClassFields(PaymentPlanFields.ofBalance).Value) = 0 Then
            'If mvClassFields(ofOrderTermUnits).Value = "M" Then
            If TermUnits = OrderTermUnits.otuMonthly Then
              mvClassFields(PaymentPlanFields.ofRenewalDate).Value = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, CDbl(mvClassFields(PaymentPlanFields.ofOrderTerm).Value), CDate(mvClassFields(PaymentPlanFields.ofOrderDate).Value)))
            ElseIf TermUnits = OrderTermUnits.otuWeekly Then
              mvClassFields(PaymentPlanFields.ofRenewalDate).Value = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.WeekOfYear, CDbl(mvClassFields(PaymentPlanFields.ofOrderTerm).Value), CDate(mvClassFields(PaymentPlanFields.ofOrderDate).Value)))
            Else
              'mvClassFields(ofRenewalDate).Value = DateAdd("yyyy", mvClassFields(ofOrderTerm).Value, mvClassFields(ofOrderDate).Value)
              mvClassFields(PaymentPlanFields.ofRenewalDate).Value = CDate(StartDate).AddYears(PaymentFrequencyFrequency * PaymentFrequencyInterval).ToString(CAREDateFormat)
            End If
            mvClassFields(PaymentPlanFields.ofRenewalPending).Bool = False
          Else
            mvClassFields(PaymentPlanFields.ofRenewalDate).Value = mvClassFields(PaymentPlanFields.ofOrderDate).Value
            mvClassFields(PaymentPlanFields.ofRenewalPending).Bool = True
          End If
        End If
        If CDbl(mvClassFields(PaymentPlanFields.ofRenewalAmount).Value) = 0 Then mvClassFields(PaymentPlanFields.ofRenewalAmount).Value = mvClassFields(PaymentPlanFields.ofBalance).Value
        If Len(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value) = 0 Then mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value = mvClassFields(PaymentPlanFields.ofOrderDate).Value
        'If mvClassFields(ofOrderTermUnits).Value = "M" Then
        If mvExisting Then
          If TermUnits = OrderTermUnits.otuMonthly Then
            If CDbl(mvClassFields(PaymentPlanFields.ofBalance).Value) = 0 AndAlso mvFirstCMT = False Then
              If mvClassFields(PaymentPlanFields.ofRenewalPending).Bool = True Then
                mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, CDbl(mvClassFields(PaymentPlanFields.ofOrderTerm).Value), CDate(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value)))
                mvClassFields(PaymentPlanFields.ofRenewalDate).Value = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, CDbl(mvClassFields(PaymentPlanFields.ofOrderTerm).Value), CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)))
              End If
              'BR# 4270: The line of code below was moved to frmTrader.SavePaymentPlan because whenever you changed the membership type of a
              'monthly membership that had a zero balance, the code below was setting the renewal amount to zero which in turn caused the
              'frequency amount to be set to zero.  This line of code existed here to set the renewal amount & frequency amount to zero when
              'you were manually amending a payment plan by changing the membership rate to one that had a price of zero.
              'mvClassFields(ofRenewalAmount).Value = 0
              mvClassFields(PaymentPlanFields.ofRenewalPending).Bool = False
            ElseIf ContinuousRenewals = False Then
              'Do not update RenewalPending if running ContinuousRenewals (causes RenewalDate to be changed!)
              mvClassFields(PaymentPlanFields.ofRenewalPending).Bool = True
            End If
          Else
            If (Balance = 0 And Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) <> 0) And RenewalPending = True AndAlso mvFirstCMT = False Then RenewalPending = False
            If (Balance <> Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue)) AndAlso (Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) = RenewalAmount) AndAlso Len(Amount) = 0 Then
              'Balance has changed and was same as Renewal Amount;
              'recalculate Renewal Amount in case a Rate Code has changed on a PPD line.
              'See BR's 3811, 10161 & 11197. TA 24/4/07
              'BR14008: Added WriteoffOldCost condition to not re-set renewal amount
              SetRenewalAmountFromPPD(False, False)
            End If
          End If
        End If
        If mvClassFields(PaymentPlanFields.ofOrderDate).Value = mvClassFields(PaymentPlanFields.ofRenewalDate).Value And Len(mvClassFields(PaymentPlanFields.ofFirstAmount).Value) > 0 And mvClassFields(PaymentPlanFields.ofRenewalAmount).SetValue <> mvClassFields(PaymentPlanFields.ofRenewalAmount).Value And mvClassFields(PaymentPlanFields.ofFirstAmount).DoubleValue = Val(mvClassFields(PaymentPlanFields.ofRenewalAmount).SetValue) Then
          mvClassFields(PaymentPlanFields.ofFirstAmount).Value = mvClassFields(PaymentPlanFields.ofRenewalAmount).Value
        End If
      End If
    End Sub

    Private Sub SetValid(ByRef pField As PaymentPlanFields)
      Dim vDetail As PaymentPlanDetail
      Dim vAmount As Double

      'Add code here to ensure all values are valid before saving
      If pField = PaymentPlanFields.ofAll And Len(mvClassFields(PaymentPlanFields.ofOrderNumber).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofOrderNumber).Value = CStr(mvEnv.GetControlNumber("SO"))
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofOrderType) And Len(mvClassFields(PaymentPlanFields.ofOrderType).Value) = 0 Then
        DefinePPType()
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofOrderDate) And Len(mvClassFields(PaymentPlanFields.ofOrderDate).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofOrderDate).Value = mvEnv.GetStartDate(GetPPType((mvClassFields(PaymentPlanFields.ofOrderType).Value)))
        If Len(mvClassFields(PaymentPlanFields.ofOrderDate).Value) = 0 Then mvClassFields(PaymentPlanFields.ofOrderDate).Value = TodaysDate()
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofOrderTerm) And Len(mvClassFields(PaymentPlanFields.ofOrderTerm).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofOrderTerm).Value = CStr(1)
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofRenewalDate) And Len(mvClassFields(PaymentPlanFields.ofRenewalDate).Value) = 0 Then
        SetRenewalData()
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofExpiryDate) And Len(mvClassFields(PaymentPlanFields.ofExpiryDate).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofExpiryDate).Value = CDate(StartDate).AddYears(99).ToString(CAREDateFormat)
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofFrequencyAmount) And Len(mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value) = 0 Then
        SetFrequencyAmount()
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofBalance) And Len(mvClassFields(PaymentPlanFields.ofBalance).Value) = 0 Then
        vAmount = 0
        For Each vDetail In mvDetails
          vAmount = vAmount + vDetail.Balance
        Next vDetail
        mvClassFields(PaymentPlanFields.ofBalance).Value = CStr(vAmount)
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofArrears) And Len(mvClassFields(PaymentPlanFields.ofArrears).Value) = 0 Then
        vAmount = 0
        For Each vDetail In mvDetails
          vAmount = vAmount + vDetail.Arrears
        Next vDetail
        mvClassFields(PaymentPlanFields.ofArrears).Value = CStr(vAmount)
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofInAdvance) And Len(mvClassFields(PaymentPlanFields.ofInAdvance).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofInAdvance).Value = CStr(0)
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofRenewalAmount) And Len(mvClassFields(PaymentPlanFields.ofRenewalAmount).Value) = 0 Then
        SetRenewalData()
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofNextPaymentDue) And Len(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value) = 0 Then
        SetRenewalData()
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofBankersOrder) And Len(mvClassFields(PaymentPlanFields.ofBankersOrder).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "N"
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofDirectDebit) And Len(mvClassFields(PaymentPlanFields.ofDirectDebit).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "N"
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofCovenant) And Len(mvClassFields(PaymentPlanFields.ofCovenant).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofCovenant).Value = "N"
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofCreditCard) And Len(mvClassFields(PaymentPlanFields.ofCreditCard).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofCreditCard).Value = "N"
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofDetailLines) And Len(mvClassFields(PaymentPlanFields.ofDetailLines).Value) = 0 Then
        vAmount = 0
        For Each vDetail In mvDetails
          vAmount = vAmount + vDetail.DetailNumber
        Next vDetail
        mvClassFields(PaymentPlanFields.ofDetailLines).Value = CStr(vAmount)
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofNextDetailLine) And Len(mvClassFields(PaymentPlanFields.ofNextDetailLine).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofNextDetailLine).Value = CStr(CDbl(mvClassFields(PaymentPlanFields.ofDetailLines).Value) + 1)
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofPaymentNumber) And Len(mvClassFields(PaymentPlanFields.ofPaymentNumber).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofPaymentNumber).Value = CStr(0)
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofNumberOfReminders) And Len(mvClassFields(PaymentPlanFields.ofNumberOfReminders).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofNumberOfReminders).Value = CStr(0)
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofRenewalPending) And Len(mvClassFields(PaymentPlanFields.ofRenewalPending).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofRenewalPending).Value = "N"
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofGiftMembership) And Len(mvClassFields(PaymentPlanFields.ofGiftMembership).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofGiftMembership).Value = "N"
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofOneYearGift) And Len(mvClassFields(PaymentPlanFields.ofOneYearGift).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofOneYearGift).Value = "N"
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofReprint) And Len(mvClassFields(PaymentPlanFields.ofReprint).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofReprint).Value = "N"
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofSalesContactNumber) And mvClassFields(PaymentPlanFields.ofSalesContactNumber).Value = "0" Then
        'SDT 11/2/2003 looks like this is a data fixing thing - cannot see any other reason for it
        mvClassFields(PaymentPlanFields.ofSalesContactNumber).Value = ""
      End If
      If pField = PaymentPlanFields.ofAll And Not mvAmendedValid Then
        mvClassFields(PaymentPlanFields.ofAmendedOn).Value = TodaysDate()
        mvClassFields(PaymentPlanFields.ofAmendedBy).Value = mvEnv.User.UserID
      End If

      If pField = PaymentPlanFields.ofAll And Len(mvClassFields(PaymentPlanFields.ofCreatedBy).Value) = 0 And mvExisting = False Then
        'For new record, set CreatedBy/On
        mvClassFields(PaymentPlanFields.ofCreatedBy).Value = mvEnv.User.UserID
        mvClassFields(PaymentPlanFields.ofCreatedOn).Value = TodaysDate()
      End If

      If (pField = PaymentPlanFields.ofAll Or pField = PaymentPlanFields.ofCancelOneYearGiftApm) And Len(mvClassFields(PaymentPlanFields.ofCancelOneYearGiftApm).Value) = 0 Then
        mvClassFields(PaymentPlanFields.ofCancelOneYearGiftApm).Value = "N"
      End If
    End Sub

    Private Sub ValidateValues()
      Dim vInValid As Boolean

      System.Diagnostics.Debug.Assert(mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue <> 0, "")
      If mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue = 0 Then vInValid = True

      System.Diagnostics.Debug.Assert(mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue <> 0, "")
      If mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue = 0 Then vInValid = True

      System.Diagnostics.Debug.Assert(Len(mvClassFields(PaymentPlanFields.ofPaymentMethod).Value) > 0, "")
      If Len(mvClassFields(PaymentPlanFields.ofPaymentMethod).Value) = 0 Then vInValid = True

      System.Diagnostics.Debug.Assert(Len(mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value) > 0, "")
      If Len(mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value) = 0 Then vInValid = True

      If vInValid Then
        Err.Raise(-1, "Payment Plan", "Missing Mandatory Attrs")
      Else
        If mvClassFields(PaymentPlanFields.ofBalance).DoubleValue < 0 Then
          RaiseError(DataAccessErrors.daePaymentPlanBalanceCannotBeNegative, PlanNumber.ToString)
        ElseIf mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue < 0 Then
          RaiseError(DataAccessErrors.daePaymentPlanRenewalAmountCannotBeNegative, PlanNumber.ToString)
        ElseIf mvDetails.Count() = 0 Then
          RaiseError(DataAccessErrors.daeNoPayPlanDetailLines)
        End If
      End If
    End Sub

    '-----------------------------------------------------------
    ' PUBLIC PROCEDURES FOLLOW
    '-----------------------------------------------------------
    Friend Sub AddDetails(ByVal pPPDCol As Collection)
      AddDetails(pPPDCol, False)
    End Sub
    Friend Sub AddDetails(ByVal pPPDCol As Collection, ByVal pRenumberDetailKeys As Boolean)
      'From Trader, set the Details Collection from the Trader Collection
      Dim vPPD As PaymentPlanDetail
      Dim vDetailNumber As Integer
      Dim vProductNumber As Integer

      mvDetails = New Collection 'Remove any existing Details
      mvDetails = pPPDCol

      For Each vPPD In mvDetails
        If vPPD.DetailNumber > vDetailNumber Then vDetailNumber = vPPD.DetailNumber
        If vPPD.UsesProductNumbers Then
          vProductNumber = GetProductNumber(cdbValueKnownConstants.cdbVKCYes, (vPPD.ProductCode), IntegerValue(vPPD.ProductNumber))
          If vProductNumber <> 0 And Val(vPPD.ProductNumber) <> vProductNumber Then
            vPPD.ProductNumber = CStr(vProductNumber)
            mvProductNumbers = If(mvProductNumbers.Length > 0, mvProductNumbers & ", " & CStr(vProductNumber), CStr(vProductNumber))
            mvUsesProductNumbers = True
          End If
        End If
      Next vPPD

      mvClassFields(PaymentPlanFields.ofDetailLines).IntegerValue = mvDetails.Count()
      mvClassFields(PaymentPlanFields.ofNextDetailLine).IntegerValue = vDetailNumber + 1

      If pRenumberDetailKeys Then ReNumberDetailKeys()

    End Sub

    Public Sub AddDetail(ByRef pDetailNumber As Integer, ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer, ByVal pProduct As String, ByVal pRate As String, ByVal pQuantity As Double, ByVal pGrossFixedAmount As String, ByVal pBalance As Double, ByVal pArrears As Double, ByVal pDespatchMethod As String, ByRef pProductNumber As Integer, ByVal pTimeStatus As String, ByRef pSubscription As cdbValueKnownConstants, ByVal pValidFrom As String, ByVal pValidTo As String, ByVal pUsesProductNumbers As cdbValueKnownConstants, Optional ByVal pDistributionCode As String = "", Optional ByVal pAmendedOn As String = "", Optional ByVal pAmendedBy As String = "", Optional ByVal pSourceCode As String = "", Optional ByVal pCreatedBy As String = "", Optional ByVal pCreatedOn As String = "", Optional ByVal pCommunicationNumber As Integer = 0, Optional ByVal pEffectiveDate As String = "", Optional ByVal pNetFixedAmount As String = "")
      Dim vPPDetails As PaymentPlanDetail
      Dim vProductNumber As Integer
      'AJH Remove optional parameter for Distribution Code when we write this proper like

      vPPDetails = New PaymentPlanDetail(Me)
      With vPPDetails
        .Init(mvEnv)
        If Len(mvClassFields(PaymentPlanFields.ofOrderNumber).Value) > 0 Then
          .PlanNumber = mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue
        End If
        .ContactNumber = pContactNumber
        .AddressNumber = pAddressNumber
        If pDetailNumber = 0 Then
          pDetailNumber = mvClassFields(PaymentPlanFields.ofNextDetailLine).IntegerValue
        End If
        .DetailNumber = pDetailNumber

        .InitNew(pProduct, pRate, pDistributionCode)

        .Quantity = pQuantity
        .Amount = pGrossFixedAmount
        .Balance = pBalance
        .Arrears = pArrears
        .DespatchMethod = pDespatchMethod
        If IsSubscription(pSubscription, pProduct) = cdbValueKnownConstants.cdbVKCYes Then
          .Subscription = True
          .SubscriptionValidFrom = pValidFrom
          .SubscriptionValidTo = pValidTo
        Else
          .Subscription = False
        End If
        vProductNumber = GetProductNumber(pUsesProductNumbers, pProduct, pProductNumber)
        If vProductNumber <> 0 Then
          .ProductNumber = CStr(vProductNumber)
          mvProductNumbers = If(mvProductNumbers.Length > 0, mvProductNumbers & ", " & CStr(vProductNumber), CStr(vProductNumber))
          mvUsesProductNumbers = True
        End If
        .TimeStatus = pTimeStatus
        .Source = pSourceCode
        .Amended = True
        If Len(pCreatedBy) > 0 And Len(pCreatedOn) > 0 Then .SetCreated(pCreatedOn, pCreatedBy)
        If Len(pAmendedOn) > 0 And Len(pAmendedBy) > 0 Then .SetAmended(pAmendedOn, pAmendedBy)
        If .Subscription And pCommunicationNumber > 0 Then
          .CommunicationNumber = CStr(pCommunicationNumber)
          If .Quantity > 1 Then .Quantity = 1 'subscriptions that are to be delivered electronically should only ever have a quantity of one
        End If
        .SetEffectiveDate(pEffectiveDate)
        If pNetFixedAmount.Length > 0 Then .NetFixedAmount = pNetFixedAmount
      End With
      mvDetails.Add(vPPDetails, GetNextDetailKey)
      If CDbl(mvClassFields(PaymentPlanFields.ofNextDetailLine).Value) <= pDetailNumber Then
        mvClassFields(PaymentPlanFields.ofNextDetailLine).Value = CStr(pDetailNumber + 1)
      End If
      mvClassFields(PaymentPlanFields.ofDetailLines).Value = CStr(mvDetails.Count())
    End Sub

    Public Sub AddDetailFromRecordSet(ByVal pRecordSet As CDBRecordSet, ByVal pRSType As PayPlanRecordSetTypes)
      With mvDetail
        If (pRSType And PayPlanRecordSetTypes.pprstDetailProduct) > 0 Then
          .InitFromRecordSet(mvEnv, pRecordSet, PaymentPlanDetail.PaymentPlanDetailRecordSetTypes.odrtMain Or PaymentPlanDetail.PaymentPlanDetailRecordSetTypes.odrtProduct)
        Else
          .InitFromRecordSet(mvEnv, pRecordSet, PaymentPlanDetail.PaymentPlanDetailRecordSetTypes.odrtMain)
        End If
        If .ProductNumber <> "" Then
          mvUsesProductNumbers = True
          mvProductNumbers = If(mvProductNumbers.Length > 0, mvProductNumbers & ", " & CStr(.ProductNumber), CStr(.ProductNumber))
        End If
      End With
      mvDetails.Add(mvDetail, GetNextDetailKey)
      mvDetail = Nothing
      mvDetail = New PaymentPlanDetail(Me)
      mvDetail.Init(mvEnv)
    End Sub

    Private Function GetNextDetailKey() As String
      GetNextDetailKey = CStr(mvDetails.Count() + 1)
    End Function

    Public Function GetDetailKeyFromLineNo(ByVal pLineNumber As Integer) As String
      Dim vPPDetail As PaymentPlanDetail
      Dim vCount As Integer
      Dim vFound As Boolean

      For Each vPPDetail In mvDetails
        vCount = vCount + 1
        If vPPDetail.DetailNumber = pLineNumber Then
          Return vCount.ToString
          vFound = True
          Exit For
        End If
      Next vPPDetail
      If Not vFound Then RaiseError(DataAccessErrors.daeCannotFindPaymentPlanDetailLine, CStr(pLineNumber), CStr(PlanNumber))
      Return ""
    End Function

    Private Sub ReNumberDetailKeys()
      Dim vPPDetails As New Collection
      Dim vPPDetail As PaymentPlanDetail
      Dim vCount As Integer
      'Following removal of a Detail Number, ensure keys for mvDetails
      'run sequentially

      For Each vPPDetail In mvDetails
        vCount = vCount + 1
        vPPDetails.Add(vPPDetail, CStr(vCount))
      Next vPPDetail
      mvDetails = vPPDetails
    End Sub

    Public Sub AddDirectDebit(ByRef pContactNumber As Integer, ByRef pAddressNumber As Integer, ByRef pBankAccount As String, ByRef pSource As String, ByRef pAmount As Double, ByRef pStartDate As String, ByRef pReference As String, ByRef pBankDetailsNumber As Integer, ByRef pSortCode As String, ByRef pAccountNumber As String, ByRef pAccountName As String, ByRef pEmandateDate As String, ByRef pFirstClaim As Boolean, Optional ByRef pDirectDebitNumber As Integer = 0, Optional ByRef pAmendedOn As String = "", Optional ByRef pAmendedBy As String = "", Optional ByVal pMandateType As String = "", Optional ByRef pCreatedBy As String = "", Optional ByRef pCreatedOn As String = "", Optional ByVal pContactType As Contact.ContactTypes = 0, Optional ByVal pIbanNumber As String = "", Optional ByVal pBicCode As String = "", Optional ByVal pDateSigned As String = "")

      mvDirectDebit = New DirectDebit
      With mvDirectDebit
        .InitForDataImport(mvEnv, pDirectDebitNumber)
        .Create(pBankDetailsNumber, pContactNumber, pAddressNumber, PlanNumber, pBankAccount, pSource, pAmount, pStartDate, pReference, pMandateType, pFirstClaim, pEmandateDate, pContactType, pCreatedOn, pCreatedBy, pDateSigned)
        If pBankDetailsNumber <= 0 Then
          'If IbanNumber is specified then use that else use sort code and account number
          If pIbanNumber.Length > 0 Then
            .ContactAccount.Create(pContactNumber, pSortCode, pAccountNumber, pAccountName, pIbanNumber:=pIbanNumber, pBicCode:=pBicCode)
          Else
            .ContactAccount.Create(pContactNumber, pSortCode, pAccountNumber, pAccountName)
          End If
        End If
        If Len(pAmendedOn) > 0 And Len(pAmendedBy) > 0 Then .SetAmended(pAmendedOn, pAmendedBy)
      End With
    End Sub

    Public Sub AddCovenant(ByRef pCovTerm As Integer, ByRef pCovFixed As Boolean, ByRef pCovStatus As String, ByRef pCovSigDate As String, ByRef pCovDepDeed As Boolean, ByRef pCovNet As Boolean, ByRef pCovAnnual As Boolean, ByRef pCovLastTaxClaim As String, ByRef pCovTaxClaimTo As String, ByRef pCovCreatedOn As String, Optional ByRef pCovCancReason As String = "", Optional ByRef pCovCancDate As String = "", Optional ByRef pCovCancBy As String = "", Optional ByRef pCovCancSource As String = "")

      mvCovenant = New Covenant
      With mvCovenant
        .Init(mvEnv)
        .PaymentPlanNumber = CInt(mvClassFields(PaymentPlanFields.ofOrderNumber).Value) 'Assume PayPlan has been saved
        .SetContact(CInt(mvClassFields(PaymentPlanFields.ofContactNumber).Value), CInt(mvClassFields(PaymentPlanFields.ofAddressNumber).Value))
        .SetFromPayPlan((mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue), (mvClassFields(PaymentPlanFields.ofOrderDate).Value), (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue), (mvClassFields(PaymentPlanFields.ofSource).Value))
        .SetImportDetails(pCovTerm, pCovFixed, pCovStatus, pCovSigDate, pCovDepDeed, pCovNet, pCovAnnual, pCovLastTaxClaim, pCovTaxClaimTo, pCovCreatedOn)
        If Len(pCovCancReason) > 0 Then
          .SetCancelled(pCovCancReason, pCovCancDate, pCovCancBy, pCovCancSource)
          mvClassFields(PaymentPlanFields.ofCovenant).Value = GetCovenantStatusCode(PaymentPlan.ppCovenant.ppcCancelled)
        ElseIf mvClassFields(PaymentPlanFields.ofCancellationReason).Value.Length > 0 Then
          .SetCancelled((mvClassFields(PaymentPlanFields.ofCancellationReason).Value), (mvClassFields(PaymentPlanFields.ofCancelledOn).Value), (mvClassFields(PaymentPlanFields.ofCancelledBy).Value), (mvClassFields(PaymentPlanFields.ofCancellationSource).Value))
          mvClassFields(PaymentPlanFields.ofCovenant).Value = GetCovenantStatusCode(PaymentPlan.ppCovenant.ppcCancelled)
        End If
      End With
    End Sub

    Public Sub AddCreditCardAuthority(ByRef pContactNumber As Integer, ByRef pAddressNumber As Integer, ByRef pBankAccount As String, ByRef pSource As String, ByRef pAmount As Double, ByRef pStartDate As String, ByRef pCreditCardDetailsNumber As Integer, ByRef pCreditCardNumber As String, ByRef pExpiryDate As String, ByRef pIssuer As String, ByRef pAccountName As String, ByRef pCreditCardType As String, Optional ByRef pCreditCardAuthorityNumber As Integer = 0, Optional ByRef pAmendedOn As String = "", Optional ByRef pAmendedBy As String = "", Optional ByRef pCreatedBy As String = "", Optional ByRef pCreatedOn As String = "", Optional ByVal pContactType As Contact.ContactTypes = 0, Optional ByRef pAuthorityType As String = "", Optional ByRef pIssueNumber As String = "")

      mvCreditCardAuthority = New CreditCardAuthority
      With mvCreditCardAuthority
        .InitForDataImport(mvEnv, pCreditCardAuthorityNumber)
        .Create(pCreditCardDetailsNumber, pContactNumber, pAddressNumber, PlanNumber, pBankAccount, pSource, pAmount, pStartDate, pAuthorityType, pContactType, pCreatedOn, pCreatedBy)
        If pCreditCardDetailsNumber <= 0 Then .ContactCreditCard.Create(pContactNumber, pCreditCardNumber, pExpiryDate, pIssuer, pAccountName, pCreditCardType, pIssueNumber)
        If Len(pAmendedOn) > 0 And Len(pAmendedBy) > 0 Then .SetAmended(pAmendedOn, pAmendedBy)
      End With
    End Sub

    Public Sub AddMember(ByRef pContactNumber As Integer, ByRef pAddressNumber As Integer, ByRef pMembershipTypeCode As String, Optional ByRef pMembershipType As MembershipType = Nothing, Optional ByRef pContactType As Contact.ContactTypes = 0)
      Dim vMember As New Member

      'Adds a Member to the CurrentMembers Collection and sets .Member to it
      With vMember
        .Init(mvEnv)
        .PaymentPlanNumber = mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue
        .PaymentPlanAutoPayMethod = mvAutoPayment
        .PaymentPlanRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
        .PaymentPlanRenewalPending = mvClassFields(PaymentPlanFields.ofRenewalPending).Bool
        .PaymentPlanTerm = mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue
        .PaymentPlantermUnits = TermUnits
        .PaymentPlanFixedRenewalCycle = FixedRenewalCycle
        .PaymentPlanContinuousRenewals = ContinuousRenewals
        .ContactNumber = pContactNumber
        .AddressNumber = pAddressNumber
        If pContactType > 0 Then .ContactType = pContactType
        .SetMembershipType(pMembershipTypeCode, pMembershipType)
        .VotingRights = .MembershipType.VotingRights
        .PaymentPlanBalance = Balance
      End With
      mvCurrentMembers.Add(vMember)
      mvMember = vMember
    End Sub

    Public Sub ChangePayer(ByVal pNewContactNumber As Integer, ByVal pNewAddressNumber As Integer, ByVal pChangeDetailsPayer As Boolean, ByVal pChangeMemGifted As PaymentPlan.ChangePayerGiftMembershipTypes, ByVal pNewContactType As Contact.ContactTypes)
      Dim vEntitlements As List(Of MembershipEntitlement)
      Dim vEntitlement As MembershipEntitlement
      Dim vPPD As PaymentPlanDetail
      Dim vSubscription As New Subscription
      Dim vMembershipType As MembershipType
      Dim vDate As Date

      If pNewContactNumber <> ContactNumber Or pNewAddressNumber <> AddressNumber Then
        If (PlanType = CDBEnvironment.ppType.pptMember And GiftMembership = True And pChangeMemGifted <> PaymentPlan.ChangePayerGiftMembershipTypes.cpgmtNone) Or (PlanType = CDBEnvironment.ppType.pptOther And pChangeDetailsPayer = True) Then
          InitPaymentPlanDetails(mvEnv, PlanNumber)
          LoadSubscriptions()
        End If

        If PlanType = CDBEnvironment.ppType.pptMember And pChangeMemGifted <> PaymentPlan.ChangePayerGiftMembershipTypes.cpgmtNone Then
          LoadMembers()

          '      Set vEntitlements = Member.MembershipType.Entitlements
          vMembershipType = Member.MembershipType
          Select Case vMembershipType.PaymentTerm
            Case MembershipType.MembershipTypeTerms.mtfMonthlyTerm
              vDate = DateAdd(Microsoft.VisualBasic.DateInterval.Month, Term, CDate(Member.Joined))
            Case MembershipType.MembershipTypeTerms.mtfWeeklyTerm
              vDate = DateAdd(Microsoft.VisualBasic.DateInterval.WeekOfYear, Term, CDate(Member.Joined))
            Case Else
              vDate = CDate(Member.Joined).AddYears(Term)
          End Select
          If CDate(vDate) >= CDate(RenewalDate) Then
            'FirstPeriod
            vEntitlements = vMembershipType.Entitlements
          Else
            'SubsequentPeriod
            vEntitlements = vMembershipType.Entitlements("", False)
          End If

          For Each vPPD In Details
            With vPPD
              If .DetailNumber = 1 Then
                .ContactNumber = pNewContactNumber
                .AddressNumber = pNewAddressNumber
                .SaveChanges()
                If .Subscription Then
                  For Each vSubscription In mvCurrentSubscriptions
                    If vSubscription.Product = .ProductCode And vSubscription.ContactNumber = ContactNumber And vSubscription.AddressNumber = AddressNumber Then
                      vSubscription.ContactNumber = pNewContactNumber
                      vSubscription.AddressNumber = pNewAddressNumber
                      vSubscription.SaveChanges()
                    End If
                  Next vSubscription
                End If
              Else
                'Re-assign all Payer Membership Entitlements
                For Each vEntitlement In vEntitlements
                  If vEntitlement.MemberEntitlement = False And vEntitlement.ProductCode = .ProductCode And vEntitlement.RateCode = .RateCode Then
                    .ContactNumber = pNewContactNumber
                    .AddressNumber = pNewAddressNumber
                    .SaveChanges()
                    If .Subscription Then
                      For Each vSubscription In mvCurrentSubscriptions
                        If vSubscription.Product = .ProductCode And vSubscription.ContactNumber = ContactNumber And vSubscription.AddressNumber = AddressNumber Then
                          vSubscription.ContactNumber = pNewContactNumber
                          vSubscription.AddressNumber = pNewAddressNumber
                          vSubscription.SaveChanges()
                        End If
                      Next vSubscription
                    End If
                  End If
                Next vEntitlement
              End If
            End With
          Next vPPD
        End If

        If PlanType = CDBEnvironment.ppType.pptOther And pChangeDetailsPayer = True Then
          For Each vPPD In Details
            With vPPD
              .ContactNumber = pNewContactNumber
              .AddressNumber = pNewAddressNumber
              .SaveChanges()
              If .Subscription Then
                For Each vSubscription In mvCurrentSubscriptions
                  If vSubscription.Product = .ProductCode And vSubscription.ContactNumber = ContactNumber And vSubscription.AddressNumber = AddressNumber Then
                    vSubscription.ContactNumber = pNewContactNumber
                    vSubscription.AddressNumber = pNewAddressNumber
                    vSubscription.SaveChanges(mvEnv.User.UserID)
                  End If
                Next vSubscription
              End If
            End With
          Next vPPD
        End If

        If PlanType = CDBEnvironment.ppType.pptLoan Then
          'If the PPD lines are for the same Contact & Address as the Loan then update them, otherwise leave them as they are
          For Each vPPD In Details
            With vPPD
              If .ContactNumber = ContactNumber AndAlso .AddressNumber = AddressNumber Then
                .ContactNumber = pNewContactNumber
                .AddressNumber = pNewAddressNumber
              End If
            End With
          Next
        End If

        'Change Pay Plan Payer
        If PlanType = CDBEnvironment.ppType.pptMember Then
          mvClassFields(PaymentPlanFields.ofGiftMembership).Bool = (pChangeMemGifted = PaymentPlan.ChangePayerGiftMembershipTypes.cpgmtGift Or pChangeMemGifted = PaymentPlan.ChangePayerGiftMembershipTypes.cpgmtOneYearGift)
          If mvClassFields(PaymentPlanFields.ofGiftMembership).Bool Then
            mvClassFields(PaymentPlanFields.ofOneYearGift).Bool = pChangeMemGifted = PaymentPlan.ChangePayerGiftMembershipTypes.cpgmtOneYearGift
          Else
            mvClassFields(PaymentPlanFields.ofOneYearGift).Bool = False
          End If
          If ContactNumber <> pNewContactNumber Then
            Member.AddSponsorActivity(Me, pNewContactNumber, pNewContactType, False, True)
          End If
        End If
        ContactNumber = pNewContactNumber
        AddressNumber = pNewAddressNumber
        Save()
      End If
    End Sub

    Public Sub AddStandingOrder(ByRef pContactNumber As Integer, ByRef pAddressNumber As Integer, ByRef pBankAccount As String, ByRef pSource As String, ByRef pAmount As Double, ByRef pStartDate As String, ByRef pReference As String, ByRef pBankDetailsNumber As Integer, ByRef pSortCode As String, ByRef pAccountNumber As String, ByRef pAccountName As String, Optional ByRef pStandingOrderNumber As Integer = 0, Optional ByRef pAmendedOn As String = "", Optional ByRef pAmendedBy As String = "", Optional ByRef pCreatedBy As String = "", Optional ByRef pCreatedOn As String = "", Optional ByVal pContactType As Contact.ContactTypes = 0, Optional ByRef pSOType As String = "", Optional ByRef pIbanNumber As String = "", Optional ByRef pBicCode As String = "")

      mvStandingOrder = New StandingOrder
      With mvStandingOrder
        .InitForDataImport(mvEnv, pStandingOrderNumber)
        .Create(pBankDetailsNumber, pContactNumber, pAddressNumber, PlanNumber, pBankAccount, pSource, pAmount, pStartDate, pReference, pSOType, pContactType, pCreatedOn, pCreatedBy)
        If pBankDetailsNumber <= 0 Then
          If pIbanNumber.Length > 0 Then
            .ContactAccount.Create(pContactNumber, pSortCode, pAccountNumber, pAccountName:=pAccountName, pIbanNumber:=pIbanNumber, pBicCode:=pBicCode)
          Else
            .ContactAccount.Create(pContactNumber, pSortCode, pAccountNumber, pAccountName)
          End If
        End If

        If Len(pAmendedOn) > 0 And Len(pAmendedBy) > 0 Then .SetAmended(pAmendedOn, pAmendedBy)
      End With
    End Sub

    Public Function AdjustAmountFromBankTransaction(ByRef pAmount As Double, Optional ByRef pAmendedBy As String = "", Optional ByRef pAudit As Boolean = False) As Boolean
      Dim vPPD As PaymentPlanDetail
      Dim vDifference As Double
      Dim vAdjustBalance As Boolean
      Dim vAmount As Double

      'The amount on the bank transaction different to the frequncy amount on the order
      'and this is a B type (Standing Order) Payment plan
      'Adjust all the amounts accordingly

      vDifference = pAmount - FrequencyAmount
      RenewalAmount = pAmount
      mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CStr(pAmount)
      Amount = pAmount.ToString
      'Only adjust the balance if it is non zero (we have had at least one payment)
      If Balance <> 0 Then
        Balance = pAmount
        vAdjustBalance = True
      End If
      InitPaymentPlanDetails(mvEnv, PlanNumber)
      If mvDetails.Count() > 0 Then
        For Each vPPD In mvDetails
          If vDifference > 0 Then 'Got more money than expected
            vPPD.Amount = CStr(CDbl(vPPD.Amount) + vDifference) 'Just adjust the first line
            If vAdjustBalance Then vPPD.Balance = vPPD.Balance + vDifference
            vDifference = 0
          Else 'Got less money than expected
            vAmount = Val(vPPD.Amount)
            If vAdjustBalance And (vPPD.Balance < Val(vPPD.Amount)) Then vAmount = vPPD.Balance

            If vAmount + vDifference < 0 Then 'Reduce amount on each line until
              vDifference = vDifference + vAmount 'We have used up the difference
              vPPD.Amount = CStr(Val(vPPD.Amount) - vAmount) 'Never make a line less than zero
              If vAdjustBalance Then vPPD.Balance = vPPD.Balance - vAmount
            Else
              vPPD.Amount = CStr(Val(vPPD.Amount) + vDifference) 'Can reduce this line to use up the rest
              If vAdjustBalance Then vPPD.Balance = vPPD.Balance + vDifference
              vDifference = 0
            End If
          End If
          vPPD.SaveChanges(pAmendedBy, pAudit)
          If vDifference = 0 Then Exit For
        Next vPPD
        If vDifference = 0 Then AdjustAmountFromBankTransaction = True
      End If
    End Function

    Public Sub CalculateBalance(ByRef pCurrentFuturePrice As String, ByRef pUpdate As Boolean, ByVal pReCreateOPS As Boolean)
      CalculateBalance(pCurrentFuturePrice, pUpdate, pReCreateOPS, False)
    End Sub

    Public Sub CalculateBalance(ByRef pCurrentFuturePrice As String, ByRef pUpdate As Boolean, ByVal pReCreateOPS As Boolean, ByVal pSkipPayment As Boolean)
      Dim vPPD As PaymentPlanDetail
      Dim vSum As Double 'sum of order_details.balance
      Dim vRenew As Double 'renewal amount of details line
      Dim vOldStart As String

      vSum = 0
      Dim vVATRate As VatRate
      For Each vPPD In mvDetails
        vVATRate = mvEnv.VATRate(vPPD.Product.ProductVatCategory, Payer.VATCategory)
        If vPPD.NetFixedAmount.Length > 0 Then
          'Fixed Amount excluding VAT
          'Need to calculate the VAT and then re-set the (Gross) Fixed Amount - this can only be set for VAT-Exclusive Rates
          vRenew = FixTwoPlaces(DoubleValue(vPPD.NetFixedAmount) + vVATRate.CalculateVATAmount(DoubleValue(vPPD.NetFixedAmount), True, RenewalDate))
          vPPD.SetAmount(vRenew.ToString)
        ElseIf vPPD.Amount.Length > 0 Then
          'Fixed Amount including VAT
          vRenew = CDbl(vPPD.Amount)
        Else
          Select Case pCurrentFuturePrice
            Case "C"
              vRenew = vPPD.RenewalPrice(False, vVATRate, DateValue(RenewalDate))
            Case "F"
              vRenew = vPPD.RenewalPrice(True, vVATRate, DateValue(RenewalDate))
            Case Else
              vRenew = vPPD.Price(CDate(RenewalDate), vVATRate, 0, True)
          End Select
        End If

        If vPPD.Amount.Length > 0 Then
          'BR15941: Where fixed Amount set, set PaymentPlanDetailPricing values from this
          vPPD.ProductRate.PaymentPlanDetailPricing.CalculatePricing(vPPD.UnitPrice, DoubleValue(vPPD.Amount), False, RenewalDate, vVATRate, False)
        End If

        If Amount <> "" And (vSum + vRenew) > Val(Amount) Then
          vRenew = Val(Amount) - vSum
        End If
        vPPD.Arrears = vPPD.Balance
        vPPD.Balance = vPPD.Balance + vRenew
        vSum = vSum + vRenew

        If pUpdate Then
          If mvEnv.GetConfig("me_branch_income_period") = "LAST" And mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlBranchProduct) = vPPD.ProductCode Then
            If mvCurrentMembers.Count() > 0 Then
              InsertBranchIncome(CType(mvCurrentMembers.Item(1), Member).Branch, (vPPD.CurrentPrice))
            End If
          End If
        End If
        vPPD.SetModifierAndPriceData(vPPD.ProductRate.PaymentPlanDetailPricing)
      Next vPPD
      If Amount <> "" Then vSum = Val(Amount)
      RenewalAmount = vSum
      mvClassFields(PaymentPlanFields.ofArrears).Value = CStr(Balance)
      mvClassFields(PaymentPlanFields.ofBalance).Value = CStr(Balance + vSum)
      mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CStr(CalcFrequencyAmount(RenewalAmount, PaymentFrequencyFrequency))

      'Must now create the OrderPaymentSchedule records
      'Set start date to renewal date so that scheduleds created from renewal date
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments) = True And pReCreateOPS = True Then
        vOldStart = mvClassFields(PaymentPlanFields.ofOrderDate).Value
        mvClassFields(PaymentPlanFields.ofOrderDate).Value = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
        RegenerateScheduledPayments(If(pSkipPayment, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrSkippedPayment,
                                                     OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrBatchPosting), mvClassFields(PaymentPlanFields.ofRenewalDate).Value)
        mvClassFields(PaymentPlanFields.ofOrderDate).Value = vOldStart
      End If

    End Sub

    Private Sub CalculateBalanceFromDetails()
      Dim vBalance As Double = 0
      For Each vPPD As PaymentPlanDetail In mvDetails
        vBalance += vPPD.Balance
      Next vPPD
      mvClassFields(PaymentPlanFields.ofBalance).Value = CStr(vBalance)
      mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CStr(CalcFrequencyAmount(RenewalAmount, PaymentFrequencyFrequency))
    End Sub

    Private Function CalcFrequencyAmount(ByRef pAmount As Double, ByRef pFrequency As Integer) As Double
      Dim vAmount As Double
      Dim vFixAmountTwoPlaces As Double
      Dim vFixAmountThreePlaces As Double

      'Changed this to compare figure correct to two places to figure correct to three places
      'This is to distinguish genuine rounding problems from VB stored double problems
      vAmount = pAmount / pFrequency
      vFixAmountTwoPlaces = Int(vAmount * 100) / 100
      vFixAmountThreePlaces = Int(vAmount * 1000) / 1000
      'If vAmount > vFixAmount Then vFixAmount = vFixAmount + 0.01
      If vFixAmountThreePlaces > vFixAmountTwoPlaces Then vFixAmountTwoPlaces = vFixAmountTwoPlaces + 0.01
      CalcFrequencyAmount = vFixAmountTwoPlaces
    End Function

    Public Sub InsertBranchIncome(ByRef pBranchCode As String, ByRef pAmountDue As Double, Optional ByVal pMembershipType As String = "", Optional ByVal pCreateOrCMT As Boolean = False, Optional ByVal pRegionNumber As Integer = 0)
      Dim vInsertFields As New CDBFields
      Dim vRegionNumber As Integer

      With vInsertFields
        'Set default values
        .Add("branch_code", CDBField.FieldTypes.cftCharacter, pBranchCode)
        If Len(pMembershipType) > 0 Then
          .Add("membership_type", CDBField.FieldTypes.cftCharacter, pMembershipType)
        Else
          .Add("membership_type", CDBField.FieldTypes.cftCharacter, MembershipTypeCode)
        End If
        If pCreateOrCMT Then
          .Add("amount", CDBField.FieldTypes.cftNumeric, Balance)
          .Add("payment_date", CDBField.FieldTypes.cftDate, TodaysDate())
        Else
          .Add("amount", CDBField.FieldTypes.cftNumeric, RenewalAmount)
          .Add("payment_date", CDBField.FieldTypes.cftDate, RenewalDate)
        End If
        .Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
        .Add("amount_due", CDBField.FieldTypes.cftNumeric, pAmountDue)
        .Add("amount_outstanding", CDBField.FieldTypes.cftNumeric, pAmountDue)
        .Add("renewal_date", CDBField.FieldTypes.cftDate, RenewalDate)
        If pRegionNumber > 0 Then
          vRegionNumber = pRegionNumber
        Else
          vRegionNumber = mvEnv.GetRegionNumber(pBranchCode)
        End If
        If vRegionNumber > 0 Then .Add("region_number", CDBField.FieldTypes.cftLong, vRegionNumber)
      End With
      mvEnv.Connection.InsertRecord("branch_income", vInsertFields)
    End Sub

    Public Sub AddNewMember(ByRef pContact As Contact, ByRef pMembershipType As MembershipType, ByRef pSource As String, ByRef pBranch As String, ByRef pJoined As String, ByRef pApplied As String, ByRef pBranchMember As Boolean, Optional ByVal pAgeOverride As String = "", Optional ByRef pDistributionCode As String = "", Optional ByVal pCancellationReason As String = "", Optional ByVal pCancellationSource As String = "", Optional ByVal pGiftMembership As Boolean = False, Optional ByVal pOneYearGift As Boolean = False, Optional ByVal pPackToDonor As Boolean = False, Optional ByVal pGiftCardStatus As NewOrder.GiftCardStatusTypes = NewOrder.GiftCardStatusTypes.gcstNone, Optional ByRef pWarningMessage As String = "")
      Dim vCanAddMainMember As Boolean
      Dim vCanAddAssocMember As Boolean
      Dim vMember As Member
      Dim vJuniorAge As Integer
      Dim vPrice As Double
      Dim vPaymentPlanDetails As PaymentPlanDetail
      Dim vEntitlement As MembershipEntitlement
      Dim vMemberEntitlements As List(Of MembershipEntitlement)
      Dim vSubscription As Subscription
      Dim vBalanceEqRenewal As Boolean
      Dim vFrequency As Integer
      Dim vExistingMember As Member = Nothing
      Dim vJointContactNo As Integer
      Dim vAssocMembers As Integer
      Dim vMainMemberType As MembershipType
      Dim vPayerChanged As Boolean
      Dim vODUpdateFields As New CDBFields
      Dim vODWhereFields As New CDBFields
      Dim vSubsWhereFields As New CDBFields
      Dim vUnprocessedPayments As Boolean
      Dim vEntitlementValid As Boolean
      Dim vAdult As Boolean
      Dim vCanAdd As Boolean
      Dim vCanReplace As Boolean
      Dim vCancellationReasonDesc As String = ""
      Dim vCancellationStatus As String = ""
      Dim vEnclosure As Enclosure
      Dim vSource As Source

      'Determine whether operation can be done
      If Len(pCancellationReason) > 0 Then
        vCanReplace = CanReplaceMember()
        If vCanReplace Then vCanAddMainMember = True
      Else
        vCanAdd = CanAddNewMember(vCanAddMainMember, vCanAddAssocMember)
      End If
      If vCanAdd Or vCanReplace Then
        'Check if contact can be added as a member
        For Each vMember In mvCurrentMembers
          If vMember.ContactNumber = pContact.ContactNumber Then RaiseError(DataAccessErrors.daeAlreadyMember)
          If vMember.MembershipTypeCode = MembershipTypeCode And vExistingMember Is Nothing Then vExistingMember = vMember
        Next vMember
        If pMembershipType.MembershipTypeCode = MembershipTypeCode Then
          'New Main Member
          If Not vCanAddMainMember Then RaiseError(DataAccessErrors.daeCannotAddMember)
        Else
          'New Associate
          If Not vCanAddAssocMember Then RaiseError(DataAccessErrors.daeCannotAddMember)
          If pMembershipType.MembershipTypeCode <> MembershipType.AssociateMembershipType Then RaiseError(DataAccessErrors.daeInvalidParameter, "MembershipType")
        End If
        If pMembershipType.MembershipLevel = "J" Then
          vJuniorAge = pMembershipType.MaxJuniorAge
          If vJuniorAge > 0 Then
            If pContact.DateOfBirth.Length > 0 Then
              If Len(pAgeOverride) = 0 Then
                If CDate(pContact.DateOfBirth) < Today.Date.AddYears(-vJuniorAge) Then RaiseError(DataAccessErrors.daeContactNotJunior)
              End If
            Else
              RaiseError(DataAccessErrors.daeNoContactDateOfBirth)
            End If
          End If
        End If
        vUnprocessedPayments = (mvEnv.Connection.GetCount("order_payment_schedule", Nothing, "order_number = " & PlanNumber & " AND scheduled_payment_status = 'U'") > 0)
        vBalanceEqRenewal = (Balance = RenewalAmount)
        If mvDetails.Count() = 0 Then InitPaymentPlanDetails(mvEnv, PlanNumber)

        '    Set vMemberEntitlements = pMembershipType.Entitlements
        If DetermineMembershipPeriod() = MembershipPeriodTypes.mptFirstPeriod Then
          vMemberEntitlements = pMembershipType.Entitlements
        Else
          vMemberEntitlements = pMembershipType.Entitlements("", False)
        End If

        mvEnv.Connection.StartTransaction()

        If vCanReplace Then
          'Cancel the original member
          SetDetailLineTypes((pMembershipType.MembershipTypeCode), (pMembershipType.AssociateMembershipType))
          mvEnv.GetCancellationInfo(pCancellationReason, vCancellationStatus, vCancellationReasonDesc)
          CancelMember((vExistingMember.MembershipNumber), PaymentPlanCancellationTypes.pctMember, pCancellationReason, vCancellationStatus, vCancellationReasonDesc, mvEnv.User.UserID, pCancellationSource, TodaysDate(), False, True)
        End If

        AddMember((pContact.ContactNumber), pContact.Address.AddressNumber, (pMembershipType.MembershipTypeCode), pMembershipType, (pContact.ContactType))
        With mvMember
          .Source = pSource
          .Branch = pBranch
          .Joined = pJoined
          .Applied = pApplied
          If Len(pAgeOverride) > 0 Then .AgeOverride = pAgeOverride
          If pBranchMember Then .BranchMember = "Y"
          .ContactDateOfBirth = pContact.DateOfBirth
          .Save("", False, 0, 0, pWarningMessage)
        End With
        vPaymentPlanDetails = CType(mvDetails.Item(1), PaymentPlanDetail) 'Update first detail line

        'Now update the payment plan and details
        If pMembershipType.MembershipTypeCode = MembershipTypeCode Then
          Dim vVATRate As VatRate = mvEnv.VATRate(vPaymentPlanDetails.Product.ProductVatCategory, Payer.VATCategory)
          With vPaymentPlanDetails
            If vCanReplace And MembershipType.MembersPerOrder = 1 Then
              'Assume that we are replacing a member rather than adding a new member to an existing membership.
              'The CanAddMember method would return vCanAddMainMember as False when MembershipType.MembersPerOrder = 1
              If pGiftMembership Then
                If Not mvClassFields.Item(PaymentPlanFields.ofGiftMembership).Bool Then
                  .ContactNumber = mvClassFields.Item(PaymentPlanFields.ofContactNumber).IntegerValue
                  .AddressNumber = mvClassFields.Item(PaymentPlanFields.ofAddressNumber).IntegerValue
                End If
              Else
                .ContactNumber = pContact.ContactNumber
                .AddressNumber = pContact.Address.AddressNumber
              End If
            ElseIf pMembershipType.ChargeIndividualMembers = "N" Then
              If MembershipType.MembersPerOrder = 2 Then
                'Handle creation of joint contact if required
                vJointContactNo = vExistingMember.Contact.ProcessJointContact(pContact, pSource)
                If Not GiftMembership Then
                  'set order details line and order to the joint contact number
                  vPayerChanged = True
                  .ContactNumber = vJointContactNo
                  ContactNumber = vJointContactNo
                End If
              Else
                .Quantity = .Quantity + 1
                If StandingOrderStatus <> PaymentPlan.ppYesNoCancel.ppYes And (DirectDebitStatus <> PaymentPlan.ppYesNoCancel.ppYes Or mvEnv.GetConfigOption("me_new_member_charge_dd")) Then
                  .Balance = .Balance + .Price(Date.Parse(pJoined), vVATRate, 1)    'Need to calculate the price based upon a quantity of 1 as we are increasing by the cost of 1 member
                  Balance = Balance + .Price(Date.Parse(pJoined), vVATRate, 1)      'Need to calculate the price based upon a quantity of 1 as we are increasing by the cost of 1 member
                End If
              End If
              .SaveChanges()
            ElseIf pMembershipType.ChargeIndividualMembers = "Y" Then
              'charge individual members i.e. insert a record
              Dim vSub As cdbValueKnownConstants = cdbValueKnownConstants.cdbVKCNo
              If .Subscription Then vSub = cdbValueKnownConstants.cdbVKCYes
              Dim vLinePrice As Double = .Price(Date.Parse(pJoined), vVATRate)
              AddDetail(0, (pContact.ContactNumber), pContact.Address.AddressNumber, .ProductCode, .RateCode, 1, "", vLinePrice, 0, .DespatchMethod, 0, "C", vSub, CStr(TodaysDate()), CStr(TodaysDate()), cdbValueKnownConstants.cdbVKCNo, pDistributionCode, "", "", pSource)
              Balance = Balance + vLinePrice
              .SaveChanges()
            End If
          End With
        Else
          vMainMemberType = MembershipType
          For Each vMember In mvCurrentMembers
            If vMember.MembershipTypeCode = vMainMemberType.AssociateMembershipType Then
              vAssocMembers = vAssocMembers + 1
            End If
          Next vMember
          'Use greater than cos we have just added the new member into the collection
          If vAssocMembers > vMainMemberType.MaxFreeAssociates Then
            'New associate is not free
            With vPaymentPlanDetails
              vPrice = pMembershipType.ProductRate.Price(Date.Today.Date, pContact.ContactNumber)
              If StandingOrderStatus <> PaymentPlan.ppYesNoCancel.ppYes And (DirectDebitStatus <> PaymentPlan.ppYesNoCancel.ppYes Or mvEnv.GetConfigOption("me_new_member_charge_dd")) Then
                Balance = Balance + vPrice
              Else
                vPrice = 0
              End If
              Dim vSub As cdbValueKnownConstants = cdbValueKnownConstants.cdbVKCNo
              If pMembershipType.Subscription Then vSub = cdbValueKnownConstants.cdbVKCYes
              AddDetail(0, (pContact.ContactNumber), pContact.Address.AddressNumber, (pMembershipType.FirstPeriodsProduct), (pMembershipType.FirstPeriodsRate), 1, "", vPrice, 0, (pMembershipType.DespatchMethod), 0, "C", vSub, CStr(TodaysDate()), CStr(TodaysDate()), cdbValueKnownConstants.cdbVKCNo, pDistributionCode, "", "", pSource)
            End With
          End If
        End If

        If vCanReplace Then
          'Remove the original member's entitlements
          RemoveLines(PaymentPlanDetail.PaymentPlanDetailTypes.ppdltEntitlement, pMembershipType, pCancellationReason, False)
          'Loop thru the payment plan details updating the contact & address numbers from the original member to the new member
          For Each vPaymentPlanDetails In mvDetails
            With vPaymentPlanDetails
              If .ContactNumber = vExistingMember.ContactNumber And .DetailType <> PaymentPlanDetail.PaymentPlanDetailTypes.ppdltCharge Then
                .ContactNumber = pContact.ContactNumber
                .AddressNumber = pContact.Address.AddressNumber
              End If
            End With
          Next vPaymentPlanDetails
        End If

        'Add newdetail line for each new entitlement
        vODWhereFields.Add("order_number", mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue, CDBField.FieldWhereOperators.fwoEqual)
        vODWhereFields.Add("contact_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofContactNumber).SetValue, CDBField.FieldWhereOperators.fwoEqual)
        vODWhereFields.Add("product", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoEqual)
        vODWhereFields.Add("rate", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoEqual)

        vSubsWhereFields.Add("order_number", mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue, CDBField.FieldWhereOperators.fwoEqual)
        vSubsWhereFields.Add("contact_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofContactNumber).SetValue, CDBField.FieldWhereOperators.fwoEqual)
        vSubsWhereFields.Add("product", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoEqual)

        vODUpdateFields.Add("contact_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofContactNumber).Value)

        For Each vEntitlement In vMemberEntitlements
          If vEntitlement.MemberEntitlement Or (vEntitlement.PayerEntitlement And vCanReplace) Then
            vEntitlementValid = False
            Select Case pMembershipType.MembershipLevel
              Case "A"
                vEntitlementValid = vEntitlement.MembershipEntitlementType <> MembershipEntitlement.MembershipEntitlementTypes.metJuniorMember
              Case "J"
                vEntitlementValid = vEntitlement.MembershipEntitlementType <> MembershipEntitlement.MembershipEntitlementTypes.metAdultMember
              Case "B"
                Select Case vEntitlement.MembershipEntitlementType
                  Case MembershipEntitlement.MembershipEntitlementTypes.metAdultMember, MembershipEntitlement.MembershipEntitlementTypes.metJuniorMember
                    With mvMember
                      If Val(.AgeOverride) > 0 And Val(.AgeOverride) < mvEnv.JuniorAgeLimit Then
                        vAdult = False 'Junior due to Age Override
                      Else
                        If IsDate(.ContactDateOfBirth) Then
                          If CDate(.ContactDateOfBirth).AddYears(mvEnv.JuniorAgeLimit) < CDate(.Joined) Then
                            vAdult = True 'DOB over limit for Juniors
                          Else
                            vAdult = False 'DOB makes them a Junior
                          End If
                        Else
                          vAdult = True 'No DOB so have to assume adult
                        End If
                      End If
                      If vAdult Then
                        If vEntitlement.MembershipEntitlementType = MembershipEntitlement.MembershipEntitlementTypes.metAdultMember Then vEntitlementValid = True
                      Else
                        If vEntitlement.MembershipEntitlementType = MembershipEntitlement.MembershipEntitlementTypes.metJuniorMember Then vEntitlementValid = True
                      End If
                    End With
                  Case Else
                    vEntitlementValid = True
                End Select
            End Select
            If vEntitlementValid Then
              Dim vEntitlementContact As Integer
              If vEntitlement.PayerEntitlement And vCanReplace Then
                vEntitlementContact = ContactNumber
              Else
                vEntitlementContact = pContact.ContactNumber
              End If
              vPrice = (vEntitlement.ProductRate.Price(vEntitlementContact) * vEntitlement.Quantity)
              If StandingOrderStatus <> PaymentPlan.ppYesNoCancel.ppYes And (DirectDebitStatus <> PaymentPlan.ppYesNoCancel.ppYes Or mvEnv.GetConfigOption("me_new_member_charge_dd")) Then
                Balance = Balance + vPrice
              Else
                vPrice = 0
              End If
              Dim vSub As cdbValueKnownConstants = cdbValueKnownConstants.cdbVKCNo
              If vEntitlement.Subscription Then vSub = cdbValueKnownConstants.cdbVKCYes
              If vEntitlement.PayerEntitlement And vCanReplace Then
                AddDetail(0, mvClassFields.Item(PaymentPlanFields.ofContactNumber).IntegerValue, mvClassFields.Item(PaymentPlanFields.ofAddressNumber).IntegerValue, vEntitlement.ProductCode, vEntitlement.RateCode, vEntitlement.Quantity, "", vPrice, 0, vEntitlement.DespatchMethod, 0, "C", vSub, TodaysDate(), TodaysDate(), cdbValueKnownConstants.cdbVKCNo, pDistributionCode, "", "", pSource)
              Else
                AddDetail(0, pContact.ContactNumber, pContact.Address.AddressNumber, vEntitlement.ProductCode, vEntitlement.RateCode, vEntitlement.Quantity, "", vPrice, 0, vEntitlement.DespatchMethod, 0, "C", vSub, TodaysDate(), TodaysDate(), cdbValueKnownConstants.cdbVKCNo, pDistributionCode, "", "", pSource)
              End If
            End If
          ElseIf vEntitlement.PayerEntitlement = True And vPayerChanged = True Then
            'Re-assign Entitlement and any associated Subscription to new Payer
            vODWhereFields(3).Value = vEntitlement.ProductCode
            vODWhereFields(4).Value = vEntitlement.RateCode
            mvEnv.Connection.UpdateRecords("order_details", vODUpdateFields, vODWhereFields, False)

            vSubsWhereFields(3).Value = vEntitlement.ProductCode
            mvEnv.Connection.UpdateRecords("subscriptions", vODUpdateFields, vSubsWhereFields, False)
          End If
        Next vEntitlement

        'Error if Balance has changed and there are unprocessed scheduled payments
        If mvClassFields(PaymentPlanFields.ofBalance).ValueChanged And vUnprocessedPayments Then RaiseError(DataAccessErrors.daeUnprocessedScheduledPayments)

        'need to save the detail lines just added
        For Each vPaymentPlanDetails In mvDetails
          If vPaymentPlanDetails.Amended Then
            If vCanReplace And vPaymentPlanDetails.Subscription And vPaymentPlanDetails.Existing Then
              'A subscription PPD exists that is not a membership entitlement, so go and get the subscription-related data for this PPD
              vPaymentPlanDetails.GetSubscriptionData(False, False)
            End If
            vPaymentPlanDetails.SaveChanges()
            If vPaymentPlanDetails.Subscription Then
              If mvSubsExtension Or (mvClassFields(PaymentPlanFields.ofBalance).DoubleValue < mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue) Or mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue = 0 Or AutoSubsPaymentMethod() Then
                'Create subscription record
                vSubscription = New Subscription
                vSubscription.InitNewFromPayPlanDetail(mvEnv, vPaymentPlanDetails, (mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value), Subscription.SubscriptionRecordSetTypes.subrstAll)
                vSubscription.Save(mvEnv.User.UserID)
              End If
            End If
          End If
        Next vPaymentPlanDetails
        'If we started with the balance = renewal amount and now it does not the recalc the frequency amount
        If vBalanceEqRenewal And (Balance <> RenewalAmount) Then
          vFrequency = CInt(RenewalAmount / FrequencyAmount)
          RenewalAmount = Balance
          mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CStr(CalcFrequencyAmount(RenewalAmount, vFrequency))
        End If
        'If the Balance has changed then we need to recreate the payment schedule
        If mvClassFields(PaymentPlanFields.ofBalance).ValueChanged Then RegenerateScheduledPayments(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance, TodaysDate)

        If vCanReplace Then
          'Set the gift flags on the payment plan
          With mvClassFields
            .Item(PaymentPlanFields.ofGiftMembership).Bool = pGiftMembership
            .Item(PaymentPlanFields.ofOneYearGift).Bool = pOneYearGift
            If pGiftMembership = False Then .Item(PaymentPlanFields.ofPackToMember).Bool = False
          End With
          'Process any unfulfilled incentives
          With NewOrder
            If .Existing Then
              'Reset the contact and address numbers on any unfulfilled enclosures
              For Each vEnclosure In .Enclosures
                If vEnclosure.ContactNumber = vExistingMember.ContactNumber Then
                  vEnclosure.ContactNumber = pContact.ContactNumber
                  vEnclosure.Save()
                End If
              Next vEnclosure
              'Reset flags on the new_orders record
              .GiftCardStatus = pGiftCardStatus
              .PackToDonor = pPackToDonor
              .Save()
            Else
              If mvEnv.GetConfigOption("me_mandatory_new_orders") Then
                If pPackToDonor Then
                  vSource = New Source
                  vSource.Init(mvEnv, pSource)
                  If vSource.ThankYouLetter.Length > 0 Then
                    .InitForNewRecord(mvEnv, PlanNumber, ReasonForDespatch, pContact.ContactNumber, (pContact.AddressNumber), pGiftCardStatus, pPackToDonor, vSource.ThankYouLetter, TodaysDate, TodaysDate)
                    .Save()
                  End If
                End If
              End If
            End If
          End With
        End If

        SaveChanges()
        mvEnv.Connection.CommitTransaction()
      End If
    End Sub

    Public Function CanAddNewMember(ByRef pNewMainMember As Boolean, ByRef pNewAssociateMember As Boolean) As Boolean
      Dim vMainMemberType As MembershipType
      Dim vMember As Member
      Dim vMainMembers As Integer
      Dim vAssocMembers As Integer

      'Can only add to a non-cancelled membership pay plan

      If PlanType = CDBEnvironment.ppType.pptMember And Not IsCancelled Then
        vMainMemberType = MembershipType
        'Get all the non-cancelled members
        If mvCurrentMembers.Count() = 0 Then LoadMembers()
        'If members per order = 0 then it's a group and we can add
        If vMainMemberType.MembersPerOrder = 0 Then pNewMainMember = True
        'If members per order > 1 then it's a joint or family and we need to check
        If vMainMemberType.MembersPerOrder > 1 Or Len(vMainMemberType.AssociateMembershipType) > 0 Then
          For Each vMember In mvCurrentMembers
            If vMember.MembershipTypeCode = vMainMemberType.MembershipTypeCode Then
              vMainMembers = vMainMembers + 1
            ElseIf vMember.MembershipTypeCode = vMainMemberType.AssociateMembershipType Then
              vAssocMembers = vAssocMembers + 1
            End If
          Next vMember
          If vMainMembers < vMainMemberType.MembersPerOrder Then pNewMainMember = True
          'SDT 24/5/2001 removed check so that you can add a new associate even if it exceeds the max free
          'If vAssocMembers < vMainMemberType.MaxFreeAssociates Then pNewAssociateMember = True
          If Len(vMainMemberType.AssociateMembershipType) > 0 Then pNewAssociateMember = True
        End If
        CanAddNewMember = pNewMainMember Or pNewAssociateMember
      End If
    End Function
    Public Function CanReplaceMember() As Boolean
      'Can only add to a non-cancelled membership pay plan

      If PlanType = CDBEnvironment.ppType.pptMember And Not IsCancelled Then
        'Get all the non-cancelled members
        If mvCurrentMembers.Count() = 0 Then LoadMembers()
        CanReplaceMember = mvCurrentMembers.Count() = 1 And MembershipType.MembersPerOrder = 1
      End If
    End Function
    Public Sub ChangeCancellationReason(ByVal pOriginalCancellationReason As String, ByVal pNewCancellationReason As String, Optional ByVal pStatus As String = "", Optional ByVal pStatusDate As String = "", Optional ByVal pCancellationReasonDesc As String = "", Optional ByVal pCancellationSource As String = "")
      'Change Cancellation Reason on any item attached to the Payment Plan with the
      'original Cancellation Reason
      Dim vWhereFields As New CDBFields
      Dim vUpdateFields As New CDBFields
      Dim vStartTransaction As Boolean
      Dim vAPContact As New Contact(mvEnv)
      Dim vAPOrganisation As New Organisation(mvEnv)
      Dim vAutoPaymentContact As Integer

      vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue)
      vWhereFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, pOriginalCancellationReason)

      vUpdateFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, pNewCancellationReason)
      vUpdateFields.Add("cancellation_source", CDBField.FieldTypes.cftCharacter, pCancellationSource)
      vUpdateFields.AddAmendedOnBy(mvEnv.User.UserID)

      If Not mvEnv.Connection.InTransaction Then
        vStartTransaction = True
        mvEnv.Connection.StartTransaction()
      End If

      If mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "C" Then
        mvEnv.Connection.UpdateRecords("direct_debits", vUpdateFields, vWhereFields, False)
      End If
      If mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "C" Then
        mvEnv.Connection.UpdateRecords("bankers_orders", vUpdateFields, vWhereFields, False)
      End If
      If mvClassFields(PaymentPlanFields.ofCreditCard).Value = "C" Then
        mvEnv.Connection.UpdateRecords("credit_card_authorities", vUpdateFields, vWhereFields, False)
      End If
      If mvClassFields(PaymentPlanFields.ofCovenant).Value = "C" Then
        mvEnv.Connection.UpdateRecords("covenants", vUpdateFields, vWhereFields, False)
      End If
      If PlanType = CDBEnvironment.ppType.pptMember Then
        UpdateMembers(mvEnv.Connection, vUpdateFields, vWhereFields, False)
      End If
      If mvClassFields(PaymentPlanFields.ofCancellationReason).Value = pOriginalCancellationReason Then
        mvClassFields(PaymentPlanFields.ofCancellationReason).Value = pNewCancellationReason
        mvClassFields(PaymentPlanFields.ofAmendedOn).Value = TodaysDate()
        mvClassFields(PaymentPlanFields.ofAmendedBy).Value = mvEnv.User.UserID
        mvClassFields(PaymentPlanFields.ofCancellationSource).Value = pCancellationSource
        SaveChanges()
      End If

      'Update contact status if required
      If pStatus.Length > 0 Then
        vAutoPaymentContact = CInt(mvClassFields(PaymentPlanFields.ofContactNumber).Value)
        If Len(pStatusDate) = 0 Then pStatusDate = TodaysDate()
        vAPContact.Init(vAutoPaymentContact)
        If vAPContact.ContactType = Contact.ContactTypes.ctcContact Then
          vAPContact.Status = pStatus
          vAPContact.StatusDate = pStatusDate 'TodaysDate
          If pCancellationReasonDesc.Length > 0 AndAlso
             String.IsNullOrWhiteSpace(vAPContact.StatusReason) Then
            vAPContact.StatusReason = pCancellationReasonDesc
          End If
        Else
          vAPOrganisation.Init(vAutoPaymentContact)
          vAPOrganisation.Status = pStatus
          vAPOrganisation.StatusDate = pStatusDate 'TodaysDate
          If pCancellationReasonDesc.Length > 0 AndAlso
             String.IsNullOrWhiteSpace(vAPOrganisation.StatusReason) Then
            vAPOrganisation.StatusReason = pCancellationReasonDesc
          End If
        End If
      End If
      If vAPContact.Existing Then vAPContact.Save()
      If vAPOrganisation.Existing Then vAPOrganisation.Save()

      If vStartTransaction Then
        mvEnv.Connection.CommitTransaction()
      End If
    End Sub

    ''' <summary>
    ''' The membership number if the plan is a membership.
    ''' </summary>
    ''' <value>
    ''' The membership number.
    ''' </value>
    ''' <remarks>For a payment plan that is not a membership plan, the value of this proerty is undefined.  The member property
    ''' of this class is referenced to ensure that the member details are initialised.</remarks>
    Private Property MembershipNumber As Integer
      Get
        Return mvMembershipNumber
      End Get
      Set(ByVal value As Integer)
        If value <> mvMembershipNumber Then
          mvMembershipNumber = value
          If mvMembershipNumber <> 0 Then
            Dim vMember As Member = Me.Member
            Debug.Assert(vMember.MembershipNumber = mvMembershipNumber)
          End If
        End If
      End Set
    End Property

    ''' <summary>
    ''' Cancels the specified payment plan.
    ''' </summary>
    ''' <param name="pMembershipNumber">The membership number</param>
    ''' <param name="pType">Type of cancelation</param>
    ''' <param name="pCancellationReason">The cancellation reason</param>
    ''' <param name="pStatus">The status.</param>
    ''' <param name="pCancellationReasonDesc">The cancellation reason description</param>
    ''' <param name="pLogname">The logname</param>
    ''' <param name="pCancellationSource">The cancellation sourc.</param>
    ''' <param name="pBatchNumber">The batch number</param>
    ''' <param name="pTransactionNumber">The transaction number</param>
    ''' <param name="pStatusDate">The status date</param>
    ''' <param name="pUpdateDetailsSource">if set to <c>true</c> [update details source]</param>
    ''' <param name="pRemoveFixedAmount">if set to <c>true</c> [remove fixed amount]</param>
    ''' <param name="pCancellationDate">The cancellation date</param>
    ''' <remarks>This overload of the <see cref="Cancel">Cancel</see>method should be used if the cancelation may be for a 
    ''' membership.</remarks>
    Public Sub Cancel(ByRef pMembershipNumber As Integer, ByRef pType As PaymentPlanCancellationTypes, ByRef pCancellationReason As String, ByRef pStatus As String, ByRef pCancellationReasonDesc As String, ByRef pLogname As String, ByRef pCancellationSource As String, Optional ByVal pBatchNumber As Integer = 0, Optional ByRef pTransactionNumber As Integer = 0, Optional ByVal pStatusDate As String = "", Optional ByVal pUpdateDetailsSource As Boolean = False, Optional ByVal pRemoveFixedAmount As Boolean = False, Optional ByVal pCancellationDate As String = "")
      Me.MembershipNumber = pMembershipNumber
      Cancel(pType, pCancellationReason, pStatus, pCancellationReasonDesc, pLogname, pCancellationSource, pBatchNumber, pTransactionNumber, pStatusDate, pUpdateDetailsSource, pRemoveFixedAmount, pCancellationDate)
    End Sub

    Public Sub Cancel(ByRef pType As PaymentPlanCancellationTypes, ByRef pCancellationReason As String, ByRef pStatus As String, ByRef pCancellationReasonDesc As String, ByRef pLogname As String, ByRef pCancellationSource As String, Optional ByVal pBatchNumber As Integer = 0, Optional ByRef pTransactionNumber As Integer = 0, Optional ByVal pStatusDate As String = "", Optional ByVal pUpdateDetailsSource As Boolean = False, Optional ByVal pRemoveFixedAmount As Boolean = False, Optional ByVal pCancellationDate As String = "")
      Dim vUpdateFields As New CDBFields
      Dim vPPUpdateFields As New CDBFields
      Dim vWhereFields As New CDBFields
      Dim vCatWhereFields As New CDBFields
      Dim vCovCatUpdateFields As New CDBFields
      Dim vCovCatWhereFields As New CDBFields
      Dim vAPCatWhereFields As New CDBFields
      Dim vODWhereFields As New CDBFields
      Dim vFutureWhereFields As New CDBFields
      Dim vPPDUpdateFields As New CDBFields
      Dim vConn As CDBConnection
      Dim vMembers As CDBRecordSet
      Dim vCovenants As CDBRecordSet
      Dim vFutureMember As CDBRecordSet
      Dim vCompareCovenant As Covenant
      Dim vNewOrderType As CDBEnvironment.ppType
      Dim vTable As String = ""
      Dim vAutoPaymentContact As Integer
      Dim vEndAutoPayActivity As Boolean
      Dim vAutoPayActivity As String = ""
      Dim vAutoPayActivityValue As String = ""
      Dim vEndCovenantActivity As Boolean
      Dim vCVOverlapLatestEnd As Date
      Dim vReturnProductNumbers As Boolean
      Dim vEndFutureMember As Boolean
      Dim vFutureMembershipNumber As Integer
      Dim vFutureContact As Integer
      Dim vFutureActivity As String = ""
      Dim vFutureActivityValue As String = ""
      Dim vFutureChangeDate As Date
      Dim vStartTransaction As Boolean
      Dim vCovenantFields As String
      Dim vFutureContactType As Contact.ContactTypes
      Dim vPayer As New Contact(mvEnv)
      Dim vCovenantContact As New Contact(mvEnv)
      Dim vAPContact As New Contact(mvEnv)
      Dim vAPOrganisation As New Organisation(mvEnv)
      Dim vCreatedOnDate As String = ""
      Dim vOPSUpdateFields As New CDBFields
      Dim vOPSWhereFields As New CDBFields
      Dim vPPD As PaymentPlanDetail
      Dim vPPDAmountCount As Integer
      Dim vPPDAmountRemoved As Boolean
      Dim vSubs As Subscription
      Dim vRecordSet As CDBRecordSet
      Dim vRegenerateOPS As Boolean
      Dim vJournalNumber As Integer

      vConn = mvEnv.Connection
      '-----------------------------------------------------------------
      'Set the update and where fields for most of the updates
      '-----------------------------------------------------------------

      If Len(pCancellationDate) = 0 Then pCancellationDate = TodaysDate()
      vUpdateFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, pCancellationReason)
      vUpdateFields.Add("cancelled_on", CDBField.FieldTypes.cftDate, pCancellationDate)
      vUpdateFields.Add("cancelled_by", CDBField.FieldTypes.cftCharacter, pLogname)
      If Len(pCancellationSource) > 0 Then vUpdateFields.Add("cancellation_source", CDBField.FieldTypes.cftCharacter, pCancellationSource)

      vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).Value)

      '-----------------------------------------------------------------
      'Set the update and where fields for Categories
      '-----------------------------------------------------------------

      vCatWhereFields.Add("contact_number", CDBField.FieldTypes.cftLong)
      vCatWhereFields.Add("activity", CDBField.FieldTypes.cftCharacter)
      vCatWhereFields.Add("activity_value", CDBField.FieldTypes.cftCharacter)
      vCatWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate)
      vCatWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, pCancellationDate, CDBField.FieldWhereOperators.fwoGreaterThan)

      vCovCatUpdateFields.Add("valid_to", CDBField.FieldTypes.cftDate)
      vCovCatUpdateFields.Add("amended_on", CDBField.FieldTypes.cftDate, pCancellationDate)
      vCovCatUpdateFields.Add("amended_by", CDBField.FieldTypes.cftCharacter, pLogname)

      vCovCatWhereFields.Add("contact_number", CDBField.FieldTypes.cftLong)
      vCovCatWhereFields.Add("activity", CDBField.FieldTypes.cftCharacter)
      vCovCatWhereFields.Add("activity_value", CDBField.FieldTypes.cftCharacter)
      vCovCatWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, mvClassFields(PaymentPlanFields.ofOrderDate).Value, CDBField.FieldWhereOperators.fwoGreaterThan)

      vAPCatWhereFields.Add("contact_number", CDBField.FieldTypes.cftLong)
      vAPCatWhereFields.Add("activity", CDBField.FieldTypes.cftCharacter)
      vAPCatWhereFields.Add("activity_value", CDBField.FieldTypes.cftCharacter)
      vAPCatWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, pCancellationDate, CDBField.FieldWhereOperators.fwoGreaterThan)

      '-----------------------------------------------------------------
      'General Setup
      '-----------------------------------------------------------------
      vODWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).Value)

      vFutureWhereFields.Add("membership_number", CDBField.FieldTypes.cftLong)

      If (pType And PaymentPlanCancellationTypes.pctCCCA) > 0 OrElse (pType And PaymentPlanCancellationTypes.pctDirectDebit) > 0 OrElse (pType And PaymentPlanCancellationTypes.pctStandingOrder) > 0 Then
        pType = pType Or PaymentPlanCancellationTypes.pctAutoPayment
      ElseIf (pType And PaymentPlanCancellationTypes.pctAutoPayment) > 0 Then
        If Not (mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "Y" Or mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "Y" Or mvClassFields(PaymentPlanFields.ofCreditCard).Value = "Y") Then
          pType = CType(pType - PaymentPlanCancellationTypes.pctAutoPayment, PaymentPlanCancellationTypes)
        End If
      End If

      '-----------------------------------------------------------------
      'Decide whether to cancel whole Payment Plan or change the Order Type
      '-----------------------------------------------------------------
      vNewOrderType = CDBEnvironment.ppType.pptNull

      If (pType And PaymentPlanCancellationTypes.pctAutoPayment) > 0 And (mvClassFields(PaymentPlanFields.ofOrderType).Value = SetPPType(CDBEnvironment.ppType.pptCCCA) Or mvClassFields(PaymentPlanFields.ofOrderType).Value = SetPPType(CDBEnvironment.ppType.pptDD) Or mvClassFields(PaymentPlanFields.ofOrderType).Value = SetPPType(CDBEnvironment.ppType.pptSO)) Then
        If (pType And PaymentPlanCancellationTypes.pctPaymentPlan) = 0 Then
          vNewOrderType = CDBEnvironment.ppType.pptOther
          'pType = pType + pctPaymentPlan
        End If
      ElseIf (pType And PaymentPlanCancellationTypes.pctCovenant) > 0 And (mvClassFields(PaymentPlanFields.ofOrderType).Value = SetPPType(CDBEnvironment.ppType.pptCovenant)) Then
        If mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "Y" And (pType And PaymentPlanCancellationTypes.pctAutoPayment) = 0 Then
          vNewOrderType = CDBEnvironment.ppType.pptDD
        ElseIf mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "Y" And (pType And PaymentPlanCancellationTypes.pctAutoPayment) = 0 Then
          vNewOrderType = CDBEnvironment.ppType.pptSO
        ElseIf mvClassFields(PaymentPlanFields.ofCreditCard).Value = "Y" And (pType And PaymentPlanCancellationTypes.pctAutoPayment) = 0 Then
          vNewOrderType = CDBEnvironment.ppType.pptCCCA
        Else
          vNewOrderType = CDBEnvironment.ppType.pptOther
        End If
      ElseIf (pType And PaymentPlanCancellationTypes.pctMembership) > 0 Then
        If (pType And PaymentPlanCancellationTypes.pctPaymentPlan) = 0 Then pType = pType Or PaymentPlanCancellationTypes.pctPaymentPlan
      End If

      '-----------------------------------------------------------------
      'See whether there's a corresponding Future Membership to Cancel
      '-----------------------------------------------------------------
      If mvClassFields(PaymentPlanFields.ofOrderType).Value = SetPPType(CDBEnvironment.ppType.pptMember) Then
        vFutureMember = vConn.GetRecordSet("SELECT m.membership_number,m.contact_number,activity, activity_value,future_change_date,contact_type FROM members m, contacts c, member_future_type mft,membership_types mt WHERE m.order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND m.contact_number = c.contact_number AND mft.membership_number = m.membership_number AND mt.membership_type = mft.future_membership_type")
        If vFutureMember.Fetch() = True Then
          vEndFutureMember = True
          vFutureMembershipNumber = CInt(vFutureMember.Fields(1).Value)
          vFutureContact = CInt(vFutureMember.Fields(2).Value)
          vFutureActivity = vFutureMember.Fields(3).Value
          vFutureActivityValue = vFutureMember.Fields(4).Value
          vFutureChangeDate = CDate(vFutureMember.Fields(5).Value)
          vFutureContactType = Contact.GetContactType(vFutureMember.Fields(6).Value)
        End If
        vFutureMember.CloseRecordSet()
      End If

      '-----------------------------------------------------------------
      'Determine if order contains products that use product numbers
      '-----------------------------------------------------------------
      If (pType And PaymentPlanCancellationTypes.pctPaymentPlan) > 0 Then
        If vConn.GetCount("order_details", Nothing, "order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND product_number IS NOT NULL") > 0 Then
          vReturnProductNumbers = True
        End If
      End If

      '-----------------------------------------------------------------
      'Decide whether we should cancel a corresponding Auto Payment Activity
      '-----------------------------------------------------------------
      If (pType And PaymentPlanCancellationTypes.pctAutoPayment) > 0 OrElse ((pType And PaymentPlanCancellationTypes.pctPaymentPlan) > 0 AndAlso (mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "Y" Or mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "Y" Or mvClassFields(PaymentPlanFields.ofCreditCard).Value = "Y")) Then
        If mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "Y" Then
          vAutoPaymentContact = StandingOrder.ContactNumber
          vAutoPayActivity = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlSOActivity)
          vAutoPayActivityValue = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlSOActivityValue)
          vTable = "bankers_orders"
        ElseIf mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "Y" Then
          vAutoPaymentContact = DirectDebit.ContactNumber
          vAutoPayActivity = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDDActivity)
          vAutoPayActivityValue = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDDActivityValue)
          vTable = "direct_debits"
        ElseIf mvClassFields(PaymentPlanFields.ofCreditCard).Value = "Y" Then
          vAutoPaymentContact = CreditCardAuthority.ContactNumber
          vAutoPayActivity = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCCCAActivity)
          vAutoPayActivityValue = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCCCAActivityValue)
          vTable = "credit_card_authorities"
        End If
        If vConn.GetCount(vTable, Nothing, "contact_number = " & vAutoPaymentContact & " AND order_number <> " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND cancellation_reason IS NULL") = 0 Then
          vEndAutoPayActivity = True
        End If
      End If

      '-----------------------------------------------------------------
      ' Look for overlapping Covenant(s) to decide whether to end/amend
      ' the associated Category
      '-----------------------------------------------------------------
      If (pType And PaymentPlanCancellationTypes.pctCovenant) > 0 Or ((pType And PaymentPlanCancellationTypes.pctPaymentPlan) > 0 AndAlso (mvClassFields(PaymentPlanFields.ofCovenant).Value = GetCovenantStatusCode(PaymentPlan.ppCovenant.ppcCovenant) Or mvClassFields(PaymentPlanFields.ofCovenant).Value = GetCovenantStatusCode(PaymentPlan.ppCovenant.ppcDepositedDeed))) Then
        'This next will cause the covenant to be initialised
        vCovenantFields = Covenant.GetRecordSetFields(Covenant.CovenantRecordSetTypes.crtMain)
        'The check on contact number is here because we could have an order
        'With the Convenant Status not set to cancelled but where the covenant
        'itself has actually been cancelled. In this case we can just ignore the following
        If Covenant.ContactNumber > 0 Then
          vEndCovenantActivity = True
          vCovenants = vConn.GetRecordSet("SELECT " & vCovenantFields & " FROM covenants WHERE contact_number = " & Covenant.ContactNumber & " AND covenant_number <> " & Covenant.CovenantNumber & " AND cancellation_reason IS NULL")
          While vCovenants.Fetch() = True
            vCompareCovenant = New Covenant
            vCompareCovenant.InitFromRecordSet(mvEnv, vCovenants, Covenant.CovenantRecordSetTypes.crtMain)
            If (vCompareCovenant.StartDate >= Covenant.StartDate And CDate(vCompareCovenant.StartDate) <= Covenant.EndDate) Or (vCompareCovenant.EndDate >= CDate(Covenant.StartDate) And vCompareCovenant.EndDate <= Covenant.EndDate) Then
              'This Covenant overlaps
              vCVOverlapLatestEnd = CDate(IIf((vEndCovenantActivity = True Or vCompareCovenant.EndDate > vCVOverlapLatestEnd), vCompareCovenant.EndDate, vCVOverlapLatestEnd))
              vEndCovenantActivity = False
            End If
          End While
          vCovenants.CloseRecordSet()
        End If
      End If

      '----------------------------------------------------------------------
      ' Retrieve PaymentPlanDetails if we are going to add Amendment History
      '----------------------------------------------------------------------
      If ((pType And PaymentPlanCancellationTypes.pctPaymentPlan) = PaymentPlanCancellationTypes.pctPaymentPlan) And PlanType = CDBEnvironment.ppType.pptMember Then
        If Details.Count() = 0 Then
          InitPaymentPlanDetails(mvEnv, PlanNumber)
        End If
      End If

      If Not vConn.InTransaction Then
        vStartTransaction = True
        vConn.StartTransaction()
      End If

      '-----------------------------------------------------------------
      'If we are cancelling an automated payment or the whole payment plan
      '-----------------------------------------------------------------
      If ((pType And PaymentPlanCancellationTypes.pctAutoPayment) > 0 OrElse (pType And PaymentPlanCancellationTypes.pctPaymentPlan) > 0) Then
        'Update contact status if required
        If pStatus.Length > 0 Then
          If Len(pStatusDate) = 0 Then pStatusDate = pCancellationDate
          If (pType And PaymentPlanCancellationTypes.pctPaymentPlan) > 0 Then
            Payer.Status = pStatus
            Payer.StatusDate = pStatusDate
            If pCancellationReasonDesc.Length > 0 AndAlso
               String.IsNullOrWhiteSpace(Payer.StatusReason) Then
              Payer.StatusReason = pCancellationReasonDesc
            End If
          ElseIf vAutoPaymentContact > 0 Then
            vAPContact.Init(vAutoPaymentContact)
            If vAPContact.ContactType = Contact.ContactTypes.ctcContact Then
              vAPContact.Status = pStatus
              vAPContact.StatusDate = pStatusDate 'TodaysDate
              If pCancellationReasonDesc.Length > 0 AndAlso
                 String.IsNullOrWhiteSpace(vAPContact.StatusReason) Then
                vAPContact.StatusReason = pCancellationReasonDesc
              End If
            Else
              vAPOrganisation.Init(vAutoPaymentContact)
              vAPOrganisation.Status = pStatus
              vAPOrganisation.StatusDate = pStatusDate 'TodaysDate
              If pCancellationReasonDesc.Length > 0 AndAlso
                 String.IsNullOrWhiteSpace(vAPOrganisation.StatusReason) Then
                vAPOrganisation.StatusReason = pCancellationReasonDesc
              End If
            End If
          End If
        End If

        'Remove any incentives linked to the automated payment method being cancelled
        vRegenerateOPS = False
        If (pType And PaymentPlanCancellationTypes.pctAutoPayment) > 0 Then
          If PlanType <> CDBEnvironment.ppType.pptLoan Then RemoveIncentives(vPPUpdateFields, vRegenerateOPS)
          If PlanType = CDBEnvironment.ppType.pptMember AndAlso mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbCancelOneYearGiftApm) Then
            mvClassFields(PaymentPlanFields.ofCancelOneYearGiftApm).Value = "N"
            vPPUpdateFields.Add(mvClassFields(PaymentPlanFields.ofCancelOneYearGiftApm).Name, "N")
          End If
        End If
        If (pType And PaymentPlanCancellationTypes.pctPaymentPlan) > 0 Then vRegenerateOPS = False 'Never regenerate OPS if PP is being cancelled

        If mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "Y" Then 'Standing order
          'The check on contact number is here because we could have an order
          'With the Standing Order Status not set to cancelled but where the Standing Order
          'itself has actually been cancelled. In this case we can just ignore the following
          If StandingOrder.ContactNumber > 0 Then
            vCreatedOnDate = StandingOrder.CreatedOn
            vWhereFields.Add("bankers_order_number", CDBField.FieldTypes.cftInteger, StandingOrder.StandingOrderNumber) 'BR18907 - to ensure only one record is updated
            vConn.UpdateRecords("bankers_orders", vUpdateFields, vWhereFields, False)
            vWhereFields.Remove("bankers_order_number") 'BR18907
            mvEnv.AddJournalRecord(JournalTypes.jnlStandingOrder, JournalOperations.jnlCancel, StandingOrder.ContactNumber, StandingOrder.AddressNumber, StandingOrder.StandingOrderNumber, 0, 0, pBatchNumber, pTransactionNumber)
          End If
          mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "C"
        End If
        If mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "Y" Then 'Direct Debit
          'The check on contact number is here because we could have an order
          'With the Direct Debit Status not set to cancelled but where the Direct Debit
          'itself has actually been cancelled. In this case we can just ignore the following
          If DirectDebit.ContactNumber > 0 Then
            vCreatedOnDate = DirectDebit.CreatedOn
            vWhereFields.Add("direct_debit_number", CDBField.FieldTypes.cftInteger, DirectDebit.DirectDebitNumber)
            vConn.UpdateRecords("direct_debits", vUpdateFields, vWhereFields, False)
            vWhereFields.Remove("direct_debit_number")
            mvEnv.AddJournalRecord(JournalTypes.jnlDirectDebit, JournalOperations.jnlCancel, DirectDebit.ContactNumber, DirectDebit.AddressNumber, DirectDebit.DirectDebitNumber, 0, 0, pBatchNumber, pTransactionNumber)
          End If
          mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "C"
        End If
        If mvClassFields(PaymentPlanFields.ofCreditCard).Value = "Y" Then 'Credit Card Authority
          'The check on contact number is here because we could have an order
          'With the Credit Card Status not set to cancelled but where the Credit Card
          'itself has actually been cancelled. In this case we can just ignore the following
          If CreditCardAuthority.ContactNumber > 0 Then
            vCreatedOnDate = CreditCardAuthority.CreatedOn
            vWhereFields.Add("credit_card_authority_number", CDBField.FieldTypes.cftInteger, CreditCardAuthority.CreditCardAuthorityNumber) 'BR18907 - to ensure only one record is updated
            vConn.UpdateRecords("credit_card_authorities", vUpdateFields, vWhereFields, False)
            vWhereFields.Remove("credit_card_authority_number") 'BR18907
            mvEnv.AddJournalRecord(JournalTypes.jnlCreditCard, JournalOperations.jnlCancel, CreditCardAuthority.ContactNumber, CreditCardAuthority.AddressNumber, CreditCardAuthority.CreditCardAuthorityNumber, 0, 0, pBatchNumber, pTransactionNumber)
          End If
          mvClassFields(PaymentPlanFields.ofCreditCard).Value = "C"
        End If
        If vEndAutoPayActivity Then
          If Payer.ContactType = Contact.ContactTypes.ctcOrganisation Then vAPCatWhereFields(1).Name = "organisation_number"
          vAPCatWhereFields(1).Value = CStr(vAutoPaymentContact)
          vAPCatWhereFields(2).Value = vAutoPayActivity
          vAPCatWhereFields(3).Value = vAutoPayActivityValue
          'Need to check the dates so use ContactCategory class to end the Categories
          CancelCategories(mvEnv, Payer.ContactType, vAPCatWhereFields, vCreatedOnDate, pLogname)
        End If
        'Update Payment Schedule to remove the claim date
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments) Then
          vOPSWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue)
          vOPSUpdateFields.AddAmendedOnBy(mvEnv.User.UserID)
          If (pType And PaymentPlanCancellationTypes.pctPaymentPlan) = 0 Then
            'Just cancelling the auto payment method, remove claim date
            'where due_date >= Today
            'update the creation reason and claim date when the status is not "V" and amount_outstanding > 0
            vOPSWhereFields.Add("claim_date", CDBField.FieldTypes.cftDate, pCancellationDate, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
            vOPSWhereFields.Add("schedule_creation_reason", CDBField.FieldTypes.cftCharacter, "FA", CDBField.FieldWhereOperators.fwoNotEqual)
            vOPSWhereFields.Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, "V", CDBField.FieldWhereOperators.fwoNotEqual)
            vOPSWhereFields.Add("amount_outstanding", CDBField.FieldTypes.cftNumeric, "0", CDBField.FieldWhereOperators.fwoGreaterThan)
            With vOPSUpdateFields
              .Add("claim_date", CDBField.FieldTypes.cftDate)
              .Add("schedule_creation_reason", CDBField.FieldTypes.cftCharacter, "CA")
            End With
            vConn.UpdateRecords("order_payment_schedule", vOPSUpdateFields, vOPSWhereFields, False)

            'udpate claim date only when status is "V"
            vOPSWhereFields.Remove("scheduled_payment_status")
            vOPSWhereFields.Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, "V", CDBField.FieldWhereOperators.fwoEqual)
            vOPSUpdateFields.Remove("schedule_creation_reason")
            vConn.UpdateRecords("order_payment_schedule", vOPSUpdateFields, vOPSWhereFields, False)
          Else
            'Cancelling pay plan so cancel all scheduled payments
            'where amount_outstanding > 0 and scheduled_payment_status not F, S, A (Fully Paid, Skipped Payment, Arrears)
            With vOPSWhereFields
              .Add("amount_outstanding", CDBField.FieldTypes.cftNumeric, "0", CDBField.FieldWhereOperators.fwoGreaterThan)
              .Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, "'F','S','A'", CDBField.FieldWhereOperators.fwoNotIn)
            End With
            vOPSUpdateFields.Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, "C")
            vConn.UpdateRecords("order_payment_schedule", vOPSUpdateFields, vOPSWhereFields, False)
          End If
          mvEnv.AddJournalRecord(JournalTypes.jnlPayPlanPaymentSchedule, JournalOperations.jnlUpdate, mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue, mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
          mvClassFields(PaymentPlanFields.ofPaymentScheduleAmendedOn).Value = pCancellationDate
          mvScheduledPayments = Nothing 'Set this to nothing to force a re-selection of the data
        End If
      End If

      '-----------------------------------------------------------------
      'If we are cancelling a covenant or the whole payment plan
      '-----------------------------------------------------------------
      If (pType And PaymentPlanCancellationTypes.pctCovenant) > 0 OrElse (pType And PaymentPlanCancellationTypes.pctPaymentPlan) > 0 Then
        If mvClassFields(PaymentPlanFields.ofCovenant).Value = GetCovenantStatusCode(PaymentPlan.ppCovenant.ppcCovenant) Or mvClassFields(PaymentPlanFields.ofCovenant).Value = GetCovenantStatusCode(PaymentPlan.ppCovenant.ppcDepositedDeed) Then
          'The check on contact number is here because we could have an order
          'With the Convenant Status not set to cancelled but where the covenant
          'itself has actually been cancelled. In this case we can just ignore the following
          If Covenant.ContactNumber > 0 Then
            vCovCatWhereFields(1).Value = CStr(Covenant.ContactNumber)
            vCovCatWhereFields(2).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCVActivity)
            vCovCatWhereFields(3).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCVActivityValue)
            vCovCatWhereFields(4).Value = mvClassFields(PaymentPlanFields.ofOrderDate).Value

            vCovCatUpdateFields(1).Value = If(vEndCovenantActivity = True, pCancellationDate, vCVOverlapLatestEnd.ToString(CAREDateFormat))
            vConn.UpdateRecords("contact_categories", vCovCatUpdateFields, vCovCatWhereFields, False)
            If pStatus.Length > 0 Then
              vCovenantContact.Init(Covenant.ContactNumber)
              vCovenantContact.Status = pStatus
              vCovenantContact.StatusDate = pCancellationDate
              If pCancellationReasonDesc.Length > 0 Then
                vCovenantContact.StatusReason = pCancellationReasonDesc
              End If
            End If
            mvEnv.AddJournalRecord(JournalTypes.jnlCovenant, JournalOperations.jnlCancel, Covenant.ContactNumber, Covenant.AddressNumber, Covenant.CovenantNumber, 0, 0, pBatchNumber, pTransactionNumber)
            vConn.UpdateRecords("covenants", vUpdateFields, vWhereFields, False)
          End If
          mvClassFields(PaymentPlanFields.ofCovenant).Value = GetCovenantStatusCode(PaymentPlan.ppCovenant.ppcCancelled)
        End If
      End If

      '-----------------------------------------------------------------
      'If cancelling the payment plan
      '-----------------------------------------------------------------
      If (pType And PaymentPlanCancellationTypes.pctPaymentPlan) > 0 Then
        'Update subscriptions
        'vConn.UpdateRecords "subscriptions", vUpdateFields, vWhereFields, False
        vWhereFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoEqual)  'BR19878
        vWhereFields.Add("cancelled_on", CDBField.FieldTypes.cftDate, "", CDBField.FieldWhereOperators.fwoEqual)
        vRecordSet = vConn.GetRecordSet("SELECT * FROM subscriptions WHERE " & vConn.WhereClause(vWhereFields))
        vWhereFields.Remove("cancellation_reason")
        vWhereFields.Remove("cancelled_on")
        While vRecordSet.Fetch() = True
          vSubs = New Subscription
          vSubs.InitFromRecordSet(mvEnv, vRecordSet, Subscription.SubscriptionRecordSetTypes.subrstAll)
          vSubs.Cancel(pCancellationReason, pLogname, pCancellationSource)
          vSubs.Save(pLogname)
        End While
        vRecordSet.CloseRecordSet()
        'Update members if membership
        'If we are refunding overpayment for early membership termination, generate the refunds
        If mvClassFields(PaymentPlanFields.ofOrderType).Value = SetPPType(CDBEnvironment.ppType.pptMember) Then 'order type
          'BR15282 - Right click reinstate Pay Plan re-instates cancelled memberships
          vWhereFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoEqual)
          UpdateMembers(vConn, vUpdateFields, vWhereFields, True)
          vWhereFields.Remove("cancellation_reason")
          vMembers = vConn.GetRecordSet("SELECT m.membership_number,m.member_number,m.contact_number,m.address_number,mt.activity,mt.activity_value,mailing_suppression,contact_type,joined FROM members m, contacts c, membership_types mt WHERE m.order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND m.contact_number = c.contact_number AND m.membership_type = mt.membership_type")
          While vMembers.Fetch() = True
            CancelMemberData(mvEnv, (vMembers.Fields(1).IntegerValue), (vMembers.Fields(2).Value), (vMembers.Fields(3).IntegerValue), (vMembers.Fields(4).IntegerValue), pCancellationReason, (vMembers.Fields(5).Value), (vMembers.Fields(6).Value), (vMembers.Fields(7).Value), pLogname, False, Contact.GetContactType(vMembers.Fields(8).Value), pStatus, pCancellationReasonDesc, pCancellationSource, pStatusDate, vMembers.Fields("joined").Value)
          End While
          vMembers.CloseRecordSet()
        End If

        'If any products on the order use product numbers and you are cancelling the order then you must make the associated product number re-available
        If vReturnProductNumbers Then
          vConn.ExecuteSQL("INSERT INTO product_numbers SELECT product,product_number FROM order_details WHERE order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND product_number IS NOT NULL")
        End If

        vConn.DeleteRecords("order_detail_arrears", vODWhereFields, False)

        If mvClassFields(PaymentPlanFields.ofGiftMembership).Bool Then
          vPayer = Payer
          If vPayer.ContactType = Contact.ContactTypes.ctcOrganisation Then
            vCatWhereFields(1).Name = "organisation_number"
            vTable = "organisation"
          Else
            vTable = "contact"
          End If
          vCatWhereFields(1).Value = mvClassFields(PaymentPlanFields.ofContactNumber).Value
          vCatWhereFields(2).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlSponsorActivity)
          vCatWhereFields(3).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlSponsorActivityValue)
          vCatWhereFields(4).Value = mvClassFields(PaymentPlanFields.ofOrderDate).Value
          CancelCategories(mvEnv, (vPayer.ContactType), vCatWhereFields, "", pLogname)
        End If

        If vEndFutureMember Then
          vFutureWhereFields(1).Value = CStr(vFutureMembershipNumber)
          vConn.DeleteRecords("member_future_type", vFutureWhereFields)
          If vFutureContactType = Contact.ContactTypes.ctcOrganisation Then
            vCatWhereFields(1).Name = "organisation_number"
            vTable = "organisation"
          Else
            vCatWhereFields(1).Name = "contact_number"
            vTable = "contact"
          End If
          vCatWhereFields(1).Value = CStr(vFutureContact)
          vCatWhereFields(2).Value = vFutureActivity
          vCatWhereFields(3).Value = vFutureActivityValue
          vCatWhereFields(4).Value = CStr(vFutureChangeDate)
          vConn.DeleteRecords(vTable & "_categories", vCatWhereFields, False)
        End If

        If PlanType = CDBEnvironment.ppType.pptLoan AndAlso mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLoans) = True Then
          'Cancel the Loan as well
          'It is expected that the Loan will still be live so just cancel and error if it is already ancelled
          Dim vLoanUpdateFields As New CDBFields()
          With vLoanUpdateFields
            .Add("cancellation_reason", pCancellationReason)
            .Add("cancelled_by", pLogname)
            .Add("cancelled_on", CDBField.FieldTypes.cftDate, pCancellationDate)
            If pCancellationSource.Length > 0 Then .Add("cancellation_source", pCancellationSource)
          End With
          Dim vLoanWhereFields As New CDBFields(New CDBField("order_number", PlanNumber))
          vLoanWhereFields.Add("cancellation_reason", "")
          vConn.UpdateRecords("loans", vLoanUpdateFields, vLoanWhereFields)
          mvClassFields(PaymentPlanFields.ofLoan).Value = "C"
          vPPUpdateFields.Add("loan", "C")
        End If

        If Payer.Existing Then Payer.Save() 'BR15116 Modified to handle possibility of contact having been deleted
        If vCovenantContact.Existing Then vCovenantContact.Save()

        If Not mvClassFields.CreateAmendmentHistory(mvEnv, ClassFields.AmendmentHistoryCreation.ahcDefault) Then mvEnv.AddAuditRecord(CDBEnvironment.AuditTypes.audUpdate, "orders", mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue, 0, "cancellation_reason", "", pCancellationReason)
        vJournalNumber = mvEnv.AddJournalRecord(JournalTypes.jnlPayPlan, JournalOperations.jnlCancel, mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue, mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue), 0, 0, pBatchNumber, pTransactionNumber)
        vPPUpdateFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, pCancellationReason)
        If pCancellationReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlOneYearGiftedGroupReason) And MembershipType.MembersPerOrder = 0 And mvClassFields(PaymentPlanFields.ofGiftMembership).Bool And mvClassFields(PaymentPlanFields.ofOneYearGift).Bool Then
          'automatic cancellation of a gifted, one-year, group membership
          vPPUpdateFields.Add("cancelled_on", CDBField.FieldTypes.cftDate, mvClassFields(PaymentPlanFields.ofRenewalDate).Value)
        Else
          vPPUpdateFields.Add("cancelled_on", CDBField.FieldTypes.cftDate, pCancellationDate)
        End If
        vPPUpdateFields.Add("cancelled_by", CDBField.FieldTypes.cftCharacter, pLogname)
        If Len(pCancellationSource) > 0 Then vPPUpdateFields.Add("cancellation_source", CDBField.FieldTypes.cftCharacter, pCancellationSource)
        With mvClassFields
          .Item(PaymentPlanFields.ofCancellationReason).Value = vPPUpdateFields.Item("cancellation_reason").Value
          .Item(PaymentPlanFields.ofCancelledOn).Value = vPPUpdateFields.Item("cancelled_on").Value
          .Item(PaymentPlanFields.ofCancelledBy).Value = vPPUpdateFields.Item("cancelled_by").Value
          If vPPUpdateFields.Exists("cancellation_source") Then .Item(PaymentPlanFields.ofCancellationSource).Value = vPPUpdateFields.Item("cancellation_source").Value
        End With
      End If

      If ((pType And PaymentPlanCancellationTypes.pctAutoPayment) > 0 OrElse (pType And PaymentPlanCancellationTypes.pctPaymentPlan) > 0) Then
        If vAPContact.Existing Then vAPContact.Save()
        If vAPOrganisation.Existing Then vAPOrganisation.Save()
      End If

      vPPUpdateFields.Add("bankers_order", CDBField.FieldTypes.cftCharacter, mvClassFields(PaymentPlanFields.ofBankersOrder).Value)
      vPPUpdateFields.Add("direct_debit", CDBField.FieldTypes.cftCharacter, mvClassFields(PaymentPlanFields.ofDirectDebit).Value)
      vPPUpdateFields.Add("credit_card", CDBField.FieldTypes.cftCharacter, mvClassFields(PaymentPlanFields.ofCreditCard).Value)
      vPPUpdateFields.Add("covenant", CDBField.FieldTypes.cftCharacter, mvClassFields(PaymentPlanFields.ofCovenant).Value)
      If vNewOrderType <> CDBEnvironment.ppType.pptNull Then
        vPPUpdateFields.Add("order_type", CDBField.FieldTypes.cftCharacter, SetPPType(vNewOrderType))
        mvClassFields.Item(PaymentPlanFields.ofOrderType).Value = vPPUpdateFields.Item("order_type").Value
      End If
      If (((pType And PaymentPlanCancellationTypes.pctAutoPayment) = PaymentPlanCancellationTypes.pctAutoPayment) Or ((pType And PaymentPlanCancellationTypes.pctCovenant) = PaymentPlanCancellationTypes.pctCovenant And (pType And PaymentPlanCancellationTypes.pctAutoPayment) = PaymentPlanCancellationTypes.pctAutoPayment)) And Not ((pType And PaymentPlanCancellationTypes.pctPaymentPlan) = PaymentPlanCancellationTypes.pctPaymentPlan) Then
        vPPUpdateFields.Add("payment_method", CDBField.FieldTypes.cftCharacter, mvEnv.GetConfig("pm_cash"))
        mvClassFields.Item(PaymentPlanFields.ofPaymentMethod).Value = vPPUpdateFields.Item("payment_method").Value
      End If

      If (((pType And PaymentPlanCancellationTypes.pctAutoPayment) = PaymentPlanCancellationTypes.pctAutoPayment) And Not ((pType And PaymentPlanCancellationTypes.pctPaymentPlan) = PaymentPlanCancellationTypes.pctPaymentPlan)) And pRemoveFixedAmount Then
        If mvDetails.Count() = 0 Then InitPaymentPlanDetails(mvEnv, PlanNumber)
        For Each vPPD In mvDetails
          If Len(vPPD.Amount) > 0 Then vPPDAmountCount = vPPDAmountCount + 1
          If Not vPPD.Product.Donation And Len(vPPD.Amount) > 0 Then
            vPPDAmountRemoved = True
            vPPD.Amount = ""
          End If
          vPPD.SaveChanges()
        Next vPPD
        If (vPPDAmountCount = 0 Or (vPPDAmountCount > 0 And vPPDAmountRemoved)) And Len(mvClassFields(PaymentPlanFields.ofAmount).Value) > 0 Then
          'Clear payment plan's Amount when (1) none of the details have Amount set -OR- (2) at least one detail has had Amount unset
          'Shouldn't clear the payment plan's Amount if all of the details are donations w/ Amount set
          vPPUpdateFields.Add("amount", CDBField.FieldTypes.cftNumeric)
          mvClassFields.Item(PaymentPlanFields.ofAmount).Value = ""
        End If
      End If

      vConn.UpdateRecords("orders", vPPUpdateFields, vWhereFields)
      If mvClassFields.CreateAmendmentHistory(mvEnv, ClassFields.AmendmentHistoryCreation.ahcDefault) Then
        If vJournalNumber = 0 Then vJournalNumber = mvEnv.AddJournalRecord(JournalTypes.jnlPayPlan, JournalOperations.jnlUpdate, mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue, mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue), 0, 0, pBatchNumber, pTransactionNumber)
        AddAmendmentHistory(vJournalNumber)
      End If

      If pUpdateDetailsSource Then
        'Update the source on the Details lines to the source on the Pay Plan
        'Used when just an auto pay method has been cancelled
        vPPDUpdateFields.Add("source", CDBField.FieldTypes.cftCharacter, Source)
        With vWhereFields
          .Clear()
          .Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
        End With
        vConn.UpdateRecords("order_details", vPPDUpdateFields, vWhereFields)
      End If

      If vStartTransaction Then vConn.CommitTransaction()

      '-----------------------------------------------------------------
      'Now Regenerate the OPS, if required
      '-----------------------------------------------------------------
      If vRegenerateOPS Then
        If PlanType = CDBEnvironment.ppType.pptLoan Then
          CalculateLoanInterest(pLogname, False)
        Else
          RegenerateScheduledPayments(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrAutoPayMethodCancel, pCancellationDate, True, True, pLogname)
        End If
      ElseIf (pType And PaymentPlanCancellationTypes.pctPaymentPlan) > 0 AndAlso PlanType <> CDBEnvironment.ppType.pptLoan Then
        Dim vPayPlanChange As PaymentPlanChange = New PaymentPlanChange(mvEnv, Me)
        vPayPlanChange.GenerateChangesFromBalance(CDate(pCancellationDate), True)
        vPayPlanChange.SaveChanges()
      End If
    End Sub

    ''' <summary>
    ''' The order number associated with this payment plan.
    ''' </summary>
    Public ReadOnly Property OrderNumber As Integer
      Get
        Return mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue
      End Get
    End Property

    ''' <summary>The current term start date of the payment plan.</summary>
    ''' <remarks>If renewal pending and the renewal date is on or before today, the renewal date is the start date of the term, 
    ''' otherwise it is the renewal date minus the length of the term.
    ''' <see cref="CalculateRenewalDate">CalulateRenewalDate</see> is used the perform the calculation of the result in the second case.</remarks>
    Public ReadOnly Property TermStartDate As Date
      Get
        Dim vResult As String = ""
        If Me.RenewalPending = True AndAlso Today >= CDate(RenewalDate) Then
          vResult = RenewalDate
        Else
          vResult = CalculateRenewalDate(Me.RenewalDate, False)
        End If
        Return Date.Parse(vResult)
      End Get
    End Property

    ''' <summary>The current term end date of the payment plan.</summary>
    ''' <remarks>If renewal pending and the renewal date is on or before today, the renewal date is the end date of the term, 
    ''' otherwise it is the renewal date plus the length of the term.
    ''' <see cref="CalculateRenewalDate">CalulateRenewalDate</see> is used the perform the calculation of the result in the first case.</remarks>
    Public ReadOnly Property TermEndDate As Date
      Get
        Dim vResult As String = ""
        If Me.RenewalPending = True AndAlso Today >= CDate(RenewalDate) Then
          vResult = CalculateRenewalDate(Me.RenewalDate, True)
        Else
          vResult = RenewalDate
        End If
        Return Date.Parse(vResult)
      End Get
    End Property

    Private Sub CancelCategories(ByRef pEnv As CDBEnvironment, ByRef pContactType As Contact.ContactTypes, ByRef pWhereFields As CDBFields, ByRef pCancelDate As String, ByRef pLogname As String)
      Dim vCC As ContactCategory
      If pContactType = Contact.ContactTypes.ctcOrganisation Then
        vCC = New OrganisationCategory(pEnv)
      Else
        vCC = New ContactCategory(pEnv)
      End If

      Dim vSQLStatement As New SQLStatement(pEnv.Connection, vCC.FieldNames, vCC.AliasedTableName, pWhereFields)
      Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
      While vRS.Fetch
        If pContactType = Contact.ContactTypes.ctcOrganisation Then
          vCC = New OrganisationCategory(pEnv)
        Else
          vCC = New ContactCategory(pEnv)
        End If
        vCC.InitFromRecordSet(vRS)
        vCC.Cancel(pCancelDate)
        If vCC.IsValidForUpdate Then
          vCC.Save(pLogname)
        End If
      End While
      vRS.CloseRecordSet()
    End Sub

    Public Sub CancelMember(ByRef pMembershipNumber As Integer, ByRef pType As PaymentPlanCancellationTypes, ByRef pCancellationReason As String, ByRef pStatus As String, ByRef pCancellationReasonDesc As String, ByRef pLogname As String, ByRef pCancellationSource As String, ByVal pStatusDate As String)
      CancelMember(pMembershipNumber, pType, pCancellationReason, pStatus, pCancellationReasonDesc, pLogname, pCancellationSource, pStatusDate, True, False, False, 0)
    End Sub
    Public Sub CancelMember(ByRef pMembershipNumber As Integer, ByRef pType As PaymentPlanCancellationTypes, ByRef pCancellationReason As String, ByRef pStatus As String, ByRef pCancellationReasonDesc As String, ByRef pLogname As String, ByRef pCancellationSource As String, ByVal pStatusDate As String, ByVal pReAssignJointData As Boolean)
      CancelMember(pMembershipNumber, pType, pCancellationReason, pStatus, pCancellationReasonDesc, pLogname, pCancellationSource, pStatusDate, pReAssignJointData, False, False, 0)
    End Sub
    Public Sub CancelMember(ByRef pMembershipNumber As Integer, ByRef pType As PaymentPlanCancellationTypes, ByRef pCancellationReason As String, ByRef pStatus As String, ByRef pCancellationReasonDesc As String, ByRef pLogname As String, ByRef pCancellationSource As String, ByVal pStatusDate As String, ByVal pReAssignJointData As Boolean, ByVal pReplacingMember As Boolean)
      CancelMember(pMembershipNumber, pType, pCancellationReason, pStatus, pCancellationReasonDesc, pLogname, pCancellationSource, pStatusDate, pReAssignJointData, pReplacingMember, False, 0)
    End Sub
    Public Sub CancelMember(ByRef pMembershipNumber As Integer, ByRef pType As PaymentPlanCancellationTypes, ByRef pCancellationReason As String, ByRef pStatus As String, ByRef pCancellationReasonDesc As String, ByRef pLogname As String, ByRef pCancellationSource As String, ByVal pStatusDate As String, ByVal pReAssignJointData As Boolean, ByVal pReplacingMember As Boolean, ByVal pChangeDDPayer As Nullable(Of Boolean), ByVal pDirectDebitNewPayerContactNumber As Integer)
      Dim vConn As CDBConnection
      Dim vCancelUpdateFields As New CDBFields
      Dim vSubsWhereFields As New CDBFields
      Dim vODWhereFields As New CDBFields
      Dim vODChargeWhereFields As New CDBFields
      Dim vODChargeUpdateFields As New CDBFields
      Dim vODJointWhereFields As New CDBFields
      Dim vODJointUpdateFields As New CDBFields
      Dim vODAssocWhereFields As New CDBFields
      Dim vODAssocUpdateFields As New CDBFields
      Dim vODAssocDeleteFields As New CDBFields
      Dim vOrderWhereFields As New CDBFields
      Dim vOrderUpdateFields As New CDBFields
      Dim vRecordSet As CDBRecordSet
      Dim vODChargeDetail As Integer
      Dim vDetailBalanceSum As Double
      Dim vWhere As String
      Dim vDetailLine As PaymentPlanDetail
      Dim vMainMembershipType As New MembershipType(mvEnv)
      Dim vUpdateOrder As Boolean
      Dim vBalanceChange As Double
      Dim vNewRenewalAmount As Double
      Dim vNewFrequencyAmount As Double
      Dim vNewBalance As Double
      Dim vAssocODNumber As Integer
      Dim vOrderAssocODNumber As Integer
      Dim vWhereString As String
      Dim vRemainingContactNumber As Integer
      Dim vRemainingContact As New Contact(mvEnv)
      Dim vType As PaymentPlanCancellationTypes
      Dim vCancelMember As Boolean
      Dim vTransStarted As Boolean
      Dim vODSubsDetailNumbers As String = ""
      Dim vMember As Member

      mvMembershipNumber = pMembershipNumber
      vMember = Member

      If pType = PaymentPlanCancellationTypes.pctMembership Then
        'Should have gone directly to Cancel anyway!!
        Cancel(PaymentPlanCancellationTypes.pctPaymentPlan, pCancellationReason, pStatus, pCancellationReasonDesc, pLogname, pCancellationSource, 0, 0, pStatusDate)
      Else
        If pReplacingMember Then
          'Added this to prevent the next IFs from cancelling the entire membership
          vCancelMember = True
        ElseIf vMember.MembershipType.MembersPerOrder = 1 And Not vMember.MembershipType.IsAssociateType And Len(vMember.MembershipType.AssociateMembershipType) = 0 Then
          'We should cancel the whole Membership
          'Just check that the member record we just read is not already cancelled
          'This could happen if due to crap data we had a group membership with a membership type or membersperorder = 1 and not an associate
          If Len(vMember.CancellationReason) = 0 Then
            Cancel(PaymentPlanCancellationTypes.pctPaymentPlan, pCancellationReason, pStatus, pCancellationReasonDesc, pLogname, pCancellationSource, 0, 0, pStatusDate)
          End If
        ElseIf mvEnv.Connection.GetCount("members", Nothing, "order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND contact_number <> " & vMember.ContactNumber & " AND cancellation_reason IS NULL") = 0 Then
          'This is the last Member in the Group, cancel whole Payment Plan
          Cancel(PaymentPlanCancellationTypes.pctPaymentPlan, pCancellationReason, pStatus, pCancellationReasonDesc, pLogname, pCancellationSource, 0, 0, pStatusDate)
        Else
          vCancelMember = True
        End If
        If vCancelMember Then
          '-----------------------------------------------------------------
          'We are cancelling a Member from a Membership; Setup
          '-----------------------------------------------------------------
          vWhereString = "INSERT INTO order_detail_arrears (order_number,detail_number) SELECT order_number,detail_number FROM order_details WHERE order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue & " AND contact_number = " & vMember.ContactNumber & " AND detail_number NOT IN ( %s ) AND balance > 0"

          If mvDetails Is Nothing Then
            InitPaymentPlanDetails(mvEnv, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
          Else
            'From MembershipSuspension, mvDetails.Count = 0
            If mvDetails.Count() = 0 Then InitPaymentPlanDetails(mvEnv, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
          End If

          vConn = mvEnv.Connection

          vODChargeDetail = 1

          vCancelUpdateFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, pCancellationReason)
          vCancelUpdateFields.Add("cancelled_on", CDBField.FieldTypes.cftDate, TodaysDate)
          vCancelUpdateFields.Add("cancelled_by", CDBField.FieldTypes.cftCharacter, pLogname)
          If Len(pCancellationSource) > 0 Then vCancelUpdateFields.Add("cancellation_source", CDBField.FieldTypes.cftCharacter, pCancellationSource)

          vSubsWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).Value)
          vSubsWhereFields.Add("contact_number", CDBField.FieldTypes.cftLong, vMember.ContactNumber)

          vODWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).Value)
          vODWhereFields.Add("contact_number", CDBField.FieldTypes.cftLong, vMember.ContactNumber)
          vODWhereFields.Add("detail_number", vODChargeDetail, CDBField.FieldWhereOperators.fwoNotEqual)

          vODChargeWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).Value)
          vODChargeWhereFields.Add("detail_number", CDBField.FieldTypes.cftInteger, vODChargeDetail)

          vOrderWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).Value)

          If vMember.MembershipType.IsAssociateType Then
            vMainMembershipType.Init(vConn.GetValue("SELECT membership_type FROM membership_types mt WHERE associate_membership_type = '" & vMember.MembershipTypeCode & "'"))

            vAssocODNumber = 0
            vOrderAssocODNumber = 0
            For Each vDetailLine In mvDetails
              If ((vDetailLine.ProductCode = vMember.MembershipType.FirstPeriodsProduct And vDetailLine.RateCode = vMember.MembershipType.FirstPeriodsRate) Or (vDetailLine.ProductCode = vMember.MembershipType.SubsequentPeriodsProduct And vDetailLine.RateCode = vMember.MembershipType.SubsequentPeriodsRate)) Then
                If vDetailLine.ContactNumber = vMember.ContactNumber Then
                  vAssocODNumber = vDetailLine.DetailNumber
                Else
                  vOrderAssocODNumber = vDetailLine.DetailNumber
                End If
              End If
              If vAssocODNumber > 0 Then Exit For
            Next vDetailLine
            If vAssocODNumber = 0 Then vAssocODNumber = vOrderAssocODNumber 'Associate dod not have a detail record, but some other Associate did so use that one
          End If

          'Get subscription detail numbers and check whether PaymentPlan needs updating
          For Each vDetailLine In mvDetails
            If vDetailLine.ContactNumber = vMember.ContactNumber Then
              If vDetailLine.SubscriptionNumber > 0 Then
                vODSubsDetailNumbers = vODSubsDetailNumbers & vDetailLine.DetailNumber & ","
              End If
            End If
          Next vDetailLine
          If Right(vODSubsDetailNumbers, 1) = "," Then vODSubsDetailNumbers = Left(vODSubsDetailNumbers, Len(vODSubsDetailNumbers) - 1)

          'Sum existing order details, excluding detail number 1
          vDetailBalanceSum = 0
          vWhere = " order_number = " & PlanNumber & " AND detail_number <> " & vODChargeDetail & " AND contact_number = " & vMember.ContactNumber
          vRecordSet = vConn.GetRecordSet("SELECT SUM (od.balance) AS  balance_sum FROM order_details od WHERE " & vWhere)
          If vRecordSet.Fetch() = True Then vDetailBalanceSum = vRecordSet.Fields(1).DoubleValue
          vRecordSet.CloseRecordSet()

          'Validate whether the DD payer is to be changed
          Dim vNewDDPayer As Contact = Nothing
          If pChangeDDPayer.HasValue = False AndAlso pReplacingMember = True Then pChangeDDPayer = False
          If pChangeDDPayer.HasValue = False AndAlso ((pType And PaymentPlanCancellationTypes.pctAutoPayment) = PaymentPlanCancellationTypes.pctAutoPayment) Then pChangeDDPayer = False
          If pChangeDDPayer.HasValue = True AndAlso pChangeDDPayer.Value = False AndAlso pDirectDebitNewPayerContactNumber <> 0 Then pDirectDebitNewPayerContactNumber = 0
          ValidateChangeDDPayer(vMember, vNewDDPayer, pCancellationReason, pChangeDDPayer, pDirectDebitNewPayerContactNumber, Nothing)

          If Not vConn.InTransaction Then
            vTransStarted = True
            vConn.StartTransaction()
          End If

          If vAssocODNumber > 0 Then
            ' We are cancelling an Associate Member from Membership
            If UCase(mvEnv.GetConfig("cancel_assoc_member_method")) = "UPDATEPRC" Then
              'Update the detail line
              vODAssocUpdateFields.Add("contact_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofContactNumber).Value)
              vODAssocUpdateFields.Add("address_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofAddressNumber).Value)
              vODAssocUpdateFields.Add("product", CDBField.FieldTypes.cftCharacter, vMainMembershipType.CancelledAssociateProduct)
              vODAssocUpdateFields.Add("rate", CDBField.FieldTypes.cftCharacter, vMainMembershipType.CancelledAssociateRate)

              vODAssocWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).Value)
              vODAssocWhereFields.Add("detail_number", CDBField.FieldTypes.cftInteger, vAssocODNumber)

              vConn.UpdateRecords("order_details", vODAssocUpdateFields, vODAssocWhereFields, False)
            Else
              'Delete the detail line
              vDetailLine = CType(mvDetails.Item(GetDetailKeyFromLineNo(vAssocODNumber)), PaymentPlanDetail)
              If vDetailLine.Balance > 0 Then vUpdateOrder = True

              vODAssocDeleteFields.Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
              vODAssocDeleteFields.Add("detail_number", CDBField.FieldTypes.cftLong, vAssocODNumber)

              vConn.DeleteRecords("order_details", vODAssocDeleteFields)
            End If
          End If

          vConn.UpdateRecords("subscriptions", vCancelUpdateFields, vSubsWhereFields, False)

          With vMember.MembershipType
            If .IsAssociateType = False And (.MembersPerOrder = 0 Or .MembersPerOrder = 2 Or pReplacingMember = True) Then
              ' We are cancelling an individual from a group/Joint Membership or Replacing a Member
              ' Delete Order Details for this Contact, having totalled Balances.
              If .MembersPerOrder = 0 Then
                vConn.ExecuteSQL(Replace(vWhereString, "%s", CStr(vODChargeDetail)))
                vODWhereFields.Add("balance", CDBField.FieldTypes.cftNumeric, "0", CDBField.FieldWhereOperators.fwoEqual)
              End If

              vConn.DeleteRecords("order_details", vODWhereFields, False)

              If .ChargeIndividualMembers = "Y" Or .MembersPerOrder = 2 Then
                If vDetailBalanceSum > 0 Then
                  vUpdateOrder = True
                End If
              Else
                vDetailLine = CType(mvDetails.Item(1), PaymentPlanDetail)
                'Check for quantity > 1
                If vDetailLine.Quantity > 1 Then
                  vODChargeUpdateFields.Add("quantity", CDBField.FieldTypes.cftInteger, vDetailLine.Quantity - 1)
                  If vDetailLine.Balance > vDetailLine.CurrentPrice Then
                    vUpdateOrder = True
                    vODChargeUpdateFields.Add("balance", CDBField.FieldTypes.cftInteger, vDetailLine.Balance - vDetailLine.CurrentPrice)
                  End If
                  vConn.UpdateRecords("order_details", vODChargeUpdateFields, vODChargeWhereFields)
                End If
              End If
              If .MembersPerOrder = 2 And pReAssignJointData = True Then
                'Joint Membership - reassign Payment Plan,any Joint Details & Subs to
                'remaining Member

                'Ref BR 8009: Only if PP currently assigned to Joint; i.e. not if Gifted.
                If Payer.ContactType = Contact.ContactTypes.ctcJoint Then
                  vRemainingContactNumber = IntegerValue(vConn.GetValue("SELECT contact_number FROM members WHERE order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND membership_type = '" & .MembershipTypeCode & "' AND contact_number <> " & vMember.ContactNumber & " AND cancellation_reason IS NULL"))
                  If vRemainingContactNumber > 0 Then
                    vRemainingContact.Init(vRemainingContactNumber)
                    If Payer.ContactNumber = vMember.Contact.GetJointContact(vRemainingContact).ContactNumber Then
                      vODJointWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).Value)
                      vODJointWhereFields.Add("contact_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofContactNumber).Value)
                      vODJointUpdateFields.Add("contact_number", CDBField.FieldTypes.cftLong, vRemainingContactNumber)
                      vConn.UpdateRecords("order_details", vODJointUpdateFields, vODJointWhereFields, False)

                      vConn.UpdateRecords("subscriptions", vODJointUpdateFields, vODJointWhereFields, False)

                      vOrderUpdateFields.Add("contact_number", CDBField.FieldTypes.cftLong, vRemainingContactNumber)
                      If Not vUpdateOrder Then
                        vConn.UpdateRecords("orders", vOrderUpdateFields, vOrderWhereFields)
                      End If
                    End If
                  End If
                End If
              End If
            ElseIf .IsAssociateType Then
              'Delete any details that are not the membership charging line
              vConn.ExecuteSQL(Replace(vWhereString, "%s", vODChargeDetail & "," & vAssocODNumber))
              If vAssocODNumber > 0 Then vODWhereFields.Add("detail_number#2", vAssocODNumber, CDBField.FieldWhereOperators.fwoNotEqual)
              If UCase(mvEnv.GetConfig("cancel_assoc_member_method")) = "UPDATEPRC" Then
                'Only delete if the Balance is zero
                vODWhereFields.Add("balance", CDBField.FieldTypes.cftNumeric, "0", CDBField.FieldWhereOperators.fwoEqual)
              End If
              vConn.DeleteRecords("order_details", vODWhereFields, False)
            End If
          End With

          'Always delete detail lines if subscriptions were cancelled
          If Len(vODSubsDetailNumbers) > 0 Then
            If vODWhereFields.Exists("balance") Then vODWhereFields.Remove(("balance"))
            'If vODWhereFields.Exists("detail_number") then remove it from collection, then add it back in but with a different WhereOperator (it may have already been removed)
            If vODWhereFields.Exists("detail_number") Then vODWhereFields.Remove(("detail_number"))
            vODWhereFields.Add("detail_number", CDBField.FieldTypes.cftLong, vODSubsDetailNumbers, CDBField.FieldWhereOperators.fwoIn)
            vConn.DeleteRecords("order_details", vODWhereFields, False)
          End If

          'Now see if we need to update the PaymentPlan
          vNewBalance = 0
          vWhere = " order_number = " & PlanNumber & " AND detail_number <> " & vODChargeDetail & " AND"
          If vAssocODNumber > 0 Then vWhere = vWhere & " (detail_number = " & vAssocODNumber & " Or "
          vWhere = vWhere & " contact_number = " & vMember.ContactNumber
          If vAssocODNumber > 0 Then vWhere = vWhere & ")"
          vRecordSet = vConn.GetRecordSet("SELECT SUM (od.balance) AS  balance_sum FROM order_details od WHERE " & vWhere)
          If vRecordSet.Fetch() = True Then vNewBalance = vRecordSet.Fields(1).DoubleValue
          vRecordSet.CloseRecordSet()
          vBalanceChange = FixTwoPlaces(vDetailBalanceSum - vNewBalance)
          If vBalanceChange <> 0 Then vUpdateOrder = True

          If vUpdateOrder Then
            If ContainsUnprocessedPayments() Then
              RaiseError(DataAccessErrors.daeCannotCancelMemberUnprocPayments)
            Else
              vNewRenewalAmount = RenewalAmount - vBalanceChange
              vNewBalance = Balance - vBalanceChange
              RenewalAmount = vNewRenewalAmount
              SetBalance(vNewBalance) 'This will re-calculate the FrequencyAmount
              vNewFrequencyAmount = FrequencyAmount

              vOrderUpdateFields.Add("renewal_amount", CDBField.FieldTypes.cftNumeric, vNewRenewalAmount)
              vOrderUpdateFields.Add("frequency_amount", CDBField.FieldTypes.cftNumeric, vNewFrequencyAmount)
              vOrderUpdateFields.Add("balance", CDBField.FieldTypes.cftNumeric, vNewBalance)
              vOrderUpdateFields.Add("detail_lines", CDBField.FieldTypes.cftInteger, vConn.GetCount("order_details", Nothing, "order_number = " & PlanNumber))
              vConn.UpdateRecords("orders", vOrderUpdateFields, vOrderWhereFields)

              RegenerateScheduledPayments(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance, TodaysDate)
            End If
          End If

          If (pType And PaymentPlanCancellationTypes.pctAutoPayment) > 0 OrElse (pType And PaymentPlanCancellationTypes.pctCovenant) > 0 OrElse (pType And PaymentPlanCancellationTypes.pctDirectDebit) > 0 Or (pType And PaymentPlanCancellationTypes.pctCCCA) > 0 Or (pType And PaymentPlanCancellationTypes.pctStandingOrder) > 0 Then
            'User has also opted to cancel Auto Payment and/or Covenant; use Cancel method to do this.
            If (pType And PaymentPlanCancellationTypes.pctAutoPayment) > 0 Then vType = vType Or PaymentPlanCancellationTypes.pctAutoPayment
            If (pType And PaymentPlanCancellationTypes.pctCovenant) > 0 Then vType = vType Or PaymentPlanCancellationTypes.pctCovenant
            If (pType And PaymentPlanCancellationTypes.pctStandingOrder) > 0 Then vType = vType Or PaymentPlanCancellationTypes.pctStandingOrder
            If (pType And PaymentPlanCancellationTypes.pctDirectDebit) > 0 Then vType = vType Or PaymentPlanCancellationTypes.pctDirectDebit
            If (pType And PaymentPlanCancellationTypes.pctCCCA) > 0 Then vType = vType Or PaymentPlanCancellationTypes.pctCCCA
            Cancel(vType, pCancellationReason, "", pCancellationReasonDesc, pLogname, pCancellationSource)
          End If
          CancelMemberData(mvEnv, (vMember.MembershipNumber), (vMember.MemberNumber), (vMember.ContactNumber), (vMember.AddressNumber), pCancellationReason, vMember.MembershipType.Activity, vMember.MembershipType.ActivityValue, vMember.MembershipType.MailingSuppression, pLogname, True, (vMember.ContactType), pStatus, pCancellationReasonDesc, pCancellationSource, pStatusDate, vMember.Joined)

          If pChangeDDPayer.Value = True AndAlso vNewDDPayer.Existing = True Then
            If DirectDebit.Existing Then
              mvDirectDebit.ChangePayer(vNewDDPayer)
              mvDirectDebit.Save(mvEnv.User.UserID, True)
            End If
          End If

          If vTransStarted Then vConn.CommitTransaction()
        End If
      End If
    End Sub
    Public Sub Delete(ByRef pPaymentPlanNumber As Integer)
      Dim vWhereFields As New CDBFields
      Dim vConn As CDBConnection
      vConn = mvEnv.Connection
      vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, pPaymentPlanNumber)
      vConn.StartTransaction()
      vConn.DeleteRecords("members", vWhereFields, False)
      vConn.DeleteRecords("orders", vWhereFields, False)
      vConn.DeleteRecords("order_details", vWhereFields, False)
      vConn.DeleteRecords("subscriptions", vWhereFields, False)
      vConn.DeleteRecords("order_payment_history", vWhereFields, False)
      vConn.DeleteRecords("order_payment_schedule", vWhereFields, False)
      vConn.DeleteRecords("credit_card_authorities", vWhereFields, False)
      vConn.DeleteRecords("direct_debits", vWhereFields, False)
      vConn.DeleteRecords("bankers_orders", vWhereFields, False)
      vConn.CommitTransaction()
    End Sub
    Public Sub DeleteDetail(ByRef pDetailNumber As Integer)
      Dim vPPD As PaymentPlanDetail

      vPPD = CType(mvDetails.Item(GetDetailKeyFromLineNo(pDetailNumber)), PaymentPlanDetail)
      vPPD.GetSubscriptionData(False, False) 'A subscription may have been cancelled so repopulate the PPD's subscription data
      If vPPD.SubscriptionNumber > 0 And Len(vPPD.CancellationReason) = 0 Then
        'We have what appears to be a live subscription, determine if its Valid To has been reached and if it hasn't raise an error
        If DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(TodaysDate()), CDate(vPPD.SubscriptionValidTo)) >= 0 Then RaiseError(DataAccessErrors.daeCanNotDeleteSubscriptionDetail)
      End If
      mvDetails.Remove(GetDetailKeyFromLineNo(pDetailNumber))
      ReNumberDetailKeys()
      mvClassFields(PaymentPlanFields.ofDetailLines).Value = CStr(CDbl(mvClassFields(PaymentPlanFields.ofDetailLines).Value) - 1)
    End Sub

    Public Sub GetDetail(ByRef pLineNumber As Integer)
      'Assume the line number already exists
      mvDetail = CType(mvDetails.Item(GetDetailKeyFromLineNo(pLineNumber)), PaymentPlanDetail)
    End Sub

    Public Sub GetDetailBalance(ByRef pDetailTypes As PaymentPlanDetail.PaymentPlanDetailTypes, ByRef pBalance As Double, ByRef pArrears As Double, ByRef pPrice As Double, ByRef pDate As Date, ByRef pAmount As String)
      'Returns the total Balance and Arrears for the lines types specified
      Dim vDetail As PaymentPlanDetail

      pBalance = 0 'These might come in with a value
      pArrears = 0
      pPrice = 0
      pAmount = ""
      For Each vDetail In mvDetails
        With vDetail
          If (.DetailType And pDetailTypes) > 0 Then
            pBalance = pBalance + .Balance
            pArrears = pArrears + .Arrears
            pPrice = FixTwoPlaces(pPrice + .Price(pDate, mvEnv.VATRate(.Product.ProductVatCategory, Payer.VATCategory)))
            If Len(.Amount) > 0 Then pAmount = CStr(Val(pAmount) + Val(.Amount))
          End If
        End With
      Next vDetail
    End Sub

    Public Sub GetMember(ByRef pContactNumber As Integer)
      Dim vMember As Member
      'Move to that contact number's current member

      For Each vMember In mvCurrentMembers
        If vMember.ContactNumber = pContactNumber Then
          mvMember = vMember
          mvMembershipNumber = mvMember.MembershipNumber
          Exit Sub
        End If
      Next vMember
    End Sub

    Private Function GetProductNumber(ByRef pUsesProductNumbers As cdbValueKnownConstants, ByRef pProduct As String, ByRef pProductNumber As Integer) As Integer
      Dim vProductNumber As Integer
      Dim vWhereFields As New CDBFields

      vProductNumber = pProductNumber
      If pUsesProductNumbers = cdbValueKnownConstants.cdbVKCunknown Then
        vProductNumber = 0
        vWhereFields.Clear()
        vWhereFields.Add("product", CDBField.FieldTypes.cftCharacter, pProduct)
        vWhereFields.Add("uses_product_numbers", CDBField.FieldTypes.cftCharacter, "Y")
        If mvEnv.Connection.GetCount("products", vWhereFields) > 0 Then
          vProductNumber = mvEnv.GetProductNumber(pProduct)
        End If
      ElseIf pUsesProductNumbers = cdbValueKnownConstants.cdbVKCYes And pProductNumber = 0 Then
        vProductNumber = mvEnv.GetProductNumber(pProduct)
      ElseIf pUsesProductNumbers = cdbValueKnownConstants.cdbVKCNo Then
        vProductNumber = 0
      End If
      GetProductNumber = vProductNumber
    End Function

    Public Function GetRecordSetFields(ByVal pRSType As PayPlanRecordSetTypes) As String
      Dim vFields As String = ""
      Dim vOPS As New OrderPaymentSchedule

      vFields = "o.order_number,"
      If (pRSType And PayPlanRecordSetTypes.pprstNumbers) > 0 Then
        vFields = vFields & "o.contact_number,o.address_number,"
      End If
      If (pRSType And PayPlanRecordSetTypes.pprstType) > 0 Then
        vFields = vFields & "order_type,bankers_order,credit_card,direct_debit,covenant,"
        vFields = vFields & "o.expiry_date,order_date,"
        If mvClassFields(PaymentPlanFields.ofLoan).InDatabase Then vFields &= "loan,"
      End If
      If (pRSType And PayPlanRecordSetTypes.pprstPayment) > 0 Then
        vFields = vFields & "payment_method,frequency_amount,o.balance,renewal_amount,payment_frequency,"
      End If
      If (pRSType And PayPlanRecordSetTypes.pprstCancel) > 0 Then
        vFields = vFields & "next_payment_due,renewal_date,o.cancellation_reason,o.cancelled_by,o.cancelled_on,"
        If mvClassFields(PaymentPlanFields.ofCancellationSource).InDatabase Then vFields = vFields & "o.cancellation_source,"
      End If
      If (pRSType And PayPlanRecordSetTypes.pprstRemainder) > 0 Then
        vFields = vFields & "o.amount,o.arrears,o.branch,detail_lines,"
        vFields = vFields & "gift_membership,in_advance,o.membership_type,next_detail_line,"
        vFields = vFields & "last_payment,last_payment_date,o.future_cancellation_reason,o.future_cancellation_date,"
        vFields = vFields & "number_of_reminders,one_year_gift,"
        vFields = vFields & "order_term,payment_number,reason_for_despatch,"
        vFields = vFields & "renewal_pending,o.source,their_reference,"
        vFields = vFields & "o.amended_on,o.amended_by,sales_contact_number,"
        vFields = vFields & "o.sales_group,reprint,"
        vFields = vFields & "order_term_units,"
        vFields = vFields & "renewal_change_reason,renewal_changed_by,renewal_changed_on,renewal_change_value,reset_order_term,"
        vFields = vFields & "o.future_cancellation_source,"
        vFields = vFields & "provisional,giver_contact_number,o.created_by,o.created_on,confirmed_on,"
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataMembershipProRating) Then vFields = vFields & "first_amount,"
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments) Then vFields = vFields & "payment_schedule_amended_on, o.claim_day,"
        If mvClassFields(PaymentPlanFields.ofEligibleForGiftAid).InDatabase Then vFields = vFields & "o.eligible_for_gift_aid,"
        If mvClassFields(PaymentPlanFields.ofPackToMember).InDatabase Then
          vFields = vFields & "pack_to_member,"
        ElseIf mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPayPlanPackToDonor) Then
          vFields = vFields & "pack_to_donor,"
        End If
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataDutchSupport) Then vFields = vFields & "one_off_payment,"
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPaymentPlanStartMonth) Then vFields = vFields & "start_month,"
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbCancelOneYearGiftApm) Then vFields = vFields & "cancel_one_year_gift_apm,"
      End If
      If (pRSType And PayPlanRecordSetTypes.pprstDetailLines) > 0 Then
        If (pRSType And PayPlanRecordSetTypes.pprstDetailProduct) > 0 Then
          vFields = vFields & mvDetail.GetRecordSetFields(PaymentPlanDetail.PaymentPlanDetailRecordSetTypes.odrtMain Or PaymentPlanDetail.PaymentPlanDetailRecordSetTypes.odrtProduct)
        Else
          vFields = vFields & mvDetail.GetRecordSetFields(PaymentPlanDetail.PaymentPlanDetailRecordSetTypes.odrtMain)
        End If
      End If
      If (pRSType And PayPlanRecordSetTypes.pprstAmendedAlias) > 0 Then
        If Right(vFields, 1) <> "," Then vFields = vFields & ","
        vFields = vFields & "o.amended_on AS o_amended_on, o.amended_by AS o_amended_by,"
      End If
      If (pRSType And PayPlanRecordSetTypes.pprstPaymentSchedules) > 0 Then
        vOPS.Init(mvEnv)
        vFields = vFields & vOPS.GetRecordSetFields(OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtMain)
      End If

      If Right(vFields, 1) = "," Then vFields = Left(vFields, Len(vFields) - 1)
      Return vFields
    End Function

    Public Sub Init(ByVal pEnv As CDBEnvironment, Optional ByRef pPlanNumber As Integer = 0)
      Dim vRecordSet As CDBRecordSet

      mvEnv = pEnv
      InitClassFields()
      If pPlanNumber > 0 Then
        vRecordSet = pEnv.Connection.GetRecordSet("SELECT " & GetRecordSetFields(PayPlanRecordSetTypes.pprstAll Or PayPlanRecordSetTypes.pprstDetailLines) & " FROM orders o,order_details od,products p,rates r WHERE o.order_number = " & pPlanNumber & " AND od.order_number = o.order_number AND p.product = od.product AND r.product = od.product and r.rate = od.rate ORDER BY detail_number")
        If vRecordSet.Fetch() = True Then
          InitFromRecordSet(pEnv, vRecordSet, PayPlanRecordSetTypes.pprstAll Or PayPlanRecordSetTypes.pprstDetailLines)
        Else
          SetDefaults()
        End If
        vRecordSet.CloseRecordSet()
      Else
        SetDefaults()
      End If
    End Sub

    Public Sub InitFromRecordSet(ByVal pEnv As CDBEnvironment, ByVal pRecordSet As CDBRecordSet, ByVal pRSType As PayPlanRecordSetTypes)
      Dim vFields As CDBFields
      Dim vEndOfDetails As Boolean
      'If pprstDetailLines is set we are expecting the recordset to have multiple records
      'per Pay Plan as we expect a join to Order Details,
      'we therefore only load detail lines and nextrec the Recordset until the
      'Order Number changes
      'The pprstPaymentSchedules Recordset type SHOULD NOT BE USED Here, use the InitWithOPSFromRecordSet method for that.

      mvEnv = pEnv
      InitClassFields()
      vFields = pRecordSet.Fields
      mvExisting = True
      With mvClassFields
        'Always include the primary key attributes
        .SetItem(PaymentPlanFields.ofOrderNumber, vFields)
        'Modify below to handle each recordset type as required
        If (pRSType And PayPlanRecordSetTypes.pprstNumbers) > 0 Then
          .SetItem(PaymentPlanFields.ofContactNumber, vFields)
          .SetItem(PaymentPlanFields.ofAddressNumber, vFields)
        End If
        If (pRSType And PayPlanRecordSetTypes.pprstType) > 0 Then
          .SetItem(PaymentPlanFields.ofOrderType, vFields)
          .SetItem(PaymentPlanFields.ofBankersOrder, vFields)
          .SetItem(PaymentPlanFields.ofCreditCard, vFields)
          .SetItem(PaymentPlanFields.ofDirectDebit, vFields)
          .SetItem(PaymentPlanFields.ofCovenant, vFields)
          .SetItem(PaymentPlanFields.ofExpiryDate, vFields)
          If mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "Y" Or mvClassFields(PaymentPlanFields.ofCreditCard).Value = "Y" Or mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "Y" Then
            mvAutoPayment = True
          Else
            mvAutoPayment = False
          End If
          .SetItem(PaymentPlanFields.ofOrderDate, vFields)
          .SetOptionalItem(PaymentPlanFields.ofLoan, vFields)
        End If
        If (pRSType And PayPlanRecordSetTypes.pprstPayment) > 0 Then
          .SetItem(PaymentPlanFields.ofPaymentMethod, vFields)
          .SetItem(PaymentPlanFields.ofFrequencyAmount, vFields)
          .SetItem(PaymentPlanFields.ofBalance, vFields)
          .SetItem(PaymentPlanFields.ofRenewalAmount, vFields)
          .SetItem(PaymentPlanFields.ofPaymentFrequency, vFields)
        End If

        If (pRSType And PayPlanRecordSetTypes.pprstCancel) > 0 Then
          .SetItem(PaymentPlanFields.ofNextPaymentDue, vFields)
          .SetItem(PaymentPlanFields.ofRenewalDate, vFields)
          .SetItem(PaymentPlanFields.ofCancellationReason, vFields)
          .SetItem(PaymentPlanFields.ofCancelledBy, vFields)
          .SetItem(PaymentPlanFields.ofCancelledOn, vFields)
          .SetOptionalItem(PaymentPlanFields.ofCancellationSource, vFields)
        End If

        If (pRSType And PayPlanRecordSetTypes.pprstRemainder) > 0 Then
          .SetItem(PaymentPlanFields.ofAmount, vFields)
          .SetItem(PaymentPlanFields.ofArrears, vFields)
          .SetItem(PaymentPlanFields.ofBranch, vFields)
          .SetItem(PaymentPlanFields.ofDetailLines, vFields)
          .SetItem(PaymentPlanFields.ofGiftMembership, vFields)
          .SetItem(PaymentPlanFields.ofInAdvance, vFields)
          .SetItem(PaymentPlanFields.ofMembershipType, vFields)
          .SetItem(PaymentPlanFields.ofNextDetailLine, vFields)
          .SetItem(PaymentPlanFields.ofLastPayment, vFields)
          .SetItem(PaymentPlanFields.ofLastPaymentDate, vFields)
          .SetItem(PaymentPlanFields.ofFutureCancellationReason, vFields)
          .SetItem(PaymentPlanFields.ofFutureCancellationDate, vFields)
          .SetItem(PaymentPlanFields.ofNumberOfReminders, vFields)
          .SetItem(PaymentPlanFields.ofOneYearGift, vFields)
          .SetItem(PaymentPlanFields.ofOrderTerm, vFields)
          .SetItem(PaymentPlanFields.ofPaymentNumber, vFields)
          .SetItem(PaymentPlanFields.ofReasonForDespatch, vFields)
          .SetItem(PaymentPlanFields.ofRenewalPending, vFields)
          .SetItem(PaymentPlanFields.ofSource, vFields)
          .SetItem(PaymentPlanFields.ofTheirReference, vFields)
          .SetItem(PaymentPlanFields.ofAmendedOn, vFields)
          .SetItem(PaymentPlanFields.ofAmendedBy, vFields)
          .SetItem(PaymentPlanFields.ofSalesContactNumber, vFields)
          .SetItem(PaymentPlanFields.ofSalesGroup, vFields)
          .SetItem(PaymentPlanFields.ofReprint, vFields)
          .SetOptionalItem(PaymentPlanFields.ofOrderTermUnits, vFields)
          .SetOptionalItem(PaymentPlanFields.ofRenewalDateChangeReason, vFields)
          .SetOptionalItem(PaymentPlanFields.ofRenewalDateChangedBy, vFields)
          .SetOptionalItem(PaymentPlanFields.ofRenewalDateChangedOn, vFields)
          .SetOptionalItem(PaymentPlanFields.ofRenewalDateChangedValue, vFields)
          .SetOptionalItem(PaymentPlanFields.ofResetOrderTerm, vFields)
          .SetOptionalItem(PaymentPlanFields.ofFutureCancellationSource, vFields)
          .SetOptionalItem(PaymentPlanFields.ofProvisional, vFields)
          .SetOptionalItem(PaymentPlanFields.ofGiverContactNumber, vFields)
          .SetOptionalItem(PaymentPlanFields.ofCreatedBy, vFields)
          .SetOptionalItem(PaymentPlanFields.ofCreatedOn, vFields)
          .SetOptionalItem(PaymentPlanFields.ofConfirmedOn, vFields)
          .SetOptionalItem(PaymentPlanFields.ofFirstAmount, vFields)
          .SetOptionalItem(PaymentPlanFields.ofPaymentScheduleAmendedOn, vFields)
          .SetOptionalItem(PaymentPlanFields.ofClaimDay, vFields)
          .SetOptionalItem(PaymentPlanFields.ofEligibleForGiftAid, vFields)
          .SetOptionalItem(PaymentPlanFields.ofPackToMember, vFields)
          .SetOptionalItem(PaymentPlanFields.ofOneOffPayment, vFields)
          .SetOptionalItem(PaymentPlanFields.ofStartMonth, vFields)
          .SetOptionalItem(PaymentPlanFields.ofCancelOneYearGiftApm, vFields)
        End If
        If (pRSType And PayPlanRecordSetTypes.pprstAmendedAlias) > 0 Then
          mvClassFields(PaymentPlanFields.ofAmendedBy).SetValue = vFields("o_amended_by").Value
          mvClassFields(PaymentPlanFields.ofAmendedOn).SetValue = vFields("o_amended_on").Value
        End If
      End With
      'Add Detail Lines
      If (pRSType And PayPlanRecordSetTypes.pprstDetailLines) > 0 Then
        While pRecordSet.Status() = True And Not vEndOfDetails
          AddDetailFromRecordSet(pRecordSet, pRSType)
          pRecordSet.Fetch()
          If (pRecordSet.Fields("order_number").IntegerValue <> PlanNumber) Then vEndOfDetails = True
        End While
        If (pRSType And PayPlanRecordSetTypes.pprstDetailProduct) > 0 Then
          'Hack to get payment frequency info
          GetPaymentFrequencyDetails()
        End If
        If PlanType = CDBEnvironment.ppType.pptMember Then
          mvClassFields.Item(PaymentPlanFields.ofMembershipProduct).SetValue = CType(mvDetails.Item(GetDetailKeyFromLineNo(1)), PaymentPlanDetail).ProductCode
          mvClassFields.Item(PaymentPlanFields.ofMembershipRate).SetValue = CType(mvDetails.Item(GetDetailKeyFromLineNo(1)), PaymentPlanDetail).RateCode
        End If
      End If
      If Len(MembershipType.FixedCycle) > 0 Then mvFixedRenewalCycle = MembershipType.FixedCycle
      mvInitialized = True
    End Sub

    Private Sub InitPaymentPlanDetails(ByVal pEnv As CDBEnvironment, ByRef pPlanNumber As Integer)
      Dim vRecordSet As CDBRecordSet
      Dim vFields As String = ""

      If mvEnv Is Nothing Then
        mvEnv = pEnv
        InitClassFields()
      End If
      mvDetails = Nothing
      mvDetails = New Collection
      If pPlanNumber > 0 Then
        vFields = GetRecordSetFields(PayPlanRecordSetTypes.pprstDetailLines)
        vFields = Replace(vFields, "o.", "od.") 'Change alias for order_number to be from the order_details table
        vRecordSet = pEnv.Connection.GetRecordSet("SELECT " & vFields & " FROM order_details od, products p,rates r WHERE od.order_number = " & pPlanNumber & " AND p.product = od.product AND r.product = od.product and r.rate = od.rate ORDER BY detail_number")
        While vRecordSet.Fetch() = True
          AddDetailFromRecordSet(vRecordSet, PayPlanRecordSetTypes.pprstDetailLines)
        End While
        vRecordSet.CloseRecordSet()
      End If
    End Sub

    Public Function IsCurrentMembersMembershipType(ByRef pMembershipType As String, Optional ByVal pMembershipRateCode As String = "") As Boolean
      Dim vPPD As PaymentPlanDetail
      Dim vFound As Boolean
      Dim vMember As Member

      If mvCurrentMembers.Count() > 0 Then
        For Each vMember In mvCurrentMembers
          If pMembershipType = vMember.MembershipType.MembershipTypeCode Then vFound = True
        Next vMember
      End If

      If Len(pMembershipRateCode) > 0 And vFound = True Then
        If CMTProportionBalance <> CMTProportionBalanceTypes.cmtNone Then
          If mvDetails.Count() = 0 Then InitPaymentPlanDetails(mvEnv, PlanNumber)
          vPPD = CType(mvDetails.Item(GetDetailKeyFromLineNo(1)), PaymentPlanDetail)
          If pMembershipRateCode <> vPPD.RateCode Then vFound = False
        End If
      End If

      Return vFound
    End Function

    Public Function IsSubscription(ByRef pSubscription As cdbValueKnownConstants, ByRef pProduct As String) As cdbValueKnownConstants
      Dim vWhereFields As New CDBFields
      Dim vKnown As cdbValueKnownConstants

      vKnown = pSubscription
      If vKnown = cdbValueKnownConstants.cdbVKCunknown Then
        vKnown = cdbValueKnownConstants.cdbVKCNo
        vWhereFields.Add("product", CDBField.FieldTypes.cftCharacter, pProduct)
        vWhereFields.Add("subscription", CDBField.FieldTypes.cftCharacter, "Y")
        If mvEnv.Connection.GetCount("products", vWhereFields) > 0 Then vKnown = cdbValueKnownConstants.cdbVKCYes
      End If
      IsSubscription = vKnown
    End Function

    Public Sub LoadMembers()
      'Load all current members into the .CurrentMembers collection
      'and set the .Member to the first member in the collection
      'If not an existing Payment Plan or no Members found
      '.Member is set up with standard defaults and .CurrentMembers has this added to it
      Dim vRecordSet As CDBRecordSet
      Dim vMember As New Member

      mvCurrentMembers = New Collection
      mvMember = Nothing
      mvMembershipNumber = 0

      If mvExisting Then
        vMember.Init(mvEnv)
        vRecordSet = mvEnv.Connection.GetRecordSet("SELECT " & vMember.GetRecordSetFields(Member.MemberRecordSetTypes.mrtAll Or Member.MemberRecordSetTypes.mrtContactDetails) & " FROM members m, membership_types mt, contacts c WHERE order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND cancellation_reason IS NULL AND m.membership_type = mt.membership_type AND m.contact_number = c.contact_number ORDER BY card_order, date_of_birth")
        'ab : the following two lines were added for BR 9028, but subsequently removed as they caused Oracle data to always be sorted by d.o.b. desc even when all values were not null
        'vSQL = "SELECT " & vMember.GetRecordSetFields(mrtAll + mrtContactDetails) & " FROM members m, membership_types mt, contacts c WHERE order_number = " & mvClassFields(ofOrderNumber).Value & " AND cancellation_reason IS NULL AND m.membership_type = mt.membership_type AND m.contact_number = c.contact_number ORDER BY card_order, date_of_birth " & mvEnv.Connection.DBSortByNullsFirst & ""
        'Set vRecordSet = mvEnv.Connection.GetRecordSet(vSQL)

        While vRecordSet.Fetch() = True
          vMember = New Member
          With vMember
            .InitFromRecordSet(mvEnv, vRecordSet, Member.MemberRecordSetTypes.mrtAll Or Member.MemberRecordSetTypes.mrtContactDetails)
            'Plus the order stuff the member class needs to know
            .PaymentPlanAutoPayMethod = mvAutoPayment
            .PaymentPlanRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
            .PaymentPlanRenewalPending = mvClassFields(PaymentPlanFields.ofRenewalPending).Bool
            .PaymentPlanTerm = mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue
            .PaymentPlantermUnits = TermUnits
            .PaymentPlanFixedRenewalCycle = FixedRenewalCycle
          End With
          mvCurrentMembers.Add(vMember)
        End While
        vRecordSet.CloseRecordSet()
      End If

      If mvCurrentMembers.Count() > 0 Then
        mvMember = CType(mvCurrentMembers.Item(1), Access.Member)
        mvMembershipNumber = mvMember.MembershipNumber
      Else
        vMember.Init(mvEnv)
        mvMember = vMember
      End If
    End Sub

    Public Sub LoadSubscriptions()
      'Load all current subscriptions into the .CurrentSubscriptions collection
      Dim vRecordSet As CDBRecordSet
      Dim vSubscription As New Subscription

      mvCurrentSubscriptions = New Collection

      If mvExisting Then
        vSubscription.Init(mvEnv)
        vRecordSet = mvEnv.Connection.GetRecordSet("SELECT " & vSubscription.GetRecordSetFields(Subscription.SubscriptionRecordSetTypes.subrstAll) & " FROM subscriptions WHERE order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND cancellation_reason IS NULL")
        While vRecordSet.Fetch() = True
          vSubscription.InitFromRecordSet(mvEnv, vRecordSet, Subscription.SubscriptionRecordSetTypes.subrstAll)
          mvCurrentSubscriptions.Add(vSubscription)
          vSubscription = New Subscription
        End While
        vRecordSet.CloseRecordSet()
      End If
    End Sub

    Public Sub WriteMailMergeOutput(ByVal pFileName As String)
      Using vTextWriter As IO.StreamWriter = New IO.StreamWriter(pFileName, True)
        vTextWriter.Write(MailMergeItem(mvClassFields(PaymentPlanFields.ofOrderNumber).Value))
        vTextWriter.Write(MailMergeItem((mvClassFields(PaymentPlanFields.ofRenewalDate).Value)))
        vTextWriter.Write(MailMergeItem(mvClassFields(PaymentPlanFields.ofBalance).Value))
        vTextWriter.Write(MailMergeItem(mvEnv.GetDescription("payment_frequencies", "payment_frequency", mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value)))
        vTextWriter.Write(MailMergeItem(mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value))
        vTextWriter.Write(MailMergeItem(mvClassFields(PaymentPlanFields.ofRenewalAmount).Value))
        vTextWriter.Write(MailMergeItem(mvClassFields(PaymentPlanFields.ofArrears).Value))
        vTextWriter.Write(MailMergeItem(mvClassFields(PaymentPlanFields.ofInAdvance).Value))
        vTextWriter.Write(MailMergeItem((mvClassFields(PaymentPlanFields.ofTheirReference).Value)))

        'Product Description - Extra Key
        Dim vProductDesc As String = ""
        Dim vProductExtraKey As String = ""
        Dim vRecordSet As CDBRecordSet = mvEnv.Connection.GetRecordSet("SELECT product_desc,extra_key,percentage,detail_number FROM order_details od, products p, vat_rate_identification vri, vat_rates vr WHERE od.order_number = " & PlanNumber & " AND od.product = p.product AND p.product_vat_category = vri.product_vat_category AND vri.contact_vat_category = '" & Payer.VATCategory & "' AND vri.vat_rate = vr.vat_rate ORDER BY detail_number")
        While vRecordSet.Fetch() = True
          '	If Len(vProductDesc) Then vProductDesc = vProductDesc & Chr(10)
          '	vProductDesc = vProductDesc & vRecordSet.Fields("product_desc").Value
          '	If Len(vProductExtraKey) Then vProductExtraKey = vProductExtraKey & Chr(10)
          '	vProductExtraKey = vProductExtraKey & vRecordSet.Fields("extra_key").Value
          '	vDetail = mvDetails.Item(GetDetailKeyFromLineNo(CShort(vRecordSet.Fields("detail_number").Value)))
          '	vDetail.VATPercentage = Val(vRecordSet.Fields("percentage").Value)
        End While
        vRecordSet.CloseRecordSet()
        vTextWriter.Write(MailMergeItem(vProductDesc))
        vTextWriter.Write(MailMergeItem(vProductExtraKey))

        ''Distribution Codes & Descriptions
        Dim vValues As String = ""
        Dim vLastcode As String = ""
        Dim vDescriptions As String = ""
        Dim vLastdesc As String = ""
        For Each vDetail As PaymentPlanDetail In mvDetails
          With vDetail
            If .DistributionCode.Length > 0 Then
              vValues = vValues & .DistributionCode
              If .DistributionCode <> vLastcode Then 'only retrieve the desc when the code differs from the last one
                vLastdesc = mvEnv.GetDescription("distribution_codes", "distribution_code", .DistributionCode)
              End If
              vDescriptions = vDescriptions & vLastdesc
              vLastcode = .DistributionCode
            End If
            vValues = vValues & vbLf
            vDescriptions = vDescriptions & vbLf
          End With
        Next vDetail
        'remove the extra line feeds
        vValues = Left(vValues, InStrRev(vValues, vbLf) - 1)
        vDescriptions = Left(vDescriptions, InStrRev(vDescriptions, vbLf) - 1)
        vTextWriter.Write(MailMergeItem(vValues))
        vTextWriter.Write(MailMergeItem(vDescriptions))

        'Quantity
        vValues = ""
        For Each vDetail As PaymentPlanDetail In mvDetails
          If vValues.Length > 0 Then vValues = vValues & Chr(10)
          vValues = vValues & vDetail.Quantity
        Next vDetail
        vTextWriter.Write(MailMergeItem(vValues))

        'Balance
        vValues = ""
        Dim vVatAmount As Double
        For Each vDetail As PaymentPlanDetail In mvDetails
          If vValues.Length > 0 Then vValues = vValues & Chr(10)
          vValues = vValues & vDetail.Balance
          vVatAmount = vVatAmount + vDetail.CalculateVATAmount(0)
        Next vDetail
        vTextWriter.Write(MailMergeItem(vValues))

        'This year
        vValues = ""
        For Each vDetail As PaymentPlanDetail In mvDetails
          If vValues.Length > 0 Then vValues = vValues & Chr(10)
          vValues = vValues & (vDetail.Balance - vDetail.Arrears)
        Next vDetail
        vTextWriter.Write(MailMergeItem(vValues))

        'Delivery Info: Label Name,Position,Organisation,Address Line 1,2,3,Town,County,Postcode,Country
        Dim vAValues(10) As String
        Dim vFirstRow As Boolean = True
        Dim vDeliveryContact As Contact = New Contact(mvEnv)
        vDeliveryContact.Init()
        Dim vSQL As String = "SELECT " & vDeliveryContact.GetRecordSetFields(Contact.ContactRecordSetTypes.crtNumber Or Contact.ContactRecordSetTypes.crtName Or Contact.ContactRecordSetTypes.crtAddress Or Contact.ContactRecordSetTypes.crtAddressCountry)
        vRecordSet = mvEnv.Connection.GetRecordSet(vSQL & " FROM order_details od, contacts c, addresses a, countries ct WHERE od.order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND od.contact_number = c.contact_number AND od.address_number = a.address_number AND ct.country = a.country ORDER BY detail_number")
        While vRecordSet.Fetch() = True
          vDeliveryContact.InitFromRecordSet(mvEnv, vRecordSet, Contact.ContactRecordSetTypes.crtNumber Or Contact.ContactRecordSetTypes.crtName Or Contact.ContactRecordSetTypes.crtAddress Or Contact.ContactRecordSetTypes.crtAddressCountry)
          If Not vFirstRow Then
            For vIndex As Integer = 0 To 9
              vAValues(vIndex) = vAValues(vIndex) & Chr(10)
            Next
          End If
          vFirstRow = False
          With vDeliveryContact
            vAValues(0) = vAValues(0) & .LabelName
            vAValues(1) = vAValues(1) & .Position
            vAValues(2) = vAValues(2) & .OrganisationName
            vAValues(3) = vAValues(3) & .Address.MergeAddressLine1
            vAValues(4) = vAValues(4) & .Address.MergeAddressLine2
            vAValues(5) = vAValues(5) & .Address.MergeAddressLine3
            vAValues(6) = vAValues(6) & .Address.Town
            vAValues(7) = vAValues(7) & .Address.County
            vAValues(8) = vAValues(8) & .Address.Postcode
            vAValues(9) = vAValues(9) & .Address.BuildingNumber
            If Not .Address.UK Then vAValues(10) = vAValues(10) & .Address.CountryDescription
          End With
        End While
        vRecordSet.CloseRecordSet()

        For vIndex As Integer = 0 To 10
          vTextWriter.Write(MailMergeItem(vAValues(vIndex)))
        Next

        'Get Payment Information
        GetPaymentFrequencyDetails()
        ReDim vAValues(3)
        vFirstRow = True
        Dim vNextDate As Date = CDate(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value)
        Dim vLastDate As Date = CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)
        If vLastDate = vNextDate Then
          If mvClassFields(PaymentPlanFields.ofOrderTermUnits).Value = "M" Then
            vLastDate = DateAdd(Microsoft.VisualBasic.DateInterval.Month, CDbl(mvClassFields(PaymentPlanFields.ofOrderTerm).Value), vNextDate)
          Else
            vLastDate = DateAdd(Microsoft.VisualBasic.DateInterval.Year, CDbl(mvClassFields(PaymentPlanFields.ofOrderTerm).Value), vNextDate)
          End If
        End If
        Dim vBalance As Double = CDbl(mvClassFields(PaymentPlanFields.ofBalance).Value)
        'Set up the payment balance for each product
        For Each vDetail As PaymentPlanDetail In mvDetails
          vDetail.PaymentBalance = vDetail.Balance
        Next vDetail
        'Now calculate all the payments
        While (vNextDate < vLastDate) And (vBalance > 0)
          If Not vFirstRow Then
            For vIndex As Integer = 0 To 3
              vAValues(vIndex) = vAValues(vIndex) & Chr(10)
            Next
          End If
          vFirstRow = False
          Dim vAmount As Double = CDbl(mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value)
          If vBalance < vAmount Then vAmount = vBalance
          vAValues(0) = vAValues(0) & vNextDate.ToString(CAREDateFormat)
          vAValues(1) = vAValues(1) & vAmount
          Dim vGrossAmount As Double = vAmount
          'Now assign the payment to a product
          Dim vVATPayment As Double = 0
          For Each vDetail As PaymentPlanDetail In mvDetails
            Dim vPayment As Double
            If vDetail.PaymentBalance > 0 And vAmount > 0 Then
              If vAmount >= vDetail.PaymentBalance Then
                vPayment = vDetail.PaymentBalance 'Paid off vDetail.PaymentBalance
                vAmount = FixTwoPlaces(vAmount - vDetail.PaymentBalance)
                vDetail.PaymentBalance = 0
              Else
                vPayment = vAmount 'Paid off vAmount
                vDetail.PaymentBalance = FixTwoPlaces(vDetail.PaymentBalance - vAmount)
                vAmount = 0
              End If
              vVatAmount = Int(((vPayment - (vPayment / (1 + vDetail.VatPercentage / 100))) * 100) + 0.5) / 100
            Else
              vVatAmount = 0
            End If
            vVATPayment = FixTwoPlaces(vVATPayment + vVatAmount)
          Next vDetail
          vAValues(3) = vAValues(3) & vVATPayment
          vAValues(2) = vAValues(2) & FixTwoPlaces(vGrossAmount - vVATPayment)
          vBalance = FixTwoPlaces(vBalance - CDbl(mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value))
          vNextDate = DateAdd(Microsoft.VisualBasic.DateInterval.Month, mvPaymentFreqInterval, vNextDate)
        End While
        For vIndex As Integer = 0 To 3
          vTextWriter.Write(MailMergeItem(vAValues(vIndex)))
        Next

        vTextWriter.Write(MailMergeItem(Payer.ContactNumber.ToString))
        If Payer.ContactType <> Contact.ContactTypes.ctcOrganisation Then
          vTextWriter.Write(MailMergeItem(Payer.LabelName))
          vTextWriter.Write(MailMergeItem(Payer.TitleName))
          vTextWriter.Write(MailMergeItem(Payer.Initials))
          vTextWriter.Write(MailMergeItem(Payer.Forenames))
          vTextWriter.Write(MailMergeItem(Payer.Surname))
          vTextWriter.Write(MailMergeItem(Payer.PrefixHonorifics))
          vTextWriter.Write(MailMergeItem(Payer.Honorifics))
        Else
          vTextWriter.Write(MailMergeItem(""))
          vTextWriter.Write(MailMergeItem(""))
          vTextWriter.Write(MailMergeItem(""))
          vTextWriter.Write(MailMergeItem(""))
          vTextWriter.Write(MailMergeItem(""))
          vTextWriter.Write(MailMergeItem(""))
          vTextWriter.Write(MailMergeItem(""))
        End If
        vTextWriter.Write(MailMergeItem(Payer.Salutation))
        vTextWriter.Write(MailMergeItem(Payer.InformalSalutation))
        vTextWriter.Write(MailMergeItem(Payer.Position))
        vTextWriter.Write(MailMergeItem(Payer.OrganisationName))
        vTextWriter.Write(MailMergeItem(Payer.Address.MergeAddressLine1))
        vTextWriter.Write(MailMergeItem(Payer.Address.MergeAddressLine2))
        vTextWriter.Write(MailMergeItem(Payer.Address.MergeAddressLine3))
        vTextWriter.Write(MailMergeItem(Payer.Address.Town))
        vTextWriter.Write(MailMergeItem(Payer.Address.County))
        vTextWriter.Write(MailMergeItem(Payer.Address.Postcode))
        vTextWriter.Write(MailMergeItem(Payer.Address.BuildingNumber))
        vTextWriter.Write(MailMergeItem(Payer.Address.Sortcode))
        'If the country is not the default country then show the country description
        If Not Payer.Address.UK Then
          If Payer.Address.CountryDescription.Length = 0 Then
            vTextWriter.Write(MailMergeLastItem(Payer.Address.NonDefaultCountryDescription))
          Else
            vTextWriter.Write(MailMergeLastItem(Payer.Address.CountryDescription))
          End If
        Else
          vTextWriter.Write(MailMergeLastItem(""))
        End If
        vTextWriter.WriteLine()
        vTextWriter.Close()
      End Using
    End Sub

    Private Function MailMergeLastItem(ByVal pItem As String) As String
      Return String.Format("{0}{1}{0}", Chr(34), pItem)
    End Function

    Private Function MailMergeItem(ByVal pItem As String) As String
      Return String.Format("{0}{1}{0},", Chr(34), pItem)
    End Function

    Public Sub RemoveLines(ByRef pDetailTypes As PaymentPlanDetail.PaymentPlanDetailTypes, ByRef pNewMembershipType As MembershipType, ByRef pCancellationReason As String, ByVal pZeroBalanceLinesOnly As Boolean)
      'Removed Pay Plan detail lines of the specified Types
      Dim vDetail As PaymentPlanDetail
      Dim vSubscription As Subscription

      For Each vDetail In Details 'mvDetails
        With vDetail
          If (.DetailType And pDetailTypes) > 0 Then
            If Not pNewMembershipType Is Nothing Then
              'CMTing sort out the Subscriptions
              'Copied code from Trader
              If (.DetailType And PaymentPlanDetail.PaymentPlanDetailTypes.ppdltEntitlement) > 0 And CurrentSubscriptions.Count() > 0 Then
                'CHUI - Checks to see if entitlement for old membership type is also an
                '       entitlement for new membership type and either cancels or updates
                '       subscription
                'GUI  - Replicating this is very difficult so GUI just cancels all old subs
                '       and adds all new ones whichout checking for consistency
                For Each vSubscription In CurrentSubscriptions
                  If vSubscription.ContactNumber = .ContactNumber And vSubscription.Product = .ProductCode And Len(vSubscription.CancellationReason) = 0 Then
                    'Found the corresponding Subscription
                    vSubscription.Cancel(pCancellationReason)
                    Exit For
                  End If
                Next vSubscription
              End If
            End If
            If .Arrears > 0 Then
              'Line to be removed is in arrears - can't remove it just flag as an arrears line
              .SetDetailArrears("")
            ElseIf (.Balance > 0 AndAlso pZeroBalanceLinesOnly = True) Then
              .SetAmount(CStr(0))
            Else
              mvDetails.Remove((GetDetailKeyFromLineNo(.DetailNumber)))
              ReNumberDetailKeys()
            End If
          End If
        End With
      Next vDetail
    End Sub

    Public Sub Save(Optional ByRef pAmendedBy As String = "", Optional ByRef pAudit As Boolean = False, Optional ByRef pBatchNumber As Integer = 0, Optional ByRef pTransactionNumber As Integer = 0)
      Dim vDetail As PaymentPlanDetail
      Dim vSubsFields As New CDBFields
      Dim vTransaction As Boolean
      Dim vSubscription As Subscription
      Dim vTable As String
      Dim vUpdateFields As CDBFields
      Dim vWhereFields As CDBFields
      Dim vExpiryDate As String
      Dim vSchCrnReason As OrderPaymentSchedule.OrderPaymentScheduleCreationReasons
      Dim vJournalNumber As Integer
      Dim vOPSDate As String

      SetValid(PaymentPlanFields.ofAll)
      ValidateValues() 'Check we have the essential order bits & debug.assert if not

      If mvPaymentPlanChange Is Nothing Then mvPaymentPlanChange = New PaymentPlanChange(mvEnv, Me, DoubleValue(mvClassFields.Item(PaymentPlanFields.ofBalance).SetValue))

      If Not mvEnv.Connection.InTransaction Then
        vTransaction = True
        mvEnv.Connection.StartTransaction()
      End If

      If mvExisting And mvDetails.Count() > 0 Then
        'If an existing Plan and we have loaded the details
        'Remove all old order_details and order_detail_arrears records
        mvEnv.Connection.DeleteRecords("order_details", mvClassFields.WhereFields, False)
        mvEnv.Connection.DeleteRecords("order_detail_arrears", mvClassFields.WhereFields, False)
      End If

      If mvDetails.Count() > 0 Then
        'If we have Order Details insert them
        For Each vDetail In mvDetails
          If vDetail.PlanNumber = 0 Then vDetail.SetPaymentPlanAndDetailNumbers(mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue, vDetail.DetailNumber)
          If (vDetail.Existing = False OrElse mvExisting = False) And vDetail.Subscription Then
            If mvSubsExtension Or (mvClassFields(PaymentPlanFields.ofBalance).DoubleValue < mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue _
            And Not (PreviousRenewalCycle And (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0)) _
            Or mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue = 0 Or AutoSubsPaymentMethod() Then
              'BR14008: Added WriteOffOldCost condition as Balance could be less than Renewal Amount but Subscription may not be required
              'Create subscription record
              vSubscription = New Subscription
              vSubscription.InitNewFromPayPlanDetail(mvEnv, vDetail, (mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value), Subscription.SubscriptionRecordSetTypes.subrstAll)
              If Len(vDetail.AmendedBy) > 0 And Len(vDetail.AmendedOn) > 0 Then vSubscription.SetAmended((vDetail.AmendedOn), (vDetail.AmendedBy))
              'If balance is 0, set valid to to be RenewalDate - 1 day (same as Batch Update if this had just been paid)
              If mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = 0 Then
                If mvClassFields(PaymentPlanFields.ofMembershipType).Value.Length > 0 Then
                  vExpiryDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, DateAdd(Microsoft.VisualBasic.DateInterval.Month, MembershipType.SuspensionGrace, CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value))))
                Else
                  vExpiryDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)))
                End If
                vSubscription.SetValidTo((mvClassFields(PaymentPlanFields.ofOrderDate).Value), vExpiryDate)
              End If
              mvCurrentSubscriptions.Add(vSubscription)
            End If
          ElseIf vDetail.Existing And vDetail.Subscription And vDetail.SubscriptionDataAmended <> PaymentPlanDetail.SubscriptionDataTypes.sdtNone Then
            If mvCurrentSubscriptions.Count() = 0 Then LoadSubscriptions()
            For Each vSubscription In mvCurrentSubscriptions
              If vDetail.SubscriptionNumber = vSubscription.SubscriptionNumber Then
                If (vDetail.SubscriptionDataAmended And PaymentPlanDetail.SubscriptionDataTypes.sdtContactNumber) > 0 Then vSubscription.ContactNumber = vDetail.ContactNumber
                If (vDetail.SubscriptionDataAmended And PaymentPlanDetail.SubscriptionDataTypes.sdtAddressNumber) > 0 Then vSubscription.AddressNumber = vDetail.AddressNumber
                If (vDetail.SubscriptionDataAmended And PaymentPlanDetail.SubscriptionDataTypes.sdtQuantity) > 0 Then vSubscription.Quantity = CInt(vDetail.Quantity)
                If (vDetail.SubscriptionDataAmended And PaymentPlanDetail.SubscriptionDataTypes.sdtDespatchMethod) > 0 Then vSubscription.DespatchMethod = vDetail.DespatchMethod
                If (vDetail.SubscriptionDataAmended And PaymentPlanDetail.SubscriptionDataTypes.sdtCommunicationNumber) > 0 Then vSubscription.CommunicationNumber = vDetail.CommunicationNumber
              End If
            Next vSubscription
          End If
          vDetail.Save()
        Next vDetail
      End If

      If mvCurrentSubscriptions.Count() > 0 Then
        'Subscriptions have been added
        For Each vSubscription In mvCurrentSubscriptions
          If vSubscription.Existing Then 'CMT
            vSubscription.SaveChanges(mvEnv.User.UserID)
          Else
            vSubscription.Save(mvEnv.User.UserID)
          End If
        Next vSubscription
      End If

      SetContinuousRenewal()
      UpgradePPType()

      If mvExisting And AutoPaymentStatus And mvClassFields(PaymentPlanFields.ofFrequencyAmount).ValueChanged Then
        If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          vTable = "direct_debits"
        ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          vTable = "credit_card_authorities"
        Else
          vTable = "bankers_orders"
        End If
        vUpdateFields = New CDBFields
        vUpdateFields.Add("amount", CDBField.FieldTypes.cftNumeric, mvClassFields(PaymentPlanFields.ofFrequencyAmount).DoubleValue)
        vWhereFields = New CDBFields
        With vWhereFields
          .Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue)
          .Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, "")
          .Add("amount", CDBField.FieldTypes.cftNumeric, "", CDBField.FieldWhereOperators.fwoNotEqual)
        End With
        mvEnv.Connection.UpdateRecords(vTable, vUpdateFields, vWhereFields, False) 'Don't error if update fails because variable DDs/CCCAs won't have the Amount attribute set
      End If

      'Now deal with the payment schedule
      If PlanType <> CDBEnvironment.ppType.pptLoan AndAlso mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments) Then
        If mvExisting = True And mvProcessRenewal = False And mvAutoPaymentCreated = False Then
          'Maintaining an existing Payment Plan may need scheduled payments recreated
          'But only if changed balance/frequency & for CMT
          'If mvProcessRenewal = True then R&R has already done this
          vOPSDate = TodaysDate()
          If RecreateOPS(vSchCrnReason) Then
            If mvProcessCMT Then vSchCrnReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType
            If vSchCrnReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Then
              vOPSDate = GetCMTOPSCreationDate()
            End If
            RegenerateScheduledPayments(vSchCrnReason, vOPSDate, , mvFirstCMT = False)
          End If
          If mvWriteOffMissedPayments = True AndAlso mvProcessCMT = False Then
            'Data Import & Web Services only
            Dim vWriteOff As Double = WriteOffMissedPayments(Today)
            SetWriteOffRequired(False)
          End If
        Else
          'For a new Payment Plan & adding auto payment to existing Payment Plan the schedule will be created from Trader once DD etc has also been created
        End If
      End If

      If mvExisting Then
        mvEnv.Connection.UpdateRecords("orders", mvClassFields.UpdateFields, mvClassFields.WhereFields)
        vJournalNumber = mvEnv.AddJournalRecord(JournalTypes.jnlPayPlan, JournalOperations.jnlUpdate, mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue, mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue), 0, 0, pBatchNumber, pTransactionNumber)
        If vJournalNumber > 0 And pAudit And mvClassFields.CreateAmendmentHistory(mvEnv, ClassFields.AmendmentHistoryCreation.ahcDefault) Then AddAmendmentHistory(vJournalNumber)
      Else
        mvEnv.Connection.InsertRecord("orders", mvClassFields.UpdateFields)
        mvCreated = True
        mvEnv.AddJournalRecord(JournalTypes.jnlPayPlan, JournalOperations.jnlInsert, mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue, mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue), 0, 0, pBatchNumber, pTransactionNumber)
      End If
      If vTransaction Then mvEnv.Connection.CommitTransaction()
    End Sub
    Public Function RecreateOPS() As Boolean
      Return RecreateOPS(Nothing)
    End Function
    Public Function RecreateOPS(ByRef pSchCrnReason As OrderPaymentSchedule.OrderPaymentScheduleCreationReasons) As Boolean
      If PlanType <> CDBEnvironment.ppType.pptLoan AndAlso mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments) Then
        If mvExisting = True And mvProcessRenewal = False And mvAutoPaymentCreated = False Then
          'Maintaining an existing Payment Plan may need scheduled payments recreated
          'But only if changed balance/frequency & for CMT
          'If mvProcessRenewal = True then R&R has already done this
          Dim vRecreateOPS As Boolean = False
          If (mvClassFields(PaymentPlanFields.ofMembershipType).SetValue <> mvClassFields(PaymentPlanFields.ofMembershipType).Value) Then
            vRecreateOPS = True
            If mvClassFields(PaymentPlanFields.ofMembershipType).SetValue.Length > 0 Then
              If mvProcessFutureMembership = True Then
                pSchCrnReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrFutureMemberTypeChange
              Else
                pSchCrnReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType
              End If
            Else
              pSchCrnReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance
            End If
          ElseIf (mvClassFields(PaymentPlanFields.ofPaymentFrequency).SetValue <> mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value) Then
            vRecreateOPS = True
            pSchCrnReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance
          ElseIf (mvClassFields(PaymentPlanFields.ofAmount).SetValue <> mvClassFields(PaymentPlanFields.ofAmount).Value) Then
            vRecreateOPS = True
            pSchCrnReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance
          ElseIf (Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) <> Val(mvClassFields(PaymentPlanFields.ofBalance).Value)) Then
            vRecreateOPS = True
            pSchCrnReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance
          ElseIf Balance = 0 And (Val(mvClassFields(PaymentPlanFields.ofRenewalAmount).SetValue) <> mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue) Then
            vRecreateOPS = True
            pSchCrnReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance
          ElseIf Balance = 0 AndAlso mvClassFields.Item(PaymentPlanFields.ofFrequencyAmount).ValueChanged = True AndAlso mvClassFields.Item(PaymentPlanFields.ofNextDetailLine).ValueChanged = True Then
            'Frequency Amount & number of Detail lines has changed on a fully paid Payment Plan
            vRecreateOPS = True
            pSchCrnReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance
          End If
          If vRecreateOPS = False And mvProcessCMT = True Then vRecreateOPS = True
          Return vRecreateOPS
        Else
          'For a new Payment Plan & adding auto payment to existing Payment Plan the schedule will be created from Trader once DD etc has also been created
          Return False
        End If
      Else
        Return False
      End If
    End Function
    Public Sub SaveChanges(Optional ByRef pAmendedBy As String = "", Optional ByRef pAudit As Boolean = False, Optional ByVal pJournalNumber As Integer = 0)
      Dim vCreateAH As Boolean
      UpgradePPType()
      SetContinuousRenewal()
      vCreateAH = mvClassFields.CreateAmendmentHistory(mvEnv, ClassFields.AmendmentHistoryCreation.ahcDefault)
      If pAudit And vCreateAH And mvExisting Then
        If pJournalNumber = 0 Then pJournalNumber = mvEnv.AddJournalRecord(JournalTypes.jnlPayPlan, JournalOperations.jnlUpdate, mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue, mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
        If pJournalNumber > 0 Then AddAmendmentHistory(pJournalNumber)
      End If
      SetAmended(TodaysDate, mvEnv.User.UserID)
      mvClassFields.Save(mvEnv, mvExisting, pAmendedBy, (pAudit And Not vCreateAH), pJournalNumber)
    End Sub
    Public Sub SetAutoPayMethod(ByRef pType As ppAutoPayMethods, Optional ByRef pStartDate As String = "", Optional ByRef pBankAccountCode As String = "", Optional ByVal pClaimDay As String = "")
      Dim vClaimDate As Date
      Dim vDDStartDate As Date
      Dim vStartDate As Date

      If Len(pStartDate) > 0 Then mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value = pStartDate
      If mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlAutoPayClaimDateMethod) <> "D" Then
        pClaimDay = ""
      End If

      Select Case pType
        Case ppAutoPayMethods.ppAPMSO
          mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "Y"
          mvClassFields(PaymentPlanFields.ofPaymentMethod).Value = mvEnv.GetConfig("pm_so")
          If mvStandingOrder Is Nothing Then
            mvStandingOrder = New StandingOrder
            mvStandingOrder.Init(mvEnv)
          End If

        Case ppAutoPayMethods.ppAPMDD
          mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "Y"
          mvClassFields(PaymentPlanFields.ofPaymentMethod).Value = mvEnv.GetConfig("pm_dd")
          mvClassFields(PaymentPlanFields.ofClaimDay).Value = pClaimDay
          If mvDirectDebit Is Nothing Then
            mvDirectDebit = New DirectDebit
            mvDirectDebit.Init(mvEnv)
          End If
          If mvFixedDDClaimDate And Len(pBankAccountCode) > 0 And Len(pClaimDay) > 0 Then
            Dim vBankAccount As BankAccount = mvEnv.BankAccount(pBankAccountCode)
            If mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue <> 0 AndAlso mvExisting = True AndAlso mvCreated = False Then
              vStartDate = Today
            Else
              vStartDate = CDate(mvClassFields(PaymentPlanFields.ofOrderDate).Value)
            End If
            vDDStartDate = mvEnv.GetPaymentPlanAutoPayDate(vStartDate, ppAutoPayMethods.ppAPMDD, vBankAccount)
            If Day(vStartDate) > Val(pClaimDay) Then
              vClaimDate = DateAdd(Microsoft.VisualBasic.DateInterval.Month, 1, DateSerial(Year(vStartDate), Month(vStartDate), IntegerValue(pClaimDay)))
            Else
              vClaimDate = DateSerial(Year(vStartDate), Month(vStartDate), IntegerValue(pClaimDay))
            End If

            If DateDiff(Microsoft.VisualBasic.DateInterval.Day, vClaimDate, vDDStartDate) > 0 Then vClaimDate = DateAdd(Microsoft.VisualBasic.DateInterval.Month, 1, vClaimDate)

            mvClassFields(PaymentPlanFields.ofRenewalDate).Value = CStr(vClaimDate)
            mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value = CStr(vClaimDate)
            If Not Existing And Balance = 0 Then mvClassFields(PaymentPlanFields.ofRenewalDate).Value = CDate(RenewalDate).AddYears(1).ToString(CAREDateFormat)
          End If

        Case ppAutoPayMethods.ppAPMCCCA
          mvClassFields(PaymentPlanFields.ofCreditCard).Value = "Y"
          mvClassFields(PaymentPlanFields.ofPaymentMethod).Value = mvEnv.GetConfig("pm_ccca")
          mvClassFields(PaymentPlanFields.ofClaimDay).Value = pClaimDay
          If mvCreditCardAuthority Is Nothing Then
            mvCreditCardAuthority = New CreditCardAuthority
            mvCreditCardAuthority.Init(mvEnv)
          End If
      End Select
      mvAutoPaymentCreated = True
      mvAutoPayment = True
    End Sub

    Public Sub SetCovenant(ByRef pDepositedDeed As Boolean, Optional ByRef pCovenantedAmount As Double = 0, Optional ByRef pTerm As Integer = 0)
      If pDepositedDeed Then
        mvClassFields(PaymentPlanFields.ofCovenant).Value = GetCovenantStatusCode(PaymentPlan.ppCovenant.ppcDepositedDeed)
        mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CStr(pCovenantedAmount / pTerm)
      Else
        mvClassFields(PaymentPlanFields.ofCovenant).Value = GetCovenantStatusCode(PaymentPlan.ppCovenant.ppcCovenant)
      End If
      mvCovenantCreated = True
    End Sub

    Public Sub SetDetailLineTypes(ByRef pMembershipType As String, ByRef pAssocMembershipType As String)
      Dim vRecordSet As CDBRecordSet
      Dim vPPDetail As PaymentPlanDetail
      Dim vInitialPeriod As Boolean

      'Find Incentive Line
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT detail_number, incentive_type FROM sources s, incentive_scheme_products isp, order_details od, rates r WHERE s.source = '" & mvClassFields(PaymentPlanFields.ofSource).Value & "' AND s.incentive_scheme IS NOT NULL AND isp.incentive_scheme = s.incentive_scheme AND isp.reason_for_despatch = '" & mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value & "' AND (isp.incentive_type = 'X' OR isp.incentive_type = 'I') AND od.order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND od.product = isp.product AND od.rate = isp.rate AND r.product = od.product AND r.rate = od.rate ORDER BY detail_number")
      While vRecordSet.Fetch() = True
        vPPDetail = CType(mvDetails.Item(GetDetailKeyFromLineNo(vRecordSet.Fields.Item("detail_number").IntegerValue)), PaymentPlanDetail)
        If vRecordSet.Fields.Item("incentive_type").Value = "X" Then
          vPPDetail.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltIncentive
        Else
          vPPDetail.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltCharge
          vInitialPeriod = True
        End If
      End While
      vRecordSet.CloseRecordSet()

      'Find Charge Line
      If Not vInitialPeriod Then
        vPPDetail = CType(mvDetails.Item("1"), PaymentPlanDetail)
        vPPDetail.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltCharge
      End If

      'Find Entitlement Lines
      If pMembershipType.Length > 0 Then
        vRecordSet = mvEnv.Connection.GetRecordSet("SELECT detail_number FROM order_details od, membership_entitlement me, rates r WHERE od.order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND me.product = od.product AND me.rate = od.rate AND me.membership_type = '" & pMembershipType & "' AND me.product = r.product AND me.rate = r.rate")
        While vRecordSet.Fetch() = True
          vPPDetail = CType(mvDetails.Item(GetDetailKeyFromLineNo(vRecordSet.Fields.Item("detail_number").IntegerValue)), PaymentPlanDetail)
          vPPDetail.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltEntitlement
        End While
        vRecordSet.CloseRecordSet()
        'ANDY - not quite sure why this next bit is in here, what is it trying to do???
        If pAssocMembershipType.Length > 0 Then
          vRecordSet = mvEnv.Connection.GetRecordSet("SELECT detail_number FROM order_details od, membership_types mt, rates r WHERE od.order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND ((mt.first_periods_product = od.product AND mt.first_periods_rate = od.rate) OR (mt.subsequent_periods_product = od.product AND mt.subsequent_periods_rate = od.rate)) AND mt.membership_type = '" & pAssocMembershipType & "' AND od.product = r.product AND od.rate = r.rate")
          While vRecordSet.Fetch() = True
            vPPDetail = CType(mvDetails.Item(GetDetailKeyFromLineNo(vRecordSet.Fields.Item("detail_number").IntegerValue)), PaymentPlanDetail)
            vPPDetail.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltEntitlement
          End While
          vRecordSet.CloseRecordSet()
          vRecordSet = mvEnv.Connection.GetRecordSet("SELECT detail_number FROM order_details od, membership_entitlement me, rates r WHERE od.order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).Value & " AND me.product = od.product AND me.rate = od.rate AND me.membership_type = '" & pAssocMembershipType & "' AND me.product = r.product AND me.rate = r.rate")
          While vRecordSet.Fetch() = True
            vPPDetail = CType(mvDetails.Item(GetDetailKeyFromLineNo(vRecordSet.Fields.Item("detail_number").IntegerValue)), PaymentPlanDetail)
            vPPDetail.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltEntitlement
          End While
          vRecordSet.CloseRecordSet()
        End If
      End If

      'Find Other Charge Lines
      For Each vPPDetail In mvDetails
        If vPPDetail.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltNotSet Then vPPDetail.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltOtherCharge
        'Debug.Print vPPDetail.DetailNumber & " " & vPPDetail.ProductCode & "-" & vPPDetail.Rate & " " & vPPDetail.DetailType
      Next vPPDetail
    End Sub

    Public Sub SetMember(ByRef pMembershipType As String, ByRef pBranch As String, Optional ByRef pGiftMember As Boolean = False, Optional ByRef pOneYearGift As Boolean = False, Optional ByRef pGiverContactNumber As String = "")
      mvClassFields(PaymentPlanFields.ofMembershipType).Value = pMembershipType
      mvClassFields(PaymentPlanFields.ofBranch).Value = pBranch
      mvClassFields(PaymentPlanFields.ofGiftMembership).Bool = pGiftMember
      mvClassFields(PaymentPlanFields.ofOneYearGift).Bool = pOneYearGift
      mvClassFields(PaymentPlanFields.ofGiverContactNumber).Value = pGiverContactNumber
    End Sub

    '-----------------------------------------------------------
    ' PROPERTY PROCEDURES FOLLOW
    '-----------------------------------------------------------
    Public Property AddressNumber() As Integer
      Get
        AddressNumber = mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue
      End Get
      Set(ByVal Value As Integer)
        mvClassFields(PaymentPlanFields.ofAddressNumber).Value = CStr(Value)
      End Set
    End Property

    Public ReadOnly Property Amended() As Boolean
      Get
        Dim vUpdateFields As CDBFields

        vUpdateFields = mvClassFields.UpdateFields
        If vUpdateFields.Count > 0 Then
          Amended = True
        Else
          Amended = False
        End If
      End Get
    End Property

    Public Property Amount() As String
      Get
        Amount = mvClassFields(PaymentPlanFields.ofAmount).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofAmount).Value = Value
      End Set
    End Property

    Public Property FirstAmount() As String
      Get
        FirstAmount = mvClassFields(PaymentPlanFields.ofFirstAmount).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofFirstAmount).Value = Value
      End Set
    End Property

    Public Property Arrears() As Double
      Get
        Arrears = mvClassFields(PaymentPlanFields.ofArrears).DoubleValue
      End Get
      Set(ByVal Value As Double)
        If Value >= 0 Then
          mvClassFields(PaymentPlanFields.ofArrears).DoubleValue = Value
        Else
          mvClassFields(PaymentPlanFields.ofArrears).DoubleValue = 0
        End If
      End Set
    End Property

    Public Property Balance() As Double
      Get
        Balance = mvClassFields(PaymentPlanFields.ofBalance).DoubleValue
      End Get
      Set(ByVal Value As Double)
        mvClassFields(PaymentPlanFields.ofBalance).Value = CStr(Value)
      End Set
    End Property

    Public ReadOnly Property Branch() As String
      Get
        Branch = mvClassFields(PaymentPlanFields.ofBranch).Value
      End Get
    End Property

    Public Property CancellationReason() As String
      Get
        CancellationReason = mvClassFields(PaymentPlanFields.ofCancellationReason).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofCancellationReason).Value = Value
      End Set
    End Property

    Public ReadOnly Property CancellationSource() As String
      Get
        CancellationSource = mvClassFields.Item(PaymentPlanFields.ofCancellationSource).Value
      End Get
    End Property

    Public ReadOnly Property CancelledBy() As String
      Get
        CancelledBy = mvClassFields.Item(PaymentPlanFields.ofCancelledBy).Value
      End Get
    End Property

    Public ReadOnly Property CancelledOn() As String
      Get
        CancelledOn = mvClassFields.Item(PaymentPlanFields.ofCancelledOn).Value
      End Get
    End Property

    Public ReadOnly Property FutureCancellationSource() As String
      Get
        FutureCancellationSource = mvClassFields.Item(PaymentPlanFields.ofFutureCancellationSource).Value
      End Get
    End Property

    Public Property ContactNumber() As Integer
      Get
        ContactNumber = mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue
      End Get
      Set(ByVal Value As Integer)
        mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue = Value
      End Set
    End Property

    Public ReadOnly Property Covenant() As Covenant
      Get
        If mvCovenant Is Nothing Then
          mvCovenant = New Covenant
          mvCovenant.InitFromPaymentPlan(mvEnv, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
        End If
        Covenant = mvCovenant
      End Get
    End Property

    Public ReadOnly Property CovenantStatus() As PaymentPlan.ppCovenant
      Get
        CovenantStatus = GetPPCovenant((mvClassFields(PaymentPlanFields.ofCovenant).Value))
      End Get
    End Property

    Public ReadOnly Property CreditCardAuthority() As CreditCardAuthority
      Get
        If mvCreditCardAuthority Is Nothing Then
          mvCreditCardAuthority = New CreditCardAuthority
          mvCreditCardAuthority.InitFromPaymentPlan(mvEnv, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
        End If
        CreditCardAuthority = mvCreditCardAuthority
      End Get
    End Property

    Public ReadOnly Property CreditCardStatus() As PaymentPlan.ppYesNoCancel
      Get
        CreditCardStatus = GetAutomatedPaymentStatus((mvClassFields(PaymentPlanFields.ofCreditCard).Value))
      End Get
    End Property

    Public ReadOnly Property CurrentMembers() As Collection
      Get
        If mvCurrentMembers Is Nothing Then mvCurrentMembers = New Collection
        CurrentMembers = mvCurrentMembers
      End Get
    End Property

    Public ReadOnly Property CurrentSubscriptions() As Collection
      Get
        If mvCurrentSubscriptions Is Nothing Then mvCurrentSubscriptions = New Collection
        CurrentSubscriptions = mvCurrentSubscriptions
      End Get
    End Property

    Public ReadOnly Property DetailExists(ByVal pDetailLine As Integer) As Boolean
      Get
        Return mvDetails.Contains(GetDetailKeyFromLineNo(pDetailLine))
      End Get
    End Property

    Public ReadOnly Property Detail() As PaymentPlanDetail
      Get
        Detail = mvDetail
      End Get
    End Property

    Public ReadOnly Property Details() As Collection
      Get
        Details = mvDetails
      End Get
    End Property

    Public ReadOnly Property DirectDebit() As DirectDebit
      Get
        If mvDirectDebit Is Nothing Then
          mvDirectDebit = New DirectDebit
          mvDirectDebit.InitFromPaymentPlan(mvEnv, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
        End If
        DirectDebit = mvDirectDebit
      End Get
    End Property

    Public ReadOnly Property AutoPaymentStatus() As Boolean
      Get
        If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          AutoPaymentStatus = True
        Else
          AutoPaymentStatus = False
        End If
      End Get
    End Property
    Public ReadOnly Property DirectDebitStatus() As PaymentPlan.ppYesNoCancel
      Get
        DirectDebitStatus = GetAutomatedPaymentStatus((mvClassFields(PaymentPlanFields.ofDirectDebit).Value))
      End Get
    End Property

    Public ReadOnly Property Existing() As Boolean
      Get
        Existing = mvExisting
      End Get
    End Property

    Public Property ExpiryDate() As String
      Get
        ExpiryDate = mvClassFields(PaymentPlanFields.ofExpiryDate).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofExpiryDate).Value = Value
      End Set
    End Property

    Public ReadOnly Property FrequencyAmount() As Double
      Get
        SetValid(PaymentPlanFields.ofFrequencyAmount)
        FrequencyAmount = mvClassFields(PaymentPlanFields.ofFrequencyAmount).DoubleValue
      End Get
    End Property

    Public Property UseStartDateForTerm As Boolean
      Set(ByVal Value As Boolean)
        mvUseStartDateForTerm = Value
      End Set
      Get
        Return mvUseStartDateForTerm
      End Get
    End Property


    Public ReadOnly Property GiftAidCovenant(ByVal pTransactionDate As String, ByVal pOperationalDate As String, ByVal pGraceDays As Integer) As Covenant
      Get
        Dim vValid As Boolean
        Dim vClaimDue As Date

        If mvGiftAidCovenant Is Nothing Then
          mvGiftAidCovenant = New Covenant
          With mvGiftAidCovenant
            .InitFromPaymentPlanGA(mvEnv, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue), pTransactionDate)
            If .CovenantNumber > 0 Then
              If StartDate >= pOperationalDate Then
                vValid = True
              ElseIf IsDate(.TaxClaimedTo) Then
                If CDate(.TaxClaimedTo) >= CDate(pOperationalDate) Then vValid = True
              End If
              If Not vValid Then
                If .AnnualClaim Or (.AnnualClaim = False And PaymentFrequencyFrequency = 1) Then
                  If IsDate(.TaxClaimedTo) Then
                    vClaimDue = CDate(.TaxClaimedTo).AddYears(1)
                  Else
                    vClaimDue = CDate(.StartDate).AddYears(1)
                  End If
                Else
                  If IsDate(.TaxClaimedTo) Then
                    vClaimDue = DateAdd(Microsoft.VisualBasic.DateInterval.Month, PaymentFrequencyInterval, CDate(.TaxClaimedTo))
                  Else
                    vClaimDue = DateAdd(Microsoft.VisualBasic.DateInterval.Month, PaymentFrequencyInterval, CDate(.StartDate))
                  End If
                End If

                If vClaimDue >= CDate(pOperationalDate) Then
                  vValid = True
                Else
                  If CDate(pTransactionDate) >= DateAdd(Microsoft.VisualBasic.DateInterval.Day, pGraceDays, vClaimDue) And CDate(pTransactionDate) >= CDate(pOperationalDate) Then vValid = True
                End If
              End If
              If Not vValid Then .Init(mvEnv)
            End If
          End With
        End If
        GiftAidCovenant = mvGiftAidCovenant
      End Get
    End Property

    Public Property GiftMembership() As Boolean
      Get
        GiftMembership = mvClassFields(PaymentPlanFields.ofGiftMembership).Bool
      End Get
      Set(ByVal Value As Boolean)
        mvClassFields(PaymentPlanFields.ofGiftMembership).Bool = Value
      End Set
    End Property

    Public ReadOnly Property HasAutoPaymentMethod() As Boolean
      Get
        HasAutoPaymentMethod = mvAutoPayment
      End Get
    End Property

    Public Property InAdvance() As Double
      Get
        InAdvance = mvClassFields(PaymentPlanFields.ofInAdvance).DoubleValue
      End Get
      Set(ByVal Value As Double)
        mvClassFields(PaymentPlanFields.ofInAdvance).DoubleValue = Value
      End Set
    End Property

    Public Property LastPayment() As String
      Get
        LastPayment = mvClassFields(PaymentPlanFields.ofLastPayment).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofLastPayment).Value = Value
      End Set
    End Property

    Public Property LastPaymentDate() As String
      Get
        LastPaymentDate = mvClassFields(PaymentPlanFields.ofLastPaymentDate).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofLastPaymentDate).Value = Value
      End Set
    End Property

    Public ReadOnly Property Member() As Member
      Get
        If mvMember Is Nothing Then
          mvMember = New Member
          mvMember.Init(mvEnv, mvMembershipNumber)
        End If
        Member = mvMember
      End Get
    End Property

    Public ReadOnly Property MembershipType() As MembershipType
      Get
        MembershipType = mvEnv.MembershipType((mvClassFields(PaymentPlanFields.ofMembershipType).Value))
      End Get
    End Property
    Public ReadOnly Property MembershipTypeCode() As String
      Get
        MembershipTypeCode = mvClassFields(PaymentPlanFields.ofMembershipType).Value
      End Get
    End Property

    Public Property NextPaymentDue() As String
      Get
        NextPaymentDue = mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value = Value
        mvNPDDateUpdated = True
      End Set
    End Property

    Public Property NumberOfReminders() As Integer
      Get
        NumberOfReminders = mvClassFields(PaymentPlanFields.ofNumberOfReminders).IntegerValue
      End Get
      Set(ByVal Value As Integer)
        mvClassFields(PaymentPlanFields.ofNumberOfReminders).Value = CStr(Value)
      End Set
    End Property

    Friend ReadOnly Property OldMembershipIncentive() As Boolean
      Get
        OldMembershipIncentive = mvOldMembershipIncentive
      End Get
    End Property

    Public ReadOnly Property OneYearGift() As Boolean
      Get
        OneYearGift = mvClassFields(PaymentPlanFields.ofOneYearGift).Bool
      End Get
    End Property

    Public ReadOnly Property Payer() As Contact
      Get
        If mvPayer Is Nothing Then
          mvPayer = New Contact(mvEnv)
          mvPayer.Init((mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue), (mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue))
        End If
        Payer = mvPayer
      End Get
    End Property

    Public Property PaymentFrequencyCode() As String
      Get
        PaymentFrequencyCode = mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value = Value
        mvGotPaymentFrequency = False
        SetFrequencyAmount()
      End Set
    End Property

    Public ReadOnly Property PaymentFrequencyFrequency() As Integer
      Get
        GetPaymentFrequencyDetails()
        PaymentFrequencyFrequency = mvPaymentFreqFrequency
      End Get
    End Property

    Public ReadOnly Property PaymentFrequencyInterval() As Integer
      Get
        GetPaymentFrequencyDetails()
        PaymentFrequencyInterval = mvPaymentFreqInterval
      End Get
    End Property

    Public Property PaymentMethod() As String
      Get
        PaymentMethod = mvClassFields(PaymentPlanFields.ofPaymentMethod).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofPaymentMethod).Value = Value
      End Set
    End Property

    Public Property PaymentNumber() As Integer
      Get
        PaymentNumber = mvClassFields(PaymentPlanFields.ofPaymentNumber).IntegerValue
      End Get
      Set(ByVal Value As Integer)
        mvClassFields(PaymentPlanFields.ofPaymentNumber).Value = CStr(Value)
      End Set
    End Property

    Public Property PlanNumber() As Integer
      Get
        PlanNumber = mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue
      End Get
      Set(ByVal Value As Integer)
        If Not mvExisting Then mvClassFields(PaymentPlanFields.ofOrderNumber).Value = CStr(Value)
      End Set
    End Property

    Public Property PlanType() As CDBEnvironment.ppType
      Get
        PlanType = GetPPType((mvClassFields(PaymentPlanFields.ofOrderType).Value))
      End Get
      Set(ByVal Value As CDBEnvironment.ppType)
        mvClassFields(PaymentPlanFields.ofOrderType).Value = SetPPType(Value)
      End Set
    End Property

    Public ReadOnly Property ProductNumbers() As String
      Get
        ProductNumbers = mvProductNumbers
      End Get
    End Property

    Public Property ReasonForDespatch() As String
      Get
        ReasonForDespatch = mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value = Value
      End Set
    End Property

    Public Property RenewalAmount() As Double
      Get
        RenewalAmount = mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue
      End Get
      Set(ByVal Value As Double)
        mvClassFields(PaymentPlanFields.ofRenewalAmount).Value = CStr(Value)
      End Set
    End Property

    Public Property RenewalDate() As String
      Get
        RenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofRenewalDate).Value = Value
      End Set
    End Property

    Public Property RenewalPending() As Boolean
      Get
        RenewalPending = mvClassFields(PaymentPlanFields.ofRenewalPending).Bool
      End Get
      Set(ByVal Value As Boolean)
        mvClassFields(PaymentPlanFields.ofRenewalPending).Bool = Value
      End Set
    End Property

    Public Property RePrint() As Boolean
      Get
        RePrint = mvClassFields(PaymentPlanFields.ofReprint).Bool
      End Get
      Set(ByVal Value As Boolean)
        mvClassFields(PaymentPlanFields.ofReprint).Bool = Value
      End Set
    End Property

    Public Property SalesContact() As Integer
      Get
        SalesContact = mvClassFields(PaymentPlanFields.ofSalesContactNumber).IntegerValue
      End Get
      Set(ByVal Value As Integer)
        mvClassFields(PaymentPlanFields.ofSalesContactNumber).Value = CStr(Value)
      End Set
    End Property

    Public Property SalesGroup() As String
      Get
        SalesGroup = mvClassFields(PaymentPlanFields.ofSalesGroup).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofSalesGroup).Value = Value
      End Set
    End Property

    Public Property Source() As String
      Get
        Source = mvClassFields(PaymentPlanFields.ofSource).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofSource).Value = Value
      End Set
    End Property

    Public ReadOnly Property StandingOrder() As StandingOrder
      Get
        If mvStandingOrder Is Nothing Then
          mvStandingOrder = New StandingOrder
          mvStandingOrder.InitFromPaymentPlan(mvEnv, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
        End If
        StandingOrder = mvStandingOrder
      End Get
    End Property

    Public ReadOnly Property StandingOrderStatus() As PaymentPlan.ppYesNoCancel
      Get
        StandingOrderStatus = GetAutomatedPaymentStatus((mvClassFields(PaymentPlanFields.ofBankersOrder).Value))
      End Get
    End Property

    Public ReadOnly Property StartMonth() As Integer
      Get
        'Could be null but as null = 0 this is treated as unset anyway
        StartMonth = mvClassFields.Item(PaymentPlanFields.ofStartMonth).IntegerValue
      End Get
    End Property

    Public Property StartDate() As String
      Get
        StartDate = mvClassFields(PaymentPlanFields.ofOrderDate).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofOrderDate).Value = Value
        SetRenewalData()
      End Set
    End Property

    Public ReadOnly Property SubsExtension() As Boolean
      Get
        SubsExtension = mvSubsExtension
      End Get
    End Property

    Public Property Term() As Integer
      Get
        Term = mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue
      End Get
      Set(ByVal Value As Integer)
        mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue = Value
        SetRenewalData()
      End Set
    End Property

    Public Property TermUnits() As OrderTermUnits
      Get
        Dim vTermUnits As OrderTermUnits

        Select Case mvClassFields(PaymentPlanFields.ofOrderTermUnits).Value
          Case "M"
            vTermUnits = OrderTermUnits.otuMonthly
          Case "W"
            vTermUnits = OrderTermUnits.otuWeekly
          Case Else 'None
            vTermUnits = OrderTermUnits.otuNone
        End Select

        TermUnits = vTermUnits
      End Get
      Set(ByVal Value As OrderTermUnits)
        Select Case Value
          Case OrderTermUnits.otuMonthly
            mvClassFields(PaymentPlanFields.ofOrderTermUnits).Value = "M"
          Case OrderTermUnits.otuWeekly
            mvClassFields(PaymentPlanFields.ofOrderTermUnits).Value = "W"
          Case Else 'None
            mvClassFields(PaymentPlanFields.ofOrderTermUnits).Value = ""
        End Select
        SetRenewalData()
      End Set
    End Property
    Public ReadOnly Property RenewalPeriodEnd() As String
      Get
        Dim vRenewalPeriodEnd As String

        If RenewalPending = False Then
          vRenewalPeriodEnd = RenewalDate
        Else
          Select Case TermUnits
            Case OrderTermUnits.otuMonthly
              vRenewalPeriodEnd = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, Term, CDate(RenewalDate)))
            Case OrderTermUnits.otuWeekly
              vRenewalPeriodEnd = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.WeekOfYear, Term, CDate(RenewalDate)))
            Case Else
              If Term < 0 Then
                vRenewalPeriodEnd = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, System.Math.Abs(Term), CDate(RenewalDate)))
              Else
                vRenewalPeriodEnd = CDate(RenewalDate).AddYears(Term).ToString(CAREDateFormat)
              End If
          End Select
        End If
        RenewalPeriodEnd = vRenewalPeriodEnd
      End Get
    End Property

    Public ReadOnly Property RenewalPeriodStart() As String
      Get
        Dim vRenewalPeriodStart As String

        If RenewalPending = False Then
          vRenewalPeriodStart = CalculateRenewalDate(RenewalDate, False)
        Else
          vRenewalPeriodStart = RenewalDate
        End If
        Return vRenewalPeriodStart
      End Get
    End Property

    Public Property TheirReference() As String
      Get
        TheirReference = mvClassFields(PaymentPlanFields.ofTheirReference).Value
      End Get
      Set(ByVal Value As String)
        mvClassFields(PaymentPlanFields.ofTheirReference).Value = Value
      End Set
    End Property

    Public Property TransactionType() As String
      Get
        Dim vCovenant As Boolean
        Dim vSubscription As Boolean
        Dim vDetail As PaymentPlanDetail

        If Len(mvTransactionType) = 0 Then
          vCovenant = (CovenantStatus = PaymentPlan.ppCovenant.ppcCovenant) Or (CovenantStatus = PaymentPlan.ppCovenant.ppcDepositedDeed)
          If PlanType = CDBEnvironment.ppType.pptMember Then
            If vCovenant Then
              mvTransactionType = "CMEM"
            Else
              mvTransactionType = "MEMB"
            End If
          Else
            For Each vDetail In mvDetails
              If vDetail.Subscription Then vSubscription = True
            Next vDetail
            If vSubscription Then
              If vCovenant Then
                mvTransactionType = "CSUB"
              Else
                mvTransactionType = "SUBS"
              End If
            Else
              If vCovenant Then
                mvTransactionType = "CDON"
              Else
                mvTransactionType = "DONR"
              End If
            End If
          End If
        End If
        TransactionType = mvTransactionType
      End Get
      Set(ByVal Value As String)
        mvTransactionType = Value
      End Set
    End Property

    Public ReadOnly Property PaymentScheduleAmendedOn() As String
      Get
        'Could be null
        PaymentScheduleAmendedOn = mvClassFields(PaymentPlanFields.ofPaymentScheduleAmendedOn).Value
      End Get
    End Property

    Public ReadOnly Property ClaimDay() As String
      Get
        'Could be null
        ClaimDay = mvClassFields(PaymentPlanFields.ofClaimDay).Value
      End Get
    End Property

    Public Property EligibleForGiftAid() As Boolean
      Get
        'Could be null
        'Note: For Memberships, the MembershipEligibleForGiftAid will also be used to determine
        'whether at a particular point in time a Membership is still eligible (i.e. Junior Gift
        'Membership and the members are too old).
        EligibleForGiftAid = (mvClassFields(PaymentPlanFields.ofEligibleForGiftAid).Value <> "N")
      End Get
      Set(ByVal Value As Boolean)
        mvClassFields(PaymentPlanFields.ofEligibleForGiftAid).Bool = Value
      End Set
    End Property

    Public Property PackToMember() As Boolean
      Get
        PackToMember = mvClassFields(PaymentPlanFields.ofPackToMember).Bool
      End Get
      Set(ByVal Value As Boolean)
        mvClassFields(PaymentPlanFields.ofPackToMember).Bool = Value
      End Set
    End Property

    Public ReadOnly Property OneOffPayment() As Boolean
      Get
        OneOffPayment = mvClassFields(PaymentPlanFields.ofOneOffPayment).Bool
      End Get
    End Property

    Public ReadOnly Property FutureCancellationDate() As String
      Get
        FutureCancellationDate = mvClassFields(PaymentPlanFields.ofFutureCancellationDate).Value
      End Get
    End Property

    Public ReadOnly Property FutureCancellationReason() As String
      Get
        FutureCancellationReason = mvClassFields(PaymentPlanFields.ofFutureCancellationReason).Value
      End Get
    End Property

    Public ReadOnly Property OutstandingBalance() As Double
      Get
        Dim vBalance As Double
        Dim vNextPayDue As Date
        Dim vNoIntervals As Integer

        If DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value), Today) < 0 Then
          vBalance = CDbl(mvClassFields(PaymentPlanFields.ofBalance).Value)
        Else
          vNoIntervals = 1
          If mvClassFields(PaymentPlanFields.ofBalance).DoubleValue > 0 Then
            vNextPayDue = DateAdd(Microsoft.VisualBasic.DateInterval.Month, PaymentFrequencyInterval, CDate(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value))
          Else
            vNextPayDue = CDate(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value)
          End If
          While vNextPayDue <= Today
            vNoIntervals = vNoIntervals + 1
            vNextPayDue = DateAdd(Microsoft.VisualBasic.DateInterval.Month, PaymentFrequencyInterval, vNextPayDue)
          End While
          vBalance = CDbl(mvClassFields(PaymentPlanFields.ofBalance).Value) + (vNoIntervals * CDbl(mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value))
        End If
        mvNoOfIntervals = vNoIntervals
        OutstandingBalance = vBalance
      End Get
    End Property

    Public ReadOnly Property FMTRenewalPending() As Boolean
      Get
        Dim vOPS As OrderPaymentSchedule
        Dim vFound As Boolean
        If RenewalPending And DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(StartDate), Today.Date.AddYears(-1)) < 1 And Arrears = 0 Then
          If PaymentNumber = 0 Then
            'Force Renewal Pending flag to be FALSE for new members
            FMTRenewalPending = False
          Else
            'Force Renewal Pending flag to be FALSE for new members, and
            'First payment has been made but not yet processed (Check)
            For Each vOPS In ScheduledPayments
              If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsUnprocessedPayment Then vFound = True
              If vFound Then Exit For
            Next vOPS
            If vFound Then
              FMTRenewalPending = False
            Else
              FMTRenewalPending = RenewalPending
            End If
          End If
        Else
          FMTRenewalPending = RenewalPending
        End If
      End Get
    End Property

    Public ReadOnly Property FixedRenewalCycle() As Boolean
      Get
        FixedRenewalCycle = Len(mvFixedRenewalCycle) > 0
      End Get
    End Property

    Public ReadOnly Property NextDetailLine() As Integer
      Get
        NextDetailLine = mvClassFields(PaymentPlanFields.ofNextDetailLine).IntegerValue
      End Get
    End Property

    Public ReadOnly Property ContinuousRenewals() As Boolean
      Get
        ContinuousRenewals = mvContinuousRenewals
      End Get
    End Property

    Public ReadOnly Property PaymentFrequencyPeriod() As PaymentFrequency.PaymentFrequencyPeriods
      Get
        GetPaymentFrequencyDetails()
        PaymentFrequencyPeriod = mvPaymentFreqPeriod
      End Get
    End Property

    Public ReadOnly Property Created() As Boolean
      Get
        Created = mvCreated
      End Get
    End Property

    Public ReadOnly Property AutoPaymentCreated() As Boolean
      Get
        AutoPaymentCreated = mvAutoPaymentCreated
      End Get
    End Property

    Public Property AutoPaymentSource() As String
      Get
        GetAutoPaymentInfo()
        AutoPaymentSource = mvAutoPaymentSource
      End Get
      Set(ByVal Value As String)
        mvAutoPaymentSource = Value
      End Set
    End Property

    Public Property AutoPaymentCAF() As Boolean
      Get
        GetAutoPaymentInfo()
        AutoPaymentCAF = mvAutoPaymentCAF
      End Get
      Set(ByVal Value As Boolean)
        mvAutoPaymentCAF = Value
      End Set
    End Property

    Public Property RenewalDateSupplied() As Boolean
      Get
        RenewalDateSupplied = mvRenewalDateSupplied
      End Get
      Set(ByVal Value As Boolean)
        mvRenewalDateSupplied = Value
      End Set
    End Property

    Public ReadOnly Property BaseDate() As String
      Get
        Dim vBaseDate As String

        If FixedDDClaimDate Then
          vBaseDate = RenewalDate
        Else
          vBaseDate = StartDate
        End If
        BaseDate = vBaseDate
      End Get
    End Property

    Public ReadOnly Property FixedDDClaimDate() As Boolean
      Get
        FixedDDClaimDate = mvFixedDDClaimDate And DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes
      End Get
    End Property

    Public ReadOnly Property IsCancelled() As Boolean
      Get
        IsCancelled = Len(CancellationReason) > 0
      End Get
    End Property

    Public ReadOnly Property RenewalDateChangeReason() As String
      Get
        RenewalDateChangeReason = mvClassFields(PaymentPlanFields.ofRenewalDateChangeReason).Value
      End Get
    End Property

    Public ReadOnly Property RenewalDateChangedBy() As String
      Get
        RenewalDateChangedBy = mvClassFields(PaymentPlanFields.ofRenewalDateChangedBy).Value
      End Get
    End Property

    Public ReadOnly Property RenewalDateChangedOn() As String
      Get
        RenewalDateChangedOn = mvClassFields(PaymentPlanFields.ofRenewalDateChangedOn).Value
      End Get
    End Property

    Public ReadOnly Property RenewalDateChangedValue() As Integer
      Get
        RenewalDateChangedValue = mvClassFields(PaymentPlanFields.ofRenewalDateChangedValue).IntegerValue
      End Get
    End Property

    Public Property ResetOrderTerm() As ppResetOrderTerm
      Get
        Select Case mvClassFields(PaymentPlanFields.ofResetOrderTerm).Value
          Case "Y"
            ResetOrderTerm = ppResetOrderTerm.pprotYes
          Case "N"
            ResetOrderTerm = ppResetOrderTerm.pprotNo
          Case Else
            ResetOrderTerm = ppResetOrderTerm.pprotNotSet
        End Select
      End Get
      Set(ByVal Value As ppResetOrderTerm)
        Select Case Value
          Case ppResetOrderTerm.pprotYes
            mvClassFields(PaymentPlanFields.ofResetOrderTerm).Value = "Y"
          Case ppResetOrderTerm.pprotNo
            mvClassFields(PaymentPlanFields.ofResetOrderTerm).Value = "N"
          Case Else
            mvClassFields(PaymentPlanFields.ofResetOrderTerm).Value = ""
        End Select
      End Set
    End Property

    Public ReadOnly Property AmendedBy() As String
      Get
        AmendedBy = mvClassFields.Item(PaymentPlanFields.ofAmendedBy).Value
      End Get
    End Property

    Public ReadOnly Property AmendedOn() As String
      Get
        AmendedOn = mvClassFields.Item(PaymentPlanFields.ofAmendedOn).Value
      End Get
    End Property

    Public ReadOnly Property PaymentHistory(ByVal pOrderBy As PaymentHistoryOrderByTypes, Optional ByVal pBatchNumber As Integer = 0, Optional ByVal pTransNumber As Integer = 0, Optional ByVal pLineNumber As Integer = 0, Optional ByVal pStatus As String = "", Optional ByVal pStartDate As String = "", Optional ByVal pRenewalDate As String = "") As Collection
      Get
        If pTransNumber > 0 Then System.Diagnostics.Debug.Assert(pBatchNumber > 0, "")
        If pLineNumber > 0 Then System.Diagnostics.Debug.Assert(pBatchNumber > 0 And pTransNumber > 0, "")

        Dim vIsCMT As Boolean = False
        Dim vJoinOPS As Boolean = False
        If pOrderBy = PaymentHistoryOrderByTypes.phobtTransDatePaymentNumber Then
          If IsDate(pStartDate) AndAlso IsDate(pRenewalDate) Then
            'If we are checking for payments between a date range then join to OrderPaymentSchedule as well (used by CMT only)
            vIsCMT = True
            vJoinOPS = CMTProportionBalance <> CMTProportionBalanceTypes.cmtNone
          End If
        End If

        Dim vJoinToFH As Boolean = (pOrderBy = PaymentHistoryOrderByTypes.phobtTransDatePaymentNumber OrElse pOrderBy = PaymentHistoryOrderByTypes.phobtPostedPaymentNumberTransDate)

        Dim vOPH As New OrderPaymentHistory
        vOPH.Init(mvEnv)
        Dim vAttrs As String = vOPH.GetRecordSetFields(OrderPaymentHistory.OrderPaymentHistoryRecordSetTypes.ophrtAll)

        Dim vAnsiJoins As New AnsiJoins
        With vAnsiJoins
          If vJoinToFH Then .Add("financial_history fh", "oph.batch_number", "fh.batch_number", "oph.transaction_number", "fh.transaction_number")
          If vJoinOPS Then .AddLeftOuterJoin("order_payment_schedule ops", "oph.order_number", "ops.order_number", "oph.scheduled_payment_number", "ops.scheduled_payment_number") 'Outer Join to order_payment_schedule as oph.scheduled_payment_number could be null
        End With

        Dim vWherefields As New CDBFields
        With vWherefields
          .Add("oph.order_number", PlanNumber)
          If pBatchNumber > 0 Then
            'Add batch/transaction/line numbers
            .Add("oph.batch_number", pBatchNumber)
            If pTransNumber > 0 Then
              .Add("oph.transaction_number", pTransNumber)
              If pLineNumber > 0 Then .Add("oph.line_number", pLineNumber)
            End If
          End If
          If pStatus.Length > 0 Then
            'Deal with any status inclusions / exclusions
            Select Case pStatus
              Case "NOTNULL"
                .Add("oph.status", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoNotEqual)
              Case "NULL"
                Dim vFieldWhereOperator As CDBField.FieldWhereOperators = CDBField.FieldWhereOperators.fwoEqual
                If vIsCMT Then vFieldWhereOperator = vFieldWhereOperator Or CDBField.FieldWhereOperators.fwoOpenBracketTwice Or CDBField.FieldWhereOperators.fwoCloseBracket
                .Add("oph.status", CDBField.FieldTypes.cftCharacter, "", vFieldWhereOperator)
                If vIsCMT Then
                  .Add("oph.status#2", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoNotEqual Or CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoOR)
                  .Add("oph.status#3", CDBField.FieldTypes.cftCharacter, "'I','B'", CDBField.FieldWhereOperators.fwoNotIn Or CDBField.FieldWhereOperators.fwoCloseBracketTwice)   'Need to exclude in-advance payments (status I & B) but include reversed payments
                End If
              Case Else
                .Add("oph.status", CDBField.FieldTypes.cftCharacter, pStatus)
            End Select
          End If
          If vJoinOPS Then
            'Join to OPS on date range
            .Add("oph.scheduled_payment_number", CDBField.FieldTypes.cftInteger, "", CDBField.FieldWhereOperators.fwoNotEqual Or CDBField.FieldWhereOperators.fwoOpenBracketTwice)
            .Add("ops.due_date", CDBField.FieldTypes.cftDate, pStartDate, CDBField.FieldWhereOperators.fwoBetweenFrom)
            .Add("ops.due_date#2", CDBField.FieldTypes.cftDate, pRenewalDate, CDBField.FieldWhereOperators.fwoBetweenTo Or CDBField.FieldWhereOperators.fwoCloseBracket)
            .Add("oph.scheduled_payment_number#2", CDBField.FieldTypes.cftInteger, "", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoOpenBracket)
            .Add("fh.transaction_date", CDBField.FieldTypes.cftDate, pStartDate, CDBField.FieldWhereOperators.fwoBetweenFrom)
            .Add("fh.transaction_date#2", CDBField.FieldTypes.cftDate, pRenewalDate, CDBField.FieldWhereOperators.fwoBetweenTo Or CDBField.FieldWhereOperators.fwoCloseBracketTwice)
          ElseIf vJoinToFH = True AndAlso IsDate(pStartDate) AndAlso IsDate(pRenewalDate) Then
            'Join to FH on date range
            .Add("fh.transaction_date", CDBField.FieldTypes.cftDate, pStartDate, CDBField.FieldWhereOperators.fwoBetweenFrom)
            .Add("fh.transaction_date#2", CDBField.FieldTypes.cftDate, pRenewalDate, CDBField.FieldWhereOperators.fwoBetweenTo)
          End If
        End With

        Dim vOrderBy As String = ""
        Select Case pOrderBy
          Case PaymentHistoryOrderByTypes.phobtBatchTransactionLine
            vOrderBy = "oph.batch_number, oph.transaction_number, oph.line_number"
          Case PaymentHistoryOrderByTypes.phobtPostedPaymentNumberTransDate
            vOrderBy = "posted, payment_number, transaction_date"
          Case PaymentHistoryOrderByTypes.phobtTransDatePaymentNumber
            vOrderBy = "transaction_date DESC, payment_number DESC"
        End Select

        mvPaymentHistory = New Collection
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vAttrs, "order_payment_history oph", vWherefields, vOrderBy, vAnsiJoins)
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        With vRS
          While .Fetch() = True
            vOPH = New OrderPaymentHistory
            vOPH.InitFromRecordSet(mvEnv, vRS, OrderPaymentHistory.OrderPaymentHistoryRecordSetTypes.ophrtAll)
            mvPaymentHistory.Add(vOPH)
          End While
          .CloseRecordSet()
        End With
        Return mvPaymentHistory
      End Get
    End Property

    Public Property Provisional() As Boolean
      Get
        Provisional = mvClassFields(PaymentPlanFields.ofProvisional).Bool
      End Get
      Set(ByVal Value As Boolean)
        mvClassFields(PaymentPlanFields.ofProvisional).Bool = Value
      End Set
    End Property

    Public Property GiverContactNumber() As String
      Get
        GiverContactNumber = mvClassFields(PaymentPlanFields.ofGiverContactNumber).Value
      End Get
      Set(ByVal Value As String)
        'Could be null
        mvClassFields(PaymentPlanFields.ofGiverContactNumber).Value = Value
      End Set
    End Property

    Public ReadOnly Property CreatedBy() As String
      Get
        CreatedBy = mvClassFields(PaymentPlanFields.ofCreatedBy).Value
      End Get
    End Property

    Public ReadOnly Property CreatedOn() As String
      Get
        CreatedOn = mvClassFields(PaymentPlanFields.ofCreatedOn).Value
      End Get
    End Property

    Public ReadOnly Property ConfirmedOn() As String
      Get
        ConfirmedOn = mvClassFields(PaymentPlanFields.ofConfirmedOn).Value
      End Get
    End Property

    Public ReadOnly Property CovenantCreated() As Boolean
      Get
        CovenantCreated = mvCovenantCreated
      End Get
    End Property

    Public ReadOnly Property ProportionalBalanceSetting() As ProportionalBalanceConfigSettings
      Get
        Dim vSetting As ProportionalBalanceConfigSettings
        Dim vValues() As String
        Dim vIndex As Integer

        vSetting = ProportionalBalanceConfigSettings.pbcsNone
        If Len(mvProportionalBalanceSetting) > 0 Then
          vValues = Split(mvProportionalBalanceSetting, "|")
          For vIndex = 0 To UBound(vValues)
            Select Case vValues(vIndex)
              Case "EXISTING"
                vSetting = vSetting Or ProportionalBalanceConfigSettings.pbcsExisting
              Case "NEW"
                vSetting = vSetting Or ProportionalBalanceConfigSettings.pbcsNew
              Case "FULLPAYMENT"
                vSetting = vSetting Or ProportionalBalanceConfigSettings.pbcsFullPayment
              Case "EXISTINGPF"
                vSetting = vSetting Or ProportionalBalanceConfigSettings.pbcsExistingPF
            End Select
          Next
        End If
        ProportionalBalanceSetting = vSetting
      End Get
    End Property

    Public ReadOnly Property PreviousRenewalCycle() As Boolean
      Get
        If Not mvSetFixedRenewalPrevious Then
          'This property can only really be called AFTER the FixedRenewalDate function has been called, which is why
          'the boolean variable above is checked and FixedRenewalDate is called here.
          'FixedRenewalDate will read the fixed_renewal_M config and determine the most appropriate renewal date.
          'Only at that time will the payment plan know whether the chosen renewal date is in the past.
          FixedRenewalDate(TodaysDate())
        End If
        PreviousRenewalCycle = mvFixedRenewalPrevious
      End Get
    End Property

    Public ReadOnly Property ProRateBasisSetting() As ProRateBasisConfigSettings
      Get
        Dim vSetting As ProRateBasisConfigSettings

        vSetting = ProRateBasisConfigSettings.prbsNone
        If ProportionalBalanceSetting <> ProportionalBalanceConfigSettings.pbcsNone Then
          Select Case mvProRateBasis
            Case "T"
              vSetting = ProRateBasisConfigSettings.prbsTimeBased
            Case Else
              vSetting = ProRateBasisConfigSettings.prbsFrequencyBased
          End Select
        End If
        ProRateBasisSetting = vSetting
      End Get
    End Property

    ''' <summary>Select all payment schedule records and add to the mvScheduledPayments collection.</summary>
    ''' <param name="pAllDuePayments">Set to True to only select payments that are Due/Part-Paid/Unpaid/Provisional, otherwise set to False.  Defaults to True.</param>
    ''' <returns>Collection containing all selected payment scheduled records.</returns>
    Public ReadOnly Property ScheduledPayments(Optional ByVal pAllDuePayments As Boolean = True) As Collection
      Get
        If mvScheduledPayments Is Nothing Then GetScheduledPayments(pAllDuePayments)
        ScheduledPayments = mvScheduledPayments
      End Get
    End Property

    Public ReadOnly Property AutoPaymentClaimDateMethod() As AutoPaymentClaimDateMethods
      Get
        If Not mvAutoPayClaimDateMethodSet Then
          Select Case mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlAutoPayClaimDateMethod)
            Case "A"
              mvAutoPaymentClaimDateMethod = AutoPaymentClaimDateMethods.apcdmDates
            Case "D"
              mvAutoPaymentClaimDateMethod = AutoPaymentClaimDateMethods.apcdmDays
            Case Else 'N
              mvAutoPaymentClaimDateMethod = AutoPaymentClaimDateMethods.apcsmNextPayDue
          End Select
          mvAutoPayClaimDateMethodSet = True
        End If
        AutoPaymentClaimDateMethod = mvAutoPaymentClaimDateMethod
      End Get
    End Property
    Public ReadOnly Property DetailsAmended() As Boolean
      Get
        Dim vPPD As PaymentPlanDetail
        Dim vAmended As Boolean
        Dim vWhereFields As CDBFields

        For Each vPPD In mvDetails
          vAmended = vPPD.Amended
          If vAmended Then Exit For
        Next vPPD
        If Not vAmended Then
          'none of the PPDs have been amended but this won't tell us if any have been deleted
          'so compare the count of objects in the collection with the number of records in the database
          vWhereFields = New CDBFields
          vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
          vAmended = mvDetails.Count() <> mvEnv.Connection.GetCount("order_details", vWhereFields, "")
        End If
        DetailsAmended = vAmended
      End Get
    End Property
    Public ReadOnly Property DetailsAmendedFinancial() As Boolean
      Get
        'As DetailsAmended but only set if specifically information has been
        'updated on the PPD that has a financial implication.
        Dim vPPD As PaymentPlanDetail
        Dim vAmended As Boolean
        Dim vWhereFields As CDBFields

        For Each vPPD In mvDetails
          vAmended = vPPD.FinancialAmended
          If vAmended Then Exit For
        Next vPPD
        If Not vAmended Then
          'none of the PPDs have been amended but this won't tell us if any have been deleted
          'so compare the count of objects in the collection with the number of records in the database
          vWhereFields = New CDBFields
          vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
          vAmended = mvDetails.Count() <> mvEnv.Connection.GetCount("order_details", vWhereFields, "")
        End If
        DetailsAmendedFinancial = vAmended
      End Get
    End Property

    Public ReadOnly Property ContainsUnprocessedPayments(Optional ByVal pZeroBalancePPOnly As Boolean = False, Optional ByVal pBatchNumber As Integer = 0, Optional ByVal pTransactionNumber As Integer = 0, Optional ByVal pLineNumber As Integer = 0) As Boolean
      Get
        'Return whether or not there are any unprocessed payments for the Payment Plan
        'Neew to check OPH as provisional OPS will not show as UnProcessed
        Dim vFields As New CDBFields
        Dim vUnprocOPS As Boolean
        Dim vTables As String

        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments) Then
          If pBatchNumber = 0 Then
            'Class must have been Initialised with a valid PaymentPlanNumber
            vFields.Add("oph.order_number", CDBField.FieldTypes.cftLong, PlanNumber)
            vFields.Add("posted", CDBField.FieldTypes.cftCharacter, "N")
            vTables = "order_payment_history oph"
            If pZeroBalancePPOnly Then
              'Only include PaymentPlan's with a zero balance
              vTables = vTables & ", orders o"
              vFields.Add("o.order_number", CDBField.FieldTypes.cftLong, "oph.order_number")
              vFields.Add("o.balance", CDBField.FieldTypes.cftNumeric, 0)
            End If
          Else
            'Assume PaymentPlanNumber not known
            'And both BatchNumber & TransactionNumber are set
            With vFields
              .Add("oph1.batch_number", CDBField.FieldTypes.cftLong, pBatchNumber)
              .Add("oph1.transaction_number", CDBField.FieldTypes.cftLong, pTransactionNumber)
              If pLineNumber > 0 Then .Add("oph1.line_number", CDBField.FieldTypes.cftLong, pLineNumber)
              .Add("o.order_number", CDBField.FieldTypes.cftLong, "oph1.order_number")
              .Add("o.balance", CDBField.FieldTypes.cftNumeric, 0)
              .Add("oph2.order_number", CDBField.FieldTypes.cftLong, "o.order_number")
              .Add("oph2.payment_number", CDBField.FieldTypes.cftLong, "oph1.payment_number", CDBField.FieldWhereOperators.fwoNotEqual)
              .Add("oph2.posted", CDBField.FieldTypes.cftCharacter, "N")
            End With
            vTables = "order_payment_history oph1, orders o, order_payment_history oph2"
          End If
          If mvEnv.Connection.GetCount(vTables, vFields) > 0 Then vUnprocOPS = True
        End If

        ContainsUnprocessedPayments = vUnprocOPS

      End Get
    End Property

    Public ReadOnly Property NewOrder() As NewOrder
      Get
        If mvNewOrder Is Nothing Then
          mvNewOrder = New NewOrder
          mvNewOrder.Init(mvEnv, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
        End If
        NewOrder = mvNewOrder
      End Get
    End Property

    Public ReadOnly Property ReinstatmentSkipPaymentsCount() As Integer
      Get
        ReinstatmentSkipPaymentsCount = mvReinstateSkipPaymentsCount
      End Get
    End Property
    Public ReadOnly Property CheckHistoricAddressLinksErrorMsg() As String
      Get
        CheckHistoricAddressLinksErrorMsg = mvHistoricAddressesErrorMsg
      End Get
    End Property
    Public ReadOnly Property ReinstatmentPreprocessErrorMsg() As String
      Get
        ReinstatmentPreprocessErrorMsg = mvReinstatePreprocessErrorMsg
      End Get
    End Property
    Public ReadOnly Property ReinstatmentPreprocessFMTMsg() As String
      Get
        ReinstatmentPreprocessFMTMsg = mvReinstatePreprocessFMTMsg
      End Get
    End Property
    Public ReadOnly Property ReinstatmentSkipPaymentsValue() As Double
      Get
        ReinstatmentSkipPaymentsValue = mvReinstateSkipPaymentsValue
      End Get
    End Property
    Public Sub SetBalance(ByRef pNewValue As Double)
      If pNewValue >= 0 Then
        mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = pNewValue
      Else
        'mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = 0
        RaiseError(DataAccessErrors.daePaymentPlanBalanceCannotBeNegative, PlanNumber.ToString)
      End If
      SetRenewalData()
      SetFrequencyAmount()
    End Sub

    Public Sub CalculateRenewalsBalance(ByVal pCurrentFuturePrice As String, ByVal pUpdate As Boolean, ByVal pWODonationArrears As Boolean, Optional ByVal pFirstPeriodsProductRate As ProductRate = Nothing, Optional ByVal pFirstPeriodsPrice As Double = 0, Optional ByVal pSubsPeriodProductRate As ProductRate = Nothing, Optional ByVal pSubsPeriodPrice As Double = 0)
      'For Membership PayPlans, all optional parameters must be specified
      Dim vPPD As PaymentPlanDetail
      Dim vOPS As OrderPaymentSchedule = Nothing
      Dim vSum As Double 'sum of order_details.balance
      Dim vRenew As Double 'renewal amount of details line
      Dim vMemberProductRate As ProductRate = Nothing
      Dim vMemberRenew As Double
      Dim vODProduct As String = ""
      Dim vODRate As String = ""
      Dim vDonArrears As Double 'Donation arrears to be written off
      Dim vDiff As Double

      Dim vRetainedPpdLines As List(Of PaymentPlanDetail)
      Dim vDetailNo As Integer = 0

      'All arrears figures are set in Renewals & Reminders
      If pWODonationArrears Then
        'Write-off any donation arrears before the new balances are calculated
        For Each vPPD In mvDetails
          If vPPD.Donation = True And vPPD.Arrears > 0 Then
            vDonArrears = vDonArrears + vPPD.Arrears
            vPPD.Balance = vPPD.Balance - vPPD.Arrears
            vPPD.Arrears = 0
          End If
        Next vPPD

        If vDonArrears > 0 Then
          mvClassFields(PaymentPlanFields.ofArrears).DoubleValue = mvClassFields(PaymentPlanFields.ofArrears).DoubleValue - vDonArrears
          mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = mvClassFields(PaymentPlanFields.ofBalance).DoubleValue - vDonArrears

          Do
            vOPS = CType(mvEnv.GetPreviousItem(ScheduledPayments, vOPS), OrderPaymentSchedule)
            If Not (vOPS Is Nothing) Then
              If CDate(vOPS.DueDate) < CDate(TodaysDate()) Then
                If vOPS.AmountOutstanding > vDonArrears Then
                  vOPS.WriteOff(vDonArrears)
                  vDonArrears = 0
                Else
                  vDonArrears = vDonArrears - vOPS.AmountOutstanding
                  vOPS.WriteOff(vOPS.AmountOutstanding)
                End If
                vOPS.Save()
              End If
            End If
          Loop While ((Not (vOPS Is Nothing)) And vDonArrears > 0)
        End If
      End If

      Dim vVATRate As VatRate
      Dim vPayerVATCategory As String = Payer.VATCategory
      Dim vNonPerBalance As Double

      If mvClassFields(PaymentPlanFields.ofOrderType).Value = "M" AndAlso mvEnv.GetControlBool(CDBEnvironment.cdbControlConstants.cdbControlRemoveZeroBalancePpdLines) Then

        Dim vAmount As String = CType(mvDetails.Item(GetDetailKeyFromLineNo(1)), PaymentPlanDetail).Amount
        Dim vDespatchMethod As String = CType(mvDetails.Item(GetDetailKeyFromLineNo(1)), PaymentPlanDetail).DespatchMethod
        Dim vSource As String = CType(mvDetails.Item(GetDetailKeyFromLineNo(1)), PaymentPlanDetail).Source

        'Dim vRetainedPpdLines As List(Of PaymentPlanDetail) = GetRetainedPpdLines()
        vRetainedPpdLines = GetRetainedPpdLines()
        mvDetails.Clear()
        mvClassFields(PaymentPlanFields.ofNextDetailLine).Value = CStr(1)

        'Dim vDetailNo As Integer = 0
        vDetailNo = 0
        Dim vChargeProductCode As String = pFirstPeriodsProductRate.ProductCode
        If MembershipType.UserDefinedFirstRate.Length > 0 AndAlso MembershipType.FirstPeriodsProduct.Equals(vChargeProductCode, System.StringComparison.InvariantCultureIgnoreCase) = False Then
          'Both product & rate have been changed - revert back to standard product & rate
          MembershipType.UserDefinedFirstRate = String.Empty
          pFirstPeriodsProductRate = MembershipType.ProductRate
        End If

        AddDetail(vDetailNo, Me.Payer.ContactNumber, Me.Payer.AddressNumber, pFirstPeriodsProductRate.ProductCode, pFirstPeriodsProductRate.RateCode, 1, vAmount, 0, 0, vDespatchMethod, 0, "C", cdbValueKnownConstants.cdbVKCunknown, CStr(TodaysDate()), CStr(TodaysDate()), cdbValueKnownConstants.cdbVKCunknown, "", "", "", vSource)
        CType(mvDetails.Item(GetDetailKeyFromLineNo(vDetailNo)), PaymentPlanDetail).SetModifierAndPriceData(pFirstPeriodsProductRate.PaymentPlanDetailPricing)
        Dim vEntitlementPrice As Double = 0

        For Each vEntitlement As MembershipEntitlement In MembershipType.Entitlements
          vVATRate = mvEnv.VATRate(vEntitlement.EntitlementProductVATCategory, Me.Payer.VATCategory)
          Dim vPrice As Double = 0
          Select Case pCurrentFuturePrice
            Case "C"
              vPrice = vEntitlement.ProductRate.RenewalPrice(False, Me.Payer.ContactNumber, vEntitlement.Quantity, vVATRate, DateValue(RenewalDate))
            Case "F"
              vPrice = vEntitlement.ProductRate.RenewalPrice(True, Me.Payer.ContactNumber, vEntitlement.Quantity, vVATRate, DateValue(RenewalDate))
            Case Else
              vPrice = vEntitlement.ProductRate.Price(CDate(RenewalDate), Me.Payer.ContactNumber, vEntitlement.Quantity, vVATRate)
          End Select

          If vEntitlement.ProductRate.PriceIsPercentage = "T" Then
            'calculate discount on the non-percentage total
            vPrice = FixTwoPlaces(vNonPerBalance * (vPrice / 100)) * -1
          ElseIf vEntitlement.ProductRate.PriceIsPercentage = "P" Then
            'calculate discount on the previous total
            vPrice = FixTwoPlaces(vEntitlementPrice * (vPrice / 100)) * -1
          Else
            vNonPerBalance += vPrice
          End If

          vEntitlementPrice = vEntitlementPrice + vPrice
          vDetailNo = 0
          AddDetail(vDetailNo, Me.Payer.ContactNumber, Me.Payer.AddressNumber, (vEntitlement.ProductCode), (vEntitlement.RateCode), (vEntitlement.Quantity), "", 0, 0, (vEntitlement.DespatchMethod), 0, "C", cdbValueKnownConstants.cdbVKCunknown, CStr(TodaysDate()), CStr(TodaysDate()), cdbValueKnownConstants.cdbVKCunknown, "", "", "", Me.Source)
          CType(mvDetails.Item(GetDetailKeyFromLineNo(vDetailNo)), PaymentPlanDetail).SetModifierAndPriceData(vEntitlement.ProductRate.PaymentPlanDetailPricing)
        Next vEntitlement
      End If

      vSum = 0
      If Not mvRenewAtSameRateSet Then mvRenewAtSameRate = mvEnv.GetConfigOption("me_renew_at_same_rate")
      mvRenewAtSameRateSet = True
      vNonPerBalance = 0

      'Now calculate the renewal amounts
      For Each vPPD In mvDetails
        With vPPD
          vVATRate = mvEnv.VATRate(vPPD.Product.ProductVatCategory, vPayerVATCategory)
          If vPPD.NetFixedAmount.Length > 0 Then
            'Fixed Amount excluding VAT
            'Need to calculate the VAT and then re-set the (Gross) Fixed Amount - this can only be set for VAT-Exclusive Rates
            vRenew = FixTwoPlaces(DoubleValue(vPPD.NetFixedAmount) + vVATRate.CalculateVATAmount(DoubleValue(vPPD.NetFixedAmount), True, RenewalDate))
            vPPD.SetAmount(vRenew.ToString)
            If Not vPPD.IsValidOnDate(DateValue(RenewalDate)) Then vRenew = 0
          ElseIf .Amount.Length > 0 Then
            'Fixed Amount including VAT
            If vPPD.IsValidOnDate(DateValue(RenewalDate)) Then
              vRenew = CDbl(.Amount)
            Else
              vRenew = 0
            End If
          Else
            Select Case pCurrentFuturePrice
              Case "C"
                vRenew = vPPD.RenewalPrice(False, vVATRate, DateValue(RenewalDate))
              Case "F"
                vRenew = vPPD.RenewalPrice(True, vVATRate, DateValue(RenewalDate))
              Case Else
                vRenew = vPPD.Price(CDate(RenewalDate), vVATRate, 0, True)
            End Select
          End If

          If .Amount.Length > 0 Then
            'BR15941: Where fixed Amount set, set PaymentPlanDetailPricing values from this
            vPPD.ProductRate.PaymentPlanDetailPricing.CalculatePricing(.UnitPrice, DoubleValue(vPPD.Amount), False, RenewalDate, vVATRate, False)
          End If

          If GetPPType((mvClassFields(PaymentPlanFields.ofOrderType).Value)) = CDBEnvironment.ppType.pptMember Then
            If Not mvRenewAtSameRate Then
              If .DetailNumber = 1 Then
                vODProduct = .ProductCode
                vODRate = .RateCode
                If Term < 0 Then
                  vMemberProductRate = pSubsPeriodProductRate   'BR19595
                  If .PriceIsZero Then
                    If .NetFixedAmount.Length > 0 Then
                      'Fixed Amount excluding VAT
                      'Need to calculate the VAT and then re-set the (Gross) Fixed Amount - this can only be set for VAT-Exclusive Rates
                      vRenew = FixTwoPlaces(DoubleValue(vPPD.NetFixedAmount) + vVATRate.CalculateVATAmount(DoubleValue(vPPD.NetFixedAmount), True, RenewalDate))
                      vPPD.SetAmount(vRenew.ToString)
                    ElseIf .Amount.Length > 0 Then
                      'Fixed Amount including VAT
                      vRenew = CDbl(.Amount)
                    Else
                      vRenew = pFirstPeriodsPrice * .Quantity
                    End If
                  Else
                    If .NetFixedAmount.Length > 0 Then
                      'Fixed Amount excluding VAT
                      'Need to calculate the VAT and then re-set the (Gross) Fixed Amount - this can only be set for VAT-Exclusive Rates
                      vRenew = FixTwoPlaces(DoubleValue(vPPD.NetFixedAmount) + vVATRate.CalculateVATAmount(DoubleValue(vPPD.NetFixedAmount), True, RenewalDate))
                      vPPD.SetAmount(vRenew.ToString)
                    ElseIf .Amount.Length > 0 Then
                      'Fixed Amount including VAT
                      vRenew = CDbl(.Amount)
                    Else
                      vRenew = pSubsPeriodPrice * .Quantity
                    End If
                  End If
                  vPPD.ProductRate = vMemberProductRate
                  If .Amount.Length > 0 Then
                    'BR15941: Where fixed Amount set, set PaymentPlanDetailPricing values from this
                    .ProductRate.PaymentPlanDetailPricing.CalculatePricing(.UnitPrice, DoubleValue(vPPD.Amount), False, RenewalDate, vVATRate, False)
                  End If
                  SetResetOrderTerm()
                Else
                  vMemberProductRate = vPPD.ProductRate
                  If .ProductCode = pFirstPeriodsProductRate.ProductCode And .RateCode = pFirstPeriodsProductRate.RateCode Then
                    vMemberProductRate = pSubsPeriodProductRate
                    vPPD.ProductRate = pSubsPeriodProductRate
                    If .NetFixedAmount.Length > 0 Then
                      'Fixed Amount excluding VAT
                      'Need to calculate the VAT and then re-set the (Gross) Fixed Amount - this can only be set for VAT-Exclusive Rates
                      vRenew = FixTwoPlaces(DoubleValue(vPPD.NetFixedAmount) + vVATRate.CalculateVATAmount(DoubleValue(vPPD.NetFixedAmount), True, RenewalDate))
                      vPPD.Amount = vRenew.ToString
                    ElseIf .Amount.Length > 0 Then
                      'Fixed Amount including VAT
                      vRenew = CDbl(.Amount)
                    Else
                      vRenew = pSubsPeriodPrice * .Quantity
                    End If
                    If .Amount.Length > 0 Then
                      'BR15941: Where fixed Amount set, set PaymentPlanDetailPricing values from this
                      vPPD.ProductRate.PaymentPlanDetailPricing.CalculatePricing(.UnitPrice, DoubleValue(vPPD.Amount), False, RenewalDate, vVATRate, False)
                    End If
                  End If
                End If
                vMemberRenew = vRenew
              End If

              If .DetailNumber > 1 And .ProductCode = vODProduct And .RateCode = vODRate Then
                vPPD.ProductRate = vMemberProductRate
                vRenew = vMemberRenew
                'Must ensure that we don't renew at a higher price than any fixed amount
                If vPPD.Amount.Length > 0 Then
                  If vMemberRenew > DoubleValue(vPPD.Amount) Then vRenew = DoubleValue(vPPD.Amount) 'Must renew at the (gross) Fixed Amount
                ElseIf vPPD.NetFixedAmount.Length > 0 Then
                  Dim vFixed As Double = FixTwoPlaces(DoubleValue(vPPD.NetFixedAmount) + vVATRate.CalculateVATAmount(DoubleValue(vPPD.NetFixedAmount), True, RenewalDate))
                  If vMemberRenew > vFixed Then vRenew = vFixed 'Must renew at the calculated gross Fixed Amount
                End If
              End If
            Else
              If Term < 0 Then SetResetOrderTerm()
            End If
          End If
        End With

        If vPPD.PriceIsPercentage = "T" Then
          'calculate discount on the non-percentage total
          vRenew = FixTwoPlaces(vNonPerBalance * (vRenew / 100)) * -1
        ElseIf vPPD.PriceIsPercentage = "P" Then
          'calculate discount on the previous total
          vRenew = FixTwoPlaces(vSum * (vRenew / 100)) * -1
        Else
          vNonPerBalance += vRenew
        End If

        If Amount <> "" And (vSum + vRenew) > Val(Amount) Then
          vRenew = Val(Amount) - vSum
        End If

        vPPD.Balance = vPPD.Balance + vRenew
        vPPD.SetAmended((TodaysDate()), mvEnv.User.UserID)
        vSum = vSum + vRenew

        If pUpdate Then
          If mvEnv.GetConfig("me_branch_income_period") = "LAST" And mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlBranchProduct) = vPPD.ProductCode Then
            If mvCurrentMembers.Count() > 0 Then
              InsertBranchIncome(CType(mvCurrentMembers.Item(1), Member).Branch, (vPPD.CurrentPrice))
            End If
          End If
        End If
      Next vPPD

      If Len(mvClassFields(PaymentPlanFields.ofAmount).Value) > 0 Then vSum = Val(mvClassFields(PaymentPlanFields.ofAmount).Value)
      mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue = vSum
      mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = Balance + vSum

      mvClassFields(PaymentPlanFields.ofFrequencyAmount).DoubleValue = CalcFrequencyAmount(mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue + mvClassFields(PaymentPlanFields.ofArrears).DoubleValue, PaymentFrequencyFrequency)
      'Frequency amount may be changed once the payment schedule has been created

      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPPDetailsEffectiveDate) Then
        'We do this here after the other calculation because:
        ' (a) We must set the RenewalAmount to the full annual amount
        ' (b) Balance must be greater than zero for the Prorata calculations to work
        vDiff = 0
        For Each vPPD In mvDetails
          With vPPD
            If .DetailNumber > 1 And IsDate(.EffectiveDate) Then
              If CDate(.EffectiveDate) > CDate(RenewalDate) Then
                'EffectiveDate can only be set if certain configs are set so if the date is set we assume the configs are still set
                'EffectiveDate is greater than RenewalDate
                vVATRate = mvEnv.VATRate(vPPD.Product.ProductVatCategory, vPayerVATCategory)
                vRenew = .Balance
                vRenew = GetProrataBalance(vRenew, .EffectiveDate, True, vPPD.ProductRate, vVATRate, vPPD.ContactNumber, vPPD.Quantity, 0)
                vDiff = vDiff + FixTwoPlaces(.Balance - vRenew)
                .Balance = vRenew
              End If
            End If
          End With
        Next vPPD
        If vDiff > 0 Then
          'Update Balance wth the new amount
          mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = FixTwoPlaces(Balance - vDiff)
        End If
      End If

      For Each vPPD In mvDetails
        vPPD.SetModifierAndPriceData(vPPD.ProductRate.PaymentPlanDetailPricing)
      Next
      'BR19565 - Restore retained details after all the processing for new details.
      If mvClassFields(PaymentPlanFields.ofOrderType).Value = "M" AndAlso mvEnv.GetControlBool(CDBEnvironment.cdbControlConstants.cdbControlRemoveZeroBalancePpdLines) Then
        For Each vDetailLine As PaymentPlanDetail In vRetainedPpdLines
          vDetailNo += 1
          vDetailLine.DetailNumber = vDetailNo
          mvDetails.Add(vDetailLine)
        Next vDetailLine
      End If
    End Sub

    Public Sub CalculateRenewalsFutureBalance(ByVal pCurrentFuturePrice As String, ByVal pOrigEntitleList As String, ByVal pNewMembershipType As String, ByVal pReasonIsGrade As Boolean, ByRef pContactNumber As Integer, ByRef pAddressNumber As Integer, ByVal pFirstPeriodsProductRate As ProductRate, ByVal pFirstPeriodsPrice As Double, ByRef pDespatchMethod As String, ByVal pNewEntitlements As List(Of MembershipEntitlement), ByRef pFutureMembershipAmount As String, ByVal pWODonationArrears As Boolean)
      Dim vEntitlement As MembershipEntitlement
      Dim vPPDetails As PaymentPlanDetail
      Dim vOPS As OrderPaymentSchedule = Nothing

      Dim vEntitlementPrice As Double
      Dim vOrderDetailsPrice As Double
      Dim vPrice As Double
      Dim vSum As Double
      Dim vTotalODPrice As Double
      Dim vDonArrears As Double
      Dim vSource As String
      Dim vPPDetail As PaymentPlanDetail

      'All arrears figures are set in Renewals & Reminders
      If pWODonationArrears Then
        'Write-off any donation arrears before the new balances are calculated
        For Each vPPDetails In mvDetails
          If vPPDetails.Donation = True And vPPDetails.Arrears > 0 Then
            vDonArrears = vDonArrears + vPPDetails.Arrears
            vPPDetails.Balance = vPPDetails.Balance - vPPDetails.Arrears
            vPPDetails.Arrears = 0
            vPPDetails.SetAmended((TodaysDate()), mvEnv.User.UserID)
          End If
        Next vPPDetails

        If vDonArrears > 0 Then
          mvClassFields(PaymentPlanFields.ofArrears).DoubleValue = mvClassFields(PaymentPlanFields.ofArrears).DoubleValue - vDonArrears
          mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = mvClassFields(PaymentPlanFields.ofBalance).DoubleValue - vDonArrears

          Do
            vOPS = CType(mvEnv.GetPreviousItem(ScheduledPayments, vOPS), OrderPaymentSchedule)
            If Not (vOPS Is Nothing) Then
              If CDate(vOPS.DueDate) < CDate(TodaysDate()) Then
                If vOPS.AmountOutstanding > vDonArrears Then
                  vOPS.WriteOff(vDonArrears)
                  vDonArrears = 0
                Else
                  vDonArrears = vDonArrears - vOPS.AmountOutstanding
                  vOPS.WriteOff(vOPS.AmountOutstanding)
                End If
                vOPS.Save()
              End If
            End If
          Loop While ((Not (vOPS Is Nothing)) And vDonArrears > 0)
        End If
      End If

      vSource = CType(mvDetails.Item(1), PaymentPlanDetail).Source

      Dim vRetainedPpdLines As New List(Of PaymentPlanDetail)
      If mvClassFields(PaymentPlanFields.ofOrderType).Value = "M" AndAlso mvEnv.GetControlBool(CDBEnvironment.cdbControlConstants.cdbControlRemoveZeroBalancePpdLines) Then
        vRetainedPpdLines = GetRetainedPpdLines()
        mvDetails.Clear()
        mvClassFields(PaymentPlanFields.ofNextDetailLine).Value = CStr(1)
      End If

      'Now calculate the renewal amounts
      vSum = 0
      vEntitlementPrice = 0
      vOrderDetailsPrice = 0
      vPrice = 0
      vTotalODPrice = 0

      'Add new Detail line for the new membership type
      Dim vDetailNo As Integer = 0
      AddDetail(vDetailNo, pContactNumber, pAddressNumber, pFirstPeriodsProductRate.ProductCode, pFirstPeriodsProductRate.RateCode, 1, pFutureMembershipAmount, pFirstPeriodsPrice, 0, pDespatchMethod, 0, "F", cdbValueKnownConstants.cdbVKCunknown, CStr(TodaysDate()), CStr(TodaysDate()), cdbValueKnownConstants.cdbVKCunknown, "", "", "", vSource)
      vPPDetail = CType(mvDetails.Item(GetDetailKeyFromLineNo(vDetailNo)), PaymentPlanDetail)
      vPPDetail.SetModifierAndPriceData(pFirstPeriodsProductRate.PaymentPlanDetailPricing)
      'Start off with the balance for the new membership product and add all non% balances
      Dim vNonPerBalance As Double = vPPDetail.Balance
      Dim vDiscounts As New List(Of PaymentPlanDetail)

      'For all original lines that are not entitlements, create a new line with timestatus of F
      Dim vVATRate As VatRate
      Dim vPayerVATCategory As String = Payer.VATCategory
      For Each vPPDetails In mvDetails
        vVATRate = mvEnv.VATRate(vPPDetails.Product.ProductVatCategory, vPayerVATCategory)
        If vPPDetails.TimeStatus = "C" Then
          If vPPDetails.DetailNumber > 1 And (InStr(1, pOrigEntitleList, vPPDetails.ProductCode) = 0 Or pOrigEntitleList = "") Then
            With vPPDetails
              If .NetFixedAmount.Length > 0 Then
                'Fixed Amount excluding VAT
                'Need to calculate the VAT and then re-set the (Gross) Fixed Amount - this can only be set for VAT-Exclusive Rates
                vOrderDetailsPrice = FixTwoPlaces(DoubleValue(.NetFixedAmount) + vVATRate.CalculateVATAmount(DoubleValue(.NetFixedAmount), True, RenewalDate))
                .Amount = vOrderDetailsPrice.ToString
              ElseIf .Amount.Length > 0 Then
                'Fixed Amount including VAT
                vOrderDetailsPrice = CDbl(.Amount)
              Else
                Select Case pCurrentFuturePrice
                  Case "C"
                    vOrderDetailsPrice = vPPDetails.RenewalPrice(False, vVATRate, DateValue(RenewalDate))
                  Case "F"
                    vOrderDetailsPrice = vPPDetails.RenewalPrice(True, vVATRate, DateValue(RenewalDate))
                  Case Else
                    vOrderDetailsPrice = vPPDetails.Price(CDate(RenewalDate), vVATRate, 0, True)
                End Select
              End If

              If vPPDetails.PriceIsPercentage.Length > 0 AndAlso vPPDetails.PriceIsPercentage <> "N" Then
                'collect the discounts and apply them after adding the new entitlements 
                vDiscounts.Add(vPPDetails)
                Continue For
              End If

              vNonPerBalance += vOrderDetailsPrice

              vTotalODPrice = vTotalODPrice + vOrderDetailsPrice
              vDetailNo = 0     'Reset to zero so that AddDetail can assign the next number
              AddDetail(vDetailNo, .ContactNumber, .AddressNumber, .ProductCode, .RateCode, .Quantity, .Amount, (.Balance + vOrderDetailsPrice), .Arrears, .DespatchMethod, 0, "F", cdbValueKnownConstants.cdbVKCunknown, CStr(TodaysDate()), CStr(TodaysDate()), cdbValueKnownConstants.cdbVKCunknown, .DistributionCode, "", "", .Source, .NetFixedAmount)
              vPPDetail = CType(mvDetails.Item(GetDetailKeyFromLineNo(vDetailNo)), PaymentPlanDetail)
              vPPDetail.SetModifierAndPriceData(.ProductRate.PaymentPlanDetailPricing)
              vPPDetails.Arrears = 0
              vPPDetails.Balance = 0
              vPPDetails.SetAmended((TodaysDate()), mvEnv.User.UserID)
            End With
          End If
        End If
        If vPPDetails.Amount.Length > 0 Then
          'BR15941: Where fixed Amount is set, set PaymentPlanDetailPricing values from this
          Dim vUnitPrice As Double = vPPDetails.UnitPrice
          If vUnitPrice = 0 AndAlso DoubleValue(vPPDetails.Amount) <> 0 Then vUnitPrice = DoubleValue(vPPDetails.Amount)
          vPPDetails.ProductRate.PaymentPlanDetailPricing.CalculatePricing(vUnitPrice, DoubleValue(vPPDetails.Amount), False, RenewalDate, vVATRate, False)
        End If
      Next vPPDetails

      'Add new detail line for each new entitlement
      For Each vEntitlement In pNewEntitlements
        vVATRate = mvEnv.VATRate(vEntitlement.EntitlementProductVATCategory, vPayerVATCategory)
        Select Case pCurrentFuturePrice
          Case "C"
            vPrice = vEntitlement.ProductRate.RenewalPrice(False, pContactNumber, vEntitlement.Quantity, vVATRate, DateValue(RenewalDate))
          Case "F"
            vPrice = vEntitlement.ProductRate.RenewalPrice(True, pContactNumber, vEntitlement.Quantity, vVATRate, DateValue(RenewalDate))
          Case Else
            vPrice = vEntitlement.ProductRate.Price(CDate(RenewalDate), pContactNumber, vEntitlement.Quantity, vVATRate)
        End Select

        If vEntitlement.ProductRate.PriceIsPercentage = "T" Then
          'calculate discount on the non-percentage total
          vPrice = FixTwoPlaces(vNonPerBalance * (vPrice / 100)) * -1
        ElseIf vEntitlement.ProductRate.PriceIsPercentage = "P" Then
          'calculate discount on the previous total
          vPrice = FixTwoPlaces(vEntitlementPrice * (vPrice / 100)) * -1
        Else
          vNonPerBalance += vPrice
        End If

        vEntitlementPrice = vEntitlementPrice + vPrice
        vDetailNo = 0     'Reset to zero so that AddDetail can assign the next number
        AddDetail(vDetailNo, pContactNumber, pAddressNumber, (vEntitlement.ProductCode), (vEntitlement.RateCode), (vEntitlement.Quantity), "", vPrice, 0, (vEntitlement.DespatchMethod), 0, "F", cdbValueKnownConstants.cdbVKCunknown, CStr(TodaysDate()), CStr(TodaysDate()), cdbValueKnownConstants.cdbVKCunknown, "", "", "", vSource)
        vPPDetail = CType(mvDetails.Item(GetDetailKeyFromLineNo(vDetailNo)), PaymentPlanDetail)
        vPPDetail.SetModifierAndPriceData(vEntitlement.ProductRate.PaymentPlanDetailPricing)
      Next vEntitlement

      'The current total. Discounts of type 'P' will be calculated on this amount
      'i.e. Sum of original lines that are not entitlements + First period product price + sum of new entitlements
      vTotalODPrice = vTotalODPrice + pFirstPeriodsPrice + vEntitlementPrice

      'Apply discounts from previous membership that were not part of the entitlements
      For Each vDiscount As PaymentPlanDetail In vDiscounts
        vVATRate = mvEnv.VATRate(vDiscount.Product.ProductVatCategory, vPayerVATCategory)
        With vDiscount
          Select Case pCurrentFuturePrice
            Case "C"
              vOrderDetailsPrice = vDiscount.RenewalPrice(False, vVATRate, DateValue(RenewalDate))
            Case "F"
              vOrderDetailsPrice = vDiscount.RenewalPrice(True, vVATRate, DateValue(RenewalDate))
            Case Else
              vOrderDetailsPrice = vDiscount.Price(CDate(RenewalDate), vVATRate, 0, True)
          End Select

          If vDiscount.PriceIsPercentage = "T" Then
            'calculate discount on the non-percentage total
            vOrderDetailsPrice = FixTwoPlaces(vNonPerBalance * (vOrderDetailsPrice / 100)) * -1
          ElseIf vDiscount.PriceIsPercentage = "P" Then
            'calculate discount on the previous total
            vOrderDetailsPrice = FixTwoPlaces(vTotalODPrice * (vOrderDetailsPrice / 100)) * -1
          End If

          vTotalODPrice = vTotalODPrice + vOrderDetailsPrice
          vDetailNo = 0     'Reset to zero so that AddDetail can assign the next number
          AddDetail(vDetailNo, .ContactNumber, .AddressNumber, .ProductCode, .RateCode, .Quantity, .Amount, (.Balance + vOrderDetailsPrice), .Arrears, .DespatchMethod, 0, "F", cdbValueKnownConstants.cdbVKCunknown, CStr(TodaysDate()), CStr(TodaysDate()), cdbValueKnownConstants.cdbVKCunknown, .DistributionCode, "", "", .Source, .NetFixedAmount)
          vPPDetail = CType(mvDetails.Item(GetDetailKeyFromLineNo(vDetailNo)), PaymentPlanDetail)
          If vPPDetail.Amount.Length > 0 Then
            vPPDetail.ProductRate.PaymentPlanDetailPricing.CalculatePricing(vPPDetail.UnitPrice, DoubleValue(vPPDetail.Amount), vPPDetail.VATExclusive, RenewalDate, vVATRate, False)
          End If
          vPPDetail.SetModifierAndPriceData(.ProductRate.PaymentPlanDetailPricing)
          vDiscount.Balance = 0
          vDiscount.SetAmended((TodaysDate()), mvEnv.User.UserID)
        End With
      Next

      For Each vDetailLine As PaymentPlanDetail In vRetainedPpdLines
        vDetailNo += 1
        vDetailLine.DetailNumber = vDetailNo
        Dim vDetailLineVATRate As VatRate = mvEnv.VATRate(vDetailLine.Product.ProductVatCategory, vPayerVATCategory)
        Dim vDetailPrice As Double = vDetailLine.Price(CDate(RenewalDate), vDetailLineVATRate, 0, True)
        mvDetails.Add(vDetailLine)
      Next vDetailLine

      For Each vPPDetails In mvDetails
        If (vPPDetails.HasPriceInfo = False OrElse vPPDetails.Amount.Length > 0) AndAlso vPPDetails.TimeStatus <> "C" Then vPPDetails.SetModifierAndPriceData(vPPDetails.ProductRate.PaymentPlanDetailPricing)
      Next

      'Update the Payment Plan
      vSum = vTotalODPrice
      mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue = vSum
      mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = (Balance + vSum)
      mvClassFields(PaymentPlanFields.ofMembershipType).Value = pNewMembershipType
      If pReasonIsGrade Then mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value = pNewMembershipType
      mvClassFields(PaymentPlanFields.ofRenewalPending).Value = CStr(True)
      mvClassFields(PaymentPlanFields.ofFrequencyAmount).DoubleValue = CalcFrequencyAmount(mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue + mvClassFields(PaymentPlanFields.ofArrears).DoubleValue, PaymentFrequencyFrequency)
    End Sub

    Private Function GetRetainedPpdLines() As List(Of PaymentPlanDetail)
      Dim vRetainedDetailLines As New List(Of PaymentPlanDetail)
      GetMember(DirectCast(CurrentMembers(1), Member).ContactNumber)
      Me.SetDetailLineTypesForSC()
      For Each vDetailLine As PaymentPlanDetail In Me.Details
        'If vDetailLine.DetailNumber > 1 AndAlso vDetailLine.DetailType = CARE.Access.PaymentPlanDetail.PaymentPlanDetailTypes.ppdltEntitlement Then
        If vDetailLine.Balance <> 0 Then
          vDetailLine.SetValidTo(CDate(Me.RenewalDate).AddDays(-1))
          vRetainedDetailLines.Add(vDetailLine)
        End If
      Next
      Return vRetainedDetailLines
    End Function

    Public Sub SetUnCancelled()
      mvClassFields(PaymentPlanFields.ofCancellationReason).Value = ""
      mvClassFields(PaymentPlanFields.ofCancelledBy).Value = ""
      mvClassFields(PaymentPlanFields.ofCancelledOn).Value = ""
      mvClassFields(PaymentPlanFields.ofCancellationSource).Value = ""
      If mvClassFields(PaymentPlanFields.ofFutureCancellationDate).Value.Length > 0 Then
        If CDate(mvClassFields(PaymentPlanFields.ofFutureCancellationDate).Value) <= CDate(TodaysDate()) Then
          mvClassFields(PaymentPlanFields.ofFutureCancellationReason).Value = ""
          mvClassFields(PaymentPlanFields.ofFutureCancellationDate).Value = ""
          mvClassFields(PaymentPlanFields.ofFutureCancellationSource).Value = ""
        End If
      End If
      '  Select Case pType
      '  Case pptSO
      '    mvClassFields(ofBankersOrder).Value = "Y"
      '  End Select
    End Sub

    Public Sub ProcessFutureMembership(ByRef pMember As Member, ByRef pRenewalDate As String, ByRef pTerm As Integer, ByVal pUpdatePayPlanAmounts As Boolean)
      'pUpdatePayPlanAmounts is used to determine whether the Renewal/Frequency amounts are to be updated when renewals not run
      Dim vNewMember As Member
      Dim vPPD As PaymentPlanDetail
      Dim vNewCost As String = ""
      Dim vRenewalsRun As Boolean
      Dim vCount As Integer
      Dim vNonMemPrice As Double
      Dim vFutureTrigger As String
      Dim vFutureCancellationReason As String
      Dim vDeleteFields As New CDBFields
      Dim vFutureType As New FutureMembershipType(mvEnv)
      Dim vRenewalPeriodStart As String
      Dim vWhereFields As New CDBFields
      Dim vRenewalDate As String

      vFutureTrigger = mvEnv.GetConfig("me_future_change_trigger")
      vFutureCancellationReason = mvEnv.GetConfig("me_change_type_cancel_reason")

      vNewMember = New Member
      vNewMember.Init(mvEnv)
      vNewMember.InitFutureMember(pMember)
      vFutureType.Init((pMember.MembershipNumber))

      'if new membership type is non-annual, need to find out whether new membership price free or charged
      If vNewMember.MembershipType.Annual <> "Y" Then
        If vNewMember.MembershipType.ProductRate.Price(CDate(RenewalDate), vNewMember.ContactNumber) = 0 Then
          vNewCost = "F"
        Else
          vNewCost = "C"
        End If
      End If 'if new membership type non-annual

      'Force the new entitlements to be read if not already
      vCount = vNewMember.MembershipType.Entitlements.Count()

      'ascertain whether or not renewals have been run
      If MembershipTypeCode = vNewMember.MembershipTypeCode Then
        vRenewalsRun = True
      Else
        vRenewalsRun = False
        vCount = pMember.MembershipType.Entitlements.Count()

        'Check Term is correct (R&R does this as well)
        If (pMember.MembershipType.PaymentTerm <> vNewMember.MembershipType.PaymentTerm) Or (pMember.MembershipType.MembershipTerm <> vNewMember.MembershipType.MembershipTerm) Then
          Term = vNewMember.MembershipType.MembershipTerm
          Select Case vNewMember.MembershipType.PaymentTerm
            Case MembershipType.MembershipTypeTerms.mtfWeeklyTerm
              TermUnits = OrderTermUnits.otuWeekly
            Case MembershipType.MembershipTypeTerms.mtfMonthlyTerm
              TermUnits = OrderTermUnits.otuMonthly
            Case Else
              TermUnits = OrderTermUnits.otuNone
          End Select
        End If

        'Add up the price of all non entitlement and non-membership lines
        vNonMemPrice = 0
        Dim vVATRate As VatRate
        For Each vPPD In mvDetails
          If vPPD.DetailNumber > 1 Then
            'Check if not list of existing entitlements
            If Not ProductInEntitlements((vPPD.ProductCode), pMember.MembershipType.Entitlements) Then
              vVATRate = mvEnv.VATRate(vPPD.Product.ProductVatCategory, Payer.VATCategory)
              vNonMemPrice += vPPD.Price(CDate(RenewalDate), vVATRate, 1)   'Calculate Price for 1 item only
            End If
          End If
        Next vPPD
      End If
      pMember.SetCancelled(vFutureCancellationReason)

      '--------------------------------------------------------------------------------
      'Start updates
      '--------------------------------------------------------------------------------

      'mvEnv.Connection.StartTransaction
      vDeleteFields.Add("membership_number", CDBField.FieldTypes.cftLong, pMember.MembershipNumber)
      mvEnv.Connection.DeleteRecords("member_future_type", vDeleteFields)
      vRenewalDate = RenewalDate
      If vFutureTrigger = "FIRST_PAYMENT" And RenewalPending = False And vNewMember.MembershipType.SubsequentTrigger = "F" Then
        vRenewalDate = CDate(RenewalDate).AddYears(vNewMember.MembershipType.MembershipTerm).ToString(CAREDateFormat)
      End If
      vNewMember.AddMemberFutureType(vRenewalDate, Term, (pMember.ContactDateOfBirth), RenewalPending, TermUnits)
      If vRenewalsRun Then
        ProcessFMRenewals(vFutureTrigger, vFutureCancellationReason, (pMember.FutureChangeDate), vNewMember)
      Else
        ProcessFMNonRenewals(vFutureTrigger, vFutureCancellationReason, (pMember.FutureChangeDate), vNewMember, vNonMemPrice, vFutureType, pUpdatePayPlanAmounts)
      End If
      'handle changes to a non-annual, free membership - If there is a balance or the new membership has a cost,
      'batch processing will set the dates when the payment is processed
      If vNewMember.MembershipType.Annual <> "Y" And vNewCost = "F" Then
        If Balance = 0 Then
          RenewalDate = CDate(StartDate).AddYears(99).ToString(CAREDateFormat)
          NextPaymentDue = CDate(StartDate).AddYears(99).ToString(CAREDateFormat)
        End If
      End If
      pMember.SaveChanges("", mvEnv.AuditStyle = CDBEnvironment.AuditStyleTypes.ausExtended)
      'BR19435 Future Membership type contact activity valid to date is now extended when you run future membership changes process
      vRenewalPeriodStart = RenewalPeriodStart
      vNewMember.PaymentPlanRenewalDate = vRenewalPeriodStart
      vNewMember.AddActivityAndSuppression(vRenewalPeriodStart)
      vNewMember.SaveChanges("", mvEnv.AuditStyle = CDBEnvironment.AuditStyleTypes.ausExtended)

      For Each vPPD In mvDetails
        vPPD.SaveChanges()
      Next vPPD
      SaveChanges()
      mvEnv.Connection.CommitTransaction()
      If vRenewalsRun = False And vFutureTrigger = "FIRST_PAYMENT" Then
        'Reset Details collection - need to do this so as to correctly re-calculate balances
        InitPaymentPlanDetails(mvEnv, PlanNumber)
      End If
    End Sub

    Private Sub ProcessFMRenewals(ByRef pFutureTrigger As String, ByRef pFutureCancellationReason As String, ByRef pChangeDate As String, ByRef pNewMember As Member)
      'Process the order_details when the renewals process has been run
      'and hence lines for future membership and entitlements have been created
      Dim vPPD As PaymentPlanDetail
      Dim vArrearsFields As New CDBFields
      Dim vDoneMemberLine As Boolean
      Dim vSubscription As New Subscription

      vArrearsFields.Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
      vArrearsFields.Add("detail_number", CDBField.FieldTypes.cftLong)
      For Each vPPD In mvDetails
        If vPPD.TimeStatus = "C" Then
          If pFutureTrigger = "RENEWAL_DATE" And vPPD.Subscription = True Then
            vSubscription.Init(mvEnv)
            vSubscription.CancelAnyExisting(PlanNumber, (vPPD.ContactNumber), (vPPD.ProductCode), pFutureCancellationReason)
          End If
          If vPPD.Balance = 0 Then
            vPPD.Delete()
          Else
            'if balance remains on old membership line, re-number it
            If vPPD.DetailNumber = 1 Then
              vPPD.DetailNumber = mvClassFields(PaymentPlanFields.ofNextDetailLine).IntegerValue
              mvClassFields(PaymentPlanFields.ofNextDetailLine).Value = CStr(CDbl(mvClassFields(PaymentPlanFields.ofNextDetailLine).Value) + 1)
              '          vPPD.SaveChanges
            End If
            vPPD.Amount = "0" 'Always set Amount to 0 to prevent R&R from renewing them
            If vPPD.NetFixedAmount.Length > 0 Then vPPD.NetFixedAmount = "0"
            vPPD.SaveChanges()
            vArrearsFields(2).Value = CStr(vPPD.DetailNumber)
            mvEnv.Connection.InsertRecord("order_detail_arrears", vArrearsFields)
          End If
        Else 'first status 'F' line is new membership line
          If Not vDoneMemberLine Then
            vPPD.DetailNumber = 1
            vDoneMemberLine = True
          End If
          vPPD.TimeStatus = "C"
          vPPD.SaveChanges()
          If pFutureTrigger = "RENEWAL_DATE" And vPPD.Subscription = True Then
            vSubscription.Init(mvEnv)
            vSubscription.CreateForFutureChange(Me, vPPD, pNewMember, pChangeDate)
          End If
        End If
      Next vPPD
      'Reset Details collection
      InitPaymentPlanDetails(mvEnv, PlanNumber)
      mvClassFields(PaymentPlanFields.ofDetailLines).Value = CStr(mvDetails.Count())
    End Sub

    Private Sub ProcessFMNonRenewals(ByRef pFutureTrigger As String, ByRef pFutureCancellationReason As String, ByRef pChangeDate As String, ByRef pNewMember As Member, ByRef pNonMemPrice As Double, ByRef pFutureType As FutureMembershipType, ByVal pUpdatePayPlanAmounts As Boolean)
      'Process the order_details when the renewals process has not been run
      'and hence lines for future membership and entitlements have not been created
      Dim vPPD As PaymentPlanDetail = Nothing
      Dim vEntitlement As MembershipEntitlement
      Dim vArrearsFields As New CDBFields
      Dim vPrice As Double
      Dim vSub As cdbValueKnownConstants
      Dim vSubscription As New Subscription
      Dim vProduct As String
      Dim vRate As String
      Dim vAmount As String
      Dim vDetails As New Collection

      vArrearsFields.Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
      vArrearsFields.Add("detail_number", CDBField.FieldTypes.cftLong)
      vPrice = pNonMemPrice
      'delete or copy to order_detail_arrears for deletion if existing records related to orig membership type
      For Each vPPD In mvDetails
        If pFutureTrigger = "RENEWAL_DATE" And vPPD.Subscription = True Then
          vSubscription.Init(mvEnv)
          vSubscription.CancelAnyExisting(PlanNumber, ContactNumber, (vPPD.ProductCode), pFutureCancellationReason)
        End If
        If vPPD.Balance = 0 Then
          'delete if original membership line or entitlement
          If vPPD.DetailNumber = 1 Or ProductInEntitlements((vPPD.ProductCode), MembershipType.Entitlements) Then
            vPPD.Delete()
          End If
        Else
          'if balance remains on old membership line, re-number it
          If vPPD.DetailNumber = 1 Then
            vPPD.DetailNumber = mvClassFields(PaymentPlanFields.ofNextDetailLine).IntegerValue
            mvClassFields(PaymentPlanFields.ofNextDetailLine).Value = CStr(CDbl(mvClassFields(PaymentPlanFields.ofNextDetailLine).Value) + 1)
            '        vPPD.SaveChanges
            vArrearsFields(2).Value = CStr(vPPD.DetailNumber)
            mvEnv.Connection.InsertRecord("order_detail_arrears", vArrearsFields, True)
          End If
          vPPD.Amount = "0" 'Always set Amount to 0 to prevent R&R from renewing them
          If vPPD.NetFixedAmount.Length > 0 Then vPPD.NetFixedAmount = "0"
          vPPD.SaveChanges()
          'copy to order_detail_arrears if original membership line or entitlement
          If ProductInEntitlements((vPPD.ProductCode), MembershipType.Entitlements) Then
            vArrearsFields(2).Value = CStr(vPPD.DetailNumber)
            mvEnv.Connection.InsertRecord("order_detail_arrears", vArrearsFields, True)
          End If
        End If
      Next vPPD
      'Reset Details collection
      InitPaymentPlanDetails(mvEnv, PlanNumber)
      mvClassFields(PaymentPlanFields.ofDetailLines).Value = CStr(mvDetails.Count())

      'create new order_detail lines for new membership type
      Dim vVATRate As VatRate
      Dim vPayerVATCategory As String = Payer.VATCategory
      With pNewMember
        Dim vNetFixedAmount As String = ""
        If Len(pFutureType.FutureMembershipProductCode) > 0 Then
          With pFutureType
            vSub = CType(IIf(.FutureMembershipProduct.Subscription, cdbValueKnownConstants.cdbVKCYes, cdbValueKnownConstants.cdbVKCNo), cdbValueKnownConstants)
            vProduct = .FutureMembershipProductCode
            vRate = .FutureMembershipRateCode
            vVATRate = mvEnv.VATRate(.FutureMembershipProduct.ProductVatCategory, vPayerVATCategory)
            If .FutureMembershipProductRate.Price(CDate(RenewalDate), pNewMember.ContactNumber, 1, vVATRate) = 0 Then
              If .FutureMembershipProductRate.VatExclusive Then
                vNetFixedAmount = .FutureMembershipAmount.ToString
                vAmount = FixTwoPlaces(DoubleValue(vNetFixedAmount) + vVATRate.CalculateVATAmount(DoubleValue(vNetFixedAmount), True, RenewalDate)).ToString
              Else
                vAmount = .FutureMembershipAmount.ToString
              End If
            Else
              vAmount = ""
              vNetFixedAmount = ""
            End If
            'add on new membership cost to total price
            vPrice += If(vNetFixedAmount.Length > 0, DoubleValue(vNetFixedAmount), .FutureMembershipAmount)
          End With
        Else
          vSub = CType(IIf(.MembershipType.Subscription, cdbValueKnownConstants.cdbVKCYes, cdbValueKnownConstants.cdbVKCNo), cdbValueKnownConstants)
          vProduct = .MembershipType.FirstPeriodsProduct
          vRate = .MembershipType.FirstPeriodsRate
          vAmount = ""
          vNetFixedAmount = ""
          'add on new membership cost to total price
          vVATRate = mvEnv.VATRate(.MembershipType.ProductVATCategory, vPayerVATCategory)
          vPrice += .MembershipType.ProductRate.Price(CDate(RenewalDate), .ContactNumber, 1, vVATRate)
        End If
        AddDetail(1, .ContactNumber, .AddressNumber, vProduct, vRate, 1, vAmount, 0, 0, .MembershipType.DespatchMethod, 0, "C", vSub, (TodaysDate()), (TodaysDate()), cdbValueKnownConstants.cdbVKCNo, "", "", "", "", "", "", 0, "", vNetFixedAmount)
      End With
      For Each vPPD In mvDetails
        If vPPD.DetailNumber = 1 Then Exit For
      Next vPPD
      If pFutureTrigger = "RENEWAL_DATE" And vPPD.Subscription = True And Not ProductInEntitlements((vPPD.ProductCode), pNewMember.MembershipType.Entitlements) Then
        vSubscription.Init(mvEnv)
        vSubscription.CreateForFutureChange(Me, vPPD, pNewMember, pChangeDate)
      End If
      For Each vEntitlement In pNewMember.MembershipType.Entitlements
        'create new order_details lines for new membership entitlement
        vSub = CType(IIf(vEntitlement.Subscription, cdbValueKnownConstants.cdbVKCYes, cdbValueKnownConstants.cdbVKCNo), cdbValueKnownConstants)
        AddDetail(0, pNewMember.ContactNumber, pNewMember.AddressNumber, vEntitlement.ProductCode, vEntitlement.RateCode, vEntitlement.Quantity, "", 0, 0, vEntitlement.DespatchMethod, 0, "C", vSub, "", "", cdbValueKnownConstants.cdbVKCNo, "")
        'add on new entitlement cost to total price
        vVATRate = mvEnv.VATRate(vEntitlement.EntitlementProductVATCategory, vPayerVATCategory)
        vPrice += vEntitlement.ProductRate.Price(CDate(RenewalDate), pNewMember.ContactNumber, vEntitlement.Quantity, vVATRate)
        If pFutureTrigger = "RENEWAL_DATE" And vEntitlement.Subscription = True Then
          vSubscription.Init(mvEnv)
          vSubscription.CreateForFutureChange(Me, vPPD, pNewMember, pChangeDate)
        End If
      Next vEntitlement
      mvClassFields(PaymentPlanFields.ofMembershipType).Value = pNewMember.MembershipTypeCode

      If mvEnv.GetConfigOption("reason_is_grade", True) Then
        ReasonForDespatch = pNewMember.MembershipTypeCode
      End If

      If pUpdatePayPlanAmounts Then
        'Do not want to do this if Batch Posting is running this
        RenewalAmount = vPrice
        mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CStr(CalcFrequencyAmount(RenewalAmount, PaymentFrequencyFrequency))
      End If
    End Sub

    Private Function ProductInEntitlements(ByRef pProduct As String, ByRef pColl As List(Of MembershipEntitlement)) As Boolean
      Dim vEntitlement As MembershipEntitlement

      For Each vEntitlement In pColl
        If pProduct = vEntitlement.ProductCode Then
          ProductInEntitlements = True
          Exit For
        End If
      Next vEntitlement
    End Function

    Public Sub SetLastPayment(ByRef pLastPay As String, ByRef pLastPayDate As String)
      mvClassFields(PaymentPlanFields.ofLastPayment).Value = pLastPay
      mvClassFields(PaymentPlanFields.ofLastPaymentDate).Value = pLastPayDate
    End Sub

    Public Sub SetCancellation(ByRef pCancDate As String, ByRef pCancReason As String, ByRef pCancBy As String, Optional ByRef pCancSource As String = "")
      mvClassFields(PaymentPlanFields.ofCancelledOn).Value = pCancDate
      mvClassFields(PaymentPlanFields.ofCancellationReason).Value = pCancReason
      mvClassFields(PaymentPlanFields.ofCancelledBy).Value = pCancBy
      If pCancSource <> "" Then mvClassFields(PaymentPlanFields.ofCancellationSource).Value = pCancSource
      If pCancDate <> "" And pCancReason <> "" And Len(pCancBy) = 0 Then mvClassFields(PaymentPlanFields.ofCancelledBy).Value = mvEnv.User.UserID
    End Sub

    Public Sub ProcessInAdvance(ByRef pBatchNumber As Integer, ByVal pTransType As String, ByVal pPayMethod As String, Optional ByRef pMemberNumber As String = "", Optional ByRef pSource As String = "")
      'Create FA batch for in-advance payments.  If MemberNumber is passed then
      'Batch Transaction Analysis line type of M is created, otherwise type O.
      Dim vBatch As New Batch(mvEnv)
      Dim vBT As BatchTransaction = Nothing
      Dim vBTColl As New Collection 'Collection containing all vBT records added
      Dim vBTA As BatchTransactionAnalysis
      Dim vDLU As New DeclarationLinesUnclaimed(mvEnv)
      Dim vFields As New CDBFields
      Dim vNewOPH As OrderPaymentHistory 'The new OPH record created
      Dim vOPH As New OrderPaymentHistory 'The original OPH
      Dim vOPS As OrderPaymentSchedule = Nothing 'The OPS record being processed
      Dim vRS As CDBRecordSet 'OPH recordset
      Dim vWhereFields As New CDBFields

      Dim vAmount As Double 'Total amount of OPH records processed
      Dim vBatchOpen As Boolean
      Dim vContinue As Boolean
      Dim vNewInAdvance As Boolean 'Flag to show whether a new Provisional OPS needs creating
      Dim vOPSAmount As Double 'OPS Amount to be claimed
      Dim vOPSFound As Boolean
      Dim vProcAmount As Double 'The amount processed so far
      Dim vSource As String = ""
      Dim vSQL As String
      Dim vTransAmount As Double 'The amount for each transaction

      vOPH.Init(mvEnv)
      vSQL = "SELECT " & vOPH.GetRecordSetFields(OrderPaymentHistory.OrderPaymentHistoryRecordSetTypes.ophrtAll) & ", fhd.source, fh.transaction_date, bt.eligible_for_gift_aid"
      vSQL = vSQL & " FROM order_payment_history oph, financial_history_details fhd, financial_history fh, batch_transactions bt"
      vSQL = vSQL & " WHERE oph.order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue
      vSQL = vSQL & " AND oph.status = 'I'"
      vSQL = vSQL & " AND fhd.batch_number = oph.batch_number AND fhd.transaction_number = oph.transaction_number"
      vSQL = vSQL & " AND fhd.line_number = oph.line_number"
      vSQL = vSQL & " AND fh.batch_number = fhd.batch_number AND fh.transaction_number = fhd.transaction_number"
      vSQL = vSQL & " AND bt.batch_number = fh.batch_number AND bt.transaction_number = fh.transaction_number"
      vSQL = vSQL & " ORDER BY oph.payment_number"

      vRS = mvEnv.Connection.GetRecordSet(vSQL)
      vContinue = True

      '(1) Create negative BTA lines
      While (vRS.Fetch() = True And vContinue = True)
        If pSource.Length > 0 Then
          vSource = pSource
        Else
          vSource = vRS.Fields("source").Value
        End If

        'Set up the Batch
        If vBatchOpen = False Then
          If pBatchNumber = 0 Then
            vBatch.InitNewBatch(mvEnv)
            With vBatch
              pBatchNumber = .BatchNumber
              .BatchType = Batch.BatchTypes.FinancialAdjustment
              .BatchCategory = TraderBatchCategory
              .BankAccount = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlBankAccount)
              .ReadyForBanking = True
              .PostedToCashBook = True
              .Picked = "C"
              .SetPayingInSlipPrinted(0)
            End With
          Else
            vBatch.Init(pBatchNumber)
          End If
          vBatchOpen = True
        End If

        'Set up the Transaction
        'A new Transaction will be created for each new Transaction we are processing
        '- TransactionDate set per the Config
        '- EligibleForGiftAid set to the original value
        If ((vRS.Fields("batch_number").IntegerValue <> vOPH.BatchNumber) Or (vRS.Fields("batch_number").IntegerValue = vOPH.BatchNumber) And (vRS.Fields("transaction_number").IntegerValue <> vOPH.TransactionNumber)) Then
          vBT = New BatchTransaction(mvEnv)
          With vBT
            .InitFromBatch(mvEnv, vBatch)
            .ContactNumber = mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue
            .AddressNumber = mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue
            If LCase(mvEnv.GetConfig("fp_adjust_transaction_date")) = "original" Then
              .TransactionDate = vRS.Fields("transaction_date").Value
            Else
              .TransactionDate = TodaysDate()
            End If
            .TransactionType = pTransType
            .PaymentMethod = pPayMethod
            .Receipt = "N"
            .Notes = "Processing of In Advance Payment"
            .EligibleForGiftAid = vRS.Fields("eligible_for_gift_aid").Bool
          End With
          vBTColl.Add(vBT)
        End If
        vOPH.InitFromRecordSet(mvEnv, vRS, OrderPaymentHistory.OrderPaymentHistoryRecordSetTypes.ophrtAll)

        'Find OPS record
        vOPSFound = False
        If vOPH.ScheduledPaymentNumber.Length > 0 Then
          For Each vOPS In ScheduledPayments
            If vOPS.ScheduledPaymentNumber = Val(vOPH.ScheduledPaymentNumber) Then vOPSFound = True
            If vOPSFound Then Exit For
          Next vOPS
          If vOPSFound = False Then
            'If not found in collection then specifically select it
            vOPS = New OrderPaymentSchedule
            vOPS.Init(mvEnv, IntegerValue(vOPH.ScheduledPaymentNumber))
            vOPSFound = vOPS.Existing
          End If
          If vOPSFound = False Then
            'If still not found then find first available (start at end of collection and work fowards)
            vOPS = Nothing
            Do
              vOPS = CType(mvEnv.GetPreviousItem(ScheduledPayments, vOPS), OrderPaymentSchedule)
              If Not vOPS Is Nothing Then
                Select Case vOPS.ScheduledPaymentStatus
                  Case OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsProvisional
                    vOPSFound = True
                  Case OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsUnprocessedPayment
                    If vOPS.AmountOutstanding > 0 Then vOPSFound = True
                End Select
              End If
              If vOPS Is Nothing Then Exit Do
            Loop While vOPSFound = False
          End If
        Else
          'Original payment not paid against OPS (Pre v5.0 payment) so just initialise the class
          vOPS = New OrderPaymentSchedule
          vOPS.Init(mvEnv)
        End If

        'Create BTA
        vBTA = New BatchTransactionAnalysis(mvEnv)
        vBTA.InitFromTransaction(vBT)
        With vBTA
          .Quantity = 1
          .Amount = (vOPH.Amount * -1)
          .PaymentPlanNumber = mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue
          If pMemberNumber.Length > 0 Then
            .MemberNumber = pMemberNumber
            .LineType = "M"
          Else
            .LineType = "O"
          End If
          .Source = vSource
          .Save()
        End With
        vProcAmount = vProcAmount + vOPH.Amount

        'Add new OPH
        PaymentNumber = PaymentNumber + 1
        vNewOPH = New OrderPaymentHistory
        vNewOPH.Init(mvEnv)
        vNewOPH.SetValues((vBTA.BatchNumber), (vBTA.TransactionNumber), PaymentNumber, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue), (vOPH.Amount * -1), (vBTA.LineNumber), 0, vOPS.ScheduledPaymentNumber)
        vNewOPH.Save()

        'Update OPS
        If vOPSFound Then
          vOPSAmount = 0 'No need to update the AmountOutstanding
          If mvProcessRenewal = True And vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Then
            'This in-advance payment is against an OPS for the next year but we can use it now so update the AmountOutstanding
            If (CDate(vOPS.DueDate) = CDate(CalculateRenewalDate(RenewalDate, True))) Then vOPSAmount = (vOPH.Amount * -1)
          End If
          vOPS.SetUnProcessedPayment(True, vOPSAmount)
          vOPS.Save()
        End If

        'Create Reversals
        With vFields
          .Clear()
          .Add("batch_number", CDBField.FieldTypes.cftLong, vBTA.BatchNumber)
          .Add("transaction_number", CDBField.FieldTypes.cftLong, vBTA.TransactionNumber)
          .Add("line_number", CDBField.FieldTypes.cftInteger, vBTA.LineNumber)
          .Add("was_batch_number", CDBField.FieldTypes.cftLong, vOPH.BatchNumber)
          .Add("was_transaction_number", CDBField.FieldTypes.cftLong, vOPH.TransactionNumber)
          .Add("was_line_number", CDBField.FieldTypes.cftInteger, vOPH.LineNumber)
          .Add("was_oph_status", CDBField.FieldTypes.cftCharacter, "I")
        End With
        mvEnv.Connection.InsertRecord("reversals", vFields)

        'Update OPH status
        vOPH.Status = "B"
        vOPH.Save()

        'Update FH and FHD status
        vFields.Clear()
        vFields.Add("status", CDBField.FieldTypes.cftCharacter, "A")
        With vWhereFields
          .Clear()
          .Add("batch_number", CDBField.FieldTypes.cftLong, vOPH.BatchNumber)
          .Add("transaction_number", CDBField.FieldTypes.cftLong, vOPH.TransactionNumber)
        End With
        mvEnv.Connection.UpdateRecords("financial_history", vFields, vWhereFields)

        vFields("status").Value = "R"
        vWhereFields.Add("line_number", CDBField.FieldTypes.cftLong, vOPH.LineNumber)
        mvEnv.Connection.UpdateRecords("financial_history_details", vFields, vWhereFields)
        vBTA.Save() 'FHD lines have changed so we need to save the BTA to allow it to do any post-save processing (like GA claims)

        'Check whether we need to do any further processing
        If ((FixTwoPlaces(vProcAmount) >= mvClassFields(PaymentPlanFields.ofBalance).DoubleValue) Or (FixTwoPlaces(vProcAmount) >= mvClassFields(PaymentPlanFields.ofInAdvance).DoubleValue)) Then
          vContinue = False
        End If
      End While
      vRS.CloseRecordSet()

      '(2) Create positive BTA lines
      If vBatchOpen Then
        'Loop through each BT adding the positive BTA lines
        vAmount = 0
        For Each vBT In vBTColl
          vTransAmount = (vBT.Amount * -1) 'Make it a positive amount
          vOPS = Nothing

          While vTransAmount > 0
            If vNewInAdvance = False Then
              'Run through the OPS to allocate the payments
              vOPSAmount = 0
              Do
                vOPS = CType(mvEnv.GetPreviousItem(ScheduledPayments, vOPS), OrderPaymentSchedule)
                'OPS were added to collection in reverse order
                If Not vOPS Is Nothing Then
                  Select Case vOPS.ScheduledPaymentStatus
                    Case OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsUnprocessedPayment
                      If vOPS.AmountOutstanding > 0 Then
                        vOPSAmount = vOPS.AmountOutstanding
                        If vOPSAmount > vTransAmount Then vOPSAmount = vTransAmount
                        If FixTwoPlaces(vAmount + vOPSAmount) > mvClassFields(PaymentPlanFields.ofBalance).DoubleValue Then
                          vOPSAmount = FixTwoPlaces(mvClassFields(PaymentPlanFields.ofBalance).DoubleValue - vAmount)
                          vNewInAdvance = True
                        End If
                      End If
                  End Select
                Else
                  'Run out of OPS so create
                  vNewInAdvance = True
                End If
                If vOPS Is Nothing Then Exit Do
              Loop While (vOPSAmount = 0 And vNewInAdvance = False)
            Else
              'Create new OPS
              vOPSFound = False
              For Each vOPS In ScheduledPayments
                If vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Then
                  If vOPS.AmountOutstanding > 0 Then vOPSFound = True
                End If
                If vOPSFound Then Exit For
              Next vOPS
              If vOPSFound = False Then
                vOPS = New OrderPaymentSchedule
                vOPS.Init(mvEnv)
                vOPS.CreateInAdvance(mvEnv, Me, vTransAmount, False)
                vOPSFound = vOPS.Existing
              End If
              If vOPSFound Then
                vOPSAmount = vOPS.AmountOutstanding
                If vOPSAmount > vTransAmount Then vOPSAmount = vTransAmount
              End If
            End If

            If vOPSAmount > 0 Then
              'Add BTA
              vBTA = New BatchTransactionAnalysis(mvEnv)
              vBTA.InitFromTransaction(vBT)
              With vBTA
                .Quantity = 1
                .Amount = vOPSAmount
                .PaymentPlanNumber = mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue
                If pMemberNumber.Length > 0 Then
                  .MemberNumber = pMemberNumber
                  .LineType = "M"
                Else
                  .LineType = "O"
                End If
                .Source = vSource
                .Save()
              End With

              'Add new OPH
              PaymentNumber = PaymentNumber + 1
              vNewOPH = New OrderPaymentHistory
              vNewOPH.Init(mvEnv)
              vNewOPH.SetValues((vBTA.BatchNumber), (vBTA.TransactionNumber), PaymentNumber, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue), vOPSAmount, (vBTA.LineNumber), 0, vOPS.ScheduledPaymentNumber)
              vNewOPH.Save()

              'Update OPS
              vOPS.SetUnProcessedPayment(True, vOPSAmount)
              vOPS.Save()

              vTransAmount = FixTwoPlaces(vTransAmount - vOPSAmount) 'Decrease amount outstanding for this transaction
              vAmount = FixTwoPlaces(vAmount + vOPSAmount) 'Increase amount processed so far
            End If
          End While 'vTransAmount > 0
          vBT.SaveChanges()
        Next vBT 'For Each vBT In vBTColl

        'Save the Batch
        'If an existing batch then set NumberOfEntries (for a new batch Save does this)
        If vBatch.Existing Then vBatch.NumberOfEntries = vBatch.NumberOfTransactions
        vBatch.Save()
      End If

    End Sub

    Public Sub SetFutureCancellation(ByRef pCancellationReason As String, ByRef pCancellationDate As Date, ByRef pCancellationSource As String)
      mvClassFields(PaymentPlanFields.ofFutureCancellationDate).Value = pCancellationDate.ToString(CAREDateFormat)
      mvClassFields(PaymentPlanFields.ofFutureCancellationReason).Value = pCancellationReason
      mvClassFields(PaymentPlanFields.ofFutureCancellationSource).Value = pCancellationSource
    End Sub

    Public Sub UnsetFutureCancellation()
      mvClassFields(PaymentPlanFields.ofFutureCancellationDate).Value = ""
      mvClassFields(PaymentPlanFields.ofFutureCancellationReason).Value = ""
      mvClassFields(PaymentPlanFields.ofFutureCancellationSource).Value = ""
    End Sub

    Public Sub ReinstateMembership(ByRef pBalance As Double, ByRef pMembershipNumber As Integer)
      Dim vDate As String = ""
      Dim vTransaction As Boolean
      Dim vAutoPayMethod As CDBEnvironment.ppType
      Dim vDirectDebit As DirectDebit = Nothing
      Dim vCreditCard As CreditCardAuthority = Nothing
      Dim vStandingOrder As StandingOrder = Nothing
      Dim vCovenant As Covenant = Nothing
      Dim vMember As Member
      Dim vRS As CDBRecordSet
      Dim vWhereFields As New CDBFields
      Dim vSubscription As New Subscription
      Dim vSubsCollection As New Collection
      Dim vReinstateCovenant As Boolean
      Dim vAddressChangeWithBranch As String
      Dim vAddressBranch As String

      vAddressChangeWithBranch = mvEnv.GetConfig("cd_address_change_with_branch")
      If Len(vAddressChangeWithBranch) = 0 Then vAddressChangeWithBranch = "N"

      vMember = New Member
      vMember.Init(mvEnv, pMembershipNumber)

      'Get Related Subscriptions
      vSubscription.Init(mvEnv)
      vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).Value, CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, mvClassFields(PaymentPlanFields.ofCancellationReason).Value, CDBField.FieldWhereOperators.fwoEqual)
      vWhereFields.Add("cancelled_on", CDBField.FieldTypes.cftDate, mvClassFields(PaymentPlanFields.ofCancelledOn).Value, CDBField.FieldWhereOperators.fwoEqual)
      vRS = mvEnv.Connection.GetRecordSet("SELECT " & vSubscription.GetRecordSetFields(Subscription.SubscriptionRecordSetTypes.subrstAll) & " FROM subscriptions WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      While vRS.Fetch() = True
        vSubscription.InitFromRecordSet(mvEnv, vRS, Subscription.SubscriptionRecordSetTypes.subrstAll)
        vSubsCollection.Add(vSubscription)
        vSubscription = New Subscription
      End While
      vRS.CloseRecordSet()

      'Check to see if any automatic pay methods need reinstating

      If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppCancelled And mvClassFields(PaymentPlanFields.ofPaymentMethod).Value = mvEnv.GetConfig("pm_dd") Then
        vDirectDebit = New DirectDebit
        vDirectDebit.InitFromPaymentPlan(mvEnv, PlanNumber, True)
        vDate = vDirectDebit.CancelledOn
        If vDate.Length > 0 And vDate = mvClassFields(PaymentPlanFields.ofCancelledOn).Value Then vAutoPayMethod = CDBEnvironment.ppType.pptDD
      End If

      If CreditCardStatus = PaymentPlan.ppYesNoCancel.ppCancelled And mvClassFields(PaymentPlanFields.ofPaymentMethod).Value = mvEnv.GetConfig("pm_ccca") Then
        vCreditCard = New CreditCardAuthority
        vCreditCard.InitFromPaymentPlan(mvEnv, PlanNumber, True)
        If Len(vDate) = 0 Or (Len(vDate) > 0 And vCreditCard.CancelledOn > vDate) Then
          vDate = vCreditCard.CancelledOn
          If vDate = mvClassFields(PaymentPlanFields.ofCancelledOn).Value Then vAutoPayMethod = CDBEnvironment.ppType.pptCCCA
        End If
      End If

      If StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppCancelled And mvClassFields(PaymentPlanFields.ofPaymentMethod).Value = mvEnv.GetConfig("pm_so") Then
        vStandingOrder = New StandingOrder
        vStandingOrder.InitFromPaymentPlan(mvEnv, PlanNumber, True)
        If Len(vDate) = 0 Or (Len(vDate) > 0 And vStandingOrder.CancelledOn > vDate) Then
          vDate = vStandingOrder.CancelledOn
          If vDate = mvClassFields(PaymentPlanFields.ofCancelledOn).Value Then vAutoPayMethod = CDBEnvironment.ppType.pptSO
        End If
      End If

      If CovenantStatus = PaymentPlan.ppCovenant.ppcCancelled Then
        vCovenant = New Covenant
        vCovenant.InitFromPaymentPlan(mvEnv, PlanNumber, True)
        vDate = vCovenant.CancelledOn
        If vDate.Length > 0 And vDate = mvClassFields(PaymentPlanFields.ofCancelledOn).Value Then vReinstateCovenant = True
      End If

      If Not mvEnv.Connection.InTransaction Then
        vTransaction = True
        mvEnv.Connection.StartTransaction()
      End If

      'Reinstate member

      With vMember
        .SetUnCancelled()
        If vAddressChangeWithBranch <> "N" Then
          vAddressBranch = mvEnv.Connection.GetValue("SELECT branch FROM addresses WHERE address_number = " & .AddressNumber)
          If Len(.Branch) > 0 And Len(vAddressBranch) > 0 And .Branch <> vAddressBranch Then .Branch = vAddressBranch
        End If
        .SaveChanges(mvEnv.User.UserID, mvEnv.AuditStyle = CDBEnvironment.AuditStyleTypes.ausExtended)
        mvEnv.AddJournalRecord(JournalTypes.jnlMemberMaintenance, JournalOperations.jnlReinstate, .ContactNumber, .AddressNumber, .MembershipNumber)
        .PaymentPlanRenewalDate = RenewalDate
        .AddActivityAndSuppression((TodaysDate()))
      End With

      'Reinstate payment plan

      SetUnCancelled()
      Balance = pBalance
      Arrears = 0
      NextPaymentDue = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, mvNoOfIntervals * mvPaymentFreqInterval, CDate(NextPaymentDue)))
      RenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, mvNoOfIntervals * mvPaymentFreqInterval, CDate(RenewalDate)))
      If vAddressChangeWithBranch = "P" Then
        vAddressBranch = mvEnv.Connection.GetValue("SELECT branch FROM addresses WHERE address_number = " & AddressNumber)
        If Len(mvClassFields(PaymentPlanFields.ofBranch).Value) > 0 And Len(vAddressBranch) > 0 And mvClassFields(PaymentPlanFields.ofBranch).Value <> vAddressBranch Then mvClassFields(PaymentPlanFields.ofBranch).Value = vAddressBranch
      End If
      GetDetail(1)
      mvDetail.Balance = pBalance
      mvDetail.Arrears = 0
      mvDetail.SaveChanges()

      'Reinstate Subscriptions
      For Each vSubscription In vSubsCollection
        vSubscription.UnCancel()
        vSubscription.Save()
      Next vSubscription

      'Reinstate Covenant
      If vReinstateCovenant Then
        With vCovenant
          .SetUnCancelled()
          .SaveChanges()
          SetCovenant((vCovenant.DepositedDeed))
          Dim vCC As New ContactCategory(mvEnv)
          vCC.ContactTypeSaveActivity(Contact.ContactTypes.ctcContact, .ContactNumber, mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCVActivity), mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCVActivityValue), .Source, .StartDate, CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, .EndDate)), "", ContactCategory.ActivityEntryStyles.aesCheckDateRange)
          mvEnv.AddJournalRecord(JournalTypes.jnlCovenantMaintenance, JournalOperations.jnlReinstate, .ContactNumber, .AddressNumber, .CovenantNumber)
        End With
      End If

      'Reinstate automatic pay method

      Select Case vAutoPayMethod
        Case CDBEnvironment.ppType.pptDD
          With vDirectDebit
            .SetUnCancelled()
            .SaveChanges(mvEnv.User.UserID, True)
            .CreateAutoPMActivity()
            SetAutoPayMethod(ppAutoPayMethods.ppAPMDD, "", .BankAccount)
            mvEnv.AddJournalRecord(JournalTypes.jnlDirectDebitMaintenance, JournalOperations.jnlReinstate, .ContactNumber, .AddressNumber, .DirectDebitNumber)
          End With
        Case CDBEnvironment.ppType.pptCCCA
          With vCreditCard
            .SetUnCancelled()
            .SaveChanges(mvEnv.User.UserID, True)
            .CreateAutoPMActivity()
            SetAutoPayMethod(ppAutoPayMethods.ppAPMCCCA)
            mvEnv.AddJournalRecord(JournalTypes.jnlCreditCardMaintenance, JournalOperations.jnlReinstate, .ContactNumber, .AddressNumber, .CreditCardAuthorityNumber)
          End With
        Case CDBEnvironment.ppType.pptSO
          With vStandingOrder
            .SetUnCancelled()
            .SaveChanges(mvEnv.User.UserID, True)
            .CreateAutoPMActivity()
            SetAutoPayMethod(ppAutoPayMethods.ppAPMSO)
            mvEnv.AddJournalRecord(JournalTypes.jnlStandingOrderMaintenance, JournalOperations.jnlReinstate, .ContactNumber, .AddressNumber, .StandingOrderNumber)
          End With
      End Select

      SaveChanges(mvEnv.User.UserID, True)
      mvEnv.AddJournalRecord(JournalTypes.jnlPayPlanMaintenance, JournalOperations.jnlReinstate, mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue, mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))

      If vTransaction Then mvEnv.Connection.CommitTransaction()
    End Sub

    Public Sub ImportDetails(ByRef pFrequencyAmount As String, ByRef pPaymentFreq As String, ByRef pStartDate As String, ByRef pRenewalDate As String, ByRef pNextPaymentDue As String)
      If mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value <> pPaymentFreq Then mvGotPaymentFrequency = False
      mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value = pPaymentFreq
      mvClassFields(PaymentPlanFields.ofOrderDate).Value = pStartDate
      mvClassFields(PaymentPlanFields.ofRenewalDate).Value = pRenewalDate
      'mvClassFields(ofRenewalAmount).Value = pRenewalAmount
      If Len(pNextPaymentDue) > 0 Then mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value = pNextPaymentDue
      'If pBal >= 0 Then
      '  mvClassFields(ofBalance).Value = pBal
      'Else
      '  mvClassFields(ofBalance).Value = 0
      'End If
      SetRenewalData()
      If pFrequencyAmount = "" Then
        SetFrequencyAmount()
      Else
        mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = pFrequencyAmount
      End If
    End Sub

    Public Function DetermineMembershipPeriod() As MembershipPeriodTypes
      Dim vValue As MembershipPeriodTypes
      Dim vPPDetail As New PaymentPlanDetail(Me)
      Dim vMemType As New MembershipType(mvEnv)
      Dim vInterval As String = ""

      If mvExisting And PlanType = CDBEnvironment.ppType.pptMember Then
        'Are we in the First Period?
        vMemType = MembershipType
        vPPDetail = CType(mvDetails.Item("1"), PaymentPlanDetail)
        If vMemType.FirstPeriodsProduct <> vMemType.SubsequentPeriodsProduct Or vMemType.FirstPeriodsRate <> vMemType.SubsequentPeriodsRate Then
          'The First and Subsequent Products and/or Rates are different so we can tell which period we're in by comparing them
          If vPPDetail.ProductCode = vMemType.FirstPeriodsProduct And vPPDetail.RateCode = vMemType.FirstPeriodsRate Then
            vValue = MembershipPeriodTypes.mptFirstPeriod
          ElseIf vPPDetail.ProductCode = vMemType.SubsequentPeriodsProduct And vPPDetail.RateCode = vMemType.SubsequentPeriodsRate Then
            vValue = MembershipPeriodTypes.mptSubsequentPeriod
          Else 'Special initial period set up by incentives so must be first period
            vValue = MembershipPeriodTypes.mptFirstPeriod
          End If
        Else
          'The First and Subsequent Products and/or Rates are the same so compare the difference between the Start Date and the Renewal Date with the Term
          Select Case TermUnits
            Case OrderTermUnits.otuNone
              vInterval = "yyyy"
              If Term < 0 Then vInterval = "m"
            Case OrderTermUnits.otuMonthly
              vInterval = "m"
            Case OrderTermUnits.otuWeekly
              vInterval = "ww"
          End Select
          If DateDiff(vInterval, CDate(StartDate), CDate(RenewalDate)) <= System.Math.Abs(Term) Then
            vValue = MembershipPeriodTypes.mptFirstPeriod
          Else
            vValue = MembershipPeriodTypes.mptSubsequentPeriod
          End If
        End If
      Else
        vValue = MembershipPeriodTypes.mptNone
      End If
      DetermineMembershipPeriod = vValue
    End Function

    Public Sub SaveMembers(ByRef pWarningMessage As String)
      Dim vMember As Member
      Dim vIndex As Integer

      For Each vMember In mvCurrentMembers
        With vMember
          .PaymentPlanAutoPayMethod = mvAutoPayment
          .PaymentPlanRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
          .PaymentPlanRenewalPending = mvClassFields(PaymentPlanFields.ofRenewalPending).Bool
          .PaymentPlanTerm = mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue
          .PaymentPlantermUnits = TermUnits
          .PaymentPlanFixedRenewalCycle = FixedRenewalCycle
          .PaymentPlanNumber = PlanNumber
          .PaymentPlanBalance = Balance
          If vIndex = 0 And Not Existing Then .AddSponsorActivity(Me, ContactNumber, Payer.ContactType)
          .Save("", False, 0, 0, pWarningMessage)
        End With
        vIndex = vIndex + 1
      Next vMember
    End Sub

    Public Sub RemoveFutureMembership(ByRef pFutureMembershipType As FutureMembershipType, ByRef pMember As Member, ByRef pPriceToUse As String)
      Dim vDetail As PaymentPlanDetail
      Dim vFutureDetailsAmount As Double
      Dim vPrevAmount As Double
      Dim vCurrentChargeAmount As Double
      Dim vCurrentEntitlementAmount As Double
      Dim vPrice As Double

      If RenewalPending And RenewalDate = pFutureMembershipType.FutureChangeDate Then
        'You are removing a future membership type AFTER the payment plan has been renewed, and Renewals has used the future
        'membership type when recalculating the payment plan data.
        'The payment plan will now have two sets of payment plan details.  One set will have TimeStatus of C, the other will a TimeStatus of F.
        'The payment plan will therefore be updated to look as if it had been renewed for the original membership type.
        Dim vVATRate As VatRate
        Dim vPayerContactVATCategory As String = Payer.VATCategory
        For Each vDetail In mvDetails
          With vDetail
            vVATRate = mvEnv.VATRate(.Product.ProductVatCategory, vPayerContactVATCategory)
            If .TimeStatus = "F" Then
              'remove the future member & entitlement details
              vFutureDetailsAmount = vFutureDetailsAmount + .Balance
              If (.ProductCode = pFutureMembershipType.MembershipType.FirstPeriodsProduct And .RateCode = pFutureMembershipType.MembershipType.FirstPeriodsRate) Or ProductInEntitlements(.ProductCode, pFutureMembershipType.MembershipType.Entitlements) Then
                mvDetails.Remove(GetDetailKeyFromLineNo(.DetailNumber))
                ReNumberDetailKeys()
              End If
            ElseIf .DetailNumber = 1 Or ProductInEntitlements(.ProductCode, pMember.MembershipType.Entitlements) Then
              'reset the current pricing detail line and the membership entitlements
              vPrevAmount = vPrevAmount + .Balance
              Select Case pPriceToUse
                Case "C"
                  vPrice = .RenewalPrice(False, vVATRate, DateValue(RenewalDate))
                Case "F"
                  vPrice = .RenewalPrice(True, vVATRate, DateValue(RenewalDate))
                Case Else
                  vPrice = .Price(CDate(RenewalDate), vVATRate)
              End Select
              .Balance += vPrice
              If .DetailNumber = 1 Then
                vCurrentChargeAmount = vCurrentChargeAmount + .Balance
              Else
                vCurrentEntitlementAmount = vCurrentEntitlementAmount + .Balance
              End If
            Else
              'reset the non-membership lines
              'since the original C lines were not renewed and the F lines were created as renewed,
              'remove the existing C lines and turn the F lines into C lines.
              If .TimeStatus = "C" Then
                mvDetails.Remove(GetDetailKeyFromLineNo(.DetailNumber))
                ReNumberDetailKeys()
              Else
                .TimeStatus = "C"
              End If
            End If
          End With
        Next vDetail
        'reset the payment plan balance
        mvClassFields(PaymentPlanFields.ofBalance).Value = CStr(mvClassFields(PaymentPlanFields.ofBalance).DoubleValue - vFutureDetailsAmount - vPrevAmount + vCurrentChargeAmount + vCurrentEntitlementAmount)
        'reset the payment plan renewal amount
        mvClassFields(PaymentPlanFields.ofRenewalAmount).Value = CStr(mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue - vFutureDetailsAmount - vPrevAmount + vCurrentChargeAmount + vCurrentEntitlementAmount)
        'reset the payment plan frequency amount
        mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CStr(CalcFrequencyAmount(RenewalAmount, PaymentFrequencyFrequency))
        'reset the count of the number of payment plan detail lines held on the payment plan
        mvClassFields(PaymentPlanFields.ofDetailLines).Value = CStr(mvDetails.Count())
        'reset the payment plan membership type
        mvClassFields(PaymentPlanFields.ofMembershipType).Value = pMember.MembershipTypeCode
        'reset the payment plan reason for despatch
        If mvEnv.GetConfigOption("reason_is_grade", True) Then
          mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value = pMember.MembershipTypeCode
        Else
          mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlReasonForDespatch)
        End If
        Save()
      End If
    End Sub

    Public Function CanEditFutureMembership() As Boolean
      'FALSE = a payment has been made against the Membership for the current renewal period; CMT must now be used
      Dim vTerm As Integer
      vTerm = Term
      If vTerm < 0 Then vTerm = MembershipType.MembershipTerm
      CanEditFutureMembership = FMTRenewalPending Or DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(RenewalDate), CDate(TodaysDate()).AddYears(vTerm)) > -1
    End Function

    Public Sub InsertFutureMembership(ByRef pFutureMembershipType As FutureMembershipType, ByRef pMember As Member)
      Dim vDetail As PaymentPlanDetail
      Dim vEntitlement As MembershipEntitlement
      Dim vRenewalAmount As Double
      Dim vCurrentChargeAmount As Double
      Dim vCurrentEntitlementAmount As Double
      Dim vFutureChargeAmount As Double
      Dim vFutureEntitlementAmount As Double
      Dim vNonMemRenewalAmount As Double
      Dim vPrice As Double
      Dim vContact As Integer
      Dim vAddress As Integer
      Dim vFutureOverrideAmount As String

      If FMTRenewalPending Then
        mvProcessFutureMembership = True
        For Each vDetail In mvDetails
          With vDetail
            If .DetailNumber = 1 Then
              'update the current charging line
              vCurrentChargeAmount = .Balance - .Arrears
              .Balance = .Balance - vCurrentChargeAmount
            ElseIf ProductInEntitlements(.ProductCode, pMember.MembershipType.Entitlements) Then
              'update the membership entitlement line(s)
              vRenewalAmount = .Balance - .Arrears
              .Balance = .Balance - vRenewalAmount
              vCurrentEntitlementAmount = vCurrentEntitlementAmount + vRenewalAmount
            ElseIf .TimeStatus = "C" Then
              'for each C line, create a duplicate F line w/ a balance
              vNonMemRenewalAmount = vNonMemRenewalAmount + (.Balance - .Arrears)
              AddDetail(0, .ContactNumber, .AddressNumber, .ProductCode, .RateCode, .Quantity, .Amount, .Balance, .Arrears, .DespatchMethod, 0, "F", cdbValueKnownConstants.cdbVKCNo, "", "", cdbValueKnownConstants.cdbVKCunknown, .DistributionCode)
              'update the C line to have no value
              .Balance = 0
              .Arrears = 0
            End If
            .Amount = "0" 'Always set Amount to 0 to prevent R&R from renewing them
          End With
        Next vDetail
        'create future charging line
        vFutureChargeAmount = pFutureMembershipType.FutureMembershipAmount
        If pFutureMembershipType.FutureMembershipProductRate.Price(CDate(pFutureMembershipType.FutureChangeDate), ContactNumber) = 0 Then
          vFutureOverrideAmount = vFutureChargeAmount.ToString
        Else
          vFutureOverrideAmount = ""
        End If
        AddDetail(0, ContactNumber, AddressNumber, pFutureMembershipType.FutureMembershipProductCode, pFutureMembershipType.FutureMembershipRateCode, 1, vFutureOverrideAmount, pFutureMembershipType.FutureMembershipAmount, 0, pFutureMembershipType.MembershipType.DespatchMethod, 0, "F", cdbValueKnownConstants.cdbVKCNo, "", "", cdbValueKnownConstants.cdbVKCNo, "")
        'create future entitlement line(s)
        For Each vEntitlement In pFutureMembershipType.MembershipType.Entitlements
          With vEntitlement
            If .MemberEntitlement Then
              vContact = pMember.ContactNumber
              vAddress = pMember.AddressNumber
            Else
              vContact = ContactNumber
              vAddress = AddressNumber
            End If
            vPrice = .ProductRate.Price(CDate(RenewalDate), vContact)
            AddDetail(0, vContact, vAddress, .ProductCode, .RateCode, .Quantity, "", (vPrice * .Quantity), 0, .DespatchMethod, 0, "F", cdbValueKnownConstants.cdbVKCNo, "", "", cdbValueKnownConstants.cdbVKCunknown, "")
            vFutureEntitlementAmount = vFutureEntitlementAmount + (vPrice * .Quantity)
          End With
        Next vEntitlement
        'reset the payment plan balance
        mvClassFields(PaymentPlanFields.ofBalance).Value = CStr(mvClassFields(PaymentPlanFields.ofBalance).DoubleValue - vCurrentChargeAmount - vCurrentEntitlementAmount + vFutureChargeAmount + vFutureEntitlementAmount)
        'reset the payment plan renewal amount
        mvClassFields(PaymentPlanFields.ofRenewalAmount).Value = CStr(mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue - vCurrentChargeAmount - vCurrentEntitlementAmount + vFutureChargeAmount + vFutureEntitlementAmount)
        'reset the payment plan frequency amount
        mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CStr(CalcFrequencyAmount(RenewalAmount, PaymentFrequencyFrequency))
        'reset the count of the number of payment plan detail lines held on the payment plan
        mvClassFields(PaymentPlanFields.ofDetailLines).Value = CStr(mvDetails.Count())
        'reset the payment plan membership type
        mvClassFields(PaymentPlanFields.ofMembershipType).Value = pFutureMembershipType.MembershipTypeCode
        'reset the payment plan reason for despatch
        If mvEnv.GetConfigOption("reason_is_grade", True) Then
          mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value = pFutureMembershipType.MembershipTypeCode
        Else
          mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlReasonForDespatch)
        End If
        Save()
      End If
    End Sub

    Public Sub UpdateFutureMembership(ByRef pNewFutureMembershipType As FutureMembershipType, ByRef pOldFutureMembershipType As FutureMembershipType, ByRef pMember As Member)
      Dim vDetail As PaymentPlanDetail
      Dim vEntitlement As MembershipEntitlement
      Dim vFutureDetailsAmount As Double
      Dim vFutureChargeAmount As Double
      Dim vFutureEntitlementAmount As Double
      Dim vPrice As Double
      Dim vContact As Integer
      Dim vAddress As Integer

      If FMTRenewalPending And RenewalDate = pOldFutureMembershipType.FutureChangeDate Then
        For Each vDetail In mvDetails
          With vDetail
            If .TimeStatus = "F" Then
              'remove the future member & entitlement details
              vFutureDetailsAmount = vFutureDetailsAmount + .Balance
              If (.ProductCode = pOldFutureMembershipType.MembershipType.FirstPeriodsProduct And .RateCode = pOldFutureMembershipType.MembershipType.FirstPeriodsRate) Or ProductInEntitlements(.ProductCode, pOldFutureMembershipType.MembershipType.Entitlements) Then
                mvDetails.Remove(GetDetailKeyFromLineNo(.DetailNumber))
                ReNumberDetailKeys()
              End If
            End If
          End With
        Next vDetail
        'create future charging line
        vFutureChargeAmount = pNewFutureMembershipType.MembershipType.ProductRate.Price(CDate(RenewalDate), ContactNumber)
        AddDetail(0, ContactNumber, AddressNumber, pNewFutureMembershipType.MembershipType.FirstPeriodsProduct, pNewFutureMembershipType.MembershipType.FirstPeriodsRate,
                  1, "", vFutureChargeAmount, 0, pNewFutureMembershipType.MembershipType.DespatchMethod, 0, "F", cdbValueKnownConstants.cdbVKCNo, "", "", cdbValueKnownConstants.cdbVKCNo, "")
        'create future entitlement line(s)
        For Each vEntitlement In pNewFutureMembershipType.MembershipType.Entitlements
          With vEntitlement
            If .MemberEntitlement Then
              vContact = pMember.ContactNumber
              vAddress = pMember.AddressNumber
            Else
              vContact = ContactNumber
              vAddress = AddressNumber
            End If
            vPrice = .ProductRate.Price(CDate(RenewalDate), vContact)
            AddDetail(0, vContact, vAddress, .ProductCode, .RateCode, .Quantity, "", (vPrice * .Quantity), 0, .DespatchMethod, 0, "F", cdbValueKnownConstants.cdbVKCNo, "", "", cdbValueKnownConstants.cdbVKCunknown, "")
            vFutureEntitlementAmount = vFutureEntitlementAmount + CDbl(vPrice & .Quantity)
          End With
        Next vEntitlement
        'reset the payment plan balance
        mvClassFields(PaymentPlanFields.ofBalance).Value = CStr(mvClassFields(PaymentPlanFields.ofBalance).DoubleValue - vFutureDetailsAmount + vFutureChargeAmount + vFutureEntitlementAmount)
        'reset the payment plan renewal amount
        mvClassFields(PaymentPlanFields.ofRenewalAmount).Value = CStr(mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue - vFutureDetailsAmount + vFutureChargeAmount + vFutureEntitlementAmount)
        'reset the payment plan frequency amount
        mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CStr(CalcFrequencyAmount(RenewalAmount, PaymentFrequencyFrequency))
        'reset the count of the number of payment plan detail lines held on the payment plan
        mvClassFields(PaymentPlanFields.ofDetailLines).Value = CStr(mvDetails.Count())
        'reset the payment plan membership type
        mvClassFields(PaymentPlanFields.ofMembershipType).Value = pNewFutureMembershipType.MembershipTypeCode
        'reset the payment plan reason for despatch
        If mvEnv.GetConfigOption("reason_is_grade", True) Then
          mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value = pNewFutureMembershipType.MembershipTypeCode
        Else
          mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlReasonForDespatch)
        End If
        Save()
      End If
    End Sub

    Public Function FixedRenewalDate(ByVal pDate As String) As String
      Dim vRenewalDate As String = ""
      Dim vYear As Integer
      Dim vMonth As Integer

      If FixedRenewalCycle Then
        If (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 Then
          'The reason that only ProportionalBalanceSetting is tested here is because:
          '1. The code has already tested that the system supports a fixed renewal cycle, as per the previous IF.
          '2. The code cannot test that the system supports a previous fixed renewal cycle because that is only determined within this routine.
          '3. Don't need to test that the payment plan is for a membership because the fixed renewal cycle setting is only available for memberships.
          vYear = Year(CDate(pDate))
          vMonth = Month(CDate(pDate))
        Else
          vYear = Year(CDate(TodaysDate()))
          vMonth = Month(CDate(TodaysDate()))
        End If
        'calculate the PayPlan Start Date
        Dim vDate As Date = CDate(DateSerial(vYear, vMonth, CDate(pDate).Date.Day).ToString(CAREDateFormat))
        vRenewalDate = CalculatePayPlanStartDate(vDate)
        'if there is a problem with format of fixedrenewal config then the date hasn't been set
        If vRenewalDate.Length = 0 Then vRenewalDate = pDate
      Else
        vRenewalDate = pDate
      End If
      FixedRenewalDate = vRenewalDate
    End Function

    Public Function CalculatePayPlanStartDate(ByVal pDate As Date) As String
      Dim vRenewalDate As String = ""
      Dim vValid As Boolean = True
      If mvFixedRenewalCycle.Length > 0 Then 'this modular variable contains the config
        Dim vValues() As String
        vValues = mvFixedRenewalCycle.Split("|"c)
        Dim vIndex As Integer
        For vIndex = 0 To vValues.Length - 1
          Dim vUseMonth As Boolean
          Dim vCurrent As Boolean
          Dim vRangeDay As Integer
          Dim vRangeMonth As Integer
          Dim vDate As String
          Select Case vValues(vIndex).Length
            Case 2 'dd
              vValid = True
            Case 3 'ddP
              If vValues(vIndex).Substring(vValues(vIndex).Length - 1, 1).ToUpper = "P" Then vCurrent = True
            Case 4 'ddmm
              vUseMonth = True
            Case 5
              If vValues(vIndex).Substring(vValues(vIndex).Length - 1, 1).ToUpper = "P" Then
                'ddmmP
                vCurrent = True
                vUseMonth = True
                vRangeDay = IntegerValue(vValues(vIndex).Substring(0, 2))
                vRangeMonth = IntegerValue(vValues(vIndex).Substring(2, 2))
              ElseIf vValues(vIndex).Substring(vValues(vIndex).Length - 3, 1).ToUpper = "P" Then
                'ddPdd
                vCurrent = True
                vRangeDay = IntegerValue(vValues(vIndex).Substring(3, 2))
              ElseIf vValues(vIndex).Substring(vValues(vIndex).Length - 1, 1).ToUpper = "F" Then
                'ddmmF
                vUseMonth = True
              End If
              If vCurrent = False AndAlso Not vUseMonth Then vValid = False 'config not valid value
            Case 9 'ddmmPddmm
              If vValues(vIndex).Substring(vValues(vIndex).Length - 5, 1).ToUpper = "P" Then
                vCurrent = True
                vUseMonth = True
                vRangeDay = IntegerValue(vValues(vIndex).Substring(5, 2))
                vRangeMonth = IntegerValue(vValues(vIndex).Substring(7, 2))
              Else
                vValid = False 'config not valid value
              End If
            Case Else 'the mask length is invalid
              vValid = False
          End Select

          If vValid Then
            Dim vDay As Integer = IntegerValue(vValues(vIndex).Substring(0, 2))
            Dim vMonth As Integer = pDate.Date.Month
            If vUseMonth Then vMonth = IntegerValue(vValues(vIndex).Substring(2, 2))
            Dim vYear As Integer = pDate.Date.Year
            If Not vUseMonth Then
              'only using day
              If vCurrent Then
                If vRangeDay > 0 Then
                  'looking at the day range set in config
                  If vRangeDay < pDate.Date.Day Then vMonth = vMonth + 1
                ElseIf vDay > pDate.Date.Day Then
                  'we've not got to the next period yet so we need to go back to previous month
                  vMonth = vMonth - 1
                  If vMonth < 1 Then  'if we've got to previous year correct month and year values
                    vMonth = vMonth + 12
                    vYear = vYear - 1
                  End If
                End If
              ElseIf vDay < pDate.Date.Day Then
                'we have passed the selected day of this month then increment month
                vMonth = vMonth + 1
              End If
              If vMonth > 12 Then   'if we've got into the next year correct month and year values
                vMonth = vMonth - 12
                vYear = vYear + 1
              End If
            Else
              'we're using the month
              Dim vStartDate As Date = DateSerial(vYear, vMonth, vDay)
              If vCurrent Then 'current membership
                If vRangeDay > 0 And vRangeMonth > 0 Then
                  'we need to check that the start date is correct for the date range
                  Dim vRangeFrom As Date = DateSerial(vYear - 1, vRangeMonth, vRangeDay)
                  Dim vRangeTo As Date = DateSerial(vYear, vRangeMonth, vRangeDay)
                  vRangeTo = vRangeTo.AddDays(-1)
                  'make sure that we're in the right date range
                  While DateDiff(Microsoft.VisualBasic.DateInterval.Day, pDate, vRangeFrom) > 0 OrElse DateDiff(Microsoft.VisualBasic.DateInterval.Day, pDate, vRangeTo) < 0
                    If DateDiff(Microsoft.VisualBasic.DateInterval.Day, pDate, vRangeFrom) > 0 Then
                      'range needs to go back
                      vRangeFrom = vRangeFrom.AddYears(-1)
                      vRangeTo = vRangeTo.AddYears(-1)
                    ElseIf DateDiff(Microsoft.VisualBasic.DateInterval.Day, pDate, vRangeTo) < 0 Then
                      'range needs to go forward
                      vRangeFrom = vRangeFrom.AddYears(1)
                      vRangeTo = vRangeTo.AddYears(1)
                    End If
                  End While
                  'check that the start date is within the date range (if not correct it)
                  If DateDiff(Microsoft.VisualBasic.DateInterval.Day, vStartDate, vRangeFrom) > 0 OrElse DateDiff(Microsoft.VisualBasic.DateInterval.Day, vStartDate, vRangeTo) < 0 Then
                    vStartDate = DateSerial(vRangeFrom.Year, vMonth, vDay)
                    If DateDiff(Microsoft.VisualBasic.DateInterval.Day, vStartDate, vRangeFrom) > 0 Then vStartDate = DateSerial(vRangeTo.Year, vMonth, vDay)
                  End If
                  vYear = vStartDate.Year
                ElseIf DateDiff(Microsoft.VisualBasic.DateInterval.Day, pDate, vStartDate) > 0 Then
                  vYear = vYear - 1
                End If
              Else 'future membership
                If DateDiff(Microsoft.VisualBasic.DateInterval.Day, vStartDate, CDate(pDate)) > 0 Then vYear = vYear + 1
              End If
            End If

            'do this in case the config was set to 31 (the last day of the month)
            vDate = DateSerial(vYear, vMonth, vDay).ToString(CAREDateFormat)
            If vDay > 28 Then
              While Not IsDate(vDate)
                vDay = vDay - 1
                vDate = DateSerial(vYear, vMonth, vDay).ToString(CAREDateFormat)
              End While
            End If

            'set valid date as start date.  If we have more than one then we need to decide which is more suitable
            If IsDate(vDate) Then
              If vRenewalDate.Length > 0 Then
                'CURRENT MEMBERSHIP
                'if we're using the date range then set that to check against, otherwise just use the date we've calculated.
                If vCurrent Then
                  Dim vCheckDate As Date = CDate(vDate)
                  If vRangeDay > 0 AndAlso vRangeMonth > 0 Then
                    vCheckDate = DateSerial(vYear, vRangeMonth, vRangeDay)
                  End If
                  'Check which value is closer to today
                  If DateDiff(Microsoft.VisualBasic.DateInterval.Day, vCheckDate, CDate(pDate)) < DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(vRenewalDate), CDate(pDate)) Then vRenewalDate = vDate
                End If
                'FUTURE MEMBERSHIP
                'the date will be later than or equal to today.  check if next value is closer to today but still after or equal to today
                If Not vCurrent AndAlso DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(pDate), CDate(vDate)) < DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(pDate), CDate(vRenewalDate)) Then vRenewalDate = vDate
              Else 'there is no value set for date yet so set the date.
                vRenewalDate = vDate
              End If

              'if we have set the renewal date we need to set the fixed renewal previous correctly for pro-rating
              If vRenewalDate = vDate Then
                Dim vDateDiff As Integer = CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(vDate), CDate(pDate)))

                If ((vCurrent And vDateDiff > 0) Or (Not vCurrent And vDateDiff < 0)) Or vDateDiff = 0 Then
                  mvFixedRenewalPrevious = vCurrent
                  mvSetFixedRenewalPrevious = True
                End If
              End If
            End If
          End If
        Next
      End If
      CalculatePayPlanStartDate = vRenewalDate
    End Function

    Public Sub SetImportBalance(ByRef pBalance As Double)
      mvClassFields(PaymentPlanFields.ofBalance).Value = CStr(pBalance)
    End Sub

    Public Sub SetAmended(ByRef pAmendedOn As String, ByRef pAmendedBy As String)
      mvClassFields(PaymentPlanFields.ofAmendedOn).Value = pAmendedOn
      mvClassFields(PaymentPlanFields.ofAmendedBy).Value = pAmendedBy
      mvAmendedValid = True
    End Sub

    Public Sub SaveDetailChanges()
      Dim vDetail As PaymentPlanDetail

      For Each vDetail In mvDetails
        vDetail.SaveChanges()
      Next vDetail
    End Sub

    Private Sub UpgradePPType()
      'TA BR 6503: Addition of Covenant/Auto Payment was not upgrading the Plan Type
      If PlanType = CDBEnvironment.ppType.pptOther Then
        If CovenantStatus = PaymentPlan.ppCovenant.ppcCovenant Or CovenantStatus = PaymentPlan.ppCovenant.ppcDepositedDeed Then
          PlanType = CDBEnvironment.ppType.pptCovenant
        Else
          If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
            PlanType = CDBEnvironment.ppType.pptDD
          ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
            PlanType = CDBEnvironment.ppType.pptSO
          ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
            PlanType = CDBEnvironment.ppType.pptCCCA
          End If
        End If
        'TA BR 9661: Addition of Covenant to Auto-PM plan was not upgrading Plan Type.
      ElseIf PlanType = CDBEnvironment.ppType.pptDD Or PlanType = CDBEnvironment.ppType.pptSO Or PlanType = CDBEnvironment.ppType.pptCCCA Then
        If CovenantStatus = PaymentPlan.ppCovenant.ppcCovenant Or CovenantStatus = PaymentPlan.ppCovenant.ppcDepositedDeed Then
          PlanType = CDBEnvironment.ppType.pptCovenant
        End If
      End If
    End Sub

    Private Sub SetContinuousRenewal()
      Dim vInterval As Microsoft.VisualBasic.DateInterval
      Dim vNumber As Integer

      If mvContinuousRenewals Then
        If mvClassFields(PaymentPlanFields.ofRenewalPending).Bool Then
          'IF Renewal Pending is TRUE (new payment plan or the payment plan has just been through a renewals process)
          'THEN reset the Renewal Date
          If Not RenewalDateSupplied Then
            If PlanType = CDBEnvironment.ppType.pptMember Then
              vNumber = mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue
              If TermUnits = OrderTermUnits.otuMonthly Then
                vInterval = DateInterval.Month '"m"
              ElseIf TermUnits = OrderTermUnits.otuWeekly Then
                vInterval = DateInterval.WeekOfYear '"ww"
              ElseIf vNumber < 0 Then
                vNumber = Math.Abs(vNumber)
                vInterval = DateInterval.Month  '"m"
              Else
                vInterval = DateInterval.Year '"yyyy"
              End If
            Else
              If PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                vInterval = DateInterval.Day  '"d"
              Else
                vInterval = DateInterval.Month  '"m"
              End If
              vNumber = PaymentFrequencyFrequency * PaymentFrequencyInterval
            End If
            mvClassFields(PaymentPlanFields.ofRenewalDate).Value = DateAdd(vInterval, vNumber, CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)).ToString(CAREDateFormat)
          End If
        End If
        If mvClassFields(PaymentPlanFields.ofRenewalPending).Value <> mvClassFields(PaymentPlanFields.ofRenewalPending).SetValue And mvClassFields(PaymentPlanFields.ofRenewalPending).Bool = True Then
          mvClassFields(PaymentPlanFields.ofRenewalPending).Bool = False
        End If
      End If
    End Sub

    Private Sub GetAutoPaymentInfo()
      If (Len(mvAutoPaymentSource) = 0) And (mvAutoPayment = True) Then
        If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          mvAutoPaymentSource = DirectDebit.Source
        ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          mvAutoPaymentSource = StandingOrder.Source
          mvAutoPaymentCAF = (StandingOrder.StandingOrderType = StandingOrder.SOType.sotCAFSO)
        ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          mvAutoPaymentSource = CreditCardAuthority.Source
          mvAutoPaymentCAF = (CreditCardAuthority.AuthorityType = CreditCardAuthority.ccaAuthorityType.catCAFCard)
        End If
      End If
    End Sub

    Public Function CanSkipPayment() As Boolean
      Dim vCanSkipPayment As Boolean
      Dim vDetail As PaymentPlanDetail

      If mvExisting And Not IsCancelled And ((Balance > 0 And (PlanType = CDBEnvironment.ppType.pptMember Or PlanType = CDBEnvironment.ppType.pptCovenant Or PlanType = CDBEnvironment.ppType.pptOther)) Or (PlanType = CDBEnvironment.ppType.pptSO Or PlanType = CDBEnvironment.ppType.pptCCCA Or PlanType = CDBEnvironment.ppType.pptDD)) And Arrears = 0 And InAdvance = 0 And CovenantStatus <> PaymentPlan.ppCovenant.ppcDepositedDeed Then
        vCanSkipPayment = True
      End If
      If vCanSkipPayment Then
        For Each vDetail In mvDetails
          With vDetail
            If .Balance > 0 And Not .Product.Donation Then
              vCanSkipPayment = False
              Exit For
            End If
          End With
        Next vDetail
      End If
      If vCanSkipPayment Then AnyPaymentsToSkip(vCanSkipPayment)
      CanSkipPayment = vCanSkipPayment
    End Function
    Public Function CanReinstate() As Boolean
      CanReinstate = mvExisting And Len(mvClassFields.Item(PaymentPlanFields.ofCancellationReason).Value) > 0
    End Function

    Public Function ContainsDonationsOnly() As Boolean
      Dim vDetail As PaymentPlanDetail
      Dim vDonationsOnly As Boolean

      vDonationsOnly = True
      For Each vDetail In mvDetails
        If vDetail.Product.Donation = False Then vDonationsOnly = False
      Next vDetail
      ContainsDonationsOnly = vDonationsOnly
    End Function
    Public Sub SkipPayment()
      SkipPayment(Nothing, True)
    End Sub
    Public Sub SkipPayment(ByRef pOPS As OrderPaymentSchedule)
      SkipPayment(pOPS, True)
    End Sub
    Public Sub SkipPayment(ByRef pOPS As OrderPaymentSchedule, ByVal pReCalcPlanBalance As Boolean)
      Dim vOPS As OrderPaymentSchedule
      Dim vBatch As New Batch(mvEnv)
      Dim vAmount As Double
      Dim vFound As Boolean
      Dim vTrans As Boolean
      Dim vScheduledPaymentNumber As Long

      If pOPS Is Nothing Then
        vOPS = AnyPaymentsToSkip(vFound)
      Else
        vFound = True
        vOPS = pOPS
      End If
      If vFound Then
        vAmount = vOPS.AmountOutstanding
        If Not mvEnv.Connection.InTransaction Then
          mvEnv.Connection.StartTransaction()
          vTrans = True
        End If
        vScheduledPaymentNumber = vOPS.ScheduledPaymentNumber
        If pReCalcPlanBalance = True AndAlso Balance = 0 Then
          'When this has come from BACS Amendments, Do NOT re-calculate the PaymentPlan balance
          CalculateBalance("C", True, True, True)
          SaveChanges()
          vOPS = Nothing
          vFound = False
          If Not pOPS Is Nothing Then
            For Each vOPS In mvScheduledPayments
              If vOPS.ScheduledPaymentNumber = vScheduledPaymentNumber Then Exit For
            Next
          End If
          If vOPS Is Nothing Then vOPS = AnyPaymentsToSkip(vFound)
        End If
        If vFound Then
          vOPS.SkipPayment()
          vOPS.Save()
          vBatch.Init()
          vBatch.SkipPaymentPlanPayment(PlanNumber, ContactNumber, AddressNumber, vAmount, "", mvClassFields.CreateAmendmentHistory(mvEnv, ClassFields.AmendmentHistoryCreation.ahcDefault))
        End If
        If vTrans Then mvEnv.Connection.CommitTransaction()
      End If
    End Sub

    Public Function CanAddGiftAidDeclaration() As Boolean
      Dim vGADeclaration As New GiftAidDeclaration
      Dim vAdd As Boolean
      Dim vDate As String

      vAdd = EligibleForGiftAid
      'Note - Covenant pay plans are allowed as the Covenant has to be cancelled first
      If vAdd = True And PlanType = CDBEnvironment.ppType.pptMember Then
        'Check the status of membership Payment Plan
        vAdd = mvEnv.GetConfigOption("ga_membership_tax_reclaim")
        If vAdd Then
          vAdd = MembershipEligibleForGiftAid(StartDate)
        End If
      End If

      If vAdd Then
        'Second, check dates are valid
        vGADeclaration.Init(mvEnv, pRaiseNoGAControlError:=False)
        vAdd = vGADeclaration.GADControlsExists
        If vAdd Then
          If CDate(StartDate) < CDate(vGADeclaration.GiftAidEarliestStartDate) Then
            If IsCancelled Then
              vDate = mvClassFields.Item(PaymentPlanFields.ofCancelledOn).Value
            Else
              vDate = ExpiryDate
            End If
            If CDate(vDate) < CDate(vGADeclaration.GiftAidEarliestStartDate) Then vAdd = False
          End If
        End If
      End If
      CanAddGiftAidDeclaration = vAdd
    End Function

    Public Function CanAdvanceRenewalDate() As Boolean
      Dim vCanAdvance As Boolean
      Dim vMember As Member
      Dim vWhereFields As New CDBFields

      If Not IsCancelled And PlanType = CDBEnvironment.ppType.pptMember And Not ContainsUnprocessedPayments And Not (mvClassFields.Item(PaymentPlanFields.ofInAdvance).DoubleValue > 0 And mvClassFields.Item(PaymentPlanFields.ofInAdvance).DoubleValue > mvClassFields.Item(PaymentPlanFields.ofRenewalAmount).DoubleValue) Then
        If MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm And mvEnv.GetConfigOption("me_set_card_expiry", False) Then
          vWhereFields.Add("membership_number", CDBField.FieldTypes.cftLong, "", CDBField.FieldWhereOperators.fwoIn)
          If mvCurrentMembers.Count() = 0 Then LoadMembers()
          If mvCurrentMembers.Count() > 0 Then
            For Each vMember In mvCurrentMembers
              vWhereFields("membership_number").Value = vWhereFields("membership_number").Value & "," & vMember.MembershipNumber
            Next vMember
            vWhereFields("membership_number").Value = Mid(vWhereFields("membership_number").Value, 2)
            vCanAdvance = mvEnv.Connection.GetCount("member_future_type", vWhereFields, "") = 0
          End If
        End If
      End If
      CanAdvanceRenewalDate = vCanAdvance
    End Function

    Public Sub AdvanceRenewalDate(ByVal pType As AdvanceRenewalDateTypes, ByVal pChangeReason As String, ByVal pChangeValue As Integer, ByVal pCMT As Boolean, Optional ByVal pNewRenewalDate As String = "")
      Dim vMember As Member
      Dim vCount As Integer
      Dim vSubscription As Subscription
      Dim vSubsChangeDate As Date

      System.Diagnostics.Debug.Assert(pType = AdvanceRenewalDateTypes.ardtAutomatic Or (pType = AdvanceRenewalDateTypes.ardtManual And Len(pNewRenewalDate) > 0), "")

      If Len(pChangeReason) > 0 Then mvClassFields(PaymentPlanFields.ofRenewalDateChangeReason).Value = pChangeReason
      mvClassFields(PaymentPlanFields.ofRenewalDateChangedBy).Value = mvEnv.User.UserID
      mvClassFields(PaymentPlanFields.ofRenewalDateChangedOn).Value = TodaysDate()
      mvClassFields(PaymentPlanFields.ofRenewalDateChangedValue).Value = CStr(pChangeValue)
      If pType = AdvanceRenewalDateTypes.ardtManual Then
        'Ensure that the payment frequency data has been read so that it isn't done within the database transaction
        GetPaymentFrequencyDetails()
        'Set Next Payment Due date
        If NextPaymentDue = RenewalDate And (Balance = 0 Or (RenewalPending = True And RenewalDate > StartDate)) Then NextPaymentDue = pNewRenewalDate
        'Set Membership Card Expires date for each member
        If mvCurrentMembers.Count() = 0 Then LoadMembers()
        'Advance Subscriptions Valid To Date
        If mvCurrentSubscriptions.Count() = 0 Then LoadSubscriptions()
        'Start database transaction
        mvEnv.Connection.StartTransaction()
        For Each vMember In mvCurrentMembers
          With vMember
            If Len(.MembershipCardExpires) > 0 Then
              If .MembershipCardExpires = RenewalDate Then
                .MembershipCardExpires = pNewRenewalDate
              Else
                .MembershipCardExpires = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, pChangeValue, CDate(.MembershipCardExpires)))
              End If
              .ReprintMshipCard = True
              .SaveChanges(mvEnv.User.UserID, True)
            Else
              vCount = vCount + 1
            End If
          End With
        Next vMember
        For Each vSubscription In mvCurrentSubscriptions
          With vSubscription
            'Valid To is Renewal Date - 1 day for non-membership, Renewal Date + Grace Period - 1 day for members
            vSubsChangeDate = DateAdd(Microsoft.VisualBasic.DateInterval.Month, pChangeValue, CDate(.ValidTo))
            .SetValidTo(StartDate, vSubsChangeDate.ToString(CAREDateFormat))
            .SaveChanges(mvEnv.User.UserID, True)
          End With
        Next vSubscription
        'If new payment plan then need to reset Term so that card production generates the correct card expiry date.
        'The Term will be reset by the card production process.
        'Obviously it is expected that the new cards will be produced before the payment is received to prevent the Renewal Date being moved forward multiple times.
        If RenewalPending And RenewalDate = StartDate And vCount > 0 Then
          Term = -1 * ((PaymentFrequencyFrequency * PaymentFrequencyInterval) + pChangeValue)
          ResetOrderTerm = ppResetOrderTerm.pprotYes
        End If
        'Set Renewal Date
        RenewalDate = pNewRenewalDate
        'If the NPD is changed then the OPS should be regenerated
        If mvClassFields.Item(PaymentPlanFields.ofNextPaymentDue).ValueChanged Then
          RegenerateScheduledPayments(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrAdvanceRenewalDate, mvClassFields.Item(PaymentPlanFields.ofRenewalDate).SetValue, True, True, mvEnv.User.UserID, True)
        End If
        'Save payment plan changes
        SaveChanges(mvEnv.User.UserID, True)
        'Commit database transaction
        mvEnv.Connection.CommitTransaction()
      Else
        'Set ResetOrderTerm flag
        ResetOrderTerm = CType(IIf(RenewalPending = True, ppResetOrderTerm.pprotYes, ppResetOrderTerm.pprotNo), ppResetOrderTerm)
        If ResetOrderTerm = ppResetOrderTerm.pprotYes Then
          If mvCurrentMembers.Count() = 0 Then LoadMembers()
          For Each vMember In mvCurrentMembers
            If Len(vMember.MembershipCardExpires) > 0 Then
              vMember.MembershipCardExpires = CDate(vMember.MembershipCardExpires).AddYears(-vMember.MembershipType.MembershipCardDuration).ToString(CAREDateFormat)
              vMember.MembershipCardExpires = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, pChangeValue, CDate(vMember.MembershipCardExpires)))
              vMember.ReprintMshipCard = True
              vMember.SaveChanges(mvEnv.User.UserID, True)
            End If
          Next vMember
        End If
        If pCMT AndAlso mvOldMembershipIncentive Then ResetOrderTerm = ppResetOrderTerm.pprotYes 'for CMT, if moving from membership that has incentive to a memberhsip with an incentive, don't apply incentive next year
      End If
    End Sub

    Private Sub RemoveIncentives(ByRef pUpdateFields As CDBFields, ByRef pRegenerateOPS As Boolean)
      Dim vSQL As String
      Dim vIncentivesRS As CDBRecordSet
      Dim vProcessedInitialPeriod As Boolean
      Dim vDeleteNewOrders As Boolean
      Dim vDeleteWhereFields As New CDBFields
      Dim vMember As Member
      Dim vPPD As PaymentPlanDetail
      Dim vResetBalance As Boolean
      Dim vBalance As Double
      Dim vPrice As Double
      Dim vArrears As Double
      Dim vAmount As String = ""
      Dim vRFD As String = ""

      If HasAutoPaymentMethod And (RenewalPending Or (Not RenewalPending And Balance = 0)) Then
        With vDeleteWhereFields
          .Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
          .Add("date_fulfilled", CDBField.FieldTypes.cftDate, "")
          .Add("product")
        End With
        vSQL = "SELECT isp.reason_for_despatch, incentive_type, product, rate, ignore_product_and_rate"
        vSQL = vSQL & " FROM %1 x, sources s, incentive_scheme_reasons isr, financial_controls fc, incentive_scheme_products isp"
        vSQL = vSQL & " WHERE x.order_number = " & PlanNumber
        vSQL = vSQL & " AND x.cancellation_reason IS NULL"
        vSQL = vSQL & " AND x.source = s.source"
        vSQL = vSQL & " AND s.incentive_scheme = isr.incentive_scheme"
        vSQL = vSQL & " AND isr.reason_for_despatch = fc.%2"
        vSQL = vSQL & " AND isr.incentive_scheme = isp.incentive_scheme"
        vSQL = vSQL & " AND isr.reason_for_despatch = isp.reason_for_despatch"
        vSQL = vSQL & " ORDER BY incentive_type, sequence_number"
        If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          vSQL = Replace(vSQL, "%1", "direct_debits")
          vSQL = Replace(vSQL, "%2", "dd_reason")
        ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          vSQL = Replace(vSQL, "%1", "credit_card_authorities")
          vSQL = Replace(vSQL, "%2", "cc_reason")
        ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          vSQL = Replace(vSQL, "%1", "bankers_orders")
          vSQL = Replace(vSQL, "%2", "so_reason")
        End If
        vIncentivesRS = mvEnv.Connection.GetRecordSet(vSQL)
        With vIncentivesRS
          While .Fetch() = True
            Select Case .Fields("incentive_type").Value
              Case "I"
                If Not vProcessedInitialPeriod Then
                  If Term < 0 And .Fields("ignore_product_and_rate").Bool Then
                    'process members by resetting MCE if the I-type incentive was applied AFTER R&R
                    If RenewalPending And ResetOrderTerm = ppResetOrderTerm.pprotYes Then
                      If mvCurrentMembers.Count() = 0 Then LoadMembers()
                      For Each vMember In mvCurrentMembers
                        With vMember
                          If Len(.MembershipCardExpires) > 0 Then
                            .MembershipCardExpires = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, Term, CDate(.MembershipCardExpires)))
                            .MembershipCardExpires = CDate(.MembershipCardExpires).AddYears(.MembershipType.MembershipCardDuration).ToString(CAREDateFormat)
                            .ReprintMshipCard = True
                            .SaveChanges(mvEnv.User.UserID, True)
                          End If
                        End With
                      Next vMember
                    End If
                    'reset payment plan properties
                    With mvClassFields
                      Dim vAdjustedRenewalDate = CalculateRenewalDate(mvClassFields.Item(PaymentPlanFields.ofRenewalDate).Value, False) 'Rolling back the RenewalDate by existing OrderTerm                                            
                      .Item(PaymentPlanFields.ofOrderTerm).IntegerValue = 1
                      .Item(PaymentPlanFields.ofResetOrderTerm).Value = "N"
                      .Item(PaymentPlanFields.ofRenewalDateChangeReason).Value = ""
                      .Item(PaymentPlanFields.ofRenewalDateChangedBy).Value = ""
                      .Item(PaymentPlanFields.ofRenewalDateChangedOn).Value = ""
                      .Item(PaymentPlanFields.ofRenewalDateChangedValue).Value = ""
                      .Item(PaymentPlanFields.ofRenewalDate).Value = CalculateRenewalDate(vAdjustedRenewalDate, True) 'Setting the RenewlDate with new OrderTerm value
                    End With
                    With pUpdateFields
                      .Add("order_term", CDBField.FieldTypes.cftInteger, 1)
                      .Add("reset_order_term", CDBField.FieldTypes.cftCharacter, "N")
                      .Add("renewal_change_reason", CDBField.FieldTypes.cftCharacter, "")
                      .Add("renewal_changed_by", CDBField.FieldTypes.cftCharacter, "")
                      .Add("renewal_changed_on", CDBField.FieldTypes.cftDate, "")
                      .Add("renewal_change_value", CDBField.FieldTypes.cftInteger, "")
                      .Add("renewal_date", CDBField.FieldTypes.cftDate, RenewalDate)
                    End With
                    If mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlApplyIncentiveFreePeriod) = "B" Then pRegenerateOPS = True 'This requires OPS to be updated only when incentive free period is before payments have been made.
                  End If
                  vProcessedInitialPeriod = True
                End If
              Case "P"
                'delete enclosures record(s)
                vDeleteWhereFields("product").Value = .Fields("product").Value
                If mvEnv.Connection.DeleteRecords("enclosures", vDeleteWhereFields, False) > 0 Then
                  vDeleteNewOrders = True
                  vRFD = .Fields("reason_for_despatch").Value
                End If
              Case "X"
                'remove appropriate payment plan detail records
                If mvDetails.Count() = 0 Then InitPaymentPlanDetails(mvEnv, PlanNumber)
                For Each vPPD In mvDetails
                  If vPPD.ProductCode = .Fields("product").Value And vPPD.RateCode = .Fields("rate").Value Then
                    vPPD.Delete()
                    mvDetails.Remove(GetDetailKeyFromLineNo(vPPD.DetailNumber))
                    ReNumberDetailKeys()
                    vResetBalance = True
                  End If
                Next vPPD
            End Select
          End While
          .CloseRecordSet()
          'if all enclosures records were removed then delete the new_orders record as well
          If vDeleteNewOrders Then
            vDeleteWhereFields.Remove("product")
            If mvEnv.Connection.GetCount("enclosures", vDeleteWhereFields) = 0 Then
              vDeleteWhereFields.Add("reason_for_despatch", CDBField.FieldTypes.cftCharacter, vRFD)
              mvEnv.Connection.DeleteRecords("new_orders", vDeleteWhereFields, False)
            End If
          End If
          'if any PPD has been removed then balance + others need to be recalculated
          If vResetBalance Then
            GetDetailBalance(PaymentPlanDetail.PaymentPlanDetailTypes.ppdltAll, vBalance, vArrears, vPrice, CDate(TodaysDate()), vAmount)
            SetBalance(vBalance)
            If (mvClassFields(PaymentPlanFields.ofBalance).ValueChanged Or Balance = 0) And Not mvClassFields(PaymentPlanFields.ofRenewalAmount).ValueChanged Then
              SetRenewalAmountFromPPD()
            End If
            With pUpdateFields
              .Add("arrears", CDBField.FieldTypes.cftNumeric, vArrears)
              .Add("amount", CDBField.FieldTypes.cftCharacter, vAmount)
              .Add("balance", CDBField.FieldTypes.cftNumeric, vBalance)
              If mvClassFields(PaymentPlanFields.ofFrequencyAmount).DoubleValue > 0 And mvClassFields(PaymentPlanFields.ofFrequencyAmount).DoubleValue <> CDbl(mvClassFields(PaymentPlanFields.ofFrequencyAmount).SetValue) Or Balance > 0 And vBalance = 0 Then
                .Add("frequency_amount", CDBField.FieldTypes.cftNumeric, mvClassFields(PaymentPlanFields.ofFrequencyAmount).DoubleValue)
              End If
              If mvClassFields(PaymentPlanFields.ofRenewalAmount).ValueChanged Then
                .Add("renewal_amount", CDBField.FieldTypes.cftNumeric, mvClassFields(PaymentPlanFields.ofRenewalAmount).Value)
              End If
            End With
            With mvClassFields
              .Item(PaymentPlanFields.ofArrears).DoubleValue = vArrears
              If Len(vAmount) > 0 Then .Item(PaymentPlanFields.ofAmount).DoubleValue = Val(vAmount)
            End With
            pRegenerateOPS = True
          End If
        End With
      End If
    End Sub

    Private Sub SetResetOrderTerm()
      'Determines whether and how to set the ResetOrderTerm property
      If mvClassFields(PaymentPlanFields.ofResetOrderTerm).SetValue = mvClassFields(PaymentPlanFields.ofResetOrderTerm).Value Then
        If ResetOrderTerm = ppResetOrderTerm.pprotNotSet Or ResetOrderTerm = ppResetOrderTerm.pprotYes Then
          'If ResetOrderTerm isn't set to anything then the Term was set by to a -ve value when the payment plan was created.
          Term = MembershipType.MembershipTerm
          If ResetOrderTerm = ppResetOrderTerm.pprotYes Then ResetOrderTerm = ppResetOrderTerm.pprotNo
        Else
          ResetOrderTerm = ppResetOrderTerm.pprotYes
        End If
      End If
    End Sub

    Public Sub SetAutoPaymentFutureCancellation(ByVal pCancellationReason As String, ByVal pCancellationDate As Date, Optional ByVal pCancellationSource As String = "")
      If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        If DirectDebit.Existing Then
          mvDirectDebit.SetFutureCancellation(pCancellationReason, CStr(pCancellationDate), pCancellationSource)
          mvDirectDebit.SaveChanges()
        End If
      ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        If StandingOrder.Existing Then
          mvStandingOrder.SetFutureCancellation(pCancellationReason, CStr(pCancellationDate), pCancellationSource)
          mvStandingOrder.SaveChanges()
        End If
      ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        If CreditCardAuthority.Existing Then
          mvCreditCardAuthority.SetFutureCancellation(pCancellationReason, CStr(pCancellationDate), pCancellationSource)
          mvCreditCardAuthority.SaveChanges()
        End If
      End If
    End Sub

    Public Sub UnSetAutoPaymentFutureCancellation()
      If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        If DirectDebit.Existing Then
          mvDirectDebit.UnsetFutureCancellation()
          mvDirectDebit.SaveChanges()
        End If
      ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        If StandingOrder.Existing Then
          mvStandingOrder.UnsetFutureCancellation()
          mvStandingOrder.SaveChanges()
        End If
      ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        If CreditCardAuthority.Existing Then
          mvCreditCardAuthority.UnsetFutureCancellation()
          mvCreditCardAuthority.SaveChanges()
        End If
      End If
    End Sub

    Public Sub Confirm()
      Dim vFields As New CDBFields
      Dim vTrans As Boolean

      'Confirm the provisional Payment Plan
      If Provisional Then
        Dim vAPStartDate As String = TodaysDate()
        If DirectDebitStatus = ppYesNoCancel.ppYes OrElse StandingOrderStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes Then
          Dim vAutoPayMethod As PaymentPlan.ppAutoPayMethods
          If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
            vAutoPayMethod = PaymentPlan.ppAutoPayMethods.ppAPMDD
          ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
            vAutoPayMethod = PaymentPlan.ppAutoPayMethods.ppAPMCCCA
          Else
            vAutoPayMethod = PaymentPlan.ppAutoPayMethods.ppAPMSO
          End If
          vAPStartDate = mvEnv.GetPaymentPlanAutoPayDate(Today, vAutoPayMethod, Me.AutoPayBankAccount).ToString(CAREDateFormat)
        End If

        mvClassFields.Item(PaymentPlanFields.ofProvisional).Bool = False
        mvClassFields.Item(PaymentPlanFields.ofConfirmedOn).Value = TodaysDate()
        mvClassFields.Item(PaymentPlanFields.ofOrderDate).Value = TodaysDate()
        mvClassFields.Item(PaymentPlanFields.ofNextPaymentDue).Value = TodaysDate()
        mvClassFields.Item(PaymentPlanFields.ofRenewalDate).Value = TodaysDate()
        mvClassFields.Item(PaymentPlanFields.ofExpiryDate).Value = CDate(StartDate).AddYears(99).AddDays(-1).ToString(CAREDateFormat)

        If mvEnv.Connection.InTransaction = False Then
          mvEnv.Connection.StartTransaction()
          vTrans = True
        End If

        'Update the StartDate for any auto payment method
        If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          With DirectDebit
            SetAutoPayMethod(ppAutoPayMethods.ppAPMDD, vAPStartDate, .BankAccount, (mvClassFields(PaymentPlanFields.ofClaimDay).Value)) 'This will set set fields for fixed claim dates
            .Update(.BankDetailsNumber, .BankAccount, .Source, Val(.Amount), vAPStartDate, .Reference, .MandateType)
            .SaveChanges()
          End With
        ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          With StandingOrder
            SetAutoPayMethod(ppAutoPayMethods.ppAPMSO, vAPStartDate)
            .Update(.BankDetailsNumber, .BankAccount, .Source, Val(CStr(.Amount)), vAPStartDate, .Reference, "")
            .SaveChanges()
          End With
        ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          With CreditCardAuthority
            SetAutoPayMethod(ppAutoPayMethods.ppAPMCCCA, vAPStartDate, "", (mvClassFields(PaymentPlanFields.ofClaimDay).Value))
            .Update(.CreditCardDetailsNumber, .BankAccount, .Source, Val(.Amount), vAPStartDate, "")
            .SaveChanges()
          End With
        End If

        SaveChanges()

        'Delete the current scheduled payments and re-create
        vFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue)
        mvEnv.Connection.DeleteRecords("order_payment_schedule", vFields)
        mvClassFields.Item(PaymentPlanFields.ofPaymentScheduleAmendedOn).Value = ""

        RegenerateScheduledPayments(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan, TodaysDate)

        If vTrans Then mvEnv.Connection.CommitTransaction()
      End If
    End Sub

    Public Sub ReinstateAutoPayMethod(ByVal pPayMethod As ppAutoPayMethods, ByVal pAutoPayment As IAutoPaymentMethod, Optional ByVal pAmendedBy As String = "", Optional ByVal pNoPaymentsToSkip As Integer = 0)
      'Reinstates the auto pay method - passed in as an initialised class
      Dim vOPS As OrderPaymentSchedule
      Dim vAmendedBy As String
      Dim vTrans As Boolean

      If Not IsCancelled Then
        'Only reinstate if PayPlan not cancelled
        If pAmendedBy.Length > 0 Then
          vAmendedBy = pAmendedBy
        Else
          vAmendedBy = mvEnv.User.UserID
        End If

        If Not (mvEnv.Connection.InTransaction) Then
          vTrans = True
          mvEnv.Connection.StartTransaction()
        End If

        'Cancel the payment method
        pAutoPayment.CreateAutoPMActivity()
        pAutoPayment.SetUnCancelled()
        pAutoPayment.SaveChanges(vAmendedBy)

        Select Case pPayMethod
          Case ppAutoPayMethods.ppAPMCCCA
            mvEnv.AddJournalRecord(JournalTypes.jnlCreditCardMaintenance, JournalOperations.jnlReinstate, pAutoPayment.ContactNumber, pAutoPayment.AddressNumber, pAutoPayment.AutoPaymentNumber)
          Case ppAutoPayMethods.ppAPMDD
            mvEnv.AddJournalRecord(JournalTypes.jnlDirectDebitMaintenance, JournalOperations.jnlReinstate, pAutoPayment.ContactNumber, pAutoPayment.AddressNumber, pAutoPayment.AutoPaymentNumber)
          Case ppAutoPayMethods.ppAPMSO
            mvEnv.AddJournalRecord(JournalTypes.jnlStandingOrderMaintenance, JournalOperations.jnlReinstate, pAutoPayment.ContactNumber, pAutoPayment.AddressNumber, pAutoPayment.AutoPaymentNumber)
        End Select
        SetAutoPayMethod(pPayMethod, "", pAutoPayment.BankAccount, (mvClassFields(PaymentPlanFields.ofClaimDay).Value))

        'Set these as they will be required in order to refresh the payment schedule
        If pPayMethod = ppAutoPayMethods.ppAPMDD Then
          mvDirectDebit = CType(pAutoPayment, DirectDebit)
        ElseIf pPayMethod = ppAutoPayMethods.ppAPMCCCA Then
          mvCreditCardAuthority = CType(pAutoPayment, CreditCardAuthority)
        End If
        UpdateScheduledPaymentClaimDates(pNoPaymentsToSkip = 0)

        'Skip any payments
        If pNoPaymentsToSkip > 0 Then
          mvScheduledPayments = Nothing 'Force a re-selection of the OPS data
          For Each vOPS In ScheduledPayments
            If vOPS.AmountOutstanding > 0 Then
              If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsCancelled Then vOPS.SetUnProcessedPayment(False, 0) 'Change status to allow SkipPayment to work
              Select Case vOPS.ScheduledPaymentStatus
                Case OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsProvisional
                  SkipPayment(vOPS)
                  pNoPaymentsToSkip = pNoPaymentsToSkip - 1
              End Select
            End If
            If pNoPaymentsToSkip = 0 Then Exit For
          Next vOPS
          'If the OPS was regenerated as part of a skip, then the OPS has no ClaimDate at this point
          UpdateScheduledPaymentClaimDates(True)
          mvScheduledPayments = Nothing 'Force a re-selection of the OPS data
        End If
        SaveChanges(vAmendedBy, True)
        If vTrans Then mvEnv.Connection.CommitTransaction()
      End If
    End Sub

    Public Sub Reinstate(ByVal pNoPaymentsToSkip As Integer, Optional ByVal pMembershipNumber As Integer = 0, Optional ByRef pAmendedBy As String = "")
      'Reinstates this Payment Plan etc.
      Dim vMember As Member
      Dim vMembers As Collection = Nothing
      Dim vRS As CDBRecordSet
      Dim vOPS As OrderPaymentSchedule
      Dim vActivity As Boolean
      Dim vAmendedBy As String
      Dim vAutoPayMethod As Boolean
      Dim vCancelDate As String
      Dim vCancelReason As String
      Dim vTrans As Boolean
      Dim vSubscription As New Subscription
      Dim vSubsCollection As New Collection
      Dim vWhereFields As New CDBFields
      Dim vUpdateFields As New CDBFields
      Dim vCovenant As Covenant = Nothing
      Dim vReinstateCovenant As Boolean
      Dim vDate As String
      Dim vAddressChangeWithBranch As String
      Dim vAddressBranch As String
      Dim vJournalNumber As Integer
      Dim vPPD As PaymentPlanDetail

      If IsCancelled Then
        vAddressChangeWithBranch = mvEnv.GetConfig("cd_address_change_with_branch")
        If Len(vAddressChangeWithBranch) = 0 Then vAddressChangeWithBranch = "N"

        vCancelDate = CancelledOn
        vCancelReason = CancellationReason

        'Get Related Subscriptions
        vSubscription.Init(mvEnv)
        vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).Value, CDBField.FieldWhereOperators.fwoEqual)
        vWhereFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, vCancelReason, CDBField.FieldWhereOperators.fwoEqual)
        vWhereFields.Add("cancelled_on", CDBField.FieldTypes.cftDate, vCancelDate, CDBField.FieldWhereOperators.fwoEqual)
        vRS = mvEnv.Connection.GetRecordSet("SELECT " & vSubscription.GetRecordSetFields(Subscription.SubscriptionRecordSetTypes.subrstAll) & " FROM subscriptions WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
        While vRS.Fetch() = True
          vSubscription.InitFromRecordSet(mvEnv, vRS, Subscription.SubscriptionRecordSetTypes.subrstAll)
          vSubsCollection.Add(vSubscription)
          vSubscription = New Subscription
        End While
        vRS.CloseRecordSet()

        If CovenantStatus = PaymentPlan.ppCovenant.ppcCancelled Then
          vCovenant = New Covenant
          vCovenant.InitFromPaymentPlan(mvEnv, PlanNumber, True)
          vDate = vCovenant.CancelledOn
          If vDate.Length > 0 And vDate = mvClassFields(PaymentPlanFields.ofCancelledOn).Value Then vReinstateCovenant = True
        End If

        If PlanType = CDBEnvironment.ppType.pptLoan And mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLoans) = True Then
          mvLoan = New Loan(mvEnv)
          mvLoan.InitFromPaymentPlan(PlanNumber, True)
          If mvLoan.CancellationReason = vCancelReason AndAlso mvLoan.CancelledOn = vCancelDate Then
            mvLoan.SetUnCancelled()
            mvClassFields(PaymentPlanFields.ofLoan).Value = "Y"
          End If
        End If

        If mvEnv.Connection.InTransaction = False Then
          mvEnv.Connection.StartTransaction()
          vTrans = True
        End If

        If pAmendedBy.Length > 0 Then
          vAmendedBy = pAmendedBy
        Else
          vAmendedBy = mvEnv.User.UserID
        End If

        'Reinstate the Payment Plan
        SetUnCancelled()

        'Reinstate Subscriptions
        For Each vSubscription In vSubsCollection
          vSubscription.UnCancel()
          vSubscription.Save()
        Next vSubscription

        'Reinstate Covenant
        If vReinstateCovenant Then
          With vCovenant
            .SetUnCancelled()
            .SaveChanges()
            Dim vCC As New ContactCategory(mvEnv)
            vCC.ContactTypeSaveActivity(Contact.ContactTypes.ctcContact, .ContactNumber, mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCVActivity), mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCVActivityValue), .Source, .StartDate, CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, .EndDate)), "", ContactCategory.ActivityEntryStyles.aesCheckDateRange)
            SetCovenant((vCovenant.DepositedDeed))
            mvEnv.AddJournalRecord(JournalTypes.jnlCovenantMaintenance, JournalOperations.jnlReinstate, .ContactNumber, .AddressNumber, .CovenantNumber)
          End With
        End If

        'Reinstate any auto pay method if cancelled at same time as payment plan
        If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppCancelled Then
          mvDirectDebit = New DirectDebit
          With mvDirectDebit
            .InitFromPaymentPlan(mvEnv, PlanNumber, True)
            If .CancellationReason = vCancelReason And .CancelledOn = vCancelDate Then
              .SetUnCancelled()
              .SaveChanges(vAmendedBy)
              .CreateAutoPMActivity()
              SetAutoPayMethod(ppAutoPayMethods.ppAPMDD, "", (mvDirectDebit.BankAccount), (mvClassFields(PaymentPlanFields.ofClaimDay).Value))
              vAutoPayMethod = True
              mvEnv.AddJournalRecord(JournalTypes.jnlDirectDebitMaintenance, JournalOperations.jnlReinstate, .ContactNumber, .AddressNumber, .DirectDebitNumber)
            Else
              mvDirectDebit = Nothing
            End If
          End With
        End If

        If StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppCancelled And vAutoPayMethod = False Then
          mvStandingOrder = New StandingOrder
          With mvStandingOrder
            .InitFromPaymentPlan(mvEnv, PlanNumber, True)
            If .CancellationReason = vCancelReason And .CancelledOn = vCancelDate Then
              .SetUnCancelled()
              .SaveChanges(vAmendedBy)
              .CreateAutoPMActivity()
              SetAutoPayMethod(ppAutoPayMethods.ppAPMSO)
              vAutoPayMethod = True
              mvEnv.AddJournalRecord(JournalTypes.jnlStandingOrderMaintenance, JournalOperations.jnlReinstate, .ContactNumber, .AddressNumber, .StandingOrderNumber)
            Else
              mvStandingOrder = Nothing
            End If
          End With
        End If

        If CreditCardStatus = PaymentPlan.ppYesNoCancel.ppCancelled And vAutoPayMethod = False Then
          mvCreditCardAuthority = New CreditCardAuthority
          With mvCreditCardAuthority
            .InitFromPaymentPlan(mvEnv, PlanNumber, True)
            If .CancellationReason = vCancelReason And .CancelledOn = vCancelDate Then
              .SetUnCancelled()
              .SaveChanges(vAmendedBy)
              .CreateAutoPMActivity()
              SetAutoPayMethod(ppAutoPayMethods.ppAPMCCCA, "", "", (mvClassFields(PaymentPlanFields.ofClaimDay).Value))
              vAutoPayMethod = True
              mvEnv.AddJournalRecord(JournalTypes.jnlCreditCardMaintenance, JournalOperations.jnlReinstate, .ContactNumber, .AddressNumber, .CreditCardAuthorityNumber)
            Else
              'UPGRADE_NOTE: Object mvCreditCardAuthority may not be destroyed until it is garbage collected. Click for more: 'ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"'
              mvCreditCardAuthority = Nothing
            End If
          End With
        End If

        'Reinstate the Membership
        If PlanType = CDBEnvironment.ppType.pptMember Then
          vMember = New Member
          vMember.Init(mvEnv)
          vMembers = New Collection
          If pMembershipNumber = 0 Then
            'Get all members
            vRS = mvEnv.Connection.GetRecordSet("SELECT " & vMember.GetRecordSetFields(Member.MemberRecordSetTypes.mrtAll) & " FROM members m WHERE order_number = " & PlanNumber & " AND cancellation_reason IS NOT NULL")
            With vRS
              While .Fetch() = True
                If .Fields("cancellation_reason").Value = vCancelReason And .Fields("cancelled_on").Value = vCancelDate Then
                  vMember.InitFromRecordSet(mvEnv, vRS, Member.MemberRecordSetTypes.mrtAll)
                  vMembers.Add(vMember)
                  vMember = New Member
                End If
              End While
              .CloseRecordSet()
            End With
            For Each vMember In vMembers
              With vMember
                .SetUnCancelled()
                .PaymentPlanRenewalDate = RenewalDate
                .PaymentPlanAutoPayMethod = vAutoPayMethod
                If vAddressChangeWithBranch <> "N" Then
                  vAddressBranch = mvEnv.Connection.GetValue("SELECT branch FROM addresses WHERE address_number = " & .AddressNumber)
                  If Len(.Branch) > 0 And Len(vAddressBranch) > 0 And .Branch <> vAddressBranch Then .Branch = vAddressBranch
                End If
                .SaveChanges(vAmendedBy, mvEnv.AuditStyle = CDBEnvironment.AuditStyleTypes.ausExtended)
                mvEnv.AddJournalRecord(JournalTypes.jnlMemberMaintenance, JournalOperations.jnlReinstate, .ContactNumber, .AddressNumber, .MembershipNumber)
                If pNoPaymentsToSkip > 0 Then
                  vActivity = True 'Update activities after processing payments
                Else
                  .AddActivityAndSuppression(.Joined)
                End If
              End With
            Next vMember
          Else
            vMember.Init(mvEnv, pMembershipNumber)
            vMembers.Add(vMember)
            If vMember.Existing Then
              With vMember
                .SetUnCancelled()
                .PaymentPlanRenewalDate = RenewalDate
                .PaymentPlanAutoPayMethod = vAutoPayMethod
                If vAddressChangeWithBranch <> "N" Then
                  vAddressBranch = mvEnv.Connection.GetValue("SELECT branch FROM addresses WHERE address_number = " & .AddressNumber)
                  If Len(.Branch) > 0 And Len(vAddressBranch) > 0 And .Branch <> vAddressBranch Then .Branch = vAddressBranch
                End If
                .SaveChanges(vAmendedBy, mvEnv.AuditStyle = CDBEnvironment.AuditStyleTypes.ausExtended)
                mvEnv.AddJournalRecord(JournalTypes.jnlMemberMaintenance, JournalOperations.jnlReinstate, .ContactNumber, .AddressNumber, .MembershipNumber)
                If pNoPaymentsToSkip > 0 Then
                  vActivity = True 'Update activities after processing payments
                Else
                  .AddActivityAndSuppression((vMember.Joined)) 'TodaysDate
                End If
              End With
            End If
          End If
        End If

        If PlanType = CDBEnvironment.ppType.pptLoan AndAlso mvLoan IsNot Nothing Then
          mvLoan.Save(vAmendedBy)
        End If

        'Set the payment schedule so that it is no longer marked as cancelled
        SetPaymentScheduleUnCancelled()

        If PlanType = CDBEnvironment.ppType.pptLoan Then
          CalculateLoanInterest(vAmendedBy, False)
        Else
          'Update the claim dates
          UpdateScheduledPaymentClaimDates(pNoPaymentsToSkip = 0)
        End If

        'Now save before skipping payments

        If PlanType <> CDBEnvironment.ppType.pptMember AndAlso PlanType <> CDBEnvironment.ppType.pptLoan Then
          If CovenantStatus = PaymentPlan.ppCovenant.ppcCovenant Or CovenantStatus = PaymentPlan.ppCovenant.ppcDepositedDeed Then
            PlanType = CDBEnvironment.ppType.pptCovenant
          ElseIf DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
            PlanType = CDBEnvironment.ppType.pptDD
          ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
            PlanType = CDBEnvironment.ppType.pptSO
          ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
            PlanType = CDBEnvironment.ppType.pptCCCA
          Else
            PlanType = CDBEnvironment.ppType.pptOther
          End If
        End If

        If vAddressChangeWithBranch = "P" Then
          vAddressBranch = mvEnv.Connection.GetValue("SELECT branch FROM addresses WHERE address_number = " & AddressNumber)
          If Len(mvClassFields(PaymentPlanFields.ofBranch).Value) > 0 And Len(vAddressBranch) > 0 And mvClassFields(PaymentPlanFields.ofBranch).Value <> vAddressBranch Then mvClassFields(PaymentPlanFields.ofBranch).Value = vAddressBranch
        End If
        vJournalNumber = mvEnv.AddJournalRecord(JournalTypes.jnlPayPlanMaintenance, JournalOperations.jnlReinstate, mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue, mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
        SaveChanges(vAmendedBy, True, vJournalNumber)

        If vTrans Then mvEnv.Connection.CommitTransaction()

        'Skip any payments
        While pNoPaymentsToSkip > 0
          mvScheduledPayments = Nothing
          For Each vOPS In ScheduledPayments
            If vOPS.AmountOutstanding > 0 And vOPS.ScheduleCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Then
              SkipPayment(vOPS)
              pNoPaymentsToSkip = pNoPaymentsToSkip - 1
            End If
            If pNoPaymentsToSkip = 0 Then Exit For
          Next vOPS

          If pNoPaymentsToSkip > 0 Then
            'Moved on to next renewal date so reset the scheduled payments
            Init(mvEnv, PlanNumber) 'Do this as skipping payments will not have updated the class
            If mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = 0 Then
              CalculateBalance("C", False, True) 'Renew payment plan and recreate schedule
              mvClassFields(PaymentPlanFields.ofRenewalPending).Bool = True 'Then set RenewalPending
              'Use SaveChanges here instead of Save because if the PP is a long way behind the OPS can be created wrong (and SaveChanges is good enough)
              SaveChanges()
              For Each vPPD In mvDetails
                vPPD.SaveChanges()
              Next vPPD
            End If
          End If
        End While

        If PlanType = CDBEnvironment.ppType.pptMember And vActivity = True Then
          'Renewal Date may have been rolled forward
          vMember = New Member
          For Each vMember In vMembers
            vMember.PaymentPlanRenewalDate = RenewalDate
            vMember.AddActivityAndSuppression((vMember.Joined))
          Next vMember
        End If
      End If

      Dim vPayPlanChange As PaymentPlanChange = New PaymentPlanChange(mvEnv, Me)
      vPayPlanChange.GenerateChangesFromBalance(Date.Today, False)
      vPayPlanChange.SaveChanges()
    End Sub

    Public Sub CancelAutoPayMethod(ByRef pType As ppAutoPayMethods, ByRef pCancellationReason As String, ByRef pNewPaymentMethod As String, Optional ByRef pCancelledOn As String = "", Optional ByRef pCancelledBy As String = "", Optional ByRef pCancellationSource As String = "")
      Select Case pType
        Case ppAutoPayMethods.ppAPMDD
          mvDirectDebit.SetCancelled(pCancellationReason, pCancelledOn, pCancelledBy, pCancellationSource)
          mvClassFields(PaymentPlanFields.ofDirectDebit).Value = "C"
        Case ppAutoPayMethods.ppAPMSO
          mvStandingOrder.SetCancelled(pCancellationReason, pCancelledOn, pCancelledBy, pCancellationSource)
          mvClassFields(PaymentPlanFields.ofBankersOrder).Value = "C"
        Case ppAutoPayMethods.ppAPMCCCA
          mvCreditCardAuthority.SetCancelled(pCancellationReason, pCancelledOn, pCancelledBy, pCancellationSource)
          mvClassFields(PaymentPlanFields.ofCreditCard).Value = "C"
      End Select
      mvClassFields(PaymentPlanFields.ofPaymentMethod).Value = pNewPaymentMethod
    End Sub

    Public Sub SetCreated(ByRef pCreatedOn As String, ByRef pCreatedBy As String)
      mvClassFields.Item(PaymentPlanFields.ofCreatedOn).Value = pCreatedOn
      mvClassFields.Item(PaymentPlanFields.ofCreatedBy).Value = pCreatedBy
    End Sub

    Public Function GetProrataBalance(ByVal pPrice As Double, ByVal pStartDate As String) As Double
      Dim vNetAmount As Double
      Return GetProrataBalance(pPrice, pStartDate, False, Nothing, Nothing, 0, 1, 0, vNetAmount)
    End Function
    Public Function GetProrataBalance(ByVal pPrice As Double, ByVal pStartDate As String, ByVal pFromRenewals As Boolean) As Double
      Dim vNetAmount As Double
      GetProrataBalance(pPrice, pStartDate, pFromRenewals, Nothing, Nothing, 0, 1, 0, vNetAmount)
    End Function
    Public Function GetProrataBalance(ByVal pPrice As Double, ByVal pStartDate As String, ByVal pFromRenewals As Boolean, ByVal pRate As ProductRate, ByVal pVATRate As VatRate, ByVal pContactNumber As Integer, ByVal pQuantity As Double, ByVal pSourceDiscountPercentage As Double) As Double
      Dim vNetAmount As Double
      Return GetProrataBalance(pPrice, pStartDate, pFromRenewals, pRate, pVATRate, pContactNumber, pQuantity, pSourceDiscountPercentage, vNetAmount)
    End Function
    Public Function GetProrataBalance(ByVal pPrice As Double, ByVal pStartDate As String, ByVal pFromRenewals As Boolean, ByVal pRate As ProductRate, ByVal pVATRate As VatRate, ByVal pContactNumber As Integer, ByVal pQuantity As Double, ByVal pSourceDiscountPercentage As Double, ByRef pNetAmount As Double) As Double
      Return GetProrataBalance(pPrice, pStartDate, pFromRenewals, pRate, pVATRate, pContactNumber, pQuantity, pSourceDiscountPercentage, pNetAmount, "", False)
    End Function
    ''' <summary>Calculate the pro-rated amount for pPrice.</summary>
    ''' <param name="pPrice">The amount to be pro-rated.</param>
    ''' <param name="pJoinDate">The membership joined date or, if not a membership, the pro-rating start date.</param>
    ''' <param name="pFromRenewals">Has this come from Renewals?</param>
    ''' <param name="pRate">The ProductRate object for the amount to be pro-rated.</param>
    ''' <param name="pVATRate">The VATRate object used to calculate VAT for VAT-exclusive rates.</param>
    ''' <param name="pContactNumber">Contact number used for rate modifiers.</param>
    ''' <param name="pQuantity">The number of items this price relates to.</param>
    ''' <param name="pSourceDiscountPercentage">The discount percentage, if any, to be applied based upon the source code.</param>
    ''' <param name="pNetAmount">The pro-rated net price (i.e. without VAT).</param>
    ''' <param name="pStartDate">The membership start date used when creating a new membership.</param>
    ''' <param name="pNewDetailLine">Is a new detail line being added?</param>
    ''' <returns>Pro-rted price.</returns>
    Public Function GetProrataBalance(ByVal pPrice As Double, ByVal pJoinDate As String, ByVal pFromRenewals As Boolean, ByVal pRate As ProductRate, ByVal pVATRate As VatRate, ByVal pContactNumber As Integer, ByVal pQuantity As Double, ByVal pSourceDiscountPercentage As Double, ByRef pNetAmount As Double, ByVal pStartDate As String, ByVal pNewDetailLine As Boolean) As Double
      Dim vNumberOfPayments As Integer
      Dim vNextPaymentDue As Date
      Dim vLastPaymentDue As Date
      Dim vMonthlyPrice As Double
      Dim vTerm As Integer
      Dim vRenewalDate As String
      Dim vContinue As Boolean
      Dim vForceProrata As Boolean
      Dim vClaimDate As String
      Dim vPPDGracePeriodProportion As String
      Dim vPriceDate As String = String.Empty

      vPriceDate = If(Me.Existing AndAlso pRate IsNot Nothing AndAlso BooleanValue(pRate.UseModifiers) AndAlso BooleanValue(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlUseRenewalDateForRateMod)), Me.OriginalPriceDate, If(Not IsDate(pJoinDate), TodaysDate(), pJoinDate))

      pNetAmount = 0      'Only set when pRate and pVATRate are passed in as initialised classes
      vPPDGracePeriodProportion = mvEnv.GetConfig("fp_ppd_grace_period_proportion", "N")
      'BR19338- The above config only relates to Auto Pay Methods DD/CCCA, therefore removed the check when not Auto Pay Method, as this was preventing Prorating
      If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        vForceProrata = mvClassFields(PaymentPlanFields.ofRenewalPending).Bool And mvExisting And vPPDGracePeriodProportion <> "N" And PaymentFrequencyFrequency <> 1
      Else
        vForceProrata = mvClassFields(PaymentPlanFields.ofRenewalPending).Bool And mvExisting And PaymentFrequencyFrequency <> 1
      End If
      If ProRateBasisSetting = ProRateBasisConfigSettings.prbsFrequencyBased Then
        If Len(mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value) > 0 Then 'And Len(mvClassFields(ofBalance).Value) > 0 Then
          GetPaymentFrequencyDetails()
          If mvPaymentFreqFrequency > 0 Then
            If Val(mvClassFields(PaymentPlanFields.ofBalance).Value) = 0 Then
              Return 0
            Else
              If mvClassFields(PaymentPlanFields.ofRenewalPending).Bool And mvExisting And vForceProrata = False AndAlso (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsExistingPF) = 0 Then
                'Assume we have the whole term to make the balance
                Return pPrice
              Else
                'Recalc balance amount based on number of remaining payments
                If Len(mvClassFields(PaymentPlanFields.ofRenewalDate).Value) > 0 And Len(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value) > 0 Then
                  Dim vPFCode As String = PaymentFrequencyCode
                  Dim vPF As PaymentFrequency = mvEnv.GetPaymentFrequency(vPFCode)
                  vLastPaymentDue = CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)
                  If vForceProrata Then vLastPaymentDue = CDate(CalculateRenewalDate(CStr(vLastPaymentDue), True))
                  If mvPaymentFreqFrequency = 1 Then
                    vNextPaymentDue = CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)
                  Else
                    vNextPaymentDue = DateAdd(Microsoft.VisualBasic.DateInterval.Month, mvPaymentFreqInterval, CDate(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value))
                  End If
                  If (PaymentFrequencyFrequency * PaymentFrequencyInterval < 12) AndAlso PaymentFrequencyFrequency > 1 AndAlso PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpMonths Then
                    Dim vOffset As Integer = vPF.GetCalculatedOffsetMonths()
                    If vOffset <> 0 Then
                      vLastPaymentDue = Date.Parse(AddMonths(RenewalDate, vLastPaymentDue.ToString(CAREDateFormat), vOffset))
                      If RenewalPending Then
                        vNextPaymentDue = Date.Parse(AddMonths(RenewalDate, vLastPaymentDue.ToString(CAREDateFormat), -PaymentFrequencyFrequency))
                        While Today.CompareTo(vNextPaymentDue) > 0
                          vNextPaymentDue = Date.Parse(AddMonths(RenewalDate, vNextPaymentDue.ToString(CAREDateFormat), PaymentFrequencyInterval))
                        End While
                      End If
                      vNextPaymentDue = Date.Parse(AddMonths(RenewalDate, vNextPaymentDue.ToString(CAREDateFormat), PaymentFrequencyInterval))
                    End If
                  End If

                  Dim vProrateBalanceData As New ProrateBalanceData(vNextPaymentDue, vLastPaymentDue, Today)
                  Dim vChangeDate As Date = Today
                  If mvExisting = True AndAlso pNewDetailLine = True Then
                    Dim vNewNPDue As Date = GetNextInstalmentDueDate(vChangeDate)
                    If vNewNPDue > vNextPaymentDue Then vNextPaymentDue = vNewNPDue
                    If vNewNPDue > vChangeDate Then
                      vChangeDate = vNewNPDue
                      vProrateBalanceData.MinDueDate = vNewNPDue
                    End If
                    vProrateBalanceData.NextPaymentDue = vNextPaymentDue
                  End If

                  If (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) And (mvPaymentFreqFrequency > 1 And mvPaymentFreqPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpMonths And (mvPaymentFreqFrequency * mvPaymentFreqInterval <= 12)) And vPPDGracePeriodProportion <> "N" And IsDate(pJoinDate) = True And pFromRenewals = False Then
                    vNumberOfPayments = CalculateProRataNumberPaymentsFromOPS(pJoinDate, vProrateBalanceData.RenewalDate.ToString(CAREDateFormat))
                  ElseIf pFromRenewals = False Then
                    vNumberOfPayments = 1
                    While DateDiff(Microsoft.VisualBasic.DateInterval.Day, vNextPaymentDue, vProrateBalanceData.RenewalDate) > 0
                      vNumberOfPayments = vNumberOfPayments + 1
                      vNextPaymentDue = DateAdd(Microsoft.VisualBasic.DateInterval.Month, mvPaymentFreqInterval, vNextPaymentDue)
                    End While
                  Else
                    'Use by R&R only
                    vLastPaymentDue = CDate(CalculateRenewalDate(RenewalDate, True))
                    vNextPaymentDue = CDate(RenewalDate)
                    vClaimDate = FindNextClaimDate(CStr(vNextPaymentDue))
                    While CDate(vClaimDate) < CDate(vLastPaymentDue)
                      If CDate(vClaimDate) >= CDate(pJoinDate) Then vNumberOfPayments = vNumberOfPayments + 1
                      vNextPaymentDue = DateAdd(Microsoft.VisualBasic.DateInterval.Month, mvPaymentFreqInterval, vNextPaymentDue)
                      vClaimDate = FindNextClaimDate(CStr(vNextPaymentDue))
                    End While
                  End If
                  If pRate IsNot Nothing AndAlso pVATRate IsNot Nothing Then
                    If pJoinDate.Length = 0 Then pJoinDate = TodaysDate() 'J1563: Use the TodaysDate if the pJoinDate is not set
                    If String.IsNullOrEmpty(vPriceDate) Then vPriceDate = TodaysDate()
                    Dim vGrossAmount As Double = pRate.Price(DateValue(vPriceDate), pContactNumber, pQuantity, pVATRate, pSourceDiscountPercentage, mvPaymentFreqFrequency, vNumberOfPayments)
                    Dim vVatAmount As Double = 0
                    If pRate.VatExclusive Then
                      pNetAmount = pRate.PriceWithoutVAT(DateValue(vPriceDate), pQuantity, pContactNumber, pSourceDiscountPercentage, mvPaymentFreqFrequency, vNumberOfPayments)
                    Else
                      vVatAmount = pVATRate.CalculateVATAmount(vGrossAmount, False, pJoinDate)
                      pNetAmount = FixTwoPlaces(vGrossAmount - vVatAmount)
                    End If
                    If Existing AndAlso vGrossAmount = 0 AndAlso pPrice <> 0 AndAlso (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsExistingPF) = ProportionalBalanceConfigSettings.pbcsExistingPF Then
                      'Where the Rate Price is calculated as zero but we have supplied the price and the 'fp_ppd_proportional_balance' config is set to 'EXISTINGPF' return the price pro-rated based on the payment number of payment frequncies remaining
                      Dim vInstallments As Integer = 0    'Number of installments remaining
                      If pNewDetailLine = True AndAlso RenewalPending = True AndAlso CDate(RenewalDate) > Today Then
                        'Renewals has been run and new detail line being added before the renewal date
                        'Need to calculate the pro-rate balance from today to renewal date and then from renewal date to the end of the next period
                        vRenewalDate = RenewalDate
                        vNumberOfPayments = GetNumberOfFrequencyAmounts(vPF, vRenewalDate, vInstallments, Today, vProrateBalanceData.MinDueDate)
                        vMonthlyPrice = CalcFrequencyAmount(pPrice, vNumberOfPayments)
                        vGrossAmount = FixTwoPlaces(vMonthlyPrice * vInstallments)
                        vRenewalDate = RenewalPeriodEnd
                      ElseIf (vForceProrata = True Or pFromRenewals = True) Then
                        vRenewalDate = CalculateRenewalDate(RenewalDate, True)
                      Else
                        vRenewalDate = RenewalPeriodEnd
                      End If
                      vNumberOfPayments = GetNumberOfFrequencyAmounts(vPF, vProrateBalanceData.RenewalDate.ToString(CAREDateFormat), vInstallments, vChangeDate, vProrateBalanceData.MinDueDate)   'vNumberOfPayments is the total number of payments expected (i.e. PaymentFrequencyFrequency)

                      If pNewDetailLine = True AndAlso vInstallments = 0 AndAlso RenewalPending = True AndAlso (vPF.Frequency = 1 AndAlso vPF.Interval = 12) Then
                        'Annual payer but cannot change the annual payment - in this situation still upgrade with additional amount paid at later date.
                        vInstallments = PaymentFrequencyFrequency
                      End If
                      If vInstallments = PaymentFrequencyFrequency Then
                        vGrossAmount += pPrice   'Got full year so use original value
                      Else
                        vMonthlyPrice = CalcFrequencyAmount(pPrice, vNumberOfPayments)
                        vGrossAmount += FixTwoPlaces(vMonthlyPrice * vInstallments)
                      End If
                      vVatAmount = pVATRate.CalculateVATAmount(vGrossAmount, False, TodaysDate)
                      pNetAmount = FixTwoPlaces(vGrossAmount - vVatAmount)
                    End If
                    Return vGrossAmount
                  Else
                    Return FixTwoPlaces((pPrice / mvPaymentFreqFrequency) * vNumberOfPayments)
                  End If
                End If
              End If
            End If
          End If
        Else
          Return pPrice
        End If
      ElseIf ProRateBasisSetting = ProRateBasisConfigSettings.prbsTimeBased Then
        'New Payment Plans: Only called for annual or life memberships where the fixed_renewal_M config is set and has a P as the 5th character.
        'Existing Payment Plans: Called for some memberships where:
        '                        i.   the fixed_renewal_M config is set and has a P as the 5th character
        '                        ii.  the fp_ppd_proportional_balance config is set to either NEW or FULLAMOUNT
        '                        iii. the PP Start Date equals the Renewal Date
        'Existing Payment Plans: Called for all other payment plans where the fp_ppd_proportional_balance config is set to EXISTING
        vContinue = True
        If Len(pJoinDate) = 0 Then pJoinDate = TodaysDate()
        If MembershipType.Existing Then
          vTerm = MembershipType.MembershipTerm
          If vTerm = 0 Then vTerm = If(MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfLifeTerm, 99, 1)
          If PreviousRenewalCycle OrElse (Not Existing AndAlso mvEnv.GetConfigOption("recalculate_membership_balance") AndAlso IsDate(pStartDate) AndAlso IsDate(pJoinDate) AndAlso (CDate(pStartDate) < (CDate(pJoinDate)))) Then
            'Creating new membership or adding a new PPD to a membership still in it's inital period
            If mvEnv.GetConfigOption("recalculate_membership_balance") And mvUseStartDateForTerm Then
              If (CDate(pJoinDate).AddYears(1) < CDate(pStartDate)) OrElse (DateDiff(DateInterval.Month, CDate(pStartDate), CDate(pJoinDate)) >= 12) Then RaiseError(DataAccessErrors.daeMembershipStartDateInvalid)
              vRenewalDate = pStartDate
            Else
              vRenewalDate = FixedRenewalDate(pJoinDate)
            End If

            Dim vNoOfMonths As Integer

            If CDate(vRenewalDate) <= CDate(pJoinDate) Then
              vNoOfMonths = CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Month, CDate(vRenewalDate), CDate(pJoinDate)))
            Else
              'not current period 
              vNoOfMonths = 12
            End If

            vNumberOfPayments = CInt((vTerm * 12) - vNoOfMonths)

          Else
            'Adding new pro-rate PPD to existing membership
            'if so then set vRD = today & pJoinDate = RD. that should give you the no. of months from the current date to the RD
            If RenewalPending And vForceProrata = False Then
              'Has the current term started yet? If not then don't prorate, use full price
              vContinue = False
              Return pPrice
            Else
              If (vForceProrata = True Or pFromRenewals = True) Then vRenewalDate = CalculateRenewalDate(RenewalDate, True) Else vRenewalDate = RenewalDate
              If mvExisting = True AndAlso (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsExistingPF) = ProportionalBalanceConfigSettings.pbcsExistingPF Then
                Dim vPF As PaymentFrequency = mvEnv.GetPaymentFrequency(mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).Value)
                Dim vMonths As Integer
                vNumberOfPayments = GetNumberOfFrequencyAmounts(vPF, vRenewalDate, vMonths)
                If vMonths > 0 Then
                  vNumberOfPayments = GetMonthsRemaining(vPF, vNumberOfPayments, vMonths)
                Else
                  vNumberOfPayments = 0
                End If
              Else
                vNumberOfPayments = CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Month, CDate(pJoinDate), CDate(vRenewalDate)))
              End If
              'Sometimes this appears to get the number of payments wrong (too high) so if adding this number of months on to the date is too high, reduce it by one
              If DateAdd(Microsoft.VisualBasic.DateInterval.Month, vNumberOfPayments, DateSerial(Year(CDate(pJoinDate)), Month(CDate(pJoinDate)), Day(CDate(vRenewalDate)))) > CDate(vRenewalDate) AndAlso vNumberOfPayments > 0 Then vNumberOfPayments = vNumberOfPayments - 1
            End If
          End If
        Else
          If RenewalPending And vForceProrata = False Then
            'Has the current term started yet? If not then don't prorate, use full price
            vContinue = False
            Return pPrice
          Else
            vTerm = Term
            If vForceProrata Then vRenewalDate = CalculateRenewalDate(RenewalDate, True) Else vRenewalDate = RenewalDate
            If mvExisting = True AndAlso (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsExistingPF) = ProportionalBalanceConfigSettings.pbcsExistingPF Then
              Dim vPF As PaymentFrequency = mvEnv.GetPaymentFrequency(mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).Value)
              Dim vMonths As Integer
              vNumberOfPayments = GetNumberOfFrequencyAmounts(vPF, vRenewalDate, vMonths)
              If vMonths > 0 Then
                vNumberOfPayments = GetMonthsRemaining(vPF, CInt(vTerm * 12), vMonths)
              Else
                vNumberOfPayments = 0
              End If
            End If
            If DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(NextPaymentDue), CDate(vRenewalDate)) = 0 Then
              vNumberOfPayments = CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Month, CDate(pJoinDate), CDate(vRenewalDate)))
            ElseIf vPPDGracePeriodProportion <> "N" And (CDate(pJoinDate) <> CDate(TodaysDate())) Then
              vNumberOfPayments = CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Month, CDate(pJoinDate), CDate(vRenewalDate)))
            Else
              vNumberOfPayments = CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Month, CDate(NextPaymentDue), CDate(vRenewalDate)))
            End If
          End If
        End If
        If vContinue Then
          If pRate IsNot Nothing AndAlso pVATRate IsNot Nothing Then
            Dim vGrossAmount As Double = pRate.Price(DateValue(vPriceDate), pContactNumber, pQuantity, pVATRate, pSourceDiscountPercentage, (vTerm * 12), vNumberOfPayments)
            Dim vVATAmount As Double = 0
            If pRate.VatExclusive Then
              pNetAmount = pRate.PriceWithoutVAT(DateValue(vPriceDate), pQuantity, pContactNumber, pSourceDiscountPercentage, (vTerm * 12), vNumberOfPayments)
            Else
              vVATAmount = pVATRate.CalculateVATAmount(vGrossAmount, False, pJoinDate)
              pNetAmount = FixTwoPlaces(vGrossAmount - vVATAmount)
            End If
            If Existing AndAlso vGrossAmount = 0 AndAlso pPrice <> 0 AndAlso (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsExistingPF) = ProportionalBalanceConfigSettings.pbcsExistingPF Then
              'Where the Rate Price is calculated as zero but we have supplied the price and where the ProportialBalanceSettings is ExistingPF 
              'return the price pro-rated based on the payment number of payment frequncies remaining
              vMonthlyPrice = pPrice / (vTerm * 12) 'Do not put a FixTwoPlaces around this! This figure must contain all the decimal places to prevent rounding errors
              vGrossAmount = FixTwoPlaces(vMonthlyPrice * vNumberOfPayments)
              vVATAmount = pVATRate.CalculateVATAmount(vGrossAmount, False, TodaysDate)
              pNetAmount = FixTwoPlaces(vGrossAmount - vVATAmount)
              pRate.PaymentPlanDetailPricing.CalculatePricing(pPrice, vGrossAmount, pRate.VatExclusive, vPriceDate, pVATRate, True)
            End If
            Return vGrossAmount
          Else
            vMonthlyPrice = pPrice / (vTerm * 12) 'Do not put a FixTwoPlaces around this! This figure must contain all the decimal places to prevent rounding errors
            Return FixTwoPlaces(vMonthlyPrice * vNumberOfPayments)
          End If
        End If
      End If
    End Function

    Public Function CalculateRenewalDate(ByVal pOldRenewalDate As String, ByVal pAdd As Boolean) As String
      'This will calculate the next RenewalDate and pass it back
      Dim vNewRenewalDate As String

      If pAdd Then
        If PlanType = CDBEnvironment.ppType.pptMember And mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue > 0 Then
          Select Case MembershipType.PaymentTerm
            Case MembershipType.MembershipTypeTerms.mtfMonthlyTerm
              vNewRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue, CDate(pOldRenewalDate)))
            Case MembershipType.MembershipTypeTerms.mtfWeeklyTerm
              vNewRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.WeekOfYear, mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue, CDate(pOldRenewalDate)))
            Case Else
              vNewRenewalDate = CDate(pOldRenewalDate).AddYears(Term).ToString(CAREDateFormat)
          End Select
        Else
          If mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue > 1 Then
            'Non-Member - Add Term years
            vNewRenewalDate = CDate(pOldRenewalDate).AddYears(Term).ToString(CAREDateFormat)
          ElseIf mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue < 0 Then
            vNewRenewalDate = AddMonths(pOldRenewalDate, pOldRenewalDate, System.Math.Abs(mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue))
          Else
            If PlanType = CDBEnvironment.ppType.pptMember Then
              'For a Member this will always be Term = 1 so add Months
              vNewRenewalDate = AddMonths(BaseDate, pOldRenewalDate, PaymentFrequencyInterval * PaymentFrequencyFrequency)
            Else
              If PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                'Days / Weeks so add Days
                vNewRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, PaymentFrequencyInterval * PaymentFrequencyFrequency, CDate(pOldRenewalDate)))
              Else
                'Must be Months so add Months
                vNewRenewalDate = AddMonths(BaseDate, pOldRenewalDate, PaymentFrequencyInterval * PaymentFrequencyFrequency)
              End If
            End If
          End If
        End If
      Else
        'Roll RenewalDate back
        If PlanType = CDBEnvironment.ppType.pptMember And mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue > 0 Then
          Select Case MembershipType.PaymentTerm
            Case MembershipType.MembershipTypeTerms.mtfMonthlyTerm
              vNewRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, -Term, CDate(pOldRenewalDate)))
            Case MembershipType.MembershipTypeTerms.mtfWeeklyTerm
              vNewRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.WeekOfYear, -Term, CDate(pOldRenewalDate)))
            Case Else
              vNewRenewalDate = CDate(pOldRenewalDate).AddYears(-Term).ToString(CAREDateFormat)
          End Select
        Else
          If mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue > 1 Then
            'Non-Member - Deduct Term years
            vNewRenewalDate = CDate(pOldRenewalDate).AddYears(-Term).ToString(CAREDateFormat)
          ElseIf mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue < 0 Then
            'J1562: Use the Term value from mvClassFields rather using Term as the system goes in infinite loop
            'When used Term, SetRenewalAmountFromPPD calls CalculateRenewalDate which updates Term from AddMonths(below) and Term SET calls SetRenewalData which calls SetRenewalAmountFromPPD
            vNewRenewalDate = AddMonths(pOldRenewalDate, pOldRenewalDate, mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue) 'as .Term -ve, and pAdd False, we need to subtract i.e. roll date back
          Else
            If PlanType = CDBEnvironment.ppType.pptMember Then
              'For a Member this will always be Term = 1 so deduct Months
              vNewRenewalDate = AddMonths(BaseDate, pOldRenewalDate, -(PaymentFrequencyInterval * PaymentFrequencyFrequency))
            Else
              If PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                'Days / Weeks so deduct Days
                vNewRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -(PaymentFrequencyInterval * PaymentFrequencyFrequency), CDate(pOldRenewalDate)))
              Else
                'Must be Months so deduct Months
                vNewRenewalDate = AddMonths(BaseDate, pOldRenewalDate, -(PaymentFrequencyInterval * PaymentFrequencyFrequency))
              End If
            End If
          End If
        End If
      End If
      CalculateRenewalDate = vNewRenewalDate
    End Function

    ''' <summary>Get the Order Payment Schedule records for the current term only</summary>
    ''' <param name="pAllDuePayments">Set to True to only select payments that are Due/Part-Paid/Unprocessed-Payment/Provisional, otherwise set to False.  Defaults to True.</param>
    ''' <param name="pOverrideRenewalDate">Over-ride the calculated RenewalDate with this value when pAllDuePayments is False.</param>
    ''' <param name="pSkipProcessing">Skipping payments</param>
    ''' <param name="pCreateInAdvancePayments">Regenerating OPS for opscrInAdvance</param>
    Private Sub GetScheduledPayments(Optional ByVal pAllDuePayments As Boolean = True, Optional ByVal pOverrideRenewalDate As String = "", Optional ByVal pSkipProcessing As Boolean = False, Optional ByVal pCreateInAdvancePayments As Boolean = False)
      Dim vStartDate As String = ""
      Dim vRenewalDate As String = ""
      Dim vStatus As String = ""

      If LoanStatus = ppYesNoCancel.ppYes Then
        'Overdide anything passed in
        'pAllDuePayments = True
        pSkipProcessing = False
        pOverrideRenewalDate = ""
        'Want all OPS between start & expiry dates
        vStartDate = StartDate
        vRenewalDate = ExpiryDate
        If pAllDuePayments = False Then
          'Need to get any payments dated around Today that are already paid in order to ensure that duplicate OPS are not created
          vStartDate = DateAdd(DateInterval.Month, -3, Today).ToString(CAREDateFormat)
          If CDate(vStartDate) < CDate(StartDate) Then vStartDate = StartDate
        End If
      Else
        If pAllDuePayments = True And Len(mvClassFields(PaymentPlanFields.ofCancellationReason).Value) > 0 And pSkipProcessing = False Then pAllDuePayments = False

        If pAllDuePayments Then
          vStartDate = mvClassFields(PaymentPlanFields.ofOrderDate).Value
          vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
          If mvClassFields(PaymentPlanFields.ofRenewalPending).Bool Then
            vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
          Else
            If mvClassFields(PaymentPlanFields.ofRenewalPending).SetValue = "Y" And mvClassFields(PaymentPlanFields.ofRenewalDate).ValueChanged = False Then
              'RenewalPending changed but Renewaldate not changed, so treat as though RenewalPending still set
              vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
            End If
          End If
        Else
          If mvProcessRenewal Then
            'In R&R, we want the period we are renewing to
            '    vRenewalDate = mvClassFields(ofRenewalDate).Value
            '    vStartDate = CalculateRenewalDate(vRenewalDate, False)
            If mvClassFields(PaymentPlanFields.ofBalance).DoubleValue > 0 Then
              vStartDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
              vRenewalDate = CalculateRenewalDate(vStartDate, True)
            Else
              'Renewal date already rolled forward?
              vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
              vStartDate = CalculateRenewalDate(vRenewalDate, False)
            End If
          Else
            If mvClassFields(PaymentPlanFields.ofBalance).DoubleValue > 0 Then
              vStartDate = mvClassFields(PaymentPlanFields.ofOrderDate).Value
              vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value

              If CDate(vStartDate) = CDate(vRenewalDate) Then
                'Start & Renewal dates are the same, so find next renewal date
                vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
              Else
                If mvClassFields(PaymentPlanFields.ofRenewalPending).Bool = True Then
                  'Renewals has been run and no payments received
                  vStartDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
                  vRenewalDate = CalculateRenewalDate(vStartDate, True)
                Else
                  'Start and Renewal dates are different, so find start date of current renewal period
                  vStartDate = CalculateRenewalDate(vRenewalDate, False)
                End If
              End If
            Else
              'Balance = 0
              '      vStartDate = mvClassFields(ofRenewalDate).Value
              '      vRenewalDate = CalculateRenewalDate(vStartDate, True)
              vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
              vStartDate = CalculateRenewalDate(vRenewalDate, False)
              If Len(vStartDate) = 0 Then vStartDate = AddMonths(BaseDate, vRenewalDate, -(PaymentFrequencyInterval * PaymentFrequencyFrequency))
              If IsDate(pOverrideRenewalDate) Then
                If CDate(vStartDate) < CDate(pOverrideRenewalDate) Then vRenewalDate = pOverrideRenewalDate
              End If
            End If
          End If
        End If
        If mvSecondCMT Then vStartDate = CalculateRenewalDate(vRenewalDate, False) 'Use the start date of the next year for SecondCMT
        If mvFirstCMT Then vRenewalDate = Date.Parse(vRenewalDate).AddDays(-1).ToString(CAREDateFormat) 'Use the renewal date of the current year for FirstCMT

        If pCreateInAdvancePayments Then
          'If the payment frequency has an off-set then the provisional OPS due date will take that off-set into account
          'So we must include that off-set here so that we select any previously created provisional OPS records
          Dim vProvDate As Date = GetProvisionalOPSDueDate(Date.Parse(vRenewalDate))
          If vProvDate.CompareTo(Date.Parse(vRenewalDate)) > 0 Then vRenewalDate = vProvDate.ToString(CAREDateFormat)
        End If
      End If

      Dim vOPS As New OrderPaymentSchedule
      vOPS.Init(mvEnv)
      mvScheduledPayments = New Collection
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments) Then
        Dim vFields As New CDBFields()
        With vFields
          .Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue)
          .Add("due_date", CDBField.FieldTypes.cftDate, vStartDate, CDBField.FieldWhereOperators.fwoBetweenFrom)
          .Add("due_date2", CDBField.FieldTypes.cftDate, vRenewalDate, CDBField.FieldWhereOperators.fwoBetweenTo)
          If pSkipProcessing = True Then
            vStatus = "C"
            If CancellationReason.Length > 0 Then vStatus = "'" & vStatus & "','D'"
            .Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, vStatus, CDBField.FieldWhereOperators.fwoInOrEqual Or CDBField.FieldWhereOperators.fwoOpenBracket)
            .Add("amount_outstanding", CDBField.FieldTypes.cftNumeric, "0", CDBField.FieldWhereOperators.fwoGreaterThan Or CDBField.FieldWhereOperators.fwoCloseBracket)
          ElseIf pAllDuePayments = True Then
            If Me.PlanType = CDBEnvironment.ppType.pptLoan Then
              .Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, "'D','P','U','V','F'", CDBField.FieldWhereOperators.fwoIn Or CDBField.FieldWhereOperators.fwoOpenBracket)
            Else
              .Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, "'D','P','U','V'", CDBField.FieldWhereOperators.fwoIn Or CDBField.FieldWhereOperators.fwoOpenBracket)
            End If
            .Add("schedule_creation_reason", CDBField.FieldTypes.cftCharacter, vOPS.SetCreationReason(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance), CDBField.FieldWhereOperators.fwoEqual Or CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket)
          End If
        End With

        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vOPS.GetRecordSetFields(OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll), "order_payment_schedule ops", vFields, "due_date")
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()

        While vRS.Fetch() = True
          vOPS = New OrderPaymentSchedule
          vOPS.InitFromRecordSet(mvEnv, vRS, OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll)
          mvScheduledPayments.Add(vOPS, CStr(vOPS.ScheduledPaymentNumber))
        End While
        vRS.CloseRecordSet()
      End If
    End Sub

    '# Start
    '#
    '# --------------------------------------------------------------------------
    '# RegenerateScheduledPayments
    '#
    '# This will delete and re-create all order_payment_schedule records
    '# from the specified date(or current date if null) to the renewal date
    '# --------------------------------------------------------------------------
    '# Parameters
    '# --------------------------------------------------------------------------
    '# pCreationReason
    '# pScheduleStartDate
    '# pSaveSchedule (optional)
    '# pCreationReason As OrderPaymentScheduleCreationReasons
    '# pScheduleStartDate As String
    '# Optional pSaveSchedule As Boolean = True
    '# Optional pShowError As Boolean = True
    '# --------------------------------------------------------------------------
    '#
    Public Sub RegenerateScheduledPayments(ByVal pCreationReason As OrderPaymentSchedule.OrderPaymentScheduleCreationReasons, ByVal pScheduleStartDate As String, Optional ByVal pSaveSchedule As Boolean = True, Optional ByVal pShowError As Boolean = True, Optional ByVal pAmendedBy As String = "", Optional ByVal pAudit As Boolean = False)
      Dim vOPS As OrderPaymentSchedule = Nothing
      Dim vProvSchPayments As Collection 'Provisional ops records awaiting processing
      Dim vPPD As New PaymentPlanDetail(Me)
      Dim vFields As New CDBFields
      Dim vJnlOperation As JournalOperations
      Dim vTempOPS As OrderPaymentSchedule 'Temporary ops used whilst checking ops records
      Dim vTempSchPayments As Collection 'Temporary holding place whilst checking ops records
      Dim vPayFrequency As PaymentFrequency
      Dim vOldMemberType As MembershipType = Nothing 'Used by CMT and is the previous Membership Type
      Dim vDate As String
      Dim vAmountDue As Double 'Amount Due for each record
      Dim vAmountOS As Double 'Amount Outstanding for each record
      Dim vAutoStartDate As String = "" 'Start date of DD or CCCA
      Dim vClaimDate As String = "" 'The claim date for the DD or CCCA
      Dim vDeleteFromDate As String = "" 'The date that OPS records due from will be deleted
      Dim vDeleteToDate As String = "" 'The date that OPS records due up until will be deleted
      Dim vExpBalance As Double 'Expected Balance for each record
      Dim vFreqAmount As Double 'Frequency Amount used in Next Payment Due calculations
      Dim vInAdvanceAmount As Double 'In-advance amount to be processed by R&R
      Dim vIndex As Integer
      Dim vNextPayDue As String 'Next payment due date for each schedule
      Dim vOldRenewalDate As String = "" 'Renewal Date to use for the CMT as Term may have changed
      Dim vRenewalDate As String 'Renewal Date to create schedules to
      Dim vStartDate As String 'Start date of current renewal period
      Dim vBalance As Double 'Current Balance less any existing schedules
      Dim vCreate As Boolean 'Create the current payment schedule record
      Dim vPaymentAmnt As Double 'The amount of each scheduled payment
      Dim vFirstPaymentAmnt As Double 'The first payment amount for DD payments if FirstAmount set
      Dim vNextPaymentAmnt As Double 'Amout of next payment if DD/CCCA payment skipped
      Dim vNoPayments As Integer 'Number of schedules to be created
      Dim vOldRenPending As Boolean 'For PP Maintenance, the original RenewalPending setting
      Dim vProvOPSFound As Boolean 'Shows whether provisional ops records have been found
      Dim vSOCreateProvOPS As Boolean = True  'Create Provisional records if Standing Order and new renewal date >  due date 
      Dim vReCalcFrequency As Boolean 'Flag to show whether PPMaint should recalculate the frequency amount for ops purposes
      Dim vRRCreateProvOPS As Boolean 'R&R to create provisional OPS when Balance > 0 and RenewalAmount = 0
      Dim vSelectAllOPS As Boolean 'Select all outstanding ops records?, Or just the current term ops records?
      Dim vSkipAmount As Double 'The amount that will be skipped by using the vFirstPaymentAmount
      Dim vSumAmountDue As Double 'Sum of any existing schedule lines
      Dim vUseEffectiveDate As Boolean 'Deletion of OPS data has used the PPD EffectiveDate
      Dim vImportCancelPP As Boolean 'Data Import of a cancelled Payment Plan
      Dim vAutoPayConfig As String = "" 'Reset npd to start date config
      Dim vNPDDateReset As Boolean 'For PPMaint, shows if npd has been reset to DD/CCA/SO start date
      Dim vTrans As Boolean
      Dim vUpdateOPS As Boolean
      Dim vAdvanceRenewalDate As Boolean 'Indicates whether this is being called from Advance Renewal Date
      Dim vOPSToDelete As Boolean 'Data Import 'Test' mode - shows that some OPS would have been deleted if it was not a test
      Dim vOverrideRD As String = "" 'Used by CMT to over-ride the RenewalDate used to select the OPS
      Dim vBalanceDiff As Double 'If a PPDLine has had the Balance pro-rated, this holds the difference in price between the PP Balance & PP RenewalAmount
      Dim vPrevAPMStartDate As String 'The StartDate of any previous Auto Payment Method
      Dim vSkipProcessing As Boolean 'We are processing a Skipped payment
      Dim vNextRenewalDateUsed As Boolean = False  'Set if vRenewalDate is setted to next

      '# --------------------------------------------------------------------------
      '# INITIALISATION SECTION
      '# --------------------------------------------------------------------------
      '#
      '# If no date is passed in pScheduleStartDate then set the new schedule records to start from Todays Date
      'DO NOT CALL THIS FOR LOANS
      If LoanStatus = ppYesNoCancel.ppYes Then Exit Sub

      If Not (IsDate(pScheduleStartDate)) Then pScheduleStartDate = TodaysDate()
      mvScheduledPayments = Nothing
      If mvPaymentPlanChange Is Nothing And pCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Then
        'BR19786 Do not look for Payment Plan Changes when making a Payment. The Paymnet does not alter the Payment Plan Value
        mvPaymentPlanChange = New PaymentPlanChange(mvEnv, Me, DoubleValue(mvClassFields.Item(PaymentPlanFields.ofBalance).SetValue))
      End If
      '#
      '# Look at the given Creation Reson to determine the type of journaling to do (insert or update)
      Select Case pCreationReason
        Case OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan
          '# If the Creation Reason is 'New Payment Plan'
          vJnlOperation = JournalOperations.jnlInsert
          If Len(CancellationReason) > 0 Then
            '# If the PP has cancellation reason and it is New and just been created then assume Data Import is importing a cancelled Payment Plan
            If mvExisting = False And mvCreated = True Then vImportCancelPP = True
          End If
        Case OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInitialDataSetup, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrBatchPosting
          vJnlOperation = JournalOperations.jnlInsert
        Case OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrRenewalsReminders
          vJnlOperation = JournalOperations.jnlInsert
          mvProcessRenewal = True
        Case OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrAdvanceRenewalDate
          'Check if this is being called from Advance Renewal Date, and if so reset the Creation Reason to Payment Plan Maintenance and then set a local Boolean variable
          'This is done because Advance Renewal Date should operate just like Payment Plan Maintenance, but additionally it should cause the Due Date of a provisional OPS
          'to be updated when:  Renewal Pending = N, Balance = 0, NPD has been changed & Renewal Date has been changed.
          vJnlOperation = JournalOperations.jnlUpdate
          pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance
          vAdvanceRenewalDate = True
        Case OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrSkippedPayment
          'Check if this is being called from Batch Posting a skipped payment, and if so reset the Creation Reason to InAdvance and then set a local Boolean variable
          'This is done because the Skip processing needs to create new InAdvance OPS, but needs to take account of any unpaid OPS dated before the RenewalDate
          vJnlOperation = JournalOperations.jnlUpdate
          pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance
          vSkipProcessing = True
        Case Else
          vJnlOperation = JournalOperations.jnlUpdate
      End Select
      '#
      '# If the Payment Plan is a DD,SO,CCCA
      '# Then get the Start Date
      '# and the name of the config which checks if the Next Payment Due is before the Start Date
      Dim vAutoPayMethod As PaymentPlan.ppAutoPayMethods
      If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        vAutoStartDate = DirectDebit.StartDate
        vAutoPayConfig = "fp_dd_set_next_payment_due"
        vAutoPayMethod = ppAutoPayMethods.ppAPMDD
      ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        vAutoStartDate = CreditCardAuthority.StartDate
        vAutoPayConfig = "fp_cc_set_next_payment_due"
        vAutoPayMethod = ppAutoPayMethods.ppAPMCCCA
      ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        vAutoStartDate = StandingOrder.StartDate
        vAutoPayConfig = "fp_so_set_next_payment_due"
        vAutoPayMethod = ppAutoPayMethods.ppAPMSO
      End If
      '#
      '# Retain the current value of the renewal pending flag
      vOldRenPending = (mvClassFields(PaymentPlanFields.ofRenewalPending).SetValue = "Y")
      '#
      '# --------------------------------------------------------------------------
      '# ESTABLISH A LOCAL SET OF DATES TO BE USED
      '# vStartDate, vRenewalDate, vNextPayDue
      '# --------------------------------------------------------------------------
      '#
      '# If we are processing Renewals and Reminders then
      If mvProcessRenewal = True Then
        '# Set up the dates and get the PPInAdvance amount
        '# vStartDate = PPRenewalDate, vNextPayDue = PPRenewalDate, vRenewalDate = Roll Forward PPRenewalDate
        'Renewals & Reminders (may come in here a second time to create a new provisional line)
        'Always want the next renewal period
        vNextPayDue = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
        vStartDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
        vRenewalDate = CalculateRenewalDate(vStartDate, True)
        vInAdvanceAmount = 0
        '# If the Balance was zero and the PPNextPayDue <> PPRenewalDate and it is an Automated Payment Method then
        If Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) = 0 And (CDate(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value) <> CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)) Then
          '# Set vNextPayDue to the PPNextPaymentDue
          If mvAutoPayment Then vNextPayDue = mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value
        End If
        '# Else we are not processing Renewals and Reminders
      Else
        '# Set vNextPayDue = PPNextPayDue
        vNextPayDue = mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value

        'A problem with the setting of the NPD date for DD/CCA with incentive caused NPD date to be rolled forward too far in some circumstances
        'Here we need to try and handle this other wise OPS is either not created or is created incorrectly (BR12909)
        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And mvAutoPaymentCreated = True And mvClassFields.Item(PaymentPlanFields.ofNextPaymentDue).ValueChanged = False Then
          If (mvClassFields.Item(PaymentPlanFields.ofOrderTerm).ValueChanged = False) And (Term < 1 And System.Math.Abs(Term) > 12) Then
            If (mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlApplyIncentiveFreePeriod) = "A" And ResetOrderTerm <> ppResetOrderTerm.pprotNo) Then
              vPrevAPMStartDate = ""
              If RenewalPending = True Then
                vNextPayDue = mvClassFields.Item(PaymentPlanFields.ofRenewalDate).Value
              ElseIf DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes And mvClassFields.Item(PaymentPlanFields.ofDirectDebit).SetValue = "C" Then
                vPrevAPMStartDate = mvEnv.Connection.GetValue("SELECT MIN(start_date) FROM direct_debits WHERE order_number = " & PlanNumber)
              ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes And mvClassFields.Item(PaymentPlanFields.ofCreditCard).SetValue = "C" Then
                vPrevAPMStartDate = mvEnv.Connection.GetValue("SELECT MIN(start_date) FROM credit_card_authorities WHERE order_number = " & PlanNumber)
              End If
              If Len(vPrevAPMStartDate) > 0 Then
                If mvEnv.GetPaymentPlanAutoPayDate(DateValue(StartDate), vAutoPayMethod, Me.AutoPayBankAccount) = DateValue(vPrevAPMStartDate) Then
                  'NPD date may have been incorrectly rolled forward too far making the NPD date meaningless so try rolling it back
                  While CDate(vNextPayDue) >= CDate(pScheduleStartDate)
                    If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                      vNextPayDue = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -PaymentFrequencyInterval, CDate(vNextPayDue)))
                    Else
                      vNextPayDue = AddMonths((mvClassFields.Item(PaymentPlanFields.ofRenewalDate).Value), vNextPayDue, -PaymentFrequencyInterval)
                    End If
                  End While
                End If
              End If
            End If
          End If
        End If

        'Handle fixed-renewal Memberships where sometimes the NPD date gets set too far forward
        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Then
          If PlanType = CDBEnvironment.ppType.pptMember And FixedRenewalCycle = True And PreviousRenewalCycle = True And (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 And RenewalPending = True And (mvAutoPaymentCreated = True Or mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged = True) Then
            'As RenewalPending = True, RenewalDate & NextPaymentDue should be the same
            If (CDate(NextPaymentDue) > CDate(RenewalDate)) And Val(LastPayment) > 0 Then
              'Sometimes for these types of Membership the NPD date gets set to after the RenewalDate once the full payment has been made (maybe client has used SQL?) (BR12324)
              If (Balance = RenewalAmount) Or (FixTwoPlaces(Balance + Val(LastPayment)) = RenewalAmount) Then
                vNextPayDue = RenewalDate
              End If
            End If
          End If
        End If

        '# If the balance is greater than zero
        If mvClassFields(PaymentPlanFields.ofBalance).DoubleValue > 0 Then
          '# If Pay Plan Maintenance has increased the balance from zero to greater than zero
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) = 0 And mvClassFields(PaymentPlanFields.ofBalance).DoubleValue > 0) Then
            'Add this new amount to the provisional line for the new renewal period
            '# If the PPNextPayDue is earlier than the PPRenewalDate then
            If (CDate(NextPaymentDue) < CDate(RenewalDate)) Then
              'Original Balance was written-off w/o changing NPD date
              '# Set vRenewalDate = PPRenewalDate
              vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
              '# If Renewal Pending then Roll Forward vRenewalDate
              If RenewalPending Then vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
              '# vStartDate = Roll Back vRenewaDate
              vStartDate = CalculateRenewalDate(vRenewalDate, False)
              '# vNextPayDue = Today
              vNextPayDue = TodaysDate()
              '# Else
            Else
              '# Set vRenewalDate = PPRenewalDate, vStartDate = Roll Forward PPRenewalDate, vNextPayDue = Today
              'Pay Plan had been fully paid
              vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
              If CDate(vRenewalDate) < CDate(TodaysDate()) Then vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
              vStartDate = CalculateRenewalDate(vRenewalDate, False)
              vNextPayDue = TodaysDate()
            End If
            '# Else
          Else
            '# Set vStartDate = PPOrderDate, vRenewalDate = PPRenewalDate
            'Use the current renewal period
            vStartDate = mvClassFields(PaymentPlanFields.ofOrderDate).Value
            vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
            If (ContinuousRenewals = True And pCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrBatchPosting) Then
              If CDate(vStartDate) = CDate(CalculateRenewalDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value, False)) Then
                'Renewal date already rolled forward, so roll it back first so that due dates are correct for DD/CCA
                vRenewalDate = CalculateRenewalDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value, False)
              End If
            End If
            '# If PP Maint or CMT and RenewalPending and PPOrderDate <> PPRenewalDate then
            If (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType) And mvClassFields(PaymentPlanFields.ofRenewalPending).Bool = True And (CDate(vStartDate) <> CDate(vRenewalDate)) Then
              'Pay Plan Maint / CMT has changed Pay Plan after renewals but before any payments received for the next term
              'Will need to calculate the number of payments required from next payment due until the future renewal date
              'The user can always amend the revised amount to zero if this is not what they wanted
              '# vRenewalDate = Roll Forward PPRenewalData
              vRenewalDate = CalculateRenewalDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value, True)
              '# Flag to select all OPS records not just current term
              vSelectAllOPS = True
            End If
          End If
          '#
          '#
          '# If this is a DD with the Fixed Claim Date config set and the PPClaimDay is greater than zero then
          If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes And mvFixedDDClaimDate = True And Len(mvClassFields(PaymentPlanFields.ofClaimDay).Value) > 0 Then
            'Fixed claim dates could result in npd & renewal date being rolled forward to the first claim date
            '# if vStartDate <> vRenewalDate and vNextPayDue = vRenewalDate then
            If (CDate(vStartDate) <> CDate(vRenewalDate)) And (CDate(vNextPayDue) = CDate(vRenewalDate)) Then
              '# Find vClaimDate from the vAutoStartDate - SDT surely the vAutoStartDate could be years ago!!!
              vClaimDate = FindNextClaimDate(vAutoStartDate)
              '# If we found a vClaimDate - SDT How could we not!!!
              If Len(vClaimDate) > 0 Then
                '# If the vClaimDate = vNextPayDue then
                If CDate(vClaimDate) = CDate(vNextPayDue) Then
                  '# Set vStartDate = vNextPayDue
                  'Next payment due date has been rolled forward to the next claim date
                  'So set the start date to be the next payment due
                  vStartDate = vNextPayDue
                End If
              End If
            End If
          End If
          '#
          '#
          '# If vStartDate and vRenewalDate are the same then
          vNextRenewalDateUsed = False
          If CDate(vStartDate) = CDate(vRenewalDate) Then
            'Start & Renewal dates are the same, so find next renewal date
            '# Roll Forward vRenewalDate
            vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
            vNextRenewalDateUsed = True
            '# If vNextPayDue <> vStartDate and there is an Automated Payment method then
            If (CDate(vNextPayDue) <> CDate(vStartDate)) And mvAutoPayment = True Then
              '# If the difference between vStartDate and vNextPayDue is the same as the fp_auto_pay_delay config then
              'Do not want to include any difference caused by the fp_auto_pay_delay config

              If mvEnv.GetPaymentPlanAutoPayDate(DateValue(vStartDate), vAutoPayMethod, Me.AutoPayBankAccount) = DateValue(vNextPayDue) Then
                '# Set vNextPayDue = vStartDate
                vNextPayDue = vStartDate
                '# Else if the PP type is Membership and FixedRenewalCycle is True and PreviousRenewalCycle is True and the ProportionalBalanceSetting is either Full Payment or New then
              ElseIf PlanType = CDBEnvironment.ppType.pptMember And (FixedRenewalCycle = True And PreviousRenewalCycle = True) And (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 Then
                '# If the difference between the Member Joined date and vNextPayDue
                'This is a pro-rated membership that uses a previous and fixed renewal cycle is the same as the fp_auto_pay_delay config then
                If mvEnv.GetPaymentPlanAutoPayDate(DateValue(Member.Joined), vAutoPayMethod, Me.AutoPayBankAccount) = DateValue(vNextPayDue) Then
                  '# Set vNextPayDue = Member Joined date
                  vNextPayDue = Member.Joined
                End If
                '# Else if the difference between Todays Date and vNextPayDue is the same as the fp_auto_pay_delay config then
              ElseIf mvEnv.GetPaymentPlanAutoPayDate(Today, vAutoPayMethod, Me.AutoPayBankAccount) = DateValue(vNextPayDue) Then
                '# Set vNextPayDue = vStartDate
                'Payment Plan has auto pay method created before any payments made
                vNextPayDue = vStartDate
                '# Else if we are creating a new payment plan
              ElseIf (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance) Then
                '# If we have an Automated Payment Start Date then
                'If Auto-Pay-Delay is not set or user changed the auto pay start date
                If IsDate(vAutoStartDate) Then
                  '# If the vNextPayDue is after vStartDate and vNextPayDue = the Automated Payment Start Date then
                  If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan And ((CDate(vNextPayDue) > CDate(vStartDate)) And (CDate(vNextPayDue) = CDate(vAutoStartDate))) Then
                    '# Set vNextPayDue = vStartDate
                    'Created a new Pay Plan with the NPD set to DD/CCA Start Date, which is after Pay Plan Start Date
                    vNextPayDue = vStartDate
                  ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (CDate(vNextPayDue) > CDate(vStartDate)) Then
                    'Payment Plan Maintenance - in some circumstances (may be only if there is an incentive and free period ia after the payments)
                    'vNextPayDue is beyond the StartDate and does not get re-set thus causing OPS to be created incorrecly especially for an annual payer
                    vNextPayDue = vStartDate
                  End If
                End If
              End If
            End If
            '# Else vStartDate and vRenewalDate are different
          Else
            'Start and Renewal dates are different, so find start date of current renewal period
            'But not for specific Pay Plan Maintenance changes or Initial Data Set-up
            '# If PP Maint or Initial Data Setup and Renewal Pending and PPOrderDate <> PPRenewalDate then
            If (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInitialDataSetup) And mvClassFields(PaymentPlanFields.ofRenewalPending).Bool = True And (CDate(mvClassFields(PaymentPlanFields.ofOrderDate).Value) <> CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)) Then
              '# vStartDate = PPNextPayDue
              'Payment from next payment due to future renewal date
              vStartDate = mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value
              '# If Initial Data setup the set vRenewalDate
              'If setting up inital data, take account of Pay Plans that have just been renewed.
              If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInitialDataSetup Then vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
              '# Else
            Else
              '# Set vStartDate = Roll Back vRenewalDate
              vStartDate = CalculateRenewalDate(vRenewalDate, False)
            End If
          End If
          '#
          '# If Payment Plan Conversion or Maintenance and vStartDate <> vRenewalDate and vNextPayDue = vRenewalDate
          '# and the Balance > 0 then
          'If Payment Plan Conversion / Maintenance has changed the payment plan
          'before all the payments have been made, then we may need to adjust the next payment due date
          If (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType) And (CDate(vStartDate) <> CDate(vRenewalDate)) And (CDate(vNextPayDue) = CDate(vRenewalDate)) And Balance > 0 Then
            If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And mvAutoPaymentCreated And (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) And (Term < 0 And Val(mvClassFields.Item(PaymentPlanFields.ofOrderTerm).SetValue) > 0) Then
              '# Payment Plan Maintenance has added a DD/CCCA with an Initial Period Incentive
              '# but the RenewalDate is not rolled forward if RenewalPending = False so reset vRenewalDate
              If RenewalPending = False Then
                vRenewalDate = mvClassFields.Item(PaymentPlanFields.ofRenewalDate).Value
                'Deduct original Term in years from vRenewalDate
                vStartDate = CDate(vRenewalDate).AddYears(-IntegerValue(mvClassFields.Item(PaymentPlanFields.ofOrderTerm).SetValue)).ToString(CAREDateFormat)
              End If
            End If
            '# If the Payment Frequency has changed
            'Next payment due has been rolled forward to the renewal date
            'We still expect some payments so roll next pay due date back (for ops calculations only)
            If mvClassFields(PaymentPlanFields.ofPaymentFrequency).ValueChanged Then
              '# Get the original Payment Frequency
              'Payment Frequency has changed, so use original value
              vPayFrequency = mvEnv.GetPaymentFrequency((mvClassFields(PaymentPlanFields.ofPaymentFrequency).SetValue))
              '# If the Term is weekly or the Payment Frequency period is in days then
              If TermUnits = OrderTermUnits.otuWeekly Or vPayFrequency.Period = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                '# Adjust vNextPayDue by subtracting the Payment Frequency Interval in days
                vNextPayDue = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -vPayFrequency.Interval, CDate(vNextPayDue)))
              Else
                '# Adjust vNextPayDue by subtracting the Payment Frequency Interval in months
                vNextPayDue = AddMonths(BaseDate, vNextPayDue, -vPayFrequency.Interval)
              End If
              '# Else Payment Frequency has not changed
            Else
              '# If the Term is weekly or the Payment Frequency period is in days then
              If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                '# Adjust vNextPayDue by subtracting the Payment Frequency Interval in days
                vNextPayDue = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -PaymentFrequencyInterval, CDate(vNextPayDue)))
              Else
                '# Adjust vNextPayDue by subtracting the Payment Frequency Interval in months
                vNextPayDue = AddMonths(BaseDate, vNextPayDue, -PaymentFrequencyInterval)
              End If
            End If
          End If
          '#
          '# If PP Maint and we added an Automated Payment method and PPNextPayDue was updated
          'Adding a DD/CCA/SO to existing Pay Plan may have set the npd date to be the DD/CCA/SO Start Date
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (mvAutoPaymentCreated And mvNPDDateUpdated) And (Len(vAutoPayConfig) > 0 And Len(vAutoStartDate) > 0) Then
            '# If the Auto Payment Config is set then
            If mvEnv.GetConfigOption(vAutoPayConfig) Then
              '# If vNextPayDue = vAutoStartDate then
              'Set vNextPayDue to be the original npd date (so that the delete will be correct)
              If CDate(vNextPayDue) = CDate(vAutoStartDate) _
                Or
                (Me.NextPaymentDue = vAutoStartDate And mvNPDDateUpdated) _
                Then
                '# Set vNextPayDue to the original PPNextPayDue date
                vNPDDateReset = True
                vNextPayDue = mvClassFields(PaymentPlanFields.ofNextPaymentDue).SetValue
                '# If the ScheduleStartDate is after vNextPayDue then set it back to vNextPayDue
                If CDate(pScheduleStartDate) > CDate(vNextPayDue) Then pScheduleStartDate = vNextPayDue
              End If
            End If
          End If
          '#
          '# If Batch Posting and the original balance was zero and there is an automated payment method and it's start date is set and the AutoPayConfig is set  - SDT When would the last two not be!!!
          'Batch Posting has renewed Pay Plan in which the provisional ops now has an earlier date
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrBatchPosting And (Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) = 0 And mvAutoPayment = True) And (Len(vAutoStartDate) > 0 And Len(vAutoPayConfig) > 0) Then
            '# If the PPNextPaymentDue = vAutoStartDate and PPNextPaymentDue <> PPRenewalDate then
            If (CDate(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value) = CDate(vAutoStartDate)) And (CDate(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value) <> CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)) Then
              '# If the Auto Payment Config is set then
              If mvEnv.GetConfigOption(vAutoPayConfig) Then
                '# If the PPOrderDate has changed then reset it to the PPNextPaymentDue
                If CDate(mvClassFields(PaymentPlanFields.ofOrderDate).Value) <> CDate(mvClassFields(PaymentPlanFields.ofOrderDate).SetValue) Then mvClassFields(PaymentPlanFields.ofOrderDate).Value = mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value
                '# Set vNextPayDue to PPNextPayDue
                vNextPayDue = mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value
                '# Set the ScheduleStartDate to PPNextPayDue
                pScheduleStartDate = mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value
                '# Flag to select all OPS records not just current term
                vSelectAllOPS = True
              End If
            End If
          End If

          'Payment Plan amended after Renewals has been run but before the RenewalDate
          'No DD has been added and the next payment is due in the past
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance AndAlso IsUpdateAfterRenewal(pCreationReason, CDate(pScheduleStartDate), CDate(vNextPayDue)) Then
            'Assume the change is to next year's Balance so set the change to take place on the RenewalDate
            If (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsExistingPF) = ProportionalBalanceConfigSettings.pbcsExistingPF _
            AndAlso DetailsAmendedFinancial = True AndAlso Balance > RenewalAmount Then
              'Leave as is
            Else
              pScheduleStartDate = RenewalDate
              vNextPayDue = RenewalDate
            End If
          End If

          '#
          '# If PP Maint has added a new DD/CCCA,
          '# or we have changed Payment Frequency and there is already a DD/CCCA
          '# or we have changed the Frequency Amount
          '# and there are some missed payments (vNextPayDue < Today And PPRenewalDate > Today And Balance > 0) and not Balance increased from zero ??
          'then we need to claim any payments due before Today that have not been paid
          '(Note: This is also in CheckOPSForRegenerate)
          If mvWriteOffMissedPayments = False Then
            If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance _
            And (((DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) _
            And ((mvAutoPaymentCreated = True) Or (mvClassFields(PaymentPlanFields.ofPaymentFrequency).ValueChanged = True))) _
            Or (CDate(vNextPayDue) < CDate(TodaysDate()) And CDate(TodaysDate()) < CDate(RenewalDate) And Balance > 0 _
            And mvClassFields(PaymentPlanFields.ofFrequencyAmount).ValueChanged)) _
            And Not (Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) = 0 And mvClassFields(PaymentPlanFields.ofBalance).DoubleValue > 0) Then
              '# If the arrears claim method is NEXT_CLAIM or EVEN_SPREAD then
              Select Case mvEnv.GetConfig("fp_arrears_claim_method_create")
                Case "NEXT_CLAIM", "EVEN_SPREAD"
                  '# If the ScheduleStartDate is after vNextPayDue then set it back to vNextPayDue
                  'Want to include any payments due before today but not paid
                  If CDate(pScheduleStartDate) > CDate(vNextPayDue) Then
                    Dim vUpdateSchDate As Boolean = True
                    If mvAutoPaymentCreated = False And mvClassFields(PaymentPlanFields.ofPaymentFrequency).ValueChanged = False Then
                      'If not added auto pay method or changed frequency, check for the earliest OPS being after the current NPD date
                      '(could happen if DD payment reversed & amount re-claimed with another OPS)
                      vTempOPS = GetEarliestDueOPS()
                      If vTempOPS.Existing Then
                        If CDate(vTempOPS.DueDate) > CDate(vNextPayDue) Then vUpdateSchDate = False
                      End If
                    End If
                    If vUpdateSchDate Then pScheduleStartDate = vNextPayDue
                  End If
              End Select
            ElseIf vNextRenewalDateUsed Then
              'Use local vRenewalDate (not RenewalDate property value) to determine if pScheduleStartDate neeeds changing.   
              If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Then
                If (CDate(vNextPayDue) < CDate(TodaysDate()) _
                    And CDate(TodaysDate()) < CDate(vRenewalDate) _
                    And Balance > 0 _
                    And mvClassFields(PaymentPlanFields.ofFrequencyAmount).ValueChanged
                    ) _
                  And Not _
                  (Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) = 0 _
                   And mvClassFields(PaymentPlanFields.ofBalance).DoubleValue > 0
                   ) Then
                  '# If the arrears claim method is NEXT_CLAIM or EVEN_SPREAD then
                  Select Case mvEnv.GetConfig("fp_arrears_claim_method_create")
                    Case "NEXT_CLAIM", "EVEN_SPREAD"
                      '# If the ScheduleStartDate is after vNextPayDue then set it back to vNextPayDue
                      'Want to include any payments due before today but not paid
                      If CDate(pScheduleStartDate) > CDate(vNextPayDue) Then
                        pScheduleStartDate = vNextPayDue
                      End If
                  End Select
                End If
              End If
            End If
          End If

          'If Payment Plan Maintenance has changed the Balance on a Payment Plan paid by Standing Order
          'After R&R is run but before any payments received
          'Need to include all payments and not just those due from today
          'As the Balance will be for all payments
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And mvClassFields(PaymentPlanFields.ofBalance).ValueChanged = True And StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes And RenewalPending = True And (CDate(mvClassFields(PaymentPlanFields.ofOrderDate).Value) <> CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)) Then
            If CDate(pScheduleStartDate) > CDate(vNextPayDue) Then pScheduleStartDate = vNextPayDue
          End If
          '#
          '# If PP Maint and Schedule Start Date is after the Renewal Date then
          'Payment Plan Maintenance has maintained the Payment Plan after the renewal period has ended
          'so we need to use the current renewal period instead of the current date
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (CDate(pScheduleStartDate) > CDate(vRenewalDate)) Then
            '# If Renewal is pending and vStartDate <> vRenewal Rolled Back then
            If RenewalPending = True And (CDate(vStartDate) <> CDate(CalculateRenewalDate(vRenewalDate, False))) Then
              '# vStartDate = vRenewalDate rolled back
              'Do not want to include any payments from a previous renewal period
              vStartDate = CalculateRenewalDate(vRenewalDate, False)
            End If
            '# If vNextPayDue >= vStartDate then
            'Add payment for that renewal period .....
            If CDate(vNextPayDue) >= CDate(vStartDate) Then
              '# Schedule Start Date = vNextPayDue
              'Use NextPaymentDue
              pScheduleStartDate = vNextPayDue
              '# Else
            Else
              '# Schedule Start Date = vStartDate
              'Use start date of current renewal period
              pScheduleStartDate = vStartDate
            End If
            '# if the Payment Frequency Frequency = 1 then Flag to ReCalc the Payment Frequency
            If PaymentFrequencyFrequency > 1 And StandingOrderStatus <> PaymentPlan.ppYesNoCancel.ppYes Then vReCalcFrequency = True
          End If
          '#
          '# Remember vRenewalDate in vOldRenewalDate
          vOldRenewalDate = vRenewalDate
          '#
          '# If CMT
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Then
            '# if vNextPayDue > vRenewalDate then vNextPayDue = Schedule Start Date
            'CMT will reset the Term, so need to ensure that old Renewal Date is used for deleting the ops
            If CDate(vNextPayDue) > CDate(vRenewalDate) Then vNextPayDue = pScheduleStartDate
            '# vRenewalDate = CalculatePreviousOPSRenewalDate based on PPRenewalDate
            vRenewalDate = CalculatePreviousOPSRenewalDate(RenewalDate, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType)
            '# If the Membership Types Payment Term is Life then
            If MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfLifeTerm Then
              '# If Renewal Pending then
              'Trader has already advanced the renewal date 99 years
              'So set vRenewalDate to be 12 months after the original renewal date
              If RenewalPending Then
                '# vRenewalDate = CalculatePreviousOPSRenewalDate based on original PPRenewalDate
                vRenewalDate = CalculatePreviousOPSRenewalDate(mvClassFields(PaymentPlanFields.ofRenewalDate).SetValue, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType)
              Else
                '# vRenewalDate = PPRenewalDate
                vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).SetValue
              End If
              '# Remember vRenewalDate in vOldRenewalDate
              vOldRenewalDate = vRenewalDate
            End If
            '# If PP Maint and the Payment Frequency has changed
          ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And mvClassFields(PaymentPlanFields.ofPaymentFrequency).ValueChanged Then
            '# vRenewalDate = CalculatePreviousOPSRenewalDate based on original PPRenewalDate
            'Payment Plan Maintenance has changed the PaymentFrequencyCode, so use original RenewalDate for deleting ops
            'Also select all the OPS records as the new dates may mean that some o/s payments would not be selected
            vRenewalDate = CalculatePreviousOPSRenewalDate(mvClassFields(PaymentPlanFields.ofRenewalDate).SetValue, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance)
            '# Flag to select all OPS records not just current term
            vSelectAllOPS = True
          End If

          '# Else the balance was zero or negative
        Else
          '# If PP Maint and original Balance was > 0 and current balance = zero then
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) > 0 And mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = 0) Then
            '# vRenewalDate = PPRenewalDate
            '# vStartDate = Roll Back vRenewal Date
            '# vNextPayDue  = vStartDate
            'Payment Plan Maintenance has decreased the balance from above 0 to 0 so renewal date has been rolled forward
            'So we need to create the provisional line as though Batch Posting has cleared the balance
            vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
            vStartDate = CalculateRenewalDate(vRenewalDate, False)
            vNextPayDue = vStartDate
            '# Else
          Else
            '# vStartDate = PPRenewalDate
            '# vRenewalDate = Roll Forward vStartDate
            'Use next renewal period
            vStartDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
            vRenewalDate = CalculateRenewalDate(vStartDate, True)
          End If
          '# Remember vRenewalDate in vOldRenewalDate
          vOldRenewalDate = vRenewalDate

          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Then
            'CMT will reset the Term, so need to ensure that old Renewal Date is used for deleting the OPS
            If mvClassFields(PaymentPlanFields.ofOrderTerm).ValueChanged And (Term > 0 And IntegerValue(mvClassFields.Item(PaymentPlanFields.ofOrderTerm).SetValue) < 0) Then
              'Term has changed to remove incentive
              'So need to force the selection of OPS to use the old date in order to find any provisional OPS on that date
              vRenewalDate = CalculatePreviousOPSRenewalDate(RenewalDate, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType)
              If CDate(vRenewalDate) > CDate(RenewalDate) Then vOverrideRD = vRenewalDate
            End If
          End If
        End If
        '#
        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Then
          '# If PP Maint then Flag to select all OPS records not just current term
          vSelectAllOPS = True
          If PlanType = CDBEnvironment.ppType.pptMember Then
            If mvClassFields(PaymentPlanFields.ofOrderType).SetValue <> "M" Then
              'We have converted the Payment Plan to a Membership, so we effectively need to ignore any previous dates we might have set and set them based purely on the RenewalDate
              vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
              If RenewalPending = True Then vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
              vStartDate = CalculateRenewalDate(vRenewalDate, False)
              If (CDate(pScheduleStartDate) < CDate(vStartDate)) Or (CDate(pScheduleStartDate) > CDate(vRenewalDate)) Then
                'Renewal is in the future OR Renewal is in the past
                'So create the OPS from vStartDate
                pScheduleStartDate = vStartDate
              Else
                'In the middle of the renewal period so create the OPS from pScheduleStartDate
              End If
              'Always the next payment to be from pScheduleStartdDte
              vNextPayDue = pScheduleStartDate
              vOldRenewalDate = vRenewalDate 'Just so the vRenewaldDate does not get reset
            End If
          ElseIf (DetailsAmended = True Or DetailsAmendedFinancial = True) And Balance = 0 And PaymentFrequencyFrequency = 1 Then
            'Regular PP paid by by DD or CCA - need to ensure that we use the RenewalDate that is after the schedule creation date (could be before if there has been a reversal)
            vSelectAllOPS = False
            If CDate(RenewalDate) < CDate(pScheduleStartDate) Then
              vOldRenewalDate = vRenewalDate
              vRenewalDate = RenewalDate
              While CDate(vRenewalDate) < CDate(pScheduleStartDate)
                vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
              End While
              vOverrideRD = vRenewalDate
              vOldRenewalDate = vRenewalDate
            End If
          End If
        ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Then
          'Check for CMT from an Approval Membership
          '#If original MembershipType was an Approval Membership then select all OPS records and not just current Term
          vOldMemberType = mvEnv.MembershipType((mvClassFields(PaymentPlanFields.ofMembershipType).SetValue))
          If vOldMemberType.ApprovalMembership Then vSelectAllOPS = True
        End If
      End If

      '#
      '# DELETING EXISTING OPS RECORDS WHICH ARE DUE
      Dim vFreqChangedUseOPSDueOnly As Boolean = False
      DeleteOPSForRegenerate(pCreationReason, pScheduleStartDate, vRenewalDate, vExpBalance, vDeleteFromDate, vDeleteToDate, vOPSToDelete, vUseEffectiveDate, vTrans, vFreqChangedUseOPSDueOnly)

      '#
      '# If CMT or PP Maint then set vRenewalData back to the saved version (vOldRenewalDate)
      'If we just changed the RenewalDate for the deletion (CMT/Pay Plan Maint only) then reset
      If (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance) Then vRenewalDate = vOldRenewalDate

      If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Then
        If StartMonth > 0 Then
          'Any Provisional OPS created will be dated after the RenewalDate so need to ensure that they are re-selected correctly
          vOverrideRD = SetDateFromStartMonth(RenewalDate)
        ElseIf mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = 0 Then
          If CalculateBalanceForPaymentSchedule(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance, vRenewalDate) = 0 Then
            'PaymentPlan Balance is zero and next renewal will be zero so want to pick up any provisional OPS already created
            vOverrideRD = vRenewalDate
          End If
        End If
      End If

      'Recreate the schedule with any remaining records
      vProvSchPayments = New Collection
      If mvExisting = True And IsDate(mvClassFields(PaymentPlanFields.ofPaymentScheduleAmendedOn).Value) Then GetScheduledPayments(vSelectAllOPS, vOverrideRD, False, (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance))
      If mvScheduledPayments Is Nothing Then mvScheduledPayments = New Collection
      vTempSchPayments = New Collection

      'If there are still some schedule records then find the amounts still outstanding
      For Each vOPS In mvScheduledPayments
        If (vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Or vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsProvisional) Then
          'Provisional OPS including provisional OPS that have been paid/part-paid
          'Do not want to increment vSumAmountDue as this is not included in the PP Balance
          vProvSchPayments.Add(vOPS, CStr(vOPS.ScheduledPaymentNumber))
          vProvOPSFound = True
          If mvProcessRenewal = False And pCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Then
            'Renewals&Reminders and ChangeMembershipType will handle the InAdvance elsewhere
            vInAdvanceAmount = vInAdvanceAmount + (vOPS.AmountDue - vOPS.AmountOutstanding)
          ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType And mvClassFields.Item(PaymentPlanFields.ofInAdvance).ValueChanged = True Then
            If (mvClassFields.Item(PaymentPlanFields.ofInAdvance).DoubleValue > Val(mvClassFields.Item(PaymentPlanFields.ofInAdvance).SetValue)) AndAlso CMTProportionBalance <> CMTProportionBalanceTypes.cmtNone AndAlso Balance = 0 Then
              'CMT and InAdvance has increased (probably Smart Client only)
              vInAdvanceAmount = vInAdvanceAmount + (vOPS.AmountDue - vOPS.AmountOutstanding)
            End If
          End If
        ElseIf (vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue Or vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid Or vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsUnprocessedPayment) Then
          'Due/Part-Paid/Unprocessed(?) OPS          
          'Always increment vSumAmountDue
          If (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance And vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsUnprocessedPayment) Then
            'Do Nothing
          ElseIf (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance And vSkipProcessing = True) Then
            'Only increment vSumAmountDue if the payment was Due after the RenewalDate
            If CDate(vOPS.DueDate) >= CDate(RenewalDate) Then vSumAmountDue = vSumAmountDue + vOPS.AmountOutstanding
          ElseIf vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrFinancialAdjustments AndAlso vOPS.AmountOutstanding > 0 _
          AndAlso ((pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance AndAlso (DetailsAmended = True OrElse DetailsAmendedFinancial = True)) _
          OrElse (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType AndAlso CMTProportionBalance = CMTProportionBalanceTypes.cmtFrequencyAmounts)) Then
            Dim vIncrementAmount As Double = vOPS.AmountOutstanding
            If Balance = 0 AndAlso pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Then
              If PaymentFrequencyFrequency = 1 AndAlso PaymentFrequencyInterval = 1 Then vIncrementAmount = 0
            ElseIf Balance > 0 AndAlso DoubleValue(mvClassFields.Item(PaymentPlanFields.ofBalance).SetValue) > 0 AndAlso (DirectDebitStatus <> ppYesNoCancel.ppNo OrElse CreditCardStatus <> ppYesNoCancel.ppNo) Then
              If (vOPS.AmountDue > DoubleValue(mvClassFields.Item(PaymentPlanFields.ofFrequencyAmount).SetValue)) AndAlso (vOPS.AmountDue Mod 2 = 0) Then
                'vOPS.AmountDue can be divided equally by 2 so is likely to have been doubled by a DD/CCA reversal so halve it and use that figure
                vIncrementAmount = FixTwoPlaces(vOPS.AmountDue / 2)
                Dim vTempDiff As Double
                If vOPS.AmountDue > vOPS.AmountOutstanding Then vTempDiff = FixTwoPlaces(vOPS.AmountDue - vOPS.AmountOutstanding)
                If vTempDiff > vIncrementAmount Then vTempDiff = vIncrementAmount
                vOPS.Update(vOPS.DueDate, vIncrementAmount, FixTwoPlaces(vIncrementAmount - vTempDiff), vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount)   'Update this OPS but don't save it
              End If
            End If
            vSumAmountDue = vSumAmountDue + vIncrementAmount
          ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Then
            If IsMultipleCMT = False AndAlso mvFirstCMT = False AndAlso mvSecondCMT = False _
            AndAlso Date.Parse(pScheduleStartDate).CompareTo(Today) > 0 AndAlso Date.Parse(RenewalPeriodStart).CompareTo(Today) > 0 Then
              'Not a multiple CMT and CMT has taken place in the future so update the OPS to fully paid
              vOPS.Update(vOPS.DueDate, FixTwoPlaces(vOPS.AmountDue - vOPS.AmountOutstanding), 0, vOPS.ExpectedBalance, vOPS.ClaimDate)
            End If
            vSumAmountDue = vSumAmountDue + vOPS.AmountOutstanding
          Else
            vSumAmountDue = vSumAmountDue + vOPS.AmountOutstanding
          End If
        ElseIf (CDate(vOPS.DueDate) < CDate(vRenewalDate)) And (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrBatchPosting And vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsSkippedPayment) Then
          'This payment has been skipped so need to include it otherwise we could land up duplicating it.
          vSumAmountDue = vSumAmountDue + vOPS.AmountOutstanding
        End If
        If vOPS.ClaimDate.Length > 0 AndAlso vOPS.DueDate.Length > 0 Then
          If (CDate(vOPS.DueDate) < CDate(vRenewalDate) AndAlso CDate(vOPS.ClaimDate) > CDate(vRenewalDate)) _
          AndAlso ((pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType _
          AndAlso mvFirstCMT = True AndAlso CDate(pScheduleStartDate) < CDate(vRenewalDate)) _
          OrElse (pCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType OrElse mvFirstCMT = False)) Then
            If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue And vOPS.ScheduleCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrFinancialAdjustments _
            AndAlso vOPS.ScheduleCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Then
              vSumAmountDue = FixTwoPlaces(vSumAmountDue - vOPS.AmountOutstanding)
              vOPS.Delete()
              vTempSchPayments.Add(vOPS, vOPS.ScheduledPaymentNumber.ToString)
            End If
          End If
        End If
      Next vOPS
      For Each vOPS In vTempSchPayments
        mvScheduledPayments.Remove(CStr(vOPS.ScheduledPaymentNumber))
      Next
      If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And Not vAdvanceRenewalDate Then vInAdvanceAmount = 0 'Do not process any in-advance payments

      'Extra information required for pro-rated Memberships changed within the first year
      If PlanType = CDBEnvironment.ppType.pptMember And FixedRenewalCycle = True And PreviousRenewalCycle = True And Len(mvClassFields(PaymentPlanFields.ofFirstAmount).Value) > 0 And (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment And (CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value) = CDate(CalculateRenewalDate(mvClassFields(PaymentPlanFields.ofOrderDate).Value, True))) Then
        If (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance And mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = 0) Then
          'Balance could be zero even though ops is not fully paid
          'So set vSumAmountDue to 0 - this used to work and now it doesn't but I don't know why
          vSumAmountDue = 0
        End If
      End If

      'For Payment Plan Maintenance
      '(1) Adding a new DD/CCA, or (2) Changed Balance on Payment Plan paid by SO
      'OPS records with a status of ('Due' and creation reason of 'Financial Adjustment') or (status of 'PartPaid' with new DD/CCA / changed Pay Freq)
      'will not have been deleted (above) so may need to reset the AmountOutstanding
      'to zero so that it can be included under the DD/CCA/SO - leave creation reason as it is to prevent deletion
      'I.e. If the payment had not been made then it would have been deleted and incorporated within the schedule
      'as a missed payment, but because the payment was made & reversed this has not happened so need to do this
      If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Then
        CheckOPSForRegenerate(pCreationReason, pScheduleStartDate, vDeleteFromDate, vDeleteToDate, vRenewalDate, vNextPayDue, vUseEffectiveDate, vSumAmountDue)
        'Ensure vSumAmountDue has not become a negative figure (it shouldn't happen anyway)
        If vSumAmountDue < 0 Then vSumAmountDue = 0
      End If
      If mvProcessRenewal = False Then pScheduleStartDate = vDeleteFromDate 'For R&R, this will be done later

      'Total amount for the new schedules to add up to
      If (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType) And PlanType = CDBEnvironment.ppType.pptMember And FixedRenewalCycle = True And PreviousRenewalCycle = True And (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 And (CDate(mvClassFields(PaymentPlanFields.ofOrderDate).Value) = CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value)) And Len(mvClassFields(PaymentPlanFields.ofFirstAmount).Value) > 0 Then
        If (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment Then
          'Actual balance may have been pro-rated, but the FirstAmount is expected, which could be the renewal amount
          If mvClassFields(PaymentPlanFields.ofFirstAmount).DoubleValue > mvClassFields(PaymentPlanFields.ofBalance).DoubleValue Then
            If mvClassFields(PaymentPlanFields.ofFirstAmount).DoubleValue = mvClassFields(PaymentPlanFields.ofFrequencyAmount).DoubleValue Then
              vBalance = mvClassFields(PaymentPlanFields.ofBalance).DoubleValue
            Else
              vBalance = mvClassFields(PaymentPlanFields.ofFirstAmount).DoubleValue
            End If
          Else
            vBalance = mvClassFields(PaymentPlanFields.ofBalance).DoubleValue
          End If
        ElseIf (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsNew) = ProportionalBalanceConfigSettings.pbcsNew Then
          'First claim amount needs to be for the FirstAmount
          vBalance = mvClassFields(PaymentPlanFields.ofBalance).DoubleValue
        End If
        vFirstPaymentAmnt = mvClassFields(PaymentPlanFields.ofFirstAmount).DoubleValue

        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And mvScheduledPayments.Count() > 0 Then
          'Maintaining the Payment Plan before any payments have been made but after at least one payment has been missed
          'Do not want to use the FirstAmount again as it has already been used
          vFirstPaymentAmnt = 0
        ElseIf vFirstPaymentAmnt > 0 And (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan) And
            (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment And
            (String.Compare(mvEnv.GetConfig("split_halfyearly_payments", "N"), "Y", True) = 0) AndAlso PaymentFrequencyFrequency = 2 AndAlso FixedRenewalCycle AndAlso
                 DateDiff(DateInterval.Month, CDate(Today), CDate(vRenewalDate)) >= 6 Then
          vFirstPaymentAmnt = 0
          mvClassFields(PaymentPlanFields.ofFirstAmount).DoubleValue = 0
        End If
      Else
        'Create the schedule for the current balance
        vBalance = mvClassFields(PaymentPlanFields.ofBalance).DoubleValue
      End If

      If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Then
        If Arrears > 0 AndAlso ((mvSecondCMT = True) OrElse (mvSecondCMT = False AndAlso mvFirstCMT = False)) Then
          'If Renewals&Reminders has included the arrears within the balance, then CMT needs to do the same
          If mvEnv.GetConfig("fp_arrears_claim_method_renew") <> "NONE" Then vBalance = FixTwoPlaces(vBalance + Arrears)
        End If
      End If

      vBalance = FixTwoPlaces(vBalance - vSumAmountDue)
      vPaymentAmnt = vBalance

      ''If we have added a DD/CCA and there were OPS records we could not delete that now need a claim date, update them
      'If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance AndAlso mvAutoPaymentCreated = True _
      'AndAlso (DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes) AndAlso IsDate(vAutoStartDate) = True Then
      '  For Each vOPS In mvScheduledPayments
      '    If CDate(vOPS.DueDate) >= CDate(vAutoStartDate) Then
      '      vClaimDate = ""
      '      Select Case vOPS.ScheduledPaymentStatus
      '        Case OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsProvisional
      '          vClaimDate = FindNextClaimDate(vOPS.DueDate)
      '        Case Else
      '          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Then vClaimDate = FindNextClaimDate(vOPS.DueDate)
      '      End Select
      '      If IsDate(vClaimDate) Then vOPS.SetClaimDate(vClaimDate)
      '    End If
      '  Next
      'End If

      If vBalance < 0 Then
        'There are existing scheduled payments that add up to more than the new PP Balance
        'Run through the records (last to first) reducing the amount_outstanding.
        vOPS = Nothing
        vExpBalance = 0
        Do
          vOPS = CType(mvEnv.GetPreviousItem(mvScheduledPayments, vOPS), OrderPaymentSchedule)
          If Not (vOPS Is Nothing) Then
            If (vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsProvisional Or vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance) Then
              'Do nothing
            Else
              If vOPS.AmountOutstanding > 0 Then
                If System.Math.Abs(vBalance) > vOPS.AmountOutstanding Then
                  vAmountDue = FixTwoPlaces(vOPS.AmountDue - vOPS.AmountOutstanding)
                  vAmountOS = 0
                  vBalance = FixTwoPlaces(vBalance + vOPS.AmountOutstanding)
                Else
                  vAmountDue = FixTwoPlaces(vOPS.AmountDue - System.Math.Abs(vBalance))
                  vAmountOS = FixTwoPlaces(vOPS.AmountOutstanding - System.Math.Abs(vBalance))
                  vBalance = 0
                End If
                With vOPS
                  .Update(.DueDate, vAmountDue, vAmountOS, vExpBalance, .ClaimDate, .RevisedAmount, pCreationReason)
                End With
              End If
              vExpBalance = FixTwoPlaces(vExpBalance + vOPS.AmountDue)
              If (vOPS.AmountDue = 0 And vOPS.AmountOutstanding = 0) Then
                If mvEnv.Connection.GetCount("order_payment_history", Nothing, "order_number = " & PlanNumber & " AND scheduled_payment_number = " & vOPS.ScheduledPaymentNumber) = 0 Then
                  'Record has been reduced to nothing owing so delete
                  mvScheduledPayments.Remove(CStr(vOPS.ScheduledPaymentNumber))
                  vOPS.Delete()
                End If
              End If
            End If
          End If
        Loop While vBalance < 0 And Not (vOPS Is Nothing)
        If vBalance < 0 Then vBalance = 0

        If vBalance = 0 Then
          'Now need a new provisional ops record
          vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
          If RenewalPending Then
            vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
          Else
            If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = 0 And Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) > 0) And vOldRenPending = True And mvClassFields(PaymentPlanFields.ofRenewalDate).ValueChanged = False Then
              'PP Maint reduced Balance to zero, reset RenewalPending, but left RenewalDate unchanged
              vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
            End If
          End If
          If StartMonth > 0 Then
            If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPaymentPlanStartMonth) Then
              'StartMonth is being used so set vRenewalDate to use that month
              vRenewalDate = SetDateFromStartMonth(vRenewalDate)
            End If
          End If
          vCreate = True
          vBalance = CalculateBalanceForPaymentSchedule(pCreationReason, vRenewalDate)
          If (vBalance = 0 And mvDetails.Count() = 0) Then vCreate = False
          If vCreate = True And vBalance = 0 Then
            If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType And (DateDiff(Microsoft.VisualBasic.DateInterval.Year, CDate(mvClassFields(PaymentPlanFields.ofOrderDate).Value), CDate(RenewalDate)) = CDbl("99")) And Balance = 0 Then
              'Do nothing as renewal date already rolled forward
            Else
              vRenewalDate = CalculateRenewalDate(vRenewalDate, True) 'Create for the following year
            End If
          End If
          If vCreate = True And (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) Then
            vClaimDate = FindNextClaimDate(vRenewalDate)
            If Len(vClaimDate) = 0 Then vCreate = False
          End If

          'Now create the records
          If vCreate Then
            If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = 0 And Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) > 0) And (mvClassFields(PaymentPlanFields.ofNextPaymentDue).ValueChanged = False And mvClassFields(PaymentPlanFields.ofRenewalDate).ValueChanged = False) Then
              'PP Maint has reduced balance to 0 w/o rolling npd/rd forward so create an additional zero-amount provisional record for the NextPaymentDue
              vOPS = New OrderPaymentSchedule
              vOPS.Init(mvEnv)
              vOPS.Create(PlanNumber, mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value, 0, 0, 0, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance, "", True)
              mvScheduledPayments.Add(vOPS)
            Else
              If vProvOPSFound Then
                'Update an existing provisional ops if the dates match or there is just the one
                If vProvSchPayments.Count() > 1 Then
                  For Each vOPS In vProvSchPayments
                    If CDate(vOPS.DueDate) = CDate(vRenewalDate) Then Exit For
                  Next vOPS
                Else
                  vOPS = CType(vProvSchPayments.Item(1), OrderPaymentSchedule)
                End If
                If Not (vOPS Is Nothing) Then
                  'We have found a record so update it
                  vOPS.Update(vRenewalDate, vBalance, vBalance, 0, vClaimDate, "", OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance)
                  vCreate = False
                End If
              End If

              If vCreate Then
                'No existing provisional ops record so create a new one
                vOPS = New OrderPaymentSchedule
                vOPS.Init(mvEnv)
                vOPS.Create(PlanNumber, vRenewalDate, vBalance, vBalance, 0, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance, vClaimDate, True)
                mvScheduledPayments.Add(vOPS)
              End If

            End If
          End If
        End If
        vCreate = (mvScheduledPayments.Count() > 0)

        'If vBalance < 0 Then vBalance = 0
        'vPaymentAmnt = vBalance
      ElseIf vBalance > 0 Then
        If mvProcessRenewal Then
          'Renewals & Reminders only
          vNoPayments = PaymentFrequencyFrequency
          vBalanceDiff = 0
          If vUseEffectiveDate Then
            vBalanceDiff = FixTwoPlaces(RenewalAmount - GetOPSRenewalsBalance(pScheduleStartDate))
          End If

          Select Case mvEnv.GetConfig("fp_arrears_claim_method_renew")
            'This config is applied no matter what the payment method is
            Case "FIRST_CLAIM"
              'New schedule will pay the arrears with the first payment - so balance will be renewal amount + arrears
              vNextPaymentAmnt = mvClassFields(PaymentPlanFields.ofArrears).DoubleValue
              vBalance = FixTwoPlaces(mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue + mvClassFields(PaymentPlanFields.ofArrears).DoubleValue)
              mvClassFields(PaymentPlanFields.ofFrequencyAmount).DoubleValue = CalcFrequencyAmount((mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue), PaymentFrequencyFrequency)
              vPaymentAmnt = FixTwoPlaces(mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue / vNoPayments)
              If FixTwoPlaces(vPaymentAmnt * vNoPayments) < mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue Then vPaymentAmnt = vPaymentAmnt + 0.01 'This is what frequency amount calculations do
            Case "NONE"
              'New schedule is to ignore all arrears - so balance = renewal amount
              vBalance = mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue
              mvClassFields(PaymentPlanFields.ofFrequencyAmount).DoubleValue = CalcFrequencyAmount((mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue), PaymentFrequencyFrequency)
              vPaymentAmnt = FixTwoPlaces(vBalance / vNoPayments)
              If FixTwoPlaces(vPaymentAmnt * vNoPayments) < vBalance Then vPaymentAmnt = vPaymentAmnt + 0.01 'This is what frequency amount calculations do
            Case Else 'EVEN_SPREAD
              'New schedule will pay the arrears across all the payments - so balance = renewal amount + arrears
              vBalance = FixTwoPlaces(mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue + mvClassFields(PaymentPlanFields.ofArrears).DoubleValue)
              vPaymentAmnt = FixTwoPlaces(vBalance / vNoPayments)
              If FixTwoPlaces(vPaymentAmnt * vNoPayments) < vBalance Then vPaymentAmnt = vPaymentAmnt + 0.01 'This is what frequency amount calculations do
          End Select
          vFreqAmount = vPaymentAmnt
          vExpBalance = FixTwoPlaces(vBalance - vNextPaymentAmnt)
          If mvClassFields.Item(PaymentPlanFields.ofBalance).DoubleValue > 0 And mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue = 0 Then
            'Payment Plan has renewed at zero, any remaining Balance may have gone onto Arrears
            'Set vBalance to be the Arrears amount
            If mvEnv.GetConfig("fp_arrears_claim_method_renew") <> "NONE" And vExpBalance = 0 Then
              'If config set to None then we want to ignore the Arrears so we need the figures to be zero
              vBalance = FixTwoPlaces(vBalance - mvClassFields(PaymentPlanFields.ofArrears).DoubleValue)
              If vBalance < 0 Then vBalance = 0
              vExpBalance = FixTwoPlaces(mvClassFields(PaymentPlanFields.ofArrears).DoubleValue)
            End If
            vRRCreateProvOPS = True
          End If
        Else
          'Everything else except R&R
          vFreqAmount = mvClassFields(PaymentPlanFields.ofFrequencyAmount).DoubleValue
          vExpBalance = vBalance
          ' BR20415 - Recalculate Frequency if Payment Plan Maintenance and it is not a Standing Order. Payment plan may not have changed if user is using Update Payment Schedule
          '           Old Frequency Amount cannot be trusted in Payment Plan Maintenance, as almost any change will invalidate it.
          vReCalcFrequency = (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance) And Not (StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes)
        End If

        'Find the number of payments until renewal
        'Create the payment schedule from the renewal date backwards
        'This gives a collection of ops records with possible amounts and dates
        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan Or ((pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType) And (CDate(vNextPayDue) > CDate(pScheduleStartDate))) Then
          'The payment schedule needs to be created from the Next Payment Due date
          pScheduleStartDate = vNextPayDue
        End If

        '    vFreqAmount = mvClassFields(ofFrequencyAmount).DoubleValue
        'BUT, if we have just changed payment frequency and the NextPaymentDue is the RenewalDate,
        'then FrequencyAmount has not changed.
        'So if there was still an outstanding Balance at the time of change, we need to manually re-calc for the payment schedule
        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Then
          'And Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) > 0 - The condition has been removed from the below line for BR14567
          If mvClassFields(PaymentPlanFields.ofPaymentFrequency).ValueChanged And (CDate(StartDate) <> CDate(RenewalDate)) Then
            'Only do if not paid by SO
            vReCalcFrequency = (StandingOrderStatus <> PaymentPlan.ppYesNoCancel.ppYes) 'True
          ElseIf vUseEffectiveDate = True And RenewalPending = True And (CDate(StartDate) <> CDate(RenewalDate)) Then
            If (CDate(NextPaymentDue) < CDate(RenewalDate)) And (vBalance = RenewalAmount) Then
              'Using EffectiveDate, R&R has been run and the Balance to process is the RenewalAmount
              'Need to re-calc the FrequencyAmount as at the moment it has been calculated on the full Balance and so is too high
              vReCalcFrequency = True
            End If
          ElseIf (PlanType = CDBEnvironment.ppType.pptMember And mvClassFields.Item(PaymentPlanFields.ofOrderType).SetValue <> "M") Then
            vReCalcFrequency = (StandingOrderStatus <> PaymentPlan.ppYesNoCancel.ppYes)
          ElseIf mvClassFields.Item(PaymentPlanFields.ofBalance).ValueChanged = True AndAlso RenewalPending = True AndAlso ((CDate(StartDate) < CDate(RenewalDate)) AndAlso Today < CDate(RenewalDate)) Then
            'Balance changed after Renewals and before start of renewal period
            vReCalcFrequency = (StandingOrderStatus <> PaymentPlan.ppYesNoCancel.ppYes)
          End If
        End If

        'CMT - If the new balance has been pro-rated then FrequencyAmount needs to be re-calculated
        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Then
          If Not ((MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfMonthlyTerm Or MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfWeeklyTerm) Or CMTProportionBalance = CMTProportionBalanceTypes.cmtNone) Then
            vReCalcFrequency = True
          End If
        End If

        'Sometimes for PPMaint/CMT it is neccessary to recalculate the frequency amount as it has been set too high
        If (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType) And vReCalcFrequency = True Then
          'If this is too small then it will be corrected once the number of payments has been calculated
          Dim vPFFrequency As Integer = PaymentFrequencyFrequency
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance AndAlso IsUpdateAfterRenewal(pCreationReason, CDate(pScheduleStartDate), CDate(NextPaymentDue)) Then
            If DetailsAmendedFinancial = True AndAlso (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsExistingPF) = ProportionalBalanceConfigSettings.pbcsExistingPF Then
              vPFFrequency = CInt((vBalance / vFreqAmount))
              If vPFFrequency < PaymentFrequencyFrequency Then vPFFrequency = PaymentFrequencyFrequency
            End If
          End If
          vFreqAmount = FixTwoPlaces(vBalance / vPFFrequency)
        End If

        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan And PlanType = CDBEnvironment.ppType.pptMember Then
          'New Payment Plan for a life membership, set vRenewalDate to be 1 year on from start date
          If MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfLifeTerm Then
            If Term = 99 Then vRenewalDate = CDate(vStartDate).AddYears(1).ToString(CAREDateFormat)
          End If
        End If

        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType And MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfLifeTerm And RenewalPending = True Then
          If (CDate(vNextPayDue) < CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).SetValue)) And PaymentFrequencyFrequency > 1 Then
            'CMT after renewals but before all payments were made
            'so decrease vFreqAmount so that ops created back to pScheduleStartDate as CMT has calculated it as all due in PaymentFrequencyFrequency payments
            'If this is too small then it will be corrected once the number of payments has been calculated
            vFreqAmount = FixTwoPlaces(vBalance / (PaymentFrequencyFrequency + DateDiff(Microsoft.VisualBasic.DateInterval.Month, CDate(vNextPayDue), CDate(vOldRenewalDate))))
          End If
        End If

        'Need to see if adding a DD/CCA/SO has set the NPD Date to the DD/CCA/SO Start Date
        'either in this process, or within this renewal term
        If (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrBatchPosting Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrRenewalsReminders) And mvAutoPayment = True And vAutoStartDate.Length > 0 Then
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (mvAutoPaymentCreated And mvNPDDateUpdated) And vAutoPayConfig.Length > 0 Then
            'NPD Date was changed to the DD/CCA/SO Start Date, so we need to use that date for the calculations
            'As we are going backwards, we need to set vRenewalDate to the next date after the current vRenewalDate
            If CDate(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value) = CDate(vAutoStartDate) Then
              pScheduleStartDate = mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value
              vNextPayDue = mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value
              If Term < 0 Then
                If CDate(mvClassFields.Item(PaymentPlanFields.ofRenewalDate).Value) = CDate(mvClassFields.Item(PaymentPlanFields.ofNextPaymentDue).SetValue) And RenewalPending = True Then
                  'Term < 0 and RenewalDate = old NPD so recalculate vRenewalDate using vNextPayDue
                  'as the payments need to be calculated using the advanced dates
                  vRenewalDate = CalculateRenewalDate(vNextPayDue, True)
                End If
              End If
            End If
          ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And mvAutoPaymentCreated Then
            'Do Nothing as npd date will not have been changed
          Else
            'We may have reset the npd in the past which we need to take into account.
            If Len(vAutoPayConfig) > 0 Then
              If mvEnv.GetConfigOption(vAutoPayConfig) Then
                If (Day(CDate(vNextPayDue)) = Day(CDate(vAutoStartDate))) And (Day(CDate(vNextPayDue)) <> Day(CDate(vRenewalDate))) Then
                  vNPDDateReset = True
                  If Term < 0 And ResetOrderTerm <> ppResetOrderTerm.pprotNo Then
                    'NPD date was set to AutoStartDate and we have an incentive so as a rough guide
                    'change vRenewalDate to be calculated from vAutoStartDate
                    vRenewalDate = CalculateRenewalDate(vAutoStartDate, True)
                  End If
                End If
              End If
            End If
          End If
          If vNPDDateReset Then
            'At some point the npd has been changed to match the DD/CCA/SO Start Date
            'So we need to keep that date
            If (Day(CDate(vNextPayDue)) = Day(CDate(vAutoStartDate))) And (Day(CDate(vRenewalDate)) <> Day(CDate(vNextPayDue))) Then
              If ((pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrBatchPosting And RenewalPending = False And Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) = 0) Or (RenewalPending = True)) And (CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value) > CDate(vNextPayDue)) And pCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrRenewalsReminders Then
                vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
              ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrRenewalsReminders Then
                pScheduleStartDate = mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value
              End If
              'If RenewalPending = True And (CDate(mvClassFields(ofRenewalDate).Value) > CDate(vNextPayDue)) Then vRenewalDate = mvClassFields(ofRenewalDate).Value
              While CDate(vNextPayDue) < CDate(vRenewalDate)
                If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                  vNextPayDue = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, PaymentFrequencyInterval, CDate(vNextPayDue)))
                Else
                  vNextPayDue = AddMonths(BaseDate, vNextPayDue, PaymentFrequencyInterval)
                End If
              End While
              If CDate(vNextPayDue) > CDate(vRenewalDate) Then vRenewalDate = vNextPayDue
            End If
          End If
        End If

        vNextPayDue = vRenewalDate
        If StartMonth > 0 Then
          If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPaymentPlanStartMonth) Then
            'If StartMonth is set, need to ensure that OPS is created backwards from correct date
            'so advance vRenewalDate forward
            vRenewalDate = SetDateFromStartMonth(vRenewalDate)
            vRenewalDate = CalculateRenewalDate(vRenewalDate, False)
            While CDate(vRenewalDate) < CDate(vNextPayDue)
              If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, PaymentFrequencyInterval, CDate(vRenewalDate)))
              Else
                vRenewalDate = AddMonths(vRenewalDate, vRenewalDate, PaymentFrequencyInterval)
              End If
            End While
            vNextPayDue = vRenewalDate
            If mvProcessRenewal = False And (CDate(pScheduleStartDate) < CDate(SetDateFromStartMonth(pScheduleStartDate))) Then
              'Date to create OPS from is before start of renewal period
              pScheduleStartDate = SetDateFromStartMonth(pScheduleStartDate)
            End If
          End If
        End If

        'vNextPayDue = vRenewalDate
        'Handle initial period incentives
        If Term < 0 And System.Math.Abs(Term) > 12 Then
          If (mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlApplyIncentiveFreePeriod) = "A" And ResetOrderTerm <> ppResetOrderTerm.pprotNo) Then
            'The incentive free period will be applied after the payments have been made
            'So reduce the date for OPS calculations by the number of extra months
            vNextPayDue = CalculateRenewalDate(vNextPayDue, False)
            vNextPayDue = CDate(vNextPayDue).AddYears(1).ToString(CAREDateFormat)
            If vExpBalance > 0 And (CDate(vNextPayDue) < CDate(pScheduleStartDate)) Then vNextPayDue = pScheduleStartDate
            'NextPaymentDue sometimes set incorrectly when there are incentives so reset vFreqAmount to calculate the number of OPS
            If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And StandingOrderStatus <> PaymentPlan.ppYesNoCancel.ppYes Then
              vFreqAmount = FixTwoPlaces(vBalance / PaymentFrequencyFrequency)
              '          pScheduleStartDate = TodaysDate
            End If
          End If
        End If

        If mvProcessRenewal = True Then
          If mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue = 0 And mvClassFields(PaymentPlanFields.ofArrears).DoubleValue > 0 Then
            If mvEnv.GetConfig("fp_arrears_claim_method_renew") = "FIRST_CLAIM" Then
              'Only figure to be used for the OPS for next year is the Arrears and that is to be claimed with the first payment for next year
              'So set vNextPayDue to be the first payment date
              vNextPayDue = CalculateRenewalDate(vNextPayDue, False)
              If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                vNextPayDue = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, PaymentFrequencyInterval, CDate(vNextPayDue)))
              Else
                vNextPayDue = AddMonths(vRenewalDate, vNextPayDue, PaymentFrequencyInterval)
              End If
            End If
          End If
        End If

        If vExpBalance > 0 And (CDate(vNextPayDue) < CDate(pScheduleStartDate)) Then
          'Need to create OPS data but the dates will prevent this
          RaiseError(DataAccessErrors.daePaymentScheduleNotCreatedRDInPast, CStr(PlanNumber), vNextPayDue, pScheduleStartDate)
        End If

        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan AndAlso PlanType = CDBEnvironment.ppType.pptMember _
        AndAlso FixedRenewalCycle = True And PreviousRenewalCycle = True AndAlso ProRateBasisSetting = ProRateBasisConfigSettings.prbsTimeBased _
        AndAlso (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 Then
          Dim vFixedRenewalDate As Date = Date.Parse(FixedRenewalDate(Member.Joined))
          Dim vCountMonths As Integer = (Term * 12)
          If vFixedRenewalDate.CompareTo(Date.Parse(Member.Joined)) <= 0 Then
            vCountMonths = IntegerValue(DateDiff(DateInterval.Month, vFixedRenewalDate, Date.Parse(Member.Joined)).ToString)
          End If
          Dim vNumberOfMonths As Integer = CInt((Term * 12) - vCountMonths)

          If ((PaymentFrequencyFrequency * PaymentFrequencyInterval) < 12) AndAlso vNumberOfMonths < 12 Then
            'Pro-rated Balance is calculated across 12 months whilst Frequency Amount is calculated across the reduced number of months
            'So re-calculate the Frequency Amount for the OPS calculations
            vFreqAmount = CalcFrequencyAmount(RenewalAmount, 12)
            If FrequencyAmount.Equals(vFirstPaymentAmnt) Then
              'First Amount is set to the the Frequency Amount
              'So re-set to the re-calculated frequency amount
              vFirstPaymentAmnt = vFreqAmount
            End If
          End If
        End If

        If PaymentFrequencyOffsetMonths > 0 _
        OrElse ((PaymentFrequencyFrequency * PaymentFrequencyInterval < 12) AndAlso PaymentFrequencyFrequency > 1 AndAlso PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpMonths) Then
          'If the Offset Months are set OR the Payment Frequency instalments do not cover the full year
          'Re-calculate the starting point of the OPS date calculations
          Dim vPFCode As String = PaymentFrequencyCode
          Dim vPaymentFrequency As PaymentFrequency = mvEnv.GetPaymentFrequency(vPFCode)
          Dim vOffset As Integer = vPaymentFrequency.GetCalculatedOffsetMonths()
          If vOffset <> 0 Then vNextPayDue = AddMonths(vRenewalDate, vNextPayDue, vOffset)
          If Date.Parse(pScheduleStartDate).CompareTo(Date.Parse(vNextPayDue)) > 0 Then vNextPayDue = pScheduleStartDate 'Calculated vNextPayDue is before pScheduleStartDate 
        End If

        vNoPayments = 0
        vTempSchPayments = New Collection
        While vExpBalance > 0 And (CDate(vNextPayDue) >= CDate(pScheduleStartDate))
          vDate = vNextPayDue
          vNoPayments = vNoPayments + 1
          vCreate = False
          If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
            vNextPayDue = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -PaymentFrequencyInterval, CDate(vNextPayDue)))
          Else
            'vNextPayDue = AddMonths(BaseDate, vNextPayDue, -PaymentFrequencyInterval)
            'Use vRenewalDate instead of BaseDate to ensure that dates are correct if the day is changed
            'and the day of StartDate is different to day of RenewalDate
            vNextPayDue = AddMonths(vRenewalDate, vNextPayDue, -PaymentFrequencyInterval)
          End If

          'Handle special cases for pro-rating where first payment not due on StartDate
          If (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Or pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType) And PlanType = CDBEnvironment.ppType.pptMember And FixedRenewalCycle = True And PreviousRenewalCycle = True And mvScheduledPayments.Count() = 0 Then
            'Membership Fixed/Previous renewal cycle with first payment due on member joined date
            'And no payments have been missed
            If CDate(StartDate) = CDate(RenewalDate) Then
              'If previous next-pay-due > schedule start and current next-pay-due < schedule start then set next-pay-due to be the schedule start date
              If (CDate(vDate) > CDate(pScheduleStartDate)) And (CDate(vNextPayDue) < CDate(pScheduleStartDate)) Then vNextPayDue = pScheduleStartDate
            ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (CDate(vNextPayDue) < CDate(pScheduleStartDate)) Then
              'If previous next-pay-due > schedule start and current next-pay-due < schedule start then set next-pay-due to be the members joined date (Pay Plan Maint after payment made)
              If (CDate(vDate) > CDate(pScheduleStartDate)) And (CDate(vNextPayDue) < CDate(pScheduleStartDate)) Then vNextPayDue = Member.Joined
            End If
          End If

          If (CDate(vNextPayDue) < CDate(pScheduleStartDate)) And vNoPayments = 1 Then
            'The one and only payment to be made is before the schedule start date
            If (CDate(pScheduleStartDate) <= CDate(vRenewalDate)) Then
              Dim vUpdateNPD As Boolean = True
              If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance AndAlso (DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes) _
              AndAlso mvAutoPaymentCreated = False AndAlso IntegerValue(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlAutoPayAdvancePeriod)) > 0 Then
                Dim vMinDate As Date = mvEnv.GetPaymentPlanAutoPayDate(Today, If(DirectDebitStatus = ppYesNoCancel.ppYes, PaymentPlan.ppAutoPayMethods.ppAPMDD, PaymentPlan.ppAutoPayMethods.ppAPMCCCA), Me.AutoPayBankAccount, True)
                If (vMinDate > CDate(vNextPayDue) AndAlso vMinDate = CDate(pScheduleStartDate)) Then
                  'If we updated pScheduleStartDate to be the min delete date due to the auto pay advance notice period then set vNextPayDue to be today
                  vClaimDate = FindNextClaimDate(TodaysDate)
                  If IsDate(vClaimDate) AndAlso CDate(vClaimDate) >= vMinDate Then
                    vNextPayDue = TodaysDate()
                    vUpdateNPD = False
                  End If
                End If
              End If
              If vUpdateNPD Then vNextPayDue = pScheduleStartDate
            End If
          End If

          If CDate(vNextPayDue) >= CDate(pScheduleStartDate) Then
            vCreate = True
          ElseIf Not (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance AndAlso vFreqChangedUseOPSDueOnly = True) Then
            If (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes OrElse CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) AndAlso mvAutoPaymentCreated = False _
            AndAlso Not (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType AndAlso CMTProportionBalance = CMTProportionBalanceTypes.cmtFrequencyAmounts) Then
              'Only check this if we have NOT just created the DD/CCA
              'and CMTProportionalBalance is not set to 'F' when changing membership type as the system has already dealt with it
              vClaimDate = FindNextClaimDate(vNextPayDue)
              If Len(vClaimDate) > 0 Then
                Dim vUseAPAdvPeriod As Boolean = (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType OrElse pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance)
                vDate = mvEnv.GetPaymentPlanAutoPayDate(Today, vAutoPayMethod, Me.AutoPayBankAccount, vUseAPAdvPeriod).ToString(CAREDateFormat)
                If (vUseEffectiveDate OrElse (vUseAPAdvPeriod AndAlso vNoPayments > 1)) AndAlso CDate(vDate) < CDate(pScheduleStartDate) Then vDate = pScheduleStartDate
                'If ClaimDate is >= Today + auto-pay-delay days then this payment can be recreated
                'We have time to notify the donor of the change even though it was due before Today
                If CDate(vClaimDate) >= CDate(vDate) Then vCreate = True
              End If
            End If
          End If

          If vCreate Then

            'If the Split payment config option is switched On and Payment Frequency is half yearly and ProportionalBalanceSetting is New or Full then split the payment into two equal installments
            If (((ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsNew) = ProportionalBalanceConfigSettings.pbcsNew) OrElse
                ((ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment)) AndAlso
                 (String.Compare(mvEnv.GetConfig("split_halfyearly_payments", "N"), "Y", True) = 0) AndAlso PaymentFrequencyFrequency = 2 AndAlso FixedRenewalCycle AndAlso
                 DateDiff(DateInterval.Month, CDate(Today), CDate(vRenewalDate)) >= 6 Then
              If vNoPayments < PaymentFrequencyFrequency Then
                vPaymentAmnt = vExpBalance / PaymentFrequencyFrequency
                If ((ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment) Then
                  vFreqAmount = vPaymentAmnt
                End If
              Else
                vPaymentAmnt = vExpBalance
                If ((ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment) Then
                  vFreqAmount = vPaymentAmnt
                End If
              End If
            Else
              If vFreqAmount > vExpBalance Then
                vPaymentAmnt = vExpBalance
                If (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsNew) = ProportionalBalanceConfigSettings.pbcsNew And vFirstPaymentAmnt > 0 And mvProcessRenewal = False Then
                  'Ensure that first payment is the lower figure even though an extra amount is to be paid
                  vNextPaymentAmnt = vPaymentAmnt
                End If
              Else
                vPaymentAmnt = vFreqAmount
              End If
            End If


            vExpBalance = FixTwoPlaces(vExpBalance - vPaymentAmnt)

            If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (CDate(vNextPayDue) = CDate(pScheduleStartDate)) And vFirstPaymentAmnt > 0 Then
              'This if the first payment which needs to be allocated here
              'Then adjust vFreqAmount if still an outstanding balance
              vExpBalance = FixTwoPlaces((vExpBalance + vPaymentAmnt) - vFirstPaymentAmnt)
              vPaymentAmnt = vFirstPaymentAmnt
              If vExpBalance > 0 Then
                vFreqAmount = FixTwoPlaces((vFreqAmount + vExpBalance) / (vNoPayments - 1))
                If FixTwoPlaces((vFreqAmount * (vNoPayments - 1)) + vFirstPaymentAmnt) < vBalance Then vFreqAmount = vFreqAmount + 0.01
                vExpBalance = 0
              End If
            End If

            If vFirstPaymentAmnt = 0 And (vPaymentAmnt <> vFreqAmount) And (PlanType = CDBEnvironment.ppType.pptMember And FixedRenewalCycle = True And PreviousRenewalCycle = True And (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsNew) = ProportionalBalanceConfigSettings.pbcsNew) Then
              'For proportional balance, the lower figure is to be the first amount paid
              If (CDate(StartDate) = CDate(RenewalDate)) And (CDate(StartDate) <> CDate(Member.Joined)) Then
                '... But only if Start = Renewal and Start <> Joined
                vFirstPaymentAmnt = vPaymentAmnt
              End If
            End If

            'For Standing Order, ensure that the ops is always being created for the FrequencyAmount
            'taking account for any rounding errors
            If (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes And vExpBalance = 0 And mvClassFields(PaymentPlanFields.ofAmount).Value.Length > 0) Then
              If vFreqAmount > vPaymentAmnt Then
                'The last payment is being created for less than the FrequencyAmount
                vCreate = True
                If FixTwoPlaces(vFreqAmount * PaymentFrequencyFrequency) > mvClassFields(PaymentPlanFields.ofAmount).DoubleValue Then
                  'The FrequencyAmount * PaymentFrequency is greater than the FixedAmount
                  'Check frequency amount - 1p to account for rounding differences
                  If FixTwoPlaces((vFreqAmount - 0.01) * PaymentFrequencyFrequency) < mvClassFields(PaymentPlanFields.ofAmount).DoubleValue Then
                    'There was a rounding difference involved
                    If vNoPayments < PaymentFrequencyFrequency Then
                      'We are recreating less payments so error only if the balance has changed
                      vCreate = Not (mvClassFields(PaymentPlanFields.ofBalance).ValueChanged)
                    End If
                  Else
                    'Error
                    vCreate = False
                  End If
                Else
                  'Frequency Amount was an exact figure, there should not be any differences
                  vCreate = False
                End If
                If vCreate = False Then
                  If mvEnv.Connection.DatabaseAccessMode = CDBConnection.cdbDataAccessMode.damTest Then
                    If Not vOPSToDelete Then
                      RaiseError(DataAccessErrors.daeStandingOrderBalanceWrong, CStr(PlanNumber), FixedFormat(vBalance), FixedFormat(vFreqAmount))
                    End If
                  Else
                    RaiseError(DataAccessErrors.daeStandingOrderBalanceWrong, CStr(PlanNumber), FixedFormat(vBalance), FixedFormat(vFreqAmount))
                  End If
                End If
              End If
            End If

            If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) = 0 And mvClassFields(PaymentPlanFields.ofBalance).DoubleValue > 0) And (CDate(NextPaymentDue) = CDate(RenewalDate)) And (FrequencyAmount = Balance) And (vNoPayments = 1 And vExpBalance = 0) Then
              'Payment Plan Maintenance has increased Balance from 0 to above 0, with npd same as renewal, and full payment is expected now
              If CDate(vNextPayDue) > CDate(pScheduleStartDate) Then vNextPayDue = pScheduleStartDate
            End If

            vTempOPS = New OrderPaymentSchedule
            vTempOPS.Init(mvEnv)
            vTempOPS.Create(PlanNumber, vNextPayDue, vPaymentAmnt, vPaymentAmnt, vExpBalance, pCreationReason)
            vTempSchPayments.Add(vTempOPS)
            'Debug.Print("Create Schedule " & vNoPayments & " - Due: " & vNextPayDue & "; Amount: " & vPaymentAmnt.ToString("F"))
          End If
        End While

        vNoPayments = vTempSchPayments.Count()
        If (mvProcessRenewal = True And vRRCreateProvOPS = True) Then
          'It is possible that we will not have created any OPS records and this is correct as the PaymentPlan is renewing at zero
          'So instead of giving an error create a new provisional OPS for the following renewal date (just like it would had the Balance been zero originally)
          vPaymentAmnt = 0
          vTempOPS = New OrderPaymentSchedule
          vTempOPS.Init(mvEnv)
          vTempOPS.Create(PlanNumber, vRenewalDate, vPaymentAmnt, vPaymentAmnt, 0, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance, "", True)
          mvScheduledPayments.Add(vTempOPS)
          'Do not increment vNoPayments as this could cause the FrequencyAmount to be re-calculated incorrectly
          'Debug.Print "Create Schedule " & vNoPayments + 1 & " - Due: " & vRenewalDate & "; Amount: " & Format$(vPaymentAmnt, "#0.00")
        ElseIf vNoPayments = 0 Then
          'Something has gone wrong, so error - we shouldn't get here!
          RaiseError(DataAccessErrors.daePaymentScheduleNotCreated, CStr(PlanNumber))
        End If

        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType AndAlso vExpBalance > 0 _
        AndAlso CMTProportionBalance = CMTProportionBalanceTypes.cmtFrequencyAmounts AndAlso DirectDebitStatus = ppYesNoCancel.ppYes Then
          'OPS must match frequency
          Dim vCheckBalance As Double = FixTwoPlaces(FrequencyAmount * vNoPayments)
          If vCheckBalance > vBalance AndAlso vSumAmountDue > 0 Then
            'See if we can reduce undeleted OPS
            For Each vCheckOPS As OrderPaymentSchedule In mvScheduledPayments
              If vCheckOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue AndAlso vCheckOPS.AmountOutstanding = vSumAmountDue Then
                Dim vMinDate As Date = mvEnv.GetPaymentPlanAutoPayDate(Today, ppAutoPayMethods.ppAPMDD, Me.AutoPayBankAccount, True)
                If IsDate(vCheckOPS.ClaimDate) = True AndAlso vMinDate < CDate(vCheckOPS.ClaimDate) Then
                  'This will reduce the OPS amount that was unable to be deleted and so ensuring that the payments match the frequency amount
                  'DO NOT do this if the payment is unable to be changed
                  Dim vBalDiff As Double = FixTwoPlaces(vCheckBalance - vBalance)
                  With vCheckOPS
                    .Update(.DueDate, FixTwoPlaces(.AmountDue - vBalDiff), FixTwoPlaces(.AmountOutstanding - vBalDiff), .ExpectedBalance, .ClaimDate, .RevisedAmount)
                    .Save(pAmendedBy, pAudit)
                  End With
                  vBalance = FixTwoPlaces(vBalance + vBalDiff)
                  vFreqAmount = FrequencyAmount
                  vExpBalance = FixTwoPlaces(vExpBalance - (vCheckBalance - (vPaymentAmnt * vNoPayments)))
                  If vExpBalance < 0 Then vExpBalance = 0
                End If
                Exit For
              End If
            Next
          End If
        End If

        If vExpBalance > 0 Then
          'Insufficient payments to use the FrequencyAmount, so re-calc
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes And Len(mvClassFields(PaymentPlanFields.ofAmount).Value) > 0) Then
            '... but not for Standing Orders as the OPS must match the Frequency Amount
            RaiseError(DataAccessErrors.daeStandingOrderBalanceWrong, CStr(PlanNumber), FixedFormat(vBalance), FixedFormat(vFreqAmount))
          Else
            vFreqAmount = FixTwoPlaces(vBalance / vNoPayments)
            If FixTwoPlaces(vFreqAmount * vNoPayments) < vBalance Then vFreqAmount = vFreqAmount + 0.01
            If vNoPayments = 1 And vFirstPaymentAmnt > 0 Then
              'The FirstAmount is set (it can be set to either the RenewalAmount or FrequencyAmount)
              'If we are only expecting 1 payment and the FirstAmount was set to the FrequencyAmount then re-set it to the new FrequencyAmount
              If vFirstPaymentAmnt = FrequencyAmount Then vFirstPaymentAmnt = vFreqAmount
            End If
          End If
        End If
        vPaymentAmnt = vFreqAmount

        'Hande the exceptions
        If (vFirstPaymentAmnt > 0 And vNoPayments > 1) Then
          If (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 Then
            If (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsNew) = ProportionalBalanceConfigSettings.pbcsNew Then
              'BDA specific - FirstAmount is multiples of payment frequency with the extra over the normal payment being an in-advance payment for the next month
              'First payment amount is higher
              'The extra over the normal payment amount is then deducted from subsequent payments
              If vFirstPaymentAmnt >= vPaymentAmnt Then
                If vNextPaymentAmnt > 0 Then
                  vSkipAmount = FixTwoPlaces(vFirstPaymentAmnt - vNextPaymentAmnt)
                Else
                  vSkipAmount = FixTwoPlaces(vFirstPaymentAmnt - vPaymentAmnt)
                End If
              End If
              vNextPaymentAmnt = 0
            Else
              'Remaining payments after the FirstAmount is remaining balance / remining number of payments
              vPaymentAmnt = FixTwoPlaces((vBalance - vFirstPaymentAmnt) / (vNoPayments - 1))
              If FixTwoPlaces((vPaymentAmnt * (vNoPayments - 1)) + vFirstPaymentAmnt) < vBalance Then vPaymentAmnt = vPaymentAmnt + 0.01
            End If
          End If
        ElseIf (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) = 0 Then
          'Do not clear this value for FULLPAYMENT or NEW config settings
          vFirstPaymentAmnt = 0
        End If

        'Update the ops to the correct amounts
        'This will take account of any in-advance etc.
        'Plus set up the claim dates
        vIndex = 0
        If (mvProcessRenewal = True And vUseEffectiveDate = True) Then
          vBalance = FixTwoPlaces((vBalance - vNextPaymentAmnt) - vBalanceDiff)
        End If
        vExpBalance = vBalance

        For vIndex = vTempSchPayments.Count() To 1 Step -1
          vTempOPS = CType(vTempSchPayments.Item(vIndex), OrderPaymentSchedule)

          vCreate = True
          vClaimDate = ""

          If (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) Then
            'Get claim dates for DD or CCCA
            vClaimDate = FindNextClaimDate(vTempOPS.DueDate)
            If Len(vClaimDate) > 0 Then

              If (CDate(vAutoStartDate) > CDate(vClaimDate)) And vNoPayments = 1 Then
                'Only the 1 payment so claim next time(?)
                vClaimDate = FindNextClaimDate(vAutoStartDate)
              End If

              If CDate(vAutoStartDate) > CDate(vClaimDate) Then
                'DD or CC has not started yet, can not create scheduled payment
                vClaimDate = ""
                vCreate = False
              End If

              If vCreate = True And ((pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan) Or (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And mvAutoPaymentCreated And (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes))) Then
                'Created new Pay Plan, or
                'Adding DD/CCCA to existing Pay Plan
                If (CDate(vClaimDate) >= CDate(vRenewalDate)) And PaymentFrequencyFrequency = 1 Then
                  'Only one payment is expected and the claim date is after the renewal date
                  If CDate(vClaimDate) = CDate(FindNextClaimDate(If((CDate(vAutoStartDate) > CDate(vRenewalDate)), vAutoStartDate, vRenewalDate))) Then
                    'The ClaimDate for the first payment is the same as the ClaimDate for the second payment
                    If (PlanType = CDBEnvironment.ppType.pptDD Or PlanType = CDBEnvironment.ppType.pptCCCA) Then
                      'Move NPD & Renewal Dates forward so that they match up with this ops record
                      'This then forces the next ops record to be created correctly once this ops is paid
                      If ContinuousRenewals Then vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
                      RenewalDate = vRenewalDate
                      NextPaymentDue = CalculateNextPaymentDue(NextPaymentDue, vRenewalDate, vPaymentAmnt, vPaymentAmnt, vBalance)
                      vNextPayDue = vRenewalDate
                      vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
                    Else
                      'Probably only likely to happen with monthly/weekly memberships
                      If ((pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance _
                      AndAlso mvAutoPaymentCreated AndAlso (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes))) _
                      AndAlso CDate(vTempOPS.DueDate) < CDate(vRenewalDate) Then
                        'Added DD/CCA to existing PaymentPlan and the due date is prior to the renewal date (DD added before R&R) so just clear the claim date
                        vClaimDate = ""
                      Else
                        Select Case mvEnv.GetConfig("fp_arrears_claim_method_create")
                          Case "NEXT_CLAIM", "EVEN_SPREAD"
                            'Claim this payment in the next payment
                            'No point in adding a 0 amount line so create a new line for both payments now
                            vBalance = vBalance + vPaymentAmnt
                            vNextPaymentAmnt = vNextPaymentAmnt + vPaymentAmnt
                            vExpBalance = vBalance
                            If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                              vNextPayDue = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, PaymentFrequencyInterval, CDate(vNextPayDue)))
                            Else
                              vNextPayDue = AddMonths(BaseDate, vNextPayDue, PaymentFrequencyInterval)
                            End If
                            vClaimDate = FindNextClaimDate(vNextPayDue)
                          Case Else '"NONE"
                            'Default
                            'Next payment will be claimed on the same date so remove the claim date
                            'Otherwise we have the same result as setting the config to 'NextClaim'
                            vClaimDate = ""
                        End Select
                      End If
                    End If
                  End If
                ElseIf AutoPaymentClaimDateMethod = AutoPaymentClaimDateMethods.apcdmDates And (PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpMonths And (PaymentFrequencyFrequency * PaymentFrequencyInterval) <> 12) Then
                  'When using ClaimDates need to handle LatestDueDate being set to a date after the ClaimDate
                  'For a regular monthly DD/CCA this can cause the 2nd OPS to have the same ClaimDate as the 1st
                  If (PlanType = CDBEnvironment.ppType.pptDD Or PlanType = CDBEnvironment.ppType.pptCCCA) And (CDate(vTempOPS.DueDate) = CDate(RenewalDate)) Then
                    If CDate(vClaimDate) = CDate(FindNextClaimDate(vRenewalDate)) Then
                      'Next payment has same claim date as previous
                      'Move NPD & Renewal Dates forward so that they match up with this ops record
                      'This then forces the next ops record to be created correctly once this ops is paid
                      If ContinuousRenewals Then vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
                      RenewalDate = vRenewalDate
                      NextPaymentDue = CalculateNextPaymentDue(NextPaymentDue, vRenewalDate, vPaymentAmnt, vPaymentAmnt, vBalance)
                      vNextPayDue = vRenewalDate
                      vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
                    End If
                  End If
                End If
              End If

              If vCreate = False And ((pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan) Or (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And mvAutoPaymentCreated And (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes)) Or (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (mvClassFields(PaymentPlanFields.ofPaymentFrequency).ValueChanged = True Or mvClassFields(PaymentPlanFields.ofBalance).ValueChanged = True)) Or (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType)) Then
                'Creating a new Pay Plan, or
                'Added DD/CCCA to existing Pay Plan, or
                'Changed payment frequency / balance to existing Pay Plan during DD/CCCA grace period, or
                'Change Membership Type during DD/CCCA grace period,
                'And this payment schedule can not be created as it is before the DD / CCCA start date
                Select Case mvEnv.GetConfig("fp_arrears_claim_method_create")
                  Case "NEXT_CLAIM"
                    'Claim this payment with the next DD/CCCA claim (not the next payment)
                    vClaimDate = FindNextClaimDate(vTempOPS.DueDate, True)
                    If Len(vClaimDate) > 0 Then vCreate = True
                  Case "EVEN_SPREAD"
                    'Claim this payment evenly across all remaining payments
                    'If vSkipAmount > 0 And (ProportionalBalanceSetting And pbcsNew) = pbcsNew Then vNoPayments = vNoPayments + 1    'Calculating no of payments has skipped a payment which is now going to be used
                    'Deduct a payment and re-calculate vPaymentAmnt
                    vNoPayments = vNoPayments - 1
                    vPaymentAmnt = FixTwoPlaces(vBalance / vNoPayments)
                    If FixTwoPlaces(vPaymentAmnt * vNoPayments) < vBalance Then vPaymentAmnt = vPaymentAmnt + 0.01 'This is what frequency amount calculations do
                    vFirstPaymentAmnt = 0
                    vSkipAmount = 0
                  Case Else 'NONE
                    'Ignore this payment for the DD/CCCA claim (i.e. create w/o the claim date)
                    vCreate = True
                End Select
              ElseIf vCreate = False Then
                'Not going to look at the fp_arrears_claim_method_create config,
                'So create without a claim date
                vCreate = True
              End If

            Else
              'It was not possible to find the claim date so do nothing for this Payment Plan
              'E.g. insufficient records in the scheduled_claim_dates table.
              vCreate = False
            End If
          End If

          If vCreate Then
            'Set the AmountDue
            If vFirstPaymentAmnt > 0 Then
              vAmountDue = vFirstPaymentAmnt
            Else
              vAmountDue = vPaymentAmnt
            End If

            'For R&R some figures may need to be different
            If mvProcessRenewal = True And vUseEffectiveDate = True Then
              vAmountDue = SetRenewalOPSAmountDue(vTempOPS.DueDate, vClaimDate, vAmountDue)
            End If

            If vAmountDue > vExpBalance Then vAmountDue = vExpBalance

            'Account for the Next-Payment-Amount
            If vFirstPaymentAmnt = 0 And vNextPaymentAmnt > 0 Then
              vAmountDue = FixTwoPlaces(vAmountDue + vNextPaymentAmnt)
            End If

            'Set the AmountOutstanding
            vAmountOS = vAmountDue

            'Deduct in-advance amount
            If vInAdvanceAmount > vAmountOS Then
              If (vTempSchPayments.Count() = 1 And pCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrRenewalsReminders) Then
                'If only the 1 payment & not R&R then reset the AmountDue (e.g. BatchPosting is renewing)
                If vProvSchPayments.Count() = 1 Then vAmountDue = vInAdvanceAmount 'Just 1 provisional OPS
                vInAdvanceAmount = FixTwoPlaces(vInAdvanceAmount - vAmountDue)
              Else
                vInAdvanceAmount = FixTwoPlaces(vInAdvanceAmount - vAmountOS)
              End If
              vAmountOS = 0
            Else
              vAmountOS = FixTwoPlaces(vAmountOS - vInAdvanceAmount)
              vInAdvanceAmount = 0
            End If

            'Sort out any payments to be skipped
            If vFirstPaymentAmnt = 0 And vSkipAmount > 0 Then
              If vSkipAmount > vAmountOS Then
                vCreate = False
                vSkipAmount = FixTwoPlaces(vSkipAmount - vAmountOS)
                vAmountOS = 0
                vAmountDue = 0
              Else
                vAmountOS = FixTwoPlaces(vAmountOS - vSkipAmount)
                vAmountDue = FixTwoPlaces(vAmountDue - vSkipAmount)
                vSkipAmount = 0
              End If
            End If

            'Set the ExpectedBalance
            vExpBalance = FixTwoPlaces(vExpBalance - vAmountDue)
            If vExpBalance < 0 Then vExpBalance = 0

            'Do not create any lines expecting 0
            If vAmountDue = 0 And vAmountOS = 0 Then vCreate = False
          End If

          If vCreate Then
            If vProvOPSFound = True Then
              'Keep the provisional line
              For Each vOPS In vProvSchPayments
                If (CDate(vOPS.DueDate) = CDate(vTempOPS.DueDate)) Or (vProvSchPayments.Count() = 1) Then
                  vOPS.Update(vTempOPS.DueDate, vAmountDue, vAmountOS, vExpBalance, vClaimDate, "", pCreationReason)
                  vCreate = False 'Don't want to create a new OPS as we can re-use this provisional record
                End If
                If vCreate = False Then Exit For
              Next vOPS
              If vCreate = False Then vProvSchPayments.Remove(CStr(vOPS.ScheduledPaymentNumber))
              vProvOPSFound = (vProvSchPayments.Count() > 0)
            End If
            If vCreate Then
              With vTempOPS
                .Update(.DueDate, vAmountDue, vAmountOS, vExpBalance, vClaimDate)
              End With
              'Add to the correct collection
              mvScheduledPayments.Add(vTempOPS)
            End If
            vNextPaymentAmnt = 0
          End If
          vFirstPaymentAmnt = 0
        Next
        vCreate = (mvScheduledPayments.Count() > 0)

        'For R&R we may have reduced the amount on 1 or more OPS lines due to Pro-rating a PPD line so ensure that the OPS still adds up correctly
        If mvProcessRenewal = True And vUseEffectiveDate = True And vExpBalance > 0 Then
          vTempOPS = CType(mvEnv.GetPreviousItem(mvScheduledPayments, Nothing), OrderPaymentSchedule)
          With vTempOPS
            .Update(.DueDate, (.AmountDue + vExpBalance), (.AmountOutstanding + vExpBalance), 0, .ClaimDate)
          End With
        End If

        'Before we Save, ensure that there are not two ops records with the same claim date (or due date),
        'and if there are then roll them together - processing from latest to earliest
        vTempSchPayments = New Collection
        vTempOPS = Nothing
        vOPS = Nothing
        vPaymentAmnt = 0

        Do
          vUpdateOPS = False
          vOPS = CType(mvEnv.GetPreviousItem(mvScheduledPayments, vOPS), OrderPaymentSchedule)
          If Not (vOPS Is Nothing) Then
            If Not (vTempOPS Is Nothing) Then
              If Len(vTempOPS.ClaimDate) > 0 And Len(vOPS.ClaimDate) > 0 Then
                If CDate(vTempOPS.ClaimDate) = CDate(vOPS.ClaimDate) Then
                  'ClaimDates are the same so roll together
                  vUpdateOPS = True
                  vPaymentAmnt = FixTwoPlaces(vOPS.AmountDue + vTempOPS.AmountDue)
                  If (vPaymentAmnt = FixTwoPlaces(mvClassFields.Item(PaymentPlanFields.ofBalance).DoubleValue * 2)) And mvAutoPaymentCreated = True Then
                    'Adding a new DD/CCA after a previous DD/CCA was cancelled could have just updated the Provisional and so has doubled the Amount Due
                    vPaymentAmnt = FixTwoPlaces(vPaymentAmnt / 2)
                  ElseIf (mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged And vTempOPS.ScheduledPaymentNumber = 0 And vOPS.ScheduledPaymentNumber > 0) Then
                    'Change of Payment Frequency has found the existing OPS + the new OPS, so update existing OPS amount with new OPS amount
                    'Will also need to include any previous payment amount
                    vPaymentAmnt = FixTwoPlaces(vTempOPS.AmountDue + vOPS.PaymentAmount)
                    If mvProcessCMT = True AndAlso vOPS.AmountDue > 0 AndAlso vOPS.AmountOutstanding > 0 AndAlso vOPS.PaymentAmount = 0 Then vPaymentAmnt = FixTwoPlaces(vTempOPS.AmountDue + vOPS.AmountDue) 'CMT & line not paid so include Due amount otherwise Due is less than Outstanding
                  End If
                End If
              ElseIf Len(vTempOPS.ClaimDate) = 0 And Len(vOPS.ClaimDate) = 0 Then
                If CDate(vTempOPS.DueDate) = CDate(vOPS.DueDate) Then
                  'DueDates are the same so roll together
                  vUpdateOPS = True
                  vPaymentAmnt = FixTwoPlaces(vOPS.AmountDue + vTempOPS.AmountDue)
                  If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance _
                  AndAlso mvAutoPayment = False AndAlso mvAutoPaymentCreated = False AndAlso mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged = True _
                  AndAlso vOPS.ScheduledPaymentNumber > 0 AndAlso vTempOPS.ScheduledPaymentNumber = 0 And CDate(vOPS.DueDate) >= CDate(vDeleteFromDate) Then
                    'OPS was unable to be deleted so keep new amount only
                    vPaymentAmnt = vTempOPS.AmountDue
                  End If
                End If
              ElseIf ((Len(vTempOPS.ClaimDate) > 0 And Len(vOPS.ClaimDate) = 0) And (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) And mvAutoPaymentCreated = True) Then
                'Added new DD/CCA so old OPS does not have ClaimDate
                If CDate(vTempOPS.DueDate) = CDate(vOPS.DueDate) Then
                  'Both have same DueDate
                  vUpdateOPS = True
                  'If vPaymentAmnt > 0 Then we have amalgamated some OPS already
                  If (vPaymentAmnt > 0 OrElse mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged) Then
                    vPaymentAmnt = FixTwoPlaces(vOPS.PaymentAmount + vTempOPS.AmountDue)
                  Else
                    vPaymentAmnt = vOPS.AmountDue
                  End If
                End If
              End If
              If vUpdateOPS Then
                With vOPS
                  'Update the next ops
                  .Update(.DueDate, vPaymentAmnt, FixTwoPlaces(.AmountOutstanding + vTempOPS.AmountOutstanding), vTempOPS.ExpectedBalance, vTempOPS.ClaimDate, "", CType(IIf(.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrFinancialAdjustments, 0, pCreationReason), OrderPaymentSchedule.OrderPaymentScheduleCreationReasons))
                End With
                vTempOPS = Nothing
              End If
            End If
            If Not (vTempOPS Is Nothing) Then vTempSchPayments.Add(vTempOPS)
            vTempOPS = vOPS
          End If
        Loop While Not (vOPS Is Nothing)
        If Not (vTempOPS Is Nothing) Then vTempSchPayments.Add(vTempOPS) 'Add the last ops
        mvScheduledPayments = vTempSchPayments

      ElseIf mvFirstCMT = False Then  'Do not create provisional line when another CMT has to be processed
        'Balance = 0 so create a provisional line
        vCreate = True
        vBalance = CalculateBalanceForPaymentSchedule(pCreationReason, RenewalDate)
        If (vBalance = 0 And mvDetails.Count() = 0) Then vCreate = False 'No Details

        If vCreate = True Then
          vRenewalDate = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
          If vBalance > 0 Then
            'Create provisional ops record
            vNPDDateReset = False
            'If DD/CCA/SO added & npd has been set to the DD/CCA/SO Start Date
            If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (mvNPDDateUpdated And mvAutoPaymentCreated) And (Len(vAutoPayConfig) > 0 And Len(vAutoStartDate) > 0) Then
              If mvEnv.GetConfigOption(vAutoPayConfig) Then
                If (CDate(mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value) = CDate(vAutoStartDate)) And RenewalPending = False And Balance = 0 Then
                  vRenewalDate = mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value
                  vNPDDateReset = True
                End If
              End If
            End If

            'Check whether it is neccessay to change/reset vRenewalDate
            If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType And mvClassFields(PaymentPlanFields.ofRenewalDate).ValueChanged Then
              'If CMT from an Approval Membership then the Renewal Date has been reset so need to update OPS Due Date
              If vOldMemberType Is Nothing Then vOldMemberType = mvEnv.MembershipType((mvClassFields(PaymentPlanFields.ofMembershipType).SetValue))
              If vOldMemberType.ApprovalMembership Then vNPDDateReset = True 'Force change of DueDate to RenewalDate
            ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And Not RenewalPending And mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = 0 And mvClassFields(PaymentPlanFields.ofNextPaymentDue).ValueChanged And mvClassFields(PaymentPlanFields.ofRenewalDate).ValueChanged And vAdvanceRenewalDate Then
              vNPDDateReset = True
            End If

            Select Case pCreationReason
              Case OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance
                If RenewalPending = True Then
                  'Need to roll vRenewalDate forward (payment has cleared arrears only so far and so RenewalDate/RenewalPending are unchanged)
                  vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
                ElseIf StartMonth > 0 Then
                  'If StartMonth is set then use NextPaymentDue date instead of RenewalDate
                  If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPaymentPlanStartMonth) Then
                    vDate = NextPaymentDue
                    While CDate(vDate) < CDate(vRenewalDate)
                      If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                        vDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, PaymentFrequencyInterval, CDate(vDate)))
                      Else
                        vDate = AddMonths(vRenewalDate, vDate, PaymentFrequencyInterval)
                      End If
                    End While
                    If CDate(vDate) >= CDate(vRenewalDate) Then vRenewalDate = vDate
                  End If
                End If

              Case OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType
                If mvClassFields.Item(PaymentPlanFields.ofOrderTerm).ValueChanged Then
                  'CMT has moved RenewalDate backwards so update OPS DueDate
                  If CDate(CalculatePreviousOPSRenewalDate(vRenewalDate, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType)) > CDate(vRenewalDate) Then vNPDDateReset = True
                End If

              Case OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance
                If RenewalPending = False And (mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = 0 And Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) > 0) And (mvClassFields(PaymentPlanFields.ofNextPaymentDue).ValueChanged = False And mvClassFields(PaymentPlanFields.ofRenewalDate).ValueChanged = False) Then
                  'PP Maint reduced Balance to zero, reset RenewalPending, but left RenewalDate unchanged
                  'Create the ops as due on the NextPaymentDue date instead of the RenewalDate
                  vRenewalDate = mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value
                  vBalance = 0
                ElseIf RenewalPending = True And mvAutoPaymentCreated = True Then
                  'Just added a new Auto Pay Method and the previous payments are being ignored and so provisional ops being created/updated
                  vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
                ElseIf (DetailsAmended = True Or DetailsAmendedFinancial = True) And (CDate(RenewalDate) < CDate(pScheduleStartDate)) And Balance = 0 And PaymentFrequencyFrequency = 1 Then
                  'Regular DD/CCA with Balance of zero - Need to create provisional OPS so ensure we have the correct RenewalDate
                  vRenewalDate = RenewalDate
                  While CDate(vRenewalDate) < CDate(pScheduleStartDate)
                    vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
                  End While
                  vNPDDateReset = True
                  If vProvOPSFound = True Then
                    If vProvSchPayments.Count() = 1 Then
                      vOldRenewalDate = vRenewalDate
                      If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
                        'Paid by DD/CCA and so see if previous renewal date has a claim date after pScheduleStartDate
                        vClaimDate = ""
                        vRenewalDate = CalculateRenewalDate(vRenewalDate, False) 'Go back 1 renewal period
                        vClaimDate = FindNextClaimDate(vRenewalDate)
                        If IsDate(vClaimDate) Then
                          If CDate(vClaimDate) > CDate(pScheduleStartDate) Then
                            'The claim date is after pScheduleStartDate
                            vOPS = CType(vProvSchPayments.Item(1), OrderPaymentSchedule)
                            If CDate(vOPS.DueDate) > CDate(vRenewalDate) Then vRenewalDate = vOldRenewalDate 'May have already claimed this payment so leave RenewalDate as previously calculated
                          Else
                            'May have already claimed this payment so leave RenewalDate as previously calculated
                            vRenewalDate = vOldRenewalDate
                          End If
                        Else
                          'Just in case!
                          vRenewalDate = vOldRenewalDate
                        End If
                      End If
                    End If
                  End If
                ElseIf mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged = True And mvAutoPayment = False AndAlso mvAutoPaymentCreated = False AndAlso RenewalPending = True And Balance > 0 Then
                  If CDate(pScheduleStartDate) > CDate(vRenewalDate) Then
                    'Changed PaymentFrequency and previous payments ignored so create record for next renewal
                    vRenewalDate = CalculateRenewalDate(vRenewalDate, True)
                  End If
                End If
            End Select

            vClaimDate = ""
            If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
              vClaimDate = FindNextClaimDate(vRenewalDate) 'mvClassFields(ofRenewalDate).Value)
              If Len(vClaimDate) > 0 Then
                If CDate(vClaimDate) < CDate(vAutoStartDate) Then vClaimDate = FindNextClaimDate(vAutoStartDate)
              End If
              If Len(vClaimDate) = 0 Then vCreate = False
            End If

            If vCreate Then
              If vInAdvanceAmount > vBalance Then vBalance = vInAdvanceAmount
              vAmountOS = FixTwoPlaces(vBalance - vInAdvanceAmount)
              Dim vDueDate As Date = GetProvisionalOPSDueDate(Date.Parse(vRenewalDate))
              If (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes OrElse CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) AndAlso IsDate(vClaimDate) Then
                If vDueDate.CompareTo(Date.Parse(vRenewalDate)) <> 0 Then vClaimDate = FindNextClaimDate(vDueDate.ToString(CAREDateFormat))
                If IsDate(vClaimDate) Then
                  If Date.Parse(vClaimDate).CompareTo(Date.Parse(vAutoStartDate)) < 0 Then vClaimDate = FindNextClaimDate(vAutoStartDate)
                End If
              End If

              'if payment method is SO and the new renewal date > due date then create a new provisional line instead of updating
              If vOPS IsNot Nothing AndAlso PaymentMethod = mvEnv.GetConfig("pm_so") AndAlso CDate(vRenewalDate) > CDate(vOPS.DueDate) Then
                vSOCreateProvOPS = False
              End If
              If vProvOPSFound = True AndAlso vSOCreateProvOPS = True Then
                'Keep the provisional line
                vOPS = CType(vProvSchPayments.Item(1), OrderPaymentSchedule)
                If vNPDDateReset = False Then vDueDate = Date.Parse(vOPS.DueDate)
                If IsDate(vClaimDate) AndAlso vDueDate <> CDate(vRenewalDate) Then vClaimDate = FindNextClaimDate(vDueDate.ToString(CAREDateFormat))
                vOPS.Update(vDueDate.ToString(CAREDateFormat), vBalance, vAmountOS, 0, vClaimDate, vOPS.RevisedAmount, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance)
                vProvOPSFound = False
              Else
                vOPS = New OrderPaymentSchedule
                vOPS.Init(mvEnv)
                vOPS.Create(mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue, vDueDate.ToString(CAREDateFormat), vBalance, vAmountOS, 0, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance, vClaimDate, True)
                mvScheduledPayments.Add(vOPS)
              End If
            End If
          Else
            'Renewal amount = 0 so no ops record needed
            If vProvOPSFound = True Then
              For Each vOPS In vProvSchPayments
                If mvEnv.Connection.GetCount("order_payment_history", Nothing, "order_number = " & PlanNumber & " AND scheduled_payment_number = " & vOPS.ScheduledPaymentNumber) = 0 Then
                  'No payments so delete this record
                  vOPS.Delete()
                  mvScheduledPayments.Remove(CStr(vOPS.ScheduledPaymentNumber))
                Else
                  'Update to show nothing outstanding
                  vOPS.Update(vOPS.DueDate, 0, 0, 0, "", "", OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrRenewalsReminders)
                End If
              Next vOPS
              vProvOPSFound = False
            End If

            'Now we need to create a new record for the following renewal period
            'Just like Batch Posting would have done when the balance was paid
            If mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = 0 And pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan Then
              'Do nothing
            ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType And (DateDiff(Microsoft.VisualBasic.DateInterval.Year, CDate(mvClassFields(PaymentPlanFields.ofOrderDate).Value), CDate(RenewalDate)) = CDbl("99")) And Balance = 0 Then
              'Do nothing as renewal date already rolled forward
            Else
              vNextPayDue = vRenewalDate
            End If
            Dim vDueDate As Date = GetProvisionalOPSDueDate(Date.Parse(vNextPayDue))
            vOPS = New OrderPaymentSchedule
            vOPS.Init(mvEnv)
            vOPS.Create(mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue, vDueDate.ToString(CAREDateFormat), 0, 0, 0, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance, "", True)
            mvScheduledPayments.Add(vOPS)
          End If
        End If
      End If

      'If Importing cancelled Payment Plan then set payment schedule records as cancelled
      'where amount_outstanding > 0 and scheduled_payment_status not F, S, A (Fully Paid, Skipped Payment, Arrears)
      'Note - This is the same criteria used when cancelling a Payment Plan
      If vImportCancelPP = True And mvScheduledPayments.Count() > 0 Then
        For Each vOPS In mvScheduledPayments
          Select Case vOPS.ScheduledPaymentStatus
            Case OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsFullyPaid, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsSkippedPayment, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsArrears
              'Do Nothing
            Case Else
              If vOPS.AmountOutstanding > 0 Then vOPS.SetCancelled()
          End Select
        Next vOPS
      End If

      'Save the payment schedules if required
      If mvScheduledPayments.Count() > 0 And pSaveSchedule = True Then
        If vImportCancelPP = False Then   'Importing a cancelled payment plan does not need to set any changes
          Dim vChangeDate As Date = Date.Today
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrRenewalsReminders Then vChangeDate = CDate(vStartDate)
          If CDate(StartDate) > vChangeDate Then vChangeDate = CDate(StartDate) 'PaymentPlan has not started yet so use StartDate
          If pCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Then
            'BR19786 Do not look for Payment Plan Changes when making a Payment. The Paymnet does not alter the Payment Plan Value
            mvPaymentPlanChange.GenerateChanges(mvScheduledPayments, pCreationReason, vChangeDate)
          End If
        End If

        If mvClassFields(PaymentPlanFields.ofPaymentFrequency).SetValue.Length > 0 Then
          Dim vOpsCount As Integer = mvScheduledPayments.Count
          Dim vFrequency As PaymentFrequency = mvEnv.GetPaymentFrequency((mvClassFields(PaymentPlanFields.ofPaymentFrequency).SetValue))
          If (((ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsNew) = ProportionalBalanceConfigSettings.pbcsNew) OrElse
                   ((ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment)) AndAlso
                    (String.Compare(mvEnv.GetConfig("split_halfyearly_payments", "N"), "Y", True) = 0) AndAlso PaymentFrequencyFrequency = 2 AndAlso (vFrequency.Frequency <> PaymentFrequencyFrequency) AndAlso
                    FixedRenewalCycle AndAlso DateDiff(DateInterval.Month, CDate(Today), CDate(vRenewalDate)) >= 6 AndAlso vFrequency.Frequency = 1 Then
            For Each vOPS In mvScheduledPayments
              If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType And Balance <> GetOpsBalance(mvScheduledPayments) Then
                If vOPS.AmountOutstanding > 0 AndAlso (DateDiff(DateInterval.Month, CDate(vOPS.DueDate), CDate(vRenewalDate)) >= 6 OrElse vOPS.DueDate = vRenewalDate) And vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue Then
                  Dim vIncrementAmount As Double = FixTwoPlaces(vOPS.AmountOutstanding / 2)
                  Dim vOpsDueDate As String = vOPS.DueDate
                  Dim vOpsAmount As Double = vOPS.AmountDue
                  vOPS.Update(vOPS.DueDate, vIncrementAmount, vIncrementAmount, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount)   'Update this OPS but don't save it
                  vOPS = New OrderPaymentSchedule
                  vOPS.Init(mvEnv)
                  vNextPayDue = AddMonths(Today.ToString, vOpsDueDate, PaymentFrequencyInterval)
                  vOPS.Create(PlanNumber, vNextPayDue, vIncrementAmount, vIncrementAmount, 0, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType, , )
                  mvScheduledPayments.Add(vOPS)
                  Exit For
                End If
              Else
                If vOPS.AmountOutstanding > 0 AndAlso (DateDiff(DateInterval.Month, CDate(vOPS.DueDate), CDate(vRenewalDate)) >= 6 OrElse vOPS.DueDate = vRenewalDate) Then
                  If vOpsCount < 2 Then
                    Dim vIncrementAmount As Double = FixTwoPlaces(Balance / 2)
                    Dim vOpsDueDate As String = vOPS.DueDate
                    Dim vOpsAmount As Double = vOPS.AmountDue
                    vOPS.Update(vOPS.DueDate, vIncrementAmount, vIncrementAmount, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount)   'Update this OPS but don't save it
                    vOPS = New OrderPaymentSchedule
                    vOPS.Init(mvEnv)
                    vNextPayDue = AddMonths(Today.ToString, vOpsDueDate, PaymentFrequencyInterval)
                    vOPS.Create(PlanNumber, vNextPayDue, vIncrementAmount, vIncrementAmount, 0, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance, , )
                    mvScheduledPayments.Add(vOPS)
                  ElseIf vOpsCount = 2 Then
                    Dim vIncrementAmount As Double = FixTwoPlaces(Balance / 2)
                    Dim vOpsDueDate As String = vOPS.DueDate
                    Dim vOpsAmount As Double = vOPS.AmountDue
                    If vOPS.DueDate = RenewalDate Then
                      vNextPayDue = AddMonths(Today.ToString, Today.ToString, PaymentFrequencyInterval)
                      vOPS.Update(vNextPayDue, vIncrementAmount, vIncrementAmount, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance)   'Update this OPS but don't save it                  
                    Else
                      vOPS.Update(vOPS.DueDate, vIncrementAmount, vIncrementAmount, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount)   'Update this OPS but don't save it                  
                    End If
                  End If
                End If
              End If
            Next vOPS
          End If
        End If

        If mvClassFields(PaymentPlanFields.ofPaymentFrequency).SetValue.Length > 0 Then
          Dim vFrequency As PaymentFrequency = mvEnv.GetPaymentFrequency((mvClassFields(PaymentPlanFields.ofPaymentFrequency).SetValue))
          If (((ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsNew) = ProportionalBalanceConfigSettings.pbcsNew) OrElse
                   ((ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment)) AndAlso
                    (String.Compare(mvEnv.GetConfig("split_halfyearly_payments", "N"), "Y", True) = 0) AndAlso PaymentFrequencyFrequency = 2 AndAlso (vFrequency.Frequency <> PaymentFrequencyFrequency) AndAlso
                    FixedRenewalCycle AndAlso DateDiff(DateInterval.Month, CDate(Today), CDate(vRenewalDate)) > 6 AndAlso vFrequency.Frequency = 12 Then
            For Each vOPS In mvScheduledPayments
              If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Then
                If Balance > 0 AndAlso (DateDiff(DateInterval.Month, CDate(vOPS.DueDate), CDate(vRenewalDate)) >= 6 OrElse vOPS.DueDate = vRenewalDate) AndAlso
                  vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue Then
                  Dim vIncrementAmount As Double = FixTwoPlaces(vOPS.AmountOutstanding / 2)
                  Dim vOpsDueDate As String = vOPS.DueDate
                  Dim vOpsAmount As Double = vOPS.AmountDue
                  vOPS.Update(vOPS.DueDate, vIncrementAmount, vIncrementAmount, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount)   'Update this OPS but don't save it
                  vOPS = New OrderPaymentSchedule
                  vOPS.Init(mvEnv)
                  vNextPayDue = AddMonths(Today.ToString, vOpsDueDate, PaymentFrequencyInterval)
                  vOPS.Create(PlanNumber, vNextPayDue, vIncrementAmount, vIncrementAmount, 0, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType, , )
                  mvScheduledPayments.Add(vOPS)
                  Exit For
                End If
              Else
                If Balance > 0 AndAlso (DateDiff(DateInterval.Month, CDate(vOPS.DueDate), CDate(vRenewalDate)) >= 6 OrElse vOPS.DueDate = vRenewalDate) Then
                  Dim vIncrementAmount As Double = FixTwoPlaces(Balance / 2)
                  Dim vOpsDueDate As String = vOPS.DueDate
                  Dim vOpsAmount As Double = vOPS.AmountDue
                  vOPS.Update(vOPS.DueDate, vIncrementAmount, vIncrementAmount, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount)   'Update this OPS but don't save it               
                End If
              End If

            Next vOPS
          End If
        End If

        If mvClassFields(PaymentPlanFields.ofPaymentFrequency).SetValue.Length > 0 Then
          Dim vFrequency As PaymentFrequency = mvEnv.GetPaymentFrequency((mvClassFields(PaymentPlanFields.ofPaymentFrequency).SetValue))
          If (((ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsNew) = ProportionalBalanceConfigSettings.pbcsNew) OrElse
                   ((ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment)) AndAlso
                    (String.Compare(mvEnv.GetConfig("split_halfyearly_payments", "N"), "Y", True) = 0) AndAlso PaymentFrequencyFrequency = 2 AndAlso (vFrequency.Frequency <> PaymentFrequencyFrequency) AndAlso
                    FixedRenewalCycle AndAlso DateDiff(DateInterval.Month, CDate(Today), CDate(vRenewalDate)) >= 6 AndAlso vFrequency.Frequency = 6 Then
            For Each vOPS In mvScheduledPayments
              If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Then
                If Balance > 0 AndAlso (DateDiff(DateInterval.Month, CDate(vOPS.DueDate), CDate(vRenewalDate)) >= 6 OrElse vOPS.DueDate = vRenewalDate) Then
                  Dim vIncrementAmount As Double = FixTwoPlaces(Balance / 2)
                  Dim vOpsDueDate As String = vOPS.DueDate
                  Dim vOpsAmount As Double = vOPS.AmountDue
                  vOPS.Update(vOPS.DueDate, vIncrementAmount, vIncrementAmount, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount)   'Update this OPS but don't save it 
                  vOPS = New OrderPaymentSchedule
                  vOPS.Init(mvEnv)
                  vNextPayDue = AddMonths(Today.ToString, vOpsDueDate, PaymentFrequencyInterval)
                  vOPS.Create(PlanNumber, vNextPayDue, vIncrementAmount, vIncrementAmount, 0, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType, , )
                  mvScheduledPayments.Add(vOPS)
                  Exit For
                End If
              Else
                If Balance > 0 AndAlso (DateDiff(DateInterval.Month, CDate(vOPS.DueDate), CDate(vRenewalDate)) >= 6 OrElse vOPS.DueDate = vRenewalDate) Then
                  Dim vIncrementAmount As Double = FixTwoPlaces(Balance / 2)
                  Dim vOpsDueDate As String = vOPS.DueDate
                  Dim vOpsAmount As Double = vOPS.AmountDue
                  vOPS.Update(vOPS.DueDate, vIncrementAmount, vIncrementAmount, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount)   'Update this OPS but don't save it               
                End If
              End If
            Next vOPS
          End If
        End If


        If mvEnv.Connection.InTransaction = False Then
          mvEnv.Connection.StartTransaction()
          vTrans = True
        End If

        For Each vOPS In mvScheduledPayments
          vOPS.Save(pAmendedBy, pAudit)
        Next vOPS
        If pCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Then
          'BR19786 Do not look for Payment Plan Changes when making a Payment. The Paymnet does not alter the Payment Plan Value
          mvPaymentPlanChange.SaveChanges()
        End If
        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrBatchPosting Then mvPaymentPlanChange = Nothing 'We might come in here for a 2nd time but don't want this record

      End If
      If vTrans Then
        If pSaveSchedule Then
          mvEnv.Connection.CommitTransaction()
        Else
          mvEnv.Connection.RollbackTransaction(False)
        End If
      End If

      If vCreate And mvScheduledPayments.Count() > 0 Then
        mvClassFields(PaymentPlanFields.ofPaymentScheduleAmendedOn).Value = TodaysDate()
        If (pCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInitialDataSetup) And pSaveSchedule = True Then mvEnv.AddJournalRecord(JournalTypes.jnlPayPlanPaymentSchedule, vJnlOperation, mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue, mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
      ElseIf pShowError Then
        'BR14967: If not displaying the error (i.e. dealing with FirstCMT) then do not clear PaymentScheduleAmendedOn as for First CMT there
        'may not be any new schedule records to be created but for Second CMT we must delete the existing OPS records and for which this value must be set.
        mvClassFields(PaymentPlanFields.ofPaymentScheduleAmendedOn).Value = ""
        RaiseError(DataAccessErrors.daePaymentScheduleNotCreated, (mvClassFields(PaymentPlanFields.ofOrderNumber).Value))
      End If
    End Sub
    '# Stop

    Public Function GetOpsBalance(ByVal pOpsCollection As Collection) As Double
      Dim vOutStandingAmount As Double = 0
      If pOpsCollection IsNot Nothing Then
        For Each vOps As OrderPaymentSchedule In pOpsCollection
          vOutStandingAmount = vOutStandingAmount + vOps.AmountOutstanding
        Next
      End If
      Return vOutStandingAmount
    End Function

    Public Function FindNextClaimDate(ByVal pDueDate As String, Optional ByVal pUseAutoStartDate As Boolean = False) As String
      'Return the next claim date for the due date
      'pUseAutoStartDate:
      ' - If set, the calculations will be based upon both the DueDate and the CC/DD StartDate
      ' - Only used when we MUST return the next claim date and not for normal usage
      Dim vBankAccount As BankAccount
      Dim vBAClaimDay As BankAccountClaimDay
      Dim vSchClaimDate As ScheduledClaimDate
      Dim vAutoStartDate As String = ""
      Dim vClaimDate As String = ""
      Dim vClaimDay As String = ""
      Dim vLatestDueDate As String = ""
      Dim vCount As Integer
      Dim vMonth As Integer
      Dim vType As String
      Dim vYear As Integer
      Dim vClaimFound As Boolean
      Dim vMaxDate As String = ""

      If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          vType = "DD"
          vBankAccount = mvEnv.BankAccount(DirectDebit.BankAccount)
          vAutoStartDate = DirectDebit.StartDate
        Else
          vType = "CC"
          vBankAccount = mvEnv.BankAccount(CreditCardAuthority.BankAccount)
          vAutoStartDate = CreditCardAuthority.StartDate
        End If

        Select Case AutoPaymentClaimDateMethod
          Case AutoPaymentClaimDateMethods.apcdmDates
            'Claim Dates
            For Each vSchClaimDate In vBankAccount.GetClaimDates(vType)
              vMaxDate = vSchClaimDate.ClaimDate
            Next
            If Not IsDate(vMaxDate) OrElse CDate(vMaxDate) < DateAdd("yyyy", 2, TodaysDate) Then
              RaiseError(DataAccessErrors.daeMissingClaimDates, "Dates", vBankAccount.BankAccountCode, vType)
            End If

            For Each vSchClaimDate In vBankAccount.GetClaimDates(vType)
              vCount = vCount + 1
              vLatestDueDate = vSchClaimDate.LatestDueDate
              If CDate(vLatestDueDate) >= CDate(pDueDate) Then vClaimFound = True
              If vClaimFound = True And pUseAutoStartDate = True Then
                If CDate(vSchClaimDate.ClaimDate) < CDate(vAutoStartDate) Then vClaimFound = False
              End If
              If vClaimFound Then Exit For
            Next vSchClaimDate
            If Len(vLatestDueDate) > 0 Then
              'Due Date to be less or equal to latest due date
              If vCount > 0 Then
                vSchClaimDate = CType(vBankAccount.GetClaimDates(vType).Item(vCount), ScheduledClaimDate)
                vClaimDate = vSchClaimDate.ClaimDate
              End If
            ElseIf vBankAccount.GetClaimDates(vType).Count() = 0 Then
              'No Claim Dates so error
              RaiseError(DataAccessErrors.daeMissingClaimDates, "Dates", (vBankAccount.BankAccountCode), vType)
            End If

          Case AutoPaymentClaimDateMethods.apcdmDays
            'Claim Days
            If pUseAutoStartDate Then pDueDate = vAutoStartDate 'Find next ClaimDay after DD/CC StartDate
            vMonth = Month(CDate(pDueDate))
            vYear = Year(CDate(pDueDate))
            If mvClassFields(PaymentPlanFields.ofClaimDay).Value.Length > 0 Then
              'Always use this claim day (No need to check that it is valid)
              vClaimDay = CStr(mvClassFields(PaymentPlanFields.ofClaimDay).IntegerValue)
            ElseIf vBankAccount.GetClaimDays(vType).Count() = 0 Then
              'No Claim Days so error
              RaiseError(DataAccessErrors.daeMissingClaimDates, "Days", (vBankAccount.BankAccountCode), vType)
            Else
              'Find the next claim day from the day the next payment is due
              Do
                For Each vBAClaimDay In vBankAccount.GetClaimDays(vType)
                  vClaimDate = CStr(DateSerial(vYear, vMonth, vBAClaimDay.ClaimDay))
                  If CDate(vClaimDate) >= CDate(pDueDate) Then
                    'Claim date will be on/after the due date
                    vClaimDay = CStr(vBAClaimDay.ClaimDay)
                  End If
                  If vClaimDay.Length > 0 Then Exit For
                Next vBAClaimDay
                If Len(vClaimDay) = 0 Then
                  vMonth = vMonth + 1
                  If vMonth > 12 Then
                    vMonth = 1
                    vYear = vYear + 1
                  End If
                End If
              Loop While Len(vClaimDay) = 0
            End If
            If vClaimDay.Length > 0 Then
              vClaimDate = vBankAccount.GetRawClaimDate(vYear, vMonth, CInt(vClaimDay)).ToString(CAREDateFormat)
              If CDate(vClaimDate) < CDate(pDueDate) Then
                'Go to next month
                vClaimDate = CDate(vClaimDate).AddMonths(1).ToString(CAREDateFormat)
              End If
              Dim vPPStartDate As Date = CDate(StartDate)
              If vPPStartDate.Day = 28 AndAlso Balance > 0 Then
                If mvClassFields.Item(PaymentPlanFields.ofOrderDate).ValueChanged = True AndAlso IsDate(mvClassFields.Item(PaymentPlanFields.ofOrderDate).SetValue) Then
                  If IsDate(vAutoStartDate) AndAlso vPPStartDate > CDate(vAutoStartDate) Then
                    'Re-creationg the OSP has, temporarily, altered the StartDate so use the origial value here
                    vPPStartDate = CDate(mvClassFields.Item(PaymentPlanFields.ofOrderDate).SetValue)
                  End If
                End If
              End If
              vClaimDate = vBankAccount.GetAdjustedClaimDate(CDate(vClaimDate), CInt(vClaimDay), vType).ToString(CAREDateFormat)
            End If

          Case Else 'apcdmNextPayDue
            'Next Payment Due date
            'If pUseAutoStartDate is set then ClaimDate will be DD/CC StartDate
            vClaimDate = If(pUseAutoStartDate = True, vAutoStartDate, pDueDate)
        End Select
      End If
      Return vClaimDate
    End Function

    Public Function UpdateScheduledPaymentClaimDates(Optional ByVal pProcessArrears As Boolean = False) As Boolean
      'Update the claim date of existing order_payment_schedule lines for DD / CCCA
      'Setting pProcessArrears will cause the arrears config to be checked (used by re-instatement of auto pay method)
      Dim vRS As CDBRecordSet
      Dim vFields As New CDBFields
      Dim vOPS As New OrderPaymentSchedule
      Dim vPrevOPS As OrderPaymentSchedule
      Dim vAmountDue As Double
      Dim vClaimDate As String
      Dim vCount As Integer
      Dim vDateOperator As CDBField.FieldWhereOperators
      Dim vDueDate As String
      Dim vExpBalance As Double
      Dim vRenewalDate As String
      Dim vStartDate As String
      Dim vSQL As String
      Dim vTrans As Boolean
      Dim vUpdate As Boolean
      Dim vOPSUpdated As Boolean

      If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        vDueDate = TodaysDate()
        vDateOperator = CDBField.FieldWhereOperators.fwoGreaterThan
        vStartDate = TodaysDate()
        If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          If CDate(mvDirectDebit.StartDate) > CDate(vStartDate) Then vStartDate = mvDirectDebit.StartDate
        Else
          If CDate(mvCreditCardAuthority.StartDate) > CDate(vStartDate) Then vStartDate = mvCreditCardAuthority.StartDate
        End If
        vRenewalDate = Me.RenewalDate
        If Me.RenewalPending = True Then vRenewalDate = Me.CalculateRenewalDate(vRenewalDate, True)

        If pProcessArrears Then
          Select Case mvEnv.GetConfig("fp_arrears_claim_method_create")
            Case "EVEN_SPREAD", "NEXT_CLAIM"
              vDueDate = Me.CalculateRenewalDate(vRenewalDate, False)
              vDateOperator = CDBField.FieldWhereOperators.fwoGreaterThanEqual
          End Select
        End If

        vOPS.Init(mvEnv)
        mvScheduledPayments = New Collection
        'Select all ops with status of Due/Part Paid/Provisional and within due period
        With vFields
          .Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue)
          .Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, "'D','P','V'", CDBField.FieldWhereOperators.fwoIn)
          .Add("due_date", CDBField.FieldTypes.cftDate, vDueDate, vDateOperator)
          .Add("amount_outstanding", CDBField.FieldTypes.cftNumeric, "0", CDBField.FieldWhereOperators.fwoGreaterThan)
        End With
        vSQL = "SELECT " & vOPS.GetRecordSetFields(OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll) & " FROM order_payment_schedule ops WHERE "
        vSQL = vSQL & mvEnv.Connection.WhereClause(vFields) & " ORDER BY due_date"
        vRS = mvEnv.Connection.GetRecordSet(vSQL)
        While vRS.Fetch() = True
          vOPS = New OrderPaymentSchedule
          vOPS.InitFromRecordSet(mvEnv, vRS, OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll)
          mvScheduledPayments.Add(vOPS, CStr(vOPS.ScheduledPaymentNumber))
        End While
        vRS.CloseRecordSet()

        vUpdate = True
        vOPSUpdated = False
        If pProcessArrears = True And (mvScheduledPayments.Count() > 2 And mvEnv.GetConfig("fp_arrears_claim_method_create") = "EVEN_SPREAD") Then
          'Need to even spread any payment amounts that can not be claimed
          For Each vOPS In mvScheduledPayments
            vClaimDate = Me.FindNextClaimDate(vOPS.DueDate)
            If vClaimDate.Length > 0 Then
              If CDate(vStartDate) > CDate(vClaimDate) Then
                'Set OPS as fully paid
                vOPS.Update(vOPS.DueDate, vOPS.AmountDue, 0, vOPS.ExpectedBalance)
              Else
                vOPS.SetClaimDate(vClaimDate)
                vCount = vCount + 1
              End If
              vOPSUpdated = True
            Else
              'Error so exit
              vUpdate = False
            End If
            If vUpdate = False Then Exit For
          Next vOPS
          If vUpdate = True And (mvScheduledPayments.Count() <> vCount) Then
            'Unable to set ClaimDate on some payments so even-spread the amounts
            vExpBalance = Balance
            vAmountDue = FixTwoPlaces(vExpBalance / vCount)
            If FixTwoPlaces(vAmountDue * vCount) < vExpBalance Then vAmountDue = vAmountDue + 0.01
            For Each vOPS In mvScheduledPayments
              If vOPS.AmountOutstanding > 0 Then
                If vExpBalance < vAmountDue Then vAmountDue = vExpBalance
                vExpBalance = FixTwoPlaces(vExpBalance - vAmountDue)
                vOPS.Update(vOPS.DueDate, vAmountDue, vAmountDue, vExpBalance, vOPS.ClaimDate)
              End If
            Next vOPS
          End If
        Else
          'Just calculate the next ClaimDate
          For Each vOPS In mvScheduledPayments
            vClaimDate = Me.FindNextClaimDate(vOPS.DueDate)
            If Len(vClaimDate) > 0 And pProcessArrears = True Then
              'Re-instatement - ensure ClaimDate on/after vStartdate
              If (CDate(vStartDate) > CDate(vClaimDate)) And mvEnv.GetConfig("fp_arrears_claim_method_create") = "NEXT_CLAIM" Then
                vPrevOPS = vOPS
                Do
                  vPrevOPS = CType(mvEnv.GetNextItem(mvScheduledPayments, vPrevOPS), OrderPaymentSchedule)
                  If Not (vPrevOPS Is Nothing) Then
                    If CDate(vRenewalDate) > CDate(vPrevOPS.DueDate) Then
                      'OPS due before renewal
                      vClaimDate = Me.FindNextClaimDate(vPrevOPS.DueDate)
                    End If
                  End If
                Loop While (CDate(vStartDate) > CDate(vClaimDate)) And (Not (vPrevOPS Is Nothing))
              End If
              If vClaimDate.Length > 0 Then
                If CDate(vStartDate) > CDate(vClaimDate) Then vClaimDate = Me.FindNextClaimDate(vStartDate)
              End If
            End If
            If vClaimDate.Length > 0 Then
              vOPS.SetClaimDate(vClaimDate)
              vOPSUpdated = True
            Else
              'Error so exit
              vUpdate = False
            End If
            If vUpdate = False Then Exit For
          Next vOPS
        End If

        vPrevOPS = Nothing
        If vUpdate = True And vOPSUpdated = True Then
          'Amalgamate any records that have the same ClaimDate
          For Each vOPS In mvScheduledPayments
            If Not vPrevOPS Is Nothing Then
              If vOPS.AmountOutstanding > 0 And vPrevOPS.AmountOutstanding > 0 Then
                If CDate(vPrevOPS.ClaimDate) = CDate(vOPS.ClaimDate) Then
                  vOPS.Update(vPrevOPS.DueDate, FixTwoPlaces(vOPS.AmountDue + vPrevOPS.AmountDue), FixTwoPlaces(vOPS.AmountOutstanding + vPrevOPS.AmountOutstanding), vOPS.ExpectedBalance, vOPS.ClaimDate)
                  vPrevOPS.Update(vPrevOPS.DueDate, vPrevOPS.AmountDue, 0, vPrevOPS.ExpectedBalance) 'Clear the ClaimDate
                End If
              End If
            End If
            vPrevOPS = vOPS
          Next vOPS
        End If

        'So as to ensure that all or no records are updated to the new claim dates, update here
        If vUpdate = True And vOPSUpdated = True Then
          If mvEnv.Connection.InTransaction = False Then
            mvEnv.Connection.StartTransaction()
            vTrans = True
          End If
          For Each vOPS In mvScheduledPayments
            If vOPS.AmountOutstanding = 0 Then
              'If we have just updated OPS to be fully paid then delete it
              If vOPS.HasPayments Then
                vOPS.Save()
              Else
                vOPS.Delete()
              End If
            Else
              vOPS.Save()
            End If
          Next vOPS
          If vOPSUpdated Then mvClassFields.Item(PaymentPlanFields.ofPaymentScheduleAmendedOn).Value = TodaysDate()
          If vTrans = True Then mvEnv.Connection.CommitTransaction()

          mvEnv.AddJournalRecord(JournalTypes.jnlPayPlanPaymentSchedule, JournalOperations.jnlUpdate, mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue, mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
        End If
      End If
      UpdateScheduledPaymentClaimDates = vUpdate
    End Function

    Public Function CalculateNextPaymentDue(ByVal pOldNextPaymentDue As String, ByVal pRenewalDate As String, ByVal pPaymentAmount As Double, ByVal pFrequencyAmount As Double, ByVal pBalance As Double, Optional ByVal pOPS As OrderPaymentSchedule = Nothing) As String
      'Return a string containing the NextPaymentDue date
      Dim vOPS As OrderPaymentSchedule = Nothing
      Dim vNPDDate As String = ""
      Dim vSetNPD As Boolean

      'mvEnv.ProcessHitPoint vST.ProcedureName, 1      'UpdateNextPaymentDue

      If Not (pOPS Is Nothing) Then
        'Set the next payment due date to be the next due date after the current payment
        If pBalance = 0 Then
          If StartMonth = 0 Then vNPDDate = pRenewalDate
        Else
          If System.Math.Abs(System.Math.Abs(pPaymentAmount) - pOPS.AmountDue) < 0.02 Then
            'Full payment amount has been made
            'If a part payment is made then the original calculations below will be used
            If PlanType = CDBEnvironment.ppType.pptLoan Then pOldNextPaymentDue = pOPS.DueDate 'Assume payment made on due date
            For Each vOPS In mvScheduledPayments
              If CDate(pOldNextPaymentDue) = CDate(vOPS.DueDate) Then vSetNPD = True
              If vSetNPD Then Exit For
            Next vOPS
            If vSetNPD Then
              If pPaymentAmount >= 0 Then
                'Payment
                vOPS = CType(mvEnv.GetNextItem(mvScheduledPayments, vOPS), OrderPaymentSchedule)
              Else
                'Reversal
                vOPS = CType(mvEnv.GetPreviousItem(mvScheduledPayments, vOPS), OrderPaymentSchedule)
              End If
              If Not (vOPS Is Nothing) Then vNPDDate = vOPS.DueDate
            End If
          ElseIf PaymentFrequencyInterval = 12 Then
            vNPDDate = pRenewalDate
          End If
        End If
        vSetNPD = False 'Reset in case it is used below
      End If

      If vNPDDate.Length = 0 AndAlso PlanType = CDBEnvironment.ppType.pptLoan Then
        'For a Loan, just add the appropriate interval to the paid OPS due date
        vNPDDate = If((pOPS Is Nothing), pOldNextPaymentDue, pOPS.DueDate)
        If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
          vNPDDate = Date.Parse(vNPDDate).AddDays(PaymentFrequencyInterval).ToString(CAREDateFormat)
        Else
          vNPDDate = AddMonths(StartDate, vNPDDate, PaymentFrequencyInterval)
        End If
      End If

      If Len(vNPDDate) = 0 Then
        If ((pBalance = 0 Or pBalance = RenewalAmount) And Not ContinuousRenewals) And StartMonth = 0 Then
          vNPDDate = pRenewalDate
          'TA BR 6345 6/1/2004: If we've rolled an auto-paid Pay Plan NPD back to
          'Order Start and config fp_auto_pay_delay is set, reset NPD accordingly.
          If CDate(vNPDDate) = CDate(StartDate) And AutoPaymentStatus = True And IntegerValue(mvEnv.GetConfig("fp_auto_pay_delay", "0")) > 0 Then
            If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
              vNPDDate = DirectDebit.StartDate
            ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
              vNPDDate = CreditCardAuthority.StartDate
            End If
          End If
        Else
          If System.Math.Abs(pPaymentAmount - pFrequencyAmount) < 0.02 Or pPaymentAmount = Val(mvClassFields(PaymentPlanFields.ofFirstAmount).Value) Then
            If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
              vNPDDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, PaymentFrequencyInterval, CDate(pOldNextPaymentDue)))
            Else
              If HasAutoPaymentMethod = True AndAlso FixedDDClaimDate = False Then
                Dim vAutoPayMethod As ppAutoPayMethods
                If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
                  vAutoPayMethod = ppAutoPayMethods.ppAPMDD
                ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
                  vAutoPayMethod = ppAutoPayMethods.ppAPMCCCA
                Else
                  vAutoPayMethod = ppAutoPayMethods.ppAPMSO
                End If
                Dim vBankAccount As BankAccount = Me.AutoPayBankAccount
                If vBankAccount.GetAutoPayDelayDays(vAutoPayMethod) > 0 Then
                  'Auto pay method with delayed start date and not using fixed claim dates
                  If mvEnv.GetPaymentPlanAutoPayDate(DateValue(StartDate), vAutoPayMethod, vBankAccount) = DateValue(pOldNextPaymentDue) Then
                    'Difference between Base & NPD is the delay, so set we need to set NPD to Base
                    vSetNPD = True
                    If Term < 0 And System.Math.Abs(Term) > 12 Then
                      If (mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlApplyIncentiveFreePeriod) = "A" And ResetOrderTerm <> ppResetOrderTerm.pprotNo) Then
                        'Incentive free period is after the payments have been made so don't include the free-period when calculating the NPD (BR12909)
                        pRenewalDate = CalculateRenewalDate(pRenewalDate, False)
                        pRenewalDate = CDate(pRenewalDate).AddYears(1).ToString(CAREDateFormat)
                      End If
                    End If
                  ElseIf PlanType = CDBEnvironment.ppType.pptMember And FixedRenewalCycle And PreviousRenewalCycle And (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 Then
                    'This is a pro-rated membership that uses a previous and fixed renewal cycle...
                    If mvEnv.GetPaymentPlanAutoPayDate(DateValue(Member.Joined), vAutoPayMethod, vBankAccount) = DateValue(pOldNextPaymentDue) Then
                      '... and the difference between member's Joined date & NPD is the delay, so set we need to set NPD to Base
                      vSetNPD = True
                    End If
                  End If
                  If vSetNPD Then vNPDDate = AddMonths(StartDate, pRenewalDate, -((PaymentFrequencyFrequency * PaymentFrequencyInterval) - NumberOfPaymentsMade(pBalance) * PaymentFrequencyInterval))
                End If
              End If
              If Not vSetNPD Then vNPDDate = AddMonths(BaseDate, pOldNextPaymentDue, PaymentFrequencyInterval)
            End If
          Else
            If PaymentFrequencyInterval = 12 Then
              vNPDDate = pRenewalDate
            Else
              If pBalance < RenewalAmount Then
                If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                  vNPDDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -((PaymentFrequencyFrequency * PaymentFrequencyInterval) - Int((FixTwoPlaces(RenewalAmount - pBalance)) / FrequencyAmount) * PaymentFrequencyInterval), CDate(pRenewalDate)))
                Else
                  vNPDDate = AddMonths(BaseDate, pRenewalDate, CInt(-((PaymentFrequencyFrequency * PaymentFrequencyInterval) - Int((FixTwoPlaces(RenewalAmount - pBalance)) / FrequencyAmount) * PaymentFrequencyInterval)))
                End If
              Else
                If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                  vNPDDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, (PaymentFrequencyFrequency * PaymentFrequencyInterval) - Int((FixTwoPlaces(pBalance + RenewalAmount)) / FrequencyAmount) * PaymentFrequencyInterval, CDate(pRenewalDate)))
                Else
                  vNPDDate = AddMonths(BaseDate, pRenewalDate, CInt(-((PaymentFrequencyFrequency * PaymentFrequencyInterval) - Int((FixTwoPlaces(pBalance - RenewalAmount)) / FrequencyAmount) * PaymentFrequencyInterval)))
                End If
              End If
            End If
          End If
        End If
      End If
      CalculateNextPaymentDue = vNPDDate
    End Function

    Private Function NumberOfPaymentsMade(ByVal pBalance As Double) As Integer
      Dim vAmountPaid As Double
      Dim vPeriodsPaid As Integer
      Dim vDiff As Double

      vAmountPaid = System.Math.Abs(RenewalAmount - pBalance)
      vPeriodsPaid = CInt(Int(vAmountPaid / FrequencyAmount))
      'Calculate the difference the Renewal Amount and (Frequency Amount * Frequency)
      'A difference in these two values will occur when the Renewal Amount is not equally divisible by 12
      vDiff = FixTwoPlaces(System.Math.Abs(RenewalAmount - (FrequencyAmount * PaymentFrequencyFrequency)))
      'If the difference between the amount paid and the amount that would've been paid for vPeriodsPaid + 1 is less than or equal to vDiff then we have paid one more period than was calculated
      'The difference is caused by a rounding error due to the Renewal Amount not being equally divisible by 12
      If FixTwoPlaces(System.Math.Abs(((vPeriodsPaid + 1) * FrequencyAmount) - vAmountPaid)) <= vDiff Then vPeriodsPaid = vPeriodsPaid + 1

      NumberOfPaymentsMade = vPeriodsPaid
    End Function

    Public Sub AddDirectDebitFromRecordSet(ByVal pRS As CDBRecordSet, ByRef pRSType As DirectDebit.DirectDebitRecordSetTypes)
      If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        mvDirectDebit = New DirectDebit
        mvDirectDebit.InitFromRecordSet(mvEnv, pRS, pRSType)
      End If
    End Sub

    Public Sub AddCreditCardAuthorityFromRecordSet(ByVal pRS As CDBRecordSet, ByRef pRSType As CreditCardAuthority.CreditCardAuthorityRecordSetTypes)
      If CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        mvCreditCardAuthority = New CreditCardAuthority
        mvCreditCardAuthority.InitFromRecordSet(mvEnv, pRS, pRSType)
      End If
    End Sub

    Public Sub AddStandingOrderFromRecordSet(ByVal pRS As CDBRecordSet, ByVal pRSType As StandingOrder.StandingOrderRecordSetTypes)
      If StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        mvStandingOrder = New StandingOrder
        mvStandingOrder.InitFromRecordSet(mvEnv, pRS, pRSType)
      End If
    End Sub

    Public Sub SetArrearsOnPaymentSchedule(ByVal pOPSNumbers As String)
      'pOPSNumbers = coma-seperated list of OPS Numbers
      Dim vUpdateFields As New CDBFields
      Dim vWhereFields As New CDBFields

      'Set ScheduledPaymentStatus = 'A' (Arrears)
      'AmountOutstanding is left unchanged as this shows the amount that has gone on to arrears
      vUpdateFields.Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, "A")
      vUpdateFields.AddAmendedOnBy(mvEnv.User.UserID)

      vWhereFields.Add("scheduled_payment_number", CDBField.FieldTypes.cftLong, pOPSNumbers, CDBField.FieldWhereOperators.fwoIn)

      If mvEnv.Connection.UpdateRecords("order_payment_schedule", vUpdateFields, vWhereFields) > 0 Then
        mvScheduledPayments = New Collection 'Reset the collection as the data has changed
      End If
    End Sub

    Private Function AnyPaymentsToSkip(ByRef pFound As Boolean) As OrderPaymentSchedule
      Dim vOPS As OrderPaymentSchedule = Nothing
      pFound = False
      For Each vOPS In ScheduledPayments
        Select Case vOPS.ScheduledPaymentStatus
          Case OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid
            If vOPS.AmountOutstanding > 0 Then pFound = True
          Case OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsProvisional
            If (PlanType = CDBEnvironment.ppType.pptCCCA Or PlanType = CDBEnvironment.ppType.pptDD Or PlanType = CDBEnvironment.ppType.pptSO) And vOPS.AmountOutstanding > 0 Then pFound = True
        End Select
        If pFound Then Exit For
      Next vOPS
      AnyPaymentsToSkip = vOPS
    End Function

    Public Function MembershipEligibleForGiftAid(ByVal pTransactionDate As String) As Boolean
      'Returns True if the membership type is eligible for Gift Aid
      'Gift Memberships only eligible for Gift Aid if:
      '  (i) Adult Membership when AdultGiftMemberEligibleGiftAid flag set
      ' (ii) Junior Membership type, and
      '(iii) Age of Member <= Gift Member Max Junior Age
      Dim vMember As Member
      Dim vEligible As Boolean
      Dim vJuniorMembers As Boolean 'Junior members for Gift Aid purposes

      If PlanType = CDBEnvironment.ppType.pptMember Then
        vEligible = True
        If GiftMembership Then
          Select Case MembershipType.MembershipLevel
            Case "A"
              'Adult Gift Membership only eligible for Gift Aid if the flag is set
              vEligible = MembershipType.AdultGiftMemberEligibleGiftAid
            Case Else '"J", "B"
              'Gifted Membership - Junior (J) or Both Adult & Junior (B)
              If Not (IsDate(pTransactionDate)) Then pTransactionDate = TodaysDate()

              If CurrentMembers.Count() = 0 Then LoadMembers()
              For Each vMember In CurrentMembers
                'Check if DateOfBirth + vMaxJuniorAge years is before pTransactionDate
                If Len(vMember.ContactDateOfBirth) = 0 Then
                  vEligible = False 'Adult Member
                Else
                  If CDate(vMember.ContactDateOfBirth).AddYears(vMember.GiftMemberMaxJuniorAge) < CDate(pTransactionDate) Then
                    'Member is aged above the max junior age
                    vEligible = False 'Adult Member
                  Else
                    vJuniorMembers = True 'Junior Member
                  End If
                End If
              Next vMember

              If MembershipType.MembershipLevel = "B" And vJuniorMembers = False Then
                'This is an Adult & Junior membership level and all members are adults
                vEligible = MembershipType.AdultGiftMemberEligibleGiftAid
              End If

          End Select
        End If
      End If
      MembershipEligibleForGiftAid = vEligible
    End Function

    Private Function CalculatePreviousOPSRenewalDate(ByVal pOldRenewalDate As String, ByVal pCreationReason As OrderPaymentSchedule.OrderPaymentScheduleCreationReasons) As String
      'During the creation of payment schedule for CMT / PP Maint, if the Plan Term or Payment Term was changed
      'then need to calculate what the previous renewal date would have been
      Dim vPaymentFrequency As PaymentFrequency
      Dim vMembershipType As MembershipType
      Dim vOldTerm As Integer
      Dim vRenewalDate As String = ""

      If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType Then
        vOldTerm = CInt(mvClassFields(PaymentPlanFields.ofOrderTerm).SetValue)
        vMembershipType = mvEnv.MembershipType((mvClassFields(PaymentPlanFields.ofMembershipType).SetValue))
        If RenewalPending = False Then pOldRenewalDate = CalculateRenewalDate(pOldRenewalDate, False) 'Date already rolled forward, so roll back

        If (vOldTerm <> mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue) Or (MembershipType.PaymentTerm <> vMembershipType.PaymentTerm) Then
          'Order Term or Payment Term has changed
          If vOldTerm < 0 Or mvClassFields(PaymentPlanFields.ofPaymentFrequency).ValueChanged Then
            vPaymentFrequency = mvEnv.GetPaymentFrequency((mvClassFields(PaymentPlanFields.ofPaymentFrequency).SetValue))
          Else
            vPaymentFrequency = mvEnv.GetPaymentFrequency((mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value))
          End If

          If PlanType = CDBEnvironment.ppType.pptMember And vOldTerm > 0 Then
            Select Case vMembershipType.PaymentTerm
              Case MembershipType.MembershipTypeTerms.mtfMonthlyTerm
                vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, vOldTerm, CDate(pOldRenewalDate)))
              Case MembershipType.MembershipTypeTerms.mtfWeeklyTerm
                vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.WeekOfYear, vOldTerm, CDate(pOldRenewalDate)))
              Case Else
                vRenewalDate = CDate(pOldRenewalDate).AddYears(vOldTerm).ToString(CAREDateFormat)
            End Select
          Else
            If vOldTerm > 1 Then
              vRenewalDate = CDate(pOldRenewalDate).AddYears(vOldTerm).ToString(CAREDateFormat)
            Else
              If vOldTerm < 0 Then
                vRenewalDate = AddMonths(pOldRenewalDate, pOldRenewalDate, System.Math.Abs(vOldTerm))
              Else
                vRenewalDate = AddMonths(BaseDate, pOldRenewalDate, vPaymentFrequency.Interval * vPaymentFrequency.Frequency)
              End If
            End If
          End If
        Else
          vRenewalDate = CalculateRenewalDate(pOldRenewalDate, True)
        End If
      ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Then
        vPaymentFrequency = mvEnv.GetPaymentFrequency((mvClassFields(PaymentPlanFields.ofPaymentFrequency).SetValue))
        vRenewalDate = pOldRenewalDate
        If RenewalPending = True Then
          'Roll vRenewalDate on to what it would have gone to
          If PlanType = CDBEnvironment.ppType.pptMember And mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue > 0 Then
            vRenewalDate = CalculateRenewalDate(pOldRenewalDate, True)
          Else
            If mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue = 1 Then
              vRenewalDate = AddMonths(BaseDate, pOldRenewalDate, vPaymentFrequency.Interval * vPaymentFrequency.Frequency)
            Else
              vRenewalDate = CalculateRenewalDate(pOldRenewalDate, True)
            End If
          End If
        End If
      End If
      CalculatePreviousOPSRenewalDate = vRenewalDate
    End Function

    Public Sub GetNextSchedulePaymentInfo(ByRef pNextPaymentAmount As Double, ByRef pNextPaymentDue As String, ByVal pPlanNumber As Integer, ByVal pBalance As Double, ByVal pDDorCCCA As Boolean, ByVal pPaymentFrequencyFrequency As Integer, ByVal pLoan As Boolean)
      Dim vCol As New Collection
      Dim vOPS As New OrderPaymentSchedule
      Dim vCount As Integer
      Dim vOPSFound As Boolean
      Dim vNextPayment As Double
      Dim vNextPayDue As String

      vNextPayment = pNextPaymentAmount 'FrequencyAmount
      vNextPayDue = pNextPaymentDue
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments) = True Then
        'Build a collection of all outstanding ops records
        vCol = New Collection
        vOPS = New OrderPaymentSchedule
        vOPS.Init(mvEnv)
        Dim vWhereFields As New CDBFields(New CDBField("order_number", pPlanNumber))
        With vWhereFields
          .Add("scheduled_payment_status", "'D','P'", CDBField.FieldWhereOperators.fwoIn Or CDBField.FieldWhereOperators.fwoOpenBracketTwice)
          .Add("amount_outstanding", 0, CType(If(pDDorCCCA = True, CDBField.FieldWhereOperators.fwoGreaterThan, CDBField.FieldWhereOperators.fwoGreaterThan + CDBField.FieldWhereOperators.fwoCloseBracket), CDBField.FieldWhereOperators))
          If pDDorCCCA Then .Add("claim_date", "", CDBField.FieldWhereOperators.fwoNotEqual Or CDBField.FieldWhereOperators.fwoCloseBracket)
          .Add("scheduled_payment_status#2", "V", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoEqual)
          .Add("schedule_creation_reason", "AP", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoEqual Or CDBField.FieldWhereOperators.fwoCloseBracketTwice)
        End With
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vOPS.GetRecordSetFields(OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll), "order_payment_schedule ops", vWhereFields, "due_date")
        If pLoan Then vSQLStatement.MaxRows = 12
        'vRS = mvEnv.Connection.GetRecordSet("SELECT " & vOPS.GetRecordSetFields(OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll) & " FROM order_payment_schedule ops WHERE order_number = " & pPlanNumber & " AND (scheduled_payment_status IN ('D','P','V') OR schedule_creation_reason = 'AP') ORDER BY due_date")
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        While vRS.Fetch() = True
          vOPS = New OrderPaymentSchedule
          vOPS.InitFromRecordSet(mvEnv, vRS, OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll)
          vCol.Add(vOPS, CStr(vOPS.ScheduledPaymentNumber))
        End While
        vRS.CloseRecordSet()
        Do
          vCount = vCount + 1
          If vCount = 1 And pBalance > 0 Then
            'First time in - find first Due (D) record
            For Each vOPS In vCol
              If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue And vOPS.AmountOutstanding > 0 Then
                vOPSFound = True
                If (pDDorCCCA) Then
                  'DD/CCCA paid pay plans, display dates of next claimable payment
                  vOPSFound = (Len(vOPS.ClaimDate) > 0)
                End If
              End If
              If vOPSFound Then Exit For
            Next vOPS
          ElseIf vCount = 2 And pBalance > 0 Then
            'Next time - find first Part Paid (P) record
            For Each vOPS In vCol
              If (vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid And vOPS.AmountOutstanding > 0) Then
                vOPSFound = True
              End If
              If vOPSFound Then Exit For
            Next vOPS
          ElseIf pBalance = 0 Or (pBalance > 0 And vCount > 1) Then
            'If still not found - find Provisional (V) record
            For Each vOPS In vCol
              If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsProvisional Then
                vOPSFound = True
              ElseIf vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance And (vCount > 1) Then
                'Only want to include this if there are no Provisional status records
                vOPSFound = True
              End If
              If vOPSFound Then Exit For
            Next vOPS
          End If
        Loop While vOPSFound = False And vCount < 3

        If vOPSFound Then
          vNextPayDue = vOPS.DueDate
          If vOPS.ClaimDate.Length > 0 Then vNextPayDue = vOPS.ClaimDate
          If (vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsProvisional Or vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance) Then
            If pPaymentFrequencyFrequency = 1 Then
              'Note: Instalment payers need to display the FrequencyAmount
              vNextPayment = vOPS.AmountOutstanding
              If vNextPayment = 0 Then vNextPayment = vOPS.AmountDue
            End If
          Else
            vNextPayment = vOPS.AmountOutstanding
          End If
        End If
      End If
      pNextPaymentAmount = vNextPayment
      pNextPaymentDue = vNextPayDue
    End Sub

    Public Sub SetNewRenewalDate()
      'Used by Payment Plan Maintenance to reset the Renewal Date
      Dim vPayFrequency As PaymentFrequency

      If PlanType <> CDBEnvironment.ppType.pptMember And mvClassFields(PaymentPlanFields.ofPaymentFrequency).ValueChanged And (Balance > 0 And Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) > 0) And RenewalPending = False Then
        'Payment Frequency changed and old/new Balance's above zero and Renewal Pending = False
        vPayFrequency = mvEnv.GetPaymentFrequency((mvClassFields(PaymentPlanFields.ofPaymentFrequency).SetValue))
        If ((vPayFrequency.Interval * vPayFrequency.Frequency) <> (PaymentFrequencyInterval * PaymentFrequencyFrequency)) And (PaymentFrequencyInterval * PaymentFrequencyFrequency) <> 12 Then
          'Changed to non-annual payments
          'If Balance is same as RenewalAmount then need to reset RenewalPending (Payment Plan has been reset)
          If Balance = RenewalAmount Then RenewalPending = True
          If RenewalPending Then
            RenewalDate = NextPaymentDue
          Else
            'Set RenewalDate to be next date after the NextPaymentDue
            RenewalDate = CalculateRenewalDate(NextPaymentDue, True)
          End If
        End If
      End If

    End Sub

    Friend Function CalculateBalanceForPaymentSchedule(ByVal pCreationReason As OrderPaymentSchedule.OrderPaymentScheduleCreationReasons, ByVal pRenewalDate As String) As Double
      'Used when creating ops records and the Balance is zero
      'This is to work out the following year's balance in order to set-up the ops correctly
      Dim vPPD As PaymentPlanDetail
      Dim vBalance As Double
      Dim vFound As Boolean
      Dim vFuturePPD As Boolean 'For Members, use TimeStatus 'F' only
      Dim vResetPPD As Boolean

      If PlanType = CDBEnvironment.ppType.pptMember Then
        'Check setting of RenewAtSameRate config
        If Not mvRenewAtSameRateSet Then mvRenewAtSameRate = mvEnv.GetConfigOption("me_renew_at_same_rate")
        mvRenewAtSameRateSet = True
      End If

      'For DataImport/CMT/PPMaint may need to reselect the PayPlanDetails
      If (PlanType = CDBEnvironment.ppType.pptMember And mvDetails.Count() = 1 And mvRenewAtSameRate = False) Then
        'OK as only line is membership charging line
      ElseIf mvDetails.Count() > 0 Then
        For Each vPPD In mvDetails
          If Not (PlanType = CDBEnvironment.ppType.pptMember And vPPD.DetailNumber = 1 And mvRenewAtSameRate = False) Then
            'If no FixedAmount and no price info then need to re-select the data
            If Len(vPPD.Amount) = 0 And vPPD.ProductRateIsValid = False Then vResetPPD = True
          End If
          If vResetPPD = True Then Exit For
        Next vPPD
      Else
        vResetPPD = True 'PPDetails collection not set up
      End If
      If mvProcessRenewal Then vResetPPD = False 'Never reset the details as R&R could have added some new records that are not saved yet

      If vResetPPD = True And pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan Then
        'Could be DataImport - if this was a test import then there is no actual data
        If mvEnv.Connection.GetCount("order_details", Nothing, "order_number = " & PlanNumber) = 0 Then vResetPPD = False
      End If
      If vResetPPD = True Then InitPaymentPlanDetails(mvEnv, PlanNumber)

      If PlanType = CDBEnvironment.ppType.pptMember Then
        'For a Membership, see if Payment Plan renewed for Future Membership Type but Future Type Change not run yet
        If CurrentMembers.Count() = 0 Then LoadMembers()
        If IsCurrentMembersMembershipType(MembershipTypeCode) = False Then vFuturePPD = True
        If vFuturePPD Then
          'No Members are using the MembershipType on the Pay Plan so check that we have some future PPD's (TimeStatus = "F")
          'Need to do this because Batch Posting may have just processed the future change
          For Each vPPD In mvDetails
            If vPPD.TimeStatus = "F" Then vFound = True
            If vFound Then Exit For
          Next vPPD
          If vFound = False Then vFuturePPD = False
        End If
      End If

      Dim vVATRate As VatRate = Nothing
      Dim vProductRate As ProductRate = Nothing
      Dim vFirstFutureLineFound As Boolean = False
      For Each vPPD In mvDetails
        'Use existing Product/Rate
        vProductRate = vPPD.ProductRate
        vVATRate = mvEnv.VATRate(vPPD.Product.ProductVatCategory, Payer.VATCategory)

        'See if subsequent product/rate should be used
        If (PlanType = CDBEnvironment.ppType.pptMember AndAlso mvRenewAtSameRate = False AndAlso vPPD.Amount.Length = 0) _
        AndAlso ((vFuturePPD = True AndAlso vFirstFutureLineFound = False AndAlso vPPD.TimeStatus.Equals("F", StringComparison.InvariantCultureIgnoreCase)) _
        OrElse (vFuturePPD = False AndAlso vPPD.DetailNumber = 1)) Then
          'Future membership processing on first future line, OR
          'Membership processing on first detail line
          'Use the correct product & rate for the subsequent membership charging line
          vProductRate = MembershipType.SubsequentProductRate
          vVATRate = mvEnv.VATRate(MembershipType.SubsequentProductVATCategory, Payer.VATCategory)
        End If
        If vPPD.TimeStatus.Equals("F", StringComparison.InvariantCultureIgnoreCase) Then vFirstFutureLineFound = True

        If ((PlanType = CDBEnvironment.ppType.pptMember AndAlso vFuturePPD = True _
        AndAlso vPPD.TimeStatus.Equals("F", StringComparison.InvariantCultureIgnoreCase)) _
        OrElse (PlanType = CDBEnvironment.ppType.pptMember AndAlso vFuturePPD = False) _
        OrElse (PlanType <> CDBEnvironment.ppType.pptMember)) Then
          'Future membership and this is a future line, OR
          'Membership not looking for future lines, OR
          'Not a membership
          If vPPD.Amount.Length = 0 Then
            vBalance += vProductRate.Price(CDate(pRenewalDate), vPPD.ContactNumber, vPPD.Quantity, vVATRate)
          Else
            vBalance += DoubleValue(vPPD.Amount)
          End If
        End If
      Next

      If vBalance = 0 Then
        If mvDetails.Count() > 0 And vResetPPD = False And pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan Then
          'DataImport test has returned zero so just use renewal amount
          vBalance = mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue
        End If
      End If

      If mvClassFields(PaymentPlanFields.ofAmount).Value.Length > 0 Then
        'If FixedAmount set then limit provisional OPS to this
        If vBalance > mvClassFields(PaymentPlanFields.ofAmount).DoubleValue Then vBalance = mvClassFields(PaymentPlanFields.ofAmount).DoubleValue
      End If

      CalculateBalanceForPaymentSchedule = vBalance
    End Function

    Public Function GetExpectedFrequencyAmount() As Double
      SetFrequencyAmount()
      GetExpectedFrequencyAmount = FrequencyAmount
    End Function

    Public Function GetBalanceExpected() As Double
      'Not being Used Anywhere (as on 01/11/2004)
      'This method returns the amount expected from the payment plan in the rest of the current term
      'sum of the scheduled payments due and unprocessed
      Dim vOPS As OrderPaymentSchedule
      Dim vAmount As Double
      Dim vOPH As OrderPaymentHistory
      Dim vOPHs As New Collection
      Dim vRecordSet As CDBRecordSet

      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments) Then
        GetScheduledPayments(True)
        vRecordSet = mvEnv.Connection.GetRecordSet("SELECT * FROM order_payment_history WHERE order_number = " & PlanNumber & " AND posted = 'N' ORDER BY scheduled_payment_number")
        While vRecordSet.Fetch() = True
          vOPH = New OrderPaymentHistory
          vOPH.InitFromRecordSet(mvEnv, vRecordSet, OrderPaymentHistory.OrderPaymentHistoryRecordSetTypes.ophrtAll)
          vOPHs.Add(vOPH)
        End While
        For Each vOPS In mvScheduledPayments
          If Len(CancellationReason) = 0 Then
            If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue Or vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid Then
              vAmount = vAmount + vOPS.AmountOutstanding
            End If
            If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsUnprocessedPayment Then
              For Each vOPH In vOPHs
                If CDbl(vOPH.ScheduledPaymentNumber) = vOPS.ScheduledPaymentNumber Then
                  vAmount = vAmount + vOPH.Amount
                End If
              Next vOPH
            End If
          Else
            If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsCancelled Then
              vAmount = vAmount + vOPS.AmountOutstanding
            End If
          End If
        Next vOPS
      Else
        vAmount = OutstandingBalance - Balance
      End If
      GetBalanceExpected = vAmount
    End Function

    Public Sub SetPaymentScheduleUnCancelled()
      'Set the payment schedule so that it is no longer marked as cancelled
      'Needs to be done after Pay Plan + any auto pay method has been reinstated
      Dim vUpdateFields As New CDBFields
      Dim vWhereFields As New CDBFields

      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments) Then
        If IsCancelled = False Then
          'Payment Plan is no longer cancelled
          If Len(mvClassFields(PaymentPlanFields.ofPaymentScheduleAmendedOn).Value) = 0 Then
            'Create the payment schedule
            RegenerateScheduledPayments(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInitialDataSetup, mvClassFields(PaymentPlanFields.ofOrderDate).Value)
          Else
            'Change the schedule status from C (Cancelled) to D (Due)
            'BR19424 - Reinstating Provisional payments to Due was causing them to appear in SC, changed so that they are set back to provisional if Change Date before Renewal Date
            Dim vSchedCreationRsn As String = mvEnv.Connection.GetValue("SELECT schedule_creation_reason FROM order_payment_schedule WHERE order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue & " AND scheduled_payment_status = 'C'")
            With vWhereFields
              .Clear()
              .Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue)
              .Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, "C")
            End With
            If vSchedCreationRsn = "AP" AndAlso CDate(TodaysDate()) < CDate(mvClassFields(PaymentPlanFields.ofRenewalDate).Value) Then  'BR19424
              vUpdateFields.Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, "V")
            Else
              vUpdateFields.Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, "D")
            End If
            mvEnv.Connection.UpdateRecords("order_payment_schedule", vUpdateFields, vWhereFields, False)
            mvEnv.AddJournalRecord(JournalTypes.jnlPayPlanPaymentSchedule, JournalOperations.jnlUpdate, mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue, mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
            mvClassFields(PaymentPlanFields.ofPaymentScheduleAmendedOn).Value = TodaysDate()
            mvScheduledPayments = Nothing 'Force a refresh of the data
          End If
        End If
      End If

    End Sub

    Public Sub UpdateAutoPayMethodClaimDay(ByVal pClaimDay As String)
      'ClaimDay can be null in the database
      mvClassFields(PaymentPlanFields.ofClaimDay).Value = pClaimDay
    End Sub

    Public Sub ResetNextDetailLine()
      mvClassFields(PaymentPlanFields.ofNextDetailLine).Value = CStr(1)
    End Sub

    Public Function ResetPlanTermForCMT(ByVal pNewPlanTerm As String) As Boolean
      'For CMT, update RenewalDate, Term and ResetOrderTerm (when Term < 0)
      Dim vDate As String

      If RenewalPending = False Then
        'Original Mship has an incentive period - remove it from renewal date
        vDate = mvClassFields.Item(PaymentPlanFields.ofRenewalDate).Value
        vDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, Term, CDate(vDate)))
        vDate = CDate(vDate).AddYears(IntegerValue(pNewPlanTerm)).ToString(CAREDateFormat) 'vDate = DateAdd("yyyy", 1, vDate)
        RenewalDate = vDate
        ResetPlanTermForCMT = True 'Return to show that RenewalDate has changed
      End If
      Term = IntegerValue(pNewPlanTerm)
      If ResetOrderTerm = ppResetOrderTerm.pprotYes Then ResetOrderTerm = ppResetOrderTerm.pprotNo

    End Function

    Public Sub InitWithOPSFromRecordSet(ByVal pEnv As CDBEnvironment, ByVal pRecordSet As CDBRecordSet, ByVal pRSType As PayPlanRecordSetTypes)
      Dim vEndOfOPS As Boolean

      'This method will Init the payment Plan from the recordset if it has not been Initialized already
      'It will also create a collection of the OPS records
      'If pprstPaymentSchedules is set we are expecting the recordset to have multiple records
      'per Pay Plan as we expect a join to Order Payment Schedule,
      'we therefore only load OPS lines and nextrec the Recordset until the
      'Order Number changes. The Recordset MUST BE ORDERED BY ORDER_NUMBER
      'pprstDetailLines SHOULD NOT BE set when calling this method.

      If Not mvInitialized Then
        'if the payment plan has not been initialized already
        InitFromRecordSet(pEnv, pRecordSet, pRSType)
        If (pRSType And PayPlanRecordSetTypes.pprstDetailProduct) > 0 Then
          'Hack to get payment frequency info
          GetPaymentFrequencyDetails()
        End If
      End If

      'Add OPS Lines
      If (pRSType And PayPlanRecordSetTypes.pprstPaymentSchedules) > 0 Then
        While pRecordSet.Status() = True And Not vEndOfOPS
          AddOPSFromRecordSet(pRecordSet, pRSType)
          pRecordSet.Fetch()
          If (pRecordSet.Fields("order_number").IntegerValue <> PlanNumber) Then vEndOfOPS = True
        End While
      End If
    End Sub

    Public Sub AddOPSFromRecordSet(ByVal pRecordSet As CDBRecordSet, ByVal pRSType As PayPlanRecordSetTypes)
      Dim vOPS As OrderPaymentSchedule

      vOPS = New OrderPaymentSchedule
      vOPS.InitFromRecordSet(mvEnv, pRecordSet, OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtMain)
      If mvScheduledPayments Is Nothing Then
        mvScheduledPayments = New Collection
      End If
      mvScheduledPayments.Add(vOPS, pRecordSet.Fields("scheduled_payment_number").Value)
    End Sub

    Public Function CheckIntegrity() As Integer
      Dim vDetail As PaymentPlanDetail
      Dim vTotBal As Double
      Dim vTotArrears As Double
      Dim vError As Integer

      ' This method assumes that the mvDetails collection has been populated with the  PP Details
      vError = 0
      For Each vDetail In mvDetails
        vTotBal = vTotBal + vDetail.Balance
        vTotArrears = vTotArrears + vDetail.Arrears
      Next vDetail
      If CDate(RenewalDate) < CDate(StartDate) Then
        vError = PaymentPlanProblemTypes.ppptRenewalDate
      ElseIf mvClassFields(PaymentPlanFields.ofDetailLines).IntegerValue <> mvDetails.Count() Then
        vError = PaymentPlanProblemTypes.ppptDetailLinesCount
      ElseIf mvDetails.Count() = 0 Then
        vError = PaymentPlanProblemTypes.ppptOrderDetailMissing
      ElseIf FixTwoPlaces(vTotBal) <> FixTwoPlaces(Balance) Then
        vError = PaymentPlanProblemTypes.ppptOrderBalanceTotal
      ElseIf FixTwoPlaces(vTotArrears) <> FixTwoPlaces(Arrears) Then
        vError = PaymentPlanProblemTypes.ppptOrderArrearsTotal
      ElseIf FrequencyAmount = 0 And (Balance > 0 Or RenewalAmount > 0) Then
        vError = PaymentPlanProblemTypes.ppptFrequencyAmountZero
      ElseIf vTotBal < 0 Then
        vError = PaymentPlanProblemTypes.ppptNegativeDetailBalance
      ElseIf InAdvance > 0 And Arrears > 0 Then
        vError = PaymentPlanProblemTypes.ppptInAdvAndArrearsSet
      ElseIf Balance < 0 Then
        vError = PaymentPlanProblemTypes.ppptNegativeBalance
      ElseIf RenewalAmount < 0 Then
        vError = PaymentPlanProblemTypes.pptNegativeRenewalAmount
      ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes And Len(Amount) > 0 And FixTwoPlaces(Val(Amount)) <> FixTwoPlaces(RenewalAmount) Then
        vError = PaymentPlanProblemTypes.ppptSOPPAmtNotEqualRenAmt
      ElseIf Term = 99 And Balance = 0 And CDate(RenewalDate) <> CDate(NextPaymentDue) Then
        vError = PaymentPlanProblemTypes.ppptRDNotEqualNPDFor99Term
      ElseIf Term = 1 And (DateDiff(Microsoft.VisualBasic.DateInterval.Month, CDate(RenewalDate), CDate(NextPaymentDue)) > 12 Or DateDiff(Microsoft.VisualBasic.DateInterval.Month, CDate(NextPaymentDue), CDate(RenewalDate)) > 12) Then
        vError = PaymentPlanProblemTypes.ppptRDNotMatchNPDFor1Term
      ElseIf Balance < Arrears Then
        'Payment Plan balance must be >= arrears
        vError = PaymentPlanProblemTypes.ppptBalanceLessThanArrears
      ElseIf PaymentMethod = mvEnv.GetConfig("pm_dd") And DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppNo Then
        vError = PaymentPlanProblemTypes.ppptPayMetNotMatchAutoFlag
      ElseIf PaymentMethod = mvEnv.GetConfig("pm_so") And StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppNo Then
        vError = PaymentPlanProblemTypes.ppptPayMetNotMatchAutoFlag
      ElseIf PaymentMethod = mvEnv.GetConfig("pm_cca") And CreditCardStatus = PaymentPlan.ppYesNoCancel.ppNo Then
        vError = PaymentPlanProblemTypes.ppptPayMetNotMatchAutoFlag
      ElseIf PaymentMethod = mvEnv.GetConfig("pm_cash") And (CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Or DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes) Then
        vError = PaymentPlanProblemTypes.ppptPayMetNotMatchAutoFlag
        'ElseIf Len(LastPaymentDate) > 0 Then
        '  If Val(LastPayment) > 0 And CDate(NextPaymentDue) < CDate(LastPaymentDate) Then vError = PaymentPlanProblemTypes.ppptNPDBeforeLastPayDate
      End If

      'vSQL = "SELECT o.order_number FROM orders o, payment_frequencies p WHERE cancellation_reason IS NULL AND balance = 0 AND order_type in ('A','B','D','O') AND p.payment_frequency = o.payment_frequency AND frequency = 1 AND interval = 1 AND renewal_amount <> frequency_amount AND period = 'M'"
      'verror = FromSQL vSQL, ppptRenAmtNotEqualFreqAmtRegDon
      'vSQL = "SELECT o.order_number FROM orders o, payment_frequencies pf WHERE " & mvCancelledSQL & " o.payment_frequency = pf.payment_frequency AND o.frequency_amount != (renewal_amount/pf.frequency)"
      'verror = FromSQL vSQL, ppptFrequencyAmountIncorrect
      'vSQL = "SELECT o.order_number FROM orders o, bankers_orders bo WHERE o.cancellation_reason IS NULL AND bo.order_number = o.order_number AND bo.cancellation_reason IS NULL AND bo.amount <> o.frequency_amount"
      'ReportErrorFromSQL vSQL, ppptSOAmtNotEqualPPFreqAmt
      CheckIntegrity = vError
    End Function

    'Public Sub InitAutoPaymentMethod()
    '  If StandingOrderStatus = ppYes Then
    '    If mvStandingOrder Is Nothing Then Set mvStandingOrder = New StandingOrder
    '    mvStandingOrder.InitFromPaymentPlan mvEnv, PlanNumber, False
    '  ElseIf DirectDebitStatus = ppYes Then
    '    If mvDirectDebit Is Nothing Then Set mvDirectDebit = New DirectDebit
    '    mvDirectDebit.InitFromPaymentPlan mvEnv, PlanNumber, False
    '  ElseIf CreditCardStatus = ppYes Then
    '    If mvCreditCardAuthority Is Nothing Then Set mvCreditCardAuthority = New CreditCardAuthority
    '    mvCreditCardAuthority.InitFromPaymentPlan mvEnv, PlanNumber, False
    '  End If
    'End Sub
    '
    Public Sub SetMembershipTypeFixedCycle(ByVal pFixedCycle As String)
      mvFixedRenewalCycle = pFixedCycle
    End Sub

    Public Sub RealignPaymentScheduleDates()
      'Update payment schedule following a change of NextPaymentDue date due to adding new CCA/DD/SO
      '- Historic OPS will either be set as FullyPaid or deleted
      '- OPS due on previous NPD will either be set as FullyPaid or have DueDate updated to new NPD
      '- Future OPS will either be set as FullyPaid or deleted
      Dim vOPS As OrderPaymentSchedule
      Dim vClaimDate As String
      Dim vFound As Boolean
      Dim vNPD As String
      Dim vOldNPD As String

      vNPD = mvClassFields.Item(PaymentPlanFields.ofNextPaymentDue).Value
      vOldNPD = mvClassFields.Item(PaymentPlanFields.ofNextPaymentDue).SetValue

      If (CDate(vNPD) > CDate(vOldNPD)) And AutoPaymentCreated = True Then
        'NextPaymentDue has been rolled forward
        'Update OPS dates from old date to new date
        For Each vOPS In ScheduledPayments(True)
          vFound = False
          If vOPS.AmountOutstanding > 0 Then
            Select Case vOPS.ScheduledPaymentStatus
              Case OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsProvisional
                If CDate(vOPS.DueDate) < CDate(vOldNPD) Then
                  'OPS due before old NextPaymentDue - no longer required
                  If vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrFinancialAdjustments Or vOPS.HasPayments = True Then
                    'Set this record as fully paid
                    With vOPS
                      .SetUnProcessedPayment(True, .AmountOutstanding)
                      .ProcessPayment()
                      .Save()
                    End With
                  Else
                    'No payments - delete
                    vOPS.Delete()
                  End If
                Else
                  If vOPS.HasPayments Then
                    'There are payments so set this as fully paid
                    With vOPS
                      .SetUnProcessedPayment(True, .AmountOutstanding)
                      .ProcessPayment()
                      .Save()
                    End With
                  ElseIf (CDate(vOPS.DueDate) = CDate(vOldNPD)) Then
                    'OPS due on old NPD date & no payments so reset DueDate & ClaimDate
                    vClaimDate = FindNextClaimDate(vNPD)
                    With vOPS
                      .Update(vNPD, .AmountDue, .AmountOutstanding, .ExpectedBalance, vClaimDate, .RevisedAmount, CType(IIf((.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Or .ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrFinancialAdjustments), .ScheduleCreationReason, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance), OrderPaymentSchedule.OrderPaymentScheduleCreationReasons))
                      .Save()
                    End With
                  Else
                    'OPS due after old NPD date & no payments so delete it
                    vOPS.Delete()
                  End If
                End If
            End Select
          End If
        Next vOPS
      End If

    End Sub
    Private Sub SetRenewalAmountFromPPD()
      SetRenewalAmountFromPPD(True, False)
    End Sub
    Public Sub SetRenewalAmountFromPPD(ByVal pResetBalance As Boolean, ByVal pResetFrequencyAmount As Boolean)
      Dim vAmount As Double
      Dim vPPD As PaymentPlanDetail
      Dim vRenewalAmount As Double
      Dim vOrigRenewalAmount As Double
      Dim vNonPerBalance As Double
      Dim vDiscount As Double
      Dim vEstNextRenewalAmount As Double
      Dim vEstNextAmount As Double
      'if pResetBalance has been passed as False,
      'we know we've not paid yet and just need to reset Renewal Amount,
      'e.g. call from SetRenewalData BR 11197 TA 24/4/07.
      vOrigRenewalAmount = RenewalAmount

      'Arrange the details in a sorted order as the sequence is important wile calculating rebates
      Dim vDetails As New SortedList(Of Integer, PaymentPlanDetail)
      For Each vPPD In mvDetails
        vDetails.Add(vPPD.DetailNumber, vPPD)
      Next

      Dim vVATRate As VatRate
      Dim vPayerVATCategory As String = Payer.VATCategory
      For Each vPPD In vDetails.Values
        vDiscount = 0
        vAmount = 0
        vEstNextAmount = 0
        If vPPD.ProductRateIsValid = False Then vPPD.SetPrices()
        vVATRate = mvEnv.VATRate(vPPD.Product.ProductVatCategory, vPayerVATCategory)
        Dim vPriceDate As String = RenewalDate
        If vPPD.ValidFrom.Length > 0 AndAlso CDate(vPPD.ValidFrom) < CDate(RenewalPeriodEnd) AndAlso (vPPD.ValidTo.Length = 0 OrElse CDate(vPPD.ValidTo) > CDate(CalculateRenewalDate(RenewalPeriodEnd, False))) Then
          'If ValidFrom date is set and it is within the current renewal period then use this date to caluclate the price
          vPriceDate = vPPD.ValidFrom
        End If
        If vPPD.PriceIsPercentage = "T" Then
          'calculate discount on the non-percentage total
          vDiscount = vPPD.Price(CDate(vPriceDate), vVATRate)
          vAmount = FixTwoPlaces(vNonPerBalance * (vDiscount / 100)) * -1
          vEstNextAmount = vAmount
        ElseIf vPPD.PriceIsPercentage = "P" Then
          'calculate discount on the previous total
          vDiscount = vPPD.Price(CDate(vPriceDate), vVATRate, 0, False, True)
          vAmount = FixTwoPlaces(vRenewalAmount * (vDiscount / 100)) * -1
          vEstNextAmount = vAmount
        Else
          vAmount = vPPD.Price(CDate(vPriceDate), vVATRate, 0, False, True)
          If vAmount = 0 Then
            vAmount = If(vPPD.Amount.Length > 0, DoubleValue(vPPD.Amount), If(vPPD.HasPriceInfo, vPPD.GrossAmount, 0))
          End If
          vEstNextAmount = vAmount
          If pResetFrequencyAmount AndAlso vPPD.HasPriceInfo Then vAmount = vPPD.GrossAmount
          vNonPerBalance += vAmount
        End If
        'If the current price of the product is zero then see if an override amount has been set on this row
        If vAmount = 0 AndAlso vPPD.ValidFrom.Length = 0 AndAlso vPPD.ValidTo.Length = 0 Then
          vAmount = Val(vPPD.Amount)
          vEstNextAmount = vAmount
          If pResetFrequencyAmount = True AndAlso vPPD.HasPriceInfo = True AndAlso vPPD.UnitPrice <> 0 Then vAmount = vPPD.GrossAmount
        End If
        vRenewalAmount = FixTwoPlaces(vRenewalAmount + vAmount)
        vEstNextRenewalAmount = FixTwoPlaces(vEstNextRenewalAmount + vEstNextAmount)
      Next vPPD
      RenewalAmount = vRenewalAmount

      If (vOrigRenewalAmount <> RenewalAmount) OrElse pResetFrequencyAmount = True Then
        If pResetBalance Then SetBalance(Balance)
        If pResetFrequencyAmount Then
          If (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsExisting Or ProportionalBalanceConfigSettings.pbcsExistingPF) > 0 Then
            If IsUpdateAfterRenewal(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance, Today, CDate(NextPaymentDue)) AndAlso Balance > RenewalAmount Then
              If (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsExistingPF) = ProportionalBalanceConfigSettings.pbcsExistingPF AndAlso DetailsAmendedFinancial Then
                mvClassFields.Item(PaymentPlanFields.ofRenewalAmount).Value = vEstNextRenewalAmount.ToString("F")
              End If
            End If
            mvClassFields.Item(PaymentPlanFields.ofFrequencyAmount).DoubleValue = CalcFrequencyAmount(vEstNextRenewalAmount, PaymentFrequencyFrequency)
          Else
            mvClassFields.Item(PaymentPlanFields.ofFrequencyAmount).DoubleValue = CalcFrequencyAmount(vRenewalAmount, PaymentFrequencyFrequency)
          End If
        End If
      End If
    End Sub

    Private Sub Create(ByVal pPlanType As CDBEnvironment.ppType, ByVal pParams As CDBParameters)
      'Used by Web Services only

      With mvClassFields
        .Item(PaymentPlanFields.ofOrderNumber).Value = CStr(mvEnv.GetControlNumber("SO"))
        .Item(PaymentPlanFields.ofOrderType).Value = SetPPType(pPlanType)
        .Item(PaymentPlanFields.ofContactNumber).Value = pParams("PayerContactNumber").Value
        .Item(PaymentPlanFields.ofAddressNumber).Value = pParams("PayerAddressNumber").Value

        If pParams.ContainsKey("OrderDate") AndAlso pParams("OrderDate").Value.Length > 0 Then
          .Item(PaymentPlanFields.ofOrderDate).Value = pParams("OrderDate").Value 'BR17159 was StartDate
        Else
          .Item(PaymentPlanFields.ofOrderDate).Value = pParams("StartDate").Value
        End If
        If pPlanType = CDBEnvironment.ppType.pptLoan Then
          .Item(PaymentPlanFields.ofOrderTerm).Value = If(pParams.HasValue("LoanTerm"), pParams("LoanTerm").Value, "99").ToString
        Else
          Dim vTerm As Integer = 1
          If pPlanType = CDBEnvironment.ppType.pptMember AndAlso pParams.Exists("MembershipType") Then
            Dim vMembershipType = mvEnv.MembershipType(pParams("MembershipType").Value)
            vTerm = vMembershipType.MembershipTerm
          End If
          .Item(PaymentPlanFields.ofOrderTerm).Value = pParams.OptionalValue("PlanTerm", CStr(vTerm))
        End If
        If pParams.HasValue("RenewalDate") Then
          .Item(PaymentPlanFields.ofRenewalDate).Value = pParams("RenewalDate").Value
        Else
          .Item(PaymentPlanFields.ofRenewalDate).Value = pParams("StartDate").Value
        End If
        Dim vExpiryYears As Integer = 99
        If pPlanType = CDBEnvironment.ppType.pptLoan Then vExpiryYears = 100
        .Item(PaymentPlanFields.ofExpiryDate).Value = pParams.OptionalValue("ExpiryDate", CDate(.Item(PaymentPlanFields.ofOrderDate).Value).AddYears(vExpiryYears).AddDays(-1).ToString(CAREDateFormat))
        .Item(PaymentPlanFields.ofPaymentMethod).Value = pParams.OptionalValue("PaymentMethod", mvEnv.GetConfig("pm_cash"))
        .Item(PaymentPlanFields.ofPaymentFrequency).Value = pParams("PaymentFrequency").Value.ToUpper
        If pParams.Exists("FixedAmount") Then .Item(PaymentPlanFields.ofAmount).Value = pParams("FixedAmount").Value
        .Item(PaymentPlanFields.ofArrears).Value = CStr(0)
        .Item(PaymentPlanFields.ofInAdvance).Value = CStr(0)
        .Item(PaymentPlanFields.ofNextPaymentDue).Value = pParams.ParameterExists("NextPaymentDue").Value

        If pPlanType <> CDBEnvironment.ppType.pptLoan Then .Item(PaymentPlanFields.ofReasonForDespatch).Value = UCase(pParams("ReasonForDespatch").Value)
        .Item(PaymentPlanFields.ofSource).Value = pParams("Source").Value.ToUpper
        .Item(PaymentPlanFields.ofTheirReference).Value = pParams.ParameterExists("TheirReference").Value
        .Item(PaymentPlanFields.ofRenewalPending).Value = "Y"
        .Item(PaymentPlanFields.ofSalesContactNumber).Value = pParams.ParameterExists("SalesContactNumber").IntegerValue.ToString
        .Item(PaymentPlanFields.ofSalesGroup).Value = pParams.ParameterExists("SalesGroup").Value
        .Item(PaymentPlanFields.ofReprint).Value = "N"
        If pParams.ParameterExists("Provisional").Bool = True Then .Item(PaymentPlanFields.ofProvisional).Value = pParams("Provisional").Value
        If pPlanType = CDBEnvironment.ppType.pptLoan Then
          .Item(PaymentPlanFields.ofEligibleForGiftAid).Value = "N"
        Else
          .Item(PaymentPlanFields.ofEligibleForGiftAid).Value = pParams.OptionalValue("EligibleForGiftAid", "Y")
        End If
        SetCreated(pParams.OptionalValue("CreatedOn", (TodaysDate())), pParams.OptionalValue("CreatedBy", mvEnv.User.UserID))
        .Item(PaymentPlanFields.ofAmendedBy).Value = mvEnv.User.UserID
        .Item(PaymentPlanFields.ofAmendedOn).Value = TodaysDate()
        .Item(PaymentPlanFields.ofPaymentScheduleAmendedOn).Value = TodaysDate()
        If pPlanType = CDBEnvironment.ppType.pptMember Then
          .Item(PaymentPlanFields.ofBranch).Value = pParams("Branch").Value
          .Item(PaymentPlanFields.ofMembershipType).Value = pParams("MembershipType").Value
          Select Case MembershipType.PaymentTerm
            Case MembershipType.MembershipTypeTerms.mtfWeeklyTerm
              TermUnits = OrderTermUnits.otuWeekly
            Case MembershipType.MembershipTypeTerms.mtfMonthlyTerm
              TermUnits = OrderTermUnits.otuMonthly
            Case Else
              TermUnits = OrderTermUnits.otuNone
          End Select
          .Item(PaymentPlanFields.ofGiftMembership).Bool = pParams.ParameterExists("GiftMembership").Bool
          If .Item(PaymentPlanFields.ofGiftMembership).Bool Then
            .Item(PaymentPlanFields.ofOneYearGift).Bool = pParams.ParameterExists("OneYearGift").Bool
            If pParams.Exists("GiverContactNumber") Then .Item(PaymentPlanFields.ofGiverContactNumber).Value = pParams("GiverContactNumber").Value
          End If
          .Item(PaymentPlanFields.ofPackToMember).Value = pParams.OptionalValue("PackToMember", "N")
        ElseIf pPlanType = CDBEnvironment.ppType.pptLoan Then
          .Item(PaymentPlanFields.ofRenewalAmount).Value = pParams("LoanAmount").DoubleValue.ToString
          SetBalance(pParams("LoanAmount").DoubleValue)
        End If
        If pParams.Exists("RenewalAmount") Then .Item(PaymentPlanFields.ofRenewalAmount).Value = pParams("RenewalAmount").DoubleValue.ToString
        If pParams.Exists("Balance") Then SetBalance((pParams("Balance").DoubleValue))
        If pParams.Exists("FutureCancellationReason") Then
          .Item(PaymentPlanFields.ofFutureCancellationReason).Value = pParams("FutureCancellationReason").Value
          .Item(PaymentPlanFields.ofFutureCancellationSource).Value = pParams.ParameterExists("FutureCancellationSource").Value
        End If
        If pParams.Exists("CancellationReason") Then
          .Item(PaymentPlanFields.ofCancellationReason).Value = pParams("CancellationReason").Value
          .Item(PaymentPlanFields.ofCancelledOn).Value = pParams("CancelledOn").Value
          .Item(PaymentPlanFields.ofCancelledBy).Value = pParams("CancelledBy").Value
          .Item(PaymentPlanFields.ofCancellationSource).Value = pParams.ParameterExists("CancellationSource").Value
        End If
        If PlanType <> CDBEnvironment.ppType.pptMember AndAlso pPlanType <> CDBEnvironment.ppType.pptLoan Then
          If pParams.Exists("OneOffPayment") Then .Item(PaymentPlanFields.ofOneOffPayment).Value = pParams("OneOffPayment").Value
          If pParams.ParameterExists("StartMonth").IntegerValue > 0 Then .Item(PaymentPlanFields.ofStartMonth).Value = CStr(pParams("StartMonth").IntegerValue)
        End If
        'These will be set automatically when Detail lines are added:
        '.Item(ofDetailLines).Value
        '.Item(ofNextDetailLine).Value

        If PlanType = CDBEnvironment.ppType.pptMember Then
          If (Len(.Item(PaymentPlanFields.ofBalance).Value) > 0 And Len(.Item(PaymentPlanFields.ofRenewalDate).Value) = 0) Then
            'Adding members needs certain data to be set up
            SetValid(PaymentPlanFields.ofRenewalDate)
          End If

          If FixedRenewalCycle = True And PreviousRenewalCycle = True And MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm Then
            If (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment Then
              Dim vFirstAmount As Double = .Item(PaymentPlanFields.ofRenewalAmount).DoubleValue
              If pParams.ParameterExists("UseAsFirstAmount").Bool = False Then
                'Need to calculate the correct frequency amount for the current Balance and remaining months, and use this for the FirstAmount
                'If additional detail lines have been added without pro-rating the balance then the frequency & first amounts are wrong
                Dim vRenewalDate As String = .Item(PaymentPlanFields.ofRenewalDate).Value
                If .Item(PaymentPlanFields.ofRenewalPending).Bool = False Then vRenewalDate = CalculateRenewalDate(vRenewalDate, False)
                Dim vJoined As String = pParams.ParameterExists("Joined").Value
                If vJoined.Length = 0 Then vJoined = .Item(PaymentPlanFields.ofOrderDate).Value
                Dim vNumberPayments As Integer = CInt((.Item(PaymentPlanFields.ofOrderTerm).IntegerValue * 12) - DateDiff(DateInterval.Month, CDate(vRenewalDate), CDate(vJoined)))
                vFirstAmount = FixTwoPlaces(.Item(PaymentPlanFields.ofBalance).DoubleValue / vNumberPayments)
                If vFirstAmount * vNumberPayments < .Item(PaymentPlanFields.ofBalance).DoubleValue Then vFirstAmount += 0.01
                .Item(PaymentPlanFields.ofFrequencyAmount).Value = vFirstAmount.ToString
              End If
              .Item(PaymentPlanFields.ofFirstAmount).Value = vFirstAmount.ToString
            ElseIf (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsNew) = ProportionalBalanceConfigSettings.pbcsNew And Len(pParams.ParameterExists("FirstAmount").Value) > 0 Then
              .Item(PaymentPlanFields.ofFirstAmount).Value = CStr(pParams("FirstAmount").DoubleValue)
              If .Item(PaymentPlanFields.ofFirstAmount).DoubleValue < FrequencyAmount Then .Item(PaymentPlanFields.ofFirstAmount).Value = .Item(PaymentPlanFields.ofFrequencyAmount).Value
            End If
          End If
        ElseIf StartMonth > 0 Then
          If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPaymentPlanStartMonth) = True And HasAutoPaymentMethod = False Then
            'If not paying by DD/CCCA/SO then ensure that NextPaymentDue date is using the StartMonth
            If CDate(NextPaymentDue) = CDate(StartDate) Then .Item(PaymentPlanFields.ofNextPaymentDue).Value = CStr(DateSerial(Year(CDate(StartDate)), StartMonth, Day(CDate(StartDate))))
          End If
        End If

        If (.Item(PaymentPlanFields.ofBalance).Value.Length > 0 And .Item(PaymentPlanFields.ofBalance).DoubleValue = 0) And pParams.HasValue("Balance") = True Then
          'Balance parameter has been passed and balance has been set and it is zero - advance RenewalDate but only if RenewalDate was not supplied
          If pParams.HasValue("RenewalDate") = False Then
            .Item(PaymentPlanFields.ofRenewalDate).Value = CalculateRenewalDate(.Item(PaymentPlanFields.ofRenewalDate).Value, True)
            .Item(PaymentPlanFields.ofNextPaymentDue).Value = .Item(PaymentPlanFields.ofRenewalDate).Value
            RenewalPending = False
          End If
        End If
      End With

    End Sub

    Public Sub SetFixedAmount(ByVal pFixedAmount As Double)
      'Set FixedAmount on PaymentPlan and StandingOrder
      'Used by Web Services only
      mvClassFields.Item(PaymentPlanFields.ofAmount).Value = pFixedAmount.ToString
      If StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        If Not (mvStandingOrder Is Nothing) Then mvStandingOrder.Amount = FrequencyAmount
      End If
    End Sub

    Public Sub CreatePaymentPlan(ByVal pPlanType As CDBEnvironment.ppType, ByVal pParams As CDBParameters, ByVal pTraderTransaction As TraderTransaction, ByRef pInformationMessage As String, Optional ByVal pMembershipType As MembershipType = Nothing, Optional ByVal pBatchNumber As Integer = 0, Optional ByRef pTransNumber As Integer = 0, Optional ByRef pWarningMessage As String = "")
      'Used by Smart Client and Web Services to create Payment Plans and all associated data (DD, Members etc.)
      'This will also Save everything
      Dim vJointContact As Contact
      Dim vMember As Member
      Dim vPPDetail As PaymentPlanDetail
      Dim vTDRLine As TraderAnalysisLine
      Dim vUpdateFields As CDBFields
      Dim vWhereFields As CDBFields
      Dim vPPDBalance As Double
      Dim vRow As Integer
      Dim vCA As ContactAccount
      Dim vSubsMemberJoined As Boolean
      Dim vInTrans As Boolean

      'Get the bank details number of the credit card details number for the details and make sure the required parameters are available.
      If pParams.Exists("PaymentMethod") = False Then
        pParams.Add("PaymentMethod")
        Select Case pPlanType
          Case CDBEnvironment.ppType.pptDD
            pParams("PaymentMethod").Value = mvEnv.GetConfig("pm_dd")
          Case CDBEnvironment.ppType.pptSO
            pParams("PaymentMethod").Value = mvEnv.GetConfig("pm_so")
          Case CDBEnvironment.ppType.pptCCCA
            pParams("PaymentMethod").Value = mvEnv.GetConfig("pm_ccca")
          Case Else
            'Default to Cash
            pParams("PaymentMethod").Value = mvEnv.GetConfig("pm_cash")
        End Select
      End If

      Select Case pParams.ParameterExists("PaymentMethod").Value
        Case mvEnv.GetConfig("pm_dd"), mvEnv.GetConfig("pm_so")
          vCA = New ContactAccount
          vCA.Init(mvEnv, pParams.ParameterExists("BankDetailsNumber").IntegerValue)
          If vCA.Existing Then
            'Found existing record using the supplied BankDetailsNumber
            'This does not support updating bank details so if BankDetailsNUmber supplied we will use it instead of any SortCode/AccountNumber/IbanNumber
          ElseIf pParams.ParameterExists("BankDetailsNumber").IntegerValue > 0 Then
            'BankDetailsNumber supplied but it was invalid so error
            RaiseError(DataAccessErrors.daeParameterValueInvalid, "BankDetailsNumber")
          End If
          If vCA.Existing = False Then
            'No BankDetailsNumber supplied so initialise using SortCode/AccountNumber/IbanNumber
            If pParams.HasValue("IbanNumber") Then
              vCA.InitByAccount(mvEnv, IntegerValue(pParams.OptionalValue("AutoPayContactNumber", (pParams("PayerContactNumber").Value))), (pParams.ParameterExists("IbanNumber").Value))
            Else
              vCA.InitByAccount(mvEnv, IntegerValue(pParams.OptionalValue("AutoPayContactNumber", (pParams("PayerContactNumber").Value))), (pParams.ParameterExists("SortCode").Value), (pParams.ParameterExists("AccountNumber").Value))
            End If
          End If
          If vCA.Existing Then
            If vCA.HistoryOnly Then
              RaiseError(DataAccessErrors.daeCannotUseHistoryOnlyBankAccount)
            Else
              If pParams.Exists("BankDetailsNumber") = False Then
                pParams.Add("BankDetailsNumber", CDBField.FieldTypes.cftInteger)
              End If
              pParams("BankDetailsNumber").Value = vCA.BankDetailsNumber.ToString
            End If
          Else
            'ContactAccount does not exist so must have AccountName in order to create it
            If Not pParams.Exists("AccountName") Then RaiseError(DataAccessErrors.daeParameterNotFound, "AccountName")
          End If
      End Select

      If pPlanType = CDBEnvironment.ppType.pptMember And pParams.ParameterExists("TransactionType").Value = "MEMB" Then
        mvClassFields.Item(PaymentPlanFields.ofMembershipType).Value = pParams("MembershipType").Value
        If (MembershipType.MembersPerOrder = 2 And pParams.ParameterExists("NumberOfMembers").IntegerValue = 2) And pTraderTransaction.SummaryMembers.Count > 1 Then
          'Create a joint contact record for the 2 individuals then set the payer to be the joint contact
          vJointContact = pTraderTransaction.GetMembershipJointContact(pParams("MembershipType").Value, pParams.OptionalValue("MemberSource", (pParams("Source").Value)))
          If pParams.ParameterExists("GiftMembership").Bool = False Then
            If vJointContact.Existing Then
              pParams("PayerContactNumber").Value = vJointContact.ContactNumber.ToString
              pParams("PayerAddressNumber").Value = vJointContact.Address.AddressNumber.ToString
            End If
            vRow = 0
            For Each vPPDetail In pTraderTransaction.TraderPPDLines
              vRow = vRow + 1
              If vRow = 1 Then
                If MembershipType.ChargeIndividualMembers <> "Y" Then
                  'If charge individual members then the 1st detail line should go to the 1st member not the payer
                  vPPDetail.SetContactAndAddress(pParams("PayerContactNumber").IntegerValue, pParams("PayerAddressNumber").IntegerValue)
                End If
              ElseIf vPPDetail.MemberOrPayer = "P" Then
                vPPDetail.SetContactAndAddress(pParams("PayerContactNumber").IntegerValue, pParams("PayerAddressNumber").IntegerValue)
              End If
            Next vPPDetail
          End If
        End If
      End If

      If pPlanType = CDBEnvironment.ppType.pptMember And mvExisting = False Then
        If FixedRenewalCycle = True AndAlso PreviousRenewalCycle = True AndAlso (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew) > 0 Then
          'RenewalAmount could be on the page and be an incorrect value now so we need to re-calculate it
          Dim vRenewalAmount As Double = pParams.ParameterExists("RenewalAmount").DoubleValue
          Dim vRenewalDate As String = pParams.ParameterExists("RenewalDate").Value
          If IsDate(vRenewalDate) = False Then vRenewalDate = pParams("StartDate").Value
          vRenewalAmount = GetProRataRenewalAmount(pTraderTransaction.TraderPPDLines, pParams("StartDate").Value, vRenewalDate, vRenewalAmount, pParams("PayerContactNumber").IntegerValue, pParams("MembershipType").Value, PaymentPlanUpdateTypes.pputNone, pParams.ParameterExists("TransactionType").Value, pParams.ParameterExists("TransactionPaymentMethod").Value, False)
          If pParams.Exists("RenewalAmount") = False Then pParams.Add("RenewalAmount", CDBField.FieldTypes.cftNumeric)
          pParams("RenewalAmount").Value = vRenewalAmount.ToString
        End If
      End If

      Create(pPlanType, pParams)

      Select Case PaymentMethod
        Case mvEnv.GetConfig("pm_dd")
          AddAutoPaymentMethod(CDBEnvironment.ppType.pptDD, pParams)
        Case mvEnv.GetConfig("pm_so")
          AddAutoPaymentMethod(CDBEnvironment.ppType.pptSO, pParams)
        Case mvEnv.GetConfig("pm_ccca")
          AddAutoPaymentMethod(CDBEnvironment.ppType.pptCCCA, pParams)
      End Select

      If PlanType = CDBEnvironment.ppType.pptLoan Then
        If TermUnits = OrderTermUnits.otuWeekly OrElse PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
          mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value = CDate(mvClassFields(PaymentPlanFields.ofOrderDate).Value).AddDays(PaymentFrequencyInterval).ToString(CAREDateFormat)
        Else
          mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value = CDate(AddMonths(mvClassFields(PaymentPlanFields.ofOrderDate).Value, mvClassFields(PaymentPlanFields.ofOrderDate).Value, PaymentFrequencyInterval)).ToString(CAREDateFormat)
        End If
      End If

      If PlanType = CDBEnvironment.ppType.pptMember Then
        'Add Member
        AddMembers(pParams, pMembershipType, pTraderTransaction.SummaryMembers)
      End If

      If Me.EligibleForGiftAid = True Then 'Only check for gift-aid eligibility if the Gift Aid param is not set or is set to Yes
        Me.EligibleForGiftAid = MembershipEligibleForGiftAid(Me.StartDate) 'Check based on the types of members in this plan.
      End If

      'Add detail lines
      vSubsMemberJoined = False
      If pParams.ParameterExists("TransactionType").Value = "MEMB" Then vSubsMemberJoined = True
      pTraderTransaction.TraderPPDLines.AddDetailLinesToPaymentPlan(mvEnv, Me, PaymentPlanUpdateTypes.pputNone, vSubsMemberJoined, (pParams.ParameterExists("Joined").Value))

      If pParams.Exists("TransactionType") Then
        Dim vIndex As Integer
        Dim vMaxIndex As Integer
        If pParams("TransactionType").Value = "SALE" OrElse pParams("TransactionType").Value = "EVNT" OrElse pParams("TransactionType").Value = "ACOM" OrElse pParams("TransactionType").Value = "SRVC" Then
          'Payment Plan is being created from an unbalanced Transaction
          'so remove any TraderAnalysisLines that are PaymentPlanDetails
          For Each vPPDetail In pTraderTransaction.TraderPPDLines
            vIndex = 1
            vMaxIndex = pTraderTransaction.TraderAnalysisLines.Count
            For Each vTDRLine In pTraderTransaction.TraderAnalysisLines
              If vTDRLine.ProductCode = vPPDetail.ProductCode And vTDRLine.RateCode = vPPDetail.RateCode Then
                'If vTDRLine.TraderTransactionTypeCode = "SRVC" Then mvSBPaymentPlan = True
                pTraderTransaction.DeleteTraderAnalysisLine(vIndex)
                'SetTASTotal()       'We have removed a line so re-calculate the Total
              End If
              If vIndex = vMaxIndex Then Exit For
            Next
          Next

          'If mvTALine < 1 Then
          '  mvPayPlansOnly = True
          '  mvTALine = 1
          'End If
        End If
      End If

      If pParams.Exists("Balance") = False Then
        'Set PaymentPlan Balance from Detail Lines (also re-calculates FrequencyAmount etc.)
        vPPDBalance = 0
        For Each vPPDetail In Details
          vPPDBalance = vPPDBalance + vPPDetail.Balance
        Next vPPDetail
        SetBalance(vPPDBalance)
      End If

      If pPlanType = CDBEnvironment.ppType.pptMember And FixedRenewalCycle = True And PreviousRenewalCycle = True And (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment And MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm And pParams.Exists("RenewalAmount") = True _
         Or (pPlanType = CDBEnvironment.ppType.pptMember _
             And MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm _
             And pParams.Exists("RenewalAmount")) Then 'BR19888 - Add annual membership with Renewal amount. A discount caused by a source will be correct here, but not after SetRenewalAmountFromPPD
        'RenewalAmount will have alredy been set correctly so leave it as it is
      Else
        'Recalculate the RenewalAmount
        SetRenewalAmountFromPPD()
      End If

      If PlanType = CDBEnvironment.ppType.pptLoan Then
        'Add Loan
        AddLoan(pParams)
      End If

      If StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes And Val(Amount) = 0 Then
        SetFixedAmount(RenewalAmount)
      End If

      'Now save everything
      If mvEnv.Connection.InTransaction = False Then
        mvEnv.Connection.StartTransaction()
        vInTrans = True
      End If

      Save(mvEnv.User.UserID, True, pBatchNumber, pTransNumber)
      If PlanType = CDBEnvironment.ppType.pptMember Then
        For Each vMember In mvCurrentMembers
          vMember.Save(mvEnv.User.UserID, True, pBatchNumber, pTransNumber, pWarningMessage)
        Next vMember
      End If

      If GiftMembership Then
        GetMember(IntegerValue(pParams.OptionalValue("MemberContactNumber", CStr(ContactNumber))))
        Member.AddSponsorActivity(Me, Payer.ContactNumber, Payer.ContactType)
      End If

      If PlanType = CDBEnvironment.ppType.pptLoan Then mvLoan.Save(mvEnv.User.UserID, True)

      SaveAutoPaymentMethod(pParams, pBatchNumber, pTransNumber)

      If PlanType = CDBEnvironment.ppType.pptLoan Then
        CalculateLoanInterest(mvEnv.User.UserID, True)    'This also create the payment schedule
      Else
        RegenerateScheduledPayments(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan, StartDate)
      End If

      Select Case PlanType
        Case CDBEnvironment.ppType.pptDD, CDBEnvironment.ppType.pptCCCA
          'May need to update NextPaymentDue & RenewalDate for DD/CCCA regular donations (PaymentPlan class can not do this without re-initialising it)
          If PaymentFrequencyFrequency = 1 Then
            vUpdateFields = New CDBFields
            vWhereFields = New CDBFields
            vUpdateFields.Add("next_payment_due", CDBField.FieldTypes.cftDate, NextPaymentDue)
            vUpdateFields.Add("renewal_date", CDBField.FieldTypes.cftDate, RenewalDate)
            vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
            mvEnv.Connection.UpdateRecords("orders", vUpdateFields, vWhereFields)
          End If
      End Select

      If PlanType = CDBEnvironment.ppType.pptMember Then
        ProcessBranchUpdates(pParams, pInformationMessage)
      End If

      SaveEnclosuresAndNewOrders(pParams)

      If vInTrans Then mvEnv.Connection.CommitTransaction()
    End Sub

    Public Function GetMemberBalance(ByVal pParams As CDBParameters, ByVal pTraderTransaction As TraderTransaction, ByVal pDefaultPaymentFrequency As String, ByRef pPayPlanRenewalAmount As Double, Optional ByVal pSpecialInitialPeriod As Boolean = False, Optional ByVal pCalcNextPayAmount As Boolean = False, Optional ByRef pNextPaymentAmount As Double = 0, Optional ByVal pProcessIncentives As Boolean = False, Optional ByVal pReasonForDespatch As String = "") As Double
      'Used by Web Services / Smart Client only to calculate new membership Balance & RenewalAmount
      'Copied from frmTrader.GetMemberBalance
      Dim vEntitlement As MembershipEntitlement
      Dim vSummMember As Member
      Dim vMembershipType As MembershipType 'The first/only members MembershipType
      Dim vMemType As MembershipType 'The MembershipType currently being processed
      Dim vPPDetail As PaymentPlanDetail
      Dim vMemberContact As Contact
      Dim vPayerContact As Contact
      Dim vSource As Source = Nothing
      Dim vAddressNumber As Integer
      Dim vAddCMTBalance As Boolean
      Dim vAmount As Double
      Dim vAssociate As Boolean 'Got associates
      Dim vAssociateCount As Integer
      Dim vAutoPayRFD As String = ""
      Dim vCMTPriceDate As String = ""
      Dim vContactNumber As Integer
      Dim vCurrMemTypeCode As String
      Dim vDetailNumber As Integer
      Dim vDistribCode As String
      Dim vFirstPeriod As Boolean
      Dim vJoinDate As String
      Dim vMember As Boolean
      Dim vMemberCount As Integer
      Dim vPaidByDD As Boolean
      Dim vPPBalance As Double 'PaymentPlan Balance
      Dim vPPLine As Integer
      Dim vPriceDate As String = ""
      Dim vQty As Integer
      Dim vRate As String
      Dim vSetAmount As String 'PPDetail FixedAmount
      Dim vSetBalance As Double 'PPDetail Balance
      Dim vStartDate As String
      Dim vPrice As Double
      Dim vPaymentMethod As String

      If pParams.Exists("Amount") = True And pParams.Exists("MemberFixedAmount") = False Then
        pParams.Add("MemberFixedAmount", CDBField.FieldTypes.cftNumeric, pParams("Amount").Value)
      End If
      If pParams.Exists("NetFixedAmount") = True AndAlso pParams.Exists("MemberNetFixedAmount") = False Then pParams.Add("MemberNetFixedAmount", CDBField.FieldTypes.cftNumeric, pParams("NetFixedAmount").Value)

      If pParams("TransactionType").Value = "MEMC" Then
        'CMT
        If mvCurrentMembers.Count() = 0 Then LoadMembers()
        vMembershipType = mvEnv.MembershipType((pParams("MembershipType").Value)) 'New MembershipType

        If FixedRenewalCycle And Len(vMembershipType.FixedCycle) > 0 Then SetMembershipTypeFixedCycle(vMembershipType.FixedCycle)
        If FixedRenewalCycle And PreviousRenewalCycle And MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm And (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 And (StartDate = RenewalDate Or DateDiff(Microsoft.VisualBasic.DateInterval.Year, CDate(StartDate), CDate(RenewalDate)) = Term) Then
          vJoinDate = Member.Joined
        Else
          vJoinDate = pParams("Joined").Value
        End If

        If IsMultipleCMT() = False Then
          If RenewalPending = True AndAlso CDate(RenewalDate) > Today Then
            'CMT after renewal but before the renewal date - calculate new cost as of the renewal date
            'Multiple CMT's will calculate in the normal way as it does it all twice
            vJoinDate = RenewalDate     'This date will be used in here to calculate the price
          End If
        End If

        vStartDate = StartDate
        vFirstPeriod = (DetermineMembershipPeriod() = MembershipPeriodTypes.mptFirstPeriod)
        vRate = pParams("MembershipRate").Value
        If vFirstPeriod Then
          If vRate <> vMembershipType.FirstPeriodsRate Then vMembershipType.UserDefinedFirstRate = vRate
        Else
          If vRate <> vMembershipType.SubsequentPeriodsRate Then vMembershipType.UserDefinedSubsequentRate = vRate
        End If
        If pParams.Exists("TransactionAmount") Then
          If pParams("TransactionAmount").DoubleValue = 0 Then pParams("TransactionAmount").Value = If(vFirstPeriod = True, vMembershipType.ProductRate.RenewalPrice(False, vContactNumber, 1, mvEnv.VATRate(vMembershipType.ProductVATCategory, Payer.VATCategory), DateValue(RenewalDate)).ToString, vMembershipType.SubsequentProductRate.RenewalPrice(False, vContactNumber, 1, mvEnv.VATRate(vMembershipType.SubsequentProductVATCategory, Payer.VATCategory), DateValue(RenewalDate)).ToString)
        End If
        If pParams.Exists("CMT_NetAmount") = True AndAlso pParams.Exists("MemberNetFixedAmount") = False Then
          pParams.Add("MemberNetFixedAmount", CDBField.FieldTypes.cftNumeric, pParams("CMT_NetAmount").Value)
        End If
      Else
        PlanType = CDBEnvironment.ppType.pptMember
        vMembershipType = MembershipType
        If pCalcNextPayAmount Then
          'Set some default values required for calculating OPS data
          mvClassFields.Item(PaymentPlanFields.ofOrderDate).Value = pParams("StartDate").Value
          mvClassFields.Item(PaymentPlanFields.ofRenewalDate).Value = pParams.OptionalValue("RenewalDate", (pParams("StartDate").Value))
          mvClassFields.Item(PaymentPlanFields.ofNextPaymentDue).Value = pParams.OptionalValue("NextPaymentDue", (pParams("Joined").Value))
          PaymentFrequencyCode = pParams("PaymentFrequency").Value
          mvClassFields.Item(PaymentPlanFields.ofClaimDay).Value = pParams.ParameterExists("ClaimDay").Value
        End If
        If pCalcNextPayAmount = True Or pProcessIncentives = True Or pParams.ParameterExists("CheckIncentives").Bool = True Then
          'Set some default values required for calculating OPS data and for processing Incentives
          vPaymentMethod = pParams.ParameterExists("PaymentMethod").Value
          If Len(vPaymentMethod) = 0 Then
            Select Case pParams.ParameterExists("PPPaymentType").Value
              Case "DIRD"
                vPaymentMethod = mvEnv.GetConfig("pm_dd")
              Case "STDO"
                vPaymentMethod = mvEnv.GetConfig("pm_so")
              Case "CCCA"
                vPaymentMethod = mvEnv.GetConfig("pm_ccca")
              Case Else
                vPaymentMethod = mvEnv.GetConfig("pm_cash")
            End Select
          End If
          mvClassFields.Item(PaymentPlanFields.ofPaymentMethod).Value = vPaymentMethod
          'If pCalcNextPayAmount then need to calculate the payment schedule so set DD/CCCA with just the info required
          Dim vBankAccount As BankAccount = mvEnv.BankAccount(pParams.ParameterExists("BankAccount").Value)
          Select Case vPaymentMethod
            Case mvEnv.GetConfig("pm_dd")
              mvClassFields.Item(PaymentPlanFields.ofDirectDebit).Value = "Y"
              vAutoPayRFD = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDDReason)
              If pCalcNextPayAmount Then DirectDebit.Update(0, vBankAccount.BankAccountCode, "", 0, mvEnv.GetPaymentPlanAutoPayDate(DateValue(pParams("StartDate").Value), ppAutoPayMethods.ppAPMDD, vBankAccount).ToString(CAREDateFormat), "", "")
            Case mvEnv.GetConfig("pm_ccca")
              mvClassFields.Item(PaymentPlanFields.ofCreditCard).Value = "Y"
              vAutoPayRFD = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCCReason)
              If pCalcNextPayAmount Then CreditCardAuthority.Update(0, vBankAccount.BankAccountCode, "", 0, mvEnv.GetPaymentPlanAutoPayDate(DateValue(pParams("StartDate").Value), ppAutoPayMethods.ppAPMCCCA, vBankAccount).ToString(CAREDateFormat), "")
            Case mvEnv.GetConfig("pm_so")
              vAutoPayRFD = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlSOReason)
          End Select
        End If

        vJoinDate = pParams("Joined").Value 'CVDate(GetPageValue(vMembersPage, "joined"))
        vStartDate = pParams("StartDate").Value 'GetPageValue(tpPaymentPlanDetails, "order_date")
        vFirstPeriod = True
        vRate = pParams.OptionalValue("MembershipRate", (vMembershipType.FirstPeriodsRate)) 'GetPageValue(tpMembership, "rate")
        If vRate <> vMembershipType.FirstPeriodsRate Then
          vMembershipType.UserDefinedFirstRate = vRate
        End If
      End If

      If IsDate(vStartDate) = True And mvEnv.GetConfig("me_membership_price_date") = "START_DATE" Then
        If DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(TodaysDate()), CDate(vStartDate)) > 0 Then
          vPriceDate = vStartDate
        Else
          vPriceDate = vJoinDate
        End If
      Else
        vPriceDate = vJoinDate
      End If

      If pParams.ParameterExists("TransactionType").Value = "MEMC" Then
        vCMTPriceDate = ""
        If IsDate(pParams.ParameterExists("CMTPriceDate").Value) Then vCMTPriceDate = pParams("CMTPriceDate").Value
      End If

      vQty = 1
      If vMembershipType.ChargeIndividualMembers = "N" And vMembershipType.MembersPerOrder = 0 Then vQty = IntegerValue(pParams.OptionalValue("NumberOfMembers", "1"))

      If ((pParams.ParameterExists("GiftMembership").Bool = True Or vMembershipType.PayerRequired = "M") And vMembershipType.ChargeIndividualMembers <> "Y") Or pParams("TransactionType").Value = "MEMC" Then
        vContactNumber = pParams("PayerContactNumber").IntegerValue
        vAddressNumber = pParams("PayerAddressNumber").IntegerValue
      Else
        vContactNumber = IntegerValue(pParams.OptionalValue("MemberContactNumber", (pParams("PayerContactNumber").Value)))
        vAddressNumber = IntegerValue(pParams.OptionalValue("MemberAddressNumber", (pParams("PayerAddressNumber").Value)))
      End If
      vPayerContact = New Contact(mvEnv)
      vPayerContact.InitRecordSetType(mvEnv, Contact.ContactRecordSetTypes.crtNumber Or Contact.ContactRecordSetTypes.crtVAT, pParams("PayerContactNumber").IntegerValue, pParams("PayerAddressNumber").IntegerValue)

      Dim vVATRate As VatRate
      Dim vPPDPricing As PaymentPlanDetailPricing = Nothing
      vAssociate = False
      vPPLine = 1
      vDetailNumber = 0
      vMemberCount = 1 'Processing first Member
      vMemType = vMembershipType
      'TA 3/10/02 Note first time through loop, we are processing the Main Membership charging line
      Do
        vPPDPricing = Nothing
        If vPPLine = 1 Or vMembershipType.ChargeIndividualMembers = "Y" Or (vAssociate = True And vAssociateCount > vMembershipType.MaxFreeAssociates) Then
          'Set vPPD = mvTraderApplication.GetPaymentPlanDetail(mvPPLine)
          'This will have retrieved either the existing PPD or a new PPD already initialised
          vDistribCode = pParams.ParameterExists("DistributionCode").Value

          vSetAmount = ""
          If pParams("TransactionType").Value = "MEMC" And Len(pParams.ParameterExists("MembershipRate").Value) > 0 And pParams.ParameterExists("TransactionAmount").DoubleValue = 0 Then
            If vFirstPeriod Then
              vVATRate = mvEnv.VATRate(vMembershipType.ProductVATCategory, vPayerContact.VATCategory)
            Else
              vVATRate = mvEnv.VATRate(vMembershipType.SubsequentProductVATCategory, vPayerContact.VATCategory)
            End If
            If (vFirstPeriod = True AndAlso vMembershipType.ProductRate.VatExclusive = True) OrElse (vMembershipType.SubsequentProductRate.VatExclusive = True) Then
              vSetAmount = pParams.ParameterExists("MemberNetFixedAmount").Value
              If vSetAmount.Length > 0 Then
                'We have the NetFixedAmount so add the VAT to it
                vSetAmount = FixTwoPlaces(DoubleValue(vSetAmount) + vVATRate.CalculateVATAmount(DoubleValue(vSetAmount), True, vJoinDate)).ToString
              End If
            End If
            If vSetAmount.Length = 0 Then
              vSetAmount = pParams.ParameterExists("MemberFixedAmount").Value 'GetPageValue(vMembersPage, "amount")
            End If
            vSetBalance = vMemType.ProductRate.Price(CDate(vJoinDate), vContactNumber, vQty, vVATRate)    'Force rate modifier data to be set
            If vSetBalance = 0 Then
              vSetBalance = DoubleValue(vSetAmount)
            Else
              vSetAmount = ""   'Clear it otherise it sets the fixed amount on the detail line
            End If
            'As the Price is zero, need to update the PPDPricing so that the MemberFixedAmount is used for the pricing
            vPPDPricing = vMembershipType.ProductRate.PaymentPlanDetailPricing
            If vSetAmount.Length > 0 Then vPPDPricing.CalculatePricing(vSetBalance, vSetBalance, False, vJoinDate, vVATRate, False)
          Else
            If vFirstPeriod Or mvEnv.GetConfigOption("me_renew_at_same_rate") Then
              vVATRate = mvEnv.VATRate(vMemType.ProductVATCategory, vPayerContact.VATCategory)
              vAmount = vMemType.ProductRate.Price(CDate(vJoinDate), vContactNumber, vQty, vVATRate)
            Else
              vVATRate = mvEnv.VATRate(vMemType.SubsequentProductVATCategory, vPayerContact.VATCategory)
              vAmount = vMemType.SubsequentProductRate.Price(CDate(vJoinDate), vContactNumber, vQty, vVATRate)
            End If
            If vAmount = 0 Then    '0 priced rate, could have been overridden
              If ((vFirstPeriod = True OrElse mvEnv.GetConfigOption("me_renew_at_same_rate")) AndAlso vMemType.ProductRate.VatExclusive = True) _
              OrElse (vMemType.SubsequentProductRate.VatExclusive = True) Then
                vSetAmount = pParams.ParameterExists("MemberNetFixedAmount").Value
                If vSetAmount.Length > 0 Then
                  'We have the NetFixedAmount so add the VAT to it
                  vSetAmount = FixTwoPlaces(DoubleValue(vSetAmount) + vVATRate.CalculateVATAmount(DoubleValue(vSetAmount), True, vJoinDate)).ToString
                  If pParams.Exists("MemberFixedAmount") = False Then pParams.Add("MemberFixedAmount", CDBField.FieldTypes.cftNumeric)
                  pParams("MemberFixedAmount").Value = vSetAmount
                End If
              End If
              If vSetAmount.Length = 0 Then
                If pParams.Exists("MemberFixedAmount") = False Then RaiseError(DataAccessErrors.daeParameterNotFound, "MemberFixedAmount")
                vSetAmount = pParams("MemberFixedAmount").Value
              End If
            End If
            If vFirstPeriod Then
              'Check Contact Discounts
              vSource = New Source
              vSource.Init(mvEnv, pParams.OptionalValue("MemberSource", (pParams.ParameterExists("Source").Value)))
              If vSource.DiscountPercentage > 0 Then
                vSetBalance = vMemType.ProductRate.Price(CDate(If(vCMTPriceDate.Length > 0, vCMTPriceDate, vPriceDate)), vContactNumber, vQty, vVATRate, vSource.DiscountPercentage, 0, 0)
              Else
                vSetBalance = vMemType.ProductRate.Price(CDate(If(vCMTPriceDate.Length > 0, vCMTPriceDate, vPriceDate)), vContactNumber, vQty, vVATRate)
              End If
              pPayPlanRenewalAmount = pPayPlanRenewalAmount + vSetBalance
              If Me.FixedRenewalCycle And (Me.PreviousRenewalCycle Or (mvEnv.GetConfigOption("recalculate_membership_balance") And Me.mvUseStartDateForTerm)) And vMemType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm And (Me.ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 Then
                If Me.ProRateBasisSetting = ProRateBasisConfigSettings.prbsFrequencyBased And Me.PaymentFrequencyCode.Length = 0 Then
                  Me.PaymentFrequencyCode = pDefaultPaymentFrequency
                End If
                vSetBalance = GetProrataBalance(vSetBalance, If(vCMTPriceDate.Length > 0, vCMTPriceDate, vJoinDate), False, vMemType.ProductRate, vVATRate, vContactNumber, vQty, vSource.DiscountPercentage, 0.0, vStartDate, False)
              End If
              vPPDPricing = vMemType.ProductRate.PaymentPlanDetailPricing
            Else
              vSetBalance = vMemType.SubsequentProductRate.Price(CDate(If(vCMTPriceDate.Length > 0, vCMTPriceDate, vJoinDate)), vContactNumber, vQty, vVATRate)
              pPayPlanRenewalAmount = pPayPlanRenewalAmount + vSetBalance
              vPPDPricing = vMemType.SubsequentProductRate.PaymentPlanDetailPricing
            End If
            If vMemType.ProductRate.PriceIsZero Then '0 priced rate, could have been overridden
              vSetBalance = pParams("MemberFixedAmount").DoubleValue
              pPayPlanRenewalAmount = pPayPlanRenewalAmount + vSetBalance
              'As the Price is zero, need to update the PPDPricing so that the MemberFixedAmount is used for the pricing
              With vPPDPricing
                .CalculatePricing(vSetBalance, vSetBalance, False, If(vCMTPriceDate.Length > 0, vCMTPriceDate, vJoinDate), vVATRate, False)
              End With
            End If
          End If

          vDetailNumber = vDetailNumber + 1
          vPPDetail = pTraderTransaction.GetPaymentPlanDetail(vDetailNumber)
          vPPDetail.Create(PlanNumber, vDetailNumber, vContactNumber, vAddressNumber, If(vFirstPeriod, vMemType.FirstPeriodsProduct, vMemType.SubsequentPeriodsProduct), If(vFirstPeriod, vMemType.FirstPeriodsRate, vMemType.SubsequentPeriodsRate), If(vPPDetail.Quantity > 0, vPPDetail.Quantity, vQty), vSetBalance, vSetAmount, 0, (vMemType.DespatchMethod), (pParams("Source").Value), vDistribCode, pParams.OptionalValue("CreatedBy", mvEnv.User.UserID), pParams.OptionalValue("CreatedOn", (TodaysDate())), "C", "", "", (vMemType.Subscription), False, "", False, "", "", True, pParams.ParameterExists("MemberNetFixedAmount").Value)
          vPPDetail.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltCharge
          If pParams("TransactionType").Value = "MEMC" Then vPPDetail.SetCMTData(vMemType.CMTProrateNewCostsCode, vMemType.CMTExcessPayment.CmtExcessPaymentTypeCode, 0, If(vFirstPeriod, vMemType.FirstPeriodsRefundProductCode, vMemType.SubsequentPeriodsRefundProductCode), If(vFirstPeriod, vMemType.FirstPeriodsRefundRateCode, vMemType.SubsequentPeriodsRefundRateCode))
          If vPPDPricing IsNot Nothing Then vPPDetail.SetModifierAndPriceData(vPPDPricing)
          vPPBalance = vPPBalance + vSetBalance
          vPPLine = vPPLine + 1

        ElseIf vPPLine > 1 And pParams("TransactionType").Value = "MEMC" And (pSpecialInitialPeriod Or mvSpecialInitialPeriod) And Not vAddCMTBalance Then
          vPPDetail = pTraderTransaction.GetPaymentPlanDetail(vPPLine)
          vPPBalance = vPPBalance + vPPDetail.Balance
          pPayPlanRenewalAmount = pPayPlanRenewalAmount + vPPDetail.Balance

          vAddCMTBalance = True
        End If
        'Below we need to figure out whether there are any more members/associates to process
        vMemberCount = vMemberCount + 1
        If pTraderTransaction.SummaryMembers.Count > 0 Then
          If pParams("TransactionType").Value = "MEMC" And vPPLine = 2 Then
            'CMT
            vSummMember = CType(pTraderTransaction.SummaryMembers(1), Access.Member)
            If vSummMember.MembershipTypeCode = vMembershipType.AssociateMembershipType And (vAssociateCount + 1) > vMembershipType.MaxFreeAssociates Then
              'We are changing Membership Type and have just processed
              'Payment Plan line 1 (The Membership Charge), and CMT has allowed an associate
              'to be on Members Grid line 1 and Associate should be charged for, in which case
              'stay put for one more go through the loop to ensure Associate is charged for.
              vPPLine = 1
            End If
          End If
          If pTraderTransaction.SummaryMembers.Count >= vMemberCount Then
            vSummMember = CType(pTraderTransaction.SummaryMembers(vMemberCount), Access.Member)
          Else
            vSummMember = Nothing
          End If
          If vSummMember Is Nothing Then
            vMember = False
          Else
            vMember = True
            vContactNumber = vSummMember.ContactNumber
            vAddressNumber = vSummMember.AddressNumber

            If vSummMember.MembershipTypeCode = vMembershipType.AssociateMembershipType Then
              vAssociate = True
              vAssociateCount = vAssociateCount + 1
              vMemType = mvEnv.MembershipType((vMembershipType.AssociateMembershipType))
            Else
              vAssociate = False
              vMemType = vMembershipType
            End If
          End If
        Else
          vMember = False
        End If
      Loop While vMember

      'Now get the entitlements
      vPaidByDD = (mvExisting And Me.DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes) Or (Not mvExisting And (pParams.ParameterExists("PaymentMethod").Value = "DD" Or pParams.ParameterExists("PPPaymentType").Value = "DIRD"))

      'Add Membership Entitlements (this will need to be run for each Member)
      'If we have multiple members then vContactNumber & vAddressNumber will be set to each member's Contact/Address numbers
      vCurrMemTypeCode = vMembershipType.MembershipTypeCode 'Set to MembershipTypeCode for each Member (incl. Associates)
      vMemType = vMembershipType

      Dim vNonPerBalance As Double = vAmount 'start off with the membership amount
      Dim vDiscount As Double
      Do
        For Each vEntitlement In vMemType.Entitlements("", True)
          With vEntitlement
            vSetBalance = 0
            If .AddCondition = MembershipEntitlement.MembershipEntitlementAddConditions.meacAlways Or (.AddCondition = MembershipEntitlement.MembershipEntitlementAddConditions.meacIfDirectDebit And vPaidByDD = True) Or (.AddCondition = MembershipEntitlement.MembershipEntitlementAddConditions.meacIfNotDirectDebit And vPaidByDD = False) Then
              vPPLine = 1
              vMember = vEntitlement.MemberEntitlement
              If pParams("TransactionType").Value = "MEMC" And pTraderTransaction.SummaryMembers.Count > 0 Then
                vSummMember = CType(pTraderTransaction.SummaryMembers(1), Access.Member)
                vContactNumber = vSummMember.ContactNumber
                vAddressNumber = vSummMember.AddressNumber
                vCurrMemTypeCode = vSummMember.MembershipTypeCode
                vDistribCode = vSummMember.DistributionCode
              Else
                vContactNumber = IntegerValue(pParams.OptionalValue("MemberContactNumber", (pParams("PayerContactNumber").Value)))
                vAddressNumber = IntegerValue(pParams.OptionalValue("MemberAddressNumber", (pParams("PayerAddressNumber").Value)))
                vCurrMemTypeCode = vMembershipType.MembershipTypeCode
                vDistribCode = pParams.ParameterExists("DistributionCode").Value
              End If

              Do
                vPPDPricing = Nothing
                If (vCurrMemTypeCode = vMemType.MembershipTypeCode) Or (vMember = False) Then
                  If .CheckEntitlementTypeValid(vMemType, vJoinDate, (pParams.ParameterExists("MemberDOB").Value), (pParams.ParameterExists("AgeOverride").IntegerValue)) Then
                    vVATRate = mvEnv.VATRate(.EntitlementProductVATCategory, vPayerContact.VATCategory)
                    Dim vEntitlementContact As Integer = If(.MemberEntitlement = True, vContactNumber, pParams("PayerContactNumber").IntegerValue)
                    Dim vEntitlementDate As Date = CDate(vJoinDate) 'CDate(TodaysDate())
                    If vCMTPriceDate.Length > 0 Then
                      vEntitlementDate = CDate(vCMTPriceDate)
                    ElseIf (IsDate(vStartDate) And mvEnv.GetConfig("me_membership_price_date") = "START_DATE") Then
                      vEntitlementDate = CDate(vStartDate)
                    End If
                    vPrice = .ProductRate.Price(vEntitlementDate, vEntitlementContact, .Quantity, vVATRate)

                    'Check for discounts that may be set up as entitlements
                    If .ProductRate.PriceIsPercentage = "T" Then
                      'calculate discount on the non-percentage total
                      vDiscount = FixTwoPlaces(vPrice) 'get the discount percentage
                      vSetBalance = FixTwoPlaces(vNonPerBalance * (vDiscount / 100)) * -1
                    ElseIf .ProductRate.PriceIsPercentage = "P" Then
                      'calculate discount on the previous total
                      vDiscount = FixTwoPlaces(vPrice)
                      vSetBalance = FixTwoPlaces(pPayPlanRenewalAmount * (vDiscount / 100)) * -1
                    Else
                      vSetBalance = FixTwoPlaces(vPrice)
                      vNonPerBalance += vSetBalance
                    End If
                    vPPDPricing = .ProductRate.PaymentPlanDetailPricing

                    'Check Prorating
                    If .ProductRate.PriceIsPercentage = "N" AndAlso Me.FixedRenewalCycle And (Me.PreviousRenewalCycle Or (mvEnv.GetConfigOption("recalculate_membership_balance") And Me.mvUseStartDateForTerm)) And vMemType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm And (Me.ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 Then
                      Select Case vEntitlement.ProRateChargeMethod
                        Case MembershipEntitlement.MembershipEntitlementProRatingChargeTypes.meprctProRate
                          pPayPlanRenewalAmount = pPayPlanRenewalAmount + vSetBalance
                          If .ProductRate.PriceIsPercentage = "N" Then
                            vSetBalance = GetProrataBalance(vSetBalance, vJoinDate, False, .ProductRate, vVATRate, vEntitlementContact, .Quantity, 0, 0, vStartDate, False)
                            vPPDPricing = Nothing
                            vPPDPricing = .ProductRate.PaymentPlanDetailPricing  'Been pro-rated so get new details
                          Else
                            vSetBalance = GetProrataBalance(vSetBalance, vJoinDate, False, Nothing, Nothing, 0, 1, 0, 0, vStartDate, False)
                            With vPPDPricing
                              .CalculatePricing(.UnitPrice, vSetBalance, False, vJoinDate, vVATRate, True)
                            End With
                          End If
                        Case MembershipEntitlement.MembershipEntitlementProRatingChargeTypes.meprctFullTermOnly
                          pPayPlanRenewalAmount = pPayPlanRenewalAmount + vSetBalance
                          If CDate(vJoinDate).AddYears(vMembershipType.MembershipTerm) <> CDate(Me.FixedRenewalDate(vJoinDate)).AddYears(vMembershipType.MembershipTerm) Then
                            vSetBalance = 0
                          End If
                        Case MembershipEntitlement.MembershipEntitlementProRatingChargeTypes.meprctFullAmount
                          pPayPlanRenewalAmount = pPayPlanRenewalAmount + vSetBalance
                        Case MembershipEntitlement.MembershipEntitlementProRatingChargeTypes.meprctNeverCharge
                          vSetBalance = 0
                          pPayPlanRenewalAmount = pPayPlanRenewalAmount + vSetBalance
                      End Select
                    Else
                      pPayPlanRenewalAmount = pPayPlanRenewalAmount + vSetBalance
                    End If
                    vDetailNumber = vDetailNumber + 1
                    vPPDetail = pTraderTransaction.GetPaymentPlanDetail(vDetailNumber)
                    vPPDetail.Create(PlanNumber, vDetailNumber, vEntitlementContact, If(.MemberEntitlement = True, vAddressNumber, pParams("PayerAddressNumber").IntegerValue),
                                     .ProductCode, If(.RateToUse = MembershipEntitlement.MembershipEntitlementRateUsageTypes.mertMembershipPricingLine, vMemType.FirstPeriodsRate, .RateCode),
                                     .Quantity, vSetBalance, "", 0, .DespatchMethod, (pParams("Source").Value), vDistribCode, pParams.OptionalValue("CreatedBy", mvEnv.User.UserID),
                                     pParams.OptionalValue("CreatedOn", (TodaysDate())), "C", "", "", .Subscription, False, .MemberOrPayer, False, "", "", False, "")
                    vPPBalance = vPPBalance + vSetBalance
                    vPPDetail.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltEntitlement
                    If pParams("TransactionType").Value = "MEMC" Then vPPDetail.SetCMTData(vEntitlement.CMTProrateNewCostsCode, vEntitlement.CMTExcessPayment.CmtExcessPaymentTypeCode, vEntitlement.SequenceNumber, vEntitlement.CMTRefundProductCode, vEntitlement.CMTRefundRateCode)
                    vPPDetail.SetModifierAndPriceData(vPPDPricing)
                  End If
                End If

                If vMember = True And pTraderTransaction.SummaryMembers.Count > 0 Then
                  vPPLine = vPPLine + 1
                  If pTraderTransaction.SummaryMembers.Count >= vPPLine Then
                    vSummMember = CType(pTraderTransaction.SummaryMembers(vPPLine), Access.Member)
                    vContactNumber = vSummMember.ContactNumber
                    vAddressNumber = vSummMember.AddressNumber
                    vCurrMemTypeCode = vSummMember.MembershipTypeCode
                    vDistribCode = vSummMember.DistributionCode
                  Else
                    vMember = False
                  End If
                ElseIf pTraderTransaction.SummaryMembers.Count = 0 Then
                  vMember = False 'Put this back to stop this getting stuck in this loop if entering a single Membership
                End If
              Loop While vMember = True
            End If
          End With
        Next vEntitlement

        If (vMemType Is vMembershipType) And Len(vMembershipType.AssociateMembershipType) > 0 Then
          vMemType = mvEnv.MembershipType((vMembershipType.AssociateMembershipType))
        Else
          vMemType = Nothing
        End If
      Loop While Not (vMemType Is Nothing)

      If (pProcessIncentives = True Or pParams.ParameterExists("CheckIncentives").Bool = True) And pParams("TransactionType").Value = "MEMB" Then
        If Len(vSource.IncentiveScheme) > 0 And vSource.HistoryOnly = False Then ' And Me.FixedRenewalCycle = False Then
          'Cannot add 'I'-type Incentives for a fixed-renewal PaymentPlan
          'Setup Member & Payer Contact's
          vPayerContact = New Contact(mvEnv)
          vMemberContact = New Contact(mvEnv)
          vPayerContact.Init()
          vMemberContact.Init()
          If pParams("PayerContactNumber").IntegerValue > 0 Then vPayerContact.InitRecordSetType(mvEnv, Contact.ContactRecordSetTypes.crtNumber Or Contact.ContactRecordSetTypes.crtAddress Or Contact.ContactRecordSetTypes.crtVAT, (pParams("PayerContactNumber").IntegerValue), pParams("PayerAddressNumber").IntegerValue)
          If pParams.ParameterExists("MemberContactNumber").IntegerValue > 0 Then
            vMemberContact.InitRecordSetType(mvEnv, Contact.ContactRecordSetTypes.crtNumber Or Contact.ContactRecordSetTypes.crtAddress Or Contact.ContactRecordSetTypes.crtVAT, (pParams("MemberContactNumber").IntegerValue), pParams("MemberAddressNumber").IntegerValue)
          ElseIf vPayerContact.Existing = True Then
            vMemberContact = vPayerContact
          End If
          If Len(pReasonForDespatch) = 0 Then pReasonForDespatch = vMembershipType.MembershipTypeCode

          WSProcessIncentives(mvEnv, vSource, pTraderTransaction, vPayerContact, vMemberContact, vJoinDate, pReasonForDespatch, Not (mvExisting), vAutoPayRFD, vPPBalance, pPayPlanRenewalAmount)
        End If
      End If

      If pCalcNextPayAmount Then
        mvClassFields.Item(PaymentPlanFields.ofRenewalAmount).Value = CStr(pPayPlanRenewalAmount) 'Set the RenewalAmount for the OPS calculations
        SetBalance(vPPBalance)

        If FixedRenewalCycle = True And PreviousRenewalCycle = True And MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm Then
          If (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment Then
            mvClassFields.Item(PaymentPlanFields.ofFirstAmount).Value = CStr(pPayPlanRenewalAmount)
          ElseIf (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsNew) = ProportionalBalanceConfigSettings.pbcsNew Then
            mvClassFields.Item(PaymentPlanFields.ofFirstAmount).Value = CStr(FrequencyAmount)
          End If
        End If

        RegenerateScheduledPayments(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan, StartDate, False) 'Calculate payment schedule without saving
        pNextPaymentAmount = CType(mvScheduledPayments.Item(mvScheduledPayments.Count()), OrderPaymentSchedule).AmountDue 'Collection built in reverse date order so look at the last item
      End If
      GetMemberBalance = vPPBalance
    End Function

    Public Function CanCancel() As Boolean
      CanCancel = mvExisting And Len(mvClassFields.Item(PaymentPlanFields.ofCancellationReason).Value) = 0
    End Function
    Public Function CanChangePayer() As Boolean
      Dim vCan As Boolean
      Dim vWhereFields As New CDBFields

      vCan = mvExisting And Len(CancellationReason) = 0
      If vCan Then vCan = (DirectDebitStatus <> PaymentPlan.ppYesNoCancel.ppYes)
      If vCan Then vCan = (StandingOrderStatus <> PaymentPlan.ppYesNoCancel.ppYes)
      If vCan Then vCan = (CreditCardStatus = PaymentPlan.ppYesNoCancel.ppNo)
      If vCan Then vCan = (CovenantStatus = PaymentPlan.ppCovenant.ppcNo Or CovenantStatus = PaymentPlan.ppCovenant.ppcCancelled)
      vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
      vWhereFields.Add("contact_number", CDBField.FieldTypes.cftLong, ContactNumber)
      If vCan Then vCan = mvEnv.Connection.GetCount("selected_orders", vWhereFields, "") = 0
      vWhereFields.Add("date_fulfilled", CDBField.FieldTypes.cftDate)
      If vCan Then vCan = mvEnv.Connection.GetCount("new_orders", vWhereFields, "") = 0
      If vCan Then vCan = mvEnv.Connection.GetCount("enclosures", vWhereFields, "") = 0
      If vCan Then vCan = Provisional = False
      CanChangePayer = vCan
    End Function
    Public Function CanConvert() As Boolean
      Dim vCan As Boolean
      Dim vRS As CDBRecordSet
      Dim vFields As CDBFields
      Dim vRecCount As Integer
      Dim vConfigValue As String
      Dim vPPConvMaintenance As Boolean

      vCan = mvExisting And Len(mvClassFields.Item(PaymentPlanFields.ofCancellationReason).Value) = 0
      If vCan Then
        vConfigValue = mvEnv.GetConfig("trader_application_conversion")
        If Len(vConfigValue) = 0 Then vConfigValue = "6" 'Default value
        vFields = New CDBFields
        vFields.Add("fp_application", CDBField.FieldTypes.cftLong, vConfigValue)
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPayPlanConvMaintenance) Then
          'Conversion App allows Maintenance, check if this is set
          vRS = mvEnv.Connection.GetRecordSet("SELECT fp_application, pp_conversion_incl_maintenance FROM fp_applications WHERE " & mvEnv.Connection.WhereClause(vFields))
          If vRS.Fetch() = True Then
            vRecCount = 1
            vPPConvMaintenance = vRS.Fields("pp_conversion_incl_maintenance").Bool
          End If
          vRS.CloseRecordSet()
        Else
          vRecCount = mvEnv.Connection.GetCount("fp_applications", vFields)
        End If
        vCan = vRecCount > 0
      End If
      If vCan Then
        vCan = ((StandingOrderStatus <> PaymentPlan.ppYesNoCancel.ppYes And DirectDebitStatus <> PaymentPlan.ppYesNoCancel.ppYes And CreditCardStatus <> PaymentPlan.ppYesNoCancel.ppYes) Or (CovenantStatus = PaymentPlan.ppCovenant.ppcNo Or CovenantStatus = PaymentPlan.ppCovenant.ppcCancelled) Or (vPPConvMaintenance)) And Not Provisional
      End If
      CanConvert = vCan
    End Function

    Public Function CanMaintain() As Boolean
      Dim vCan As Boolean

      vCan = mvExisting And Len(mvClassFields.Item(PaymentPlanFields.ofCancellationReason).Value) = 0
      If vCan Then vCan = (Len(mvEnv.GetConfig("trader_application_maintenance")) > 0)
      CanMaintain = vCan
    End Function

    Friend Sub GetOutstandingOPSDataTable(ByRef pDataTable As CDBDataTable)
      'Used by Web Services only
      Dim vRow As CDBDataRow
      Dim vOPS As OrderPaymentSchedule

      'Set correct field types
      With pDataTable.Columns
        .Item("ScheduledPaymentNumber").FieldType = CDBField.FieldTypes.cftLong
        .Item("DueDate").FieldType = CDBField.FieldTypes.cftDate
        .Item("ClaimDate").FieldType = CDBField.FieldTypes.cftDate
        .Item("AmountDue").FieldType = CDBField.FieldTypes.cftNumeric
        .Item("AmountOutstanding").FieldType = CDBField.FieldTypes.cftNumeric
        .Item("RevisedAmount").FieldType = CDBField.FieldTypes.cftNumeric
        .Item("ExpectedBalance").FieldType = CDBField.FieldTypes.cftNumeric
      End With

      'Add each OPS to the DataTable
      If (mvExisting = True Or mvCreated = True) Then
        For Each vOPS In ScheduledPayments()
          vRow = pDataTable.AddRow
          With vOPS
            vRow.Item("ScheduledPaymentNumber") = CStr(.ScheduledPaymentNumber)
            vRow.Item("DueDate") = .DueDate
            vRow.Item("ClaimDate") = .ClaimDate
            vRow.Item("AmountDue") = CStr(.AmountDue)
            vRow.Item("AmountOutstanding") = CStr(.AmountOutstanding)
            vRow.Item("RevisedAmount") = .RevisedAmount
            vRow.Item("ExpectedBalance") = CStr(.ExpectedBalance)
            vRow.Item("ScheduledPaymentStatus") = .ScheduledPaymentStatusCode
            vRow.Item("ScheduleCreationReason") = .ScheduleCreationReasonCode
          End With
        Next vOPS
        pDataTable.ReOrderRowsByColumn(("DueDate")) 'Ensure always ordered by DueDate descending
      End If

    End Sub

    Public Function ChangePayerGiftMembershipType(ByVal pContactNumber As Integer) As PaymentPlan.ChangePayerGiftMembershipTypes
      Dim vMember As Member
      Dim vContact As Contact
      Dim vFound As Boolean
      Dim vGiftMembership As PaymentPlan.ChangePayerGiftMembershipTypes

      vGiftMembership = PaymentPlan.ChangePayerGiftMembershipTypes.cpgmtNone
      If PlanType = CDBEnvironment.ppType.pptMember Then
        'Is the target contact one of the members?
        LoadMembers() 'initialise the collection of members
        For Each vMember In CurrentMembers 'try to find the target contact in the members collection
          If vMember.ContactNumber = pContactNumber Then
            vFound = True
            vGiftMembership = PaymentPlan.ChangePayerGiftMembershipTypes.cpgmtNonGift
            Exit For
          End If
        Next vMember
        If Not vFound Then
          'Target contact is not one of the members
          vContact = New Contact(mvEnv)
          vContact.Init(pContactNumber)
          'Is the target contact a joint contact and the membership a joint membership?
          If vContact.ContactType = Contact.ContactTypes.ctcJoint And MembershipType.MembersPerOrder = 2 Then
            For Each vMember In CurrentMembers
              If vMember.Contact.GetJointContact(Nothing).ContactNumber = pContactNumber Then
                vFound = True
                vGiftMembership = PaymentPlan.ChangePayerGiftMembershipTypes.cpgmtNonGift
                Exit For
              End If
            Next vMember
          End If
          If Not vFound Then vGiftMembership = PaymentPlan.ChangePayerGiftMembershipTypes.cpgmtGift
        End If
      End If
      ChangePayerGiftMembershipType = vGiftMembership
    End Function

    Public Function PreprocessReinstatement() As Boolean
      Dim vMsg As String = ""
      Dim vFields As New CDBFields
      Dim vRS As CDBRecordSet
      Dim vReinstate As Boolean
      Dim vSQL As String
      Dim vHasFMT As Boolean
      Dim vMemCount As Integer
      Dim vContact As Contact
      Dim vMembershipType As String = ""
      Dim vNextMembershipType As String = ""

      vReinstate = True
      If PlanType = CDBEnvironment.ppType.pptMember Then
        With vFields
          .Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
          .Add("cancellation_reason")
        End With
        vSQL = "SELECT m.contact_number, single_membership, m.membership_type, members_per_order, subsequent_membership_type, x.membership_number FROM members m"
        vSQL = vSQL & " INNER JOIN membership_types mt ON mt.membership_type = m.membership_type"
        vSQL = vSQL & " LEFT OUTER JOIN (SELECT contact_number, membership_number FROM members m"
        vSQL = vSQL & " INNER JOIN membership_types mt ON m.membership_type = mt.membership_type"
        With vFields
          .Item("order_number").WhereOperator = CDBField.FieldWhereOperators.fwoNotEqual
          .Add("single_membership", CDBField.FieldTypes.cftCharacter, "Y")
        End With
        vSQL = vSQL & " WHERE " & mvEnv.Connection.WhereClause(vFields) & " ) x ON m.contact_number = x.contact_number"
        With vFields
          .Remove("single_membership")
          .Item("order_number").WhereOperator = CDBField.FieldWhereOperators.fwoEqual
          .Item("cancellation_reason").Value = CancellationReason
          .Add("cancelled_on", CDBField.FieldTypes.cftDate, CancelledOn)
        End With
        vSQL = vSQL & " WHERE " & mvEnv.Connection.WhereClause(vFields)
        vRS = mvEnv.Connection.GetRecordSet(mvEnv.Connection.ProcessAnsiJoins(vSQL))
        While vRS.Fetch() = True And vReinstate
          vMemCount = vMemCount + 1
          If vRS.Fields("single_membership").Bool = True And vRS.Fields.Item("membership_number").IntegerValue > 0 Then
            'If the member has a current single membership then prevent reinstatement, regardless of the setting of the Single Membership flag on their cancelled membership
            vReinstate = False
            If ContactNumber = vRS.Fields.Item("contact_number").IntegerValue Then
              vMsg = String.Format(ProjectText.String30064, (ProjectText.String30092), "", "") 'this
            Else
              vContact = New Contact(mvEnv)
              vContact.Init((vRS.Fields.Item("contact_number").IntegerValue))
              vMsg = String.Format(ProjectText.String30064, "", CStr(vContact.ContactNumber), " (" & vContact.Name & ") ")
            End If
          End If
          If vReinstate Then
            'Check that the member's membership type only allows one member and has a subsequent membership type
            'Only membership types that do not allow multiple members can gave an FMT
            If vRS.Fields.Item("members_per_order").IntegerValue = 1 And Len(vRS.Fields.Item("subsequent_membership_type").Value) > 0 Then
              'Ensure that the membership wasn't halfway through an FMT when it was cancelled
              If vRS.Fields.Item("membership_type").Value <> MembershipTypeCode Then
                vReinstate = False
                vMsg = (ProjectText.String30090) 'Unable to re-instate this Payment Plan as the Membership was part way through a Future Membership Type change at the time of cancellation
              Else
                'Inform the user that they may wish to manually create an FMT for this member
                vHasFMT = True
                vMembershipType = vRS.Fields.Item("membership_type").Value
                vNextMembershipType = vRS.Fields.Item("subsequent_membership_type").Value
              End If
            End If
          End If
        End While
        vRS.CloseRecordSet()
        'Didn't find a matching membership for the payment plan
        If vMemCount = 0 Then
          vReinstate = False
          vMsg = (ProjectText.String30075) 'Unable to re-instate this Payment Plan as the Membership could not be found
        End If
      End If
      If Not vReinstate Then mvReinstatePreprocessErrorMsg = vMsg
      If vHasFMT Then mvReinstatePreprocessFMTMsg = String.Format(ProjectText.String30091, vMembershipType, vNextMembershipType) 'The Membership Type of this Member '%s' has the Subsequent Membership Type '%s'.  If such a Future Membership Type change is required for this Member then this must be set up manually.
      PreprocessReinstatement = vReinstate
    End Function
    Public Function CheckHistoricAddressLinks(Optional ByVal pType As CDBEnvironment.ppType = CDBEnvironment.ppType.pptNull, Optional ByVal pAutoPayNumber As Integer = 0, Optional ByVal pAutoPayDesc As String = "") As Boolean
      'Check contacts and addresses to ensure that we don't reinstate the payment plan/membership/auto payment method and its associated records to an historic address.
      'Returns True if any associated records are linked to an historic contact-address link.  Otherwise returns False.
      'The conditions under which the associated tables are checked and how they're checked comes directly from the Reinstate, ReinstateAutoPayMethod & ReinstateMembership methods of the PaymentPlan class.
      Dim vTableList As String = ""
      Dim vWhereSQL As String
      Dim vTables() As String
      Dim vIndex As Integer
      Dim vSQL As String = ""
      Dim vFound As Boolean
      Dim vMT As MaintenanceTable
      Dim vNumberAttr As String = ""
      Dim vPayMethod As String = ""

      If pType = CDBEnvironment.ppType.pptNull Or pType = CDBEnvironment.ppType.pptMember Then
        'When attempting to reinstate a payment plan or a membership check all records that are linked to the payment plan
        vTableList = "new_orders,order_details,orders,subscriptions"
        If StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppCancelled Then vTableList = vTableList & ",bankers_orders"
        If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppCancelled Then vTableList = vTableList & ",direct_debits"
        If CreditCardStatus = PaymentPlan.ppYesNoCancel.ppCancelled Then vTableList = vTableList & ",credit_card_authorities"
        If CovenantStatus = PaymentPlan.ppCovenant.ppcCancelled Then vTableList = vTableList & ",covenants"
        If PlanType = CDBEnvironment.ppType.pptMember Then vTableList = vTableList & ",members"
      Else
        'When attempting to reinstate an automated payment method only check that record
        If pType = CDBEnvironment.ppType.pptCCCA Then
          vTableList = "credit_card_authorities"
          vNumberAttr = "credit_card_authority_number"
        ElseIf pType = CDBEnvironment.ppType.pptDD Then
          vTableList = "direct_debits"
          vNumberAttr = "direct_debit_number"
        ElseIf pType = CDBEnvironment.ppType.pptSO Then
          vTableList = "bankers_orders"
          vNumberAttr = "bankers_order_number"
        End If
      End If
      'Build the base WHERE clause
      vWhereSQL = "x.order_number = " & PlanNumber & " %andAND x.contact_number = ca.contact_number AND x.address_number = ca.address_number AND historical = 'Y'"
      'Build an array from the list of tables to check
      vTables = Split(vTableList, ",")
      'Check each table, one at a time
      For vIndex = 0 To UBound(vTables)
        Select Case vTables(vIndex)
          Case "new_orders"
            'When reinstating a payment plan or a membership only look for records that haven't yet been fulfilld
            vSQL = Replace(vWhereSQL, "%and", " AND date_fulfilled IS NULL ")
          Case "orders", "order_details"
            'Reinstating a payment plan or membership requires no further qualification
            vSQL = Replace(vWhereSQL, "%and", " ")
          Case "covenants"
            'When reinstating a payment plan or a membership qualifying covenants only have to have the same cancellation date
            vSQL = Replace(vWhereSQL, "%and", " AND cancelled_on " & mvEnv.Connection.SQLLiteral("=", CDBField.FieldTypes.cftDate, CancelledOn) & " ")
          Case "members"
            If pType = CDBEnvironment.ppType.pptNull Then
              'When reinstating a payment plan qualifying members have to have the same cancellation reason and date
              vSQL = Replace(vWhereSQL, "%and", " AND cancellation_reason = '" & CancellationReason & "' AND cancelled_on " & mvEnv.Connection.SQLLiteral("=", CDBField.FieldTypes.cftDate, CancelledOn) & " ")
            Else
              'Reinstating a membership requires no further qualification
              vSQL = Replace(vWhereSQL, "%and", " ")
            End If
          Case "subscriptions"
            'When reinstating a payment plan or a membership qualifying subscriptions have to have the same cancellation reason and date
            vSQL = Replace(vWhereSQL, "%and", " AND cancellation_reason = '" & CancellationReason & "' AND cancelled_on " & mvEnv.Connection.SQLLiteral("=", CDBField.FieldTypes.cftDate, CancelledOn) & " ")
          Case Else
            If pType = CDBEnvironment.ppType.pptNull Then
              'When reinstating a payment plan qualifying SOs, DDs & CCCAs have to have the same cancellation reason and date
              vSQL = Replace(vWhereSQL, "%and", " AND cancellation_reason = '" & CancellationReason & "' AND cancelled_on " & mvEnv.Connection.SQLLiteral("=", CDBField.FieldTypes.cftDate, CancelledOn) & " ")
            ElseIf pType = CDBEnvironment.ppType.pptMember Then
              'When reinstating a membership only check the automated payment methods that match the actual payment method code on the payment plan
              Select Case vTables(vIndex)
                Case "bankers_orders"
                  vPayMethod = mvEnv.GetConfig("pm_so")
                Case "direct_debits"
                  vPayMethod = mvEnv.GetConfig("pm_dd")
                Case "credit_card_authorities"
                  vPayMethod = mvEnv.GetConfig("pm_ccca")
              End Select
              'Qualifying SOs, DDs & CCCAs only have to have the same cancellation date
              If PaymentMethod = vPayMethod Then vSQL = Replace(vWhereSQL, "%and", " AND cancelled_on " & mvEnv.Connection.SQLLiteral("=", CDBField.FieldTypes.cftDate, CancelledOn) & " ")
            Else
              'When reinstating an automated payment method only check that record
              vSQL = Replace(vWhereSQL, "%and", " AND " & vNumberAttr & " = " & pAutoPayNumber & " ")
            End If
        End Select
        'See if the table is linked to an historic contact-address link
        vFound = mvEnv.Connection.GetCount(vTables(vIndex) & " x, contact_addresses ca", Nothing, vSQL) > 0
        If vFound Then Exit For
      Next
      If vFound Then
        'We've found some contact-address links that are historic
        vMT = New MaintenanceTable
        vMT.Init(mvEnv, vTables(vIndex))
        If pType <> CDBEnvironment.ppType.pptNull And pType <> CDBEnvironment.ppType.pptMember Then
          mvHistoricAddressesErrorMsg = String.Format(ProjectText.String30088, pAutoPayDesc) 'This %s cannot be re-instated because it has an historic contact-address link
        ElseIf pType = CDBEnvironment.ppType.pptMember Then
          mvHistoricAddressesErrorMsg = String.Format(ProjectText.String30087, vMT.TableNameDesc) 'This Membership cannot be re-instated because at least one of the corresponding %s records has an historic contact-address link
        Else
          mvHistoricAddressesErrorMsg = String.Format(ProjectText.String30089, vMT.TableNameDesc) 'This Payment Plan cannot be re-instated because at least one of the corresponding %s records has an historic contact-address link
        End If
      End If
      CheckHistoricAddressLinks = vFound
    End Function
    Public Sub ProcessMissedPayments()
      'When reinstateing, see if any payments have been missed
      'Returns true if able to continue with the reinstatement
      Dim vOPS As OrderPaymentSchedule
      Dim vAmount As Double
      Dim vBalance As Double
      Dim vCount As Integer
      Dim vFreqAmnt As Double
      Dim vNPDDate As String
      Dim vOldRenDate As String
      Dim vOldRenPen As Boolean
      Dim vRenDate As String
      Dim vSavePS As Boolean

      mvReinstateSkipPaymentsCount = 0
      mvReinstateSkipPaymentsValue = 0

      If mvEnv.GetConfig("fp_od_payments_reinstate_proc") = "ASK" AndAlso Balance > 0 AndAlso PlanType <> CDBEnvironment.ppType.pptLoan Then
        If DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(NextPaymentDue), CDate(TodaysDate())) > 0 Then
          'We are after the next payment due date
          vOldRenDate = RenewalDate
          vRenDate = RenewalDate
          vOldRenPen = RenewalPending
          vBalance = Balance
          vFreqAmnt = FrequencyAmount
          vSavePS = True
          If PaymentScheduleAmendedOn.Length > 0 Then
            mvScheduledPayments = Nothing
            GetScheduledPayments(True, "", True) 'Force selection of all "Due" payments even though PP is cancelled
            For Each vOPS In ScheduledPayments
              vNPDDate = vOPS.DueDate
              If vOPS.ClaimDate.Length > 0 Then vNPDDate = vOPS.ClaimDate
              If CDate(vNPDDate) < CDate(TodaysDate()) Then
                If (IsCancelled = True And (vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsCancelled Or vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue)) And vOPS.ScheduleCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Then
                  'Pay Plan cancelled, so schedule records to skip will be set as cancelled
                  vCount = vCount + 1
                  vAmount = vAmount + vOPS.AmountOutstanding
                ElseIf (IsCancelled = False And vOPS.AmountOutstanding > 0) And vOPS.ScheduleCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Then
                  'Only auto pay method cancelled so schedule records to skip are those with an outstanding amount
                  vCount = vCount + 1
                  vAmount = vAmount + vOPS.AmountOutstanding
                End If
              End If
            Next vOPS

            If CDate(StartDate) = CDate(vRenDate) Then
              'No payments have been received yet
              RenewalDate = CalculateRenewalDate(RenewalDate, True)
              vRenDate = CalculateRenewalDate(vRenDate, True)
              RenewalPending = False
            End If

            vNPDDate = vRenDate
            If CDate(vRenDate) < CDate(TodaysDate()) Then
              'Payment Plan has missed a renewal
              If (PaymentFrequencyFrequency = 1 And PaymentFrequencyInterval = 1) And PlanType <> CDBEnvironment.ppType.pptMember And Balance > 0 Then
                'Regular monthly donation with o/s balance
                vSavePS = False
              End If
              If RenewalPending Then
                'Renewed and no payments received
                vRenDate = CalculateRenewalDate(vRenDate, True)
              End If

              While CDate(vRenDate) < CDate(TodaysDate())
                SetBalance(0) 'Set balance to 0 in order to get provisional scheduled payment
                RenewalDate = vRenDate
                If vSavePS Then
                  vOPS = New OrderPaymentSchedule
                  vOPS.Init(mvEnv)
                  vOPS.CreateInAdvance(mvEnv, Me, RenewalAmount, False)
                Else
                  RegenerateScheduledPayments(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance, vRenDate, vSavePS)
                End If
                vFreqAmnt = CalcFrequencyAmount(RenewalAmount, PaymentFrequencyFrequency) 'Re-calc the FrequencyAmount as it may have been reset by the cancellation
                If CDate(CalculateRenewalDate(vRenDate, True)) > CDate(TodaysDate()) Then
                  'New renewal date will be after today
                  'Loop through until we get to TodaysDate
                  vNPDDate = vRenDate 'We have advanced vRenDate so set vNPDDate to be the same
                  While CDate(vNPDDate) < CDate(TodaysDate())
                    vCount = vCount + 1
                    vAmount = vAmount + vFreqAmnt '.FrequencyAmount

                    'Update next payment due date
                    If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                      vNPDDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, PaymentFrequencyInterval, CDate(vNPDDate)))
                    Else
                      vNPDDate = AddMonths(BaseDate, vNPDDate, PaymentFrequencyInterval)
                    End If
                  End While
                Else
                  vCount = vCount + PaymentFrequencyFrequency
                  vAmount = vAmount + RenewalAmount
                End If
                vRenDate = CalculateRenewalDate(vRenDate, True)
              End While
            End If
          Else
            'Pay Plan was cancelled before upgrade
            'Calculate missed payments without the payment schedule (it will be created with the reinstatement)
            vNPDDate = NextPaymentDue
            While DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(vNPDDate), CDate(TodaysDate())) > 0
              vCount = vCount + 1
              If vCount = 1 Then
                'May need to include arrears, first time only
                If Arrears > 0 Then vAmount = Arrears
                If Balance < FrequencyAmount Then
                  vAmount = vAmount + Balance
                Else
                  vAmount = vAmount + FrequencyAmount
                End If
              Else
                vAmount = vAmount + FrequencyAmount
              End If

              'Update next payment due date
              If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                vNPDDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, PaymentFrequencyInterval, CDate(vNPDDate)))
              Else
                vNPDDate = AddMonths(BaseDate, vNPDDate, PaymentFrequencyInterval)
              End If
            End While
          End If
          SetBalance(vBalance)
          RenewalDate = vOldRenDate
          RenewalPending = vOldRenPen
          SaveChanges()
          If vCount > 0 Then
            mvReinstateSkipPaymentsCount = vCount
            mvReinstateSkipPaymentsValue = vAmount
          End If
        End If
      End If
    End Sub

    Public Sub AddDetailWS(ByVal pParams As CDBParameters)
      'Used by Web Services only to add detail line to existing PaymentPlan
      Dim vProduct As New Product(mvEnv)
      Dim vProductNumber As Integer

      'Add extra required parameters
      If pParams.Exists("PaymentPlanNumber") = False Then pParams.Add("PaymentPlanNumber", mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue)
      pParams.Add("DetailNumber", NextDetailLine)
      If pParams.Exists("ContactNumber") = False Then
        pParams.Add("ContactNumber", mvClassFields(PaymentPlanFields.ofContactNumber).IntegerValue)
        pParams.Add("AddressNumber", mvClassFields(PaymentPlanFields.ofAddressNumber).IntegerValue)
      End If

      vProductNumber = GetProductNumber(cdbValueKnownConstants.cdbVKCunknown, (pParams("Product").Value), (pParams.ParameterExists("ProductNumber").IntegerValue))
      If vProductNumber > 0 Then
        If pParams.Exists("ProductNumber") = False Then pParams.Add("ProductNumber", CDBField.FieldTypes.cftLong)
        pParams("ProductNumber").Value = vProductNumber.ToString
      End If

      If mvExisting = True And mvDetails.Count() = 0 Then InitPaymentPlanDetails(mvEnv, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))

      mvDetail = New PaymentPlanDetail(Me)
      mvDetail.Init(mvEnv)
      mvDetail.CreateSC(pParams)
      If mvDetail.Subscription Then mvDetail.ProcessSubscriptionValidDates(Me, True, False)
      mvDetails.Add(mvDetail, GetNextDetailKey)

      mvClassFields(PaymentPlanFields.ofNextDetailLine).Value = CStr(mvClassFields(PaymentPlanFields.ofNextDetailLine).IntegerValue + 1)
      mvClassFields(PaymentPlanFields.ofDetailLines).Value = CStr(mvDetails.Count())

      'Set FixedAmount
      If Len(mvClassFields(PaymentPlanFields.ofAmount).Value) > 0 And Len(mvDetail.Amount) > 0 Then
        SetFixedAmount(FixTwoPlaces(mvClassFields(PaymentPlanFields.ofAmount).DoubleValue + Val(mvDetail.Amount)))
      End If

      'Set Balance & RenewalAmount
      SetBalance(FixTwoPlaces(mvClassFields(PaymentPlanFields.ofBalance).DoubleValue + mvDetail.Balance))
      SetRenewalAmountFromPPD(True, True)

    End Sub

    Public Sub RemoveDetail(ByVal pParams As CDBParameters) ' ByVal pDetailNumber As Long, ByVal pProduct As String, ByVal pRate As String, Optional ByVal pCancellationReason As String = "", Optional ByVal pCancelledBy As String = "", Optional ByVal pCancellationSource As String = "")
      'Used by Web Services to delete a PaymentPlanDetail and cancel any Subscription
      Dim vPPDetail As PaymentPlanDetail
      Dim vSubscription As Subscription = Nothing
      Dim vCount As Integer
      Dim vDetailNumber As Integer
      Dim vSubsNumber As Integer

      If mvExisting = True And mvDetails.Count() = 0 Then InitPaymentPlanDetails(mvEnv, (mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))

      vDetailNumber = pParams.ParameterExists("DetailNumber").IntegerValue
      If vDetailNumber = 0 Then
        'Find PPDetail using Product & Rate
        For Each vPPDetail In mvDetails
          If (vPPDetail.ProductCode = pParams("Product").Value And vPPDetail.RateCode = pParams("Rate").Value) Then
            vDetailNumber = vPPDetail.DetailNumber
            vCount = vCount + 1
          End If
        Next vPPDetail
        If vCount = 0 Then
          RaiseError(DataAccessErrors.daeCannotFindPaymentPlanDetailLine, If(vDetailNumber = 0, "", vDetailNumber.ToString), CStr(mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
        ElseIf vCount > 1 Then
          RaiseError(DataAccessErrors.daeCannotDeletePPDetailMultipleRecords)
        End If
      End If

      vPPDetail = CType(mvDetails.Item(GetDetailKeyFromLineNo(vDetailNumber)), PaymentPlanDetail)
      If vPPDetail.Existing Then
        If PlanType = CDBEnvironment.ppType.pptMember Then
          '(1) Cannot delete detail line 1 for a Membership
          If vPPDetail.DetailNumber = 1 Then
            RaiseError(DataAccessErrors.daeCannotDeletePPDetailMembershipLine)
          End If
          '(2) Cannot delete future membership pricing line
          Dim vFutureDetailNumber As Integer = 0
          For Each vPPDetailFmt As PaymentPlanDetail In mvDetails
            If vPPDetailFmt.TimeStatus = "F" Then
              vFutureDetailNumber = vPPDetailFmt.DetailNumber
              Exit For
            End If
          Next
          If vFutureDetailNumber > 0 Then
            If vPPDetail.DetailNumber = vFutureDetailNumber Then
              RaiseError(DataAccessErrors.daeCannotDeletePPDetailFutMembershipLine)
            End If
          End If
        End If

        vSubsNumber = vPPDetail.SubscriptionNumber(False)
        If vSubsNumber > 0 Then
          If mvCurrentSubscriptions.Count() = 0 Then LoadSubscriptions()
          For Each vSubscription In mvCurrentSubscriptions
            If vSubscription.SubscriptionNumber = vSubsNumber Then Exit For
          Next vSubscription
          If Not (vSubscription Is Nothing) Then
            If vSubscription.Existing Then
              If Len(vSubscription.CancellationReason) = 0 Then
                If Len(pParams.ParameterExists("CancellationReason").Value) = 0 Then
                  RaiseError(DataAccessErrors.daeParameterNotFound, "CancellationReason")
                Else
                  vSubscription.Cancel((pParams("CancellationReason").Value), pParams.ParameterExists("CancelledBy").Value, pParams.ParameterExists("CancellationSource").Value)
                End If
              End If
            End If
          End If
        End If
      End If

      'Remove PPDetail from collection
      mvDetails.Remove(GetDetailKeyFromLineNo(vPPDetail.DetailNumber))

      'Set FixedAmount
      If Len(mvClassFields(PaymentPlanFields.ofAmount).Value) > 0 And Len(vPPDetail.Amount) > 0 Then
        SetFixedAmount(FixTwoPlaces(mvClassFields(PaymentPlanFields.ofAmount).DoubleValue - Val(vPPDetail.Amount)))
      End If

      'Set Balance & RenewalAmount
      SetBalance(FixTwoPlaces(mvClassFields(PaymentPlanFields.ofBalance).DoubleValue - vPPDetail.Balance))
      SetRenewalAmountFromPPD(True, True)

      'Renumber remaining detail lines
      vCount = 0
      For Each vPPDetail In mvDetails
        vCount = vCount + 1
        vPPDetail.SetPaymentPlanAndDetailNumbers(vPPDetail.PlanNumber, vCount)
      Next vPPDetail
      ReNumberDetailKeys()

      mvClassFields(PaymentPlanFields.ofNextDetailLine).Value = CStr(mvClassFields(PaymentPlanFields.ofNextDetailLine).IntegerValue - 1)
      mvClassFields(PaymentPlanFields.ofDetailLines).Value = CStr(mvDetails.Count())

    End Sub

    Friend Function DeterminePaymentPlanGiftAidEligibility(ByVal pParams As CDBParameters, ByVal pTDRTransaction As TraderTransaction) As Boolean
      'This will be used to set the EligibleForGiftAid flag on the Payment Plan during PaymentPlan creation/maintenance in Smart Client
      'Class must have already had membership info set up (SetMember) when not doing CMT
      Dim vMember As New Member
      Dim vMembershipType As MembershipType
      Dim vContactNumber As Integer
      Dim vDOB As String
      Dim vEligible As Boolean
      Dim vJuniorMember As Boolean 'Junior members for Gift Aid purposes
      Dim vMaxMembers As Integer
      Dim vMemChecked As Boolean
      Dim vRow As Integer
      Dim vStartDate As String
      Dim vTransactionType As String

      vTransactionType = pParams.ParameterExists("TransactionType").Value
      If vTransactionType = "MEMC" Then
        'CMT - use new MembershipType (class will be initialised with current MembershipType)
        vMembershipType = mvEnv.MembershipType((pParams("MembershipType").Value))
      Else
        vMembershipType = Me.MembershipType
      End If

      If (vTransactionType = "MEMB" Or vTransactionType = "MEMC" Or vTransactionType = "CMEM") Then
        'Membership
        If pParams.ParameterExists("GiftMembership").Bool = False Then
          'Not a Gift Membership
          vEligible = True
        Else
          'Gift Membership
          If vMembershipType.MembershipLevel = "A" Then
            'Adult Gift Membership only eligible for Gift Aid if the flag is set
            vEligible = vMembershipType.AdultGiftMemberEligibleGiftAid
          Else
            'Junior/Both Gift Membership - check age of the Members
            vMember.Init(mvEnv)
            vStartDate = Me.StartDate
            If Len(vStartDate) = 0 Then vStartDate = Me.FixedRenewalDate(pParams("Joined").Value)
            If Len(vStartDate) = 0 Then vStartDate = TodaysDate()
            vEligible = True
            vMaxMembers = pParams.ParameterExists("NumberOfMembers").IntegerValue

            vRow = 0
            vContactNumber = IntegerValue(pParams.OptionalValue("MemberContactNumber", (pParams.ParameterExists("PayerContactNumber").Value)))
            vDOB = pParams.ParameterExists("DateOfBirth").Value
            vMemChecked = False
            If pTDRTransaction.SummaryMembers.Count > 0 Then
              For Each vMember In pTDRTransaction.SummaryMembers
                vRow = vRow + 1
                If vRow = 1 And vTransactionType <> "MEMC" Then
                  'Use vContactNumber & vDOB set above
                Else
                  vContactNumber = vMember.ContactNumber
                  vDOB = vMember.ContactDateOfBirth
                End If
                If Not (IsDate(vDOB)) Then vDOB = ""

                If IsGAJuniorMember(vContactNumber, vStartDate, vDOB, vEligible) = True Then vJuniorMember = True
                vMemChecked = True
              Next vMember
            ElseIf vTransactionType = "MEMC" Then
              'For CMT - Members grid not populated yet so check current Members
              If Me.CurrentMembers.Count() = 0 Then Me.LoadMembers()
              For Each vMember In Me.CurrentMembers
                If IsGAJuniorMember(vMember.ContactNumber, vStartDate, vMember.ContactDateOfBirth, vEligible) = True Then vJuniorMember = True
              Next vMember
              vMemChecked = True
            End If
            If vMemChecked = False Then
              If IsGAJuniorMember(vContactNumber, vStartDate, vDOB, vEligible) = True Then vJuniorMember = True
            End If

            If vMembershipType.MembershipLevel = "B" And vJuniorMember = False Then
              'This is an Adult & Junior membership level and all members are adults
              vEligible = vMembershipType.AdultGiftMemberEligibleGiftAid
            End If
          End If
        End If
      Else
        'Not a Membership
        vEligible = True
      End If

      DeterminePaymentPlanGiftAidEligibility = vEligible

    End Function

    Private Function IsGAJuniorMember(ByVal pContactNumber As Integer, ByVal pStartDate As String, ByVal pDOB As String, ByRef pEligibleGA As Boolean) As Boolean
      'Used by DeterminePaymentPlanGiftAidEligibility to work out whether a Contact is a Junior member for Gift Aid purposes
      Dim vMember As New Member
      Dim vContact As Contact
      Dim vJuniorMember As Boolean

      vMember.Init(mvEnv)
      If Len(pDOB) = 0 Then
        vContact = New Contact(mvEnv)
        vContact.InitRecordSetType(mvEnv, Contact.ContactRecordSetTypes.crtDetail, pContactNumber)
        pDOB = vContact.DateOfBirth
        If Not (IsDate(pDOB)) Then pDOB = ""
      End If

      If Len(pStartDate) > 0 And Len(pDOB) > 0 Then
        If CDate(pDOB).AddYears(vMember.GiftMemberMaxJuniorAge) < CDate(pStartDate) Then
          pEligibleGA = False 'Adult Member
        Else
          vJuniorMember = True 'Junior Member
        End If
      ElseIf Len(pDOB) = 0 Then
        'No DateOfBirth so assume not eligible for Gift Aid
        pEligibleGA = False 'Adult Member
      End If

      IsGAJuniorMember = vJuniorMember

    End Function

    Public Sub SetProrataFields(ByRef pParams As CDBParameters)

      If Not pParams Is Nothing Then
        'This is for smart client when the payment plan does not exist the smart client will need to pass in all the values that are used here
        If pParams.Exists("MembershipType") Then mvClassFields(PaymentPlanFields.ofMembershipType).Value = pParams("MembershipType").Value
        If pParams.Exists("PaymentPlanType") Then
          mvClassFields(PaymentPlanFields.ofOrderType).Value = pParams("PaymentPlanType").Value
        Else
          DefinePPType()
        End If
        If pParams.Exists("RenewalPending") Then mvClassFields(PaymentPlanFields.ofRenewalPending).Value = pParams("RenewalPending").Value
        mvClassFields(PaymentPlanFields.ofOrderTerm).Value = pParams("Term").Value
        If pParams.Exists("NextPaymentDue") Then mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value = pParams("NextPaymentDue").Value
        If pParams.Exists("RenewalDate") Then mvClassFields(PaymentPlanFields.ofRenewalDate).Value = pParams("RenewalDate").Value
        mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value = pParams("PaymentFrequency").Value
        mvClassFields(PaymentPlanFields.ofBalance).Value = pParams("Balance").Value
        If pParams.Exists("PaymentMethod") Then mvClassFields(PaymentPlanFields.ofPaymentMethod).Value = pParams("PaymentMethod").Value
      End If
    End Sub

    Public Sub UpdatePaymentPlan(ByVal pParams As CDBParameters, ByVal pUpdateType As PaymentPlanUpdateTypes, ByVal pSummaryMembers As CDBCollection, ByVal pNewDetailLines As TraderPaymentPlanDetails, ByVal pUpdatePPDSource As Boolean, ByRef pInAdvanceBatch As Integer, ByRef pInformationMessage As String, ByRef pWarningMessage As String)
      'Used by Smart Client (PaymentPlan Conversion/Maintenance and CMT) to update the Payment Plan and all associates data (DD, Members etc.)
      'All data is saved outside of here
      Dim vMembershipType As MembershipType
      Dim vOrigMembershipType As MembershipType
      Dim vMember As Member
      Dim vNewMember As Member = Nothing
      Dim vCMTTermChanged As Boolean
      Dim vDate As String = ""
      Dim vExpiryDate As String = ""
      Dim vMemberFound As Boolean
      Dim vMembers As Boolean
      Dim vNextPaymentDue As String = ""
      Dim vOldBalance As Double
      Dim vRenewalDate As String = ""
      Dim vSubscription As New Subscription
      Dim vSubsWhereFields As New CDBFields
      Dim vSubsRS As CDBRecordSet
      Dim vUpdatePaymentPlan As Boolean
      Dim vSource As String = ""
      Dim vPPD As PaymentPlanDetail
      Dim vOriginallyGifted As Boolean 'CMT
      Dim vOriginalPayer As Integer 'CMT
      Dim vOriginalPayerType As Contact.ContactTypes 'CMT
      Dim vWhereFields As New CDBFields
      Dim vBatch As Batch
      Dim vBatchParams As CDBParameters
      Dim vOldNPDDate As String
      Dim vOldRenewalDate As String
      Dim vUpdateFields As CDBFields
      Dim vAutoPayStartDate As String = ""
      Dim vCMTProRateBalance As Boolean
      Dim vCMTMonthsRemaining As Integer
      Dim vIncentivesRenewalDate As String
      Dim vInTrans As Boolean
      Dim vBatchNumber As Integer
      Dim vTransactionNumber As Integer
      Dim vChangeDDPayer As Nullable(Of Boolean) = Nothing
      Dim vNewDDPayer As Contact = Nothing

      If pUpdateType > 0 Then
        vBatchNumber = pParams.ParameterExists("NonFinancialBatchNumber").IntegerValue
        vTransactionNumber = pParams.ParameterExists("NonFinancialTransactionNumber").IntegerValue

        If (pUpdateType And PaymentPlanUpdateTypes.pputAddDirectDebit) > 0 Then
          AddAutoPaymentMethod(CDBEnvironment.ppType.pptDD, pParams)
          vUpdatePaymentPlan = CBool(pUpdateType And PaymentPlanUpdateTypes.pputPaymentPlan)
          vSource = DirectDebit.Source
          vAutoPayStartDate = DirectDebit.StartDate
        ElseIf (pUpdateType And PaymentPlanUpdateTypes.pputAddStandingOrder) > 0 Then
          AddAutoPaymentMethod(CDBEnvironment.ppType.pptSO, pParams)

          If (pUpdateType And PaymentPlanUpdateTypes.pputPaymentPlan) > 0 Then
            vUpdatePaymentPlan = True
          Else
            'Added SO only, so set Fixed Amount on Payment Plan
            If Len(Amount) = 0 Then Amount = RenewalAmount.ToString
          End If
          vSource = StandingOrder.Source
          vAutoPayStartDate = StandingOrder.StartDate
        ElseIf (pUpdateType And PaymentPlanUpdateTypes.pputAddCreditCardAuthority) > 0 Then
          AddAutoPaymentMethod(CDBEnvironment.ppType.pptCCCA, pParams)
          vUpdatePaymentPlan = CBool(pUpdateType And PaymentPlanUpdateTypes.pputPaymentPlan)
          vSource = CreditCardAuthority.Source
          vAutoPayStartDate = CreditCardAuthority.StartDate
        ElseIf (pUpdateType And PaymentPlanUpdateTypes.pputPaymentPlan) > 0 Then  'pputPPMaintenance, pputPPSummary, pputPPMaintenanceConversion, pputPPSummaryConversion

          '*********************************************************************************************************
          ' pooja 10/04/2007:NO this is not redundant code, the pps finished comes here for a conversion to add a membership
          '*********************************************************************************************************
          If (pUpdateType And PaymentPlanUpdateTypes.pputConversion) > 0 Then
            'Converion app and not maintenance only
            vMembers = True
            If pParams.ParameterExists("GiftMembership").Value = "Y" Or MembershipType.PayerRequired = "M" Or MembershipType.MembersPerOrder = 2 Then 'Or vJointContact > 0
              ContactNumber = pParams("PayerContactNumber").IntegerValue
              AddressNumber = pParams("PayerAddressNumber").IntegerValue
              mvPayer = Nothing
            End If
            PlanType = CDBEnvironment.ppType.pptMember
            'vOldRenewalPending = RenewalPending
            If PaymentFrequencyCode <> pParams("PaymentFrequency").Value Then
              RenewalPending = True 'Set this so as to calculate the new balances correctly
            End If
            PaymentFrequencyCode = pParams("PaymentFrequency").Value
            ReasonForDespatch = pParams("ReasonForDespatch").Value
            Source = pParams("Source").Value
            TheirReference = pParams("TheirReference").Value
            SetMember((pParams("MembershipType").Value), (pParams("Branch").Value), (pParams("GiftMembership").Bool), (pParams("OneYearGift").Bool))
            vOldBalance = Balance
            Amount = pParams("FixedAmount").Value 'New pay plan fixed amount
            SetBalance((pParams("PPBalance").DoubleValue))
            'Since we are converting a payment plan into a membership payment plan then we need to recalculate the payment plan's Renewal Amount
            'If Not mvRACalculatedFromPPS Then CalcRenewalAmountFromPPS
            'If mvRACalculatedFromPPS Then mvPaymentPlan.RenewalAmount = mvRenewalAmount
            If Balance = 0 Then RenewalPending = False
            EligibleForGiftAid = pParams("EligibleForGiftAid").Bool
            AddMembers(pParams, MembershipType, pSummaryMembers)
          Else
            If pParams.Exists("PaymentFrequency") Then mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value = pParams("PaymentFrequency").Value
            If pParams.Exists("ReasonForDespatch") Then mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value = pParams("ReasonForDespatch").Value
            If pParams.Exists("Source") Then mvClassFields(PaymentPlanFields.ofSource).Value = pParams("Source").Value
            If pParams.Exists("TheirReference") Then mvClassFields(PaymentPlanFields.ofTheirReference).Value = pParams("TheirReference").Value
            If pParams.Exists("PaymentMethod") Then mvClassFields(PaymentPlanFields.ofPaymentMethod).Value = pParams("PaymentMethod").Value
            If pParams.Exists("GiverContactNumber") Then mvClassFields(PaymentPlanFields.ofGiverContactNumber).Value = pParams("GiverContactNumber").Value
            If pParams.Exists("Arrears") Then mvClassFields(PaymentPlanFields.ofArrears).Value = pParams("Arrears").Value
            If pParams.Exists("SalesContactNumber") Then mvClassFields(PaymentPlanFields.ofSalesContactNumber).Value = pParams("SalesContactNumber").Value
            vOldBalance = Balance
            'vOldRenewalPending = RenewalPending
            'If the payment plan is for a monthly membership that has been amended to have a zero balance then set the renewal amount
            'to zero.
            'BR# 4270: The code below was moved from PaymentPlan.SetRenewalData because whenever you changed the membership type of a
            'monthly membership that had a zero balance, it was setting the renewal amount to zero which in turn caused the frequency
            'amount to be set to zero.  The reason the code was in PaymentPlan.SetRenewalData was to set the renewal amount & frequency
            'amount to zero when you were manually amending a payment plan by changing the membership rate to one that had a price of zero.
            If PlanType = CDBEnvironment.ppType.pptMember And pParams("PPBalance").DoubleValue = 0 Then
              If MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfMonthlyTerm Then RenewalAmount = 0
            End If
            'If PlanType = pptMember And FixedRenewalCycle And PreviousRenewalCycle _
            ''And (ProportionalBalanceSetting And (pbcsFullPayment + pbcsNew)) > 0 _
            ''And StartDate = RenewalDate Then
            '  RenewalAmount = mvRenewalAmount
            'End If
            If pParams.Exists("FixedAmount") Then
              If Val(Amount) <> pParams("FixedAmount").DoubleValue Then
                Amount = pParams("FixedAmount").Value
                If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
                  'Update amount on DD
                  With DirectDebit
                    If .Existing Then
                      .Update(.BankDetailsNumber, .BankAccount, .Source, (pParams("FixedAmount").DoubleValue), .StartDate, .Reference, .MandateType)
                      .SaveChanges()
                    End If
                  End With
                ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
                  'Update amount on SO
                  With StandingOrder
                    If .Existing Then
                      .Update(.BankDetailsNumber, .BankAccount, .Source, (pParams("FixedAmount").DoubleValue), .StartDate, .Reference, .GetSOTypeCode(.StandingOrderType))
                      .SaveChanges()
                    End If
                  End With
                ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
                  'Update amount on CCCA
                  With CreditCardAuthority
                    If .Existing Then
                      .Update(.CreditCardDetailsNumber, .BankAccount, .Source, (pParams("FixedAmount").DoubleValue), .StartDate, .GetAuthorityTypeCode(.AuthorityType))
                      .SaveChanges()
                    End If
                  End With
                End If
              End If
            End If
            SetBalance((pParams("PPBalance").DoubleValue))
            'First Amount
            If pParams.Exists("FirstAmount") Then
              Dim vFirstAmount As String = pParams.ParameterExists("FirstAmount").Value
              If PlanType = CDBEnvironment.ppType.pptMember AndAlso vFirstAmount.Length > 0 AndAlso (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment Then
                'Re-calculate the FirstAmount
                Dim vRenDate As String = mvClassFields(PaymentPlanFields.ofRenewalDate).Value
                If RenewalPending = False Then vRenDate = CalculateRenewalDate(vRenDate, False)
                If CurrentMembers.Count = 0 Then LoadMembers()
                Dim vJoined As String = Member.Joined
                If vJoined.Length = 0 Then vJoined = mvClassFields(PaymentPlanFields.ofOrderDate).Value
                Dim vNumberPayments As Integer = CInt((mvClassFields(PaymentPlanFields.ofOrderTerm).IntegerValue * 12) - DateDiff(DateInterval.Month, CDate(vRenDate), CDate(vJoined)))
                If vNumberPayments > 0 Then
                  vFirstAmount = FixTwoPlaces(mvClassFields(PaymentPlanFields.ofBalance).DoubleValue / vNumberPayments).ToString
                  If DoubleValue(vFirstAmount) * vNumberPayments < mvClassFields(PaymentPlanFields.ofBalance).DoubleValue Then vFirstAmount = (DoubleValue(vFirstAmount) + 0.01).ToString
                End If
              End If
              If DoubleValue(FirstAmount) <> DoubleValue(vFirstAmount) Then
                If vFirstAmount.Length > 0 Then
                  FirstAmount = vFirstAmount
                Else
                  FirstAmount = ""
                End If
              End If
            End If
            EligibleForGiftAid = pParams.ParameterExists("EligibleForGiftAid").Bool
            If Len(pParams.ParameterExists("PackToMember").Value) > 0 Then
              'No need to update PackToMember if control not on page
              PackToMember = pParams("PackToMember").Bool
            End If
            'Update renewal date if appropriate
            SetNewRenewalDate()
          End If

          'Update PaymentPlan if balance has been set to 0
          'If pUpdateType and pputPPSummary Then
          If (Balance = 0 And vOldBalance <> 0) And Not RenewalPending And TermUnits = OrderTermUnits.otuNone Then
            'Payment plan now has zero balance & renewal-pending = N
            If pParams.ParameterExists("UpdateDates").Bool Then
              RenewalDate = pParams("RenewalDate").Value
              NextPaymentDue = pParams("NextPaymentDue").Value
              If PlanType = CDBEnvironment.ppType.pptMember Then
                vExpiryDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, DateAdd(Microsoft.VisualBasic.DateInterval.Month, MembershipType.SuspensionGrace, CDate(RenewalDate))))
              Else
                vExpiryDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -1, CDate(RenewalDate)))
              End If
              vSubscription.Init(mvEnv)
              vSubsWhereFields = New CDBFields
              vSubsWhereFields.Add("order_number", PlanNumber, CDBField.FieldWhereOperators.fwoEqual)
              vSubsRS = mvEnv.Connection.GetRecordSet("SELECT " & vSubscription.GetRecordSetFields(Subscription.SubscriptionRecordSetTypes.subrstAll) & " FROM subscriptions WHERE " & mvEnv.Connection.WhereClause(vSubsWhereFields))
              While vSubsRS.Fetch() = True
                vSubscription.InitFromRecordSet(mvEnv, vSubsRS, Subscription.SubscriptionRecordSetTypes.subrstAll)
                vSubscription.SetValidTo(StartDate, vExpiryDate)
                vSubscription.Save()
              End While
              vSubsRS.CloseRecordSet()
            End If
          End If
          'End If

        ElseIf (pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType Then
          vMembershipType = mvEnv.MembershipType((pParams("MembershipType").Value)) 'New MembershipType
          If mvSecondCMT = False Then
            If DirectDebitStatus = ppYesNoCancel.ppYes AndAlso pParams.ParameterExists("ChangeDDPayerChecked").Bool = False Then
              ValidateCMTChangeDDPayer(pParams, pSummaryMembers, vMembershipType, vChangeDDPayer, vNewDDPayer)
            Else
              If pParams.HasValue("ChangeDDPayer") Then vChangeDDPayer = pParams("ChangeDDPayer").Bool
              If pParams.Exists("ChangeDDPayer") = False Then pParams.Add("ChangeDDPayer", "N")
              If vChangeDDPayer.HasValue = False Then vChangeDDPayer = False
              If DirectDebitStatus <> ppYesNoCancel.ppYes Then
                pParams("ChangeDDPayer").Value = "N"
                vChangeDDPayer = False
              End If
            End If
            If DirectDebitStatus = ppYesNoCancel.ppYes AndAlso vChangeDDPayer.HasValue = True AndAlso vChangeDDPayer.Value = True Then
              If vNewDDPayer Is Nothing Then
                vNewDDPayer = New Contact(mvEnv)
                vNewDDPayer.Init(pParams.ParameterExists("DirectDebitNewPayerContactNumber").IntegerValue)
              End If
              If vNewDDPayer.Existing = True AndAlso DirectDebit.Existing = True Then DirectDebit.ChangePayer(vNewDDPayer)
            End If
          End If

          vOriginalPayer = Payer.ContactNumber
          vOriginalPayerType = Payer.ContactType
          vOriginallyGifted = GiftMembership
          vCMTProRateBalance = pParams.ParameterExists("CMTProRateBalance").Bool
          vCMTMonthsRemaining = pParams.ParameterExists("MonthsRemaining").IntegerValue
          vOrigMembershipType = MembershipType
          With mvClassFields
            'Reset Payer and set PaymentPlan for new MembershipType
            .Item(PaymentPlanFields.ofGiverContactNumber).Value = "" 'Remove it in case it was previously set
            .Item(PaymentPlanFields.ofContactNumber).Value = CStr(pParams("PayerContactNumber").IntegerValue)
            .Item(PaymentPlanFields.ofAddressNumber).Value = CStr(pParams("PayerAddressNumber").IntegerValue)
            mvPayer = Nothing
            vCMTTermChanged = SCCMTResetPlanTerm(vMembershipType)
            If vCMTTermChanged Then mvOldMembershipIncentive = True

            If (CDate(TodaysDate()) > CDate(.Item(PaymentPlanFields.ofRenewalDate).Value)) And vCMTTermChanged = True Then
              'CMT has rolled the RenewalDate backwards due to removing an 'I'type incentive
              'As the RenewalDate is now before Today, error as the Payment Plan will now effectively be invalid

              'BR12415: If I-type incentives are processed then recalculate renewal date and then checks the dates again
              If mvSpecialInitialPeriod = True Then
                vIncentivesRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, pNewDetailLines(1).Quantity, DateAdd(Microsoft.VisualBasic.DateInterval.Month, -12, CDate(.Item(PaymentPlanFields.ofRenewalDate).Value))))
                If (CDate(TodaysDate()) > CDate(vIncentivesRenewalDate)) Then RaiseError(DataAccessErrors.daeCMTUnableRemoveIncentive, vIncentivesRenewalDate)
              Else
                RaiseError(DataAccessErrors.daeCMTUnableRemoveIncentive, (.Item(PaymentPlanFields.ofRenewalDate).Value))
              End If
            End If

            SetMember((vMembershipType.MembershipTypeCode), CType(pSummaryMembers(1), Member).Branch, (pParams("GiftMembership").Bool), (pParams("OneYearGift").Bool), (pParams.ParameterExists("GiverContactNumber").Value))
            If mvEnv.GetConfigOption("reason_is_grade", True) Then .Item(PaymentPlanFields.ofReasonForDespatch).Value = vMembershipType.MembershipTypeCode

            'Reset RenewalDate
            vRenewalDate = RenewalDate
            If pParams("NewBalance").DoubleValue = 0 Or pParams("AmountPaid").DoubleValue > 0 Then
              'Something paid OR free membership
              If vOrigMembershipType.ApprovalMembership Then
                'Renewal Date will be from Today
                vRenewalDate = TodaysDate()
                If TermUnits = OrderTermUnits.otuMonthly Then
                  vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, Term, CDate(vRenewalDate)))
                ElseIf TermUnits = OrderTermUnits.otuWeekly Then
                  vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.WeekOfYear, Term, CDate(vRenewalDate)))
                Else
                  vRenewalDate = CDate(vRenewalDate).AddYears(Term).ToString(CAREDateFormat)
                End If
              ElseIf RenewalPending = False Then  'BR12383: We do not need to calculate the renewal date as Renewal Pending is set
                If (pParams("NewBalance").DoubleValue = 0 And pParams("AmountPaid").DoubleValue = 0 And FixedRenewalCycle = False) Or (vOrigMembershipType.PaymentTerm <> vMembershipType.PaymentTerm) Or ((vOrigMembershipType.PaymentTerm = vMembershipType.PaymentTerm) And (vOrigMembershipType.MembershipTerm <> vMembershipType.MembershipTerm)) Then
                  'Free Membership with nothing paid, OR PaymentTerms have changed OR MembershipTerms have changed
                  If vMembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfLifeTerm Then
                    'Changing from Monthly/Annual to Life, RenewalDate = StartDate + 99 years
                    vRenewalDate = CDate(StartDate).AddYears(99).ToString(CAREDateFormat)
                  Else
                    'Changing to Monthly/Annual, RenewalDate = Next Renewal Date after Today
                    If FixedRenewalCycle Then
                      vRenewalDate = FixedRenewalDate(TodaysDate)
                      If DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(vRenewalDate), CDate(RenewalDate)) >= 0 Then
                        If Term < 0 Then 'Free months on the first time around
                          If CDate(vRenewalDate) = CDate(StartDate) Then 'first year add free months too
                            vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, System.Math.Abs(Term), CDate(vRenewalDate)))
                          Else 'not the first year, Just add 1 year
                            vRenewalDate = CDate(vRenewalDate).AddYears(vMembershipType.MembershipTerm).ToString(CAREDateFormat)
                          End If
                        Else
                          vRenewalDate = CDate(vRenewalDate).AddYears(vMembershipType.MembershipTerm).ToString(CAREDateFormat)
                        End If
                      End If
                    Else
                      Dim vAddTerm As Boolean = False
                      If vCMTTermChanged = False Then
                        'CMT Term has not been changed and renewal is not pending. Subtract the original order term from the current Renewal Date
                        vRenewalDate = CDate(RenewalDate).AddYears(-IntegerValue(mvClassFields(PaymentPlanFields.ofOrderTerm).SetValue)).ToString(CAREDateFormat)
                        vAddTerm = True 'When CMT Term is not changed then always add the new membership term to vRenewalDate
                      End If
                      'Note: When CMT term is changed then we do not need to change the vRenewalDate using vAddTerm
                      While DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(vRenewalDate), CDate(TodaysDate())) >= 0 OrElse vAddTerm
                        'vRenewalDate is before TodaysDate
                        If TermUnits = OrderTermUnits.otuMonthly Then
                          vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, Term, CDate(vRenewalDate)))
                        ElseIf TermUnits = OrderTermUnits.otuWeekly Then
                          vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.WeekOfYear, Term, CDate(vRenewalDate)))
                        Else
                          If Term < 0 Then 'Free months on the first time around
                            If CDate(vRenewalDate) = CDate(StartDate) Then 'first year add free months too
                              vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, System.Math.Abs(Term), CDate(vRenewalDate)))
                            Else 'not the first year, Just add 1 year
                              vRenewalDate = CDate(vRenewalDate).AddYears(vMembershipType.MembershipTerm).ToString(CAREDateFormat)
                            End If
                          Else
                            vRenewalDate = CDate(vRenewalDate).AddYears(vMembershipType.MembershipTerm).ToString(CAREDateFormat)
                          End If
                        End If
                        vAddTerm = False
                      End While
                    End If
                  End If
                End If
              End If
            ElseIf (pParams("NewBalance").DoubleValue > 0 And pParams("AmountPaid").DoubleValue = 0) Then
              'Outstanding Balance and No Payments
              If mvSecondCMT AndAlso vCMTProRateBalance Then
                'Do not change the renewal date when applying SecondCMT and using ProRateBalance (control value Y or F)
              ElseIf vOrigMembershipType.ApprovalMembership Then
                'Renewal Date will be from Today
                vRenewalDate = TodaysDate()
                If TermUnits = OrderTermUnits.otuMonthly Then
                  vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, Term, CDate(vRenewalDate)))
                ElseIf TermUnits = OrderTermUnits.otuWeekly Then
                  vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.WeekOfYear, Term, CDate(vRenewalDate)))
                Else
                  vRenewalDate = CDate(vRenewalDate).AddYears(Term).ToString(CAREDateFormat)
                End If
              ElseIf RenewalPending = False Then  'BR12383: We do not need to calculate the renewal date as Renewal Pending is set
                If (FixTwoPlaces(pParams("OldMembershipPrice").DoubleValue + pParams("OtherPrice").DoubleValue) = 0 And pParams("NewBalance").DoubleValue > 0 And FixedRenewalCycle = False) Or (vMembershipType.PaymentTerm <> vOrigMembershipType.PaymentTerm) Or ((vOrigMembershipType.PaymentTerm = vMembershipType.PaymentTerm) And (vOrigMembershipType.MembershipTerm <> vMembershipType.MembershipTerm)) Then
                  'Was Free now Chargeable OR PaymentTerms changed or MembershipTerms changed
                  'RenewalDate = Previous Renewal Date or Joined Date if later
                  If FixedRenewalCycle Then
                    vRenewalDate = FixedRenewalDate(TodaysDate)
                  Else
                    Dim vAddTerm As Boolean = False
                    If vCMTTermChanged = False Then
                      'CMT Term has not been changed and renewal is not pending. Subtract the original order term from the current Renewal Date
                      vRenewalDate = CDate(RenewalDate).AddYears(-IntegerValue(mvClassFields(PaymentPlanFields.ofOrderTerm).SetValue)).ToString(CAREDateFormat)
                      vAddTerm = True 'When CMT Term is not changed then always add the new membership term to vRenewalDate
                    End If
                    'Note: When CMT term is changed then we do not need to change the vRenewalDate using vAddTerm
                    While DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(vRenewalDate), CDate(TodaysDate())) > 0 OrElse vAddTerm
                      'vRenewalDate is before TodaysDate
                      If TermUnits = OrderTermUnits.otuMonthly Then
                        vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, Term, CDate(vRenewalDate)))
                      ElseIf TermUnits = OrderTermUnits.otuWeekly Then
                        vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.WeekOfYear, Term, CDate(vRenewalDate)))
                      Else
                        If Term < 0 Then 'Free months on the first time around
                          If CDate(vRenewalDate) = CDate(StartDate) Then 'first year add free months too
                            vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, System.Math.Abs(Term), CDate(vRenewalDate)))
                          Else 'not the first year, Just add 1 year
                            vRenewalDate = CDate(vRenewalDate).AddYears(vMembershipType.MembershipTerm).ToString(CAREDateFormat)
                          End If
                        Else
                          vRenewalDate = CDate(vRenewalDate).AddYears(vMembershipType.MembershipTerm).ToString(CAREDateFormat)
                        End If
                      End If
                      vAddTerm = False
                    End While
                  End If

                  If FixedRenewalCycle Then
                    vDate = StartDate
                  Else
                    vDate = pParams("Joined").Value
                  End If
                  If DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(vDate), CDate(vRenewalDate)) > 0 Then
                    'vDate is before vRenewalDate
                    If TermUnits = OrderTermUnits.otuMonthly Then
                      vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, Term * -1, CDate(vRenewalDate)))
                    ElseIf TermUnits = OrderTermUnits.otuWeekly Then
                      vRenewalDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.WeekOfYear, Term * -1, CDate(vRenewalDate)))
                    ElseIf vMembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfLifeTerm Then
                      vRenewalDate = CDate(vRenewalDate).AddYears(-1).ToString(CAREDateFormat)
                    Else
                      vRenewalDate = CDate(vRenewalDate).AddYears(-Term).ToString(CAREDateFormat)
                    End If
                  Else
                    vRenewalDate = vDate
                  End If

                End If
              End If
            End If
            .Item(PaymentPlanFields.ofRenewalDate).Value = vRenewalDate

            'Reset NextPaymentDue
            vNextPaymentDue = NextPaymentDue
            If pParams("NewBalance").DoubleValue = 0 AndAlso mvFirstCMT = False Then  'Do not change the NPD when applying FirstCMT
              'Fully paid OR Free Membership
              vNextPaymentDue = RenewalDate
            ElseIf mvSecondCMT = False AndAlso pParams("NewBalance").DoubleValue > 0 And FixTwoPlaces(pParams("OldMembershipBalance").DoubleValue + pParams("OtherBalance").DoubleValue) = 0 Then
              'Changing from Free Membership to chargeable Membership
              'Do not change the NPD when applying the SecondCMT
              vNextPaymentDue = mvEnv.GetStartDate(CDBEnvironment.ppType.pptMember)
              If Len(vNextPaymentDue) = 0 Then vNextPaymentDue = TodaysDate()
            ElseIf FixedRenewalCycle And PreviousRenewalCycle And (vMembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm Or vMembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfLifeTerm) Then
              vNextPaymentDue = pParams("Joined").Value
            End If
            .Item(PaymentPlanFields.ofNextPaymentDue).Value = vNextPaymentDue

            'Reset RenewalAmount
            If FixedRenewalCycle And PreviousRenewalCycle And (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 And (StartDate = RenewalDate Or DateDiff(Microsoft.VisualBasic.DateInterval.Year, CDate(StartDate), CDate(RenewalDate)) = Term) And vMembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm Then
              'Fixed/Previous Renewal within 1st year
              .Item(PaymentPlanFields.ofRenewalAmount).Value = CStr(pParams("RenewalAmount").DoubleValue)
            Else
              .Item(PaymentPlanFields.ofRenewalAmount).Value = CStr(pParams("NewPrice").DoubleValue)
            End If

            'Reset RenewalPending
            If (pParams("AmountPaid").DoubleValue = 0 And pParams("NewBalance").DoubleValue > 0) And (CDate(NextPaymentDue) = CDate(RenewalDate)) Then
              'We have a balance and nothing has been paid so need to set renewal pending
              RenewalPending = True
            End If

            'Reset Balance, PaymentFrequency, Arrears, EligibleForGiftAid & GiftMembership
            'Needs to be set after the dates as it uses the dates to calculate FrequencyAmount
            PaymentFrequencyCode = pParams("PaymentFrequency").Value
            SetBalance((pParams("NewBalance").DoubleValue))
            .Item(PaymentPlanFields.ofEligibleForGiftAid).Bool = pParams.ParameterExists("EligibleForGiftAid").Bool
            If vMembershipType.PayerRequired = "M" Then .Item(PaymentPlanFields.ofGiftMembership).Bool = False

            'Reset FixedAmount only if the user has agreed to change it
            If .Item(PaymentPlanFields.ofAmount).Value.Length > 0 AndAlso pParams.ParameterExists("UpdatePPFixedAmount").Bool = True Then
              'Originally had FixedAmount set, so may need to update it
              'Set FixedAmount to be Membership + Entitlements + Other charge lines (without any pro-rating applied)
              .Item(PaymentPlanFields.ofAmount).Value = pParams("FullMembershipPrice").Value
            End If
          End With

          'Add/Update the members
          If mvSecondCMT = False Then AddMembers(pParams, vMembershipType, pSummaryMembers) 'Do not add members again for SecondCMT
        End If

        If pParams.ParameterExists("ResetNPDToStartDate").Bool Then
          NextPaymentDue = vAutoPayStartDate
          If (PaymentFrequencyFrequency = 1 And PaymentFrequencyInterval = 1) And PlanType <> CDBEnvironment.ppType.pptMember Then
            'Regular monthly donation Payment Plan - also need to update the RenewalDate
            RenewalDate = NextPaymentDue
          End If
        End If

        If vUpdatePaymentPlan Then
          If pParams.Exists("PaymentFrequency") Then mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value = pParams("PaymentFrequency").Value
          If mvClassFields(PaymentPlanFields.ofPaymentFrequency).Value <> mvClassFields(PaymentPlanFields.ofPaymentFrequency).SetValue Then
            'The payment Frequency has changed so change the Frequency Amount. BR18641.
            Me.SetFrequencyAmount()
          End If
          If pParams.Exists("ReasonForDespatch") Then mvClassFields(PaymentPlanFields.ofReasonForDespatch).Value = pParams("ReasonForDespatch").Value
          If pParams.Exists("Source") Then mvClassFields(PaymentPlanFields.ofSource).Value = pParams("Source").Value
          If pParams.Exists("TheirReference") Then mvClassFields(PaymentPlanFields.ofTheirReference).Value = pParams("TheirReference").Value

          If mvAutoPaymentCreated = False Then
            If pParams.Exists("PaymentMethod") Then mvClassFields(PaymentPlanFields.ofPaymentMethod).Value = pParams("PaymentMethod").Value
          End If
          If pParams.Exists("GiverContactNumber") Then mvClassFields(PaymentPlanFields.ofGiverContactNumber).Value = pParams("GiverContactNumber").Value

          If pParams.Exists("FixedAmount") Then
            If Val(Amount) <> pParams("FixedAmount").DoubleValue Then
              Amount = pParams("FixedAmount").Value
            End If
          End If
          If Len(pParams.ParameterExists("PackToMember").Value) > 0 Then
            'No need to update PackToMember if control not on page
            PackToMember = pParams("PackToMember").Bool
          End If
          'Select Case vAmendType
          'Case tpDirectDebit, tpStandingOrder, tpCreditCardAuthority
          '  'Do not change payment method - already set to DD/SO/CCCA as appropriate
          'Case Else
          '  .PaymentMethod = GetPageValue(tpPaymentPlanMaintenance, "payment_method")
          'End Select
          '          ElseIf mvCovNextPage > 0 Then
          '            'Added a Covenant
          '            If GetPageControlIndex(tpPaymentPlanMaintenance, "amount", vIndex) Then
          '              If Val(.Amount) <> Val(GetPageValue(tpPaymentPlanMaintenance, "amount")) Then
          '                'If Fixed Amount has changed then update it
          '                .Amount = GetPageValue(tpPaymentPlanMaintenance, "amount")
          '              End If
          '            End If
        ElseIf mvIncentivesGenerated = True Then
          If mvExisting = True AndAlso mvAutoPaymentCreated = True Then
            'Added an auto payment method with an incentive which may have resulted in a change of balance
            If pParams.Exists("PPBalance") = True Then
              If Balance <> pParams("PPBalance").DoubleValue Then SetBalance(pParams("PPBalance").DoubleValue)
            End If
          End If
        End If

        'Add DetailLines and re-calculate RenewalAmount
        pNewDetailLines.AddDetailLinesToPaymentPlan(mvEnv, Me, pUpdateType, (pParams.ParameterExists("SubsStartOnMemberJoined").Bool), (pParams.ParameterExists("Joined").Value))
        'update source
        If pUpdatePPDSource And Not vMembers Then
          For Each vPPD In Details
            With vPPD
              .Update(.ContactNumber, .AddressNumber, .Quantity, .Balance, .Amount, "", "", "", "", vSource, "", "", .Subscription, .MemberOrPayer, .IncentiveLineType, .IncentiveProductDesc, .IncentiveIgnoreProductAndRate, .NetFixedAmount)
            End With
          Next vPPD
        End If

        Dim vEstNextRenewalAmount As Double
        If Not ((pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType AndAlso
                mvClassFields.Item(PaymentPlanFields.ofAmount).Value.Length > 0 AndAlso pParams.Exists("UpdatePPFixedAmount") AndAlso pParams("UpdatePPFixedAmount").Bool = False) Then
          'Do not reset renewal amount when the PP fixed amount is not being updated
          If ((pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType AndAlso pParams.HasValue("RenewalAmount") = True) _
          AndAlso ((pParams.ParameterExists("IsAdvancedCMT").Bool = True) OrElse (CDate(RenewalPeriodStart).CompareTo(Today) > 0 AndAlso CMTProportionBalance <> CMTProportionBalanceTypes.cmtFrequencyAmounts)) Then
            'Advanced CMT
            'OR
            'CMT after Renewals and before RenewalDate
            'Use the RenewalAmount calculated by CMT
            mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue = pParams("RenewalAmount").DoubleValue
          Else
            'Calculate the RenewalAmount from the PPD lines
            mvClassFields(PaymentPlanFields.ofRenewalAmount).Value = CStr(GetProRataRenewalAmount(pNewDetailLines, StartDate, RenewalDate, RenewalAmount, ContactNumber, MembershipType.MembershipTypeCode, pUpdateType, pParams.ParameterExists("TransactionType").Value, pParams.ParameterExists("TransactionPaymentMethod").Value, vCMTProRateBalance, (pParams.ParameterExists("OldMembershipPrice").DoubleValue), vCMTMonthsRemaining, MembershipPeriodTypes.mptNone, vEstNextRenewalAmount))
            If ((pUpdateType And PaymentPlanUpdateTypes.pputPaymentPlan) = PaymentPlanUpdateTypes.pputPaymentPlan) _
            AndAlso mvClassFields.Item(PaymentPlanFields.ofRenewalAmount).ValueChanged AndAlso RenewalPending = True AndAlso CDate(RenewalDate) > Today Then
              mvClassFields(PaymentPlanFields.ofRenewalAmount).Value = vEstNextRenewalAmount.ToString("F")
            End If
          End If
        End If

        If ((pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType) Then
          If CMTProportionBalance <> CMTProportionBalanceTypes.cmtNone Then
            If mvFullMembershipPriceCMT.HasValue = True AndAlso pParams.ParameterExists("WriteOffMissedPayments").Bool = True Then
              'Re-calculate the FrequencyAmount based upon the full annual cost of the new membership type
              mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CalcFrequencyAmount(mvFullMembershipPriceCMT.Value, PaymentFrequencyFrequency).ToString
            ElseIf mvFirstCMT = False AndAlso mvSecondCMT = False AndAlso CDate(RenewalPeriodStart).CompareTo(Today) > 0 Then
              'Re-calculate the FrequencyAmount based upon the cost of the new membership type
              Dim vCost As Double = RenewalAmount
              If RenewalPending = False AndAlso RenewalAmount > Balance Then vCost = Balance 'Probably just processed an in-advance payment
              mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CalcFrequencyAmount(vCost, PaymentFrequencyFrequency).ToString
            End If
          End If
        ElseIf (mvClassFields(PaymentPlanFields.ofRenewalAmount).ValueChanged OrElse (vEstNextRenewalAmount > 0 AndAlso mvClassFields.Item(PaymentPlanFields.ofBalance).DoubleValue = 0)) Then
          'RenewalAmount has changed so need to re-calculate the FrequencyAmount
          If ((pUpdateType And PaymentPlanUpdateTypes.pputPaymentPlan) = PaymentPlanUpdateTypes.pputPaymentPlan) Then
            If (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsExisting Or ProportionalBalanceConfigSettings.pbcsExistingPF) > 0 Then
              'Frequency amount will be re-calculated based upon the estimated value for next year
              'as it's more accurate than current renewal amount
            Else
              'Use current renewal amount figure
              vEstNextRenewalAmount = RenewalAmount
            End If
            mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CalcFrequencyAmount(vEstNextRenewalAmount, PaymentFrequencyFrequency).ToString
          Else
            SetFrequencyAmount()
          End If
        End If

        If (pUpdateType And PaymentPlanUpdateTypes.pputPaymentPlan) = PaymentPlanUpdateTypes.pputPaymentPlan AndAlso vEstNextRenewalAmount > 0 _
        AndAlso mvClassFields.Item(PaymentPlanFields.ofBalance).ValueChanged = False AndAlso mvClassFields.Item(PaymentPlanFields.ofRenewalAmount).ValueChanged = False _
        AndAlso mvClassFields.Item(PaymentPlanFields.ofFrequencyAmount).ValueChanged = True Then
          mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = CalcFrequencyAmount(vEstNextRenewalAmount, PaymentFrequencyFrequency).ToString
        End If

        If (pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType Then
          If FixedRenewalCycle And PreviousRenewalCycle And (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment)) = ProportionalBalanceConfigSettings.pbcsFullPayment And (StartDate = RenewalDate Or DateDiff(Microsoft.VisualBasic.DateInterval.Year, CDate(StartDate), CDate(RenewalDate)) <= 1) Then
            If Val(mvClassFields.Item(PaymentPlanFields.ofFirstAmount).SetValue) = Val(mvClassFields.Item(PaymentPlanFields.ofRenewalAmount).SetValue) Then
              mvClassFields.Item(PaymentPlanFields.ofFirstAmount).Value = CStr(RenewalAmount)
            ElseIf Val(mvClassFields.Item(PaymentPlanFields.ofFirstAmount).SetValue) > 0 Then
              mvClassFields.Item(PaymentPlanFields.ofFirstAmount).Value = CStr(FrequencyAmount)
            End If
          End If
        End If
        vRenewalDate = RenewalDate

        If ((pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType) And (HasAutoPaymentMethod = True And IntegerValue(mvEnv.GetConfig("fp_auto_pay_delay", "0")) > 0 And FixedDDClaimDate = False And vCMTTermChanged = True) Then
          'CMT with Auto Pay Method, the auto-pay-delay config set, not using fixed DD claim dates, and the original Term had an incentive
          'CMT has advanced the RenewalDate due to an incentive then need to re-calculate the FrequencyAmount
          'The NextPaymentDue will have originally been set differently compared to Cash so need to recalculate
          If CDate(RenewalDate) > CDate(vRenewalDate) Then SetBalance(Balance)
        End If

        If GiftMembership Then
          If (pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType Then
            GetMember(CType(pSummaryMembers(1), Member).ContactNumber)
            If mvClassFields.Item(PaymentPlanFields.ofContactNumber).ValueChanged Then
              Member.AddSponsorActivity(Me, Payer.ContactNumber, Payer.ContactType, True)
            End If
          ElseIf (pUpdateType And PaymentPlanUpdateTypes.pputConversion) = PaymentPlanUpdateTypes.pputConversion Then
            GetMember(IntegerValue(pParams.OptionalValue("MemberContactNumber", CStr(ContactNumber))))
            Member.AddSponsorActivity(Me, Payer.ContactNumber, Payer.ContactType)
          End If
        End If

        If mvEnv.Connection.InTransaction = False Then
          mvEnv.Connection.StartTransaction()
          vInTrans = True
        End If
        'Thick client used to recalculate the renewal amount here if the balance has changed or we were amending PPD financial details....i dont think we need to do this as we have only just recalculated everything in updatepayment plan

        If (pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType AndAlso ContainsUnprocessedPayments Then
          RaiseError(DataAccessErrors.daeCannotAmendPPUnProcessedPayments, PlanNumber.ToString) 'Payment Plan %1 can not be amended as there are unprocessed payments
        End If

        Dim vOriginalInAdvanceAmount As Double = InAdvance
        If (pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType Then 'If CMT ing
          'If Payer Changed then cancel the old payers sponsor activity if they are not the member
          If Payer.ContactNumber <> vOriginalPayer And vOriginallyGifted Then
            Dim vCC As New ContactCategory(mvEnv)
            vCC.ContactTypeSaveActivity(vOriginalPayerType, vOriginalPayer, mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlSponsorActivity), mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlSponsorActivityValue), Member.Source, "", TodaysDate, "", ContactCategory.ActivityEntryStyles.aesNormal)
          End If
          'Remove any unfulfilled enclosures
          vWhereFields = New CDBFields
          vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
          vWhereFields.Add("date_fulfilled", CDBField.FieldTypes.cftDate)
          mvEnv.Connection.DeleteRecords("enclosures", vWhereFields, False)

          'Check if In Advance figure needs to be processed
          If vCMTProRateBalance = True AndAlso pParams("OverPaymentAmount").DoubleValue > 0 Then
            'We have pro-rated the new Balance and the Member has overpaid
            If Me.Details.Count() > 0 Then
              'Before we process the payment, ensure that the prices are set correctly on the PaymentPlanDetail lines
              For Each vPPD In Me.Details
                vPPD.SetPrices()
              Next vPPD
            End If
            ProcessCMTOverPayment(pParams("OverPaymentAmount").DoubleValue, pParams("Source").Value, pParams.ParameterExists("IsAdvancedCMT").Bool)
          End If
        End If

        If ((pUpdateType And PaymentPlanUpdateTypes.pputAddDirectDebit) = PaymentPlanUpdateTypes.pputAddDirectDebit) Or ((pUpdateType And PaymentPlanUpdateTypes.pputAddCreditCardAuthority) = PaymentPlanUpdateTypes.pputAddCreditCardAuthority) Or ((pUpdateType And PaymentPlanUpdateTypes.pputAddStandingOrder) = PaymentPlanUpdateTypes.pputAddStandingOrder) Then
          SaveAutoPaymentMethod(pParams)
          For Each vPayPlanDetail As PaymentPlanDetail In mvDetails
            With vPayPlanDetail
              If .IncentiveLineType.Length > 2 Then
                Select Case .IncentiveLineType.Substring(1, 1)
                  Case "I", "X"
                    '18054: Calculate payment plan balance & frequency amount from detail lines when new incentives added to payment plan (renewal amount already calculated previously) 
                    CalculateBalanceFromDetails()
                    Exit For
                End Select
              End If
            End With
          Next
        End If

        'Save Members
        If mvSecondCMT = False AndAlso PlanType = CDBEnvironment.ppType.pptMember Then  'Do not save members again when applying SecondCMT
          'For CMT we need to cancel any Members of the old Membership that are no longer Members of the new Membership
          For Each vMember In CurrentMembers
            vMemberFound = False
            If vMember.Existing Then
              For Each vNewMember In pSummaryMembers
                If vMember.MembershipNumber = vNewMember.MembershipNumber Then vMemberFound = True
                If vMemberFound Then Exit For
              Next vNewMember
              If vMemberFound Then
                vMember.SaveChangeMembership((pParams("CancellationReason").Value), (vNewMember.MembershipTypeCode), (vNewMember.MembershipType), RenewalDate, RenewalPending, Term, vBatchNumber, vTransactionNumber, TermUnits, pWarningMessage, pParams.ParameterExists("CMTDate").Value)
              Else
                If (pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType Then
                  'No longer a Member so Cancel
                  vMember.Cancel(pParams("CancellationReason").Value)
                End If
              End If
            End If
            If vMemberFound = False Then vMember.Save(, , vBatchNumber, vTransactionNumber, pWarningMessage)
          Next vMember
        End If

        If mvSecondCMT = False AndAlso (pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType Then
          'Change DD payer if required
          If DirectDebitStatus = ppYesNoCancel.ppYes AndAlso vChangeDDPayer.HasValue = True AndAlso vChangeDDPayer.Value = True Then
            If DirectDebit.Existing AndAlso vNewDDPayer.Existing Then
              DirectDebit.Save(mvEnv.User.UserID, True, vBatchNumber, vTransactionNumber)
            End If
          End If
        End If

        If PlanType = CDBEnvironment.ppType.pptLoan AndAlso ((pUpdateType And PaymentPlanUpdateTypes.pputPaymentPlan) = PaymentPlanUpdateTypes.pputPaymentPlan OrElse (pUpdateType And PaymentPlanUpdateTypes.pputConversion) = PaymentPlanUpdateTypes.pputConversion) Then
          mvLoan = New Loan(mvEnv)
          mvLoan.InitFromPaymentPlan(PlanNumber)
          Dim vLoanCapital As Double = 0
          Dim vLoanTerm As Integer = mvLoan.LoanTerm
          For Each vPPD In mvDetails
            If vPPD.AccruesInterest = True AndAlso vPPD.LoanInterest = False Then vLoanCapital += DoubleValue(vPPD.Amount)
          Next
          If pParams.Exists("LoanAmount") = False Then pParams.Add("LoanAmount", mvLoan.LoanAmount)
          If pParams("LoanAmount").DoubleValue <> vLoanCapital Then pParams("LoanAmount").Value = vLoanCapital.ToString
          mvLoan.Update(pParams)
          mvLoan.Save()
          If vLoanTerm <> mvLoan.LoanTerm Then
            'If the LoanTerm has changed then update the PP
            Term = If(mvLoan.LoanTerm > 0, mvLoan.LoanTerm, 99)
            If RenewalPending = False Then
              Dim vRenDate As String = CalculateRenewalDate(StartDate, True)
              RenewalDate = vRenDate
            End If
          End If
          SetLoanFrequencyAmount()
        End If

        If ((pUpdateType And PaymentPlanUpdateTypes.pputPaymentPlan) = PaymentPlanUpdateTypes.pputPaymentPlan) Then
          If pParams.ParameterExists("WriteOffMissedPayments").Bool = True Then SetWriteOffRequired(pParams("WriteOffMissedPayments").Bool)
          If pParams.Exists("OneYearGift") AndAlso PlanType = CDBEnvironment.ppType.pptMember AndAlso GiftMembership AndAlso MembershipType.MembersPerOrder <> 0 Then
            'Update one_year_gift flag for gifted non group membership
            mvClassFields(PaymentPlanFields.ofOneYearGift).Bool = pParams("OneYearGift").Bool
          End If
        End If

        If (pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType AndAlso pParams.ParameterExists("CancelMemberModeDD").Bool = True Then
          If mvSecondCMT = False AndAlso DirectDebit.Existing Then
            DirectDebit.Save(mvEnv.User.UserID, True, vBatchNumber, vTransactionNumber)
          End If
        End If

        'Save PaymentPlan
        Save(, True, vBatchNumber, vTransactionNumber)
        If PlanType = CDBEnvironment.ppType.pptLoan Then
          If DetailsAmendedFinancial Then
            CalculateLoanInterest("", False)
          End If
        Else
          vOldNPDDate = NextPaymentDue
          vOldRenewalDate = RenewalDate
          If AutoPaymentCreated Then
            If pParams.ParameterExists("ResetNPDToStartDate").Bool And (PaymentFrequencyFrequency = 1 And PaymentFrequencyInterval = 1) And PlanType <> CDBEnvironment.ppType.pptMember Then
              'Regular monthly Payment Plan has had NextPaymentDue & RenewalDate updated, so update paymentschedule to match.
              RealignPaymentScheduleDates()
            End If
            RegenerateScheduledPayments(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance, TodaysDate)
            If ScheduledPayments.Count() > 0 Then
              vUpdateFields = New CDBFields
              vWhereFields = New CDBFields
              vUpdateFields.Add("payment_schedule_amended_on", CDBField.FieldTypes.cftDate, TodaysDate)
              If CDate(NextPaymentDue) > CDate(vOldNPDDate) Then vUpdateFields.Add("next_payment_due", CDBField.FieldTypes.cftDate, NextPaymentDue)
              If CDate(RenewalDate) > CDate(vOldRenewalDate) Then vUpdateFields.Add("renewal_date", CDBField.FieldTypes.cftDate, RenewalDate)
              vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
              mvEnv.Connection.UpdateRecords("orders", vUpdateFields, vWhereFields)
            End If
            If mvWriteOffMissedPayments = True AndAlso mvExisting = True AndAlso mvCreated = False Then
              'Added an auto payment and also want a write-off so do it here now that the OPS has been recreated
              Dim vWriteOff As Double = WriteOffMissedPayments(Today)
            End If
          End If
          If (pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType Then 'If CMT ing
            If InAdvance > 0 AndAlso Balance > 0 AndAlso mvFirstCMT = False AndAlso vOriginalInAdvanceAmount > 0 Then
              pInAdvanceBatch = 0
              ProcessInAdvance(pInAdvanceBatch, "P", PaymentMethod, "", pParams("MemberSource").Value)
              If pInAdvanceBatch > 0 Then
                'SaveChanges
                vBatch = New Batch(mvEnv)
                vBatchParams = New CDBParameters
                vBatch.BatchCategory = TraderBatchCategory
                vBatch.Init(pInAdvanceBatch)
                If vBatch.BatchNumber > 0 Then vBatch.SetDetailComplete(vBatchParams)
              End If
            End If
          End If
        End If

        If ((pUpdateType And PaymentPlanUpdateTypes.pputConversion) = PaymentPlanUpdateTypes.pputConversion) Or ((pUpdateType And PaymentPlanUpdateTypes.pputChangeMembershipType) = PaymentPlanUpdateTypes.pputChangeMembershipType) Then
          ProcessBranchUpdates(pParams, pInformationMessage)
        End If

        SaveEnclosuresAndNewOrders(pParams)

        If vInTrans Then mvEnv.Connection.CommitTransaction()
      End If
    End Sub

    Public Sub SetDetailLineTypesForSC()
      SetDetailLineTypesForSC(False)
    End Sub
    Friend Sub SetDetailLineTypesForSC(ByVal pIsCMT As Boolean)
      'Set PaymentPlanDetail.DetailType for all detail lines for use by the Smart Client only (Member creation/maintenance and CMT)
      'This is similar to SetDetailLineTypes but will always set the membership charge lines for all members and not just line 1
      Dim vRS As CDBRecordSet
      Dim vPPD As PaymentPlanDetail
      Dim vMember As Member
      Dim vMembershipType As MembershipType
      Dim vAssocMemTypeCode As String
      Dim vSQL As String

      If mvExisting = True And mvDetails.Count() = 0 Then InitPaymentPlanDetails(mvEnv, PlanNumber)
      If mvCurrentMembers.Count() = 0 Then LoadMembers()

      'Clear any existing settings
      For Each vPPD In mvDetails
        vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltNotSet
      Next vPPD

      'Find Membership Type codes
      'vMembershipType will be set to the main MembershipType
      'vAssocMemTypeCode will be set to any associate MembershipType code
      vMembershipType = mvEnv.MembershipType(Member.MembershipTypeCode)
      If vMembershipType.IsAssociateType Then
        vAssocMemTypeCode = vMembershipType.MembershipTypeCode
        vMembershipType = Nothing
        For Each vMember In mvCurrentMembers
          If vMember.MembershipTypeCode <> vAssocMemTypeCode Then
            vMembershipType = mvEnv.MembershipType((vMember.MembershipTypeCode))
          End If
          If Not (vMembershipType Is Nothing) Then Exit For
        Next vMember
      Else
        vAssocMemTypeCode = vMembershipType.AssociateMembershipType
      End If
      If vMembershipType Is Nothing Then vMembershipType = mvEnv.MembershipType((Me.MembershipTypeCode))
      Dim vAssocMembershipType As New MembershipType(mvEnv)
      If vAssocMemTypeCode.Length > 0 Then vAssocMembershipType = mvEnv.MembershipType(vAssocMemTypeCode)

      'Check for user-defined rates
      vPPD = CType(mvDetails.Item(GetDetailKeyFromLineNo(1)), PaymentPlanDetail)
      Dim vMembPeriod As MembershipPeriodTypes = DetermineMembershipPeriod()
      If vMembPeriod = MembershipPeriodTypes.mptFirstPeriod Then
        If vMembershipType.FirstPeriodsRate <> vPPD.RateCode Then vMembershipType.UserDefinedFirstRate = vPPD.RateCode
      Else
        If vMembershipType.SubsequentPeriodsRate <> vPPD.RateCode Then vMembershipType.UserDefinedSubsequentRate = vPPD.RateCode
      End If

      '(1) Find all Membership charging lines
      '(1a) Set Membership charge lines for main MembershipType
      For Each vPPD In mvDetails
        With vMembershipType
          If vPPD.ProductCode = .FirstPeriodsProduct AndAlso vPPD.RateCode = .FirstPeriodsRate And vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltNotSet Then
            vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltCharge
            If pIsCMT Then vPPD.SetCMTData(vMembershipType.CMTProrateOldCostsCode, .CMTExcessPayment.CmtExcessPaymentTypeCode, 0, .FirstPeriodsRefundProductCode, .FirstPeriodsRefundRateCode)
          ElseIf vPPD.ProductCode = .SubsequentPeriodsProduct AndAlso vPPD.RateCode = .SubsequentPeriodsRate AndAlso vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltNotSet Then
            vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltCharge
            If pIsCMT Then vPPD.SetCMTData(vMembershipType.CMTProrateOldCostsCode, .CMTExcessPayment.CmtExcessPaymentTypeCode, 0, .SubsequentPeriodsRefundProductCode, .SubsequentPeriodsRefundRateCode)
          End If
        End With
      Next
      '(1b) Set Membership charge lines for any associate MembershipType
      If vAssocMemTypeCode.Length > 0 AndAlso vAssocMembershipType.Existing = True Then
        For Each vPPD In mvDetails
          With vAssocMembershipType
            If vPPD.ProductCode = .FirstPeriodsProduct AndAlso vPPD.RateCode = .FirstPeriodsRate AndAlso vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltNotSet Then
              vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltCharge
              If pIsCMT Then vPPD.SetCMTData(.CMTProrateOldCostsCode, .CMTExcessPayment.CmtExcessPaymentTypeCode, 0, .FirstPeriodsRefundProductCode, .FirstPeriodsRefundRateCode)
            End If
          End With
        Next
      End If

      '(2) Find all Membership Entitlement lines

      '(2a) Set entitlement lines for main MembershipType
      For Each vEntitlement As MembershipEntitlement In vMembershipType.Entitlements("", If(vMembPeriod = MembershipPeriodTypes.mptFirstPeriod, True, False), True)
        For Each vPPD In mvDetails
          With vEntitlement
            If vPPD.ProductCode = .ProductCode AndAlso vPPD.RateCode = .RateCode AndAlso vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltNotSet Then
              vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltEntitlement
              If pIsCMT Then vPPD.SetCMTData(.CMTProrateOldCostsCode, .CMTExcessPayment.CmtExcessPaymentTypeCode, .SequenceNumber, .CMTRefundProductCode, .CMTRefundRateCode)
            End If
          End With
        Next
      Next

      '(2b) Set entitlements lines for any associate MembershipType
      If vAssocMemTypeCode.Length > 0 AndAlso vAssocMembershipType.Existing = True Then
        For Each vEntitlement As MembershipEntitlement In vAssocMembershipType.Entitlements("", If(vMembPeriod = MembershipPeriodTypes.mptFirstPeriod, True, False), True)
          For Each vPPD In mvDetails
            With vEntitlement
              If vPPD.ProductCode = .ProductCode AndAlso vPPD.RateCode = .RateCode AndAlso vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltNotSet Then
                vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltEntitlement
                If pIsCMT Then vPPD.SetCMTData(.CMTProrateOldCostsCode, .CMTExcessPayment.CmtExcessPaymentTypeCode, .SequenceNumber, .CMTRefundProductCode, .CMTRefundRateCode)
              End If
            End With
          Next
        Next
      End If

      '(3) Find Incentive lines
      vSQL = "SELECT detail_number, incentive_type FROM sources s, incentive_scheme_products isp, order_details od, products p, rates r"
      vSQL = vSQL & " WHERE s.source = '" & Source & "' AND s.incentive_scheme IS NOT NULL AND s.incentive_scheme = isp.incentive_scheme"
      vSQL = vSQL & " AND isp.reason_for_despatch = '" & ReasonForDespatch & "' AND incentive_type IN ('X','I')"
      vSQL = vSQL & " AND od.order_number = " & PlanNumber & " AND isp.product = od.product AND isp.rate = od.rate"
      vSQL = vSQL & " AND od.product = p.product AND p.product = r.product AND od.rate = r.rate ORDER BY detail_number"
      vRS = mvEnv.Connection.GetRecordSet(vSQL)
      While vRS.Fetch() = True
        vPPD = CType(mvDetails.Item(GetDetailKeyFromLineNo(vRS.Fields(1).IntegerValue)), PaymentPlanDetail)
        If vRS.Fields(2).Value = "X" Then
          vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltIncentive
        Else
          vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltCharge
        End If
      End While
      vRS.CloseRecordSet()

      '(4) Find any Future Membership Type lines
      If vMembershipType.MembershipTypeCode <> MembershipTypeCode Then
        'MembershipTypeCode on PaymentPlan different to main MembershipType code
        Dim vFutureMemberType As MembershipType = mvEnv.MembershipType(MembershipTypeCode)
        '(4a) Set Membership charge lines for main future MembershipType
        If vFutureMemberType.Existing Then
          For Each vPPD In mvDetails
            With vFutureMemberType
              If ((vPPD.ProductCode = .FirstPeriodsProduct AndAlso vPPD.RateCode = .FirstPeriodsRate) OrElse (vPPD.ProductCode = .SubsequentPeriodsProduct AndAlso vPPD.RateCode = .SubsequentPeriodsRate)) _
              AndAlso vPPD.TimeStatus = "F" AndAlso vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltNotSet Then
                vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltCharge
                If pIsCMT Then vPPD.SetCMTData(.CMTProrateOldCostsCode, .CMTExcessPayment.CmtExcessPaymentTypeCode, 0, .FirstPeriodsRefundProductCode, .FirstPeriodsRefundRateCode)
              End If
            End With
          Next
          '(4b) Find all future Membership Entitlement lines
          For Each vEntitlement As MembershipEntitlement In vFutureMemberType.Entitlements("", If(vMembPeriod = MembershipPeriodTypes.mptFirstPeriod, True, False), True)
            For Each vPPD In mvDetails
              With vEntitlement
                If vPPD.ProductCode = .ProductCode AndAlso vPPD.RateCode = .RateCode AndAlso vPPD.TimeStatus = "F" AndAlso vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltNotSet Then
                  vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltEntitlement
                  If pIsCMT Then vPPD.SetCMTData(.CMTProrateOldCostsCode, .CMTExcessPayment.CmtExcessPaymentTypeCode, .SequenceNumber, .CMTRefundProductCode, .CMTRefundRateCode)
                End If
              End With
            Next
          Next
        End If
      End If

      '(5) Set any remaining lines
      For Each vPPD In mvDetails
        If vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltNotSet Then
          vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltOtherCharge
          If pIsCMT Then vPPD.SetCMTData("F", "C", 0, "", "")
        End If
      Next vPPD

    End Sub
    Public Function GetTermUnits(ByVal pString As String) As OrderTermUnits
      Dim vTermUnits As OrderTermUnits

      Select Case pString
        Case "M"
          vTermUnits = OrderTermUnits.otuMonthly
        Case "W"
          vTermUnits = OrderTermUnits.otuWeekly
        Case Else 'None
          vTermUnits = OrderTermUnits.otuNone
      End Select
      GetTermUnits = vTermUnits
    End Function

    Private Sub AddAutoPaymentMethod(ByRef pPlanType As CDBEnvironment.ppType, ByRef pParams As CDBParameters)
      Dim vStartDate As String
      Dim vContactNumber As Integer
      Dim vAddressNumber As Integer

      'Create Auto Payment Method
      vContactNumber = IntegerValue(pParams.OptionalValue("AutoPayContactNumber", CStr(ContactNumber)))
      vAddressNumber = IntegerValue(pParams.OptionalValue("AutoPayAddressNumber", CStr(AddressNumber)))
      vStartDate = pParams.OptionalValue("AutoPayStartDate", (pParams.ParameterExists("StartDate").Value))

      Dim vBankAccount As BankAccount = mvEnv.BankAccount(pParams("BankAccount").Value)

      Select Case pPlanType
        Case CDBEnvironment.ppType.pptDD
          'If AutoPayStartDate not passed in, then add the AutoPayDelay days to PaymentPlan StartDate
          If pParams.Exists("AutoPayStartDate") = False Then vStartDate = mvEnv.GetPaymentPlanAutoPayDate(DateValue(vStartDate), ppAutoPayMethods.ppAPMDD, vBankAccount).ToString(CAREDateFormat)
          If (pParams.Exists("FixedAmount") = True And pParams.Exists("AutoPayFixedAmount") = False) Then pParams.Add("AutoPayFixedAmount", CDBField.FieldTypes.cftNumeric, pParams("FixedAmount").Value)
          AddDirectDebit(vContactNumber, vAddressNumber, vBankAccount.BankAccountCode, pParams.OptionalValue("AutoPaySource", Source), (pParams.ParameterExists("AutoPayFixedAmount").DoubleValue), vStartDate, (pParams.ParameterExists("Reference").Value), (pParams.ParameterExists("BankDetailsNumber").IntegerValue), (pParams.ParameterExists("SortCode").Value), (pParams.ParameterExists("AccountNumber").Value), (pParams.ParameterExists("AccountName").Value), "", True, 0, "", "", (pParams.ParameterExists("MandateType").Value), pParams.OptionalValue("CreatedBy", mvEnv.User.UserID), pParams.OptionalValue("CreatedOn", (TodaysDate())), pIbanNumber:=pParams.ParameterExists("IbanNumber").Value, pBicCode:=pParams.ParameterExists("BicCode").Value, pDateSigned:=pParams.ParameterExists("DateSigned").Value)
          'BR15209: Don't pass vStartDate when amending an existing payment plan
          SetAutoPayMethod(ppAutoPayMethods.ppAPMDD, If(mvExisting, "", vStartDate), vBankAccount.BankAccountCode, (pParams.ParameterExists("ClaimDay").Value))
          If (mvEnv.DefaultCountry = "CH" Or mvEnv.DefaultCountry = "NL") And pParams.Exists("Text1") = True Then
            mvDirectDebit.SetDirectDebitReferences(pParams)
          End If
        Case CDBEnvironment.ppType.pptSO
          If (pParams.Exists("FixedAmount") = True And pParams.Exists("AutoPayFixedAmount") = False) Then pParams.Add("AutoPayFixedAmount", CDBField.FieldTypes.cftNumeric, pParams("FixedAmount").Value)
          AddStandingOrder(vContactNumber, vAddressNumber, vBankAccount.BankAccountCode, pParams.OptionalValue("AutoPaySource", Source), (pParams.ParameterExists("AutoPayFixedAmount").DoubleValue), vStartDate, (pParams.ParameterExists("Reference").Value), (pParams.ParameterExists("BankDetailsNumber").IntegerValue), (pParams.ParameterExists("SortCode").Value), (pParams.ParameterExists("AccountNumber").Value), (pParams.ParameterExists("AccountName").Value), 0, "", "", pParams.OptionalValue("CreatedBy", mvEnv.User.UserID), pParams.OptionalValue("CreatedOn", (TodaysDate())), Contact.ContactTypes.ctcContact, (pParams("StandingOrderType").Value), pIbanNumber:=pParams.ParameterExists("IbanNumber").Value, pBicCode:=pParams.ParameterExists("BicCode").Value)
          'BR15209: Don't pass vStartDate when amending an existing payment plan
          SetAutoPayMethod(ppAutoPayMethods.ppAPMSO, If(mvExisting, "", vStartDate), vBankAccount.BankAccountCode)
        Case CDBEnvironment.ppType.pptCCCA
          Throw New NotSupportedException("CCA no longer supported due to PCI compliance requirements")
      End Select
    End Sub

    Private Sub SaveAutoPaymentMethod(ByRef pParams As CDBParameters, Optional ByVal pBatchNumber As Integer = 0, Optional ByVal pTransactionNumber As Integer = 0)
      Dim vBKDNumber As Integer
      Dim vCreditCard As New ContactCreditCard

      If StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        With StandingOrder
          If pParams.ParameterExists("BankDetailsNumber").IntegerValue = 0 Then
            SaveBankAndDetails(vBKDNumber, pParams)
            .Update(vBKDNumber, .BankAccount, .Source, .Amount, .StartDate, .Reference, .StandingOrderTypeCode)
          End If
          .Save(mvEnv.User.UserID, True, pBatchNumber, pTransactionNumber)
        End With

      ElseIf DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        With DirectDebit
          If pParams.ParameterExists("BankDetailsNumber").IntegerValue = 0 Then
            SaveBankAndDetails(vBKDNumber, pParams)
            .BankDetailsNumber = vBKDNumber
          End If
          .Save(mvEnv.User.UserID, True, pBatchNumber, pTransactionNumber)
        End With
      ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        With CreditCardAuthority
          If pParams.ParameterExists("CreditCardDetailsNumber").IntegerValue > 0 Then
            'Just need to update the ContactCreditCard record
            .ContactCreditCard.Update((pParams("CreditCardNumber").Value), (pParams("CardExpiryDate").Value), (pParams("Issuer").Value), (pParams("AccountName").Value), (pParams("CreditCardType").Value))
          End If
          'Note: If CreditCardDetailsNumber = 0 then there is nothing to do to the ContactCreditCard as everything will have been done in AddCreditCardAuthority
          .Save(mvEnv.User.UserID, True, pBatchNumber, pTransactionNumber)
        End With
      End If

    End Sub

    Private Sub SaveBankAndDetails(ByRef pBankDetailsNumber As Integer, ByRef pParams As CDBParameters)
      Dim vContactAccount As ContactAccount
      Dim vBank As Bank
      Dim vSortCode As String = ""
      Dim vIbanNumber As String = ""
      Dim vAccountNumber As String = ""

      If pParams.Exists("IbanNumber") Then
        vIbanNumber = pParams("IbanNumber").Value
      End If

      If pParams.Exists("SortCode") Then
        vSortCode = pParams("SortCode").Value
      End If

      If pParams.Exists("AccountNumber") Then
        vAccountNumber = pParams("AccountNumber").Value
      End If

      'Make sure there is a sort code
      If vSortCode.Length > 0 Then
        vBank = New Bank
        vBank.Init(mvEnv, vSortCode)
        If Not vBank.Existing Then
          If pParams.ParameterExists("NewBank").Bool Then 'A new bank needs to be entered in banks table
            If Not pParams.Exists("BranchName") Then RaiseError(DataAccessErrors.daeParameterNotFound, "BranchName")
            With vBank
              .SortCode = vSortCode
              .BranchName = pParams("BranchName").Value
              .Save()
            End With
          Else
            RaiseError(DataAccessErrors.daeInvalidCode, "SortCode")
          End If
        End If
      End If

      If vIbanNumber.Length > 0 OrElse vAccountNumber.Length > 0 Then
        vContactAccount = New ContactAccount
        If pBankDetailsNumber > 0 Then vContactAccount.Init(mvEnv, pBankDetailsNumber)

        'Deal with existing Contact Accounts against Holding Contact which has now been amended
        'vHoldContactNo = Val(gvEnv.GetControlValue(cdbControlHoldingContactNumber))
        'If pBankDetailsNumber > 0 And CheckHoldingContact(vHoldContactNo) Then
        '  If vContactAccount.ContactNumber = vHoldContactNo Then
        '    'Check for existing BT's using this record
        '    vWhere = " bank_details_number = " & pBankDetailsNumber & " AND contact_number = " & vHoldContactNo
        '    vWhere = vWhere & " AND ((batch_number = " & mvTraderApplication.BatchNumber & " AND transaction_number <> " & mvTraderApplication.TransactionNumber & ")"
        '    vWhere = vWhere & " OR (batch_number <> " & mvTraderApplication.BatchNumber & "))"
        '    If gvConn.GetCount("batch_transactions", Nothing, vWhere) = 0 Then
        '      'Update existing record
        '      vContactAccount.ContactNumber = mvPayerContact.ContactNumber
        '    Else
        '      'Insert new record
        '      pBankDetailsNumber = INVALID_NUMBER
        '    End If
        '  End If
        'End If

        '    Set vContactAccount = New ContactAccount
        With vContactAccount
          'Check if a new contact account record is needed
          If pBankDetailsNumber <= 0 Then
            If pParams.ParameterExists("BankDetailsNumber").IntegerValue > 0 Then
              .Init(mvEnv, (pParams.ParameterExists("BankDetailsNumber").IntegerValue))
            ElseIf vIbanNumber.Length > 0 Then
              .InitByAccount(mvEnv, ContactNumber, vIbanNumber)
            Else
              .InitByAccount(mvEnv, ContactNumber, vSortCode, (pParams("AccountNumber").Value))
            End If
            .Create(ContactNumber, vSortCode, (pParams.ParameterExists("AccountNumber").Value), (pParams("AccountName").Value), UCase(Left(pParams("AccountName").Value, 18)), , , , vIbanNumber, pParams.ParameterExists("BicCode").Value)
            .Save()
            pBankDetailsNumber = .BankDetailsNumber
          End If
        End With
      End If
    End Sub

    Private Sub AddMembers(ByVal pParams As CDBParameters, ByVal pMembershipType As MembershipType, ByVal pSummaryMembers As CDBCollection)
      'Used by Smart Client and Web Services to add all Members to a PaymentPlan
      Dim vResetBranch As Boolean
      Dim vBranch As Branch = Nothing
      Dim vContactNumber As Integer
      Dim vMember As Member
      Dim vContact As Contact
      Dim vContactType As Contact.ContactTypes

      If pParams("TransactionType").Value = "MEMC" Then
        'CMT
        vMember = CType(pSummaryMembers(1), Access.Member)
        'Set values from MMS page
        pParams("Joined").Value = vMember.Joined
        If pParams.Exists("Applied") = False Then pParams.Add("Applied", CDBField.FieldTypes.cftDate)
        If pParams.Exists("Branch") = False Then pParams.Add("Branch")
        If pParams.Exists("AgeOverride") = False Then pParams.Add("AgeOverride")
        If pParams.Exists("BranchMember") = False Then pParams.Add("BranchMember")
        If pParams.Exists("MemberDOB") = False Then pParams.Add("MemberDOB", CDBField.FieldTypes.cftDate)
        If pParams.Exists("MemberDobEstimated") = False Then pParams.Add("MemberDobEstimated")
        pParams("Applied").Value = vMember.Applied
        pParams("Branch").Value = vMember.Branch
        pParams("AgeOverride").Value = vMember.AgeOverride
        pParams("BranchMember").Value = vMember.BranchMember
        pParams("MemberDOB").Value = vMember.ContactDateOfBirth
        pParams("MemberDobEstimated").Value = BooleanString(vMember.ContactDOBEstimated)
        pParams("MembershipType").Value = vMember.MembershipTypeCode

        GetMember((vMember.ContactNumber))
        With Member
          If mvEnv.GetConfig("me_card_production_select") = "PAID_OR_AUTO" Then
            .ReprintMshipCard = False
          Else
            .ReprintMshipCard = True
          End If
          If pParams("OrigMembershipCardExpires").Value.Length > 0 Then .MembershipCardExpires = pParams("OrigMembershipCardExpires").Value
          .SetMembershipCardIssueNumber(Member.SetCardIssueNumberTypes.scintReinitialise)
          If pParams.Exists("MembershipCardExpires") = False Then pParams.Add("MembershipCardExpires")
          pParams("MembershipCardExpires").Value = .MembershipCardExpires
          If pParams.Exists("ReprintMshipCard") = False Then pParams.Add("ReprintMshipCard")
          pParams("ReprintMshipCard").Value = BooleanString(.ReprintMshipCard)
          If pParams.Exists("MembershipCardIssueNumber") = False Then pParams.Add("MembershipCardIssueNumber")
          pParams("MembershipCardIssueNumber").Value = .MembershipCardIssueNumber.ToString
        End With
      Else
        If pSummaryMembers.Count > 0 Then
          vMember = CType(pSummaryMembers(1), Access.Member)
          GetMember((vMember.ContactNumber))
          vContact = New Contact(mvEnv)
          vContact.InitRecordSetType(mvEnv, Contact.ContactRecordSetTypes.crtName, (vMember.ContactNumber))
          vContactType = vContact.ContactType
          AddMember(IntegerValue(pParams.OptionalValue("MemberContactNumber", CStr(vMember.ContactNumber))), IntegerValue(pParams.OptionalValue("MemberAddressNumber", CStr(AddressNumber))), (pParams("MembershipType").Value), pMembershipType, vContactType)
        Else
          vContact = New Contact(mvEnv)
          vContact.Init(IntegerValue(pParams.OptionalValue("MemberContactNumber", CStr(ContactNumber))), IntegerValue(pParams.OptionalValue("MemberAddressNumber", CStr(AddressNumber))))
          vContactType = vContact.ContactType
          AddMember(IntegerValue(pParams.OptionalValue("MemberContactNumber", CStr(ContactNumber))), IntegerValue(pParams.OptionalValue("MemberAddressNumber", CStr(AddressNumber))), (pParams("MembershipType").Value), pMembershipType, vContactType)
          'BR14472: Set Member Date of Birth as required for FutureTypeChangeDate routine when Membership Type Future Change Trigger is 'Age'.
          If vContact.DateOfBirth.Length > 0 Then mvMember.DateOfBirth = vContact.DateOfBirth
        End If
      End If

      If mvEnv.OwnershipMethod = CDBEnvironment.OwnershipMethods.omOwnershipGroups And mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataBranchOwnershipGroup) Then
        vBranch = New Branch
        vBranch.Init(mvEnv, (pParams("Branch").Value))
        If Len(vBranch.OwnershipGroup) > 0 And vBranch.OwnershipGroup <> Member.Contact.OwnershipGroup Then
          If pParams.Exists("BranchOwnershipGroup") = False Then pParams.Add("BranchOwnershipGroup")
          pParams("BranchOwnershipGroup").Value = vBranch.OwnershipGroup
        End If
      End If

      'Always call Create, even for CMT
      Member.Create(pParams)
      vContactNumber = Member.ContactNumber

      'For a previous fixed renewal w/out auto pay method, set NPD to be Member Joined date
      If FixedRenewalCycle = True And PreviousRenewalCycle = True And (MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm Or MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfLifeTerm) And AutoPaymentCreated = False And Balance > 0 Then
        NextPaymentDue = Member.Joined
      End If

      If pSummaryMembers.Count > 0 Then
        'This collection contains all the members for a multiple-member membership
        For Each vMember In pSummaryMembers
          If vMember.ContactNumber <> vContactNumber Then
            If vMember.MembershipNumber > 0 Then
              'CMT
              GetMember((vMember.ContactNumber))
            Else
              With vMember
                vContact = New Contact(mvEnv)
                vContact.InitRecordSetType(mvEnv, Contact.ContactRecordSetTypes.crtName, (vMember.ContactNumber))
                vContactType = vContact.ContactType
                AddMember(.ContactNumber, .AddressNumber, .MembershipTypeCode, .MembershipType, vContactType)
              End With
            End If
            If pParams("TransactionType").Value = "MEMC" Then
              With vMember
                'CMT
                If .MembershipNumber > 0 Then
                  If mvEnv.GetConfig("me_card_production_select") = "PAID_OR_AUTO" Then
                    .ReprintMshipCard = False
                  Else
                    .ReprintMshipCard = True
                  End If
                  If pParams("OrigMembershipCardExpires").Value.Length > 0 Then .MembershipCardExpires = pParams("OrigMembershipCardExpires").Value
                Else
                  .ReprintMshipCard = True
                  If mvEnv.GetConfig("me_card_production_select") = "PAID_OR_AUTO" Then
                    If HasAutoPaymentMethod Then
                      If RenewalPending Then
                        If TermUnits = OrderTermUnits.otuMonthly Then
                          .MembershipCardExpires = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, Term, CDate(RenewalDate)))
                        ElseIf TermUnits = OrderTermUnits.otuWeekly Then
                          .MembershipCardExpires = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.WeekOfYear, Term, CDate(RenewalDate)))
                        Else
                          If Term < 0 Then 'Free months on the first time around
                            .MembershipCardExpires = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, System.Math.Abs(Term), CDate(RenewalDate)))
                          Else
                            .MembershipCardExpires = CDate(RenewalDate).AddYears(Term).ToString(CAREDateFormat)
                          End If
                        End If
                      Else
                        .MembershipCardExpires = RenewalDate
                      End If
                    Else
                      .MembershipCardExpires = ""
                    End If
                  ElseIf pParams("OrigMembershipCardExpires").Value.Length > 0 Then
                    .MembershipCardExpires = pParams("OrigMembershipCardExpires").Value
                  End If
                End If
                .SetMembershipCardIssueNumber(Member.SetCardIssueNumberTypes.scintReinitialise)
                If pParams.Exists("MembershipCardExpires") = False Then pParams.Add("MembershipCardExpires")
                pParams("MembershipCardExpires").Value = .MembershipCardExpires
                If pParams.Exists("ReprintMshipCard") = False Then pParams.Add("ReprintMshipCard")
                pParams("ReprintMshipCard").Value = BooleanString(.ReprintMshipCard)
                If pParams.Exists("MembershipCardIssueNumber") = False Then pParams.Add("MembershipCardIssueNumber")
                pParams("MembershipCardIssueNumber").Value = .MembershipCardIssueNumber.ToString
              End With
            End If

            With vMember
              'Reset some parameters that are Member dependant
              pParams("Branch").Value = .Branch
              pParams("Joined").Value = .Joined
              If pParams.Exists("AgeOverride") Then pParams("AgeOverride").Value = .AgeOverride
              If pParams.Exists("BranchMember") Then pParams("BranchMember").Value = .BranchMember
              If pParams.Exists("Applied") Then pParams("Applied").Value = .Applied
              If pParams.Exists("MemberDOB") Then pParams("MemberDOB").Value = .ContactDateOfBirth
              If pParams.Exists("MemberDobEstimated") Then pParams("MemberDobEstimated").Value = BooleanString(.ContactDOBEstimated)
              pParams("MembershipType").Value = vMember.MembershipTypeCode
            End With

            vResetBranch = False
            If mvEnv.OwnershipMethod = CDBEnvironment.OwnershipMethods.omOwnershipGroups And mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataBranchOwnershipGroup) Then
              If vBranch Is Nothing Then
                vResetBranch = True
              ElseIf vBranch.BranchCode <> vMember.Branch Then
                vResetBranch = True
              End If
              If vResetBranch Then
                vBranch = New Branch
                vBranch.Init(mvEnv, (vMember.Branch))
              End If
              If Len(vBranch.OwnershipGroup) > 0 And vBranch.OwnershipGroup <> vMember.Contact.OwnershipGroup Then
                If pParams.Exists("BranchOwnershipGroup") = False Then pParams.Add("BranchOwnershipGroup")
                pParams("BranchOwnershipGroup").Value = vBranch.OwnershipGroup
              End If
            End If

            'Always call Create, even for CMT
            Member.Create(pParams)
          End If
        Next vMember
      End If

      If pParams.ParameterExists("TransactionType").Value <> "MEMC" And pParams.ParameterExists("SetCardExpiry").Bool = True Then
        vMember = Nothing
        For Each vMember In mvCurrentMembers
          With vMember
            If .MembershipType.MembershipCard Then
              'MembershipCardDuration comes from MembershipType attached to the Member
              'MembershipTypeCode & MembersPerOrder come from the MembershipType attached to the Payment Plan
              .MembershipCardExpires = .CalculateMembershipCardExpiryDate(False, "", RenewalDate, .Joined, Term, .MembershipType.MembershipCardDuration, StartDate, RenewalPending, CStr(ResetOrderTerm), Me.MembershipType.MembershipTypeCode, Me.MembershipType.MembersPerOrder, mvFixedRenewalCycle)
            End If
          End With
        Next vMember
      End If
    End Sub

    Private Function SCCMTResetPlanTerm(ByVal pNewMembershipType As MembershipType) As Boolean
      'Used by Smart Client CMT to reset Term & TermUnits
      'Returns True if Term was < 0 (there was an incentive) and it is now > 0 (incentive has been removed)
      Dim vWhereFields As New CDBFields
      Dim vReason As String = ""
      Dim vReturn As Boolean
      Dim vTable As String = ""
      Dim vUpdateRenewal As Boolean

      With pNewMembershipType
        Select Case .PaymentTerm
          Case MembershipType.MembershipTypeTerms.mtfMonthlyTerm
            TermUnits = OrderTermUnits.otuMonthly
            mvClassFields.Item(PaymentPlanFields.ofOrderTerm).Value = .MembershipTerm.ToString
          Case MembershipType.MembershipTypeTerms.mtfWeeklyTerm
            TermUnits = OrderTermUnits.otuWeekly
            mvClassFields.Item(PaymentPlanFields.ofOrderTerm).Value = .MembershipTerm.ToString
          Case Else
            TermUnits = OrderTermUnits.otuNone
            If .PaymentTerm = MembershipType.MembershipTypeTerms.mtfLifeTerm Then
              mvClassFields.Item(PaymentPlanFields.ofOrderTerm).Value = CStr(99)
            ElseIf Term < 0 Then
              'Check if the incentive was added due to an Auto Payment Method
              ' - If it was then leave the Term & RenewalDate as they are
              ' - Otherwise update the Term to 1 and reset the RenewalDate
              vUpdateRenewal = True
              If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
                vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDDReason)
                vTable = "direct_debits"
              ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
                vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlSOReason)
                vTable = "bankers_orders"
              ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
                vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCCReason)
                vTable = "credit_card_authorities"
              End If
              If Len(vReason) > 0 Then
                vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
                vWhereFields.Add("table1.cancellation_reason", CDBField.FieldTypes.cftCharacter, "")
                vWhereFields.Add("table1.source", CDBField.FieldTypes.cftLong, "s.source")
                vWhereFields.Add("s.incentive_scheme", CDBField.FieldTypes.cftLong, "isr.incentive_scheme")
                vWhereFields.Add("isr.reason_for_despatch", CDBField.FieldTypes.cftCharacter, vReason)
                vWhereFields.Add("isr.incentive_scheme", CDBField.FieldTypes.cftLong, "isp.incentive_scheme")
                vWhereFields.Add("isp.incentive_type", CDBField.FieldTypes.cftCharacter, "I")
                vWhereFields.Add("isp.reason_for_despatch", CDBField.FieldTypes.cftLong, "isr.reason_for_despatch")
                vUpdateRenewal = (mvEnv.Connection.GetCount(vTable & " table1, sources s, incentive_scheme_reasons isr, incentive_scheme_products isp", vWhereFields) = 0)
                If vUpdateRenewal Then
                  'BR15250: Check if the incentives were added due to an Auto Payment Method which was cancelled but
                  'the cancellation of Auto Payment Method did not remove these incentives which means the incentives are still valid
                  vWhereFields("table1.cancellation_reason").WhereOperator = CDBField.FieldWhereOperators.fwoNotEqual
                  vUpdateRenewal = (mvEnv.Connection.GetCount(vTable & " table1, sources s, incentive_scheme_reasons isr, incentive_scheme_products isp", vWhereFields) = 0)
                End If
              End If
              If vUpdateRenewal Then
                vReturn = ResetPlanTermForCMT(.MembershipTerm.ToString)
              End If
            Else
              mvClassFields.Item(PaymentPlanFields.ofOrderTerm).Value = .MembershipTerm.ToString
            End If
        End Select
      End With

      SCCMTResetPlanTerm = vReturn

    End Function

    Private Sub ProcessBranchUpdates(ByRef pParams As CDBParameters, ByRef pInformationMessage As String)
      Dim vAddressBranch As String = ""
      Dim vRegionAmount As Double
      Dim vRegionNumber As Integer
      Dim vConfimChangeBranch As Boolean
      Dim vChangeBranch As Boolean

      GetMember((CType(CurrentMembers.Item(1), Member).ContactNumber)) 'the 1st member of the membership

      If mvEnv.GetConfigOption("me_synchronise_branch", False) Then
        vAddressBranch = mvEnv.GetBranchFromAddress(Member.AddressNumber)
      End If

      If mvEnv.GetConfig("me_branch_income_period") = "LAST" Then
        vRegionAmount = MembershipType.RegionAmount
        vRegionNumber = mvEnv.GetRegionNumber(Member.Branch)
      End If
      '
      ' SAVE THE BRANCH INCOME IF REQUIRED
      '
      If vRegionNumber > 0 Then
        InsertBranchIncome(Member.Branch, vRegionAmount, MembershipType.MembershipTypeCode, True, vRegionNumber)
      End If
      '
      ' SYNCHRONISE THE BRANCH
      '
      If Not pParams.Exists("ChangeBranchWithAddress") Then
        vConfimChangeBranch = True
        vChangeBranch = False
      Else
        vConfimChangeBranch = False
        vChangeBranch = pParams("ChangeBranchWithAddress").Bool
      End If
      Member.SynchroniseBranch(vAddressBranch, Member.Branch, "", pInformationMessage, vConfimChangeBranch, vChangeBranch)
    End Sub

    Friend Function GetProRataRenewalAmount(ByVal pTraderPPDetails As TraderPaymentPlanDetails, ByVal pStartDate As String, ByVal pRenewalDate As String, ByVal pRenewalAmount As Double, ByVal pPayerContactNumber As Integer, ByVal pMembershipTypeCode As String, ByVal pUpdateType As PaymentPlanUpdateTypes, ByVal pTransType As String, ByVal pTransPayMethod As String, ByVal pCMTProRateBalance As Boolean, Optional ByVal pOldMembershipPrice As Double = 0, Optional ByVal pMonthsRemaining As Integer = 0, Optional ByVal pMembershipPeriod As MembershipPeriodTypes = MembershipPeriodTypes.mptNone, Optional ByRef pEstNextRenewalAmount As Double = 0) As Double
      '***** This has been copied from frmTrader.CalcRenewalAmountFromPPS - please change in both places *****
      'Used by Smart Client & Web Services only
      'pTransType = Trader Transaction Type (MEMB, CMEM etc.)
      'pTransPayMethod = Trader mvPayMethod3 (TransactionPaymentMethod in Smart Client)
      'vType = Trader Application Type as a single character and will be either 'M' (Maintenance), 'C' (Conversion) or 'T' (Transaction)
      Dim vMT As MembershipType
      Dim vPPD As PaymentPlanDetail
      Dim vEntitlement As MembershipEntitlement = Nothing
      Dim vAmount As Double
      Dim vFound As Boolean
      Dim vFullOrProRate As Boolean
      Dim vProductCode As String
      Dim vMemberOrPayer As String = ""
      Dim vPPConvMaint As Boolean
      Dim vRenewalAmount As Double
      Dim vRow As Integer
      Dim vQuantity As Integer
      Dim vType As String
      Dim vFirstYear As Boolean

      '1a) (Conversion or Maintenance) and unpaid Membership in first year
      ' or
      '1b) Creating new Membership or CMT
      ' and
      '1c) Fixed/Previous renewal cycle with pro-rating
      '
      'OR
      '
      '2) Conversion added a new Membership
      '
      'OR
      '
      '3)Maintenance and PPDetails financial details amended
      '
      If (((pUpdateType And PaymentPlanUpdateTypes.pputAddCreditCardAuthority) = PaymentPlanUpdateTypes.pputAddCreditCardAuthority) Or ((pUpdateType And PaymentPlanUpdateTypes.pputAddDirectDebit) = PaymentPlanUpdateTypes.pputAddDirectDebit) Or ((pUpdateType And PaymentPlanUpdateTypes.pputAddStandingOrder) = PaymentPlanUpdateTypes.pputAddStandingOrder)) Then
        vType = "C"
        If (pUpdateType And PaymentPlanUpdateTypes.pputPaymentPlan) = PaymentPlanUpdateTypes.pputPaymentPlan Then vPPConvMaint = True
      ElseIf (pUpdateType And PaymentPlanUpdateTypes.pputConversion) = PaymentPlanUpdateTypes.pputConversion Then
        vType = "C"
        If (pUpdateType And PaymentPlanUpdateTypes.pputPaymentPlan) = PaymentPlanUpdateTypes.pputPaymentPlan Then vPPConvMaint = True
      ElseIf (pUpdateType And PaymentPlanUpdateTypes.pputPaymentPlan) = PaymentPlanUpdateTypes.pputPaymentPlan Then
        vType = "M"
      Else
        vType = "T"
      End If

      vRenewalAmount = pRenewalAmount

      Dim vPayerContact As New Contact(mvEnv)
      vPayerContact.Init(pPayerContactNumber)
      Dim vPayerVATCategory As String = vPayerContact.VATCategory
      Dim vVATRate As VatRate
      If ((((vType = "M" Or vType = "C") And pStartDate = pRenewalDate And Me.PlanType = CDBEnvironment.ppType.pptMember) Or (vType = "T" And (pTransType = "MEMB" Or pTransType = "MEMC"))) And Me.FixedRenewalCycle And Me.PreviousRenewalCycle And (Me.ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0) Or (vType = "C" And Me.PlanType <> CDBEnvironment.ppType.pptMember And pTransPayMethod = "MEMB") Or ((vType = "M" Or (vType = "C" And vPPConvMaint)) And Me.DetailsAmendedFinancial) Then
        vRenewalAmount = 0
        pEstNextRenewalAmount = 0
        If pMembershipPeriod = MembershipPeriodTypes.mptNone Then pMembershipPeriod = DetermineMembershipPeriod()
        If pMembershipPeriod = MembershipPeriodTypes.mptNone And Existing = False Then
          vFirstYear = True
        Else
          vFirstYear = (pMembershipPeriod = MembershipPeriodTypes.mptFirstPeriod)
        End If
        vMT = mvEnv.MembershipType(pMembershipTypeCode)

        Dim vUpdateRenewalAmount As Boolean
        For Each vPPD In pTraderPPDetails
          vRow = vRow + 1
          vFound = False
          vAmount = 0
          vFullOrProRate = False
          vProductCode = vPPD.ProductCode
          vQuantity = CInt(vPPD.Quantity)
          If vPPD.ProductRateIsValid = False Then vPPD.SetPrices()
          vVATRate = mvEnv.VATRate(vPPD.Product.ProductVatCategory, vPayerVATCategory)
          vUpdateRenewalAmount = True
          If vRow = 1 Then
            'The first row is the membership pricing line which in most cases should contain a quantity of one.
            If vQuantity > 1 Then
              If vMT.ChargeIndividualMembers = "N" And vMT.MembersPerOrder = 0 Then
                'Do nothing as the quantity will be set to the number of members in the group membership
              Else
                'A Special Initial Period incentive has been applied and the quantity is set to the number of months of the initial period.
                vQuantity = 1
              End If
            End If
          End If
          If vType = "M" Or vType = "C" Then
            If Me.GiftMembership And vPPD.ContactNumber = pPayerContactNumber Then
              vMemberOrPayer = "P"
            Else
              vMemberOrPayer = "M"
            End If
          ElseIf Len(vPPD.MemberOrPayer) > 0 Then
            vMemberOrPayer = vPPD.MemberOrPayer
          End If
          For Each vEntitlement In vMT.Entitlements
            If vEntitlement.ProductCode = vProductCode And vEntitlement.MemberOrPayer = vMemberOrPayer Then vFound = True
            If vFound Then Exit For
          Next vEntitlement
          Dim vPriceDate As String = TodaysDate()
          If RenewalDate.Length = 0 Then RenewalDate = pRenewalDate
          If vPPD.ValidFrom.Length > 0 AndAlso CDate(vPPD.ValidFrom) < CDate(RenewalPeriodEnd) AndAlso (vPPD.ValidTo.Length = 0 OrElse CDate(vPPD.ValidTo) > CDate(CalculateRenewalDate(RenewalPeriodEnd, False))) Then
            'If ValidFrom date is set and it is within the current renewal period then use this date to caluclate the price
            vPriceDate = vPPD.ValidFrom
          End If
          If vFound Then
            If (vEntitlement.ProRateChargeMethod = MembershipEntitlement.MembershipEntitlementProRatingChargeTypes.meprctFullAmount Or vEntitlement.ProRateChargeMethod = MembershipEntitlement.MembershipEntitlementProRatingChargeTypes.meprctProRate) Or vFirstYear = False Then
              vFullOrProRate = True
              If vPPD.Amount.Length > 0 Then
                vAmount = DoubleValue(vPPD.Amount)
              Else
                vAmount = vPPD.Price(CDate(vPriceDate), vVATRate, vQuantity, False, True)
              End If
              pEstNextRenewalAmount = FixTwoPlaces(pEstNextRenewalAmount + vAmount)
            End If
          Else
            If mvExisting = True AndAlso vRow > 1 AndAlso vPPD.HasPriceInfo = True AndAlso (vType = "M" OrElse vPPConvMaint = True) Then
              vAmount = vPPD.GrossAmount
              If vAmount <> 0 AndAlso Not vPPD.Product.Donation Then
                pEstNextRenewalAmount = FixTwoPlaces(pEstNextRenewalAmount + vPPD.Price(CDate(vPriceDate), vVATRate, vQuantity, False, True))
              Else
                'BR21175 - Do not recalculate the amount for an existing donation.
                pEstNextRenewalAmount = FixTwoPlaces(pEstNextRenewalAmount + vAmount)
              End If
              If vAmount = 0 Then vUpdateRenewalAmount = False
            ElseIf vPPD.Amount.Length > 0 Then
              vAmount = DoubleValue(vPPD.Amount)
              pEstNextRenewalAmount = FixTwoPlaces(pEstNextRenewalAmount + vAmount)
            Else
              vAmount = vPPD.Price(CDate(vPriceDate), vVATRate, vQuantity, False, True)
              pEstNextRenewalAmount = FixTwoPlaces(pEstNextRenewalAmount + vAmount)
            End If
            'If we have just CMT'd and kept old Detail lines then their Amount has been set to zero, so use zero for now as we just want the new membership types price
            If (vRow > 1 AndAlso pTransType = "MEMC" AndAlso CMTProportionBalance <> CMTProportionBalanceTypes.cmtNone) AndAlso Val(vPPD.Amount) = 0 Then vAmount = 0
          End If
          If vAmount = 0 AndAlso (vFound = False OrElse (vFound AndAlso vFullOrProRate)) AndAlso
            ((String.IsNullOrEmpty(vPPD.ValidFrom) OrElse CDate(vPPD.ValidFrom) <= CDate(RenewalPeriodEnd) AndAlso
            (String.IsNullOrEmpty(vPPD.ValidTo) OrElse CDate(vPPD.ValidTo) >= CDate(CalculateRenewalDate(RenewalPeriodEnd, False))))) Then
            'If the current price of the product is zero then see if an override amount has been set on this row
            vAmount = Val(vPPD.Amount)
            If vAmount <> 0 Then pEstNextRenewalAmount = FixTwoPlaces(pEstNextRenewalAmount + vAmount)
          End If
          If vUpdateRenewalAmount = True AndAlso vAmount <> 0 Then vRenewalAmount = FixTwoPlaces(vRenewalAmount + vAmount)
        Next vPPD

        If pTransType = "MEMC" AndAlso CMTProportionBalance <> CMTProportionBalanceTypes.cmtNone Then
          If pMonthsRemaining = 0 Then
            'Just use old membership price
            vRenewalAmount = RenewalAmount
          Else
            'Need to pro-rate the RenewalAmount and add old membership price
            vRenewalAmount = FixTwoPlaces(vRenewalAmount / 12 * pMonthsRemaining)
            vRenewalAmount = vRenewalAmount + pOldMembershipPrice
          End If
        End If

      ElseIf (mvDetails.Count() > 0 And pCMTProRateBalance = False) Then
        'We are not pro-rating, or not a Membership, and we already have some PPDetails so use price of all the PDetails
        vRenewalAmount = 0
        pEstNextRenewalAmount = 0
        For Each vPPD In mvDetails
          vAmount = 0
          vPPD.SetPrices()
          vVATRate = mvEnv.VATRate(vPPD.Product.ProductVatCategory, vPayerVATCategory)
          Dim vPriceDate As String = RenewalDate
          If vPPD.ValidFrom.Length > 0 AndAlso CDate(vPPD.ValidFrom) < CDate(RenewalPeriodEnd) AndAlso (vPPD.ValidTo.Length = 0 OrElse CDate(vPPD.ValidTo) > CDate(CalculateRenewalDate(RenewalPeriodEnd, False))) Then
            'If ValidFrom date is set and it is within the current renewal period then use this date to caluclate the price
            vPriceDate = vPPD.ValidFrom
          End If
          vAmount = vPPD.Price(CDate(vPriceDate), vVATRate, 0, False, True)
          'If the current price of the product is zero then see if an override amount has been set on this row
          If vAmount = 0 AndAlso vPPD.ValidFrom.Length = 0 AndAlso vPPD.ValidTo.Length = 0 Then vAmount = Val(vPPD.Amount)
          If vAmount > 0 Then vRenewalAmount = vRenewalAmount + vAmount
        Next vPPD
        pEstNextRenewalAmount = FixTwoPlaces(vRenewalAmount)
      End If

      GetProRataRenewalAmount = vRenewalAmount

    End Function

    Private Sub AddAmendmentHistory(ByVal pJournalNumber As Integer)
      mvClassFields.Item(PaymentPlanFields.ofBalance).ForceAmendmentHistory = True
      If PlanType = CDBEnvironment.ppType.pptMember AndAlso mvDetails.Count > 0 Then
        'DO NOT CHANGE THE FOLLOWING LINES OF CODE TO USE THE GetDetailKeyFromLineNo METHOD!
        mvClassFields.Item(PaymentPlanFields.ofMembershipProduct).Value = CType(mvDetails.Item("1"), PaymentPlanDetail).ProductCode
        mvClassFields.Item(PaymentPlanFields.ofMembershipRate).Value = CType(mvDetails.Item("1"), PaymentPlanDetail).RateCode
      End If
      If mvProcessRenewal Then mvClassFields.Item(PaymentPlanFields.ofRenewal).Bool = True
      mvEnv.AddAmendmentHistory(CDBEnvironment.AuditTypes.audUpdate, "orders", PlanNumber, 0, mvEnv.User.UserID, mvClassFields, pJournalNumber)
    End Sub

    Public Function GetCancellationOptions(ByVal pType As CDBEnvironment.ppType, ByVal pFutureCancel As Boolean, Optional ByVal pMembershipNumber As Integer = 0) As CDBParameters
      Dim vWhereFields As New CDBFields
      Dim vAssociateMembership As Boolean
      Dim vSQL As String
      Dim vRecordSet As CDBRecordSet
      Dim vOrderNumber As Integer
      Dim vParams As New CDBParameters
      Dim vSource As String = ""

      If Not pFutureCancel Then
        If PlanType = CDBEnvironment.ppType.pptMember Then
          vSQL = "SELECT members_per_order,m.membership_type,associate_membership_type,order_number FROM members m,membership_types mt "
          If pType = CDBEnvironment.ppType.pptMember Then
            vSQL = vSQL & " WHERE m.membership_number = " & pMembershipNumber
          Else
            vSQL = vSQL & " WHERE m.order_number = " & PlanNumber
          End If
          vSQL = vSQL & " AND mt.membership_type = m.membership_type"
          vRecordSet = mvEnv.Connection.GetRecordSet(vSQL)
          If vRecordSet.Fetch() = True Then
            vOrderNumber = vRecordSet.Fields("order_number").IntegerValue
            If Len(vRecordSet.Fields("associate_membership_type").Value) > 0 Then
              vAssociateMembership = True
            Else
              vAssociateMembership = mvEnv.Connection.GetCount("membership_types", Nothing, "associate_membership_type = '" & vRecordSet.Fields("membership_type").Value & "'") > 0
            End If
            If pType = CDBEnvironment.ppType.pptMember Then
              vParams.Add("CancelMember", CDBField.FieldTypes.cftCharacter, "Y")
              If CDbl(vRecordSet.Fields("members_per_order").Value) <> 1 Or vAssociateMembership = True Then vParams.Add("CancelMembership", CDBField.FieldTypes.cftCharacter, "Y")
            Else
              If CDbl(vRecordSet.Fields("members_per_order").Value) = 1 And vAssociateMembership = False Then
                vParams.Add("CancelMember", CDBField.FieldTypes.cftCharacter, "Y")
              Else
                vParams.Add("CancelMembership", CDBField.FieldTypes.cftCharacter, "Y")
              End If
            End If
            vParams.Add("MembersPerOrder", CDBField.FieldTypes.cftInteger, vRecordSet.Fields("members_per_order").Value)
            vParams.Add("AssociateMembership", CDBField.FieldTypes.cftCharacter, BooleanString(vAssociateMembership))
          End If
          vRecordSet.CloseRecordSet()
          If vParams.ParameterExists("CancelMembership").Bool And vOrderNumber > 0 Then
            'BR 7962: Ensure there is actually more than 1 uncancelled Member on the Membership
            vWhereFields.Clear()
            vWhereFields.Add("order_number", vOrderNumber, CDBField.FieldWhereOperators.fwoEqual)
            vWhereFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoEqual)
            If mvEnv.Connection.GetCount("members", vWhereFields) < 2 Then
              'Remove CancelMembership and add CancelMember
              vParams.Remove("CancelMembership")
              If vParams.ContainsKey("CancelMember") = False Then vParams.Add("CancelMember", CDBField.FieldTypes.cftCharacter, "Y")
            End If
          End If
        End If
        If PlanType = CDBEnvironment.ppType.pptOther Then vParams.Add("CancelPaymentPlan", CDBField.FieldTypes.cftCharacter, "Y")
        If (CovenantStatus = PaymentPlan.ppCovenant.ppcCovenant Or CovenantStatus = PaymentPlan.ppCovenant.ppcDepositedDeed) Then
          vParams.Add("CancelCovenant", CDBField.FieldTypes.cftCharacter, "Y")
          vParams.Add("CancelPaymentPlan", CDBField.FieldTypes.cftCharacter, "Y")
        End If
        If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then vParams.Add("CancelDirectDebit", CDBField.FieldTypes.cftCharacter, "Y")
        If StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then vParams.Add("CancelStandingOrder", CDBField.FieldTypes.cftCharacter, "Y")
        If CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then vParams.Add("CancelCreditCardAuthority", CDBField.FieldTypes.cftCharacter, "Y")
        If PlanType = CDBEnvironment.ppType.pptLoan Then
          vParams.Add("CancelLoan", "Y")
          vParams.Add("CancelPaymentPlan", CDBField.FieldTypes.cftCharacter, "Y")
        End If
        If Not vParams.Exists("CancelPaymentPlan") And (vParams.ParameterExists("CancelDirectDebit").Bool Or vParams.ParameterExists("CancelStandingOrder").Bool Or vParams.ParameterExists("CancelCreditCardAuthority").Bool) Then
          'Only cancelling an auto payment method
          If vParams.ParameterExists("CancelDirectDebit").Bool Then
            vSource = DirectDebit.Source
          ElseIf vParams.ParameterExists("CancelStandingOrder").Bool Then
            vSource = StandingOrder.Source
            If Val(Amount) > 0 Then
              vParams.Add("UnsetFixedAmount", CDBField.FieldTypes.cftCharacter, "Y")
              vParams.Add("FixedAmount", CDBField.FieldTypes.cftCharacter, FixedFormat(Val(Amount)))
            End If
          ElseIf vParams.ParameterExists("CancelCreditCardAuthority").Bool Then
            vSource = CreditCardAuthority.Source
          End If
          If Len(vSource) > 0 And vSource <> Source Then
            'Sources are different so may need to update Payment Plan Details source
            With vWhereFields
              .Clear()
              .Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
              .Add("(source", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoNotEqual)
              .Add("source", CDBField.FieldTypes.cftLong, "'" & vSource & "')")
            End With
            If mvEnv.Connection.GetCount("order_details", vWhereFields) > 0 Then
              Select Case mvEnv.GetConfig("fp_ppd_use_auto_pmnt_source")
                Case "HU"
                  'Always update the source without asking the user
                  vParams.Add("UpdateDetailsSource", CDBField.FieldTypes.cftCharacter, "Y")
                Case "HN"
                  'Never update the source without asking the user
                  vParams.Add("UpdateDetailsSource", CDBField.FieldTypes.cftCharacter, "N")
                Case Else
                  'Either 'SN' or 'SU' (default) - ask user whether to update the source
                  vParams.Add("UpdateDetailsSource", CDBField.FieldTypes.cftCharacter, "Ask")
              End Select
            End If
          End If
        End If
      Else
        If (pType = CDBEnvironment.ppType.pptCCCA Or pType = CDBEnvironment.ppType.pptDD Or pType = CDBEnvironment.ppType.pptSO) And PlanType = CDBEnvironment.ppType.pptMember Then
          If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
            vParams.Add("CancellationReason", CDBField.FieldTypes.cftCharacter, DirectDebit.FutureCancellationReason)
            vParams.Add("CancelledOn", CDBField.FieldTypes.cftCharacter, DirectDebit.FutureCancellationDate)
            vParams.Add("Source", CDBField.FieldTypes.cftCharacter, DirectDebit.FutureCancellationSource)
          ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
            vParams.Add("CancellationReason", CDBField.FieldTypes.cftCharacter, StandingOrder.FutureCancellationReason)
            vParams.Add("CancelledOn", CDBField.FieldTypes.cftCharacter, StandingOrder.FutureCancellationDate)
            vParams.Add("Source", CDBField.FieldTypes.cftCharacter, StandingOrder.FutureCancellationSource)
          ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
            vParams.Add("CancellationReason", CDBField.FieldTypes.cftCharacter, CreditCardAuthority.FutureCancellationReason)
            vParams.Add("CancelledOn", CDBField.FieldTypes.cftCharacter, CreditCardAuthority.FutureCancellationDate)
            vParams.Add("Source", CDBField.FieldTypes.cftCharacter, CreditCardAuthority.FutureCancellationSource)
          End If
        Else
          vParams.Add("CancellationReason", CDBField.FieldTypes.cftCharacter, FutureCancellationReason)
          vParams.Add("CancelledOn", CDBField.FieldTypes.cftCharacter, FutureCancellationDate)
          vParams.Add("Source", CDBField.FieldTypes.cftCharacter, FutureCancellationSource)
        End If
      End If
      GetCancellationOptions = vParams
    End Function

    Public Sub SetOneOffPaymentForImport(ByVal pOneOffPayment As Boolean)
      'Only used by DataImport
      If PlanType <> CDBEnvironment.ppType.pptMember Then
        mvClassFields.Item(PaymentPlanFields.ofOneOffPayment).Bool = pOneOffPayment
      End If
    End Sub

    Private Function GetNumberOfFrequencyAmounts(ByVal pPaymentFrequency As PaymentFrequency, ByVal pRenewalDate As String, ByRef pMonthsRemaining As Integer) As Integer
      Dim vMinDueDate As Nullable(Of Date) = Nothing
      Return GetNumberOfFrequencyAmounts(pPaymentFrequency, pRenewalDate, pMonthsRemaining, Today, vMinDueDate)
    End Function
    Private Function GetNumberOfFrequencyAmounts(ByVal pPaymentFrequency As PaymentFrequency, ByVal pRenewalDate As String, ByRef pMonthsRemaining As Integer, ByVal pChangeDate As Date) As Integer
      Dim vMinDueDate As Nullable(Of Date) = Nothing
      Return GetNumberOfFrequencyAmounts(pPaymentFrequency, pRenewalDate, pMonthsRemaining, pChangeDate, vMinDueDate)
    End Function
    Private Function GetNumberOfFrequencyAmounts(ByVal pPaymentFrequency As PaymentFrequency, ByVal pRenewalDate As String, ByRef pMonthsRemaining As Integer, ByVal pChangeDate As Date, ByVal pMinDueDate As Nullable(Of Date)) As Integer
      Dim vLastPaymentDue As Date = CDate(pRenewalDate)
      Dim vNextPaymentDue As Date
      If pPaymentFrequency.Frequency = 1 AndAlso RenewalPending = False Then
        'BR15003: Only use renewal date for Annual payment frequency (Frequency=1) when Renewal Pending is False as when its true it is possible that the payment is still due and can be changed.
        vNextPaymentDue = CDate(pRenewalDate)
      Else
        vNextPaymentDue = CDate(CalculateRenewalDate(pRenewalDate, False))
        If Term < 0 And Math.Abs(Term) > 12 Then
          If mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlApplyIncentiveFreePeriod) = "A" Then
            vLastPaymentDue = DateAdd("yyyy", 1, vNextPaymentDue)
          Else
            vNextPaymentDue = DateValue(AddMonths(vNextPaymentDue.ToString(CAREDateFormat), vNextPaymentDue.ToString(CAREDateFormat), Math.Abs(Term) - 12))
          End If
        End If
      End If

      If pPaymentFrequency.OffsetMonths > 0 _
      OrElse (pPaymentFrequency.Frequency * pPaymentFrequency.Interval < 12 AndAlso pPaymentFrequency.Interval = 1 AndAlso pPaymentFrequency.Period = PaymentFrequency.PaymentFrequencyPeriods.pfpMonths) Then
        'If the Offset Months are set OR the Payment Frequency instalments do not cover the full year
        'Re-calculate the starting & end points of the date calculations
        Dim vOffset As Integer = pPaymentFrequency.GetCalculatedOffsetMonths()
        If vOffset <> 0 Then
          vLastPaymentDue = Date.Parse(AddMonths(pRenewalDate, vLastPaymentDue.ToString(CAREDateFormat), vOffset))
          vNextPaymentDue = Date.Parse(AddMonths(pRenewalDate, vLastPaymentDue.ToString(CAREDateFormat), -(pPaymentFrequency.Frequency * pPaymentFrequency.Interval)))
        End If
      End If

      Dim vTotalNumberOfPayments As Integer = 1
      pMonthsRemaining = 0
      Dim vAutoPayCheckDate As Date = Today
      If mvProcessCMT = True AndAlso (pChangeDate < Today) Then vAutoPayCheckDate = pChangeDate
      While DateDiff(Microsoft.VisualBasic.DateInterval.Day, vNextPaymentDue, vLastPaymentDue) > 0
        If DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes Then
          Dim vNextClaimDate As Date = CDate(Me.FindNextClaimDate(vNextPaymentDue.ToString(CAREDateFormat)))
          If vNextClaimDate > pChangeDate Then  'a quick check before checking the advance notice period rule
            'Do not increment months remaining when next claim date is current date
            Dim vAutoPayMethod As ppAutoPayMethods
            If DirectDebitStatus = ppYesNoCancel.ppYes Then
              vAutoPayMethod = ppAutoPayMethods.ppAPMDD
            Else
              vAutoPayMethod = ppAutoPayMethods.ppAPMCCCA
            End If
            If vNextClaimDate > mvEnv.GetPaymentPlanAutoPayDate(vAutoPayCheckDate, vAutoPayMethod, Me.AutoPayBankAccount, True) Then
              If (pMinDueDate.HasValue AndAlso vNextPaymentDue >= pMinDueDate.Value) OrElse (pMinDueDate.HasValue = False) Then
                pMonthsRemaining += 1
              End If
            End If
          End If
        ElseIf vNextPaymentDue > pChangeDate Then
          pMonthsRemaining += 1
        End If
        vTotalNumberOfPayments += 1
        vNextPaymentDue = DateValue(AddMonths(vLastPaymentDue.ToString(CAREDateFormat), vNextPaymentDue.ToString(CAREDateFormat), pPaymentFrequency.Interval))
      End While
      If vTotalNumberOfPayments > 1 Then vTotalNumberOfPayments -= 1
      Return vTotalNumberOfPayments
    End Function

    Private Function GetMonthsRemaining(ByVal pPayFreq As PaymentFrequency, ByVal pTotalInstallments As Integer, ByVal pRemainingInstallments As Integer) As Integer
      Dim vMonthsRemaining As Integer = 0

      If pTotalInstallments > 0 Then
        If pPayFreq.Frequency <> 1 Then
          If (pPayFreq.Frequency * pPayFreq.Interval) <> 12 And pPayFreq.Interval = 1 Then
            'Bit to handle ATL's 7 installments per year
            vMonthsRemaining = pPayFreq.Interval * pRemainingInstallments
          Else
            vMonthsRemaining = CInt((12 / pTotalInstallments) * pRemainingInstallments)
          End If
        ElseIf pRemainingInstallments = 1 AndAlso pTotalInstallments = 1 Then
          'BR15003: For annual payment frequency use 12 remaining months if the payment is due and can be changed.
          vMonthsRemaining = 12
        End If
      End If
      Return vMonthsRemaining
    End Function

    Private Function GetCMTProRateNumberOfMonths(ByVal pMonthsRemaining As Integer, ByVal pRenewalDate As String, ByRef pTermMonths As Integer, ByRef pJoinedDate As String) As Boolean
      Dim vUseProRateMonths As Boolean = False
      If FixedRenewalCycle And PreviousRenewalCycle And (ProportionalBalanceSetting And (ProportionalBalanceConfigSettings.pbcsFullPayment + ProportionalBalanceConfigSettings.pbcsNew)) > 0 And ((CDate(StartDate) = CDate(RenewalDate)) Or DateDiff(Microsoft.VisualBasic.DateInterval.Year, CDate(StartDate), CDate(RenewalDate)) <= 1) Then
        'Pro-rated Membership with CMT within the first year
        'Re-Set vTermMonths to be the pro-rated number of months
        If ((ProportionalBalanceSetting) And ProportionalBalanceConfigSettings.pbcsFullPayment) = ProportionalBalanceConfigSettings.pbcsFullPayment Then
          'Only set vUseProRatemonths if Member not expected to pay full annual amount in first year
          If DateDiff(Microsoft.VisualBasic.DateInterval.Year, CDate(StartDate), CDate(RenewalDate)) = 1 Then
            'Second year of Membership
            pTermMonths = pMonthsRemaining
          Else
            If Not (Val(mvClassFields.Item(PaymentPlanFields.ofFirstAmount).SetValue) = Val(mvClassFields.Item(PaymentPlanFields.ofRenewalAmount).SetValue)) Then vUseProRateMonths = True
            pJoinedDate = Member.Joined
            pTermMonths = CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Month, CDate(pJoinedDate), CDate(pRenewalDate)))
          End If
        Else
          'New
          pJoinedDate = Member.Joined
          pTermMonths = CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Month, CDate(pJoinedDate), CDate(pRenewalDate)))
          vUseProRateMonths = True
        End If
      End If
      Return vUseProRateMonths
    End Function

    Public Function CanReverseInAdvance() As Boolean
      'Used for ReverseInAdvance
      If PlanType = CDBEnvironment.ppType.pptMember And InAdvance > 0 Then
        If Not (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) Then
          CanReverseInAdvance = CMTProportionBalance <> CMTProportionBalanceTypes.cmtNone
        End If
      End If
    End Function

    Public Function CanRefundInAdvance() As Boolean
      'Used for RefundInAdvance
      If PlanType = CDBEnvironment.ppType.pptMember And InAdvance > 0 Then
        If (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) Then
          CanRefundInAdvance = CMTProportionBalance <> CMTProportionBalanceTypes.cmtNone
        End If
      End If
    End Function

    Private Function SetDateFromStartMonth(ByVal pOldDate As String) As String
      Dim vNewDate As String

      If Month(CDate(pOldDate)) > StartMonth Then
        'E.g. pOldDate = 01/12/2007, StartMonth = 5 = Set vNewDate to be 01/05/2008
        vNewDate = CStr(DateSerial(Year(CDate(pOldDate)) + 1, StartMonth, Day(CDate(pOldDate))))
      Else
        'E.g. pOldDate = 01/01/2008, StartMonth = 5 = Set vNewDate to be 01/05/2008
        vNewDate = CStr(DateSerial(Year(CDate(pOldDate)), StartMonth, Day(CDate(pOldDate))))
      End If

      SetDateFromStartMonth = vNewDate

    End Function

    Private Sub DeleteOPSForRegenerate(ByVal pCreationReason As OrderPaymentSchedule.OrderPaymentScheduleCreationReasons, ByVal pScheduleStartDate As String, ByVal pRenewalDate As String, ByVal pExpBalance As Double, ByRef pDeleteFromDate As String, ByRef pDeleteToDate As String, ByRef pOPSToDelete As Boolean, ByRef pUseEffectiveDate As Boolean, ByRef pTrans As Boolean, ByRef pFreqChangedUseOPSDueOnly As Boolean)
      'This is ONLY to be called from RegenerateScheduledPayments to delete the OPS data.
      'pScheduleCreationReason, pScheduleStartDate, pRenewalDate & pExpBalance MUST be ByVal as their values should not be passed back.
      'pDeleteFromDate, pDeleteToDate & pOPSToDelete MUST be ByRef as their values need to be passed back.
      Dim vFields As New CDBFields
      Dim vPPD As PaymentPlanDetail
      Dim vSQL As String
      Dim vPPDGracePeriodProportion As String

      '# DELETING EXISTING OPS RECORDS WHICH ARE DUE
      '# If we have a PPScheduleAmendedOn date then we may have existing schedule records to delete
      '# Start by setting vDeleteToDate = vRenewalDate (assuming we will delete up to the renewal date)
      pDeleteFromDate = pScheduleStartDate
      pDeleteToDate = pRenewalDate
      pUseEffectiveDate = False
      pFreqChangedUseOPSDueOnly = False

      If IsDate(mvClassFields(PaymentPlanFields.ofPaymentScheduleAmendedOn).Value) Then
        '# Set up to delete any existing schedule records with a status of D (Due)
        '# Begin a database transaction if not in one already
        If mvEnv.Connection.InTransaction = False Then
          mvEnv.Connection.StartTransaction()
          pTrans = True
        End If
        '# Ensure that delete statement will have valid dates
        If pCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance Then
          'Check whether the DeleteFromDate needs to be increased due to PaymentPlanDetails having the EffectiveDate set
          vPPDGracePeriodProportion = mvEnv.GetConfig("fp_ppd_grace_period_proportion", "N")
          If (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsExisting) = ProportionalBalanceConfigSettings.pbcsExisting And vPPDGracePeriodProportion <> "N" Then
            If (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) And TermUnits = OrderTermUnits.otuNone And PaymentFrequencyFrequency > 1 And PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpMonths And (PaymentFrequencyFrequency * PaymentFrequencyInterval <= 12) Then
              '- Payment Plan is paid by DD or CCCA
              '- Term is Annual
              '- Paid in instalments
              '- Proportional Balance config set to 'Existing'
              '- fp_ppd_grace_period_proportion config has been set
              For Each vPPD In Details
                If IsDate(vPPD.EffectiveDate) Then
                  If CDate(vPPD.EffectiveDate) > CDate(TodaysDate()) Then
                    If CDate(vPPD.EffectiveDate) > CDate(pDeleteFromDate) Then
                      pDeleteFromDate = vPPD.EffectiveDate
                      pUseEffectiveDate = True
                    End If
                  End If
                End If
              Next vPPD
            End If
          End If
        End If

        Select Case pCreationReason
          Case OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrAutoPayMethodCancel
            If mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlApplyIncentiveFreePeriod) = "B" Then
              'If we have cancelled an auto payment method with incentive so that incentive was removed then take this into account when deleting the OPS
              If Term = 1 And (mvClassFields.Item(PaymentPlanFields.ofOrderTerm).ValueChanged = True And Val(mvClassFields.Item(PaymentPlanFields.ofOrderTerm).SetValue) < 0) Then
                pDeleteToDate = CalculateRenewalDate(pDeleteToDate, False)
                pDeleteToDate = AddMonths(pDeleteToDate, pDeleteToDate, System.Math.Abs(IntegerValue(mvClassFields.Item(PaymentPlanFields.ofOrderTerm).SetValue)))
              End If
            End If

          Case OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance
            'For CMT & PPMaint, do not delete OPS due before auto pay notification
            If (DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes) AndAlso mvAutoPaymentCreated = False AndAlso IntegerValue(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlAutoPayAdvancePeriod)) > 0 Then
              Dim vMinDeleteDate As Date = mvEnv.GetPaymentPlanAutoPayDate(Today, If(DirectDebitStatus = ppYesNoCancel.ppYes, PaymentPlan.ppAutoPayMethods.ppAPMDD, PaymentPlan.ppAutoPayMethods.ppAPMCCCA), Me.AutoPayBankAccount, True)
              vMinDeleteDate = vMinDeleteDate.AddDays(1)    'Need to add 1 day to ensure that OPS with a claim date on this date is not deleted
              If vMinDeleteDate > CDate(pDeleteFromDate) Then
                'DD/CCA payments cannot be claimed before vMinDeleteDate
                If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType AndAlso CMTProportionBalance = CMTProportionBalanceTypes.cmtFrequencyAmounts Then
                  'vMinDeleteDate = CheckOPSMinDeleteDate(pDeleteFromDate, pDeleteToDate, vMinDeleteDate)
                  vMinDeleteDate = CDate(GetCMTOPSCreationDate())
                ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Then
                  If mvClassFields.Item(PaymentPlanFields.ofBalance).ValueChanged = False AndAlso mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged = True Then
                    Dim vAutoPayStartDate As Date = CDate(If(DirectDebitStatus = ppYesNoCancel.ppYes, DirectDebit.StartDate, CreditCardAuthority.StartDate))
                    If vAutoPayStartDate >= CDate(vMinDeleteDate) Then
                      'As DD/CCA is not valid, no need to change the deletion range
                      vMinDeleteDate = CDate(pDeleteFromDate)
                    ElseIf mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged Then
                      Dim vOldPayFrequencyCode As String = mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).SetValue
                      Dim vOldPaymentFrequency As PaymentFrequency = mvEnv.GetPaymentFrequency(vOldPayFrequencyCode)
                      If (vOldPaymentFrequency.Frequency * vOldPaymentFrequency.Interval) = (PaymentFrequencyFrequency * PaymentFrequencyInterval) AndAlso (PaymentFrequencyFrequency * PaymentFrequencyInterval <= 12) _
                      AndAlso vOldPaymentFrequency.Frequency = 1 AndAlso vOldPaymentFrequency.Period = PaymentFrequency.PaymentFrequencyPeriods.pfpMonths AndAlso PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpMonths Then
                        'Changed payment frequency from Annual payment to instalment payment so allow payment to be deleted & re-created
                        vMinDeleteDate = CDate(pDeleteFromDate)
                      End If
                    End If
                  ElseIf IsUpdateAfterRenewal(pCreationReason, CDate(pScheduleStartDate), CDate(NextPaymentDue)) AndAlso (ProportionalBalanceSetting And ProportionalBalanceConfigSettings.pbcsExistingPF) = ProportionalBalanceConfigSettings.pbcsExistingPF Then
                    If Balance > RenewalAmount AndAlso mvClassFields.Item(PaymentPlanFields.ofBalance).ValueChanged = True Then
                      vMinDeleteDate = CheckOPSMinDeleteDate(pDeleteFromDate, pDeleteToDate, vMinDeleteDate)
                    End If
                  End If
                End If
              Else
                Dim vNextPayDue As String = NextPaymentDue
                If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance AndAlso IsUpdateAfterRenewal(pCreationReason, CDate(pScheduleStartDate), CDate(vNextPayDue)) Then
                  'Payment Plan amended after Renewals has been run but before the RenewalDate
                  'No DD has been added and the next payment is due in the past
                  If DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes Then
                    Dim vClaimDate As String = GetLatestDueOPS(RenewalDate).ClaimDate
                    If vClaimDate.Length > 0 AndAlso CDate(vClaimDate) > vMinDeleteDate Then
                      vMinDeleteDate = CDate(vClaimDate).AddDays(1)   'Want to keep this last record so add 1 day to claim date
                    End If
                  End If
                End If
              End If
              If vMinDeleteDate > CDate(pDeleteFromDate) Then pDeleteFromDate = vMinDeleteDate.ToString(CAREDateFormat)
            End If

            'Check for PaymentFrequency change
            'For Payment Plan Maintnance when the PaymentFrequency has changed, may need to re-create the schedule from the dates of the original payment schedule
            'But must ensure that if a payment is due before this new date and can be claimed after, it will get excluded
            If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance AndAlso mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged Then
              Dim vNewChangeDate As Date = GetNextInstalmentDueDate(CDate(pScheduleStartDate))
              If vNewChangeDate > CDate(pDeleteFromDate) Then pDeleteFromDate = vNewChangeDate.ToString(CAREDateFormat)
              If vNewChangeDate > CDate(pScheduleStartDate) Then
                pScheduleStartDate = vNewChangeDate.ToString(CAREDateFormat)
                pFreqChangedUseOPSDueOnly = True
              End If
            End If
        End Select

        While CDate(pDeleteToDate) < CDate(pDeleteFromDate)
          '# While the vDeleteToDate is before the schedule start date then use CalculateRenewalDate to Roll it Forward
          pDeleteToDate = CalculateRenewalDate(pDeleteToDate, True)
        End While

        Dim vDeleteIncludeDueDate As Boolean = False
        If (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) And mvAutoPaymentCreated = False And mvProcessRenewal = False Then
          If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrChangeMembershipType AndAlso
          CMTProportionBalance = CMTProportionBalanceTypes.cmtFrequencyAmounts AndAlso AutoPaymentClaimDateMethod = AutoPaymentClaimDateMethods.apcdmDates Then
            vDeleteIncludeDueDate = True
          ElseIf pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Then
            If IsUpdateAfterRenewal(pCreationReason, CDate(pScheduleStartDate), CDate(NextPaymentDue)) = False AndAlso
            (CDate(pScheduleStartDate) > Today) AndAlso (RenewalPending = True AndAlso CDate(pScheduleStartDate) = CDate(RenewalDate)) Then
              vDeleteIncludeDueDate = True
            End If
          End If
        End If

        'Build delete statement
        'NOTE - Any change needs to be made to both parts of this
        '# If this is a DD or CCCA and the AutoPayment has not just been created and we are not running Renewals
        If (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) And mvAutoPaymentCreated = False And mvProcessRenewal = False Then
          '# Delete where claim_date is between the Schedule Start Date and vDeleteToDate
          '# Or the claim_date is null and the due date is between the Schedule Start Date and the vDeleteToDate
          '# and the status is 'Due' and the creation reason was not Financial Adjustment or In-Advance Payment
          vSQL = "order_number = " & mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue
          vSQL = vSQL & " AND ((claim_date" & mvEnv.Connection.SQLLiteral("BETWEEN", CDBField.FieldTypes.cftDate, pDeleteFromDate) & mvEnv.Connection.SQLLiteral(" AND ", CDBField.FieldTypes.cftDate, pDeleteToDate)
          If vDeleteIncludeDueDate Then
            'BR14607: Cover the scenarios where the claim date
            'a. for one OPS record is same as the due date of next OPS record and only the next OPS is required to be deleted
            'b. for one OPS record is greater than the due date of next OPS record and only the next OPS is required to be deleted
            'c. are same as due dates
            vSQL = vSQL & " AND due_date" & mvEnv.Connection.SQLLiteral(">= ", CDBField.FieldTypes.cftDate, pDeleteFromDate)
          End If
          vSQL = vSQL & ") OR (claim_date IS NULL AND due_date" & mvEnv.Connection.SQLLiteral("BETWEEN", CDBField.FieldTypes.cftDate, pDeleteFromDate) & mvEnv.Connection.SQLLiteral(" AND ", CDBField.FieldTypes.cftDate, pDeleteToDate) & "))"
          vSQL = vSQL & " AND scheduled_payment_status = 'D' AND schedule_creation_reason NOT IN ('FA','AP')" ' & mvEnv.Connection.DBLike("FA,AP")
        Else
          '# Delete where the due date is between the Schedule Start Date and the vDeleteToDate
          '# and the status is 'Due' and the creation reason was not Financial Adjustment or In-Advance Payment
          With vFields
            .Add("order_number", CDBField.FieldTypes.cftLong, mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue)
            .Add("due_date", CDBField.FieldTypes.cftDate, pDeleteFromDate, CDBField.FieldWhereOperators.fwoBetweenFrom)
            .Add("due_date2", CDBField.FieldTypes.cftDate, pDeleteToDate, CDBField.FieldWhereOperators.fwoBetweenTo)
            .Add("scheduled_payment_status", CDBField.FieldTypes.cftCharacter, "D")
            .Add("schedule_creation_reason", CDBField.FieldTypes.cftCharacter, "'FA','AP'", CDBField.FieldWhereOperators.fwoNotIn)
          End With
          vSQL = mvEnv.Connection.WhereClause(vFields)
        End If
        vSQL = vSQL & " AND scheduled_payment_number NOT IN (SELECT oph.scheduled_payment_number"
        vSQL = vSQL & " FROM order_payment_history oph WHERE oph.order_number = " & PlanNumber
        vSQL = vSQL & " AND oph.scheduled_payment_number IS NOT NULL)"
        'This bit is for  Data Import to make sure that does not error because of the reason that it did not delete anything in test mode
        If mvEnv.Connection.DatabaseAccessMode = CDBConnection.cdbDataAccessMode.damTest And (pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes And pExpBalance = 0 And mvClassFields(PaymentPlanFields.ofAmount).Value.Length > 0) Then
          If mvEnv.Connection.GetCount("order_payment_schedule", Nothing, vSQL) > 0 Then
            pOPSToDelete = True
          End If
        End If
        vSQL = "DELETE FROM order_payment_schedule WHERE " & vSQL
        mvEnv.Connection.ExecuteSQL(vSQL, CDBConnection.cdbExecuteConstants.sqlIgnoreError)
      End If

    End Sub

    Private Sub CheckOPSForRegenerate(ByVal pCreationReason As OrderPaymentSchedule.OrderPaymentScheduleCreationReasons, ByVal pScheduleStartDate As String, ByRef pDeleteFromDate As String, ByVal pDeleteToDate As String, ByVal pRenewalDate As String, ByRef pNextPayDue As String, ByVal pUseEffectiveDate As Boolean, ByRef pSumAmountDue As Double)
      'This is ONLY to be called from RegenerateScheduledPayments and is used to handle OPS data that should have been deleted but was unable to do so
      'We may need to create new OPS to replace the ones not deleted
      'pDeleteFromDate, pNextPayDue & pSumAmountDue must be ByRef as their values may change and those changes need to be reflected in RegenerateScheduledPayments
      'All other parameters must be ByVal
      Dim vOPS As OrderPaymentSchedule
      Dim vPPD As PaymentPlanDetail
      Dim vAddOPS As Boolean
      Dim vAutoPayStartDate As String
      Dim vClaimDate As String
      Dim vCount As Integer
      Dim vDate As String
      Dim vFreqAmount As Double
      Dim vNPDDate As String
      Dim vOldBalance As Double
      Dim vPayAmount As Double
      Dim vRemaining As Double
      Dim vUpdateOPS As Boolean

      vAddOPS = False
      vUpdateOPS = False
      If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        vAutoPayStartDate = DirectDebit.StartDate
      Else
        vAutoPayStartDate = CreditCardAuthority.StartDate
      End If

      Dim vLogPPChanges As Boolean = False
      If mvPaymentPlanChange IsNot Nothing AndAlso mvPaymentPlanChange.ChangeRecordsRequired Then vLogPPChanges = True

      'The deletion of OPS has used an EffectiveDate
      'This means that pScheduleStartDate is the original date and pDeleteFromDate is the date the deletion was from
      If pUseEffectiveDate = True And RenewalPending = True Then 'Only do the following processing if RenewalPending is set
        '# If PP Maint has added a new DD/CCCA,
        '# or we have changed Payment Frequency and there is already a DD/CCCA
        '# or we have changed the Frequency Amount
        '# and there are some missed payments (vNextPayDue < Today And PPRenewalDate > Today And Balance > 0) and not Balance increased from zero ??
        'then we need to claim any payments due before Today that have not been paid
        '(Note: This is also in RegenerateScheduledPayments)
        vAddOPS = False
        vUpdateOPS = False
        If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance And (((DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) And ((mvAutoPaymentCreated = True) Or (mvClassFields(PaymentPlanFields.ofPaymentFrequency).ValueChanged = True))) Or (CDate(pNextPayDue) < CDate(TodaysDate()) And CDate(TodaysDate()) < CDate(RenewalDate) And Balance > 0 And mvClassFields(PaymentPlanFields.ofFrequencyAmount).ValueChanged)) And Not (Val(mvClassFields(PaymentPlanFields.ofBalance).SetValue) = 0 And mvClassFields(PaymentPlanFields.ofBalance).DoubleValue > 0) Then
          '# If the arrears claim method is NEXT_CLAIM or EVEN_SPREAD then
          Select Case mvEnv.GetConfig("fp_arrears_claim_method_create")
            Case "NEXT_CLAIM", "EVEN_SPREAD"
              '# If the ScheduleStartDate is after vNextPayDue then set it back to vNextPayDue
              'Want to include any payments due before today but not paid
              If (CDate(pDeleteFromDate) > CDate(pNextPayDue)) And (CDate(pScheduleStartDate) = CDate(pNextPayDue)) Then
                vUpdateOPS = True
              End If
          End Select
        End If

        If vUpdateOPS Then
          For Each vOPS In mvScheduledPayments
            vDate = If(IsDate(vOPS.ClaimDate), vOPS.ClaimDate, vOPS.DueDate)
            If (CDate(vDate) >= CDate(pScheduleStartDate)) And (CDate(vDate) <= CDate(pDeleteFromDate)) Then
              pSumAmountDue = FixTwoPlaces(pSumAmountDue - vOPS.AmountOutstanding)
              With vOPS
                .Update(.DueDate, .AmountDue, 0, .ExpectedBalance, .ClaimDate, .RevisedAmount)
              End With
              vAddOPS = True
            End If
          Next vOPS

          If vAddOPS Then
            'Calculate the "old" balance (PPD lines not including lines with EffectiveDate set)
            vOldBalance = 0
            For Each vPPD In mvDetails
              If IsDate(vPPD.EffectiveDate) Then
                If CDate(vPPD.EffectiveDate) < CDate(pDeleteFromDate) Then
                  vOldBalance = FixTwoPlaces(vOldBalance + vPPD.Balance)
                End If
              Else
                vOldBalance = FixTwoPlaces(vOldBalance + vPPD.Balance)
              End If
            Next vPPD
            'Calculate the PaymentFrequency to use
            vFreqAmount = FixTwoPlaces(vOldBalance / PaymentFrequencyFrequency)
            If vFreqAmount * PaymentFrequencyFrequency < vOldBalance Then vFreqAmount = vFreqAmount + 0.01

            'Get the NPDDate to the beginning
            vNPDDate = pRenewalDate
            While CDate(vNPDDate) > CDate(pScheduleStartDate)
              If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                vNPDDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -PaymentFrequencyInterval, CDate(vNPDDate)))
              Else
                vNPDDate = AddMonths(pRenewalDate, vNPDDate, -PaymentFrequencyInterval)
              End If
            End While
            If CDate(vNPDDate) < CDate(pScheduleStartDate) Then
              'Just in case
              If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                vNPDDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, PaymentFrequencyInterval, CDate(vNPDDate)))
              Else
                vNPDDate = AddMonths(pRenewalDate, vNPDDate, PaymentFrequencyInterval)
              End If
            End If

            vCount = 0
            vPayAmount = 0
            vRemaining = vOldBalance
            While (CDate(vNPDDate) >= CDate(pScheduleStartDate)) And (CDate(vNPDDate) <= CDate(pDeleteFromDate))
              vClaimDate = FindNextClaimDate(vNPDDate)
              If CDate(vClaimDate) < CDate(vAutoPayStartDate) Then
                Select Case mvEnv.GetConfig("fp_arrears_claim_method_create")
                  Case "NEXT_CLAIM"
                    vClaimDate = ""
                    vPayAmount = vPayAmount + vFreqAmount
                  Case "EVEN_SPREAD"
                    vClaimDate = ""
                    vFreqAmount = FixTwoPlaces(vOldBalance / (PaymentFrequencyFrequency - (vCount + 1)))
                    If vFreqAmount * (PaymentFrequencyFrequency - (vCount + 1)) < vOldBalance Then vFreqAmount = vFreqAmount + 0.01
                End Select
              End If
              If vClaimDate.Length > 0 Then
                If CDate(vClaimDate) >= CDate(pDeleteFromDate) Then
                  'This payment is not required so do not create
                  vClaimDate = ""
                End If
              End If
              If vClaimDate.Length > 0 Then
                vPayAmount = FixTwoPlaces(vPayAmount + vFreqAmount)
                If vPayAmount > vRemaining Then
                  vPayAmount = vRemaining
                End If
                vOPS = New OrderPaymentSchedule
                vOPS.Init(mvEnv)
                vOPS.Create(PlanNumber, vNPDDate, vPayAmount, vPayAmount, If(vCount = 1, 0, (vFreqAmount * vCount)), pCreationReason, vClaimDate)
                mvScheduledPayments.Add(vOPS)
                vRemaining = FixTwoPlaces(vRemaining - vPayAmount)
                pSumAmountDue = FixTwoPlaces(pSumAmountDue + vPayAmount)
                vPayAmount = 0
              End If
              If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                vNPDDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, PaymentFrequencyInterval, CDate(vNPDDate)))
              Else
                vNPDDate = AddMonths(pRenewalDate, vNPDDate, PaymentFrequencyInterval)
              End If
              vCount = vCount + 1
            End While
          End If
        End If
      End If

      'For Payment Plan Maintenance
      '(1) Adding a new DD/CCA, or (2) Changed Balance on Payment Plan paid by SO
      'OPS records with a status of ('Due' and creation reason of 'Financial Adjustment') or (status of 'PartPaid' with new DD/CCA / changed Pay Freq)
      'will not have been deleted (above) so may need to reset the AmountOutstanding
      'to zero so that it can be included under the DD/CCA/SO - leave creation reason as it is to prevent deletion
      'I.e. If the payment had not been made then it would have been deleted and incorporated within the schedule
      'as a missed payment, but because the payment was made & reversed this has not happened so need to do this
      vUpdateOPS = False
      If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance Then
        If ((DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) And (mvAutoPaymentCreated = True Or mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged)) Then
          'Adding a new DD/CCA or changed Payment Frequency
          Select Case mvEnv.GetConfig("fp_arrears_claim_method_create")
            Case "NEXT_CLAIM", "EVEN_SPREAD"
              'Nothing to do if config set to 'NONE' as missed payments will just be recreated anyway
              For Each vOPS In mvScheduledPayments
                vUpdateOPS = False
                vDate = If(vOPS.ClaimDate.Length > 0, vOPS.ClaimDate, vOPS.DueDate)
                If mvWriteOffMissedPayments = False OrElse (mvWriteOffMissedPayments = True AndAlso CDate(vDate) >= CDate(pScheduleStartDate)) Then
                  If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid Then
                    vUpdateOPS = True
                  ElseIf vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue And mvAutoPaymentCreated = True Then
                    If vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrFinancialAdjustments Then
                      vUpdateOPS = True
                    ElseIf Len(vOPS.ClaimDate) > 0 Then
                      If PaymentNumber = 0 And (mvClassFields.Item(PaymentPlanFields.ofDirectDebit).SetValue = "C" Or mvClassFields.Item(PaymentPlanFields.ofCreditCard).SetValue = "C") And (vOPS.ScheduleCreationReason <> OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance) Then
                        'Previous DD/CCA was cancelled before any payments were made
                        'Clear the ClaimDate and reset key dates
                        vUpdateOPS = True
                        If (CDate(vOPS.ClaimDate) >= CDate(pScheduleStartDate)) And (CDate(vOPS.ClaimDate) <= CDate(pDeleteToDate)) Then
                          pNextPayDue = vOPS.DueDate
                          If CDate(pScheduleStartDate) < CDate(TodaysDate()) Then pScheduleStartDate = vOPS.DueDate
                          vOPS.SetClaimDate("") 'Clear the existing ClaimDate
                        End If
                      End If
                    End If
                  End If
                End If
                If vUpdateOPS Then
                  'vDate = If(vOPS.ClaimDate.Length > 0, vOPS.ClaimDate, vOPS.DueDate)
                  If (CDate(vDate) >= CDate(pDeleteFromDate)) And (CDate(vDate) <= CDate(pDeleteToDate)) Then
                    Dim vUpdateAmountDue As Double = pSumAmountDue
                    pSumAmountDue = FixTwoPlaces(pSumAmountDue - vOPS.AmountOutstanding) 'Reduce vSumAmountDue
                    If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid Then vOPS.PaymentAmount = (vOPS.AmountDue - vOPS.AmountOutstanding)
                    If vUpdateAmountDue.Equals(vOPS.AmountOutstanding) AndAlso pSumAmountDue.Equals(0) AndAlso mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged AndAlso vOPS.ScheduleCreationReason.Equals(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrFinancialAdjustments) Then
                      vOPS.Update(vOPS.DueDate, pSumAmountDue, 0, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount) 'Update the OPS to show that the payment is now fully paid.
                    Else
                      vOPS.Update(vOPS.DueDate, vOPS.AmountDue, 0, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount) 'Update the OPS to show that the payment is now fully paid.
                    End If
                    'vOPS.Save pAmendedBy, pAudit
                  End If
                End If
              Next vOPS
          End Select

        ElseIf (StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes And mvClassFields(PaymentPlanFields.ofBalance).ValueChanged = True And mvClassFields(PaymentPlanFields.ofBalance).DoubleValue > 0) Then
          'Changed Balance on Payment Plan paid by SO
          For Each vOPS In mvScheduledPayments
            If ((vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue And vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrFinancialAdjustments) Or vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid) Then
              vDate = If(vOPS.ClaimDate.Length > 0, vOPS.ClaimDate, vOPS.DueDate)
              If (CDate(vDate) >= CDate(pScheduleStartDate)) And (CDate(vDate) <= CDate(pDeleteToDate)) Then
                pSumAmountDue = FixTwoPlaces(pSumAmountDue - vOPS.AmountOutstanding) 'Reduce vSumAmountDue
                vOPS.Update(vOPS.DueDate, 0, 0, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount) 'Update the OPS to show that the payment is now fully paid.
              End If
            End If
          Next vOPS
        End If

        If (((DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes OrElse CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) AndAlso (mvAutoPaymentCreated = True OrElse mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged))) _
        OrElse (mvAutoPayment = False AndAlso mvAutoPaymentCreated = False AndAlso mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged = True) Then
          'Adding a DD/CCA or changing PaymentFrequency
          'If a Provisional OPS was paid & reversed before R&R it will not have been deleted but we do need to treat it as though it was so that the OPS is created correctly.
          For Each vOPS In mvScheduledPayments
            vUpdateOPS = False
            vDate = If(vOPS.ClaimDate.Length > 0, vOPS.ClaimDate, vOPS.DueDate)
            If (CDate(vDate) >= CDate(pScheduleStartDate)) AndAlso (CDate(vDate) >= CDate(pDeleteFromDate)) AndAlso (CDate(vDate) <= CDate(pDeleteToDate)) Then
              'If a Provisional OPS was paid & reversed before R&R, the CreationReason is not set to opscrFinancialAdjustment
              If ((vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrRenewalsReminders OrElse
                  vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance) OrElse
                    (vLogPPChanges = True AndAlso pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance)) AndAlso
                  vOPS.AmountOutstanding > 0 Then
                'Only update the OPS if it has payments
                vUpdateOPS = vOPS.HasPayments()
              ElseIf vOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrFinancialAdjustments _
                         And pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance _
                         And vOPS.AmountOutstanding > 0 Then
                vUpdateOPS = vOPS.HasPayments()
              End If
            End If
            If vUpdateOPS Then
              Dim vUpdateAmountDue As Double = pSumAmountDue
              pSumAmountDue = FixTwoPlaces(pSumAmountDue - vOPS.AmountOutstanding) 'Reduce vSumAmountDue
              If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid Then vOPS.PaymentAmount = (vOPS.AmountDue - vOPS.AmountOutstanding)
              If vUpdateAmountDue.Equals(vOPS.AmountOutstanding) AndAlso pSumAmountDue.Equals(0) AndAlso mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged AndAlso vOPS.ScheduleCreationReason.Equals(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrFinancialAdjustments) Then
                vOPS.Update(vOPS.DueDate, pSumAmountDue, 0, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount) 'Update the OPS to show that the payment is now fully paid.
              Else
                vOPS.Update(vOPS.DueDate, vOPS.AmountDue, 0, vOPS.ExpectedBalance, vOPS.ClaimDate, vOPS.RevisedAmount) 'Update the OPS to show that the payment is now fully paid.
              End If
            End If
          Next

          If mvAutoPayment = True AndAlso mvAutoPaymentCreated = False AndAlso mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged = True Then
            Dim vNewChangeDate As Date = GetNextInstalmentDueDate(CDate(pScheduleStartDate))
            If vNewChangeDate > CDate(pDeleteFromDate) Then pDeleteFromDate = vNewChangeDate.ToString(CAREDateFormat)
            If vNewChangeDate > CDate(pScheduleStartDate) Then
              pScheduleStartDate = vNewChangeDate.ToString(CAREDateFormat)
              pDeleteFromDate = pScheduleStartDate
            End If
          End If
        End If
      End If

      If pUseEffectiveDate Then
        'Ensure that the date used to re-create OPS data is the first DueDate before pDeleteFromDate as long as the ClaimDate is after pDeleteFromDate
        vNPDDate = pRenewalDate
        While (CDate(vNPDDate) > CDate(pDeleteFromDate))
          If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
            vNPDDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Day, -PaymentFrequencyInterval, CDate(vNPDDate)))
          Else
            vNPDDate = AddMonths(pRenewalDate, vNPDDate, -PaymentFrequencyInterval)
          End If
        End While
        If CDate(vNPDDate) < CDate(pDeleteFromDate) Then
          vClaimDate = FindNextClaimDate(vNPDDate)
          If IsDate(vClaimDate) Then
            If (CDate(vClaimDate) > CDate(pDeleteFromDate)) And (CDate(vClaimDate) = CDate(FindNextClaimDate(pDeleteFromDate))) Then
              'Set pDeleteFromDate to be vNPDDate (this is to prevent OPS creation from missing this payment dues to the date being before pDeleteFromDate)
              pDeleteFromDate = vNPDDate
            End If
          End If
        End If
      End If

    End Sub

    Public Sub CancelSubscription(ByVal pSubscriptionNumber As Integer, ByVal pDetailLineNumber As Integer, ByVal pCancellationReason As String, Optional ByRef pCancellationSource As String = "", Optional ByVal pDeleteDetailLine As Boolean = True)
      Dim vSub As New Subscription

      vSub.Init(mvEnv, pSubscriptionNumber)

      mvEnv.Connection.StartTransaction()

      If vSub.Existing Then
        vSub.Cancel(pCancellationReason, "", pCancellationSource)
        vSub.SaveChanges()
      End If

      If pDeleteDetailLine Then
        'Please write new code here to delete Detail Line as well. Also Payment Plan Balance etc needs updating

      End If
      mvEnv.Connection.CommitTransaction()
    End Sub

    Private Function CalculateProRataNumberPaymentsFromOPS(ByVal pStartDate As String, ByVal pRenewalDate As String) As Integer
      Dim vDate As String
      Dim vNumberOfPayments As Integer

      For Each vOPS As OrderPaymentSchedule In Me.ScheduledPayments()
        If vOPS.AmountOutstanding > 0 And vOPS.ScheduledPaymentStatus <> OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsProvisional Then
          vDate = If(IsDate(vOPS.ClaimDate), vOPS.ClaimDate, vOPS.DueDate)
          If (CDate(vDate) >= CDate(pStartDate)) And (CDate(vDate) < CDate(pRenewalDate)) Then
            vNumberOfPayments = vNumberOfPayments + 1
          End If
        End If
      Next vOPS
      Return vNumberOfPayments
    End Function

    Private Function SetRenewalOPSAmountDue(ByVal pDueDate As String, ByVal pClaimDate As String, ByVal pAmountDue As Double) As Double
      'When using effective dates, R&R may need to create OPS with lower amounts
      Dim vPPD As PaymentPlanDetail
      Dim vAmountDue As Double
      Dim vDate As String = ""
      Dim vEffectiveDate As String = ""
      Dim vFreqAmount As Double
      Dim vInclArrears As Boolean
      Dim vNoPayments As Integer
      Dim vSumPPDBalance As Double

      vAmountDue = pAmountDue
      If (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) Then
        vNoPayments = PaymentFrequencyFrequency
        Select Case mvEnv.GetConfig("fp_arrears_claim_method_renew")
          Case "FIRST_CLAIM", "NONE"
            vInclArrears = False
          Case Else
            vInclArrears = True
        End Select

        Dim vVATRate As VatRate
        Dim vPayerVATCategory As String = Payer.VATCategory
        For Each vPPD In Details
          vVATRate = mvEnv.VATRate(vPPD.Product.ProductVatCategory, vPayerVATCategory)
          If IsDate(vPPD.EffectiveDate) Then
            vEffectiveDate = vPPD.EffectiveDate
            If CDate(vPPD.EffectiveDate) > CDate(RenewalDate) Then
              'Do Nothing
            Else
              vSumPPDBalance += vPPD.Price(CDate(TodaysDate()), vVATRate)
              If vInclArrears Then vSumPPDBalance = vSumPPDBalance + vPPD.Arrears
            End If
          Else
            vSumPPDBalance += vPPD.Price(CDate(TodaysDate()), vVATRate)
            If vInclArrears Then vSumPPDBalance = vSumPPDBalance + vPPD.Arrears
          End If
        Next vPPD
        vSumPPDBalance = FixTwoPlaces(vSumPPDBalance)

        If IsDate(vEffectiveDate) Then
          vDate = If(IsDate(pClaimDate), pClaimDate, pDueDate)
          If CDate(vDate) < CDate(vEffectiveDate) Then
            If vSumPPDBalance > 0 Then
              vFreqAmount = CalcFrequencyAmount(vSumPPDBalance, vNoPayments)
              If FixTwoPlaces(vFreqAmount * vNoPayments) < vSumPPDBalance Then vFreqAmount = vFreqAmount + 0.01
            End If
            vAmountDue = vFreqAmount
          End If
        End If
      End If
      SetRenewalOPSAmountDue = vAmountDue
    End Function

    Private Function GetOPSRenewalsBalance(ByVal pScheduleStartDate As String) As Double
      'Only used by R&R when Effective dates are being used and we need just this years cost of the PPDetail lines
      Dim vPPD As PaymentPlanDetail
      Dim vBalance As Double

      Dim vVATRate As VatRate
      Dim vPayerVATCategory As String = Payer.VATCategory
      For Each vPPD In Details
        vVATRate = mvEnv.VATRate(vPPD.Product.ProductVatCategory, vPayerVATCategory)
        If IsDate(vPPD.EffectiveDate) Then
          If CDate(vPPD.EffectiveDate) >= CDate(pScheduleStartDate) Then
            vBalance = FixTwoPlaces(vBalance + vPPD.Balance)
          Else
            vBalance = FixTwoPlaces(vBalance + vPPD.Price(CDate(TodaysDate()), vVATRate))
          End If
        Else
          vBalance = FixTwoPlaces(vBalance + vPPD.Price(CDate(TodaysDate()), vVATRate))
        End If
      Next vPPD

      GetOPSRenewalsBalance = vBalance

    End Function

    Public Sub WSProcessIncentives(ByVal pEnv As CDBEnvironment, ByVal pSource As Source, ByVal pTransaction As TraderTransaction, ByVal pPayerContact As Contact, ByVal pMemberContact As Contact, ByVal pJoined As String, ByVal pReasonForDespatch As String, ByVal pNewMembership As Boolean, ByVal pAutoPayReasonForDespatch As String, ByRef pPayPlanBalance As Double, ByRef pPayPlanRenewalAmount As Double, Optional ByVal pUpdatePPDSource As Boolean = False, Optional ByVal pParams As CDBParameters = Nothing, Optional ByVal pAddIncentiveToPPD As Boolean = True, Optional ByVal pFromTrader As Boolean = False, Optional ByVal pAdditionalParams As CDBParameters = Nothing)
      'Used by Web Services to process Incentives (just like Rich Client Trader)
      Dim vDR As CDBDataRow
      Dim vDS As New VBDataSelection
      Dim vDT As CDBDataTable
      Dim vParams As New CDBParameters
      Dim vIncentiveType As String
      Dim vVATCategory As String
      Dim vEnclosure As Enclosure
      Dim vNewRenewalAmount As Double
      Dim vIncentiveSequence() As String 'Optional incentive sequence numbers
      Dim vIncentiveQuantity() As String 'Optional incentive quantities
      Dim vIndex As Integer
      Dim vUsedIncentive As CDBParameters

      If pSource.IncentiveScheme.Length > 0 And pSource.HistoryOnly = False Then
        vVATCategory = pPayerContact.VATCategory
        If Len(vVATCategory) = 0 Then vVATCategory = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDefConVatCat)

        If pParams Is Nothing Then pParams = New CDBParameters

        vParams = New CDBParameters
        With vParams
          .Add("Source", CDBField.FieldTypes.cftCharacter, pSource.SourceCode)
          .Add("ReasonForDespatch", CDBField.FieldTypes.cftCharacter, pReasonForDespatch)
          If pAutoPayReasonForDespatch.Length > 0 Then .Add("PayMethodReason", CDBField.FieldTypes.cftCharacter, pAutoPayReasonForDespatch)
          .Add("VatCategory", CDBField.FieldTypes.cftCharacter, vVATCategory)
          '.Add "basic", cftCharacter, "Y"
          '.Add "type", cftCharacter, "I"      'Remove this parameter once all incentives are supported
        End With
        vDS = New VBDataSelection
        vDS.Init(pEnv, DataSelection.DataSelectionTypes.dstIncentives, vParams, DataSelection.DataSelectionListType.dsltUser, DataSelection.DataSelectionUsages.dsuWEBServices)
        vDT = vDS.DataTable
        'Only continue if there are incentives that may be applied
        If vDT.Rows.Count() > 0 Then
          Dim vAppType As TraderApplication.ApplicationType
          Dim vConversionShowPPD As Boolean
          If pFromTrader AndAlso pAdditionalParams IsNot Nothing AndAlso pAdditionalParams.Exists("AppType") Then
            vAppType = CType(pAdditionalParams("AppType").IntegerValue, TraderApplication.ApplicationType)
            vConversionShowPPD = pAdditionalParams("ConversionShowPPD").Bool
          End If
          If pFromTrader AndAlso vAppType = TraderApplication.ApplicationType.atConversion AndAlso vConversionShowPPD = False Then
            'BR15089: Get the detail lines from payment plan.
            If pTransaction.TraderPPDLines.Count = 0 Then pTransaction.TraderPPDLines.AddDetailLinesFromPaymentPlan(Me)
          ElseIf pParams.ParameterExists("TransactionType").Value = "MEMC" And pFromTrader Then
            If pParams.Exists("Balance") = False Then pParams.Add("Balance", CDBField.FieldTypes.cftNumeric)
            If pParams.Exists("NewRenewalAmount") = False Then pParams.Add("NewRenewalAmount", CDBField.FieldTypes.cftNumeric)
            pPayPlanBalance = GetMemberBalance(pParams, pTransaction, pParams("PaymentFrequency").Value, vNewRenewalAmount)
            pPayPlanRenewalAmount = vNewRenewalAmount
          End If
          If vAppType = TraderApplication.ApplicationType.atConversion Then
            If pParams.Exists("PPBalance") = False Then pParams.Add("PPBalance", CDBField.FieldTypes.cftNumeric)
          End If
          mvIncentivesGenerated = True
          For Each vDR In vDT.Rows
            vIncentiveType = vDR.Item("IncentiveType")
            If vIncentiveType = "I" Then
              If Me.FixedRenewalCycle Then
                RaiseError(DataAccessErrors.daeCannotUseInitialPeriodIncentives)
              End If
              If mvExisting And (Me.TermUnits = OrderTermUnits.otuMonthly Or Me.TermUnits = OrderTermUnits.otuWeekly Or Me.MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfLifeTerm Or Me.ContinuousRenewals) Then
                RaiseError(DataAccessErrors.daeCannotUseInitialPeriodIncentivesAtConversion)
              End If
            End If
            If (vIncentiveType = "I" Or vIncentiveType = "X") And vDR.BoolItem("Basic") Then
              mvIgnoreProductAndRate = vIncentiveType = "I" AndAlso vDR.BoolItem("IgnoreProductAndRate")
              'Only I & X-type incentives are actually added to the payment plan
              'Automatically add any basic I and/or X-type incentives
              If pAddIncentiveToPPD Then WSAddIncentiveToPPD(pEnv, pTransaction, pPayerContact, pMemberContact, vDR, PlanNumber, pSource.SourceCode, pJoined, pNewMembership, pPayPlanBalance, pPayPlanRenewalAmount, pParams, pUpdatePPDSource)
            End If
          Next vDR
          'Loop thru incentives adding each basic P-type incentive to the Enclosures collection
          mvEnclosures = New Collection
          For Each vDR In vDT.Rows
            With vDR
              If .BoolItem("Basic") And .Item("IncentiveType") = "P" Then
                vEnclosure = New Enclosure
                vEnclosure.InitDetails(mvEnv, If(.Item("ForWhom") = "M", pMemberContact.ContactNumber, pPayerContact.ContactNumber), .Item("Product"), .LongItem("Quantity"), .Item("ThankYouLetter"))
                mvEnclosures.Add(vEnclosure)
              End If
            End With
          Next vDR

          'Replaced GetIncentiveSelection with following
          If Not pTransaction.IncentivesTable Is Nothing Then
            For Each vDR In pTransaction.IncentivesTable.Rows
              With vDR
                'The chosen optional incentives will have a quantity > zero, so ignore any that have a quantity of zero
                If .LongItem("Quantity") > 0 Then
                  Select Case .Item("IncentiveType")
                    Case "P"
                      vEnclosure = New Enclosure
                      vEnclosure.InitDetails(mvEnv, If(.Item("ForWhom") = "M", pMemberContact.ContactNumber, pPayerContact.ContactNumber), .Item("Product"), .LongItem("Quantity"), .Item("ThankYouLetter"))
                      mvEnclosures.Add(vEnclosure)
                    Case "I"
                      mvIgnoreProductAndRate = .BoolItem("IgnoreProductAndRate")
                      If pAddIncentiveToPPD Then WSAddIncentiveToPPD(pEnv, pTransaction, pPayerContact, pMemberContact, vDR, PlanNumber, pSource.SourceCode, pJoined, pNewMembership, pPayPlanBalance, pPayPlanRenewalAmount, pParams, pUpdatePPDSource)
                    Case "X"
                      mvIgnoreProductAndRate = False
                      If pAddIncentiveToPPD Then WSAddIncentiveToPPD(pEnv, pTransaction, pPayerContact, pMemberContact, vDR, PlanNumber, pSource.SourceCode, pJoined, pNewMembership, pPayPlanBalance, pPayPlanRenewalAmount, pParams, pUpdatePPDSource)
                  End Select
                End If
              End With
            Next vDR
            pTransaction.IncentivesTable = New CDBDataTable
          ElseIf Len(pParams.ParameterExists("IncentiveSequence").Value) > 0 And Len(pParams.ParameterExists("IncentiveQuantity").Value) > 0 Then
            vIncentiveSequence = Split(pParams("IncentiveSequence").Value, ",")
            vIncentiveQuantity = Split(pParams("IncentiveQuantity").Value, ",")
            If UBound(vIncentiveSequence) = UBound(vIncentiveQuantity) Then
              vUsedIncentive = New CDBParameters
              For vIndex = 0 To UBound(vIncentiveSequence)
                For Each vDR In vDT.Rows
                  With vDR
                    If .BoolItem("Basic") = False And .Item("SequenceNumber") = vIncentiveSequence(vIndex) And IntegerValue(vIncentiveQuantity(vIndex)) > 0 Then
                      If vUsedIncentive.Exists(vIncentiveSequence(vIndex)) = False Then
                        If mvEnv.GetConfigOption("select_multiple_incentives") = False And vUsedIncentive.Count > 0 Then Exit Sub
                        vUsedIncentive.Add(vIncentiveSequence(vIndex), CDBField.FieldTypes.cftCharacter, "1")
                      Else
                        Exit For
                      End If
                      .Item("Quantity") = vIncentiveQuantity(vIndex)
                      Select Case .Item("IncentiveType")
                        Case "P"
                          vEnclosure = New Enclosure
                          vEnclosure.InitDetails(mvEnv, If(.Item("ForWhom") = "M", pMemberContact.ContactNumber, pPayerContact.ContactNumber), .Item("Product"), .LongItem("Quantity"), .Item("ThankYouLetter"))
                          mvEnclosures.Add(vEnclosure)
                        Case "I"
                          mvIgnoreProductAndRate = .BoolItem("IgnoreProductAndRate")
                          If pAddIncentiveToPPD Then WSAddIncentiveToPPD(pEnv, pTransaction, pPayerContact, pMemberContact, vDR, PlanNumber, pSource.SourceCode, pJoined, pNewMembership, pPayPlanBalance, pPayPlanRenewalAmount, pParams, pUpdatePPDSource)
                        Case "X"
                          mvIgnoreProductAndRate = False
                          If pAddIncentiveToPPD Then WSAddIncentiveToPPD(pEnv, pTransaction, pPayerContact, pMemberContact, vDR, PlanNumber, pSource.SourceCode, pJoined, pNewMembership, pPayPlanBalance, pPayPlanRenewalAmount, pParams, pUpdatePPDSource)
                      End Select
                      Exit For
                    End If
                  End With
                Next vDR
              Next
            End If
          End If
        End If
      End If

    End Sub

    Private Sub WSAddIncentiveToPPD(ByVal pEnv As CDBEnvironment, ByVal pTransaction As TraderTransaction, ByVal pPayerContact As Contact, ByVal pMemberContact As Contact, ByVal pDR As CDBDataRow, ByVal pPlanNumber As Integer, ByVal pSource As String, ByVal pJoined As String, ByVal pNewMembership As Boolean, ByRef pPayPlanBalance As Double, ByRef pPayPlanRenewalAmount As Double, ByVal pParams As CDBParameters, Optional ByVal pUpdatePPDSource As Boolean = False)
      'pUpdatePPDSource used to determine whether 'I'-type incentive updates the PPD source
      Dim vSpecialInitialPeriod As Boolean
      Dim vOptionTitle As String
      Dim vLineType As String
      Dim vQty As Integer
      Dim vPrice As Double
      Dim vIgnore As Boolean
      Dim vPPD As PaymentPlanDetail
      Dim vContactNumber As Integer
      Dim vAddressNumber As Integer
      Dim vSource As String
      Dim vAppType As TraderApplication.ApplicationType

      vSpecialInitialPeriod = pDR.Item("IncentiveType") = "I"
      If vSpecialInitialPeriod Then vIgnore = pDR.BoolItem("IgnoreProductAndRate")
      vAppType = CType(pParams.ParameterExists("AppType").IntegerValue, TraderApplication.ApplicationType)

      Select Case pDR.Item("ReasonForDespatch")
        Case pEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCCReason)
          vOptionTitle = (ProjectText.String15663) 'Optional Credit Card Authority Incentives
          vLineType = "C"
        Case pEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDDReason)
          vOptionTitle = (ProjectText.String15664) 'Optional Direct Debit Incentives
          vLineType = "D"
        Case pEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlOReason)
          vOptionTitle = (ProjectText.String15665) 'Optional Order Incentives
          vLineType = "O"
        Case pEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlSOReason)
          vOptionTitle = (ProjectText.String15666) 'Optional Standing Order Incentives
          vLineType = "S"
        Case Else
          vOptionTitle = (ProjectText.String15667) 'Optional Membership Incentives
          vLineType = "M"
      End Select
      If pDR.BoolItem("Basic") Then
        vLineType = vLineType & pDR.Item("IncentiveType") & "B"
      Else
        vLineType = vLineType & pDR.Item("IncentiveType") & "O"
      End If

      If Not vSpecialInitialPeriod And pDR.Item("ForWhom") = "M" Then
        vContactNumber = pMemberContact.ContactNumber
        vAddressNumber = pMemberContact.AddressNumber
      Else
        vContactNumber = pPayerContact.ContactNumber
        vAddressNumber = pPayerContact.Address.AddressNumber
      End If

      If Not vIgnore Then
        vQty = If(vSpecialInitialPeriod, 1, IntegerValue(pDR.Item("Quantity")))  'For vSpecialInitialPeriod pDR.Item("Quantity") actually holds the number of months -- see schema for incentive_scheme_products for more info.
        vPrice = pDR.DoubleItem("CurrentPrice")
        'If creating a mem'ship check joined date against price change date
        'and use future price if joined date >= price change date
        If pNewMembership Then
          If DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(pJoined), CDate(pDR.Item("PriceChangeDate"))) <= 0 Then
            vPrice = pDR.DoubleItem("FuturePrice")
          End If
        End If
        If pDR.BoolItem("VatExclusive") Then vPrice = CInt((vPrice + (vPrice * (pDR.DoubleItem("Percentage") / 100))) * 100) / 100
        vPrice = CDbl(FixedFormat(vPrice * vQty))
      End If

      Dim vDespatchMethod As String = ""
      If pDR.Item("DespatchMethod") IsNot Nothing Then vDespatchMethod = pDR.Item("DespatchMethod")
      If vSpecialInitialPeriod Then
        'Update first line
        vPPD = pTransaction.GetPaymentPlanDetail(1)
        'BR16006: Only raise an error for the detail line being missing where the payment plan and detail line isn't existing or where the PPD Product & Rate aren't set
        'because for new PP's the PP and PPD will not be existing but the PPD.ProductCode and PPD.RateCode will be set
        If Not ((Me.Existing = True AndAlso vPPD.Existing = True) OrElse vPPD.ProductCode.Length > 0 AndAlso vPPD.RateCode.Length > 0) Then RaiseError(DataAccessErrors.daeCannotFindPaymentPlanDetailLine, "1", PlanNumber.ToString) 'If we can't find PPD line 1 then error as we can't continue
        vSource = vPPD.Source
        If pUpdatePPDSource Then vSource = pSource
        If vIgnore = False Then
          pPayPlanBalance = FixTwoPlaces((pPayPlanBalance - vPPD.Balance) + vPrice)
          vPPD.SetPrices()
          pPayPlanRenewalAmount = FixTwoPlaces(pPayPlanRenewalAmount - vPPD.Price(CDate(pJoined), mvEnv.VATRate(vPPD.Product.ProductVatCategory, pPayerContact.VATCategory)))
        End If

        Dim vPPDPrice As Double = vPPD.GrossAmount
        If vPPD.HasPriceInfo = False OrElse vIgnore = False Then vPPDPrice = vPrice
        vPPD.Update(vContactNumber, vAddressNumber, CDbl(pDR.Item("Quantity")), If(vIgnore, vPPD.Balance, vPrice), If(vIgnore, vPPD.Amount, ""), "", If(vIgnore, "", pDR.Item("Product")), If(vIgnore, "", pDR.Item("Rate")), vDespatchMethod, vSource, "", "", (pDR.Item("Subscription") = "Y"), pDR.Item("ForWhom"), vLineType, pDR.Item("ProductDesc"), mvIgnoreProductAndRate, If(vIgnore, vPPD.NetFixedAmount, ""))
        Dim vVATRate As VatRate = mvEnv.VATRate(vPPD.Product.ProductVatCategory, pPayerContact.VATCategory)
        vPPD.ProductRate.PaymentPlanDetailPricing.CalculatePricing(vPPDPrice, vPPDPrice, vPPD.ProductRate.VatExclusive, TodaysDate, vVATRate, False)
        vPPD.SetModifierAndPriceData(vPPD.ProductRate.PaymentPlanDetailPricing, vSpecialInitialPeriod)

        'If the product and rate has no values assigned to them then assign incentive rate and value to them
        'BR15284 - Error "cannot insert value NULL into column 'Product' " adding a DD with an I type incentive.
        'We should never ever get to the point where the Product or Rate are not set and was being caused by not finding PPD line 1 in the collection (as it had not been populated)
        'so error as just setting the incentive products/rates is completely the wrong thing to do (SAS 24/02/2012 - BR15089)
        If vPPD.ProductCode.Length = 0 OrElse vPPD.RateCode.Length = 0 Then RaiseError(DataAccessErrors.daeProductInvalid, pDR.Item("Product"))

        If vAppType = TraderApplication.ApplicationType.atConversion Or pParams.ParameterExists("TransactionType").Value = "MEMC" Then
          mvSpecialInitialPeriod = True
        End If
      Else
        'Add a new line
        pPayPlanBalance = FixTwoPlaces(pPayPlanBalance + vPrice)
        vPPD = pTransaction.GetPaymentPlanDetail(pTransaction.TraderPPDLines.Count + 1)
        vPPD.Init(pEnv)
        vPPD.Create(pPlanNumber, 0, vContactNumber, vAddressNumber, pDR.Item("Product"), pDR.Item("Rate"), CDbl(pDR.Item("Quantity")), vPrice, "", 0, vDespatchMethod, If(pDR.Item("IncentiveType") = "P", pDR.Item("ThankYouLetter"), pSource), "", "", "", "C", "", "", (pDR.Item("Subscription") = "Y"), False, pDR.Item("ForWhom"), False, vLineType, pDR.Item("ProductDesc"))
        vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltIncentive
      End If

      If vIgnore = False Then
        pPayPlanRenewalAmount = FixTwoPlaces(pPayPlanRenewalAmount + vPPD.Price(CDate(pJoined), mvEnv.VATRate(vPPD.Product.ProductVatCategory, pPayerContact.VATCategory)))
      End If
    End Sub

    Public Sub SavePaymentPlan(ByRef pParams As CDBParameters, ByRef pTraderTransaction As TraderTransaction, ByRef pResults As CDBParameters, ByVal pAdditionalParams As CDBParameters)
      Dim vReApplyCMT As Boolean = False
      Dim vStartDate As String = ""
      Dim vMemType As String = ""
      Dim vCurrentRenewalDate As String = ""
      Dim vUseCMTMembershipType As Boolean
      If pParams.ParameterExists("TransactionType").Value = "MEMC" Then
        If pTraderTransaction.PaymentPlan.Existing = False AndAlso pParams.ParameterExists("PaymentPlanNumber").IntegerValue > 0 Then pTraderTransaction.PaymentPlan.Init(mvEnv, pParams("PaymentPlanNumber").IntegerValue)
        vUseCMTMembershipType = pParams.Exists("CMT_MembershipType")
        vStartDate = pTraderTransaction.PaymentPlan.CalculateRenewalDate(pTraderTransaction.PaymentPlan.RenewalPeriodEnd, False)
        If IsMultipleCMT Then 'BR15002: Added the new condition (originally changed for BR14937) to identify the Multiple CMT
          If vUseCMTMembershipType Then
            vMemType = pParams("CMT_MembershipType").Value
          Else
            vMemType = pParams("MembershipType").Value
          End If
          vCurrentRenewalDate = pTraderTransaction.PaymentPlan.RenewalDate
        End If
      End If
      ProcessSavePaymentPlan(pParams, pTraderTransaction, pResults, pAdditionalParams, vReApplyCMT)
      If vReApplyCMT Then
        Dim vPP As New PaymentPlan
        vPP.Init(mvEnv, pTraderTransaction.PaymentPlan.PlanNumber)
        pAdditionalParams.Add("NextPaymentDue", vPP.NextPaymentDue)
        vPP.NextPaymentDue = vStartDate
        vPP.RenewalDate = vCurrentRenewalDate
        If vUseCMTMembershipType Then
          pParams("CMT_MembershipType").Value = vMemType
        Else
          pParams("MembershipType").Value = vMemType
        End If
        vPP.SecondCMT = True
        If pParams.ParameterExists("PaymentPlanNumber").IntegerValue > 0 Then pParams.Remove("PaymentPlanNumber")
        pAdditionalParams.Add("OriginalBalance", vPP.Balance)
        vPP.ProcessSavePaymentPlan(pParams, pTraderTransaction, New CDBParameters, pAdditionalParams, False)
      End If
    End Sub

    Private Sub ProcessSavePaymentPlan(ByRef pParams As CDBParameters, ByRef pTraderTransaction As TraderTransaction, ByRef pResults As CDBParameters, ByRef pAdditionalParams As CDBParameters, Optional ByRef pReApplyCMT As Boolean = False)
      'Only to be called from SavePaymentPlan
      'Manipulate the parameters
      Dim vParams As CDBParameters = CheckPayPlanParameterList(pParams)

      'PaymentMethod will already been added before calling this routine
      'Set the correct payment method
      'If vParams.Exists("PaymentMethod") = False Then vParams.Add "PaymentMethod", cftCharacter, GetPayMethodCode(vParams("PPPaymentType").Value)

      Dim vAppType As TraderApplication.ApplicationType
      Dim vConversionShowPPD As Boolean
      Dim vPayPlanConversionMaintenance As Boolean
      If pAdditionalParams.Exists("AppType") Then
        vAppType = CType(pAdditionalParams("AppType").IntegerValue, TraderApplication.ApplicationType)
        vParams.Add("AppType", vAppType)
        vConversionShowPPD = pAdditionalParams("ConversionShowPPD").Bool
        vPayPlanConversionMaintenance = pAdditionalParams("PayPlanConversionMaintenance").Bool
      End If

      Dim vPPUpdateType As PaymentPlanUpdateTypes
      If (vAppType = TraderApplication.ApplicationType.atConversion Or vAppType = TraderApplication.ApplicationType.atMaintenance) Or pParams("TransactionType").Value = "MEMC" Then
        'Amend, Convert Pay Plan or Change Membership Type
        Select Case pParams("CurrentPageType").IntegerValue
          Case TraderPage.TraderPageType.tpCreditCardAuthority
            vPPUpdateType = (vPPUpdateType Or PaymentPlanUpdateTypes.pputAddCreditCardAuthority)
            If (vConversionShowPPD = True Or vPayPlanConversionMaintenance = True) Then 'And mvCovNextPage = 0
              vPPUpdateType = (PaymentPlanUpdateTypes.pputAddCreditCardAuthority Or PaymentPlanUpdateTypes.pputPaymentPlan)
            End If
          Case TraderPage.TraderPageType.tpDirectDebit
            vPPUpdateType = (vPPUpdateType Or PaymentPlanUpdateTypes.pputAddDirectDebit)
            If (vConversionShowPPD = True Or vPayPlanConversionMaintenance = True) Then 'And mvCovNextPage = 0
              vPPUpdateType = (PaymentPlanUpdateTypes.pputAddDirectDebit Or PaymentPlanUpdateTypes.pputPaymentPlan)
            End If
          Case TraderPage.TraderPageType.tpStandingOrder
            vPPUpdateType = (vPPUpdateType Or PaymentPlanUpdateTypes.pputAddStandingOrder)
            If (vConversionShowPPD = True Or vPayPlanConversionMaintenance = True) Then 'And mvCovNextPage = 0
              vPPUpdateType = (PaymentPlanUpdateTypes.pputAddStandingOrder Or PaymentPlanUpdateTypes.pputPaymentPlan)
            End If

          Case TraderPage.TraderPageType.tpPaymentPlanMaintenance
            vPPUpdateType = PaymentPlanUpdateTypes.pputPaymentPlan
            'If ((vAppType = atConversion) And Not (vPayPlanConversionMaintenance = True And pParams.ParameterExists("PayMethod3").Value = "MAINT")) Then
            '  'Converion app and not maintenance only
            '  vPPUpdateType = pputPPMaintenanceConversion
            'End If
          Case TraderPage.TraderPageType.tpPaymentPlanSummary
            vPPUpdateType = (vPPUpdateType Or PaymentPlanUpdateTypes.pputPaymentPlan)
            If ((vAppType = TraderApplication.ApplicationType.atConversion) And Not (vPayPlanConversionMaintenance = True And pParams.ParameterExists("TransactionPaymentMethod").Value = "MAINT")) Then
              'Converion app and not maintenance only
              vPPUpdateType = (PaymentPlanUpdateTypes.pputPaymentPlan Or PaymentPlanUpdateTypes.pputConversion)
            End If
        End Select
      End If

      vParams.Add("SubsStartOnMemberJoined", CDBField.FieldTypes.cftCharacter, "N")
      If (vAppType <> TraderApplication.ApplicationType.atMaintenance And vConversionShowPPD = False And vPayPlanConversionMaintenance = False And (pParams("TransactionType").Value = "MEMB" Or pParams("TransactionType").Value = "CMEM" Or pParams("TransactionType").Value = "MEMC")) Then
        vParams("SubsStartOnMemberJoined").Value = "Y"
      End If

      If pParams.ParameterExists("PaymentPlanNumber").IntegerValue > 0 Then Init(mvEnv, (pParams("PaymentPlanNumber").IntegerValue))

      If vParams("TransactionType").Value = "MEMC" Then
        vPPUpdateType = PaymentPlanUpdateTypes.pputChangeMembershipType
        ProcessCMTForSave(pParams, vParams, pTraderTransaction, pReApplyCMT, pAdditionalParams)
      End If

      Dim vInTrans As Boolean
      If vParams("TransactionType").Value = "MEMC" AndAlso vParams.ParameterExists("WOTransactionStarted").Bool = True Then vInTrans = True 'Writing off missed payments started a transaction which we need to commit here
      If mvEnv.Connection.InTransaction = False Then vInTrans = mvEnv.Connection.StartTransaction()

      Dim vInformationMessage As String = ""
      Dim vWarningMessage As String = ""
      If Existing Then
        Dim vUpdateSource As Boolean
        If vAppType = TraderApplication.ApplicationType.atConversion And pParams.ParameterExists("UpdatePPDSource").Bool Then vUpdateSource = True
        Dim vInAdvanceBatch As Integer
        UpdatePaymentPlan(vParams, vPPUpdateType, pTraderTransaction.SummaryMembers, pTraderTransaction.TraderPPDLines, vUpdateSource, vInAdvanceBatch, vInformationMessage, vWarningMessage)
        If pAdditionalParams.Exists("OriginalBalance") Then 'This will be set when applying FirstCMT and later will be used for SecondCMT
          mvClassFields(PaymentPlanFields.ofNextPaymentDue).SetValue = NextPaymentDue
          mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value = pAdditionalParams("NextPaymentDue").Value
          Balance += pAdditionalParams("OriginalBalance").DoubleValue
          SaveChanges()
        End If
        'return the values for the new bits created
        If vParams("TransactionType").Value = "MEMC" And vInAdvanceBatch > 0 Then
          pResults.Add("BatchNumber", vInAdvanceBatch)
        End If

        If (vPPUpdateType And PaymentPlanUpdateTypes.pputAddDirectDebit) > 0 Then
          pResults.Add("DirectDebitNumber", DirectDebit.DirectDebitNumber)
          If DirectDebit.Reference <> CStr(DirectDebit.DirectDebitNumber) Then
            pResults.Add("Reference", CDBField.FieldTypes.cftCharacter, DirectDebit.Reference)
          End If
        ElseIf (vPPUpdateType And PaymentPlanUpdateTypes.pputAddCreditCardAuthority) > 0 Then
          pResults.Add("CardAuthorityNumber", CreditCardAuthority.CreditCardAuthorityNumber)
        ElseIf (vPPUpdateType And PaymentPlanUpdateTypes.pputAddStandingOrder) > 0 Then
          pResults.Add("BankersOrderNumber", StandingOrder.StandingOrderNumber)
          pResults.Add("Reference", CDBField.FieldTypes.cftCharacter, StandingOrder.Reference)
        End If

        'Save Members
        If (vPPUpdateType And PaymentPlanUpdateTypes.pputConversion) > 0 Then
          pResults.Add("MemberNumber", CDBField.FieldTypes.cftCharacter, Member.MemberNumber)
        End If
      Else
        CreatePaymentPlan(GetPlanType(vParams), vParams, pTraderTransaction, vInformationMessage, Nothing, pParams.ParameterExists("NonFinancialBatchNumber").IntegerValue, pParams.ParameterExists("NonFinancialTransactionNumber").IntegerValue, vWarningMessage)
        pResults.Add("PaymentPlanNumber", PlanNumber)
        If PlanType = CDBEnvironment.ppType.pptMember Then
          Dim vNumbers As String = ""
          For Each vMember As Member In CurrentMembers
            If vNumbers.Length > 0 Then vNumbers = vNumbers & ", "
            vNumbers = vNumbers & vMember.MemberNumber
          Next vMember
          pResults.Add("MemberNumber", CDBField.FieldTypes.cftCharacter, vNumbers) '.Member.MemberNumber
        ElseIf PlanType = CDBEnvironment.ppType.pptLoan Then
          pResults.Add("LoanNumber", Loan.LoanNumber)
        End If
        If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          pResults.Add("DirectDebitNumber", DirectDebit.DirectDebitNumber)
          pResults.Add("Reference", CDBField.FieldTypes.cftCharacter, DirectDebit.Reference)
        ElseIf StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          pResults.Add("BankersOrderNumber", StandingOrder.StandingOrderNumber)
          pResults.Add("Reference", CDBField.FieldTypes.cftCharacter, StandingOrder.Reference)
        ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          pResults.Add("CardAuthorityNumber", CreditCardAuthority.CreditCardAuthorityNumber)
        End If

        '      Select Case PlanType
        '        Case pptMember
        '          For Each vMember In CurrentMembers
        '            If vNumbers.Length > 0 Then vNumbers = vNumbers & ", "
        '            vNumbers = vNumbers & vMember.MemberNumber
        '          Next
        '          pResults.Add "MemberNumber", cftCharacter, vNumbers   '.Member.MemberNumber
        '        Case pptDD
        '          pResults.Add "DirectDebitNumber", cftLong, DirectDebit.DirectDebitNumber
        '          pResults.Add "Reference", cftCharacter, DirectDebit.Reference
        '        Case pptSO
        '          pResults.Add "BankersOrderNumber", cftLong, StandingOrder.StandingOrderNumber
        '          pResults.Add "Reference", cftCharacter, StandingOrder.Reference
        '        Case pptCCCA
        '          pResults.Add "CardAuthorityNumber", cftLong, CreditCardAuthority.CreditCardAuthorityNumber
        '      End Select
      End If

      If vInTrans OrElse pAdditionalParams.ParameterExists("InTrans").Bool Then 'Do not commit transaction when applying FirstCMT
        If pReApplyCMT = False Then
          mvEnv.Connection.CommitTransaction()
        Else
          pAdditionalParams.Add("InTrans", "Y")
        End If
      End If

      If Len(vInformationMessage) > 0 Then pResults.Add("InformationMessage", CDBField.FieldTypes.cftCharacter, vInformationMessage)
      If Len(vWarningMessage) > 0 Then pResults.Add("WarningMessage", CDBField.FieldTypes.cftCharacter, vWarningMessage)

    End Sub

    Private Sub SCCalculateNewCMTBalance(ByVal pTraderTransaction As TraderTransaction, ByVal pAmountPaid As Double, ByVal pArrears As Double, ByVal pNewPrice As Double, ByRef pNewBalance As Double, ByRef pNewArrears As Double, ByVal pUpdatePPFixedAmount As Nullable(Of Boolean))
      Dim vLinePaid As Double
      Dim vLineTotal As Double
      Dim vOverPaid As Double
      Dim vPrice As Double
      Dim vDiscountOS As Double
      Dim vPPD As PaymentPlanDetail

      pNewBalance = 0 'Reset just in case they have something in them
      pNewArrears = 0

      'Pre-process to total discounts
      For Each vPPD In pTraderTransaction.TraderPPDLines
        If vPPD.Balance < 0 Then
          vDiscountOS = vDiscountOS + (vPPD.Balance * -1)
        End If
      Next vPPD

      Dim vSecondCMTBalance As Double = 0
      'Now total the lines
      For Each vPPD In pTraderTransaction.TraderPPDLines
        vLineTotal = vPPD.Balance - vPPD.Arrears
        If vPPD.Balance < 0 Then vDiscountOS = vDiscountOS + vPPD.Balance
        If mvSecondCMT Then
          If vPPD.Amount.Length > 0 Then
            vSecondCMTBalance = DoubleValue(vPPD.Amount)
          Else
            vSecondCMTBalance = vPPD.Price(Date.Parse(NextPaymentDue), mvEnv.VATRate(vPPD.Product.ProductVatCategory, Payer.VATCategory))
          End If
        End If
        'Check the Pay Plan Limit - ignore arrears
        vPrice = vPrice + vLineTotal
        If ((vPrice - vDiscountOS) > pNewPrice AndAlso Not (mvFirstCMT AndAlso vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltOtherCharge)) OrElse (pUpdatePPFixedAmount.HasValue AndAlso pUpdatePPFixedAmount.Value = False) Then
          'We have reached the Pay Plan Limit
          vOverPaid = (vPrice - vDiscountOS) - pNewPrice
          If vPPD.Balance > vOverPaid Then
            vPPD.Balance = CDbl(FixedFormat(vPPD.Balance - vOverPaid))
          Else
            vPPD.Balance = 0
          End If
        ElseIf mvFirstCMT AndAlso CMTProportionBalance = CMTProportionBalanceTypes.cmtNone AndAlso vPPD.DetailType = PaymentPlanDetail.PaymentPlanDetailTypes.ppdltOtherCharge Then
          Dim vAmount As Double
          If vPPD.Amount.Length > 0 Then
            vAmount = DoubleValue(vPPD.Amount)
          Else
            vAmount = vPPD.CurrentPrice
          End If
          If vPPD.Balance - vAmount > 0 Then
            vPPD.Balance = vPPD.Balance - vAmount
          Else
            vPPD.Balance = 0
          End If
        End If

        'Now take off Amount Paid
        If pAmountPaid > 0 Then
          If vPPD.Balance >= pAmountPaid Then
            vLinePaid = pAmountPaid
          Else
            vLinePaid = vPPD.Balance
          End If
          vPPD.Balance = CDbl(FixedFormat(vPPD.Balance - vLinePaid))
          pAmountPaid = pAmountPaid - vLinePaid
          If vPPD.Arrears > 0 Then
            If vPPD.Arrears >= vLinePaid Then
              vPPD.Arrears = CDbl(FixedFormat(vPPD.Arrears - vLinePaid))
            Else
              vPPD.Arrears = 0
            End If
          End If
        End If
        'Now Keep a running total of balance and arrears
        If mvSecondCMT Then
          vPPD.Balance = vPPD.Balance + vSecondCMTBalance
        Else
          pNewBalance = pNewBalance + vPPD.Balance
        End If
        pNewArrears = pNewArrears + vPPD.Arrears
      Next vPPD
      If mvSecondCMT Then pNewBalance = pNewPrice

    End Sub

    Public Function CheckPayPlanParameterList(ByVal pParams As CDBParameters) As CDBParameters
      'Before creating the PaymentPlan etc. we need to manipulate the parameters as the parameter names that come from Trader are different to those expected
      Dim vParams As New CDBParameters
      Dim vParam As CDBParameter
      Dim vName As String

      For Each vParam In pParams
        vName = vParam.Name
        Debug.Print("Old Param Name: " & vName)
        If InStr(1, vName, "_") > 0 Then
          Select Case Left(vName, 3)
            Case "CCA", "DDR", "STO"
              vName = Mid(vName, 5)
              Select Case vName
                Case "Amount"
                  vName = "AutoPayFixedAmount"
                Case "ContactNumber", "AddressNumber", "StartDate", "Source"
                  vName = "AutoPay" & vName
                Case "ExpiryDate"
                  vName = "Card" & vName
              End Select
            Case "LON"
              vName = vName.Substring(4)
              If vName = "OrderDate" Then vName = "StartDate"
            Case "MEM", "CMT"
              vName = Mid(vName, 5)
              Select Case vName
                Case "Amount"
                  vName = "MemberFixedAmount"
                Case "ContactNumber", "AddressNumber", "Product", "Source", "DobEstimated"
                  vName = "Member" & vName
                Case "DateOfBirth"
                  vName = "MemberDOB"
                Case "Rate"
                  vName = "Membership" & vName
              End Select
            Case "MSP"
              'Only two fields - ContactNumber & AddressNumber
              vName = "MembershipPayer" & Mid(vName, 5)
            Case "PPD"
              vName = Mid(vName, 5)
              Select Case vName
                Case "Amount"
                  vName = "DetailFixedAmount"
                  'Case "CheckBox"
                  '  vName = "SetFirstAmountToRenewal"
                Case "ContactNumber", "AddressNumber"
                  vName = "" 'Remove these
                Case "OrderDate"
                  vName = "StartDate"
                Case "OrderTerm"
                  vName = "PlanTerm"
              End Select
            Case "PPM"
              vName = Mid(vName, 5)
              Select Case vName
                Case "Amount"
                  vName = "FixedAmount"
              End Select
          End Select
        Else
          Select Case vName
            Case "AddressNumber", "Amount", "ContactNumber", "Source", "StartDate"
              'These will be set elsewhere so remove
              vName = ""
          End Select
        End If

        If Len(vName) > 0 Then
          If vParams.Exists(vName) Then
            'This should just be parameters from the current page that will also have parameters prefixed with the page code
            Debug.Print("Existing Param Name: " & vName & "; Old Value: " & vParams(vName).Value & "; New Value: " & vParam.Value)
            vParams(vName).Value = vParam.Value
          Else
            Debug.Print("New Param Name: " & vName)
            vParams.Add(vName, vParam.DataType, vParam.Value)
          End If
        End If
      Next vParam

      CheckPayPlanParameterList = vParams

    End Function

    Private Function GetPlanType(ByRef pParams As CDBParameters) As CDBEnvironment.ppType
      ' needs to be extended as full SC functionality is implemented
      Dim vTransactionType As String
      Dim vPPType As CDBEnvironment.ppType
      Dim vPaymentMethod As String

      vTransactionType = pParams("TransactionType").Value
      vPaymentMethod = pParams("PaymentMethod").Value

      If vTransactionType = "MEMB" Then
        vPPType = CDBEnvironment.ppType.pptMember
      ElseIf vTransactionType = "LOAN" Then
        vPPType = CDBEnvironment.ppType.pptLoan
      Else
        Select Case vPaymentMethod
          Case mvEnv.GetConfig("pm_dd")
            vPPType = CDBEnvironment.ppType.pptDD
          Case mvEnv.GetConfig("pm_so")
            vPPType = CDBEnvironment.ppType.pptSO
          Case mvEnv.GetConfig("pm_ccca")
            vPPType = CDBEnvironment.ppType.pptCCCA
          Case Else
            vPPType = CDBEnvironment.ppType.pptOther
        End Select
      End If
      GetPlanType = vPPType
    End Function

    Public Function ValidateCMT(ByVal pParams As CDBParameters, ByRef pMember As Member) As String
      'NOTE: Currently used by ChangeMembershipType web service and DataImportCMT only
      Dim vRecordSet As CDBRecordSet
      Dim vMsg As String = ""
      Dim vOPS As OrderPaymentSchedule
      Dim vOPSFound As Boolean
      Dim vInRenewalPeriod As Boolean

      If PlanType <> CDBEnvironment.ppType.pptMember Then
        vMsg = (ProjectText.String29394) 'Payment Plan is not for a Membership
      Else
        'Check that member is not a joint contact
        If pMember IsNot Nothing AndAlso pMember.Existing Then
          If pMember.Contact.ContactType = Contact.ContactTypes.ctcJoint Then
            vMsg = ProjectText.String33068
          End If
        End If
        If Balance > 0 And mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataScheduledPayments) = True Then
          'Check there are no unprocessed payments
          For Each vOPS In ScheduledPayments
            If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsUnprocessedPayment Then vOPSFound = True
            If vOPSFound Then Exit For
          Next vOPS
          If vOPSFound Then
            'BR15651: For CMT Import don't raise error here. Allow error to be raised later within PaymentPlan.UpdatePaymentPlan
            'RaiseError(DataAccessErrors.daeCannotCMTUnProcessedPayments, PlanNumber.ToString) 'Change of Membership Type not possible as the Payment Plan has unprocessed payments
            If pParams.ParameterExists("IsCMT").Bool = False Then
              vMsg = (ProjectText.String15674) 'Change of Membership Type not possible as the Payment Plan has unprocessed payments
            End If
          End If
        End If
        If vOPSFound = False Then
          'BR 8776: Work out end of current renewal period & error if we are beyond it
          If CDate(RenewalPeriodEnd) < CDate(TodaysDate()) Then
            vInRenewalPeriod = False
            vMsg = (ProjectText.String15678) 'This Membership must be Renewed prior to performing Change Membership Type as the Renewal period has expired.
          Else
            vInRenewalPeriod = True
          End If
        End If
        If vOPSFound = False And vInRenewalPeriod = True Then
          If MembershipType.MembersPerOrder = 0 And mvEnv.GetConfigOption("opt_me_allow_group_change") = False Then
            vMsg = (ProjectText.String29395) 'Can not Change a Group Membership
          Else
            vRecordSet = mvEnv.Connection.GetRecordSet("SELECT membership_type_desc, future_change_date FROM member_future_type mft, membership_types mt WHERE membership_number = " & pMember.MembershipNumber & " AND mt.membership_type = mft.future_membership_type")
            If vRecordSet.Fetch() = True Then
              '!ANDY This will fail if we select an associate member number on the first screen
              If pMember.MembershipTypeCode <> MembershipTypeCode Then
                vMsg = (ProjectText.String29396) 'Change of Membership Type not possible as membership has been renewed for future change
              Else
                If pParams.ParameterExists("RemoveFutureMembershipChange").Bool = False Then  'supported in DataImportCMT
                  'Can not change a Membership which has a Future Membership Change set up
                  vMsg = (ProjectText.String29400) 'Change of Membership Type not possible while there is an existing future change record
                End If
              End If
            End If
            vRecordSet.CloseRecordSet()
          End If
        End If
        If pParams.Exists("CMTDate") Then
          Dim vCMTDate As Date
          If Date.TryParse(pParams("CMTDate").Value, vCMTDate) Then
            Dim vMinCMTDate As Date = CDate(pMember.GetEarliestCMTDate(TermStartDate))
            Dim vMaxCMTDate As Date = TermEndDate.AddDays(-1)
            If vCMTDate < vMinCMTDate Then
              vMsg = String.Format(ProjectText.String33042, vMinCMTDate.ToString(CAREDateFormat))     'CMT Date cannot be before the earliest date of '{0}'
            ElseIf vCMTDate > vMaxCMTDate Then
              vMsg = String.Format(ProjectText.String33043, vMaxCMTDate.ToString(CAREDateFormat))     'CMT Date cannot be after the term end date of '{0}'
            End If
          End If
        End If
      End If
      ValidateCMT = vMsg
    End Function
    Public Function ValidateMembershipType(ByVal pParams As CDBParameters, ByVal pMembershipType As MembershipType) As String
      Return ValidateMembershipType(pParams, pMembershipType, False)
    End Function
    Public Function ValidateMembershipType(ByVal pParams As CDBParameters, ByVal pMembershipType As MembershipType, ByVal pFullValidation As Boolean) As String
      'NOTE: Currently used by ChangeMembershipType web service and DataImportCMT only
      Dim vMsg As String = ""
      Dim vAssocMembershipType As MembershipType = Nothing

      With pMembershipType
        If pFullValidation = False Then   'ChangeMembershipType web service
          If (.MembersPerOrder = 1 And MembershipType.MembersPerOrder = 1) = False Then vMsg = (ProjectText.String19020) 'Can not change the membership type as only Individual Memberships are supported
          If Len(vMsg) = 0 And .PayerRequired <> MembershipType.PayerRequired Or .PayerRequired = "M" Then vMsg = (ProjectText.String19021) 'Can not change the membership type as Change of Payer is not supported
          If Len(vMsg) = 0 And (.MaxFreeAssociates = 0 And MembershipType.MaxFreeAssociates = 0) = False Then vMsg = (ProjectText.String19022) 'Can not change the membership type as Maximum Free Associates is set for one or both membership types
        Else
          vAssocMembershipType = New MembershipType(mvEnv)
          vAssocMembershipType.Init(.AssociateMembershipType)

          If pParams("NumberOfMembers").Value.Length = 0 Then pParams("NumberOfMembers").Value = .MembersPerOrder.ToString
          If pParams("MaxFreeAssociates").Value.Length = 0 Then pParams("MaxFreeAssociates").Value = .MaxFreeAssociates.ToString


          If pParams("NumberOfMembers").LongValue = 0 Then
            vMsg = ProjectText.String29023   'The Number of Members cannot be zero
          Else
            If .SetNumberOfMembers = False AndAlso .MembersPerOrder > 0 AndAlso pParams("NumberOfMembers").LongValue > .MembersPerOrder Then
              vMsg = String.Format(ProjectText.String29024, .MembersPerOrder)   'The Number of Members cannot be greater than {0}
            End If
          End If
          If .AssociateMembershipType.Length > 0 Then
            If pParams("MaxFreeAssociates").LongValue < 1 AndAlso vMsg.Length = 0 Then
              vMsg = ProjectText.String29025 'Number of Associates must be greater than zero
            Else
              If pParams("MaxFreeAssociates").LongValue > .MaxFreeAssociates AndAlso pParams.ParameterExists("ChargeAdditionalAssociates").Bool = False Then  'supported in DataImportCMT
                If vMsg.Length = 0 Then vMsg = String.Format(ProjectText.String19023, .MaxFreeAssociates) 'The Number of Associates is greater than the number of Free Associates ({0})
              End If
            End If
          Else
            If pParams("MaxFreeAssociates").LongValue > 0 AndAlso vMsg.Length = 0 Then vMsg = ProjectText.String29027 'No Associate Membership Type is defined for this Membership Type
          End If

          If pParams("GiftMembership").Value.Length = 0 Then pParams("GiftMembership").Value = IIf(GiftMembership, "Y", "N").ToString
          If .PayerRequired <> "M" Then
            If .PayerRequired = "Y" Then pParams("GiftMembership").Value = "Y"
            If pParams("GiftMembership").Bool = False Then
              pParams("OneYearGift").Value = "N"
              pParams("PackToDonor").Value = "N"
              pParams("GiftCardStatus").Value = "N"
            Else
              If GiftMembership AndAlso pParams("OneYearGift").Value.Length = 0 Then pParams("OneYearGift").Value = IIf(OneYearGift, "Y", "N").ToString
              If pParams("GiftMembership").Bool AndAlso pParams("GiftCardStatus").Value.Length = 0 Then pParams("GiftCardStatus").Value = "N"
            End If
          End If
        End If
        If Len(vMsg) = 0 And .ApprovalMembership = True Then vMsg = (ProjectText.String15088) 'Can not change to this Membership Type as it is an Approval Membership Type

        If Len(vMsg) = 0 And mvEnv.GetConfigOption("reason_is_grade", True) Then
          If mvEnv.Connection.GetCount("reasons_for_despatch", Nothing, "reason_for_despatch = '" & .MembershipTypeCode & "'") = 0 Then
            vMsg = (ProjectText.String28943) 'The entered Membership type needs to have a reason for despatch with the same code
          End If
        End If
        If Len(vMsg) = 0 And .IsAssociateType Then vMsg = (ProjectText.String15085) 'The entered Membership Type is an associate Membership Type
        If Len(vMsg) = 0 Then
          'Check the Membership type is different from the existing Membership Type
          If CMTProportionBalance = CMTProportionBalanceTypes.cmtNone Then
            If IsCurrentMembersMembershipType(.MembershipTypeCode) Then
              vMsg = (ProjectText.String15086) 'The entered Membership Type is the same as the existing Membership Type
            End If
          Else
            If IsCurrentMembersMembershipType(.MembershipTypeCode, pParams.ParameterExists("Rate").Value) Then
              vMsg = (ProjectText.String18393)  'The entered Membership Type and Rate is the same as the existing Membership Type and Rate
            End If
          End If
          'Check Annual to non-Annual (or visa versa) with Auto Payment Method
          If Len(vMsg) = 0 And HasAutoPaymentMethod Then
            If MembershipType.Annual <> .Annual Then
              vMsg = (ProjectText.String15087) 'Can not change an Annual Membership to a non-Annual Membership when an Automatic Payment Method exists
            End If
          End If
          'If Len(vMsg) = 0 Then SetPayPlanEligibleForGiftAid   'THIS WILL BE CALLED FROM THE PARENT ROUTINE
        End If
        If Len(vMsg) = 0 And Len(.SubsequentMembershipType) > 0 And .SubsequentTrigger = "C" Then vMsg = (ProjectText.String15089) 'Future Membership Type Trigger of 'Category' is not currently supported

        If pFullValidation Then
          If vMsg.Length = 0 AndAlso Len(vAssocMembershipType.SubsequentMembershipType) > 0 AndAlso vAssocMembershipType.SubsequentTrigger = "C" Then vMsg = ProjectText.String15090 'Associate Future Membership Type Trigger of 'Category' is not currently supported
          If vMsg.Length = 0 Then
            If .PayerRequired = "M" Then
              If pParams("AffiliatedMemberNumber").Value.Length = 0 Then vMsg = "Affiliated Member Number must be provided when the payer required is 'M'"
              If vMsg.Length = 0 Then
                pParams("GiftMembership").Value = "N"
                pParams("OneYearGift").Value = "N"
                pParams("PackToDonor").Value = "N"
                pParams("GiftCardStatus").Value = "N"
              End If
            Else
              pParams("AffiliatedMemberNumber").Value = ""
            End If
          End If
          If vMsg.Length = 0 AndAlso (pParams("GiftMembership").Bool = False OrElse pParams("GiftCardStatus").Value <> "W") Then
            pParams("GiftFrom").Value = ""
            pParams("GiftTo").Value = ""
            pParams("GiftMessage").Value = ""
          End If
        End If
        '    If Len(vMsg) = 0 And mvTraderApplication.PayMethodsAtEnd And .HasMembershipPrices() Then
        '      ErrorSetFocus txt(pIndex),(ProjectText.String18387)    'This Membership Type cannot be used because it has Membership Prices defined and this Trader application supports Payment Methods At End
        '      vValid = False
        '    End If
        If Len(vMsg) = 0 Then
          CheckForCMTPriceChange(pMembershipType, pParams)
          'Ensure that the current and the new Membership Types have the same Fixed Cycle setting.
          If Len(MembershipType.FixedCycle) > 0 And Len(.FixedCycle) > 0 Then
            'Can't CMT from a MT w/ a fixed cycle to one w/ a different fixed cycle
            If MembershipType.FixedCycle <> .FixedCycle Then vMsg = (ProjectText.String16948) 'Change of Membership Type not possible between Membership Types that have different Fixed Cycle settings
          Else
            'Can't CMT from a MT w/ a fixed cycle to one w/out a fixed cycle
            'Similarly, can't CMT from a MT w/out a fixed cycle to one w/ a fixed cycle
            If Len(MembershipType.FixedCycle) <> 0 Or Len(.FixedCycle) <> 0 Then vMsg = (ProjectText.String16948) 'Change of Membership Type not possible between Membership Types that have different Fixed Cycle settings
          End If
        End If
      End With

      ValidateMembershipType = vMsg

    End Function

    Public Sub ValidatePaymentFrequency(ByVal pFrequencyCode As String)
      'Currently used by UpdatePaymentPlanInfo web service and DataImportPaymentPlan
      Dim vFrequency As New PaymentFrequency
      Dim vDetail As PaymentPlanDetail
      Dim vOPS As OrderPaymentSchedule
      Dim vOPSFound As Boolean

      If pFrequencyCode <> PaymentFrequencyCode Then
        vFrequency.Init(mvEnv, pFrequencyCode)
        If vFrequency.Existing Then
          If TransactionType = "DONR" And vFrequency.Frequency <> 1 Then
            RaiseError(DataAccessErrors.daeRegularDONCannotPaidByInstallment)
          Else
            'Check there are no unprocessed payments
            For Each vOPS In ScheduledPayments
              If vOPS.ScheduledPaymentStatus = OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsUnprocessedPayment Then vOPSFound = True
              If vOPSFound Then Exit For
            Next vOPS
            If vOPSFound Then
              RaiseError(DataAccessErrors.daePaymentPlanUnprocessedPayments)
            Else
              PaymentFrequencyCode = pFrequencyCode
              SetNewRenewalDate()
              'Remove any existing effective date when frequency is changed to Annual
              If PaymentFrequencyFrequency = 1 Then
                For Each vDetail In Details
                  If IsDate(vDetail.EffectiveDate) Then
                    If CDate(vDetail.EffectiveDate) > CDate(TodaysDate()) Then
                      vDetail.SetEffectiveDate("")
                    End If
                  End If
                Next vDetail
              End If
            End If
          End If
        Else
          RaiseError(DataAccessErrors.daeInvalidCode, "Payment Frequency")
        End If
      End If
    End Sub

    Private Sub SaveEnclosuresAndNewOrders(ByVal pParams As CDBParameters)

      Dim vDateFulfilled As String = ""
      Dim vEnclosure As Enclosure
      Dim vMailing As String = ""
      Dim vNewOrderCount As Integer 'CMT
      Dim vWhereFields As CDBFields
      Dim vUpdateFields As CDBFields
      Dim vAppType As TraderApplication.ApplicationType

      vAppType = CType(pParams.ParameterExists("AppType").IntegerValue, TraderApplication.ApplicationType)

      'PROCESS ENCLOSURES
      If mvEnclosures Is Nothing Then mvEnclosures = New Collection
      If mvEnclosures.Count() > 0 Then
        For Each vEnclosure In mvEnclosures
          With vEnclosure
            If pParams.ParameterExists("FulfilIncentives").Bool Then .SetFulfilled()
            .SetPaymentPlan(PlanNumber, ContactNumber)
            .Save()
            vMailing = .Mailing
          End With
        Next vEnclosure
        If pParams.ParameterExists("FulfilIncentives").Bool Then vDateFulfilled = TodaysDate()
      End If

      'Process New Orders
      vNewOrderCount = 0
      vWhereFields = New CDBFields
      vWhereFields.Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
      vWhereFields.Add("date_fulfilled", CDBField.FieldTypes.cftDate)
      If pParams.ParameterExists("TransactionType").Value = "MEMC" Or vAppType = TraderApplication.ApplicationType.atMaintenance Then vNewOrderCount = mvEnv.Connection.GetCount("new_orders", vWhereFields, "")
      If mvEnclosures.Count > 0 OrElse (mvEnv.GetConfigOption("me_mandatory_new_orders") = True AndAlso GiftMembership = True AndAlso
      pParams.ParameterExists("PackToDonor").Bool = True AndAlso (pParams.ParameterExists("Mailing").Value.Length > 0 OrElse pParams.ParameterExists("TRD_Mailing").Value.Length > 0)) _
      OrElse (vAppType = TraderApplication.ApplicationType.atMaintenance AndAlso vNewOrderCount > 0) Then
        vUpdateFields = New CDBFields
        With vUpdateFields
          If vAppType <> TraderApplication.ApplicationType.atMaintenance Then
            ' do not update any fields but gift message fields if maintaining a payment plan

            .Add("order_number", CDBField.FieldTypes.cftLong, PlanNumber)
            .Add("reason_for_despatch", CDBField.FieldTypes.cftCharacter, pParams.OptionalValue("ReasonForDespatch", IncentiveReason(pParams.ParameterExists("TransactionType").Value, vAppType, pParams)))
            .Add("contact_number", CDBField.FieldTypes.cftLong, pParams("PayerContactNumber").Value)
            .Add("address_number", CDBField.FieldTypes.cftLong, pParams("PayerAddressNumber").Value)
            If Len(pParams.ParameterExists("GiftCardStatus").Value) = 0 Then
              .Add("gift_card_status", CDBField.FieldTypes.cftCharacter, "N")
            Else
              .Add("gift_card_status", CDBField.FieldTypes.cftCharacter, pParams("GiftCardStatus").Value)
            End If
            If Len(pParams.ParameterExists("PackToDonor").Value) = 0 Then
              .Add("pack_to_donor", CDBField.FieldTypes.cftCharacter, "N")
            Else
              .Add("pack_to_donor", CDBField.FieldTypes.cftCharacter, pParams("PackToDonor").Value)
            End If
            If mvEnclosures.Count = 0 Then vMailing = If(pParams.ParameterExists("Mailing").Value.Length > 0, pParams.ParameterExists("Mailing").Value, pParams.ParameterExists("TRD_Mailing").Value)
            .Add("mailing", CDBField.FieldTypes.cftCharacter, vMailing)
            .Add("date_created", CDBField.FieldTypes.cftDate, pParams.OptionalValue("DateCreated", (TodaysDate())))
            .Add("date_fulfilled", CDBField.FieldTypes.cftDate, If(mvEnclosures.Count() = 0, pParams.OptionalValue("DateFulfilled", (TodaysDate())), vDateFulfilled))
          End If
          If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataGiftMessage) Then
            'If vAppType = atMaintenance Then vGiftPage = tpPaymentPlanMaintenance Else vGiftPage = vMembersPage
            .Add("gift_from", CDBField.FieldTypes.cftCharacter, pParams.ParameterExists("GiftFrom").Value)
            .Add("gift_to", CDBField.FieldTypes.cftCharacter, pParams.ParameterExists("GiftTo").Value)
            .Add("gift_message", CDBField.FieldTypes.cftCharacter, pParams.ParameterExists("GiftMessage").Value)
          End If
        End With
        If vNewOrderCount > 0 Then
          mvEnv.Connection.UpdateRecords("new_orders", vUpdateFields, vWhereFields)
        Else
          mvEnv.Connection.InsertRecord("new_orders", vUpdateFields)
        End If
      Else
        If vNewOrderCount > 0 Then 'old mship had unfulfilled new_orders, new one does not - delete
          mvEnv.Connection.DeleteRecords("new_orders", vWhereFields, True)
        End If
      End If
    End Sub

    Public Function IncentiveReason(ByVal pTransactionType As String, ByVal pApplicationType As TraderApplication.ApplicationType, ByVal pParams As CDBParameters) As String
      Dim vReason As String

      Select Case pTransactionType
        Case "MEMB", "CMEM"
          If mvEnv.GetConfigOption("reason_is_grade", True) Then
            vReason = pParams.ParameterExists("MEM_MembershipType").Value
            If Len(vReason) = 0 Then vReason = pParams.ParameterExists("MembershipType").Value
          Else
            vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlReasonForDespatch)
          End If
        Case "CSUB", "CDON"
          vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCVReasonForDespatch)
        Case Else
          Select Case pParams.ParameterExists("PPPaymentType").Value
            Case "DIRD"
              vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDDReason)
            Case "CCCA"
              vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCCReason)
            Case "STDO"
              vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlSOReason)
            Case Else
              vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlOReason)
          End Select
      End Select

      If pApplicationType = TraderApplication.ApplicationType.atConversion Or pApplicationType = TraderApplication.ApplicationType.atMaintenance Or pTransactionType = "MEMC" Then
        Dim vCMT As Boolean = False
        Select Case pParams.ParameterExists("CurrentPageType").IntegerValue
          Case TraderPage.TraderPageType.tpDirectDebit
            vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDDReason)
          Case TraderPage.TraderPageType.tpCreditCardAuthority
            vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCCReason)
          Case TraderPage.TraderPageType.tpStandingOrder
            vReason = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlSOReason)
          Case TraderPage.TraderPageType.tpMembershipPayer 'CMT
            vCMT = True
        End Select
        If pTransactionType = "MEMC" AndAlso pApplicationType = 0 AndAlso pParams.ParameterExists("IsCMT").Bool Then
          'Data Import CMT or CMT Web Service
          vCMT = True
        End If
        If vCMT Then
          vReason = ReasonForDespatch
          If mvEnv.GetConfigOption("reason_is_grade", True) Then
            vReason = pParams.ParameterExists("CMT_MembershipType").Value
            If Len(vReason) = 0 Then vReason = pParams.ParameterExists("MembershipType").Value
          End If
        End If
      End If

      IncentiveReason = vReason
    End Function

    Friend Sub UpdateAutoPaymentMethod(ByVal pParams As CDBParameters, ByVal pNumber As Integer)
      Dim vAmount As Double
      Dim vBankAccount As String
      Dim vSource As String
      Dim vStartDate As String
      Dim vReference As String
      Dim vType As String

      vAmount = pParams.ParameterExists("Amount").DoubleValue
      vBankAccount = pParams.ParameterExists("BankAccount").Value
      vReference = pParams.ParameterExists("Reference").Value
      vSource = pParams.ParameterExists("Source").Value
      AutoPaymentSource = vSource
      vStartDate = pParams.ParameterExists("StartDate").Value

      If StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        With StandingOrder
          If .Existing Then
            vType = pParams.ParameterExists("StandingOrderType").Value
            .Update(pNumber, vBankAccount, vSource, vAmount, vStartDate, vReference, vType)
            If .StandingOrderType = StandingOrder.SOType.sotCAFSO Then AutoPaymentCAF = True
          End If
        End With
      ElseIf DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        With DirectDebit
          If .Existing Then
            vType = pParams.ParameterExists("MandateType").Value
            If vType.Length > 0 Then
              vType = Left(vType, 1)
              If vType = "U" Then vType = "" 'Unknown
              pParams("MandateType").Value = vType
            End If
            If pParams.Exists("BankDetailsNumber") = False Then pParams.Add("BankDetailsNumber", CDBField.FieldTypes.cftInteger)
            pParams("BankDetailsNumber").Value = pNumber.ToString
            .Update(pParams)
          End If
        End With
      ElseIf CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes Then
        With CreditCardAuthority
          If .Existing Then
            .ContactCreditCard.Update((pParams("CreditCardNumber").Value), (pParams("ExpiryDate").Value), (pParams("Issuer").Value), (pParams("AccountName").Value), (pParams("CreditCardType").Value), (pParams.ParameterExists("IssueNumber").Value))
            vType = pParams.ParameterExists("AuthorityType").Value
            .Update(.CreditCardDetailsNumber, vBankAccount, vSource, vAmount, vStartDate, vType)
            If .AuthorityType = CreditCardAuthority.ccaAuthorityType.catCAFCard Then AutoPaymentCAF = True
          End If
        End With
      End If
    End Sub

    Public Function ReverseInAdvance(ByVal pParams As CDBParameters, ByRef pNewBatchNumber As Integer, ByRef pNewTransactionNumber As Integer) As String
      'Used by Smart Client and Web Services (copied from cdb.frmVOrd.ReverseInAdvance)
      'Refund or Reverse InAdvance
      Dim vAdjustType As Batch.AdjustmentTypes
      Dim vFH As FinancialHistory
      Dim vRS As CDBRecordSet
      Dim vOPH As New OrderPaymentHistory
      Dim vMsg As String = ""
      Dim vSQL As String

      If CanRefundInAdvance() OrElse CanReverseInAdvance() Then 'Just in case
        If (DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Or CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes) Then
          vAdjustType = Batch.AdjustmentTypes.atRefund
        Else
          vAdjustType = Batch.AdjustmentTypes.atReverse
        End If

        vOPH.Init(mvEnv)
        vSQL = "SELECT " & vOPH.GetRecordSetFields(OrderPaymentHistory.OrderPaymentHistoryRecordSetTypes.ophrtAll) & " FROM order_payment_history oph WHERE order_number = " & PlanNumber
        vSQL = vSQL & " AND status = 'I' ORDER BY payment_number DESC"
        vRS = mvEnv.Connection.GetRecordSet(vSQL)
        If vRS.Fetch() = True Then
          pNewBatchNumber = 0
          pNewTransactionNumber = 0
          Do
            vOPH = New OrderPaymentHistory
            vOPH.InitFromRecordSet(mvEnv, vRS, OrderPaymentHistory.OrderPaymentHistoryRecordSetTypes.ophrtAll)
            pParams("BatchNumber").Value = vOPH.BatchNumber.ToString
            pParams("TransactionNumber").Value = vOPH.TransactionNumber.ToString
            vFH = New FinancialHistory
            vFH.Init(mvEnv, (vOPH.BatchNumber), (vOPH.TransactionNumber))
            Dim vLineNumber As Integer = 0
            If vFH.Amount.Equals(vOPH.Amount) = False Then vLineNumber = vOPH.LineNumber 'Line level reversal required
            vFH.AdjustTransaction(vAdjustType, pParams, vOPH.Amount, vLineNumber, True, pNewBatchNumber, pNewTransactionNumber)
          Loop While vRS.Fetch = True
          vMsg = XLAT("Financial Adjustment successful. All payment history records have been adjusted")
        Else
          vMsg = XLAT("Unable to find payment history for in-advance payments")
        End If
        vRS.CloseRecordSet()
      Else
        vMsg = XLATP1("Cannot adjust in-advance payments for Payment Plan Number %s", CStr(PlanNumber))
      End If
      Return vMsg
    End Function

    Private Sub CheckForCMTPriceChange(ByVal pMembershipType As MembershipType, ByVal pParams As CDBParameters)
      'Copied from frmTrader.
      'Currently used by DataImportCMT/ChangeMembershipType web service
      Dim vMemEntitlement As MembershipEntitlement
      Dim vEntPriceChange As Boolean
      Dim vCMTPriceDate As String = ""
      Dim vCMTPriceChangeResult As String = ""
      Dim vProductRate As ProductRate

      If RenewalPending = True And DateDiff("d", TodaysDate, RenewalDate) > 0 Then
        'BR 9781: Membership has been Renewed; check whether there has been a Rate
        'Increase since Renewals and if so, give user option whether to use Current/New Price.
        Dim vVATRate As VatRate
        With pMembershipType
          If DetermineMembershipPeriod() = MembershipPeriodTypes.mptFirstPeriod Or mvEnv.GetConfigOption("me_renew_at_same_rate") Then
            vProductRate = .ProductRate
            vVATRate = mvEnv.VATRate(pMembershipType.ProductVATCategory, Payer.VATCategory)
          Else
            vProductRate = .SubsequentProductRate
            vVATRate = mvEnv.VATRate(pMembershipType.SubsequentProductVATCategory, Payer.VATCategory)
          End If
        End With
        'Check for entitlement price change(es).
        For Each vMemEntitlement In pMembershipType.Entitlements
          If vMemEntitlement.ProductRate.PriceWillChange(CDate(RenewalDate)) Then
            vEntPriceChange = True
          End If
        Next
        If vEntPriceChange Then
          vCMTPriceChangeResult = String.Format(ProjectText.String19029, pMembershipType.MembershipTypeCode, RenewalDate)
          If pParams.ParameterExists("ApplyNewPrice").Bool Then
            'New Price Required; set Price Date to Renewal Date as it's end of the period.
            vCMTPriceDate = RenewalDate
            vCMTPriceChangeResult = Replace$(vCMTPriceChangeResult, " Current ", " New ")
          End If
          pParams.Add("CMTPriceChangeResult", CDBField.FieldTypes.cftCharacter, vCMTPriceChangeResult)
        Else
          If vProductRate.PriceWillChange(CDate(RenewalDate)) Then
            vCMTPriceChangeResult = String.Format(ProjectText.String19030, pMembershipType.MembershipTypeCode, vProductRate.PriceChangeDate, RenewalDate)
            If pParams.ParameterExists("ApplyNewPrice").Bool Then
              'New Price Required
              vCMTPriceDate = vProductRate.PriceChangeDate.ToString(CAREDateFormat)
              vCMTPriceChangeResult = Replace$(vCMTPriceChangeResult, "%1", "New")
              vCMTPriceChangeResult = Replace$(vCMTPriceChangeResult, "%2", vProductRate.RenewalPrice(True, 0, 1, vVATRate, Nothing).ToString)
            Else
              vCMTPriceChangeResult = Replace$(vCMTPriceChangeResult, "%1", "Current")
              vCMTPriceChangeResult = Replace$(vCMTPriceChangeResult, "%2", vProductRate.RenewalPrice(False, 0, 1, vVATRate, Nothing).ToString)
            End If
            pParams.Add("CMTPriceChangeResult", CDBField.FieldTypes.cftCharacter, vCMTPriceChangeResult)
          End If
        End If
      End If
      pParams.Add("CMTPriceDate", CDBField.FieldTypes.cftDate, vCMTPriceDate)
    End Sub

    Public ReadOnly Property CMTProportionBalance() As CMTProportionBalanceTypes
      Get
        If mvCMTProportionBalance < CMTProportionBalanceTypes.cmtNone Then
          Select Case mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCMTProportionBalance)
            Case "Y"
              mvCMTProportionBalance = CMTProportionBalanceTypes.cmtMonths
            Case "F"
              mvCMTProportionBalance = CMTProportionBalanceTypes.cmtFrequencyAmounts
            Case Else
              mvCMTProportionBalance = CMTProportionBalanceTypes.cmtNone
          End Select
        End If
        Return mvCMTProportionBalance
      End Get
    End Property

    Public WriteOnly Property SecondCMT As Boolean
      Set(ByVal value As Boolean)
        mvSecondCMT = value
      End Set
    End Property

    Friend ReadOnly Property IsMultipleCMT As Boolean
      'Determine if the PP has been renewed and there are some payments left for current year
      'BR14937: MultipleCMT is true when Renewal Pending is true and the Renewal Date is after today.
      'BR15631: Added additional conditions to check for CMT Proportional Balance setting of 'F' and Balance greater than Renewal Amount
      Get
        Return CMTProportionBalance = CMTProportionBalanceTypes.cmtFrequencyAmounts AndAlso RenewalPending AndAlso DateDiff("d", TodaysDate, RenewalDate) > 0 AndAlso Balance > RenewalAmount
      End Get
    End Property
    Public Property TraderBatchCategory As String
      Get
        Return mvTraderBatchCategory
      End Get
      Set(value As String)
        mvTraderBatchCategory = value
      End Set
    End Property
    ''' <summary>Get the earliest OPS with status of Due, PartPaid or Provisional</summary>
    ''' <returns>Earliest OPS</returns>
    ''' <remarks>Called from RegeneratePaymentSchedule for PPMaintenance</remarks>
    Private Function GetEarliestDueOPS() As OrderPaymentSchedule
      Dim vOPS As New OrderPaymentSchedule
      vOPS.Init(mvEnv)

      Dim vWhereFields As New CDBFields(New CDBField("order_number", PlanNumber))
      vWhereFields.Add("scheduled_payment_status", "'D','P','V'", CType(CDBField.FieldWhereOperators.fwoIn + CDBField.FieldWhereOperators.fwoOpenBracket, CDBField.FieldWhereOperators))
      vWhereFields.Add("schedule_creation_reason", "AP", CType(CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))

      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vOPS.GetRecordSetFields(OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll), "order_payment_schedule ops", vWhereFields, "due_date")
      Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
      If vRS.Fetch Then
        vOPS = New OrderPaymentSchedule
        vOPS.InitFromRecordSet(mvEnv, vRS, OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll)
      End If
      vRS.CloseRecordSet()

      Return vOPS
    End Function

    ''' <summary>Set the ScheduledPayments collection with latest or earliest OPS with status of Due, PartPaid, Provisional or Unprocessed Payment</summary>
    ''' <remarks>Called from AutoSOReconciliation for NI Number Reconciliation</remarks>
    Public Sub GetLatestOrEarliestDueOPS(ByVal pLatest As Boolean, ByVal pDueDateFrom As String, ByVal pDueDateTo As String)
      'If pLatest is true then DueDateFrom and DueDateTo will be used to select OPS records
      mvScheduledPayments = New Collection
      Dim vOPS As New OrderPaymentSchedule
      vOPS.Init(mvEnv)

      Dim vWhereFields As New CDBFields(New CDBField("order_number", PlanNumber))
      vWhereFields.Add("scheduled_payment_status", "'D','P','V','U'", CType(CDBField.FieldWhereOperators.fwoIn + CDBField.FieldWhereOperators.fwoOpenBracket, CDBField.FieldWhereOperators))
      vWhereFields.Add("schedule_creation_reason", "AP", CType(CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
      If pLatest Then
        vWhereFields.Add("due_date", CDBField.FieldTypes.cftDate, pDueDateFrom, CDBField.FieldWhereOperators.fwoBetweenFrom)
        vWhereFields.Add("due_date#2", CDBField.FieldTypes.cftDate, pDueDateTo, CDBField.FieldWhereOperators.fwoBetweenTo)
      End If

      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vOPS.GetRecordSetFields(OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll), "order_payment_schedule ops", vWhereFields, "due_date " & If(pLatest, "DESC", "ASC"))
      Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
      While vRS.Fetch
        vOPS = New OrderPaymentSchedule
        vOPS.InitFromRecordSet(mvEnv, vRS, OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll)
        mvScheduledPayments.Add(vOPS, vOPS.ScheduledPaymentNumber.ToString)
      End While
      vRS.CloseRecordSet()
    End Sub

    Public ReadOnly Property Loan() As Loan
      Get
        If mvLoan Is Nothing Then
          mvLoan = New Loan(mvEnv)
          mvLoan.InitFromPaymentPlan(PlanNumber)
        End If
        Return mvLoan
      End Get
    End Property

    Public ReadOnly Property LoanStatus() As ppYesNoCancel
      Get
        Return GetAutomatedPaymentStatus(mvClassFields(PaymentPlanFields.ofLoan).Value)
      End Get
    End Property

    Public ReadOnly Property CancelOneYearGiftApm As Boolean
      Get
        Return mvClassFields(PaymentPlanFields.ofCancelOneYearGiftApm).Bool
      End Get
    End Property

    Public Sub AddDetailFromParameters(ByVal pParams As CDBParameters)
      If pParams.Exists("DetailNumber") = False Then pParams.Add("DetailNumber", CDBField.FieldTypes.cftInteger)
      Dim vDetailNumber As Integer = pParams("DetailNumber").IntegerValue
      If vDetailNumber = 0 Then
        vDetailNumber = mvClassFields(PaymentPlanFields.ofNextDetailLine).IntegerValue
        pParams("DetailNumber").Value = vDetailNumber.ToString
      End If

      Dim vPPDetail As New PaymentPlanDetail
      vPPDetail.Init(mvEnv)
      vPPDetail.CreateSC(pParams)
      If pParams.ParameterExists("IsSubscription").Bool Then
        vPPDetail.Subscription = True
        If pParams.Exists("SubscriptionValidFrom") Then vPPDetail.SetSubscriptionValidFromTo(pParams("SubscriptionValidFrom").Value, pParams("SubscriptionValidTo").Value)
      End If

      mvDetails.Add(vPPDetail, GetNextDetailKey)
      If mvClassFields(PaymentPlanFields.ofNextDetailLine).IntegerValue <= vDetailNumber Then
        mvClassFields(PaymentPlanFields.ofNextDetailLine).Value = (vDetailNumber + 1).ToString
      End If
      mvClassFields(PaymentPlanFields.ofDetailLines).Value = mvDetails.Count().ToString

    End Sub

    ''' <summary>Write Off missed payment schedule payments.</summary>
    ''' <param name="pChangeDate">Date of change - payments must be older than this date to be written off.</param>
    ''' <returns>Returns the amount written off.</returns>
    ''' <remarks>Payments due on or before the payment date plus over-due days will be written off.</remarks>
    Public Function WriteOffMissedPayments(ByVal pChangeDate As Date) As Double
      'NOTE:  This is only used by PaymentPlanImport and UpdatePaymentPlan Web Service
      If mvWriteOffMissedPayments Then
        Dim vPFCode As String = mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).SetValue
        If vPFCode.Length = 0 Then vPFCode = mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).Value
        Dim vPF As PaymentFrequency = mvEnv.GetPaymentFrequency(vPFCode)
        Dim vParams As New CDBParameters
        Return WriteOffMissedPayments(vParams, vPF, pChangeDate, False)
      Else
        Return 0
      End If
    End Function

    ''' <summary>Write Off missed payment schedule payments.</summary>
    ''' <param name="pOrigPaymentFrequency">Original PaymentFrequency before any change.</param>
    ''' <param name="pChangeDate">Date of change - payments must be older than this date to be written off.</param>
    ''' <param name="pIsCMT">Is this Change Membership Type?</param>
    ''' <returns>Returns the amount written off.</returns>
    ''' <remarks>Payments due on or before the payment date plus over-due days will be written off.</remarks>
    Friend Function WriteOffMissedPayments(ByVal pParams As CDBParameters, ByVal pOrigPaymentFrequency As PaymentFrequency, ByVal pChangeDate As Date, ByVal pIsCMT As Boolean) As Double
      Dim vCurrentAmountWO As Double    'Amount written off within this renewal period

      Dim vContinue As Boolean = True
      If pIsCMT Then
        If mvSecondCMT Then vContinue = False 'Never write-off missed payments during the 2nd CMT
      Else
        If CDate(RenewalPeriodEnd) < Today Then vContinue = False 'Never write-off missed payments if the PaymentPlan is in the past
      End If

      If vContinue = True AndAlso Balance > 0 AndAlso ((pOrigPaymentFrequency.Frequency * pOrigPaymentFrequency.Interval) = 12 AndAlso pOrigPaymentFrequency.Frequency > 1) Then
        Dim vOPSDate As Date
        Dim vAmountWO As Double       'Total amount written off
        Dim vWriteOff As Double       'Amount written off for a specific payment

        Dim vOverdueDays As Integer = IntegerValue(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlPaymentWOOverDueDays))
        If vOverdueDays = 0 Then vOverdueDays = 1 'Database not upgraded
        Dim vRenewalPeriodEnd As Date = CDate(RenewalPeriodEnd)
        Dim vRenewalPeriodStart As Date = CDate(CalculateRenewalDate(vRenewalPeriodEnd.ToString(CAREDateFormat), False))

        If mvScheduledPayments Is Nothing Then GetScheduledPayments()
        Dim vTrans As Boolean = False   'Used to show whether we have started a transaction in here

        'If the write-off needs to include payments where claim date in future but before notify period
        'Then un-comment the code below
        'Dim vMinDate As Date = pChangeDate
        'If (DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes) AndAlso IntegerValue(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlAutoPayAdvancePeriod)) > 0 Then
        '  Dim vCheckDate As Date = If(pChangeDate < Today, pChangeDate, Today)
        '  vMinDate = mvEnv.GetPaymentPlanAutoPayDate(vCheckDate, If(DirectDebitStatus = ppYesNoCancel.ppYes, PaymentPlan.ppAutoPayMethods.ppAPMDD, PaymentPlan.ppAutoPayMethods.ppAPMCCCA), True)
        'End If
        'If vMinDate > pChangeDate Then pChangeDate = vMinDate

        For Each vOPS As OrderPaymentSchedule In mvScheduledPayments
          Select Case vOPS.ScheduledPaymentStatus
            Case OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid
              vWriteOff = 0
              vOPSDate = CDate(vOPS.DueDate)
              If (DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes) AndAlso vOPS.ClaimDate.Length > 0 Then vOPSDate = CDate(vOPS.ClaimDate)
              If vOPS.AmountOutstanding > 0 AndAlso vOPSDate.AddDays(vOverdueDays) <= pChangeDate Then
                'Payment is over-due, write off
                vWriteOff = vOPS.WriteOff(vOPS.AmountOutstanding)
                If vTrans = False AndAlso mvEnv.Connection.InTransaction = False Then vTrans = mvEnv.Connection.StartTransaction() 'Must do these updates within a transaction so that if the skip or the resulting process fails, it all gets rolled back
                vOPS.Save(mvEnv.User.UserID, True)
                vAmountWO += vWriteOff
                If CDate(vOPS.DueDate) >= vRenewalPeriodStart AndAlso CDate(vOPS.DueDate) <= vRenewalPeriodEnd Then vCurrentAmountWO += vWriteOff
              End If
          End Select
        Next
        vAmountWO = FixTwoPlaces(vAmountWO)
        vCurrentAmountWO = FixTwoPlaces(vCurrentAmountWO)
        If vTrans = True Then pParams.Add("WOTransactionStarted", "Y")

        If vAmountWO > 0 Then
          Dim vRenewalDate As String = RenewalDate
          Dim vRenewalPending As Boolean = RenewalPending
          Dim vBatch As New Batch(mvEnv)
          vBatch.Init()
          vBatch.SkipPaymentPlanPayment(PlanNumber, ContactNumber, AddressNumber, vAmountWO, mvEnv.User.UserID, True, True)
          'The PP has been updated by the SkipPaymentplanPayment but not in this class so need to update a few bits
          If RenewalPending = True AndAlso Balance >= RenewalAmount And FixTwoPlaces(Balance - vAmountWO) < RenewalAmount Then
            'Re-set RenewalDate & RenewalPending so that the update thinks they have changed.
            With mvClassFields
              .Item(PaymentPlanFields.ofRenewalDate).SetValue = CalculateRenewalDate(vRenewalDate, True)
              .Item(PaymentPlanFields.ofRenewalPending).SetValue = "N"
              .Item(PaymentPlanFields.ofRenewalDate).Value = vRenewalDate
              .Item(PaymentPlanFields.ofRenewalPending).Value = BooleanString(vRenewalPending)
            End With
          End If
          If pIsCMT = True Then
            mvClassFields.Item(PaymentPlanFields.ofBalance).SetValue = FixTwoPlaces(Balance - vAmountWO).ToString
            If Arrears > 0 Then
              'Align this class with the w/o
              'Reduce the arrears figure
              Dim vArrears As Double = Arrears
              If Arrears > vAmountWO Then
                vArrears = FixTwoPlaces(Arrears - vAmountWO)
              Else
                vArrears = 0
              End If
              mvClassFields.Item(PaymentPlanFields.ofArrears).SetValue = vArrears.ToString
              'Re-select all the Details as they will have changed
              mvDetails = Nothing
              InitPaymentPlanDetails(mvEnv, PlanNumber)
              SetDetailLineTypesForSC()
            End If
          Else
            mvClassFields.Item(PaymentPlanFields.ofBalance).Value = FixTwoPlaces(Balance - vAmountWO).ToString
          End If

          If pIsCMT = False AndAlso vTrans = True Then mvEnv.Connection.CommitTransaction() 'If we started a transaction and this is not CMT then commit the transaction
        End If
      End If

      Return vCurrentAmountWO   'Only return the amount written off within this renewal period

    End Function

    ''' <summary>Gets the number of months from pChangeDate to pRenewalPeriodEnd, taking into account the AutoPayAdvancePeriod days.</summary>
    ''' <param name="pFullTermMonths">The total number of months in the current renewal period</param>
    ''' <param name="pChangeDate">Date of change</param>
    ''' <param name="pRenewalPeriodEnd">Date of end of the renewal period</param>
    ''' <returns>The number of months.</returns>
    Private Function GetProRataMonthsRemaining(ByVal pFullTermMonths As Integer, ByVal pChangeDate As Date, ByVal pRenewalPeriodEnd As Date) As Integer
      Dim vNumberOfMonths As Integer = 0
      If DateDiff(DateInterval.DayOfYear, pChangeDate, pRenewalPeriodEnd) > 0 Then
        Dim vNoticeDays As Integer = IntegerValue(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlAutoPayAdvancePeriod))
        If vNoticeDays > 0 AndAlso (DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes) Then
          Dim vNPD As Date = pChangeDate
          Dim vDueDate As Date = vNPD
          While vNPD < pRenewalPeriodEnd
            If DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes Then
              If Date.TryParse(FindNextClaimDate(vNPD.ToString), vDueDate) = False Then vDueDate = vNPD
            End If
            If vDueDate >= pChangeDate Then
              If DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes Then
                If vDueDate > mvEnv.GetPaymentPlanAutoPayDate(Today, If(DirectDebitStatus = ppYesNoCancel.ppYes, PaymentPlan.ppAutoPayMethods.ppAPMDD, PaymentPlan.ppAutoPayMethods.ppAPMCCCA), Me.AutoPayBankAccount, True) Then
                  vNumberOfMonths += 1
                End If
              Else
                vNumberOfMonths += 1
              End If
            End If
            vNPD = CDate(AddMonths(pRenewalPeriodEnd.ToString, vNPD.ToString, 1))
          End While
          ' Need to handle CMT's for memberships that have not yet started - rare but possible!
          If vNumberOfMonths > pFullTermMonths Then vNumberOfMonths = pFullTermMonths
        Else
          vNumberOfMonths = CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Month, pChangeDate, pRenewalPeriodEnd))
          ' Need to handle CMT's for memberships that have not yet started - rare but possible!
          If vNumberOfMonths > pFullTermMonths Then
            vNumberOfMonths = pFullTermMonths
          Else
            If pChangeDate.AddDays(15) > DateSerial(pChangeDate.Year, (pChangeDate.Month + 1), pRenewalPeriodEnd.Day) Then
              'More than half way through month
              vNumberOfMonths -= 1
            End If
          End If
        End If
      End If

      Return vNumberOfMonths

    End Function

    ''' <summary>Sets whether missed payments need to be written off when maintaining a Payment Plan through Data Import.</summary>
    Public Sub SetWriteOffRequired(ByVal pWriteOffMissedPayments As Boolean)
      mvWriteOffMissedPayments = pWriteOffMissedPayments
      If mvWriteOffMissedPayments = True AndAlso mvClassFields.Item(PaymentPlanFields.ofCancellationReason).Value.Length > 0 Then mvWriteOffMissedPayments = False 'Cannot write-off if the PaymentPlan is cancelled
      Dim vPFCode As String = If(mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged = True AndAlso mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).SetValue.Length > 0, mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).SetValue, PaymentFrequencyCode)
      Dim vPF As PaymentFrequency = mvEnv.GetPaymentFrequency(vPFCode)
      If mvWriteOffMissedPayments = True AndAlso Not (((vPF.Frequency * vPF.Interval) = 12 AndAlso vPF.Frequency > 1)) Then mvWriteOffMissedPayments = False 'Cannot write-off if the PaymentPlan is paid annually
    End Sub

    ''' <summary>Re-calculate the FrequencyAmount based upon the current RenewalAmount and PaymentFrequency</summary>
    Public Sub ReCalculateFrequencyAmount(ByVal pCalcAmount As Double)
      mvClassFields.Item(PaymentPlanFields.ofFrequencyAmount).Value = CalcFrequencyAmount(pCalcAmount, PaymentFrequencyFrequency).ToString
    End Sub

    ''' <summary>Updates the one_year_gift flag for gifted non group membership</summary>
    Public Sub UpdateOneYearGift(ByVal pOneYearGift As Boolean)
      If IsCancelled = False AndAlso PlanType = CDBEnvironment.ppType.pptMember AndAlso GiftMembership AndAlso MembershipType.MembersPerOrder <> 0 Then
        mvClassFields(PaymentPlanFields.ofOneYearGift).Bool = pOneYearGift
      End If
    End Sub

    Public Sub SetCancelOneYearGiftApm()
      mvClassFields(PaymentPlanFields.ofCancelOneYearGiftApm).Value = "Y"
    End Sub

    ''' <summary>Gets a boolean flag indicating whether any Payment Plan Details of the specified type have pricing information set on them.</summary>
    ''' <param name="pDetailTypes">The PaymentPlanDetailTypes to check</param>
    ''' <returns>True if any of the Detail lines contain pricing information, otherwise False</returns>
    ''' <remarks>This is being used by CMT only.</remarks>
    Private ReadOnly Property DetailsContainPricingInfo(ByVal pDetailTypes As PaymentPlanDetail.PaymentPlanDetailTypes) As Boolean
      Get
        Dim vHasPricingInfo As Boolean
        For Each vPPD As PaymentPlanDetail In mvDetails
          If (vPPD.DetailType And pDetailTypes) > 0 Then
            If vPPD.HasPriceInfo Then vHasPricingInfo = True
          End If
        Next
        Return vHasPricingInfo
      End Get
    End Property

    Private Sub UpdateMembers(ByVal pConn As CDBConnection, ByVal pUpdateFields As CDBFields, ByVal pWhereFields As CDBFields, ByVal pErrorIfNoRecords As Boolean)
      If mvEnv.AuditStyle = CDBEnvironment.AuditStyleTypes.ausExtended Then
        Dim vMember As New Member
        vMember.Init(mvEnv)
        Dim vSQL As New SQLStatement(pConn, vMember.GetRecordSetFields(Access.Member.MemberRecordSetTypes.mrtAll), "members m", pWhereFields)
        Dim vRS As CDBRecordSet = vSQL.GetRecordSet
        While vRS.Fetch
          vMember.InitFromRecordSet(mvEnv, vRS, Access.Member.MemberRecordSetTypes.mrtAll)
          vMember.Update(pUpdateFields)
          vMember.SaveChanges("", True)
        End While
        vRS.CloseRecordSet()
      Else
        pConn.UpdateRecords("members", pUpdateFields, pWhereFields, pErrorIfNoRecords)
      End If
    End Sub

    ''' <summary>Gets the length of the renewal term appropriate for the term units.</summary>
    ''' <returns>Number of weeks for term units of weekly, otherwise the number of months.</returns>
    Friend ReadOnly Property TermLength() As Integer
      Get
        Dim vTermMonths As Integer = Term
        If vTermMonths <= 0 Then
          vTermMonths = Math.Abs(vTermMonths)
        Else
          If PlanType = CDBEnvironment.ppType.pptMember Then
            Select Case MembershipType.PaymentTerm
              Case Access.MembershipType.MembershipTypeTerms.mtfMonthlyTerm, Access.MembershipType.MembershipTypeTerms.mtfWeeklyTerm
                'Leave as is
              Case Else
                vTermMonths = vTermMonths * 12
            End Select
          Else
            Select Case TermUnits
              Case OrderTermUnits.otuMonthly, OrderTermUnits.otuWeekly
                'leave as is
              Case Else
                vTermMonths = vTermMonths * 12
            End Select
          End If
        End If
        Return vTermMonths
      End Get
    End Property

    ''' <summary>Is this an update to the Payment Plan after Renewals / Reminders has been run but before the renewal date has been reached?</summary>
    Private Function IsUpdateAfterRenewal(ByVal pCreationReason As OrderPaymentSchedule.OrderPaymentScheduleCreationReasons, ByVal pScheduleStartDate As Date, ByVal pNextPayDue As Date) As Boolean
      If pCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance _
      AndAlso (CDate(RenewalDate) > pNextPayDue) AndAlso (pScheduleStartDate < CDate(RenewalDate)) _
      AndAlso mvAutoPaymentCreated = False AndAlso RenewalPending = True _
      AndAlso (CDate(RenewalDate) > CDate(StartDate)) AndAlso (CDate(RenewalDate) > Today) _
      AndAlso ((Balance > RenewalAmount) OrElse mvClassFields.Item(PaymentPlanFields.ofBalance).ValueChanged = True) _
      AndAlso Balance > 0 AndAlso DoubleValue(mvClassFields.Item(PaymentPlanFields.ofBalance).SetValue) > 0 Then
        Return True
      Else
        Return False
      End If
    End Function

    ''' <summary>Get the latest OPS with status of Due, PartPaid or Provisional due before pRenewalDate</summary>
    ''' <returns>Latest OPS</returns>
    ''' <remarks>Called from DeleteOPSForRegenerate for PPMaintenance</remarks>
    Private Function GetLatestDueOPS(ByVal pRenewalDate As String) As OrderPaymentSchedule
      Dim vOPS As New OrderPaymentSchedule
      vOPS.Init(mvEnv)

      Dim vWhereFields As New CDBFields(New CDBField("order_number", PlanNumber))
      vWhereFields.Add("scheduled_payment_status", "'D','P','V'", CType(CDBField.FieldWhereOperators.fwoIn + CDBField.FieldWhereOperators.fwoOpenBracket, CDBField.FieldWhereOperators))
      vWhereFields.Add("schedule_creation_reason", "AP", CType(CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
      vWhereFields.Add("due_date", CDBField.FieldTypes.cftDate, pRenewalDate, CDBField.FieldWhereOperators.fwoLessThan)

      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vOPS.GetRecordSetFields(OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll), "order_payment_schedule ops", vWhereFields, "due_date DESC")
      Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
      If vRS.Fetch Then
        vOPS = New OrderPaymentSchedule
        vOPS.InitFromRecordSet(mvEnv, vRS, OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll)
      End If
      vRS.CloseRecordSet()

      Return vOPS
    End Function

    ''' <summary>Gets the change date to use when the payment frequency has changed.</summary>
    ''' <param name="pChangeDate">Date the change is to take effect.</param>
    ''' <remarks>Used by Payment Plan Maintenance to decide what the next instalment date will be when the Payment Frequency has changed.</remarks>
    Private Function GetNextInstalmentDueDate(ByVal pChangeDate As Date) As Date
      Dim vNewChangeDate As Date = pChangeDate
      If mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).ValueChanged = True AndAlso mvClassFields.Item(PaymentPlanFields.ofOrderTerm).ValueChanged = False Then
        Dim vPayFrequencyString As String = mvClassFields.Item(PaymentPlanFields.ofPaymentFrequency).SetValue
        Dim vOldPayFrequency As PaymentFrequency = mvEnv.GetPaymentFrequency(vPayFrequencyString)
        vPayFrequencyString = PaymentFrequencyCode
        Dim vNewPayFrequency As PaymentFrequency = mvEnv.GetPaymentFrequency(vPayFrequencyString)
        If vOldPayFrequency.Period = vNewPayFrequency.Period AndAlso vOldPayFrequency.Frequency > 1 AndAlso vNewPayFrequency.Frequency > vOldPayFrequency.Frequency Then
          'The new number of instalments is more then the old number of instalments
          If (mvProcessCMT = False AndAlso mvEnv.GetConfig("fp_ppm_freq_changes_due_date").ToUpper = "ORIGINAL") OrElse (mvProcessCMT = True) Then
            'Find the next instalment due date for the original payment frequency
            Dim vRenewalDate As String = RenewalPeriodEnd
            If (Term < 0 AndAlso System.Math.Abs(Term) > 12) AndAlso (mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlApplyIncentiveFreePeriod) = "A" AndAlso ResetOrderTerm <> ppResetOrderTerm.pprotNo) Then
              'The incentive free period will be applied after the payments have been made
              'So reduce the date for OPS calculations by the number of extra months
              vRenewalDate = CalculateRenewalDate(vRenewalDate, False)
              vRenewalDate = CDate(vRenewalDate).AddYears(1).ToString(CAREDateFormat)
            End If
            Dim vNextPayDue As Date = CDate(vRenewalDate)
            vNewChangeDate = vNextPayDue

            While vNextPayDue > pChangeDate
              If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                vNextPayDue = vNextPayDue.AddDays(-vOldPayFrequency.Interval)
              Else
                'Use vRenewalDate instead of BaseDate to ensure that dates are correct if the day is changed
                'and the day of StartDate is different to day of RenewalDate
                vNextPayDue = CDate(AddMonths(vRenewalDate, vNextPayDue.ToString(CAREDateFormat), -vOldPayFrequency.Interval))
              End If
                If DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes Then
                  'Can this payment be changed due to claimDate in future
                  Dim vClaimDate As Date = CDate(Me.FindNextClaimDate(vNextPayDue.ToString(CAREDateFormat)))
                  If vClaimDate > pChangeDate Then  'a quick check before checking the advance notice period rule
                    Dim vAutoPayMethod As ppAutoPayMethods
                    If DirectDebitStatus = ppYesNoCancel.ppYes Then
                      vAutoPayMethod = ppAutoPayMethods.ppAPMDD
                    Else
                      vAutoPayMethod = ppAutoPayMethods.ppAPMCCCA
                    End If
                  If vClaimDate > mvEnv.GetPaymentPlanAutoPayDate(Today, vAutoPayMethod, Me.AutoPayBankAccount, True) Then
                    vNewChangeDate = vNextPayDue
                  End If
                End If
              ElseIf vNextPayDue >= pChangeDate Then
                vNewChangeDate = vNextPayDue
              End If
            End While
          End If
        End If
      End If

      Return vNewChangeDate

    End Function

    ''' <summary>When re-creating the payment schedule for CMT or PPMaintenance check if the next ClaimDate is after the minimum delete date.</summary>
    Private Function CheckOPSMinDeleteDate(ByVal pDeleteFromDate As String, ByVal pDeleteToDate As String, ByVal pMinDeleteDate As Date) As Date
      'Check to see if Due Date of previous payment would give rise to a Claim Date after vMinDeleteDate
      'Find first Due Date that is before vMinDeleteDate
      Dim vNPDDate As Date = CDate(pDeleteToDate)
      While vNPDDate >= pMinDeleteDate
        If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
          vNPDDate = vNPDDate.AddDays(-PaymentFrequencyInterval)
        Else
          'Use vRenewalDate instead of BaseDate to ensure that dates are correct if the day is changed
          'and the day of StartDate is different to day of RenewalDate
          vNPDDate = CDate(AddMonths(pDeleteToDate, vNPDDate.ToString(CAREDateFormat), -PaymentFrequencyInterval))
        End If
      End While
      If vNPDDate < CDate(pDeleteFromDate) Then
        'If before our start date then advance forward
        If TermUnits = OrderTermUnits.otuWeekly Or PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
          vNPDDate = vNPDDate.AddDays(PaymentFrequencyInterval)
        Else
          'Use vRenewalDate instead of BaseDate to ensure that dates are correct if the day is changed
          'and the day of StartDate is different to day of RenewalDate
          vNPDDate = CDate(AddMonths(pDeleteToDate, vNPDDate.ToString(CAREDateFormat), PaymentFrequencyInterval))
        End If
      End If
      If vNPDDate < pMinDeleteDate Then
        'Due Date is before vMinDeleteDate so see what the Claim Date will be
        'If Claim Date after vMinDeleteDate then use this Due Date
        Dim vClaimDate As String = FindNextClaimDate(vNPDDate.ToString(CAREDateFormat))
        If IsDate(vClaimDate) AndAlso CDate(vClaimDate) > pMinDeleteDate Then pMinDeleteDate = vNPDDate
      End If
      Return pMinDeleteDate
    End Function

    ''' <summary>Updates the payment plan and OPS on changing the auto payment method start date.</summary>
    Public Sub UpdateFromAutoPayStartDate()

      If PlanType <> CDBEnvironment.ppType.pptLoan Then
        Dim vTrans As Boolean = False
        If mvEnv.Connection.InTransaction = False Then
          mvEnv.Connection.StartTransaction()
          vTrans = True
        End If

        Dim vAutoPaymethod = False
        If DirectDebitStatus = PaymentPlan.ppYesNoCancel.ppYes Then
          mvDirectDebit = New DirectDebit
          With mvDirectDebit
            .InitFromPaymentPlan(mvEnv, PlanNumber)
            SetAutoPayMethod(ppAutoPayMethods.ppAPMDD, "", (mvDirectDebit.BankAccount), (mvClassFields(PaymentPlanFields.ofClaimDay).Value))
            vAutoPaymethod = True
          End With
        End If
        If StandingOrderStatus = PaymentPlan.ppYesNoCancel.ppYes And vAutoPaymethod = False Then
          mvStandingOrder = New StandingOrder
          With mvStandingOrder
            .InitFromPaymentPlan(mvEnv, PlanNumber)
            SetAutoPayMethod(ppAutoPayMethods.ppAPMSO)
            vAutoPaymethod = True
          End With
        End If
        If CreditCardStatus = PaymentPlan.ppYesNoCancel.ppYes And vAutoPaymethod = False Then
          mvCreditCardAuthority = New CreditCardAuthority
          With mvCreditCardAuthority
            .InitFromPaymentPlan(mvEnv, PlanNumber)
            SetAutoPayMethod(ppAutoPayMethods.ppAPMCCCA, "", "", (mvClassFields(PaymentPlanFields.ofClaimDay).Value))
            vAutoPaymethod = True
          End With
        End If

        RegenerateScheduledPayments(OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance, mvClassFields(PaymentPlanFields.ofNextPaymentDue).SetValue)
        SaveChanges()

        If vTrans Then mvEnv.Connection.CommitTransaction()
      End If
    End Sub

    ''' <summary>Can the cancellation of a Member allow the Direct Debit payer to change?</summary>
    ''' <param name="pMember">The <see cref="Member">Member</see> being cancelled.</param>
    ''' <param name="pCancellationReasonCode">The cancellation reason code for the cancellation.</param>
    ''' <param name="pNewDDPayer">The <see cref="Contact">Contact</see> that will become the new Direct Debit payer. This will either be set to a valid <see cref="Contact">Contact</see> or Nothing.</param>
    ''' <returns>True if the Direct Debit payer can be changed, otherwise False.</returns>
    Public Function CanChangeMemberDDPayer(ByVal pMember As Member, ByVal pCancellationReasonCode As String, ByRef pNewDDPayer As Contact) As Boolean
      Dim vCanChange As Boolean = False

      pNewDDPayer = Nothing
      If DirectDebitStatus = ppYesNoCancel.ppYes AndAlso pMember.MembershipType.MembersPerOrder = 2 AndAlso pCancellationReasonCode.Length > 0 Then
        'Joint membership paid by DD
        '(1) Check the DD payer is either the current member contact or a joint contact
        Dim vGotContact As Boolean = False
        Dim vDDPayer As Contact = DirectDebit.Payer
        If vDDPayer.ContactNumber = pMember.ContactNumber Then
          vGotContact = True
        ElseIf vDDPayer.ContactType = Contact.ContactTypes.ctcJoint Then
          Dim vJointLinks As CollectionList(Of ContactLink) = vDDPayer.GetJointLinks()
          For Each vLink As ContactLink In vJointLinks
            If vLink.ContactNumber1 = vDDPayer.ContactNumber AndAlso vLink.ContactNumber2 = pMember.ContactNumber Then
              vGotContact = True
            End If
            If vGotContact Then Exit For
          Next
        End If

        If vGotContact Then
          '(2) Check there is another live main contact (not an associate)
          If CurrentMembers.Count = 0 Then LoadMembers()
          If CurrentMembers.Count > 1 Then
            Dim vOtherMember As Member = Nothing
            Dim vGotMember As Boolean = False
            If pMember.MembershipType.IsAssociateType() = False Then
              For Each vOtherMember In CurrentMembers
                If pMember.ContactNumber <> vOtherMember.ContactNumber AndAlso pMember.MembershipTypeCode.Equals(vOtherMember.MembershipTypeCode, System.StringComparison.CurrentCultureIgnoreCase) Then
                  If vOtherMember.CancellationReason.Length = 0 Then vGotMember = True
                End If
                If vGotMember Then Exit For
              Next
            End If
            If vGotMember = True AndAlso vOtherMember IsNot Nothing AndAlso vOtherMember.Existing Then
              '(3) Check cancellation reason is either:
              ' (a) Move DD Member Cancel Reason from Membership Controls table, or
              ' (b) Deceased cancellation reason
              If pCancellationReasonCode.Equals(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlMoveDDMemberCancelReason), System.StringComparison.CurrentCultureIgnoreCase) Then
                vCanChange = True
              ElseIf mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDeceasedStatus).Length > 0 Then
                Dim vAttrs As String = "cancellation_reason, cancellation_reason_desc, status"
                Dim vWhereFields As New CDBFields(New CDBField("status", mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDeceasedStatus)))
                Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vAttrs, "cancellation_reasons cr", vWhereFields)
                Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
                While vRS.Fetch = True AndAlso vCanChange = False
                  If pCancellationReasonCode.Equals(vRS.Fields(1).Value, System.StringComparison.CurrentCultureIgnoreCase) Then vCanChange = True
                End While
                vRS.CloseRecordSet()
              End If
              If vCanChange Then pNewDDPayer = vOtherMember.Contact
            End If
          End If
        End If
      End If

      Return vCanChange
    End Function

    ''' <summary>Used by Member cancellation and Change Membership Type to determine whether the Direct Debit payer can be changed.</summary>
    ''' <param name="pMember">Current <see cref="Member">Member</see> record.</param>
    ''' <param name="pNewDDPayer">The <see cref="Contact">Contact</see> that will become the new Direct Debit payer. This will either be set to a valid <see cref="Contact">Contact</see> or Nothing.</param>
    ''' <param name="pCancellationReason">Member cancellation reason.</param>
    ''' <param name="pChangeDDPayer">User instruction on whether Direct Debit payer can be changed.</param>
    ''' <param name="pDirectDebitNewPayerContactNumber">User chosen new Direct Debit payer contact number.</param>
    ''' <param name="pCMTMembershipType"><see cref="MembershipType">MembershipType</see> to change to. Only used by Change Membership Type.</param>
    Private Sub ValidateChangeDDPayer(ByVal pMember As Member, ByRef pNewDDPayer As Contact, ByVal pCancellationReason As String, ByRef pChangeDDPayer As Nullable(Of Boolean), ByVal pDirectDebitNewPayerContactNumber As Integer, ByVal pCMTMembershipType As MembershipType)
      If pChangeDDPayer.HasValue = False OrElse pChangeDDPayer.Value = True Then
        Dim vCanChange As Boolean = False
        Dim vIsCMT As Boolean = False
        If pCMTMembershipType Is Nothing Then
          vCanChange = CanChangeMemberDDPayer(pMember, pCancellationReason, pNewDDPayer)
        Else
          vIsCMT = True
          vCanChange = CanChangeCMTDDPayer(pMember, pCancellationReason, pCMTMembershipType, pNewDDPayer)
        End If
        If vCanChange Then
          'Validate
          If pChangeDDPayer.HasValue = False Then
            'DD payer can be changed but user has not said whether it should be changed
            RaiseError(If(vIsCMT = True, DataAccessErrors.daeCMTMemberWithDD, DataAccessErrors.daeCancelMemberWithDD))
          Else
            If pDirectDebitNewPayerContactNumber = 0 Then pDirectDebitNewPayerContactNumber = pNewDDPayer.ContactNumber
            If Not (pNewDDPayer.Existing AndAlso pNewDDPayer.ContactNumber = pDirectDebitNewPayerContactNumber) Then
              'Direct Debit payer can be changed but not to the supplied contact number
              RaiseError(DataAccessErrors.daeChangeDDPayerIncorrectContact)
            End If
          End If
        Else
          If vIsCMT = False AndAlso pChangeDDPayer.HasValue AndAlso pChangeDDPayer.Value = True Then
            'User has asked for the Direct Debit payer to be changed but we cannot change the payer (CMT does not want to error here)
            RaiseError(DataAccessErrors.daeCancelChangeDDPayerNotMet)
          Else
            pChangeDDPayer = False
          End If
        End If
      End If
    End Sub

    Public Sub ValidateCMTChangeDDPayer(ByVal pParams As CDBParameters, ByVal pSummaryMembers As CDBCollection, ByVal pMembershipType As MembershipType, ByRef pChangeDDPayer As Nullable(Of Boolean), ByRef pNewDDPayer As Contact)
      If pParams.HasValue("ChangeDDPayer") Then pChangeDDPayer = pParams("ChangeDDPayer").Bool
      If pChangeDDPayer.HasValue = False OrElse pChangeDDPayer.Value = True Then
        Dim vKeepMember As Member = Nothing
        Dim vFoundMember As Boolean = False
        'Retrieve the Member to keep from the collection of original members
        For Each vOrigMember As Member In CurrentMembers
          For Each vNewMember2 As Member In pSummaryMembers
            If (vOrigMember.MembershipNumber = vNewMember2.MembershipNumber) AndAlso vNewMember2.MembershipTypeCode.Equals(pMembershipType.MembershipTypeCode, System.StringComparison.CurrentCultureIgnoreCase) Then
              vKeepMember = vOrigMember
              vFoundMember = True
            End If
            If vFoundMember Then Exit For
          Next
          If vFoundMember Then Exit For
        Next
        If vKeepMember Is Nothing Then
          pChangeDDPayer = False
          If pParams.Exists("ChangeDDPayer") Then pParams("ChangeDDPayer").Value = "N"
        Else
          ValidateChangeDDPayer(vKeepMember, pNewDDPayer, pParams("CancellationReason").Value, pChangeDDPayer, pParams("DirectDebitNewPayerContactNumber").IntegerValue, pMembershipType)
        End If
        If pChangeDDPayer.HasValue = False Then pChangeDDPayer = False
      End If
    End Sub

    Public ReadOnly Property OriginalPriceDate As String
      Get
        If mvOriginalPriceDate Is Nothing Then
          If Me.RenewalPending Then
            mvOriginalPriceDate = Me.RenewalDate
          Else
            Select Case Me.TermUnits
              Case PaymentPlan.OrderTermUnits.otuMonthly
                mvOriginalPriceDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Month, -CDbl(Me.Term), CDate(Me.RenewalDate)))
              Case PaymentPlan.OrderTermUnits.otuWeekly
                mvOriginalPriceDate = CStr(DateAdd(Microsoft.VisualBasic.DateInterval.Weekday, -CDbl(Me.Term), CDate(Me.RenewalDate)))
              Case Else
                mvOriginalPriceDate = CDate(RenewalDate).AddYears(-1).ToString(CAREDateFormat)
            End Select
          End If
        End If
        Return mvOriginalPriceDate
      End Get
    End Property

    Public Function GetMembershipDate() As Date
      Dim vPriceDate As Date
      If IsDate(StartDate) = True And mvEnv.GetConfig("me_membership_price_date") = "START_DATE" Then
        If DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(TodaysDate()), CDate(StartDate)) > 0 Then
          vPriceDate = CDate(StartDate)
        Else
          vPriceDate = mvJoinDate
        End If
      Else
        vPriceDate = mvJoinDate
      End If
      Return vPriceDate
    End Function

    ''' <summary>Get the payment schedule due date taking into account any offset months on the <seealso cref="PaymentFrequency">PaymentFrequency</seealso>.</summary>
    ''' <param name="pDueDate">Calculated due date.</param>
    ''' <returns>Due date taking into account any offset months</returns>
    Private Function GetProvisionalOPSDueDate(ByVal pDueDate As Date) As Date
      Dim vNewDueDate As Date = pDueDate
      Dim vPFCode As String = PaymentFrequencyCode
      Dim vPaymentFrequency As PaymentFrequency = mvEnv.GetPaymentFrequency(vPFCode)
      Dim vOffset As Integer = vPaymentFrequency.GetCalculatedOffsetMonths()
      If vOffset <> 0 Then
        Dim vLastPayDate As Date = Date.Parse(CalculateRenewalDate(pDueDate.ToString(CAREDateFormat), True))
        vLastPayDate = Date.Parse(AddMonths(pDueDate.ToString(CAREDateFormat), vLastPayDate.ToString(CAREDateFormat), vOffset))
        vNewDueDate = vLastPayDate
        For vCount As Integer = PaymentFrequencyFrequency To 1 Step -1
          vNewDueDate = Date.Parse(AddMonths(pDueDate.ToString(CAREDateFormat), vNewDueDate.ToString(CAREDateFormat), -PaymentFrequencyInterval))
        Next
        If vNewDueDate.CompareTo(pDueDate) < 0 Then vNewDueDate = pDueDate
      End If
      Return vNewDueDate
    End Function

    ''' <summary>Gets the <see cref="BankAccount"/> for the auto payment method.</summary>
    Public ReadOnly Property AutoPayBankAccount() As BankAccount
      Get
        Dim vBankAccountCode As String = String.Empty
        If DirectDebitStatus = ppYesNoCancel.ppYes Then
          vBankAccountCode = DirectDebit.BankAccount
        ElseIf CreditCardStatus = ppYesNoCancel.ppYes Then
          vBankAccountCode = CreditCardAuthority.BankAccount
        ElseIf StandingOrderStatus = ppYesNoCancel.ppYes Then
          vBankAccountCode = StandingOrder.BankAccount
        End If
        Dim vBankAccount As BankAccount = Nothing
        If vBankAccountCode.Length > 0 Then vBankAccount = mvEnv.BankAccount(vBankAccountCode)
        If vBankAccount Is Nothing Then
          vBankAccount = New BankAccount(mvEnv)
          vBankAccount.Init()
        End If

        Return vBankAccount

      End Get
    End Property

    ''' <summary>Gets the default auto payment start date.</summary>
    ''' <param name="pBaseDate">The base date the calculations will use.  E.g. Plan start date.</param>
    ''' <param name="pAutoPayMethod">The type of auto payment method.</param>
    ''' <param name="pBankAccount">The <see cref="BankAccount"/> for the auto payment method.</param>
    ''' <param name="pMembershipTypeCode">Used when creating a membership. The membership type being created.</param>
    ''' <param name="pMemberJoinedDate">Used when creating a membership. The members joined date.</param>
    ''' <param name="pTransactionType">The Trader transaction-type code.</param>
    ''' <param name="pStartMonth">Used when creating subscriptions and regular donations. This is the month the Payment Plan and any auto payment method tarts</param>
    ''' <returns>Calculated default start date for the auto payment method.</returns>
    ''' <remarks>Class must have been initialised prior to calling this method.</remarks>
    Public Function GetAutoPaymentDefaultStartDate(ByVal pBaseDate As Date, ByVal pAutoPayMethod As ppAutoPayMethods, ByVal pBankAccount As BankAccount, ByVal pMembershipTypeCode As String, ByVal pMemberJoinedDate As Nullable(Of Date), ByVal pTransactionType As String, ByVal pStartMonth As Nullable(Of Integer)) As Date
      Dim vAutoPayDate As Nullable(Of Date) = Nothing
      Dim vDateDefaultMethod As DDStartDateDefaultMethods = DDStartDateDefaultMethods.Unknown

      If String.IsNullOrEmpty(pTransactionType) = True AndAlso String.IsNullOrEmpty(pMembershipTypeCode) = False Then pTransactionType = "MEMB"

      Select Case pTransactionType.ToUpper
        Case "MEMB", "CMEM"
          Me.SetMember(pMembershipTypeCode, String.Empty)
          If FixedRenewalCycle = True AndAlso PreviousRenewalCycle = True _
          AndAlso (MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfAnnualTerm OrElse MembershipType.PaymentTerm = MembershipType.MembershipTypeTerms.mtfLifeTerm) Then
            vDateDefaultMethod = DDStartDateDefaultMethods.UsingPayPlanStartDateOrToday   'Don't check the config
            If pMemberJoinedDate.HasValue Then pBaseDate = pMemberJoinedDate.Value
          End If

        Case "SUBS", "DONR"
          If pAutoPayMethod.Equals(ppAutoPayMethods.ppAPMDD) OrElse pAutoPayMethod.Equals(ppAutoPayMethods.ppAPMCCCA) Then
            If pStartMonth.HasValue Then
              'Auto pay date is Day(PP StartDate) + StartMonth + Year(PP Start Date)
              vAutoPayDate = DateSerial(pBaseDate.Year, pStartMonth.Value, pBaseDate.Day)
            End If
          End If
      End Select

      If vAutoPayDate.HasValue = False Then
        If vDateDefaultMethod.Equals(DDStartDateDefaultMethods.Unknown) Then
          vDateDefaultMethod = DDStartDateDefaultMethods.UsingPayPlanStartDateOrToday
          If pAutoPayMethod.Equals(ppAutoPayMethods.ppAPMDD) Then
            'Check 'dd_start_date_default_method' configuration option for DD's
            If mvEnv.GetConfig("dd_start_date_default_method", "STARTDATEORTODAY").ToUpper.Equals("STARTDATE") Then vDateDefaultMethod = DDStartDateDefaultMethods.UsingPayPlanStartDate
          End If
        End If

        If vDateDefaultMethod.Equals(DDStartDateDefaultMethods.UsingPayPlanStartDateOrToday) Then
          If Today.CompareTo(pBaseDate) > 0 Then pBaseDate = Today 'use latest date
        End If

        vAutoPayDate = mvEnv.GetPaymentPlanAutoPayDate(pBaseDate, pAutoPayMethod, pBankAccount)
      End If

      If vAutoPayDate.HasValue = False Then vAutoPayDate = Today

      Return vAutoPayDate.Value

    End Function

#Region " Loans "

    ''' <summary>Add a Loans record to the Payment Plan.</summary>
    ''' <param name="pParams">CDBParameters collection containing Loan details</param>
    Private Sub AddLoan(ByVal pParams As CDBParameters)
      If pParams.Exists("OrderNumber") = False Then pParams.Add("OrderNumber", PlanNumber)
      If pParams.Exists("InterestCalculatedDate") = False AndAlso pParams.Exists("StartDate") = True Then pParams.Add("InterestCalculatedDate", CDBField.FieldTypes.cftDate, pParams("StartDate").Value)
      mvLoan = New Loan(mvEnv)
      mvLoan.Create(pParams)
      mvClassFields(PaymentPlanFields.ofLoan).Value = "Y"

      'Update FrequencyAmount
      SetLoanFrequencyAmount()

    End Sub

    ''' <summary>Calculate the interest on the Loan from the calculation date to the end of the Loan.</summary>
    ''' <remarks>This also re-creates the payment schedule</remarks>
    Public Sub CalculateLoanInterest(ByVal pAmendedBy As String, ByVal pAudit As Boolean)
      CalculateLoanInterest(pAmendedBy, pAudit, TodaysDate, False)
    End Sub
    ''' <summary>Calculate the interest on the Loan from the calculation date to the end of the Loan.</summary>
    ''' <remarks>This also re-creates the payment schedule</remarks>
    Public Sub CalculateLoanInterest(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pCalculationDate As String)
      CalculateLoanInterest(pAmendedBy, pAudit, pCalculationDate, False)
    End Sub
    ''' <summary>Calculate the interest on the Loan from the calculation date to the end of the Loan.</summary>
    ''' <remarks>This also re-creates the payment schedule</remarks>
    Friend Sub CalculateLoanInterest(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pCalculationDate As String, ByVal pFromBatchPosting As Boolean)
      Dim vCapitalAmount As Double = Loan.LoanAmount        'Total capital amount of the Loan (this is the amount borrowed)
      Dim vCapitalRemaining As Double = 0                   'The amount of the capital that is still unpaid
      Dim vInterestAccrued As Double = 0                    'The amount of interest that has been accrued (calculated) to date & will be added to the PP
      Dim vLoanFeesOutstanding As Double = 0                'The amount of any additinal fees that may have been added to the Loan

      If mvDetails.Count = 0 Then InitPaymentPlanDetails(mvEnv, PlanNumber)
      For Each vPPDetail As PaymentPlanDetail In mvDetails
        If vPPDetail.AccruesInterest Then
          vCapitalRemaining += vPPDetail.Balance
        ElseIf vPPDetail.LoanInterest Then
          vInterestAccrued += vPPDetail.Balance
        Else
          vLoanFeesOutstanding += vPPDetail.Balance
        End If
      Next

      mvLoan.StartDate = StartDate
      If mvExisting Then
        'Existing Loan - calculate the interest accrued since the last calculation date and update the Interest detail line.
        'This interest is then used in the calculations for the OPS.
        'vCapitalRemaining = FixTwoPlaces(vCapitalRemaining + vInterestAccrued)
        If CDate(pCalculationDate) >= mvLoan.LoanCapitalisationDate AndAlso mvLoan.RequiresCapitalisation = True Then
          Dim vCapitalisedAmount As Double = CapitaliseLoan(vCapitalRemaining, vInterestAccrued)
          vCapitalRemaining = FixTwoPlaces(vCapitalRemaining + vCapitalisedAmount)
          vInterestAccrued = FixTwoPlaces(vInterestAccrued - vCapitalisedAmount)
          If vInterestAccrued < 0 Then vInterestAccrued = 0
        End If
        Dim vInterest As Double = CalculateLoanPaymentInterest(Date.Parse(mvLoan.InterestCalculatedDate), CDate(pCalculationDate), vCapitalRemaining)
        If vInterest > 0 Then
          For Each vPPDetail As PaymentPlanDetail In mvDetails
            If vPPDetail.LoanInterest Then
              vPPDetail.SetAmount(FixTwoPlaces(DoubleValue(vPPDetail.Amount) + vInterest).ToString)
              vPPDetail.SetImportBalance(FixTwoPlaces(vPPDetail.Balance + vInterest))
              Exit For
            End If
          Next
          'vCapitalRemaining = FixTwoPlaces(vCapitalRemaining + vInterest)
          mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = FixTwoPlaces(Balance + vInterest)   'Dont't use SetBalance as this will re-calculate the FrequencyAmount which we don't need to do
          mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue = FixTwoPlaces(RenewalAmount + vInterest)
        End If
      End If

      Dim vTrans As Boolean = False
      If mvEnv.Connection.InTransaction = False Then
        mvEnv.Connection.StartTransaction()
        vTrans = True
      End If

      If pFromBatchPosting = False Then RegenerateLoanScheduledPayments(pAmendedBy, pAudit)

      If mvExisting = True AndAlso mvCreated = False Then
        'Don't need to do this if we have just created the Loan
        mvLoan.SetInterestCalculated(pCalculationDate)
        mvLoan.Save(pAmendedBy, pAudit)

        If pFromBatchPosting Then
          'Just SaveChanges as we must leave all classes initialised ready for use
          For Each vPPD As PaymentPlanDetail In mvDetails
            vPPD.SaveChanges(pAmendedBy, pAudit)
          Next
          SaveChanges(pAmendedBy, pAudit)
        End If
      End If
      If vTrans Then mvEnv.Connection.CommitTransaction()

    End Sub

    ''' <summary>Calculate the interest this Loan payment includes.</summary>
    ''' <param name="pDateOfLastPayment">The date the previous payment was received.</param>
    ''' <param name="pPaymentDate">The date this payment was received.</param>
    ''' <param name="pLoanAmount">The loan amount that has accrued interest</param>
    ''' <returns>The interest payable by this payment.</returns>
    ''' <remarks>If pPaymentDate is before pDateOfLastPayment then zero will be returned.</remarks>
    Friend Function CalculateLoanPaymentInterest(ByVal pDateOfLastPayment As Date, ByVal pPaymentDate As Date, ByVal pLoanAmount As Double) As Double
      Dim vInterestRate As Double = Loan.InterestRate
      Dim vInterestAccrued As Double
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLoanInterestRates) Then
        Dim vInterestRates As CollectionList(Of LoanInterestRate) = mvLoan.GetInterestRatesForPeriod(pDateOfLastPayment, pPaymentDate)
        Dim vFromDate As Date = CDate(pDateOfLastPayment)    'CDate(mvLoan.InterestCalculatedDate)
        Dim vToDate As Date = CDate(pPaymentDate)   'CDate(TodaysDate())
        For Each vLIR As LoanInterestRate In vInterestRates
          vFromDate = CDate(vLIR.RateChanged)
          'If vFromDate < CDate(mvLoan.InterestCalculatedDate) Then vFromDate = CDate(mvLoan.InterestCalculatedDate)
          If vFromDate < CDate(pDateOfLastPayment) Then vFromDate = CDate(pDateOfLastPayment)
          vInterestAccrued += CalculateLoanPaymentInterest(vFromDate, vToDate, pLoanAmount, vLIR.InterestRate)
          vToDate = CDate(vLIR.RateChanged).AddDays(-1)
        Next
      Else
        vInterestAccrued = CalculateLoanPaymentInterest(pDateOfLastPayment, pPaymentDate, pLoanAmount, vInterestRate)
      End If
      Return vInterestAccrued
    End Function

    ''' <summary>Calculate the interest this Loan payment includes.</summary>
    ''' <param name="pDateOfLastPayment">The date the previous payment was received.</param>
    ''' <param name="pPaymentDate">The date this payment was received.</param>
    ''' <param name="pLoanAmount">The loan amount that has accrued interest</param>
    ''' <param name="pInterestRate">The Interest Rate to use for the calculations</param>
    ''' <returns>The interest payable by this payment.</returns>
    ''' <remarks>If pPaymentDate is before pDateOfLastPayment then zero will be returned.</remarks>
    Private Function CalculateLoanPaymentInterest(ByVal pDateOfLastPayment As Date, ByVal pPaymentDate As Date, ByVal pLoanAmount As Double, ByVal pInterestRate As Double) As Double
      Dim vInterestPaid As Double = 0
      Dim vDays As Long = DateDiff(DateInterval.Day, pDateOfLastPayment, pPaymentDate)
      If pInterestRate > 0 AndAlso vDays > 0 Then
        'Only calculate interest if the percentage is greater than zero and there is at least 1 day since the last payment
        If pLoanAmount > 0 Then
          'If all the Loan Capital is paid then no interest is due on the payment
          If mvLoan.LoanTerm = 0 Then
            'Work out the number of days in the year (the year starts on the anniversary date of the Loan)
            Dim vDaysInYear As Integer = 365
            Dim vStartDate As Date = DateSerial(Today.Year, CDate(StartDate).Month, CDate(StartDate).Day)
            If vStartDate > Today Then vStartDate = vStartDate.AddYears(-1)
            If vStartDate.Month > 2 Then
              'Loan started between March & December so see if next year is a leap year
              If Date.IsLeapYear(vStartDate.AddYears(1).Year) Then vDaysInYear += 1
            Else
              'Loan started in January or February so see if this year is a leap year
              If Date.IsLeapYear(vStartDate.Year) Then vDaysInYear += 1
            End If
            Dim vInt As Double = ((((pInterestRate / 100) / vDaysInYear) + 1) ^ vDays) * pLoanAmount
            vInterestPaid = FixTwoPlaces(vInt - pLoanAmount)
          Else
            'Account for whole months only
            Dim vMonths As Integer = CInt(System.Math.Round(CDbl(DateDiff(DateInterval.Month, pDateOfLastPayment, pPaymentDate)), 0))
            If vMonths > 0 Then
              vInterestPaid = FixTwoPlaces(((pLoanAmount * (pInterestRate / 100)) / 12) * vMonths)
            End If
            'vInterestPaid = FixTwoPlaces(((pLoanAmount * (mvLoan.InterestRate / 100)) / 365) * vDays)
          End If
        End If
      End If
      Return vInterestPaid
    End Function

    ''' <summary>Delete all unpaid Loan scheduled payments dated on or after the deletion date.</summary>
    ''' <param name="pDeletionDate">The date the payments are to be deleted from</param>
    Private Sub DeleteLoanScheduledPayments(ByVal pDeletionDate As Date)
      If mvExisting Then
        Dim vWhereFields As New CDBFields(New CDBField("order_number", mvClassFields(PaymentPlanFields.ofOrderNumber).IntegerValue))
        vWhereFields.Add("scheduled_payment_number", CDBField.FieldTypes.cftInteger, "", CDBField.FieldWhereOperators.fwoNotEqual)
        Dim vPaymentSQL As New SQLStatement(mvEnv.Connection, "oph.scheduled_payment_number", "order_payment_history oph", vWhereFields)
        vWhereFields.Remove("scheduled_payment_number")
        With vWhereFields
          If DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes Then
            .Add("claim_date", CDBField.FieldTypes.cftDate, pDeletionDate.ToString(CAREDateFormat), CType(CDBField.FieldWhereOperators.fwoGreaterThanEqual + CDBField.FieldWhereOperators.fwoOpenBracketTwice + CDBField.FieldWhereOperators.fwoCloseBracket, CDBField.FieldWhereOperators))
            .Add("claim_date#2", CDBField.FieldTypes.cftDate, "", CType(CDBField.FieldWhereOperators.fwoOR + CDBField.FieldWhereOperators.fwoOpenBracket + CDBField.FieldWhereOperators.fwoEqual, CDBField.FieldWhereOperators))
            .Add("due_date", CDBField.FieldTypes.cftDate, pDeletionDate.ToString(CAREDateFormat), CType(CDBField.FieldWhereOperators.fwoGreaterThanEqual + CDBField.FieldWhereOperators.fwoCloseBracketTwice, CDBField.FieldWhereOperators))
          Else
            .Add("due_date", CDBField.FieldTypes.cftDate, pDeletionDate.ToString(CAREDateFormat), CDBField.FieldWhereOperators.fwoGreaterThanEqual)
          End If
          .Add("scheduled_payment_status", "D")
          .Add("schedule_creation_reason", "'FA','AP'", CDBField.FieldWhereOperators.fwoNotIn)
          .Add("scheduled_payment_number", CDBField.FieldTypes.cftInteger, "(" & vPaymentSQL.SQL & ")", CDBField.FieldWhereOperators.fwoNotIn)
        End With
        mvEnv.Connection.DeleteRecords("order_payment_schedule", vWhereFields, False)
      End If

    End Sub

    ''' <summary>Set the FrequencyAmount based upon the Loan Term and Payment Amount.</summary>
    Private Sub SetLoanFrequencyAmount()
      If mvLoan.FixedMonthlyAmount > 0 Then
        mvClassFields.Item(PaymentPlanFields.ofFrequencyAmount).Value = mvLoan.FixedMonthlyAmount.ToString
      ElseIf mvLoan.LoanTerm > 0 Then
        Dim vNumberPayments As Integer = 12
        If TermUnits = OrderTermUnits.otuWeekly OrElse PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then vNumberPayments = 365
        vNumberPayments = CInt(System.Math.Round(mvLoan.LoanTerm * CInt(System.Math.Round(vNumberPayments / PaymentFrequencyInterval))))
        Dim vFrequencyAmount As Double = FixTwoPlaces(Pmt((mvLoan.InterestRate / 100) / 12, vNumberPayments, mvLoan.LoanAmount, 0, DueDate.EndOfPeriod))
        If vFrequencyAmount < 0 Then vFrequencyAmount = vFrequencyAmount * -1 'Pmt will return a negative value so make it positive
        'Having got the FrequencyAmount for the Loan capital & interest, include any extra fees as well
        If mvDetails.Count > 2 Then
          Dim vFeesTotal As Double = 0
          For vLine As Integer = 2 To mvDetails.Count - 1
            Dim vPPD As PaymentPlanDetail = CType(mvDetails.Item(vLine), PaymentPlanDetail)
            If vPPD.Product.AccruesInterest = False AndAlso vPPD.Product.ProductRate.LoanInterest = False Then
              vFeesTotal += vPPD.Balance
            End If
          Next
          If vFeesTotal > 0 Then
            Dim vFeesFreq As Double = FixTwoPlaces(vFeesTotal / vNumberPayments)
            If vFeesFreq * vNumberPayments < vFeesTotal Then vFeesFreq += 0.01
            vFrequencyAmount = FixTwoPlaces(vFrequencyAmount + vFeesFreq)
          End If
        End If
        mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = vFrequencyAmount.ToString
      Else
        mvClassFields.Item(PaymentPlanFields.ofFrequencyAmount).Value = RenewalAmount.ToString
      End If
    End Sub

    ''' <summary>Gets the transaction date of the last loan payment.</summary>
    ''' <returns>The date of the last payment, if set, otherwise the Loan start date</returns>
    Friend ReadOnly Property LoanLastPaymentDate() As Date
      Get
        Dim vLastPayDate As Date = Date.Parse(StartDate)
        If LastPaymentDate.Length > 0 AndAlso mvClassFields.Item(PaymentPlanFields.ofLastPaymentDate).SetValue.Length > 0 Then
          vLastPayDate = Date.Parse(mvClassFields.Item(PaymentPlanFields.ofLastPaymentDate).SetValue)
        End If
        Return vLastPayDate
      End Get
    End Property

    ''' <summary>Gets the Payment Schedule data for Loan payments.</summary>
    ''' <param name="pTransactionDate">The transaction date of the payment</param>
    ''' <remarks>Used by Trader to find the payment schedule record to allocate the payment against.</remarks>
    Public Sub GetLoanPaymentOPS(ByVal pTransactionDate As Date)
      mvScheduledPayments = New Collection
      Dim vOPS As New OrderPaymentSchedule()
      vOPS.Init(mvEnv)
      Dim vWhereFields As New CDBFields(New CDBField("order_number", PlanNumber))
      vWhereFields.Add("due_date", CDBField.FieldTypes.cftDate, pTransactionDate.AddMonths(-3).ToString, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      If Loan.LoanTerm > 0 OrElse Loan.FixedMonthlyAmount > 0 Then vWhereFields.Add("due_date#2", CDBField.FieldTypes.cftDate, pTransactionDate.AddYears(1).ToString, CDBField.FieldWhereOperators.fwoLessThanEqual)
      vWhereFields.Add("scheduled_payment_status", vOPS.SetPaymentStatus(OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsMissedLoanPayment), CDBField.FieldWhereOperators.fwoNotEqual)
      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vOPS.GetRecordSetFields(OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll), "order_payment_schedule ops", vWhereFields, "due_date")
      Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
      While vRS.Fetch
        vOPS = New OrderPaymentSchedule
        vOPS.InitFromRecordSet(mvEnv, vRS, OrderPaymentSchedule.OrderPaymentScheduleRecordSetTypes.opsrtAll)
        mvScheduledPayments.Add(vOPS, vOPS.ScheduledPaymentNumber.ToString)
      End While
      vRS.CloseRecordSet()
    End Sub

    ''' <summary>Regenerate the Scheduled Payments for a Loan.</summary>
    Friend Sub RegenerateLoanScheduledPayments(ByVal pAmendedBy As String, ByVal pAudit As Boolean)
      Dim vCapitalAmount As Double = Loan.LoanAmount        'Total capital amount of the Loan (this is the amount borrowed)
      Dim vCapitalRemaining As Double = 0                   'The amount of the capital that is still unpaid
      Dim vInterestAccrued As Double = 0                    'The amount of interest that has been accrued (calculated) to date & will be added to the PP
      Dim vLoanFeesOutstanding As Double = 0                'The amount of any additinal fees that may have been added to the Loan

      If mvDetails.Count = 0 Then InitPaymentPlanDetails(mvEnv, PlanNumber)
      For Each vPPDetail As PaymentPlanDetail In mvDetails
        If vPPDetail.AccruesInterest Then
          vCapitalRemaining += vPPDetail.Balance
        ElseIf vPPDetail.LoanInterest Then
          vInterestAccrued += vPPDetail.Balance
        Else
          vLoanFeesOutstanding += vPPDetail.Balance
        End If
      Next

      'We'll need this when the OPS is created.  Any amendment will always go down as PPMaint
      Dim vOPsCreationReason As OrderPaymentSchedule.OrderPaymentScheduleCreationReasons = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan
      If mvExisting Then vOPsCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance

      Dim vLoanStartDate As Date = Date.Parse(StartDate)
      Dim vLoanMaxDate As Date = vLoanStartDate.AddYears(105)   'Loan cannot have payments beyond this date
      Dim vAllNewOPS As New CollectionList(Of OrderPaymentSchedule)   'The OPS we need to create
      Dim vNewOPS As OrderPaymentSchedule
      If mvLoan.FixedMonthlyAmount > 0 Then
        'Loan is being paid off in fixed amounts each month with the Loan end date changing to reflect payments received
        Dim vNextPayDate As Date
        Dim vInterestThisPayment As Double
        '(1) First calculate the interest accrued up to the date of the next payment
        If mvExisting Then
          'For an existing Loan calculate the interest from the date of the last payment to the date to today
          vNextPayDate = DateSerial(Today.Year, Today.Month, vLoanStartDate.Day)
          If (DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes) AndAlso (mvScheduledPayments IsNot Nothing AndAlso mvScheduledPayments.Count > 0) Then
            For Each vPayOPS As OrderPaymentSchedule In mvScheduledPayments
              If Date.Parse(vPayOPS.DueDate) >= Today AndAlso vPayOPS.AmountOutstanding = 0 Then
                vNextPayDate = Date.Parse(vPayOPS.DueDate)  'DD/CCA claim run before Today
              ElseIf Date.Parse(vPayOPS.DueDate) > Today AndAlso vPayOPS.AmountDue = vPayOPS.AmountOutstanding AndAlso (vPayOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan OrElse vPayOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance) Then
                Exit For
              End If
            Next
          Else
            While vNextPayDate >= Today
              If TermUnits = OrderTermUnits.otuWeekly OrElse PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                vNextPayDate = vNextPayDate.AddDays(-PaymentFrequencyInterval)
              Else
                vNextPayDate = CDate(AddMonths(vLoanStartDate.ToString(CAREDateFormat), vNextPayDate.ToString(CAREDateFormat), -PaymentFrequencyInterval))
              End If
            End While
          End If
        Else
          vNextPayDate = vLoanStartDate
        End If

        '(2) Now calculate the interest due for each payment until the Loan is paid off
        Dim vPaymentAmount As Double = mvLoan.FixedMonthlyAmount
        Dim vCapitalPaidThisPayment As Double = 0
        Dim vCount As Integer = vAllNewOPS.Count
        Dim vLastPayDate As Date = vLoanStartDate
        While vCapitalRemaining > 0
          If TermUnits = OrderTermUnits.otuWeekly OrElse PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
            vNextPayDate = vNextPayDate.AddDays(PaymentFrequencyInterval)
          Else
            vNextPayDate = CDate(AddMonths(vLoanStartDate.ToString(CAREDateFormat), vNextPayDate.ToString(CAREDateFormat), PaymentFrequencyInterval))
          End If

          vInterestThisPayment = CalculateLoanPaymentInterest(vLastPayDate, vNextPayDate, vCapitalRemaining)
          vCapitalPaidThisPayment = FixTwoPlaces(vPaymentAmount - vInterestThisPayment)
          If vCapitalPaidThisPayment < 0 Then vCapitalPaidThisPayment = 0
          If vCapitalPaidThisPayment > vCapitalRemaining Then
            'Paying too much, are there any fees to cover as well?
            If FixTwoPlaces(vCapitalRemaining + vInterestThisPayment + vLoanFeesOutstanding) >= vPaymentAmount Then
              vLoanFeesOutstanding = FixTwoPlaces(vLoanFeesOutstanding - (vPaymentAmount - vCapitalRemaining - vInterestThisPayment))
            Else
              vPaymentAmount = FixTwoPlaces(vCapitalRemaining + vInterestThisPayment + vLoanFeesOutstanding)
              vLoanFeesOutstanding = 0
            End If
          End If
          vCapitalRemaining = FixTwoPlaces(vCapitalRemaining - vCapitalPaidThisPayment)
          If vCapitalRemaining < 0 Then vCapitalRemaining = 0
          If vCapitalRemaining > 0 AndAlso vCapitalRemaining <= 0.1 Then
            'If we are within 10p of the total then deduct this from the interest (probably rounding issues)
            vInterestThisPayment = FixTwoPlaces(vInterestThisPayment - vCapitalRemaining)
            vCapitalRemaining = 0
          End If
          vCount += 1
          If vNextPayDate >= vLoanMaxDate Then
            'We have reached the end date of tyhe loan which is either:
            '  1) The end of the loan term (when set), or
            '  2) 105 years after the loan started and beneficiary will be dead before it is paid off.
            '     Continuing to add OPS could result in errors (such as invalid date because the max date .Net can handle is exceeded!!)
            'So just add 1 final OPS to clear the remaining capital amount
            If (mvLoan.LoanTerm > 0 And (vNextPayDate >= vLoanMaxDate)) OrElse (vNextPayDate > vLoanMaxDate) Then
              vPaymentAmount += vCapitalRemaining
              vCapitalRemaining = 0
            End If
          End If
          vNewOPS = New OrderPaymentSchedule()
          vNewOPS.Init(mvEnv)
          vNewOPS.Create(PlanNumber, vNextPayDate.ToString(CAREDateFormat), vPaymentAmount, vPaymentAmount, vCapitalRemaining, vOPsCreationReason)
          Debug.Print("OPS " & vCount & ", Next Pay Date: " & vNextPayDate & ", Capital: " & vCapitalPaidThisPayment & ", Interest: " & vInterestThisPayment)
          vAllNewOPS.Add(vCount.ToString, vNewOPS)
          vLastPayDate = vNextPayDate
        End While

        '(3) Now pay off any fees due on the Loan
        If vLoanFeesOutstanding > 0 Then
          vPaymentAmount = mvLoan.FixedMonthlyAmount
          If mvLoan.LoanTerm > 0 AndAlso mvExisting = False Then vPaymentAmount = FrequencyAmount
          While vLoanFeesOutstanding > 0
            If vLoanFeesOutstanding >= vPaymentAmount Then
              vLoanFeesOutstanding = FixTwoPlaces(vLoanFeesOutstanding - vPaymentAmount)
            Else
              vPaymentAmount = vLoanFeesOutstanding
              vLoanFeesOutstanding = 0
            End If
            vNewOPS = New OrderPaymentSchedule
            vNewOPS.Init(mvEnv)
            vNewOPS.Create(PlanNumber, vNextPayDate.ToString(CAREDateFormat), vPaymentAmount, vPaymentAmount, vCapitalRemaining, vOPsCreationReason)
            Debug.Print("OPS " & vCount & ", Next Pay Date: " & vNextPayDate & ", Fees: " & vPaymentAmount)
            vAllNewOPS.Add((vAllNewOPS.Count + 1).ToString, vNewOPS)
          End While
        End If

      ElseIf mvLoan.LoanTerm > 0 Then
        'Loan is over a fixed term of years with the payment amount changing as required to pay the loan off
        Dim vInterval As Integer = 12
        If TermUnits = OrderTermUnits.otuWeekly OrElse PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then vInterval = 365
        Dim vNumberOfPayments As Integer = mvLoan.LoanTerm * (CInt(System.Math.Round(vInterval / PaymentFrequencyInterval)))    'Total number of payments that we are expecting to make
        Dim vTotalLoanOutstanding As Double = 0
        Dim vPaymentAmount As Double = 0
        Dim vTotalLoanAmount As Double = 0
        Dim vNextPayDate As Date
        If mvExisting Then
          '(1) Calculate interest accrued to date
          'Get previous payment date
          vNextPayDate = DateSerial(Today.Year, Today.Month, vLoanStartDate.Day)
          If (DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes) AndAlso (mvScheduledPayments IsNot Nothing AndAlso mvScheduledPayments.Count > 0) Then
            For Each vPayOPS As OrderPaymentSchedule In mvScheduledPayments
              If Date.Parse(vPayOPS.DueDate) >= Today AndAlso vPayOPS.AmountOutstanding = 0 Then
                vNextPayDate = Date.Parse(vPayOPS.DueDate)  'DD/CCA claim run before Today
              ElseIf Date.Parse(vPayOPS.DueDate) > Today AndAlso vPayOPS.AmountDue = vPayOPS.AmountOutstanding AndAlso (vPayOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrNewPaymentPlan OrElse vPayOPS.ScheduleCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrPaymentPlanMaintenance) Then
                Exit For
              End If
            Next
          Else
            While vNextPayDate >= Today
              If TermUnits = OrderTermUnits.otuWeekly OrElse PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                vNextPayDate = vNextPayDate.AddDays(-PaymentFrequencyInterval)
              Else
                vNextPayDate = CDate(AddMonths(vLoanStartDate.ToString(CAREDateFormat), vNextPayDate.ToString(CAREDateFormat), -PaymentFrequencyInterval))
              End If
            End While
          End If
          'How many payments are remaining for the Loan?
          Dim vAnniversaryDate As Date = DateSerial(Today.Year, vLoanStartDate.Month, vLoanStartDate.Day)
          If vAnniversaryDate < Today Then vAnniversaryDate.AddYears(1)
          Dim vTermRemaining As Integer = CInt(mvLoan.LoanTerm - DateDiff(DateInterval.Year, vLoanStartDate, vAnniversaryDate))
          Dim vPaymentsRemainingThisYear As Integer
          Dim vFinalPayDate As Date = vNextPayDate
          While vFinalPayDate < vAnniversaryDate
            vPaymentsRemainingThisYear += 1
            If TermUnits = OrderTermUnits.otuWeekly OrElse PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
              vFinalPayDate = vFinalPayDate.AddDays(PaymentFrequencyInterval)
            Else
              vFinalPayDate = CDate(AddMonths(vLoanStartDate.ToString(CAREDateFormat), vFinalPayDate.ToString(CAREDateFormat), PaymentFrequencyInterval))
            End If
          End While
          Dim vPaymentsRemaining As Integer = (vTermRemaining * vInterval) + vPaymentsRemainingThisYear

          'Calculate how much the future payments need to be
          vPaymentAmount = System.Math.Abs(Pmt((mvLoan.InterestRate / 100) / vInterval, vPaymentsRemaining, vCapitalRemaining, 0, DueDate.EndOfPeriod))
          vTotalLoanAmount = FixTwoPlaces((vPaymentAmount * vPaymentsRemaining) + vLoanFeesOutstanding)
          If vNumberOfPayments > vPaymentsRemaining Then vNumberOfPayments = vPaymentsRemaining   'Reset total number of payments expected
        Else
          'New Loan
          vNextPayDate = vLoanStartDate
          vPaymentAmount = FixTwoPlaces(System.Math.Abs(Pmt((mvLoan.InterestRate / 100) / vInterval, vNumberOfPayments, vCapitalAmount, 0, DueDate.EndOfPeriod)))
          vTotalLoanAmount = FixTwoPlaces((vPaymentAmount * vNumberOfPayments) + vLoanFeesOutstanding)
        End If

        'Calculate how much each payment will be
        vPaymentAmount = FixTwoPlaces(vTotalLoanAmount / vNumberOfPayments)
        If vPaymentAmount * vNumberOfPayments < vTotalLoanAmount Then vPaymentAmount += 0.01
        mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = vPaymentAmount.ToString

        Dim vLastPayDate As Date = vNextPayDate
        Dim vInterestThisPayment As Double
        Dim vCapitalThisPayment As Double
        vTotalLoanOutstanding = FixTwoPlaces(vCapitalRemaining + vLoanFeesOutstanding)
        While vTotalLoanOutstanding > 0
          vLastPayDate = vNextPayDate
          If TermUnits = OrderTermUnits.otuWeekly OrElse PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
            vNextPayDate = vNextPayDate.AddDays(PaymentFrequencyInterval)
          Else
            vNextPayDate = CDate(AddMonths(vLoanStartDate.ToString(CAREDateFormat), vNextPayDate.ToString(CAREDateFormat), PaymentFrequencyInterval))
          End If
          vInterestThisPayment = CalculateLoanPaymentInterest(vLastPayDate, vNextPayDate, vCapitalRemaining)
          vCapitalThisPayment = FixTwoPlaces(vPaymentAmount - vInterestThisPayment)
          If vCapitalThisPayment < 0 Then vCapitalThisPayment = 0
          If vCapitalThisPayment > vTotalLoanOutstanding Then
            vCapitalThisPayment = vCapitalRemaining
            vPaymentAmount = FixTwoPlaces(vInterestThisPayment + vTotalLoanOutstanding)
            vTotalLoanOutstanding = 0
            vCapitalRemaining = 0
          Else
            vTotalLoanOutstanding = FixTwoPlaces(vTotalLoanOutstanding - vCapitalThisPayment)
            vCapitalRemaining = FixTwoPlaces(vCapitalRemaining - vCapitalThisPayment)
          End If
          If vTotalLoanOutstanding < 0 Then vTotalLoanOutstanding = 0
          If vCapitalRemaining < 0 Then vCapitalRemaining = 0
          vNewOPS = New OrderPaymentSchedule
          vNewOPS.Init(mvEnv)
          vNewOPS.Create(PlanNumber, vNextPayDate.ToString(CAREDateFormat), vPaymentAmount, vPaymentAmount, vCapitalRemaining, vOPsCreationReason)
          Debug.Print("OPS, Next Pay Date: " & vNextPayDate & ", Capital: " & vCapitalThisPayment & ", Interest: " & vInterestThisPayment)
          vAllNewOPS.Add((vAllNewOPS.Count + 1).ToString, vNewOPS)
        End While

      Else
        'Only 1 payment required when the Loan is paid off
        'Dim vRemainingMonths As Integer
        Dim vAnniversaryDate As Date
        Dim vPayDate As Date = vLoanStartDate.AddYears(100).AddDays(-1)
        If mvExisting Then
          'How many months are left on the Loan
          vAnniversaryDate = DateSerial(Today.Year, vLoanStartDate.Month, vLoanStartDate.Day)
          If vAnniversaryDate < Today Then vAnniversaryDate.AddYears(1)
        End If
        'Dim vInterestAmount As Double = 0   'FixTwoPlaces((vCapitalRemaining * (mvLoan.InterestRate / 100)))
        'vCapitalRemaining = FixTwoPlaces(vCapitalRemaining + vInterestAmount)
        'Dim vTotalInterest As Double = vInterestAmount
        'For vLoop As Integer = 1 To 99 Step 1
        '  vAnniversaryDate = vAnniversaryDate.AddYears(1)
        '  vInterestAmount = FixTwoPlaces((vCapitalRemaining * (mvLoan.InterestRate / 100)))
        '  vCapitalRemaining = FixTwoPlaces(vCapitalRemaining + vInterestAmount)
        'Next
        vCapitalRemaining = FixTwoPlaces(vCapitalRemaining + vInterestAccrued)
        If vCapitalRemaining > 0 AndAlso mvScheduledPayments IsNot Nothing AndAlso mvScheduledPayments.Count > 0 Then
          Dim vPaid As Double = 0
          For Each vPaidOPS As OrderPaymentSchedule In mvScheduledPayments
            vPaid += FixTwoPlaces(vPaidOPS.AmountDue - vPaidOPS.AmountOutstanding)
          Next
          If vPaid < 0 Then vPaid = 0
          vCapitalRemaining = FixTwoPlaces(vCapitalRemaining + vPaid)   'Include paid amount for the AmountDue (it will be deducted again for the AmountOutstanding)
        End If

        'Now add the payment
        Dim vCount As Integer = 1
        Dim vMaxAmount As Double = 9999999.99
        If vCapitalRemaining > vMaxAmount Then
          Dim vOPSAdded As Double = 0
          While (vOPSAdded + vMaxAmount) < vCapitalRemaining
            'Could land up exceeding max figures so add multiple OPS for same date
            vNewOPS = New OrderPaymentSchedule
            vNewOPS.Init(mvEnv)
            vNewOPS.Create(PlanNumber, vPayDate.ToString(CAREDateFormat), vMaxAmount, vCapitalRemaining, 0, vOPsCreationReason)
            vAllNewOPS.Add(vCount.ToString, vNewOPS)
            vOPSAdded = FixTwoPlaces(vOPSAdded + vMaxAmount)
            vCount += 1
          End While
          vCapitalRemaining = FixTwoPlaces(vCapitalRemaining - vOPSAdded)
        End If
        If (vCapitalRemaining > 0) OrElse (vCapitalRemaining = 0 AndAlso vCount = 1) Then
          vNewOPS = New OrderPaymentSchedule
          vNewOPS.Init(mvEnv)
          If vCapitalRemaining = 0 Then
            vOPsCreationReason = OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance
            vPayDate = vLoanStartDate.AddYears(100)
          End If
          vNewOPS.Create(PlanNumber, vPayDate.ToString(CAREDateFormat), vCapitalRemaining, vCapitalRemaining, 0, vOPsCreationReason, "", If(vCapitalRemaining = 0, True, False))
          vAllNewOPS.Add(vCount.ToString, vNewOPS)
        End If
      End If

      If vAllNewOPS.Count = 0 AndAlso vCapitalRemaining = 0 AndAlso vLoanFeesOutstanding = 0 Then
        'All cleared so create a provisional OPS
        Dim vNextPayDate As Date = DateSerial(Today.Year, Today.Month, vLoanStartDate.Day)
        While vNextPayDate > Today
          If TermUnits = OrderTermUnits.otuWeekly OrElse PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
            vNextPayDate = vNextPayDate.AddDays(-PaymentFrequencyInterval)
          Else
            vNextPayDate = CDate(AddMonths(vLoanStartDate.ToString(CAREDateFormat), vNextPayDate.ToString(CAREDateFormat), -PaymentFrequencyInterval))
          End If
        End While
        If vNextPayDate < Today Then
          If TermUnits = OrderTermUnits.otuWeekly OrElse PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
            vNextPayDate = vNextPayDate.AddDays(PaymentFrequencyInterval)
          Else
            vNextPayDate = CDate(AddMonths(vLoanStartDate.ToString(CAREDateFormat), vNextPayDate.ToString(CAREDateFormat), PaymentFrequencyInterval))
          End If
        End If

        vNewOPS = New OrderPaymentSchedule()
        vNewOPS.Init(mvEnv)
        vNewOPS.Create(PlanNumber, vNextPayDate.ToString(CAREDateFormat), 0, 0, 0, OrderPaymentSchedule.OrderPaymentScheduleCreationReasons.opscrInAdvance, "", True)
        Debug.Print("OPS 1" & ", Next Pay Date: " & vNextPayDate & ", Capital: " & "0" & ", Interest: " & "0")
        vAllNewOPS.Add("1", vNewOPS)
      End If

      If mvExisting = False AndAlso vAllNewOPS.Count > 0 Then
        mvClassFields(PaymentPlanFields.ofNextPaymentDue).Value = vAllNewOPS.Item(0).DueDate
      End If

      'Now that we have all the payment data, need to create the final OPS
      Dim vTrans As Boolean = False
      If mvEnv.Connection.InTransaction = False Then
        mvEnv.Connection.StartTransaction()
        vTrans = True
      End If

      If mvExisting = True AndAlso mvCreated = False Then
        DeleteLoanScheduledPayments(Today)
      End If

      'Select all remaining OPS records and mark them as Missed Loan Payments
      mvScheduledPayments = Nothing
      GetScheduledPayments(True)

      For Each vOPS As OrderPaymentSchedule In mvScheduledPayments
        Select Case vOPS.ScheduledPaymentStatus
          Case OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsDue, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsPartPaid,
               OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsProvisional, OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsUnprocessedPayment
            If Date.Parse(vOPS.DueDate) < Today Then
              If vOPS.ClaimDate.Length = 0 OrElse (vOPS.ClaimDate.Length > 0 AndAlso Date.Parse(vOPS.ClaimDate) < Today) Then
                Dim vPayEndDate As Date
                If TermUnits = OrderTermUnits.otuWeekly OrElse PaymentFrequencyPeriod = PaymentFrequency.PaymentFrequencyPeriods.pfpDays Then
                  vPayEndDate = Date.Parse(vOPS.DueDate).AddDays(PaymentFrequencyInterval).AddDays(-1)
                Else
                  vPayEndDate = Date.Parse(AddMonths(vLoanStartDate.ToString(CAREDateFormat), vOPS.DueDate, PaymentFrequencyInterval)).AddDays(-1)
                End If
                If vPayEndDate < Today Then vOPS.SetLoanMissedPayment()
              End If
            End If
        End Select
      Next

      'If paid by DD/CCA add the claim dates
      If DirectDebitStatus = ppYesNoCancel.ppYes OrElse CreditCardStatus = ppYesNoCancel.ppYes Then
        Dim vAutoPayStartDate As Date = Date.Parse(If(DirectDebitStatus = ppYesNoCancel.ppYes, DirectDebit.StartDate, CreditCardAuthority.StartDate))
        Dim vClaimDate As String = ""
        For Each vNewOPS In vAllNewOPS
          vClaimDate = FindNextClaimDate(vNewOPS.DueDate)
          If Not (vClaimDate.Length > 0 AndAlso (CDate(vClaimDate) >= vAutoPayStartDate)) Then vClaimDate = "" 'Cannot set a ClaimDate that is before the auto payment StartDate
          If vClaimDate.Length > 0 Then vNewOPS.SetClaimDate(vClaimDate)
        Next
      End If
      'Now add the new payments
      Dim vGotOPS As Boolean
      For Each vNewOPS In vAllNewOPS
        vGotOPS = False
        For Each vExistOPS As OrderPaymentSchedule In mvScheduledPayments
          If vExistOPS.ScheduledPaymentStatus <> OrderPaymentSchedule.OrderPaymentSchedulePaymentStatus.opspsMissedLoanPayment AndAlso (CDate(vExistOPS.DueDate) = CDate(vNewOPS.DueDate)) Then
            Dim vPaid As Double = vExistOPS.AmountDue - vExistOPS.AmountOutstanding
            Dim vNewOS As Double = FixTwoPlaces(vNewOPS.AmountOutstanding - vPaid)
            If vNewOS < 0 Then vNewOS = 0
            With vExistOPS
              .Update(.DueDate, vNewOPS.AmountDue, If(vNewOS > 0, vNewOS, 0), vNewOPS.ExpectedBalance, vNewOPS.ClaimDate, , If(vNewOS = 0 AndAlso .AmountOutstanding = 0, vExistOPS.ScheduleCreationReason, vOPsCreationReason))
            End With
            vGotOPS = True
            Exit For
          End If
        Next
        If vGotOPS = False Then mvScheduledPayments.Add(vNewOPS)
      Next

      If mvScheduledPayments.Count = 0 Then
        'If all has gone wrong then error
        RaiseError(DataAccessErrors.daePaymentScheduleNotCreated, PlanNumber.ToString)
      End If

      'And save
      mvEnv.CacheControlNumbers(CDBEnvironment.CachedControlNumberTypes.ccnPaymentSchedule, vAllNewOPS.Count) 'Cache the control numbers first
      For Each vOPS As OrderPaymentSchedule In mvScheduledPayments
        vOPS.Save(pAmendedBy, pAudit)
      Next

      If mvExisting = True AndAlso mvCreated = False Then
        If mvLoan.FixedMonthlyAmount > 0 Then
          mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = mvLoan.FixedMonthlyAmount.ToString
        ElseIf mvLoan.LoanTerm > 0 Then
          'Already set above
        Else
          mvClassFields(PaymentPlanFields.ofFrequencyAmount).Value = RenewalAmount.ToString
        End If
        mvClassFields(PaymentPlanFields.ofPaymentScheduleAmendedOn).Value = TodaysDate()
        'Use Save here so that detail lines are deleted & re-created 
        Save(pAmendedBy, pAudit)
      End If

      If StandingOrderStatus = ppYesNoCancel.ppYes Then
        StandingOrder.Amount = FrequencyAmount
        If StandingOrder.Existing Then StandingOrder.Save(pAmendedBy, pAudit)
      End If

      If vTrans Then mvEnv.Connection.CommitTransaction()

    End Sub

    ''' <summary>Initialise the Loan object from the DataRow for a Loan PaymentPlan.</summary>
    Public Sub AddLoanFromDataRow(ByVal pRow As DataRow, ByVal pUseProperName As Boolean)
      If LoanStatus <> ppYesNoCancel.ppNo Then
        mvLoan = New Loan(mvEnv)
        mvLoan.InitFromDataRow(pRow, pUseProperName)
      End If
    End Sub

    Private Function CapitaliseLoan(ByVal pCapitalRemaining As Double, ByVal pAccruedInterest As Double) As Double
      If Loan.RequiresCapitalisation Then
        'First re-calculate Interest if required
        If CDate(mvLoan.InterestCalculatedDate) >= mvLoan.LoanCapitalisationDate Then
          'If the interest was calculated up to a later date then do a basic interest calculation to find the "extra" amount so we don't capitalise too much
          Dim vDeduct As Double = CalculateLoanPaymentInterest(mvLoan.LoanCapitalisationDate.AddDays(-1), CDate(mvLoan.InterestCalculatedDate), pCapitalRemaining)
          pAccruedInterest = FixTwoPlaces(pAccruedInterest - vDeduct)
        Else
          'Calculate interest up to the day prior to the capitalisation date
          Dim vInterest As Double = CalculateLoanPaymentInterest(CDate(mvLoan.InterestCalculatedDate), mvLoan.LoanCapitalisationDate.AddDays(-1), pCapitalRemaining)
          mvLoan.SetInterestCalculated(mvLoan.LoanCapitalisationDate.AddDays(-1).ToString)
          mvClassFields(PaymentPlanFields.ofBalance).DoubleValue = FixTwoPlaces(Balance + vInterest)   'Dont't use SetBalance as this will re-calculate the FrequencyAmount which we don't need to do
          mvClassFields(PaymentPlanFields.ofRenewalAmount).DoubleValue = FixTwoPlaces(RenewalAmount + vInterest)
          pAccruedInterest = FixTwoPlaces(pAccruedInterest + vInterest)
        End If
        mvLoan.SetLoanCapitalisation(pAccruedInterest)  'Update the Loan even if the accrued interest is zero so that we know it was done
        For Each vPPDetail As PaymentPlanDetail In mvDetails
          If vPPDetail.AccruesInterest Then
            'Increase Loan Capital by the amount of unpaid accrued interest
            vPPDetail.SetImportBalance(FixTwoPlaces(vPPDetail.Balance + pAccruedInterest))
            pAccruedInterest = 0    'Don't send this back, just re-set to zero here so we don't update a 2nd Capital line
          ElseIf vPPDetail.LoanInterest Then
            'Decrease unpaid accrued interest
            With vPPDetail
              If .Balance > mvLoan.InterestCapitalisationAmount Then
                .SetImportBalance(FixTwoPlaces(.Balance - mvLoan.InterestCapitalisationAmount))
              Else
                .SetImportBalance(0)
              End If
              .SetAmount(.Balance.ToString)
            End With
          End If
        Next
        Return mvLoan.InterestCapitalisationAmount
      Else
        Return 0
      End If
    End Function

#End Region

    Public Sub New()
      Dim i As Integer = 1
    End Sub
  End Class

End Namespace
