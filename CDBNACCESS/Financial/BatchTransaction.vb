Namespace Access
  ''' <summary>
  ''' This class is not fully converted to .NET yet
  ''' </summary>
  ''' <remarks></remarks>
  Partial Public Class BatchTransaction
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum BatchTransactionFields
      AllFields = 0
      BatchNumber
      TransactionNumber
      ContactNumber
      AddressNumber
      TransactionDate
      TransactionType
      BankDetailsNumber
      Amount
      CurrencyAmount
      PaymentMethod
      Reference
      NextLineNumber
      LineTotal
      Mailing
      Receipt
      Notes
      MailingContactNumber
      MailingAddressNumber
      EligibleForGiftAid
      TransactionOrigin
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("batch_number", CDBField.FieldTypes.cftLong)
        .Add("transaction_number", CDBField.FieldTypes.cftInteger)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("transaction_date", CDBField.FieldTypes.cftDate)
        .Add("transaction_type")
        .Add("bank_details_number", CDBField.FieldTypes.cftLong)
        .Add("amount", CDBField.FieldTypes.cftNumeric)
        .Add("currency_amount", CDBField.FieldTypes.cftNumeric)
        .Add("payment_method")
        .Add("reference")
        .Add("next_line_number", CDBField.FieldTypes.cftInteger)
        .Add("line_total", CDBField.FieldTypes.cftNumeric)
        .Add("mailing")
        .Add("receipt")
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("mailing_contact_number", CDBField.FieldTypes.cftLong)
        .Add("mailing_address_number", CDBField.FieldTypes.cftLong)
        .Add("eligible_for_gift_aid")
        .Add("transaction_origin")

        .Item(BatchTransactionFields.BatchNumber).PrimaryKey = True
        .Item(BatchTransactionFields.TransactionNumber).PrimaryKey = True

        mvClassFields.Item(BatchTransactionFields.Reference).SpecialColumn = True

        mvClassFields.Item(BatchTransactionFields.BatchNumber).PrefixRequired = True
        mvClassFields.Item(BatchTransactionFields.TransactionNumber).PrefixRequired = True
        mvClassFields.Item(BatchTransactionFields.TransactionType).PrefixRequired = True
        mvClassFields.Item(BatchTransactionFields.ContactNumber).PrefixRequired = True
        mvClassFields.Item(BatchTransactionFields.AddressNumber).PrefixRequired = True
        mvClassFields.Item(BatchTransactionFields.Notes).PrefixRequired = True
        mvClassFields.Item(BatchTransactionFields.PaymentMethod).PrefixRequired = True
        mvClassFields.Item(BatchTransactionFields.Amount).PrefixRequired = True
        mvClassFields.Item(BatchTransactionFields.CurrencyAmount).PrefixRequired = True
        'BR19041
        mvClassFields.Item(BatchTransactionFields.TransactionDate).PrefixRequired = True
        mvClassFields.Item(BatchTransactionFields.BankDetailsNumber).PrefixRequired = True
        mvClassFields.Item(BatchTransactionFields.TransactionOrigin).PrefixRequired = True

        mvClassFields.Item(BatchTransactionFields.TransactionOrigin).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataTransactionOrigins)

      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "bt"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "batch_transactions"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property BatchNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionFields.BatchNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property TransactionNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionFields.TransactionNumber).IntegerValue
      End Get
    End Property
    Public Property ContactNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionFields.ContactNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionFields.ContactNumber).IntegerValue = value
      End Set
    End Property
    Public Property AddressNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionFields.AddressNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionFields.AddressNumber).IntegerValue = value
      End Set
    End Property
    Public Property TransactionDate() As String
      Get
        Return mvClassFields(BatchTransactionFields.TransactionDate).Value
      End Get
      Set(ByVal pValue As String)
        mvClassFields(BatchTransactionFields.TransactionDate).Value = pValue
      End Set
    End Property
    Public Property TransactionType() As String
      Get
        Return mvClassFields(BatchTransactionFields.TransactionType).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionFields.TransactionType).Value = value
      End Set
    End Property
    Public Property BankDetailsNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionFields.BankDetailsNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionFields.BankDetailsNumber).IntegerValue = value
      End Set
    End Property
    Public Property Amount() As Double
      Get
        Return mvClassFields(BatchTransactionFields.Amount).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(BatchTransactionFields.Amount).DoubleValue = value
      End Set
    End Property
    Public Property CurrencyAmount() As Double
      Get
        Return mvClassFields(BatchTransactionFields.CurrencyAmount).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(BatchTransactionFields.CurrencyAmount).DoubleValue = value
      End Set
    End Property
    Public Property PaymentMethod() As String
      Get
        Return mvClassFields(BatchTransactionFields.PaymentMethod).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionFields.PaymentMethod).Value = value
      End Set
    End Property
    Public Property Reference() As String
      Get
        Return mvClassFields(BatchTransactionFields.Reference).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionFields.Reference).Value = value
      End Set
    End Property
    Public Property NextLineNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionFields.NextLineNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionFields.NextLineNumber).IntegerValue = value
      End Set
    End Property
    Public Property LineTotal() As Double
      Get
        Return mvClassFields(BatchTransactionFields.LineTotal).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(BatchTransactionFields.LineTotal).DoubleValue = value
      End Set
    End Property
    Public Property Mailing() As String
      Get
        Return mvClassFields(BatchTransactionFields.Mailing).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionFields.Mailing).Value = value
      End Set
    End Property
    Public Property Receipt() As String
      Get
        Return mvClassFields(BatchTransactionFields.Receipt).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionFields.Receipt).Value = value
      End Set
    End Property
    Public Property Notes() As String
      Get
        Return mvClassFields(BatchTransactionFields.Notes).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionFields.Notes).Value = value
      End Set
    End Property
    Public Property MailingContactNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionFields.MailingContactNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionFields.MailingContactNumber).IntegerValue = value
      End Set
    End Property
    Public Property MailingAddressNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionFields.MailingAddressNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionFields.MailingAddressNumber).IntegerValue = value
      End Set
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(BatchTransactionFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(BatchTransactionFields.AmendedOn).Value
      End Get
    End Property
    Public Property EligibleForGiftAid() As Boolean
      Get
        Return mvClassFields(BatchTransactionFields.EligibleForGiftAid).Bool
      End Get
      Set(ByVal value As Boolean)
        mvClassFields(BatchTransactionFields.EligibleForGiftAid).Bool = value
      End Set
    End Property
    Public Property TransactionOrigin() As String
      Get
        Return mvClassFields(BatchTransactionFields.TransactionOrigin).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionFields.TransactionOrigin).Value = value
      End Set
    End Property
#End Region
#Region "Non-AutoGenerated Code"

    Private mvAnalysis As CollectionList(Of BatchTransactionAnalysis)
    Private mvBatch As Batch
    Private mvTransactionSign As String = ""
    Private mvContactVATCategory As String = ""
    Private mvContactType As Contact.ContactTypes = Contact.ContactTypes.ctcContact

    Public Property Batch() As Batch
      Get
        Return mvBatch
      End Get
      Private Set(ByVal value As Batch)
        mvBatch = value
      End Set
    End Property

    Public Function GetRecordSetFieldsTransactionType() As String
      Dim vFields As String = MyBase.GetRecordSetFields
      Return vFields & ",contact_type,contact_vat_category,transaction_sign"
    End Function

    Public Sub InitFromRecordSetTransactionType(ByVal pRecordSet As CDBRecordSet)
      MyBase.InitFromRecordSet(pRecordSet)
      mvTransactionSign = pRecordSet.Fields("transaction_sign").Value
      mvContactVATCategory = pRecordSet.Fields("contact_vat_category").Value
      Select Case pRecordSet.Fields("contact_type").Value
        Case "C"
          mvContactType = Contact.ContactTypes.ctcContact
        Case "O"
          mvContactType = Contact.ContactTypes.ctcOrganisation
        Case "J"
          mvContactType = Contact.ContactTypes.ctcJoint
      End Select
    End Sub

    Public Overloads Sub Init(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer)
      Init(pBatchNumber, pTransactionNumber, False)
    End Sub

    Public Overloads Sub Init(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pIncludeTransactionType As Boolean)
      If pBatchNumber > 0 Then
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("batch_number", pBatchNumber)
        vWhereFields.Add("transaction_number", pTransactionNumber)
        Dim vAnsiJoins As New AnsiJoins
        vAnsiJoins.AddLeftOuterJoin("transaction_types tt", "bt.transaction_type", "tt.transaction_type")
        vAnsiJoins.AddLeftOuterJoin("contacts c", "bt.contact_number", "c.contact_number")

        Dim vFields As String
        If pIncludeTransactionType Then
          vFields = GetRecordSetFieldsTransactionType()
        Else
          vFields = GetRecordSetFields()
        End If

        If Not mvClassFields.ContainsKey("date_of_birth") Then
          mvClassFields.Add(New ClassField("date_of_birth", CDBField.FieldTypes.cftDate)) 'BR17343 - Get the date of birth so that TRD form can be intialised.
          vFields = vFields & ",date_of_birth"
        End If
        Dim vRecordSet As CDBRecordSet = New SQLStatement(mvEnv.Connection, vFields, "batch_transactions bt", vWhereFields, "", vAnsiJoins).GetRecordSet
        If vRecordSet.Fetch() Then
          MyBase.InitFromRecordSet(vRecordSet)
          If pIncludeTransactionType Then
            InitFromRecordSetTransactionType(vRecordSet)
          Else
            InitFromRecordSet(vRecordSet)
          End If
        Else
          Init()
        End If
        vRecordSet.CloseRecordSet()
      Else
        Init()
      End If
    End Sub

    Public ReadOnly Property Analysis() As CollectionList(Of BatchTransactionAnalysis)
      Get
        If mvAnalysis Is Nothing Then mvAnalysis = New CollectionList(Of BatchTransactionAnalysis)
        Return mvAnalysis
      End Get
    End Property

    Public Sub InitBatchTransactionAnalysis(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer)
      mvAnalysis = New CollectionList(Of BatchTransactionAnalysis)
      If pBatchNumber > 0 And pTransactionNumber > 0 Then
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("batch_number", pBatchNumber)
        vWhereFields.Add("transaction_number", pTransactionNumber)
        Dim vRecordSet As CDBRecordSet = New SQLStatement(mvEnv.Connection, "*", "batch_transaction_analysis", vWhereFields, "line_number").GetRecordSet
        While vRecordSet.Fetch()
          AddAnalysisFromRecordSet(vRecordSet)
        End While
        vRecordSet.CloseRecordSet()
      End If
    End Sub

    Public Sub InitAnalysisAdditionalData()
      Dim vLineNumber As Integer
      Dim vBTA As BatchTransactionAnalysis
      Dim vBTA2 As BatchTransactionAnalysis
      Dim vAType As BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes
      Dim vRecordSet As CDBRecordSet
      Dim vRecordSet2 As CDBRecordSet
      Dim vWhereFields As New CDBFields
      Dim vCP As CollectionPayment
      Dim vSQL As String
      Dim vBoxNumbers As String = ""
      Dim vGotBooking As Boolean

      For Each vBTA In mvAnalysis
        vBTA.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatNone)
      Next vBTA
      'Find out if there are any associated event bookings
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT line_number,booking_number,event_number, option_number FROM event_bookings WHERE batch_number = " & BatchNumber & " AND transaction_number = " & TransactionNumber)
      While vRecordSet.Fetch()
        vLineNumber = vRecordSet.Fields(1).LongValue
        For Each vBTA In mvAnalysis
          If vBTA.LineNumber = vLineNumber Then
            vBTA.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatEventBooking, (vRecordSet.Fields(2).LongValue), (vRecordSet.Fields(3).LongValue), (vRecordSet.Fields(4).LongValue))
            Exit For
          End If
        Next vBTA
      End While
      vRecordSet.CloseRecordSet()

      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbExams) Then
        'Find out if there are any associated exam bookings
        vRecordSet = mvEnv.Connection.GetRecordSet("SELECT line_number,exam_booking_id,exam_unit_id FROM exam_booking_units WHERE batch_number = " & BatchNumber & " AND transaction_number = " & TransactionNumber)
        While vRecordSet.Fetch()
          vLineNumber = vRecordSet.Fields(1).LongValue
          For Each vBTA In mvAnalysis
            If vBTA.LineNumber = vLineNumber Then
              vBTA.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatExamBooking, vRecordSet.Fields(2).IntegerValue, vRecordSet.Fields(3).IntegerValue)
              Exit For
            End If
          Next vBTA
        End While
        vRecordSet.CloseRecordSet()

        'Find out if there are any associated exam booking transactions
        vRecordSet = mvEnv.Connection.GetRecordSet("SELECT ebt.line_number,exam_booking_id,exam_unit_id FROM exam_booking_transactions ebt INNER JOIN exam_booking_units ebu ON ebt.exam_booking_unit_id = ebu.exam_booking_unit_id WHERE ebt.batch_number = " & BatchNumber & " AND ebt.transaction_number = " & TransactionNumber)
        While vRecordSet.Fetch()
          vLineNumber = vRecordSet.Fields(1).LongValue
          For Each vBTA In mvAnalysis
            If vBTA.LineNumber = vLineNumber Then
              vBTA.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatExamBookingTransaction, vRecordSet.Fields(2).IntegerValue, vRecordSet.Fields(3).IntegerValue, 1)
              Exit For
            End If
          Next vBTA
        End While
        vRecordSet.CloseRecordSet()
      End If

      'Find out if there are any associated accomodation bookings
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT line_number,room_booking_number FROM contact_room_bookings WHERE batch_number = " & BatchNumber & " AND transaction_number = " & TransactionNumber)
      While vRecordSet.Fetch()
        vLineNumber = vRecordSet.Fields(1).LongValue
        For Each vBTA In mvAnalysis
          If vBTA.LineNumber = vLineNumber Then
            vBTA.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatAccommodationBooking, (vRecordSet.Fields(2).LongValue))
            Exit For
          End If
        Next vBTA
      End While
      vRecordSet.CloseRecordSet()

      'Find out if there are any associated service bookings
      vSQL = "SELECT line_number,service_booking_number,amount FROM service_bookings WHERE batch_number = " & BatchNumber & " AND transaction_number = " & TransactionNumber
      vRecordSet = mvEnv.Connection.GetRecordSet(vSQL)
      While vRecordSet.Fetch()
        vLineNumber = vRecordSet.Fields(1).LongValue
        For Each vBTA In mvAnalysis
          If vBTA.LineNumber = vLineNumber Then
            If vRecordSet.Fields(3).DoubleValue > 0 Then
              vAType = BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatServiceBooking
            Else
              vAType = BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatServiceBookingCredit
            End If
            vBTA.SetAdditionalType(vAType, (vRecordSet.Fields(2).LongValue))
            'Now look for entitlement lines for this service booking
            vWhereFields.Clear()
            vWhereFields.Add("po.product", CDBField.FieldTypes.cftCharacter, vBTA.ProductCode)
            vWhereFields.Add("po.rate", CDBField.FieldTypes.cftCharacter, vBTA.RateCode)
            vWhereFields.Add("bta.batch_number", CDBField.FieldTypes.cftLong, BatchNumber)
            vWhereFields.Add("bta.transaction_number", CDBField.FieldTypes.cftLong, TransactionNumber)
            vWhereFields.Add("bta.line_number", vLineNumber, CDBField.FieldWhereOperators.fwoNotEqual)
            vWhereFields.Add("bta.product", CDBField.FieldTypes.cftLong, "po.entitlement_product")
            vWhereFields.Add("bta.rate", CDBField.FieldTypes.cftLong, "po.entitlement_rate")
            vRecordSet2 = mvEnv.Connection.GetRecordSet("SELECT line_number FROM product_offers po, batch_transaction_analysis bta WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
            If vRecordSet2.Fetch() Then
              For Each vBTA2 In mvAnalysis
                If vBTA2.LineNumber = vRecordSet2.Fields(1).LongValue Then
                  vBTA2.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatServiceBookingEntitlement)
                  Exit For
                End If
              Next vBTA2
            End If
            vRecordSet2.CloseRecordSet()
            Exit For
          End If
        Next vBTA
      End While
      vRecordSet.CloseRecordSet()

      'Find out if there are any associated service bookings transactions
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataServiceBookingAnalysis) Then
        vSQL = "SELECT line_number,service_booking_number FROM service_booking_transactions WHERE batch_number = " & BatchNumber & " AND transaction_number = " & TransactionNumber
        vRecordSet = mvEnv.Connection.GetRecordSet(vSQL)
        While vRecordSet.Fetch()
          vLineNumber = vRecordSet.Fields(1).LongValue
          For Each vBTA In mvAnalysis
            If vBTA.LineNumber = vLineNumber Then
              vBTA.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatServiceBookingTransaction, (vRecordSet.Fields(2).LongValue))
            End If
          Next vBTA
        End While
        vRecordSet.CloseRecordSet()
      End If

      'Find out if there are any associated Fundraising Payment Transactions
      SetAdditionalData(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatFundraisingPayment)

      'Find out if there are any associated legacy bequest receipts
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT line_number,bequest_number,legacy_number,receipt_number FROM legacy_bequest_receipts WHERE batch_number = " & BatchNumber & " AND transaction_number = " & TransactionNumber)
      While vRecordSet.Fetch()
        vLineNumber = vRecordSet.Fields(1).LongValue
        For Each vBTA In mvAnalysis
          If vBTA.LineNumber = vLineNumber Then
            vBTA.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatLegacyBequest, (vRecordSet.Fields(2).LongValue), (vRecordSet.Fields(3).LongValue), (vRecordSet.Fields(4).LongValue))
            Exit For
          End If
        Next vBTA
      End While
      vRecordSet.CloseRecordSet()

      'Find out if there are any associated Collection Payments
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataCollections) Then
        vCP = New CollectionPayment
        vCP.Init(mvEnv)
        vRecordSet = mvEnv.Connection.GetRecordSet("SELECT " & vCP.GetRecordSetFields(CollectionPayment.CollectionPaymentRecordSetTypes.cpyrtAll) & " FROM collection_payments WHERE batch_number = " & BatchNumber & " AND transaction_number = " & TransactionNumber & " ORDER BY line_number, collection_payment_number")
        While vRecordSet.Fetch
          'Multiple CollectionPayments per BTA line
          vLineNumber = vRecordSet.Fields("line_number").LongValue
          If vCP.LineNumber > 0 And (vCP.LineNumber <> vLineNumber) Then
            For Each vBTA In mvAnalysis
              If vBTA.LineNumber = vLineNumber Then
                vBTA.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatCollectionPayments, (vCP.CollectionNumber), (vCP.CollectionPisNumber))
                vBTA.MemberNumber = vBoxNumbers
                vBoxNumbers = ""
                Exit For
              End If
            Next vBTA
          End If
          vCP = New CollectionPayment
          vCP.InitFromRecordSet(mvEnv, vRecordSet, CollectionPayment.CollectionPaymentRecordSetTypes.cpyrtAll)
          If vCP.CollectionBoxNumber > 0 Then vBoxNumbers = vBoxNumbers & "," & vCP.CollectionBoxNumber
          If Left(vBoxNumbers, 1) = "," Then vBoxNumbers = Mid(vBoxNumbers, 2)
        End While
        If vCP.Existing Then
          For Each vBTA In mvAnalysis
            If vBTA.LineNumber = vLineNumber Then
              vBTA.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatCollectionPayments, (vCP.CollectionNumber), (vCP.CollectionPisNumber))
              vBTA.MemberNumber = vBoxNumbers
              Exit For
            End If
          Next vBTA
        End If
        vRecordSet.CloseRecordSet()
      End If

      'Find out if there are any EventBookingTransactions
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataEventMultipleAnalysis) Then
        vSQL = "SELECT ebt.event_number, ebt.booking_number, ebt.batch_number, ebt.transaction_number, ebt.line_number, eb.line_number AS booking_line_number"
        vSQL = vSQL & " FROM event_booking_transactions ebt"
        vSQL = vSQL & " LEFT OUTER JOIN event_bookings eb ON ebt.booking_number = eb.booking_number AND ebt.batch_number = eb.batch_number AND ebt.transaction_number = eb.transaction_number"
        vSQL = vSQL & " WHERE ebt.batch_number = " & BatchNumber
        vSQL = vSQL & " AND ebt.transaction_number = " & TransactionNumber
        vSQL = vSQL & " ORDER BY ebt.line_number"
        vRecordSet = mvEnv.Connection.GetRecordSetAnsiJoins(vSQL)
        While vRecordSet.Fetch
          vLineNumber = vRecordSet.Fields("line_number").LongValue
          vGotBooking = (vRecordSet.Fields("booking_line_number").LongValue > 0 And (vLineNumber >= vRecordSet.Fields("booking_line_number").LongValue))
          For Each vBTA In mvAnalysis
            If vBTA.LineNumber = vLineNumber Then
              If vBTA.AnalysisAdditionalType <> BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatEventBooking Then vBTA.SetEventBookingTransactionAdditionalType(vRecordSet.Fields("event_number").LongValue, vRecordSet.Fields("booking_number").LongValue, 0, vGotBooking)
              'vBTA.SetAdditionalType taatEventBookingTransaction, vRecordSet.Fields("event_number").LongValue, vRecordSet.Fields("booking_number").LongValue
              Exit For
            End If
          Next vBTA
        End While
        vRecordSet.CloseRecordSet()
      End If

      'Find out if there are any Invoice Payment History records
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataAllocationsOnIPH) Then
        Dim vInvoiceAllocation As Boolean = False
        Dim vAttrs As String = "iph.allocation_line_number as iph_line_number, i.invoice_number, bta.line_number as bta_line_number, bta.amount, bta.member_number as bta_sales_ledger_account"
        Dim vAnsiJoins As New AnsiJoins()
        With vAnsiJoins
          .Add("invoices i", "iph.batch_number", "i.batch_number", "iph.transaction_number", "i.transaction_number")
          .Add("invoices i2", "iph.invoice_number", "i2.invoice_number")
          .Add("batch_transaction_analysis bta", "iph.allocation_batch_number", "bta.batch_number", "iph.allocation_transaction_number", "bta.transaction_number", "iph.invoice_number", "bta.invoice_number")   'AND iph.allocation_line_number <> bta.line_number"
        End With
        vWhereFields = New CDBFields()
        With vWhereFields
          .Add("iph.allocation_batch_number", BatchNumber)
          .Add("iph.allocation_transaction_number", TransactionNumber)
          .Add("iph.status", CDBField.FieldTypes.cftCharacter, "")
          .Add("bta.batch_number", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoNotEqual Or CDBField.FieldWhereOperators.fwoOpenBracket)
          .Add("iph.allocation_line_number", CDBField.FieldTypes.cftInteger, "bta.line_number", CDBField.FieldWhereOperators.fwoEqual Or CDBField.FieldWhereOperators.fwoCloseBracket)
        End With
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vAttrs, "invoice_payment_history iph", vWhereFields, "iph.line_number", vAnsiJoins)
        vRecordSet = vSQLStatement.GetRecordSet()
        While vRecordSet.Fetch
          vLineNumber = vRecordSet.Fields("bta_line_number").IntegerValue
          For Each vBTA In mvAnalysis
            If vBTA.LineNumber = vLineNumber Then
              If vBTA.LineType = "L" OrElse vBTA.LineType = "K" Then vInvoiceAllocation = True
              vBTA.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatInvoicePaymentHistory, vRecordSet.Fields("invoice_number").IntegerValue)
              Exit For
            End If
          Next
          If vInvoiceAllocation Then
            'Now find the linked BTA record with a negative amount
            vLineNumber += 1
            For Each vBTA In mvAnalysis
              If vBTA.LineNumber = vLineNumber Then
                If (vBTA.LineType = "L" OrElse vBTA.LineType = "K") AndAlso vBTA.Amount = (vRecordSet.Fields("amount").DoubleValue * -1) AndAlso vBTA.MemberNumber = vRecordSet.Fields("bta_sales_ledger_account").Value Then
                  vBTA.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatInvoicePaymentHistory, vRecordSet.Fields("invoice_number").IntegerValue)
                  Exit For
                End If
              End If
            Next
          End If
        End While
        vRecordSet.CloseRecordSet()
      End If

    End Sub

    Public Overloads Sub InitForUpdate(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pExisting As Boolean)
      Init()
      mvExisting = pExisting
      If pExisting Then
        mvClassFields(BatchTransactionFields.BatchNumber).SetValue = pBatchNumber.ToString
        mvClassFields(BatchTransactionFields.TransactionNumber).SetValue = pTransactionNumber.ToString
      Else
        mvClassFields(BatchTransactionFields.BatchNumber).IntegerValue = pBatchNumber
        mvClassFields(BatchTransactionFields.TransactionNumber).IntegerValue = pTransactionNumber
      End If
    End Sub

    Private Function AddAnalysisFromRecordSet(ByVal pRecordSet As CDBRecordSet) As BatchTransactionAnalysis
      Dim vAnalysisLine As New BatchTransactionAnalysis(mvEnv)
      vAnalysisLine.InitFromRecordSet(pRecordSet)
      mvAnalysis.Add(vAnalysisLine.LineNumber.ToString & vAnalysisLine.LineType & vAnalysisLine.ProductCode, vAnalysisLine)
      Return vAnalysisLine
    End Function

    Public Function Confirm(ByVal pBatch As Batch) As BatchTransaction
      Return Confirm(pBatch, "", Nothing, Nothing)
    End Function
    Public Function Confirm(ByVal pBatch As Batch, ByVal pBatchDate As String) As BatchTransaction
      Return Confirm(pBatch, pBatchDate, Nothing, Nothing)
    End Function
    Public Function Confirm(ByVal pBatch As Batch, ByVal pBatchDate As String, ByVal pCardSale As CardSale) As BatchTransaction
      Return Confirm(pBatch, pBatchDate, pCardSale, Nothing)
    End Function
    Public Function Confirm(ByVal pBatch As Batch, ByVal pBatchDate As String, ByVal pCardSale As CardSale, ByVal pCreditSale As CreditSale) As BatchTransaction
      Return Confirm(pBatch, pBatchDate, pCardSale, pCreditSale, "")
    End Function
    Public Function Confirm(ByVal pBatch As Batch, ByVal pBatchDate As String, ByVal pCardSale As CardSale, ByVal pCreditSale As CreditSale, ByVal pBatchCategory As String) As BatchTransaction
      Return Confirm(pBatch, pBatchDate, pCardSale, pCreditSale, pBatchCategory, False)
    End Function
    Public Function Confirm(ByVal pBatch As Batch, ByVal pBatchDate As String, ByVal pCardSale As CardSale, ByVal pCreditSale As CreditSale, ByVal pBatchCategory As String, ByVal pRestrictPaymentMethod As Boolean) As BatchTransaction
      Dim vUpdateFields As New CDBFields
      Dim vWhereFields As New CDBFields

      Dim vConfirmedBT As New BatchTransaction(mvEnv)
      If pBatch.BatchType = Batch.BatchTypes.CAFVouchers OrElse pBatch.BatchType = Batch.BatchTypes.CAFCards OrElse pBatch.BatchType = Batch.BatchTypes.Cash Then
        'Currently the only way a provisional cash transaction can be confirmed like this is thru Web services
        'in which case it will be converted to a card sale or a credit sale
        Dim vConfirmedTransaction As New ConfirmedTransaction(mvEnv)
        vConfirmedTransaction.Init(BatchNumber, TransactionNumber)
        If vConfirmedTransaction.Existing = False OrElse vConfirmedTransaction.ConfirmedBatchNumber > 0 Then RaiseError(DataAccessErrors.daeTransactionConfirmed)

        'Make sure the analysis is read if it has not been read already
        If Analysis.Count = 0 Then InitBatchTransactionAnalysis(BatchNumber, TransactionNumber)

        Dim vPostToCashBook As Boolean
        Select Case pBatch.BatchType
          Case Batch.BatchTypes.CAFVouchers
            vPostToCashBook = mvEnv.GetConfigOption("option_post_batches_to_CB")
          Case Batch.BatchTypes.CAFCards
            vPostToCashBook = mvEnv.GetConfigOption("fp_card_batches_to_CB")
          Case Else
            vPostToCashBook = True
        End Select

        Dim vConfirmedB As New Batch(mvEnv)
        Dim vNewBatchType As Batch.BatchTypes
        Dim vPaymentMethod As String
        If pBatch.BatchType = Batch.BatchTypes.Cash Then
          If (pCardSale IsNot Nothing AndAlso pCreditSale IsNot Nothing) Then
            vNewBatchType = Batch.BatchTypes.CreditCardWithInvoice
            vPaymentMethod = "CCIN"
          ElseIf Not pCardSale Is Nothing Then
            vNewBatchType = Batch.BatchTypes.CreditCard
            vPaymentMethod = "CCARD"
          ElseIf Not pCreditSale Is Nothing Then
            vNewBatchType = Batch.BatchTypes.CreditSales
            vPaymentMethod = "CRED"
          ElseIf pRestrictPaymentMethod Then
            vNewBatchType = Batch.BatchTypes.Cash
            vPaymentMethod = Me.PaymentMethod
          Else
            vNewBatchType = Batch.BatchTypes.Cash
            vPaymentMethod = "CASH"
          End If
          InitAnalysisAdditionalData()
          vWhereFields.Add("booking_number", CDBField.FieldTypes.cftInteger)
          vUpdateFields.Add("batch_number", CDBField.FieldTypes.cftInteger)
          vUpdateFields.Add("transaction_number", CDBField.FieldTypes.cftInteger)
          vUpdateFields.Add("booking_status", CDBField.FieldTypes.cftCharacter)
          vConfirmedB.InitOpenBatch(Nothing, Batch.ProvisionalOrConfirmed.Confirmed, vNewBatchType, pBatch.BankAccount, vPaymentMethod, vPostToCashBook, Batch.BatchTypes.None, pBatch.CurrencyCode, pBatch.CurrencyExchangeRate, pBatchCategory, "", True, "", "", pRestrictPaymentMethod)
        Else
          vConfirmedB.InitOpenBatch(pBatch, Batch.ProvisionalOrConfirmed.Confirmed, pBatch.BatchType, pBatch.BankAccount, "", vPostToCashBook, Batch.BatchTypes.None, "", 0, pBatchCategory, pBatchDate)
        End If
        If pBatch.BatchType = Batch.BatchTypes.CAFCards OrElse pBatch.BatchType = Batch.BatchTypes.CAFVouchers Then
          vConfirmedB.Picked = "C"
          vConfirmedB.Save()
        End If
        With vConfirmedBT
          .InitForUpdate(vConfirmedB.BatchNumber, vConfirmedB.AllocateTransactionNumber, False)
          .CloneForFA(Me)
          If vConfirmedB.BatchType = Batch.BatchTypes.CreditSales Then .TransactionType = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSTransType)
          .NextLineNumber = NextLineNumber  'BR14751: Set the NextLineNumber from original BT
          .PaymentMethod = vConfirmedB.PaymentMethod
          .Notes = "Provisional Batch Reference : " & BatchNumber & "/" & TransactionNumber & vbLf & Notes
        End With

        Dim vConfirmedBTA As New BatchTransactionAnalysis(mvEnv)
        mvEnv.Connection.StartTransaction()
        For Each vProvisionalBTA As BatchTransactionAnalysis In Analysis
          With vConfirmedBTA
            .InitFromTransaction(vConfirmedBT, vProvisionalBTA.LineNumber)
            .CloneFromBTA(vProvisionalBTA)
            If pBatch.BatchType = Batch.BatchTypes.Cash Then     'This should ensure it only does this for WEB services
              If .ProductCode.Length > 0 AndAlso .Issued < .Quantity And vProvisionalBTA.LineType <> "I" Then 'Stock not yet allocated and not incentiv
                Dim vStockMovement As New StockMovement
                vStockMovement.Create(mvEnv, .ProductCode, -.Quantity, mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlStockReasonSale), .BatchNumber, .TransactionNumber, .LineNumber, True, .Warehouse)
                .Issued = .Quantity
              End If
            End If
            .Save(mvEnv.User.UserID)
            If .InvoiceNumber > 0 Then                  'Confirming provisional invoice payment
              vProvisionalBTA.ClearInvoiceNumber()
              vProvisionalBTA.Save(mvEnv.User.UserID)
            End If
            If vProvisionalBTA.AnalysisAdditionalType = BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatEventBooking Then
              vWhereFields(1).Value = vProvisionalBTA.AdditionalNumber.ToString      'Booking Number
              vUpdateFields(1).Value = .BatchNumber.ToString
              vUpdateFields(2).Value = .TransactionNumber.ToString
              If pCreditSale Is Nothing Then
                vUpdateFields(3).Value = EventBooking.GetBookingStatusCode(EventBooking.EventBookingStatuses.ebsBookedAndPaid)
              Else
                vUpdateFields(3).Value = EventBooking.GetBookingStatusCode(EventBooking.EventBookingStatuses.ebsBookedCreditSale)
              End If
              mvEnv.Connection.UpdateRecords("event_bookings", vUpdateFields, vWhereFields)
            ElseIf vProvisionalBTA.AnalysisAdditionalType = BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatExamBooking Then
              Dim vExamWhereFields As New CDBFields
              vExamWhereFields.Add("batch_number", CDBField.FieldTypes.cftInteger, BatchNumber)
              vExamWhereFields.Add("transaction_number", CDBField.FieldTypes.cftInteger, TransactionNumber)
              Dim vExamUpdateFields As New CDBFields
              vExamUpdateFields.Add("batch_number", CDBField.FieldTypes.cftInteger, .BatchNumber)
              vExamUpdateFields.Add("transaction_number", CDBField.FieldTypes.cftInteger, .TransactionNumber)
              mvEnv.Connection.UpdateRecords("exam_bookings", vExamUpdateFields, vExamWhereFields, False)
              mvEnv.Connection.UpdateRecords("exam_booking_units", vExamUpdateFields, vExamWhereFields, False)  'Line numbers should stay the same
            ElseIf vProvisionalBTA.AnalysisAdditionalType = BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatExamBookingTransaction Then
              Dim vExamWhereFields As New CDBFields
              vExamWhereFields.Add("batch_number", CDBField.FieldTypes.cftInteger, BatchNumber)
              vExamWhereFields.Add("transaction_number", CDBField.FieldTypes.cftInteger, TransactionNumber)
              Dim vExamUpdateFields As New CDBFields
              vExamUpdateFields.Add("batch_number", CDBField.FieldTypes.cftInteger, .BatchNumber)
              vExamUpdateFields.Add("transaction_number", CDBField.FieldTypes.cftInteger, .TransactionNumber)
              mvEnv.Connection.UpdateRecords("exam_booking_transactions", vExamUpdateFields, vExamWhereFields, False)      'Line numbers should stay the same
            End If
          End With
        Next
        With vConfirmedTransaction
          .ConfirmedBatchNumber = vConfirmedBT.BatchNumber
          .ConfirmedTransNumber = vConfirmedBT.TransactionNumber
          .Save()
        End With
        If Not pCardSale Is Nothing Then
          pCardSale.Clone(vConfirmedBT.BatchNumber, vConfirmedBT.TransactionNumber, pCardSale.NoClaimRequired)
          pCardSale.Save()
        End If
        If Not pCreditSale Is Nothing Then
          pCreditSale.Clone(vConfirmedBT.BatchNumber, vConfirmedBT.TransactionNumber)
          pCreditSale.Save()
        End If

        Dim vOPHWhereFields As New CDBFields
        vOPHWhereFields.Add("batch_number", BatchNumber)
        vOPHWhereFields.Add("transaction_number", TransactionNumber)
        Dim vOPHUpdateFields As New CDBFields
        vOPHUpdateFields.Add("batch_number", vConfirmedBT.BatchNumber)
        vOPHUpdateFields.Add("transaction_number", vConfirmedBT.TransactionNumber)
        mvEnv.Connection.UpdateRecords("order_payment_history", vOPHUpdateFields, vOPHWhereFields, False)
        mvEnv.Connection.UpdateRecords("communications_log_trans", vOPHUpdateFields, vOPHWhereFields, False)
        vConfirmedBT.Save()
        vConfirmedB.AddTransactionAmount(vConfirmedBT.Amount, True)
        mvEnv.Connection.CommitTransaction()
      Else
        RaiseError(DataAccessErrors.daeConfirmNotSupported, pBatch.BatchTypeCode)
      End If
      Return vConfirmedBT
    End Function

    Public Sub CloneForFA(ByVal pBT As BatchTransaction)
      CloneForFA(pBT, True)
    End Sub
    Public Sub CloneForFA(ByVal pBT As BatchTransaction, ByVal pSetMailingCode As Boolean)
      'Copy all values from original BT except batch_number, transaction_number & amounts
      'Only set Mailing, MailingContactNumber, MailingAddressNumber if required
      With mvClassFields
        .Item(BatchTransactionFields.ContactNumber).IntegerValue = pBT.ContactNumber
        .Item(BatchTransactionFields.AddressNumber).IntegerValue = pBT.AddressNumber
        .Item(BatchTransactionFields.TransactionDate).Value = pBT.TransactionDate
        .Item(BatchTransactionFields.TransactionType).Value = pBT.TransactionType
        If pBT.BankDetailsNumber > 0 Then .Item(BatchTransactionFields.BankDetailsNumber).IntegerValue = pBT.BankDetailsNumber
        .Item(BatchTransactionFields.PaymentMethod).Value = pBT.PaymentMethod
        If pBT.Reference.Length > 0 Then .Item(BatchTransactionFields.Reference).Value = pBT.Reference
        .Item(BatchTransactionFields.Receipt).Value = pBT.Receipt
        If pBT.Notes.Length > 0 Then .Item(BatchTransactionFields.Notes).Value = pBT.Notes
        If pSetMailingCode Then
          If pBT.Mailing.Length > 0 Then .Item(BatchTransactionFields.Mailing).Value = pBT.Mailing
          If pBT.MailingContactNumber > 0 Then .Item(BatchTransactionFields.MailingContactNumber).IntegerValue = pBT.MailingContactNumber
          If pBT.MailingAddressNumber > 0 Then .Item(BatchTransactionFields.MailingAddressNumber).IntegerValue = pBT.MailingAddressNumber
        End If
        .Item(BatchTransactionFields.EligibleForGiftAid).Bool = pBT.EligibleForGiftAid = True
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataTransactionOrigins) Then
          If pBT.TransactionOrigin.Length > 0 Then .Item(BatchTransactionFields.TransactionOrigin).Value = pBT.TransactionOrigin
        End If
        mvTransactionSign = pBT.TransactionSign
      End With

    End Sub

    Public Sub SetAdditionalData(ByVal pType As BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes)
      Select Case pType
        Case BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatFundraisingPayment
          If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataFundraisingPayments) Then
            Dim vWhereFields As New CDBFields
            vWhereFields.Add("batch_number", BatchNumber)
            vWhereFields.Add("transaction_number", TransactionNumber)
            Dim vRecordSet As CDBRecordSet = New SQLStatement(mvEnv.Connection, "line_number,scheduled_payment_number", "fundraising_payment_history", vWhereFields).GetRecordSet
            Dim vLineNumber As Integer
            While vRecordSet.Fetch
              vLineNumber = vRecordSet.Fields(1).LongValue
              For Each vBTA As BatchTransactionAnalysis In mvAnalysis
                If vBTA.LineNumber = vLineNumber Then
                  vBTA.SetAdditionalType(BatchTransactionAnalysis.TransactionAnalysisAdditionalTypes.taatFundraisingPayment, vRecordSet.Fields(2).LongValue)
                  Exit For
                End If
              Next
            End While
            vRecordSet.CloseRecordSet()
          End If
      End Select
    End Sub

    Public Sub SetMailingDetails(ByVal pMailing As String, ByVal pMailingContactNumber As Integer, ByVal pMailingAddressNumber As Integer)
      mvClassFields.Item(BatchTransactionFields.Mailing).Value = pMailing
      mvClassFields.Item(BatchTransactionFields.MailingContactNumber).IntegerValue = pMailingContactNumber
      mvClassFields.Item(BatchTransactionFields.MailingAddressNumber).IntegerValue = pMailingAddressNumber
    End Sub

    Public Shared Function HasStockItem(pEnv As CDBEnvironment, pBatchNumber As Integer, pTransactionNumber As Integer) As Boolean
      Dim vAnsiJoins As New AnsiJoins
      vAnsiJoins.Add("products p", "bta.product", "p.product")
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("batch_number", pBatchNumber)
      vWhereFields.Add("transaction_number", pTransactionNumber)
      vWhereFields.Add("stock_item", "Y")
      Dim vStockSQL As New SQLStatement(pEnv.Connection, "bta.product", "batch_transaction_analysis bta", vWhereFields, "", vAnsiJoins)
      Return pEnv.Connection.GetCountFromStatement(vStockSQL) > 0
    End Function

    ''' <summary>Can a Receipt be printed for this transaction?</summary>
    Public Function CanPrintReceipt() As Boolean
      Dim vCanPrint As Boolean = False
      If Existing = True AndAlso Amount >= 0 AndAlso IsFinancialAdjustment() = False Then
        If mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlReceiptPrintStdDocument).Length > 0 Then vCanPrint = True
      End If

      Return vCanPrint
    End Function

#End Region

  End Class
End Namespace
