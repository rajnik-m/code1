Namespace Access

  Partial Public Class Batch
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum BatchFields
      AllFields = 0
      BatchNumber
      BatchType
      BatchDate
      CashBookBatch
      BankAccount
      NumberOfEntries
      BatchTotal
      TransactionTotal
      NumberOfTransactions
      NextTransactionNumber
      ReadyForBanking
      PayingInSlipPrinted
      PostedToCashBook
      DetailCompleted
      PostedToNominal
      Picked
      Product
      Rate
      Source
      TransactionType
      PaymentMethod
      PayingInSlipNumber
      CurrencyIndicator
      CurrencyBatchTotal
      CurrencyTransactionTotal
      CurrencyExchangeRate
      CurrencyCode
      JournalNumber
      BatchCategory
      BalancedBy
      BalancedOn
      PostedBy
      PostedOn
      ContentsAmendedBy
      ContentsAmendedOn
      HeaderAmendedBy
      HeaderAmendedOn
      BatchCreatedBy
      BatchCreatedOn
      PostNominal
      JobNumber
      Provisional
      AgencyNumber
      ClaimSent
      BatchAnalysisCode
      Campaign
      Appeal
      BankingDate
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("batch_number", CDBField.FieldTypes.cftLong)
        .Add("batch_type")
        .Add("batch_date", CDBField.FieldTypes.cftDate)
        .Add("cash_book_batch")
        .Add("bank_account")
        .Add("number_of_entries", CDBField.FieldTypes.cftInteger)
        .Add("batch_total", CDBField.FieldTypes.cftNumeric)
        .Add("transaction_total", CDBField.FieldTypes.cftNumeric)
        .Add("number_of_transactions", CDBField.FieldTypes.cftInteger)
        .Add("next_transaction_number", CDBField.FieldTypes.cftInteger)
        .Add("ready_for_banking")
        .Add("paying_in_slip_printed")
        .Add("posted_to_cash_book")
        .Add("detail_completed")
        .Add("posted_to_nominal")
        .Add("picked")
        .Add("product")
        .Add("rate")
        .Add("source")
        .Add("transaction_type")
        .Add("payment_method")
        .Add("paying_in_slip_number", CDBField.FieldTypes.cftLong)
        .Add("currency_indicator")
        .Add("currency_batch_total", CDBField.FieldTypes.cftNumeric)
        .Add("currency_transaction_total", CDBField.FieldTypes.cftNumeric)
        .Add("currency_exchange_rate", CDBField.FieldTypes.cftNumeric)
        .Add("currency_code").PrefixRequired = True
        .Add("journal_number", CDBField.FieldTypes.cftLong)
        .Add("batch_category")
        .Add("balanced_by")
        .Add("balanced_on", CDBField.FieldTypes.cftDate)
        .Add("posted_by")
        .Add("posted_on", CDBField.FieldTypes.cftDate)
        .Add("contents_amended_by")
        .Add("contents_amended_on", CDBField.FieldTypes.cftDate)
        .Add("header_amended_by")
        .Add("header_amended_on", CDBField.FieldTypes.cftDate)
        .Add("batch_created_by")
        .Add("batch_created_on", CDBField.FieldTypes.cftDate)
        .Add("post_nominal")
        .Add("job_number", CDBField.FieldTypes.cftLong)
        .Add("provisional")
        .Add("agency_number", CDBField.FieldTypes.cftLong)
        .Add("claim_sent", CDBField.FieldTypes.cftDate)
        .Add("batch_analysis_code")
        .Add("campaign")
        .Add("appeal")
        .Add("banking_date", CDBField.FieldTypes.cftDate)

        .Item(BatchFields.BatchNumber).PrimaryKey = True
        mvClassFields.Item(BatchFields.BatchNumber).PrefixRequired = True
        mvClassFields.Item(BatchFields.BatchType).PrefixRequired = True
        mvClassFields.Item(BatchFields.BankAccount).PrefixRequired = True
        mvClassFields.Item(BatchFields.TransactionType).PrefixRequired = True
        mvClassFields.Item(BatchFields.PaymentMethod).PrefixRequired = True
        mvClassFields.Item(BatchFields.Product).PrefixRequired = True
        mvClassFields.Item(BatchFields.Rate).PrefixRequired = True
        mvClassFields.Item(BatchFields.Source).PrefixRequired = True
        mvClassFields.Item(BatchFields.JobNumber).PrefixRequired = True

        mvClassFields.Item(BatchFields.CurrencyCode).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataCurrencyCode)
        mvClassFields.Item(BatchFields.BatchAnalysisCode).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataBatchAnalysisCodes)
        mvClassFields.Item(BatchFields.Campaign).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataBatchCampaign)
        mvClassFields.Item(BatchFields.Appeal).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataBatchCampaign)
        mvClassFields.Item(BatchFields.BankingDate).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataBankingDate)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "b"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "batches"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property BatchNumber() As Integer
      Get
        Return mvClassFields(BatchFields.BatchNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property BatchTypeCode() As String
      Get
        Return mvClassFields(BatchFields.BatchType).Value
      End Get
    End Property
    Public Property BatchDate() As String
      Get
        Return mvClassFields(BatchFields.BatchDate).Value
      End Get
      Set(ByVal pValue As String)
        mvClassFields(BatchFields.BatchDate).Value = pValue
      End Set
    End Property
    Public Property CashBookBatch() As String
      Get
        Return mvClassFields(BatchFields.CashBookBatch).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchFields.CashBookBatch).Value = value
      End Set
    End Property
    Public Property BankAccount() As String
      Get
        Return mvClassFields(BatchFields.BankAccount).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchFields.BankAccount).Value = value
      End Set
    End Property
    Public Property NumberOfEntries() As Integer
      Get
        Return mvClassFields(BatchFields.NumberOfEntries).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchFields.NumberOfEntries).IntegerValue = value
      End Set
    End Property
    Public Property BatchTotal() As Double
      Get
        Return mvClassFields(BatchFields.BatchTotal).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(BatchFields.BatchTotal).DoubleValue = value
      End Set
    End Property
    Public ReadOnly Property TransactionTotal() As Double
      Get
        Return mvClassFields(BatchFields.TransactionTotal).DoubleValue
      End Get
    End Property
    Public Property NumberOfTransactions() As Integer
      Get
        Return mvClassFields(BatchFields.NumberOfTransactions).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchFields.NumberOfTransactions).IntegerValue = value
      End Set
    End Property
    Public ReadOnly Property NextTransactionNumber() As Integer
      Get
        Return mvClassFields(BatchFields.NextTransactionNumber).IntegerValue
      End Get
    End Property
    Public Property ReadyForBanking() As Boolean
      Get
        Return mvClassFields(BatchFields.ReadyForBanking).Bool
      End Get
      Set(ByVal value As Boolean)
        mvClassFields(BatchFields.ReadyForBanking).Bool = value
      End Set
    End Property
    Public ReadOnly Property PayingInSlipPrinted() As Boolean
      Get
        Return mvClassFields(BatchFields.PayingInSlipPrinted).Bool
      End Get
    End Property
    Public Property PostedToCashBook() As Boolean
      Get
        Return mvClassFields(BatchFields.PostedToCashBook).Bool
      End Get
      Set(ByVal pValue As Boolean)
        mvClassFields(BatchFields.PostedToCashBook).Bool = pValue
      End Set
    End Property
    Public ReadOnly Property DetailCompleted() As Boolean
      Get
        Return mvClassFields(BatchFields.DetailCompleted).Bool
      End Get
    End Property
    Public Property PostedToNominal() As Boolean
      Get
        Return mvClassFields(BatchFields.PostedToNominal).Bool
      End Get
      Set(ByVal value As Boolean)
        mvClassFields(BatchFields.PostedToNominal).Bool = value
      End Set
    End Property
    Public Property Picked() As String
      Get
        Return mvClassFields(BatchFields.Picked).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchFields.Picked).Value = value
      End Set
    End Property
    Public Property ProductCode() As String
      Get
        Return mvClassFields(BatchFields.Product).Value
      End Get
      Set(ByVal pValue As String)
        mvClassFields(BatchFields.Product).Value = pValue
      End Set
    End Property
    Public Property RateCode() As String
      Get
        Return mvClassFields(BatchFields.Rate).Value
      End Get
      Set(ByVal pValue As String)
        mvClassFields(BatchFields.Rate).Value = pValue
      End Set
    End Property
    Public ReadOnly Property Source() As String
      Get
        Return mvClassFields(BatchFields.Source).Value
      End Get
    End Property
    Public Property TransactionType() As String
      Get
        Return mvClassFields(BatchFields.TransactionType).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchFields.TransactionType).Value = value
      End Set
    End Property
    Public Property PaymentMethod() As String
      Get
        Return mvClassFields(BatchFields.PaymentMethod).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchFields.PaymentMethod).Value = value
      End Set
    End Property
    Public ReadOnly Property PayingInSlipNumber() As String
      Get
        Return mvClassFields(BatchFields.PayingInSlipNumber).Value
      End Get
    End Property
    Public ReadOnly Property CurrencyIndicator() As String
      Get
        Return mvClassFields(BatchFields.CurrencyIndicator).Value
      End Get
    End Property
    Public Property CurrencyBatchTotal() As Double
      Get
        Return mvClassFields(BatchFields.CurrencyBatchTotal).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(BatchFields.CurrencyBatchTotal).DoubleValue = value
      End Set
    End Property
    Public ReadOnly Property CurrencyTransactionTotal() As Double
      Get
        Return mvClassFields(BatchFields.CurrencyTransactionTotal).DoubleValue
      End Get
    End Property
    Public ReadOnly Property CurrencyExchangeRate() As Double
      Get
        Return mvClassFields(BatchFields.CurrencyExchangeRate).DoubleValue
      End Get
    End Property
    Public ReadOnly Property CurrencyCode() As String
      Get
        Return mvClassFields(BatchFields.CurrencyCode).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(BatchFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(BatchFields.AmendedOn).Value
      End Get
    End Property
    Public Property JournalNumber() As Integer
      Get
        Return mvClassFields(BatchFields.JournalNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchFields.JournalNumber).IntegerValue = value
      End Set
    End Property
    Public Property BatchCategory() As String
      Get
        Return mvClassFields(BatchFields.BatchCategory).Value
      End Get
      Set(value As String)
        mvClassFields(BatchFields.BatchCategory).Value = value
      End Set
    End Property
    Public ReadOnly Property BalancedBy() As String
      Get
        Return mvClassFields(BatchFields.BalancedBy).Value
      End Get
    End Property
    Public ReadOnly Property BalancedOn() As String
      Get
        Return mvClassFields(BatchFields.BalancedOn).Value
      End Get
    End Property
    Public ReadOnly Property PostedBy() As String
      Get
        Return mvClassFields(BatchFields.PostedBy).Value
      End Get
    End Property
    Public ReadOnly Property PostedOn() As String
      Get
        Return mvClassFields(BatchFields.PostedOn).Value
      End Get
    End Property
    Public ReadOnly Property ContentsAmendedBy() As String
      Get
        Return mvClassFields(BatchFields.ContentsAmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property ContentsAmendedOn() As String
      Get
        Return mvClassFields(BatchFields.ContentsAmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property HeaderAmendedBy() As String
      Get
        Return mvClassFields(BatchFields.HeaderAmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property HeaderAmendedOn() As String
      Get
        Return mvClassFields(BatchFields.HeaderAmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property BatchCreatedBy() As String
      Get
        Return mvClassFields(BatchFields.BatchCreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property BatchCreatedOn() As String
      Get
        Return mvClassFields(BatchFields.BatchCreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property PostNominal() As String
      Get
        Return mvClassFields(BatchFields.PostNominal).Value
      End Get
    End Property
    Public ReadOnly Property JobNumber() As Integer
      Get
        Return mvClassFields(BatchFields.JobNumber).IntegerValue
      End Get
    End Property
    Public Property Provisional() As Boolean
      Get
        Return mvClassFields(BatchFields.Provisional).Bool
      End Get
      Set(ByVal value As Boolean)
        mvClassFields(BatchFields.Provisional).Bool = value
      End Set
    End Property
    Public Property AgencyNumber() As Integer
      Get
        Return mvClassFields(BatchFields.AgencyNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchFields.AgencyNumber).IntegerValue = value
      End Set
    End Property
    Public Property ClaimSent() As String
      Get
        Return mvClassFields(BatchFields.ClaimSent).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchFields.ClaimSent).Value = value
      End Set
    End Property
    Public ReadOnly Property BatchAnalysisCode() As String
      Get
        Return mvClassFields(BatchFields.BatchAnalysisCode).Value
      End Get
    End Property
    Public ReadOnly Property Campaign() As String
      Get
        Return mvClassFields(BatchFields.Campaign).Value
      End Get
    End Property
    Public ReadOnly Property Appeal() As String
      Get
        Return mvClassFields(BatchFields.Appeal).Value
      End Get
    End Property
    Public ReadOnly Property BankingDate() As String
      Get
        Return mvClassFields(BatchFields.BankingDate).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Public Enum BatchTypes
      None = 0
      DirectDebit
      StandingOrder
      CreditCard
      DebitCard
      CreditCardAuthority
      FinancialAdjustment
      CreditSales
      Cash
      DirectCredit
      BackOrder
      CAFVouchers
      DistributorSales
      BankStatement
      GiveAsYouEarn     'Pre Tax Payroll Giving
      CAFCards
      GiftInKind
      CAFCommitmentReconciliation
      AnonymousCAFCard
      SaleOrReturn
      NonFinancial
      GiftAidClaimAdjustment
      PostTaxPayrollGiving
      CashWithInvoice
      CreditCardWithInvoice
    End Enum

    Public Enum ProvisionalOrConfirmed
      Provisional
      Confirmed
    End Enum

    Private mvMaximumTransactions As Integer = 9999

    Public Property BatchType() As BatchTypes
      Get
        Return GetBatchType(mvClassFields(BatchFields.BatchType).Value)
      End Get
      Set(ByVal value As BatchTypes)
        mvClassFields(BatchFields.BatchType).Value = GetBatchTypeCode(value)
      End Set
    End Property

    Public Property MaximumTransactions() As Integer
      Get
        Return mvMaximumTransactions
      End Get
      Set(ByVal value As Integer)
        mvMaximumTransactions = value
      End Set
    End Property

    Protected Overrides Sub SetValid()
      'Add code here to ensure all values are valid before saving
      MyBase.SetValid()
      If mvClassFields.Item(BatchFields.CurrencyCode).InDatabase Then
        If mvClassFields.Item(BatchFields.CurrencyCode).Value.Length = 0 And Not mvExisting Then
          mvClassFields.Item(BatchFields.CurrencyCode).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCurrencyCode)
          mvClassFields.Item(BatchFields.CurrencyExchangeRate).Value = CStr(1)
        End If
      End If
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      SetValid()
      If Not mvExisting Then SetBatchTotals()
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Sub SetBatchTotals()
      If NumberOfEntries = 0 Then
        mvClassFields.Item(BatchFields.NumberOfEntries).Value = mvClassFields.Item(BatchFields.NumberOfTransactions).Value
        mvClassFields.Item(BatchFields.TransactionTotal).Value = mvClassFields.Item(BatchFields.BatchTotal).Value
        mvClassFields.Item(BatchFields.CurrencyTransactionTotal).Value = mvClassFields.Item(BatchFields.CurrencyBatchTotal).Value
      End If
    End Sub

    'Public Sub InitOpenBatch( pSameAsBatch As Batch, Optional ByVal pProvisionalOrConfirmed As ProvisionalOrConfirmed =  ProvisionalOrConfirmed.Confirmed , 
    'Optional pBatchType As BatchTypes, Optional pBankAccount As String, Optional pPayMethod As String, Optional pPostToCashBook As Boolean = True, 
    'Optional ByVal pOrigBatchType As BatchTypes = BatchTypes.None, Optional ByVal pCurrencyCode As String = "", Optional ByVal pExchangeRate As Variant = 0, 
    'Optional pBatchCategory As String = "", Optional ByVal pBatchDate As String = "", Optional ByVal pCcDcCreditsOnly As Boolean = True, 
    'Optional ByVal pTransReference As String = "", Optional ByVal pBatchAnalysisCode As String = "")

    Public Sub InitOpenBatch(ByVal pSameAsBatch As Batch)
      InitOpenBatch(pSameAsBatch, ProvisionalOrConfirmed.Confirmed, BatchTypes.None, "", "", True, BatchTypes.None, "", 0, "", "", True, "", "", False)
    End Sub
    Public Sub InitOpenBatch(ByVal pSameAsBatch As Batch, ByVal pProvisionalOrConfirmed As ProvisionalOrConfirmed, ByVal pBatchType As BatchTypes, ByVal pBankAccount As String)
      InitOpenBatch(pSameAsBatch, pProvisionalOrConfirmed, pBatchType, pBankAccount, "", True, BatchTypes.None, "", 0, "", "", True, "", "", False)
    End Sub
    Public Sub InitOpenBatch(ByVal pSameAsBatch As Batch, ByVal pProvisionalOrConfirmed As ProvisionalOrConfirmed, ByVal pBatchType As BatchTypes, ByVal pBankAccount As String, ByVal pPostToCashBook As Boolean, ByVal pBatchDate As String)
      InitOpenBatch(pSameAsBatch, pProvisionalOrConfirmed, pBatchType, pBankAccount, "", pPostToCashBook, BatchTypes.None, "", 0, "", pBatchDate, True, "", "", False)
    End Sub
    Public Sub InitOpenBatch(ByVal pSameAsBatch As Batch, ByVal pProvisionalOrConfirmed As ProvisionalOrConfirmed, ByVal pBatchType As BatchTypes, ByVal pBankAccount As String, ByVal pPayMethod As String, ByVal pPostToCashBook As Boolean, ByVal pCurrencyCode As String, ByVal pExchangeRate As Double)
      InitOpenBatch(pSameAsBatch, pProvisionalOrConfirmed, pBatchType, pBankAccount, pPayMethod, pPostToCashBook, BatchTypes.None, pCurrencyCode, pExchangeRate, "", "", True, "", "", False)
    End Sub
    Public Sub InitOpenBatch(ByVal pSameAsBatch As Batch, ByVal pProvisionalOrConfirmed As ProvisionalOrConfirmed, ByVal pBatchType As BatchTypes, ByVal pBankAccount As String, ByVal pPayMethod As String, ByVal pPostToCashBook As Boolean, ByVal pOrigBatchType As BatchTypes, ByVal pCurrencyCode As String, ByVal pExchangeRate As Double, ByVal pBatchCategory As String)
      InitOpenBatch(pSameAsBatch, pProvisionalOrConfirmed, pBatchType, pBankAccount, pPayMethod, pPostToCashBook, pOrigBatchType, pCurrencyCode, pExchangeRate, pBatchCategory, "", True, "", "", False)
    End Sub
    Public Sub InitOpenBatch(ByVal pSameAsBatch As Batch, ByVal pProvisionalOrConfirmed As ProvisionalOrConfirmed, ByVal pBatchType As BatchTypes, ByVal pBankAccount As String, ByVal pPayMethod As String, ByVal pPostToCashBook As Boolean, ByVal pOrigBatchType As BatchTypes, ByVal pCurrencyCode As String, ByVal pExchangeRate As Double, ByVal pBatchCategory As String, ByVal pBatchDate As String)
      InitOpenBatch(pSameAsBatch, pProvisionalOrConfirmed, pBatchType, pBankAccount, pPayMethod, pPostToCashBook, pOrigBatchType, pCurrencyCode, pExchangeRate, pBatchCategory, pBatchDate, True, "", "", False)
    End Sub
    Public Sub InitOpenBatch(ByVal pSameAsBatch As Batch, ByVal pProvisionalOrConfirmed As ProvisionalOrConfirmed, ByVal pBatchType As BatchTypes, ByVal pBankAccount As String, ByVal pPayMethod As String, ByVal pPostToCashBook As Boolean, ByVal pOrigBatchType As BatchTypes, ByVal pCurrencyCode As String, ByVal pExchangeRate As Double, ByVal pBatchCategory As String, ByVal pBatchDate As String, ByVal pCcDcCreditsOnly As Boolean)
      InitOpenBatch(pSameAsBatch, pProvisionalOrConfirmed, pBatchType, pBankAccount, pPayMethod, pPostToCashBook, pOrigBatchType, pCurrencyCode, pExchangeRate, pBatchCategory, pBatchDate, pCcDcCreditsOnly, "", "", False)
    End Sub
    Public Sub InitOpenBatch(ByVal pSameAsBatch As Batch, ByVal pProvisionalOrConfirmed As ProvisionalOrConfirmed, ByVal pBatchType As BatchTypes, ByVal pBankAccount As String, ByVal pPayMethod As String, ByVal pPostToCashBook As Boolean, ByVal pOrigBatchType As BatchTypes, ByVal pCurrencyCode As String, ByVal pExchangeRate As Double, ByVal pBatchCategory As String, ByVal pBatchDate As String, ByVal pCcDcCreditsOnly As Boolean, ByVal pTransReference As String, ByVal pBatchAnalysisCode As String)
      InitOpenBatch(pSameAsBatch, pProvisionalOrConfirmed, pBatchType, pBankAccount, pPayMethod, pPostToCashBook, pOrigBatchType, pCurrencyCode, pExchangeRate, pBatchCategory, pBatchDate, pCcDcCreditsOnly, pTransReference, pBatchAnalysisCode, False)
    End Sub
    Public Sub InitOpenBatch(ByVal pSameAsBatch As Batch, ByVal pProvisionalOrConfirmed As ProvisionalOrConfirmed, ByVal pBatchType As BatchTypes, ByVal pBankAccount As String, ByVal pPayMethod As String, ByVal pPostToCashBook As Boolean, ByVal pOrigBatchType As BatchTypes, ByVal pCurrencyCode As String, ByVal pExchangeRate As Double, ByVal pBatchCategory As String, ByVal pBatchDate As String, ByVal pCcDcCreditsOnly As Boolean, ByVal pTransReference As String, ByVal pBatchAnalysisCode As String, ByVal pRestrictPaymentMethod As Boolean)
      Init()
      'Set up parameters to search for open batch or to use for new batch
      'If a SameAs batch is passed then look for or create an identical batch

      Dim vTransType As String = "P"
      Dim vBatchType As BatchTypes
      Dim vBankAccount, vCurrencyCode As String
      Dim vPaymentMethod As String = ""
      Dim vExchangeRate As Double

      If pSameAsBatch Is Nothing Then
        vBatchType = pBatchType
        vBankAccount = pBankAccount
        vCurrencyCode = pCurrencyCode
        vExchangeRate = pExchangeRate
        Select Case pPayMethod
          Case "GFIK"
            vPaymentMethod = mvEnv.GetConfig("pm_gift_in_kind")
          Case "CASH"
            vPaymentMethod = mvEnv.GetConfig("pm_cash")
          Case "CHEQ", "CQIN"
            vPaymentMethod = mvEnv.GetConfig("pm_cheque")
          Case "POST"
            vPaymentMethod = mvEnv.GetConfig("pm_po")
          Case "CRED", "CRDN"
            vPaymentMethod = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSPayMethod)
            vTransType = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSTransType)
          Case "CARD"
            Debug.Assert(pPayMethod <> "CARD")   'Not supported any more
          Case "CCARD", "CCIN"
            vPaymentMethod = mvEnv.GetConfig("pm_cc")
          Case "DCARD"
            vPaymentMethod = mvEnv.GetConfig("pm_dc")
          Case "DIRD"
            vPaymentMethod = mvEnv.GetConfig("pm_dd")
          Case "STDO"
            vPaymentMethod = mvEnv.GetConfig("pm_so")
          Case "SAOR"
            vPaymentMethod = mvEnv.GetConfig("pm_sr") 'Sale Or Return
          Case Else
            vPaymentMethod = pPayMethod
        End Select
      Else
        With pSameAsBatch
          vBatchType = .BatchType
          vBankAccount = .BankAccount
          vPaymentMethod = .PaymentMethod
          vCurrencyCode = .CurrencyCode
          vExchangeRate = .CurrencyExchangeRate
        End With
      End If
      Dim vReadyForBanking, vPayingInSlip, vPostedToCashBook As Boolean
      Dim vPostDDBatchesToCB As Boolean = mvEnv.GetConfigOption("option_post_DD_batches_to_CB", True)
      Dim vPostCVBatchesToCB As Boolean = mvEnv.GetConfigOption("option_post_batches_to_CB")
      Dim vPostCFBatchesToCB As Boolean = mvEnv.GetConfigOption("fp_card_batches_to_CB")

      Select Case vBatchType
        Case BatchTypes.CreditCard, BatchTypes.DebitCard, BatchTypes.CreditCardWithInvoice
          vReadyForBanking = True
          If Not pPostToCashBook Then vPostedToCashBook = True
          '    If pOrigBatchType <> BatchTypes.None Then vPayingInSlip = True
          vPayingInSlip = False
        Case BatchTypes.CreditSales, BatchTypes.GiftInKind
          vReadyForBanking = True
          vPayingInSlip = True
          vPostedToCashBook = True
        Case BatchTypes.DirectCredit
          If Not vPostDDBatchesToCB AndAlso pOrigBatchType = BatchTypes.DirectDebit Then vPostedToCashBook = True
          vTransType = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlReverseTransType)
        Case BatchTypes.FinancialAdjustment
          If Not vPostDDBatchesToCB AndAlso pOrigBatchType = BatchTypes.DirectDebit Then
            vPostedToCashBook = True
          Else
            If Not pPostToCashBook Then vPostedToCashBook = True
          End If
          vTransType = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlReverseTransType)
          vReadyForBanking = True
          vPayingInSlip = True
        Case BatchTypes.CAFVouchers, BatchTypes.CAFCommitmentReconciliation
          vReadyForBanking = True
          vPayingInSlip = True
          vPostedToCashBook = Not (vPostCVBatchesToCB)
        Case BatchTypes.CAFCards, BatchTypes.AnonymousCAFCard
          vReadyForBanking = True
          If pProvisionalOrConfirmed = ProvisionalOrConfirmed.Confirmed Then
            vPayingInSlip = True
            vPostedToCashBook = Not (vPostCFBatchesToCB)
          End If
        Case BatchTypes.PostTaxPayrollGiving
          vReadyForBanking = True
          vPayingInSlip = True
          If Not pPostToCashBook Then vPostedToCashBook = True
        Case BatchTypes.GiveAsYouEarn
          If Not pPostToCashBook Then vPostedToCashBook = True
      End Select
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("ob.batch_type", GetBatchTypeCode(vBatchType))
      vWhereFields.Add("ob.bank_account", vBankAccount)
      vWhereFields.Add("ob.batch_number", CDBField.FieldTypes.cftInteger, "b.batch_number")
      If mvClassFields.Item(BatchFields.CurrencyCode).InDatabase Then
        If vCurrencyCode.Length = 0 Then
          vCurrencyCode = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCurrencyCode)
          vExchangeRate = 1
        End If
        vWhereFields.Add("currency_code", vCurrencyCode)
        vWhereFields.Add("currency_exchange_rate", CDBField.FieldTypes.cftNumeric, vExchangeRate.ToString)
      End If

      '  'BR7706 - Commented out 17/2/2004, code left in place in case this is the wrong thing to do!
      '  If pBatchType = BatchTypes.CreditSales And pOrigBatchType <> BatchTypes.None Then
      '    'Credit sales batch for a financial adjustment
      '    vWhereFields.Add "batch_total", cftNumeric, 0, fwoLessThan
      '  End If

      If pPayMethod = "CRDN" Then
        vWhereFields.Add("transaction_total", 0, CDBField.FieldWhereOperators.fwoLessThan)
      Else
        'vWhereFields.Add "posted_to_cash_book", cftCharacter, IIf(pPostToCashBook, "N", "Y")
        vWhereFields.Add("posted_to_cash_book", IIf(vPostedToCashBook, "Y", "N").ToString)
      End If
      If pBatchCategory.Length > 0 Then vWhereFields.Add("batch_category", pBatchCategory)
      If pBatchAnalysisCode.Length > 0 Then vWhereFields.Add("batch_analysis_code", pBatchAnalysisCode)
      Select Case mvEnv.GetConfig("opt_batch_per_user")
        Case "DEPARTMENT"
          vWhereFields.Add("batch_created_by", "SELECT logname FROM users WHERE department = '" & mvEnv.User.Department & "'", CDBField.FieldWhereOperators.fwoIn)
        Case "USER"
          vWhereFields.Add("batch_created_by", mvEnv.User.Logname)
      End Select
      vWhereFields.Add("provisional", IIf(pProvisionalOrConfirmed = ProvisionalOrConfirmed.Provisional, "Y", "N").ToString)
      If IsDate(pBatchDate) Then vWhereFields.Add("batch_date", CDBField.FieldTypes.cftDate, pBatchDate)

      If (vBatchType = BatchTypes.FinancialAdjustment AndAlso (pOrigBatchType = BatchTypes.CreditCard OrElse pOrigBatchType = BatchTypes.DebitCard OrElse pOrigBatchType = BatchTypes.CreditCardWithInvoice)) _
      OrElse (vBatchType = BatchTypes.CreditCard OrElse vBatchType = BatchTypes.DebitCard OrElse vBatchType = BatchTypes.CreditCardWithInvoice) Then
        'These flags need to be set in this way
        vWhereFields.Add("ready_for_banking", IIf(vReadyForBanking, "Y", "N").ToString)
        vWhereFields.Add("paying_in_slip_printed", IIf(vPayingInSlip, "Y", "N").ToString)
      End If

      vWhereFields.Add("next_transaction_number", mvMaximumTransactions, CDBField.FieldWhereOperators.fwoLessThanEqual)
      If pRestrictPaymentMethod Then
        vWhereFields.Add("payment_method", vPaymentMethod)
      End If
      Dim vTable As System.Data.DataTable = New SQLStatement(mvEnv.Connection, MyBase.GetRecordSetFields, "open_batches ob, batches b", vWhereFields, "ob.batch_number DESC").GetDataTable
      Dim vBatchFound As Boolean
      If vTable IsNot Nothing Then
        For Each vRow As System.Data.DataRow In vTable.Rows
          If vBatchFound Then
            Exit For
          Else
            If (pBatchType = BatchTypes.CreditCard OrElse pBatchType = BatchTypes.DebitCard OrElse pBatchType = BatchTypes.CreditCardWithInvoice) Then
              If CardDebitTransactions(IntegerValue(vRow("batch_number").ToString)) = True Then
                'Batch contains debit transactions - only use if doing a debit transaction
                vBatchFound = Not (pCcDcCreditsOnly)
              Else
                'Batch contains credit transactions - only use if doing credit transaction
                vBatchFound = pCcDcCreditsOnly
              End If
            ElseIf pBatchType = BatchTypes.PostTaxPayrollGiving Then
              'Find an existing open Batch where the transactions have the same reference
              vBatchFound = TransactionsContainSameReference(IntegerValue(vRow("batch_number").ToString), pTransReference)
            Else
              vBatchFound = True
            End If
            If vBatchFound Then InitFromDataRow(vRow, False)
          End If
        Next
      End If
      If vBatchFound = False Then
        SetDefaults()
        mvClassFields.Item(BatchFields.BatchNumber).IntegerValue = mvEnv.GetControlNumber("B")
        PaymentMethod = vPaymentMethod
        BatchType = vBatchType
        BankAccount = vBankAccount
        TransactionType = vTransType
        ReadyForBanking = vReadyForBanking
        PostedToCashBook = vPostedToCashBook
        If IsDate(pBatchDate) Then BatchDate = pBatchDate
        mvClassFields.Item(BatchFields.PayingInSlipPrinted).Bool = vPayingInSlip
        mvClassFields.Item(BatchFields.CurrencyCode).Value = vCurrencyCode
        mvClassFields.Item(BatchFields.CurrencyExchangeRate).DoubleValue = vExchangeRate
        mvClassFields.Item(BatchFields.Provisional).Bool = pProvisionalOrConfirmed = ProvisionalOrConfirmed.Provisional
        mvClassFields.Item(BatchFields.BatchCategory).Value = pBatchCategory
        mvClassFields.Item(BatchFields.BatchAnalysisCode).Value = pBatchAnalysisCode
        Save()
        Dim vInsertFields As New CDBFields
        vInsertFields.Add("batch_number", BatchNumber)
        vInsertFields.Add("batch_type", mvClassFields.Item(BatchFields.BatchType).Value)
        vInsertFields.Add("bank_account", BankAccount)
        vInsertFields.AddAmendedOnBy(mvEnv.User.UserID)
        mvEnv.Connection.InsertRecord("open_batches", vInsertFields)
      End If
    End Sub

    Public Function CardDebitTransactions(ByVal pBatchNumber As Integer) As Boolean
      'Check if this Credit/Debit Card batch contains negative value transactions
      Dim vFields As New CDBFields
      With vFields
        .Add("batch_number", pBatchNumber)
        .Add("tt.transaction_type", CDBField.FieldTypes.cftLong, "bt.transaction_type")
        .Add("transaction_sign", "D")
        .Add("negatives_allowed", "Y")
      End With
      Return mvEnv.Connection.GetCount("batch_transactions bt, transaction_types tt", vFields) > 0
    End Function

    Public Function TransactionsContainSameReference(ByVal pBatchNumber As Integer, ByVal pTransReference As String) As Boolean
      Dim vFields As New CDBFields
      With vFields
        .Add("batch_number", pBatchNumber)
        .Add("reference", pTransReference)
      End With
      Return mvEnv.Connection.GetCount("batch_transactions", vFields) > 0
    End Function

    Public Function AllocateTransactionNumber() As Integer
      Dim vTransactionNumber As Integer
      Dim vRetries As Integer
      Dim vCount As Integer

      Do
        vTransactionNumber = NextTransactionNumber
        Dim vWhereFields As New CDBFields
        vWhereFields.Clear()
        vWhereFields.Add(mvClassFields.Item(BatchFields.BatchNumber).Name, BatchNumber)
        vWhereFields.Add(mvClassFields.Item(BatchFields.NextTransactionNumber).Name, vTransactionNumber)
        mvClassFields.Item(BatchFields.NextTransactionNumber).IntegerValue = vTransactionNumber + 1
        vCount = mvEnv.Connection.UpdateRecords(DatabaseTableName, mvClassFields.UpdateFields, vWhereFields, False)
        vRetries = vRetries + 1
        If vCount = 0 Then Init(BatchNumber) 'Re-read the batch record
      Loop While vCount = 0 AndAlso vRetries < mvEnv.MaxRetries
      If vCount = 0 Then RaiseError(DataAccessErrors.daeAllocateBatchTransaction, mvClassFields.Item(BatchFields.BatchNumber).Value)
      Return vTransactionNumber
    End Function

    Public Sub AddTransactionAmount(ByRef pAmount As Double)
      AddTransactionAmount(pAmount, True, False, 1)
    End Sub
    Public Sub AddTransactionAmount(ByVal pAmount As Double, ByVal pUpdateTotals As Boolean)
      AddTransactionAmount(pAmount, True, pUpdateTotals, 1)
    End Sub
    Public Sub AddTransactionAmount(ByVal pAmount As Double, ByVal pNewTransaction As Boolean, ByVal pUpdateTotals As Boolean)
      AddTransactionAmount(pAmount, pNewTransaction, pUpdateTotals, 1)
    End Sub
    Public Sub AddTransactionAmount(ByVal pAmount As Double, ByVal pNewTransaction As Boolean, ByVal pUpdateTotals As Boolean, ByVal pTransactionCount As Integer)
      Dim vUpdateFields As New CDBFields
      With vUpdateFields
        .Add("detail_completed", "N")
        If pNewTransaction Then .Add("number_of_transactions", CDBField.FieldTypes.cftInteger, "number_of_transactions + " & pTransactionCount)
        .Add("transaction_total", CDBField.FieldTypes.cftInteger, "transaction_total + " & pAmount)
        If mvClassFields.Item(Batch.BatchFields.CurrencyCode).InDatabase Then .Add("currency_transaction_total", CDBField.FieldTypes.cftInteger, "currency_transaction_total + " & pAmount)
        If pUpdateTotals Then
          If pNewTransaction Then
            .Add("number_of_entries", CDBField.FieldTypes.cftInteger, "number_of_transactions + " & pTransactionCount)
          Else
            .Add("number_of_entries", CDBField.FieldTypes.cftInteger, "number_of_transactions")
          End If
          .Add("batch_total", CDBField.FieldTypes.cftInteger, "transaction_total + " & pAmount)
          If mvClassFields.Item(Batch.BatchFields.CurrencyCode).InDatabase Then .Add("currency_batch_total", CDBField.FieldTypes.cftInteger, "currency_transaction_total + " & pAmount)
        End If
        .Add("contents_amended_by", mvEnv.User.UserID)
        .Add("contents_amended_on", CDBField.FieldTypes.cftDate, TodaysDate)
      End With
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("batch_number", BatchNumber)
      mvEnv.Connection.UpdateRecords(DatabaseTableName, vUpdateFields, vWhereFields)
    End Sub

    Protected Overrides Sub SetDefaults()
      'Add code here to initialise the class with default values for a new record
      With mvClassFields
        .Item(BatchFields.BatchDate).Value = TodaysDate()
        .Item(BatchFields.BatchTotal).DoubleValue = 0
        .Item(BatchFields.TransactionTotal).DoubleValue = 0
        .Item(BatchFields.NumberOfTransactions).IntegerValue = 0
        .Item(BatchFields.NumberOfEntries).IntegerValue = 0
        .Item(BatchFields.NextTransactionNumber).IntegerValue = 1
        .Item(BatchFields.ReadyForBanking).Bool = False
        .Item(BatchFields.PayingInSlipPrinted).Bool = False
        .Item(BatchFields.PostedToCashBook).Bool = False
        .Item(BatchFields.DetailCompleted).Bool = False
        .Item(BatchFields.PostedToNominal).Bool = False
        .Item(BatchFields.Picked).Value = "N"
        .Item(BatchFields.PostNominal).Bool = False
        .Item(BatchFields.BatchCreatedBy).Value = mvEnv.User.Logname
        .Item(BatchFields.BatchCreatedOn).Value = TodaysDate()
        .Item(BatchFields.CurrencyExchangeRate).DoubleValue = 1
        .Item(BatchFields.CurrencyBatchTotal).DoubleValue = 0
        .Item(BatchFields.CurrencyTransactionTotal).DoubleValue = 0
      End With
    End Sub

    Public Shared Function GetBatchType(ByVal pCode As String) As Batch.BatchTypes
      Select Case pCode
        Case "BO"
          Return Batch.BatchTypes.BackOrder
        Case "CA"
          Return Batch.BatchTypes.Cash
        Case "CC"
          Return Batch.BatchTypes.CreditCard
        Case "CO"
          Return Batch.BatchTypes.CreditCardAuthority
        Case "CS"
          Return Batch.BatchTypes.CreditSales
        Case "CV"
          Return Batch.BatchTypes.CAFVouchers
        Case "DC"
          Return Batch.BatchTypes.DebitCard
        Case "DD"
          Return Batch.BatchTypes.DirectDebit
        Case "DI"
          Return Batch.BatchTypes.DistributorSales
        Case "DR"
          Return Batch.BatchTypes.DirectCredit
        Case "FA"
          Return Batch.BatchTypes.FinancialAdjustment
        Case "SO"
          Return Batch.BatchTypes.StandingOrder
        Case "SP"
          Return Batch.BatchTypes.BankStatement
        Case "GP"
          Return Batch.BatchTypes.GiveAsYouEarn
        Case "CF"
          Return Batch.BatchTypes.CAFCards
        Case "GK"
          Return Batch.BatchTypes.GiftInKind
        Case "CR"
          Return Batch.BatchTypes.CAFCommitmentReconciliation
        Case "AN"
          Return Batch.BatchTypes.AnonymousCAFCard
        Case "SR"
          Return Batch.BatchTypes.SaleOrReturn
        Case "NF"
          Return Batch.BatchTypes.NonFinancial
        Case "GC"
          Return Batch.BatchTypes.GiftAidClaimAdjustment
        Case "PG"
          Return Batch.BatchTypes.PostTaxPayrollGiving
        Case "AI"
          Return BatchTypes.CashWithInvoice
        Case "CI"
          Return BatchTypes.CreditCardWithInvoice
        Case Else
          RaiseError(DataAccessErrors.daeInvalidBatchType, pCode)
      End Select
    End Function

    Public Shared Function GetBatchTypeCode(ByVal pBatchType As Batch.BatchTypes) As String
      Select Case pBatchType
        Case Batch.BatchTypes.BackOrder
          Return "BO"
        Case Batch.BatchTypes.Cash
          Return "CA"
        Case Batch.BatchTypes.CreditCard
          Return "CC"
        Case Batch.BatchTypes.CreditCardAuthority
          Return "CO"
        Case Batch.BatchTypes.CreditSales
          Return "CS"
        Case Batch.BatchTypes.CAFVouchers
          Return "CV"
        Case Batch.BatchTypes.DebitCard
          Return "DC"
        Case Batch.BatchTypes.DirectDebit
          Return "DD"
        Case Batch.BatchTypes.DistributorSales
          Return "DI"
        Case Batch.BatchTypes.DirectCredit
          Return "DR"
        Case Batch.BatchTypes.FinancialAdjustment
          Return "FA"
        Case Batch.BatchTypes.StandingOrder
          Return "SO"
        Case Batch.BatchTypes.BankStatement
          Return "SP"
        Case Batch.BatchTypes.GiveAsYouEarn
          Return "GP"
        Case Batch.BatchTypes.CAFCards
          Return "CF"
        Case Batch.BatchTypes.GiftInKind
          Return "GK"
        Case Batch.BatchTypes.CAFCommitmentReconciliation
          Return "CR"
        Case Batch.BatchTypes.AnonymousCAFCard
          Return "AN"
        Case Batch.BatchTypes.SaleOrReturn
          Return "SR"
        Case Batch.BatchTypes.NonFinancial
          Return "NF"
        Case Batch.BatchTypes.GiftAidClaimAdjustment
          Return "GC"
        Case Batch.BatchTypes.PostTaxPayrollGiving
          Return "PG"
        Case BatchTypes.CashWithInvoice
          Return "AI"
        Case BatchTypes.CreditCardWithInvoice
          Return "CI"
        Case Else
          Return ""
      End Select
    End Function

    Public Function CreateCreditSaleBatch(ByRef pErrorCount As Integer) As Batch
      'Only to be used from Batch Update task
      Dim vCSBatch As New Batch(mvEnv)

      Dim vInTrans As Boolean
      Try
        'Read all transaction analysis lines for current batch (AI or CI)
        Dim vWhereFields As New CDBFields
        vWhereFields.Add("bta.batch_number", BatchNumber)
        vWhereFields.Add("line_type", "'N','U'", CDBField.FieldWhereOperators.fwoIn)
        'Don't proceed if the batch has already been splitted
        If mvEnv.Connection.GetCount("batch_transaction_analysis bta", vWhereFields) = 0 Then
          vWhereFields.Remove("line_type")
          Dim vNewBTA As New BatchTransactionAnalysis(mvEnv)
          vNewBTA.Init()
          Dim vBTARS As CDBRecordSet = New SQLStatement(mvEnv.Connection, vNewBTA.GetRecordSetFields, "batch_transaction_analysis bta", vWhereFields, "transaction_number, line_number").GetRecordSet
          vBTARS.Fetch()

          'Read all batch transactions for current batch
          vWhereFields.Clear()
          vWhereFields.Add("bt.batch_number", BatchNumber)
          Dim vAnsiJoins As New AnsiJoins
          vAnsiJoins.Add("credit_sales cs", "bt.batch_number", "cs.batch_number", "bt.transaction_number", "cs.transaction_number")
          vAnsiJoins.Add("transaction_types tt", "bt.transaction_type", "tt.transaction_type")
          vAnsiJoins.Add("contacts c", "cs.contact_number", "c.contact_number")
          Dim vOriginalBT As New BatchTransaction(mvEnv)
          vOriginalBT.Init()
          Dim vBTRS As CDBRecordSet = New SQLStatement(mvEnv.Connection, "sales_ledger_account,stock_sale," & vOriginalBT.GetRecordSetFieldsTransactionType, "batch_transactions bt", vWhereFields, "bt.transaction_number", vAnsiJoins).GetRecordSet

          'Read all the product information for each analysis line that has a product
          Dim vProduct As New Product(mvEnv)
          vProduct.Init()
          vAnsiJoins.Clear()
          vAnsiJoins.Add("batch_transaction_analysis bta", "bt.batch_number", "bta.batch_number", "bt.transaction_number", "bta.transaction_number")
          vAnsiJoins.Add("products p", "bta.product", "p.product")
          Dim vBTARSP As CDBRecordSet = New SQLStatement(mvEnv.Connection, "bt.transaction_number,bta.line_number," & vProduct.GetRecordSetFields(Product.ProductRecordSetTypes.prstMain), "batch_transactions bt", vWhereFields, "bt.transaction_number, bta.line_number", vAnsiJoins).GetRecordSet
          vBTARSP.Fetch()

          If mvEnv.Connection.InTransaction = False Then
            mvEnv.Connection.StartTransaction()
            vInTrans = True
          End If

          'Original batch (Me) is already locked
          'Create & lock the new CS batch
          vCSBatch.InitNewBatch(mvEnv)  'This will create a new batch number
          With vCSBatch
            .BatchType = Batch.BatchTypes.CreditSales
            .BankAccount = Me.BankAccount
            .ReadyForBanking = True
            .PostedToCashBook = True
            .SetPayingInSlipPrinted(0)
            .TransactionType = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSTransType)
            .PaymentMethod = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSPayMethod)
            .Picked = Picked  'Make sure the Picked flag is copied
            .Provisional = False
          End With

          Dim vUpdateFields As New CDBFields
          vUpdateFields.Add("batch_number", vCSBatch.BatchNumber)
          vWhereFields.Clear()
          vWhereFields.Add("batch_number", BatchNumber)

          'Move any invoice to the new batch (this will be created if there was any issued stock)
          'Do this now as for Stock Sale, we need to update the invoice amount/paid amount for the new CS batch
          mvEnv.Connection.UpdateRecords("invoices", vUpdateFields, vWhereFields, False)
          vWhereFields.Add("transaction_number", CDBField.FieldTypes.cftInteger)

          Dim vCompanyControl As CompanyControl = Nothing
          'Move all analysis lines for every transaction (that are not for the invoice under / over payment products) to the new CS batch
          While vBTRS.Fetch
            vOriginalBT = New BatchTransaction(mvEnv)
            vOriginalBT.InitFromRecordSetTransactionType(vBTRS)
            vOriginalBT.InitAnalysisFromRecordSets(mvEnv, vBTARS, vBTARSP)

            Dim vCSWithStockItems As Boolean = vBTRS.Fields("stock_sale").Bool
            Dim vSalesLedgerAccount As String = vBTRS.Fields("sales_ledger_account").Value

            'Create a new transaction (CS) with the same transaction number (AI or CI)
            Dim vNewBT As New BatchTransaction(mvEnv)
            vNewBT.InitFromBatch(mvEnv, vCSBatch, vOriginalBT.TransactionNumber, vOriginalBT.TransactionSign)
            With vNewBT
              .ContactNumber = vOriginalBT.ContactNumber
              .AddressNumber = vOriginalBT.AddressNumber
              .TransactionDate = vOriginalBT.TransactionDate
              .TransactionType = vCSBatch.TransactionType
              .PaymentMethod = vCSBatch.PaymentMethod
              .Receipt = "N"
              .EligibleForGiftAid = vOriginalBT.EligibleForGiftAid
              .Mailing = vOriginalBT.Mailing
              If vOriginalBT.MailingContactNumber > 0 Then
                .MailingContactNumber = vOriginalBT.MailingContactNumber
                .MailingAddressNumber = vOriginalBT.MailingAddressNumber
              End If
              .Reference = vOriginalBT.Reference
              .Notes = vOriginalBT.Notes
              vWhereFields("transaction_number").Value = .TransactionNumber.ToString
            End With

            Dim vUnAllocated As Double = 0.0
            Dim vUnderPaymentLineAmount As Double = 0.0
            Dim vDistributionCode As String = ""
            Dim vSource As String = ""
            Dim vInvoiceAmountForStockItems As Double = 0.0
            Dim vIDLineNumbers As New StringBuilder
            'Create new analysis lines with same line numbers (CS)
            For Each vOriginalBTA As BatchTransactionAnalysis In vOriginalBT.Analysis
              If vOriginalBTA.ProductCode.Length > 0 AndAlso vOriginalBTA.ProductCode = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSUnderPayProduct) AndAlso _
                vOriginalBTA.RateCode.Length > 0 AndAlso vOriginalBTA.RateCode = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSUnderPayRate) Then
                vUnderPaymentLineAmount = vOriginalBTA.Amount
                vDistributionCode = vOriginalBTA.DistributionCode
                vSource = vOriginalBTA.Source
              ElseIf vOriginalBTA.ProductCode.Length > 0 AndAlso vOriginalBTA.ProductCode = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSOverPayProduct) AndAlso _
                vOriginalBTA.RateCode.Length > 0 AndAlso vOriginalBTA.RateCode = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSOverPayRate) Then
                vUnAllocated = vOriginalBTA.Amount
                vDistributionCode = vOriginalBTA.DistributionCode
                vSource = vOriginalBTA.Source
              Else
                vNewBTA = New BatchTransactionAnalysis(mvEnv)
                vNewBTA.InitFromTransaction(vNewBT, vOriginalBTA.LineNumber)
                vNewBTA.CloneFromBTA(vOriginalBTA)
                vNewBTA.Save()
                vNewBT.NextLineNumber = vOriginalBTA.LineNumber + 1
                'For stock items, it is possible that only some items are invoiced and others are on back order. BTA displays the full amount.
                'Get the invoice amount only for the items which have been issued so that we can decide later if the we need to create unallocated payment
                If vCSWithStockItems Then vInvoiceAmountForStockItems += FixTwoPlaces((vNewBTA.Amount / vNewBTA.Quantity) * vNewBTA.Issued)
                If vSource.Length = 0 Then vSource = vOriginalBTA.Source
                If vDistributionCode.Length = 0 Then vDistributionCode = vOriginalBTA.DistributionCode
                If vIDLineNumbers.ToString.Length > 0 Then vIDLineNumbers.Append(",")
                vIDLineNumbers.Append(vNewBTA.LineNumber.ToString)
              End If
            Next
            vNewBT.Notes = "Payment Batch Reference: " & BatchNumber.ToString & "/" & vOriginalBT.TransactionNumber & vbLf & vNewBT.Notes
            vNewBT.Save()

            Dim vAmountPaid As Double
            If vUnderPaymentLineAmount <> 0 Then
              'Partial payment
              vAmountPaid = vNewBT.Amount + vUnderPaymentLineAmount
            Else
              'Full Payment (even for Over Payment)
              vAmountPaid = vNewBT.Amount
            End If

            Dim vInvoice As Invoice = Nothing
            Dim vInvoiceNumber As String = ""
            If vCSWithStockItems Then
              vInvoice = New Invoice
              vInvoice.Init(mvEnv, vNewBT.BatchNumber, vNewBT.TransactionNumber)
              If vInvoice.Existing Then
                'The invoice exists. This means at least one stock item was processed successfully. Make sure not to pay more than the invoice amount.
                'Any over payment will be used as Unallocated.
                If vAmountPaid > vInvoiceAmountForStockItems Then
                  vUnAllocated += vAmountPaid - vInvoiceAmountForStockItems
                  vAmountPaid = vInvoiceAmountForStockItems
                  vInvoice.InvoiceAmount = vAmountPaid  'Set the invoice amount so that SetAmountPaid can correct set the status of Fully paid
                ElseIf vAmountPaid = vInvoiceAmountForStockItems Then
                  'Reset the invoice amount as it could be greater when for one stock item 2 quantity was ordered but one went on back order and 
                  'the payment amount matches the calculated invoice amount but the vInvoice.InvoiceAmount is greater.
                  vInvoice.InvoiceAmount = vAmountPaid  'Set the invoice amount so that SetAmountPaid can correct set the status of Fully paid
                End If
                vInvoice.SetAmountPaid(vAmountPaid)
                vInvoice.Save()
                vInvoiceNumber = vInvoice.InvoiceNumber
              End If
            Else
              If vCompanyControl Is Nothing Then
                vCompanyControl = New CompanyControl
                vCompanyControl.InitFromBankAccount(mvEnv, vCSBatch.BankAccount)
              End If
              'Create new invoice with Amount Paid
              'This will also increase the outstanding amount on the SLA for the contact
              vInvoice = vCSBatch.WriteInvoice(vNewBT.BatchNumber, vNewBT, vNewBT.ContactNumber, vNewBT.AddressNumber, vCompanyControl.Company, vSalesLedgerAccount, True)
              If vInvoice Is Nothing Then
                RaiseError(DataAccessErrors.daeFailedToCreateInvoice, vNewBT.BatchNumber.ToString, vNewBT.TransactionNumber.ToString)
              End If
              vInvoice.SetInvoiceNumber(pSetProvisionalInvoiceNumber:=True)
              vInvoice.SetAmountPaid(vAmountPaid)
              vInvoice.Save()
              vInvoiceNumber = vInvoice.InvoiceNumber
              If vIDLineNumbers.ToString.Length > 0 Then
                Dim vLines() As String = vIDLineNumbers.ToString.Split(","c)
                For vIndex As Integer = 0 To vLines.GetUpperBound(0)
                  Dim vID As New InvoiceDetail
                  vID.Create(mvEnv, vNewBT.BatchNumber, vNewBT.TransactionNumber, IntegerValue(vLines(vIndex)), IntegerValue(vInvoiceNumber))
                  vID.Save(mvEnv.User.UserID)
                Next
              End If
            End If

            'Delete all BTA for this transaction
            mvEnv.Connection.DeleteRecords("batch_transaction_analysis", vWhereFields)

            'Clear the following on original BT as the new payment lines will set this data
            vOriginalBT.Amount = 0
            vOriginalBT.CurrencyAmount = 0
            vOriginalBT.LineTotal = 0

            'Only create Invoice Payment if the invoice was created
            If vInvoiceNumber.Length > 0 Then
              vNewBTA = New BatchTransactionAnalysis(mvEnv)
              vNewBTA.InitFromTransaction(vOriginalBT, 1)
              'Add Invoice Payment for Amount Paid
              With vNewBTA
                If vAmountPaid = 0 Then
                  .LineType = "P"
                  .ProductCode = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSUnderPayProduct)
                  .RateCode = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSUnderPayRate)
                Else
                  .LineType = "N"
                  .InvoiceNumber = IntegerValue(vInvoiceNumber)
                End If

                .CurrencyAmount = vAmountPaid
                .Amount = CalculateCurrencyAmount(vAmountPaid, vCSBatch.CurrencyCode, vCSBatch.CurrencyExchangeRate, True)
                .DistributionCode = vDistributionCode
                .Source = vSource
                .Quantity = 1
                .MemberNumber = vSalesLedgerAccount
                .ContactNumber = vOriginalBT.ContactNumber
                .AddressNumber = vOriginalBT.AddressNumber
                .Save()
              End With
            Else
              'When invoice is not created (back order etc.) then the payment amount is Unallocated
              vUnAllocated += vAmountPaid
            End If

            'Add Unallocated Sales ledger Payment
            If vUnAllocated > 0 Then
              vNewBTA = New BatchTransactionAnalysis(mvEnv)
              vNewBTA.InitFromTransaction(vOriginalBT, 2)
              With vNewBTA
                .LineType = "U"
                .Amount = CalculateCurrencyAmount(vUnAllocated, vCSBatch.CurrencyCode, vCSBatch.CurrencyExchangeRate, True)
                .CurrencyAmount = vUnAllocated
                .DistributionCode = vDistributionCode
                .Source = vSource
                .Quantity = 1
                .MemberNumber = vSalesLedgerAccount
                .ContactNumber = vOriginalBT.ContactNumber
                .AddressNumber = vOriginalBT.AddressNumber
                .Save()
              End With
            End If
            vOriginalBT.Notes = "Credit Sale Batch Reference: " & vCSBatch.BatchNumber.ToString & "/" & vNewBT.TransactionNumber & vbLf & vOriginalBT.Notes
            vOriginalBT.Save()  'just in case
          End While
          vCSBatch.SetBatchTotals()
          vCSBatch.SetDetailComplete(Nothing, False)
          vCSBatch.LockBatch()

          vWhereFields.Clear()
          vWhereFields.Add("batch_number", BatchNumber)

          'Move any invoice details to the new batch (this will be created if there was any stock)
          mvEnv.Connection.UpdateRecords("invoice_details", vUpdateFields, vWhereFields, False)

          'Transaction & line numbers will always remain the same for all the updates.
          'Move the credit sales record to the new batch
          mvEnv.Connection.UpdateRecords("credit_sales", vUpdateFields, vWhereFields)
          'Move any despatch notes to the new batch (this will be created if there was any stock)
          mvEnv.Connection.UpdateRecords("despatch_notes", vUpdateFields, vWhereFields, False)
          'Move any issued stock records to the new batch (this will be created if there was any stock)
          mvEnv.Connection.UpdateRecords("issued_stock", vUpdateFields, vWhereFields, False)
          'Move any event bookings, event booking transactions, event accommodation bookings, service bookings, 
          'service booking transactions, legacy bequest receipts, order payment history, collection payments & fundraising payment history.
          mvEnv.Connection.UpdateRecords("event_bookings", vUpdateFields, vWhereFields, False)
          mvEnv.Connection.UpdateRecords("event_booking_transactions", vUpdateFields, vWhereFields, False)
          mvEnv.Connection.UpdateRecords("contact_room_bookings", vUpdateFields, vWhereFields, False)
          mvEnv.Connection.UpdateRecords("service_bookings", vUpdateFields, vWhereFields, False)
          mvEnv.Connection.UpdateRecords("service_booking_transactions", vUpdateFields, vWhereFields, False)
          mvEnv.Connection.UpdateRecords("legacy_bequest_receipts", vUpdateFields, vWhereFields, False)
          mvEnv.Connection.UpdateRecords("order_payment_history", vUpdateFields, vWhereFields, False)
          mvEnv.Connection.UpdateRecords("collection_payments", vUpdateFields, vWhereFields, False)
          mvEnv.Connection.UpdateRecords("fundraising_payment_history", vUpdateFields, vWhereFields, False)
          'Move any exam bookings
          mvEnv.Connection.UpdateRecords("exam_bookings", vUpdateFields, vWhereFields, False)
          mvEnv.Connection.UpdateRecords("exam_booking_units", vUpdateFields, vWhereFields, False)
          mvEnv.Connection.UpdateRecords("exam_booking_transactions", vUpdateFields, vWhereFields, False)

          If vInTrans Then mvEnv.Connection.CommitTransaction()
        End If
      Catch vEX As Exception
        If vInTrans Then mvEnv.Connection.RollbackTransaction()
        PrintLog(String.Format(Resources.ProjectText.String33039, vEX.Message))
        pErrorCount = 1
      End Try
      Return vCSBatch
    End Function
    ''' <summary>
    ''' Creates a batch with all associated transactions- batch_transactions, batch_transaction_analysis, order_payment_history, etc. for a Payment Plan payment.
    ''' If a BatchTransaction is supplied this will be used to add any analysis lines to.
    ''' </summary>
    ''' <param name="pBatchType"></param>
    ''' <param name="pPP"></param>
    ''' <param name="pAmount"></param>
    ''' <param name="pBT"></param>
    ''' <param name="pNewBatch"></param>
    ''' <param name="pSaveBatchTransaction"></param>
    ''' <remarks>Currently only credit sales batch types supported</remarks>
    Public Sub CreateBatchForTransaction(ByVal pBatchType As BatchTypes, ByVal pPP As PaymentPlan, ByVal pAmount As Double, ByRef pBT As BatchTransaction, ByVal pNewBatch As Boolean, ByVal pSaveBatchTransaction As Boolean)
      Dim vInTrans As Boolean
      Try
        If pAmount > 0 Then
          If pBatchType = BatchTypes.CreditSales Then
            'Currently only credit sales implemented
            Dim vPP As PaymentPlan = pPP
            'Start transaction
            If mvEnv.Connection.InTransaction = False Then
              mvEnv.Connection.StartTransaction()
              vInTrans = True
            End If

            If pNewBatch Then
              'init new batch
              InitNewBatch(mvEnv)
              BatchType = Batch.BatchTypes.CreditSales
              BankAccount = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSBankAccount)
              ReadyForBanking = True
              PostedToCashBook = True
              SetPayingInSlipPrinted(0)
              TransactionType = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSTransType)
              PaymentMethod = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCSPayMethod)
              Provisional = False
            End If
            Dim vBT As BatchTransaction = pBT
            If vBT Is Nothing Then
              'Create a new transaction 
              Dim vSQLStatement As New SQLStatement(mvEnv.Connection, "transaction_sign", "transaction_types", New CDBField("transaction_type", TransactionType))
              Dim vTransactionSign As String = vSQLStatement.GetValue()
              vBT = New BatchTransaction(mvEnv)
              With vBT
                'Init
                .InitFromBatch(mvEnv, Me, 0, vTransactionSign)
                'Set field values
                .ContactNumber = vPP.ContactNumber
                .AddressNumber = vPP.AddressNumber
                .TransactionDate = TodaysDate()
                .TransactionType = TransactionType
                .PaymentMethod = PaymentMethod
                .Receipt = "N"
                .EligibleForGiftAid = mvEnv.GetConfigOption("fp_default_gift_aid_elig", True)
              End With
            End If

            Dim vAmountOutstanding As Double = pAmount
            While vAmountOutstanding > 0
              'Find OPS record to pay
              Dim vFound As Boolean = False
              Dim vOPS As New OrderPaymentSchedule
              For Each vOPS In vPP.ScheduledPayments
                If vOPS.AmountOutstanding > 0 Then vFound = True
                If vFound Then Exit For
              Next
              'If no outstanding scheduled payments then error
              If Not vFound Then RaiseError(DataAccessErrors.daeNoOPSForPP)
              'Set amount being paid and decrease amount outstanding
              Dim vAmount As Double = vOPS.AmountOutstanding
              If vAmount > vAmountOutstanding Then vAmount = vAmountOutstanding
              vAmountOutstanding = FixTwoPlaces(vAmountOutstanding - vAmount)
              'Create new analysis line for OPS amount
              Dim vBTA As New BatchTransactionAnalysis(mvEnv)
              With vBTA
                .InitFromTransaction(vBT)
                .LineType = "O"
                .Source = vPP.Source
                .PaymentPlanNumber = vPP.OrderNumber
                .Amount = vAmount
              End With
              vBTA.Save()
              'Update PP for payment
              vPP.PaymentNumber = vPP.PaymentNumber + 1
              vPP.SaveChanges()
              'Write order payment history
              Dim vOPH As New OrderPaymentHistory
              vOPH.Init(mvEnv)
              vOPH.SetValues(vBT.BatchNumber, vBT.TransactionNumber, vPP.PaymentNumber, vPP.PlanNumber, vAmount, vBTA.LineNumber, 0, vOPS.ScheduledPaymentNumber)
              vOPH.Save()
              'Set OPS unprocessed payment
              vOPS.SetUnProcessedPayment(True, vAmount)
              vOPS.Save()
              'Write invoice details- invoice will be written later
              If mvConn Is Nothing Then mvConn = mvEnv.Connection
              WriteInvoiceDetails(vBTA)
            End While

            Dim vCreditCustomer As New CreditCustomer
            vCreditCustomer.Init(mvEnv, vBT.ContactNumber)
            'Setup Company Control for Invoice
            Dim vCompanyControl As New CompanyControl
            vCompanyControl.InitFromBankAccount(mvEnv, BankAccount)
            'Make sure the analysis is read if it has not been read already
            If vBT.Analysis.Count = 0 Then vBT.InitBatchTransactionAnalysis(BatchNumber, vBT.TransactionNumber)
            'Write invoice
            Dim vInvoice As Invoice = WriteInvoice(BatchNumber, vBT, vBT.ContactNumber, vBT.AddressNumber, vCompanyControl.Company, vCreditCustomer.SalesLedgerAccount)
            If vInvoice Is Nothing Then
              'Where an invoice has not been created the credit customer record will not have been updated so manually update outstanding
              With vCreditCustomer
                .Update(.CreditCategory, .CreditLimit, .CustomerType, .StopCode, .TermsNumber, .TermsPeriod, .TermsFrom, FixTwoPlaces(.Outstanding + pAmount).ToString)
                .Save()
              End With
            End If
            If pBT Is Nothing Then
              'Batch transaction created. Create the credit sale record for the new batch transaction.
              Dim vCreditSale As New CreditSale(mvEnv)
              vCreditSale.Init(vBT.BatchNumber, vBT.TransactionNumber)
              If vCreditSale.Existing = False Then vCreditSale.Create(mvEnv, vBT.BatchNumber, vBT.TransactionNumber)
              Dim vSalesLedgerAccount As String
              Dim vWhereFields As New CDBFields
              vWhereFields.Add("cc.contact_number", vBT.ContactNumber)
              vWhereFields.Add("ba.bank_account", BankAccount)
              Dim vAnsiJoins As New AnsiJoins
              vAnsiJoins.Add("bank_accounts ba", "ba.company", "cc.company")
              Dim vCCSQL As New SQLStatement(mvEnv.Connection, "sales_ledger_account", "credit_customers cc", vWhereFields, "", vAnsiJoins)
              vSalesLedgerAccount = vCCSQL.GetValue
              If vSalesLedgerAccount.Length = 0 Then RaiseError(DataAccessErrors.daeCreditCustomerMissing, vBT.ContactNumber.ToString)
              vCreditSale.Update(vBT.ContactNumber, vBT.AddressNumber, "", vSalesLedgerAccount, False)
              vCreditSale.Save()
              'Set pBT to point to new BatchTransaction
              pBT = vBT
            End If
            If pSaveBatchTransaction Then
              'Save Batch Transaction
              vBT.SaveChanges()
              'Set batch totals and detail complete and save batch
              SetBatchTotals()
              SetDetailComplete(Nothing, False)
              Save()
            End If
            If vInTrans Then mvEnv.Connection.CommitTransaction()
          End If
        End If

      Catch vEx As Exception
        If vInTrans Then mvEnv.Connection.RollbackTransaction()
        Throw vEx
      End Try
    End Sub

#End Region
  End Class
End Namespace
