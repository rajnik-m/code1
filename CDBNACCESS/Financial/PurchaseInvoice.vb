Namespace Access

  Public Class PurchaseInvoice
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum PurchaseInvoiceFields
      AllFields = 0
      PurchaseInvoiceNumber
      PurchaseOrderNumber
      ContactNumber
      AddressNumber
      Amount
      PayeeContactNumber
      PayeeAddressNumber
      PayeeReference
      PurchaseInvoiceDate
      ChequeReferenceNumber
      Source
      Campaign
      Appeal
      Segment
      BankDetailsNumber
      BacsProcessed
      SeparatePayment
      CurrencyCode
      AdjustmentStatus
      CancellationReason
      CancellationSource
      CancelledBy
      CancelledOn
      PopPaymentMethod
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("purchase_invoice_number", CDBField.FieldTypes.cftLong)
        .Add("purchase_order_number", CDBField.FieldTypes.cftLong)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("amount", CDBField.FieldTypes.cftNumeric)
        .Add("payee_contact_number", CDBField.FieldTypes.cftLong)
        .Add("payee_address_number", CDBField.FieldTypes.cftLong)
        .Add("payee_reference")
        .Add("purchase_invoice_date", CDBField.FieldTypes.cftDate)
        .Add("cheque_reference_number", CDBField.FieldTypes.cftLong)
        .Add("source")
        .Add("campaign")
        .Add("appeal")
        .Add("segment")
        .Add("bank_details_number", CDBField.FieldTypes.cftLong)
        .Add("bacs_processed")
        .Add("separate_payment")
        .Add("currency_code")
        .Add("adjustment_status")
        .Add("cancellation_reason")
        .Add("cancellation_source")
        .Add("cancelled_by")
        .Add("cancelled_on", CDBField.FieldTypes.cftDate)
        .Add("pop_payment_method")
        .Item(PurchaseInvoiceFields.PurchaseInvoiceNumber).PrimaryKey = True
        .Item(PurchaseInvoiceFields.PurchaseInvoiceNumber).PrefixRequired = True
        .Item(PurchaseInvoiceFields.PopPaymentMethod).PrefixRequired = True

        .SetControlNumberField(PurchaseInvoiceFields.PurchaseInvoiceNumber, "PV")

        .Item(PurchaseInvoiceFields.BankDetailsNumber).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPOPPayByBACS)
        .Item(PurchaseInvoiceFields.SeparatePayment).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPurchaseOrderAuthorisation)
        .Item(PurchaseInvoiceFields.CurrencyCode).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPurchaseOrderCurrencyCode)
        .Item(PurchaseInvoiceFields.PopPaymentMethod).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPopPaymentMethod)
        .Item(PurchaseInvoiceFields.AdjustmentStatus).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPOPaymentReversals)
        .Item(PurchaseInvoiceFields.CancellationReason).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPOPaymentReversals)
        .Item(PurchaseInvoiceFields.CancellationSource).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPOPaymentReversals)
        .Item(PurchaseInvoiceFields.CancelledBy).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPOPaymentReversals)
        .Item(PurchaseInvoiceFields.CancelledOn).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPOPaymentReversals)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "pi"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "purchase_invoices"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property PurchaseInvoiceNumber() As Integer
      Get
        Return mvClassFields(PurchaseInvoiceFields.PurchaseInvoiceNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PurchaseOrderNumber() As Integer
      Get
        Return mvClassFields(PurchaseInvoiceFields.PurchaseOrderNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(PurchaseInvoiceFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AddressNumber() As Integer
      Get
        Return mvClassFields(PurchaseInvoiceFields.AddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Amount() As Double
      Get
        Return mvClassFields(PurchaseInvoiceFields.Amount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property PayeeContactNumber() As Integer
      Get
        Return mvClassFields(PurchaseInvoiceFields.PayeeContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PayeeAddressNumber() As Integer
      Get
        Return mvClassFields(PurchaseInvoiceFields.PayeeAddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PayeeReference() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.PayeeReference).Value
      End Get
    End Property
    Public ReadOnly Property PurchaseInvoiceDate() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.PurchaseInvoiceDate).Value
      End Get
    End Property
    Public ReadOnly Property ChequeReferenceNumber() As Integer
      Get
        Return mvClassFields(PurchaseInvoiceFields.ChequeReferenceNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property Source() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.Source).Value
      End Get
    End Property
    Public ReadOnly Property Campaign() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.Campaign).Value
      End Get
    End Property
    Public ReadOnly Property Appeal() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.Appeal).Value
      End Get
    End Property
    Public ReadOnly Property Segment() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.Segment).Value
      End Get
    End Property
    Public ReadOnly Property BankDetailsNumber() As Integer
      Get
        Return mvClassFields(PurchaseInvoiceFields.BankDetailsNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property BacsProcessed() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.BacsProcessed).Value
      End Get
    End Property
    Public ReadOnly Property SeparatePayment() As Boolean
      Get
        Return mvClassFields(PurchaseInvoiceFields.SeparatePayment).Bool
      End Get
    End Property
    Public ReadOnly Property CurrencyCode() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.CurrencyCode).Value
      End Get
    End Property
    Public ReadOnly Property AdjustmentStatus() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.AdjustmentStatus).Value
      End Get
    End Property
    Public ReadOnly Property CancellationReason() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.CancellationReason).Value
      End Get
    End Property
    Public ReadOnly Property CancellationSource() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.CancellationSource).Value
      End Get
    End Property
    Public ReadOnly Property CancelledBy() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.CancelledBy).Value
      End Get
    End Property
    Public ReadOnly Property CancelledOn() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.CancelledOn).Value
      End Get
    End Property
    Public Property PopPaymentMethod() As String
      Get
        Return mvClassFields(PurchaseInvoiceFields.PopPaymentMethod).Value
      End Get
      Set(value As String)
        mvClassFields(PurchaseInvoiceFields.PopPaymentMethod).Value = value
      End Set
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Private mvDetails As CollectionList(Of PurchaseInvoiceDetail)

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvDetails = Nothing
    End Sub

    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      mvClassFields(PurchaseInvoiceFields.SeparatePayment).Bool = False
    End Sub

    Protected Overrides Sub SetValid()
      MyBase.SetValid()
      If CurrencyCode.Length = 0 AndAlso mvClassFields(PurchaseInvoiceFields.CurrencyCode).InDatabase Then
        If PurchaseOrderNumber > 0 Then
          Dim vPO As New PurchaseOrder(mvEnv)
          vPO.Init(PurchaseOrderNumber)
          mvClassFields(PurchaseInvoiceFields.CurrencyCode).Value = vPO.CurrencyCode
        Else
          mvClassFields(PurchaseInvoiceFields.CurrencyCode).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCurrencyCode)
        End If
      End If
    End Sub

    Public ReadOnly Property Details() As CollectionList(Of PurchaseInvoiceDetail)
      Get
        If mvDetails Is Nothing Then mvDetails = New CollectionList(Of PurchaseInvoiceDetail)
        Return mvDetails
      End Get
    End Property

    Public Sub AddDetail(ByVal pPID As PurchaseInvoiceDetail)
      Dim vParams As CDBParameters

      If mvDetails Is Nothing Then mvDetails = New CollectionList(Of PurchaseInvoiceDetail)
      SetValid()
      vParams = pPID.GetDataAsParameters
      If vParams("PurchaseInvoiceNumber").IntegerValue = 0 Then vParams("PurchaseInvoiceNumber").Value = PurchaseInvoiceNumber.ToString
      pPID.Create(mvEnv, vParams)
      mvDetails.Add(pPID.LineNumber.ToString, pPID)
    End Sub

    Public Sub AddDetailLine(ByVal pLineItem As String, ByVal pLinePrice As Double, ByVal pQuantity As Integer, ByVal pAmount As Double, ByVal pAccount As String, ByVal pDistributionCode As String)
      Dim vPID As New PurchaseInvoiceDetail

      If mvDetails Is Nothing Then mvDetails = New CollectionList(Of PurchaseInvoiceDetail)
      SetValid()
      vPID.InitFromPI(mvEnv, Me, pLineItem, pLinePrice, pQuantity, pAmount, pAccount, pDistributionCode)
      mvDetails.Add(vPID.LineNumber.ToString, vPID)
    End Sub

    Public Sub InitDetails()
      Dim vPID As New PurchaseInvoiceDetail
      Dim vRecordSet As CDBRecordSet

      vPID.Init(mvEnv)
      vRecordSet = mvEnv.Connection.GetRecordSet("SELECT " & vPID.GetRecordSetFields(PurchaseInvoiceDetail.PurchaseInvoiceDetailRecordSetTypes.pidrtAll) & " FROM purchase_invoice_details pid WHERE purchase_invoice_number = " & PurchaseInvoiceNumber & " ORDER BY line_number")
      While vRecordSet.Fetch() = True
        vPID = New PurchaseInvoiceDetail
        vPID.InitFromRecordSet(mvEnv, vRecordSet, PurchaseInvoiceDetail.PurchaseInvoiceDetailRecordSetTypes.pidrtAll)
        Details.Add(vPID.LineNumber.ToString, vPID)
      End While
      vRecordSet.CloseRecordSet()
    End Sub

    Public Sub InitFromPO(ByVal pPO As PurchaseOrder, ByVal pPOP As PurchaseOrderPayment, ByVal pAmount As Double)
      Dim vPOD As PurchaseOrderDetail
      Dim vAmount As Double
      Dim vRemaining As Double
      Dim vCount As Integer

      Init()
      SetValid()
      mvClassFields(PurchaseInvoiceFields.PurchaseOrderNumber).IntegerValue = pPO.PurchaseOrderNumber
      mvClassFields(PurchaseInvoiceFields.ContactNumber).IntegerValue = pPO.ContactNumber
      mvClassFields(PurchaseInvoiceFields.AddressNumber).IntegerValue = pPO.AddressNumber
      mvClassFields(PurchaseInvoiceFields.PayeeContactNumber).IntegerValue = pPO.PayeeContactNumber
      mvClassFields(PurchaseInvoiceFields.PayeeAddressNumber).IntegerValue = pPO.PayeeAddressNumber
      mvClassFields(PurchaseInvoiceFields.PurchaseInvoiceDate).Value = TodaysDate()
      mvClassFields(PurchaseInvoiceFields.Source).Value = pPO.Source
      mvClassFields(PurchaseInvoiceFields.Amount).Value = CStr(pAmount)
      mvClassFields(PurchaseInvoiceFields.PayeeReference).Value = pPOP.PayeeReference
      mvClassFields(PurchaseInvoiceFields.SeparatePayment).Bool = pPOP.SeparatePayment
      mvClassFields(PurchaseInvoiceFields.CurrencyCode).Value = pPO.CurrencyCode
      vRemaining = pAmount
      For Each vPOD In pPO.Details
        vAmount = 0
        If pPO.DistributionMethod = PurchaseOrder.PODistributionMethods.podmSequential Then
          'Sequential assignment of payment
          If vPOD.Balance > 0 And vRemaining > 0 Then
            If vRemaining > vPOD.Balance Then
              vAmount = vPOD.Balance
            Else
              vAmount = vRemaining
            End If
            vRemaining = vRemaining - vAmount
          End If
        Else
          'Proportional assignment of payment
          If vPOD.Balance > 0 Then
            vAmount = FixTwoPlaces(pAmount * (vPOD.Amount / pPO.Amount))
            vCount = vCount + 1
            If vCount = pPO.Details.Count() Then
              vAmount = vRemaining
            Else
              vRemaining = vRemaining - vAmount
            End If
            If vAmount > vPOD.Balance Then vAmount = vPOD.Balance
          End If
        End If
        If vAmount > 0 Then
          vPOD.Balance = vPOD.Balance - vAmount
          pPO.Balance = pPO.Balance - vAmount
          Dim vNominalAccount As String = vPOD.NominalAccount
          Dim vDistributionCode As String = vPOD.DistributionCode
          If pPOP.NominalAccount.Length > 0 Then vNominalAccount = pPOP.NominalAccount
          If pPOP.DistributionCode.Length > 0 Then vDistributionCode = pPOP.DistributionCode
          AddDetailLine(vPOD.LineItem, vPOD.LinePrice, vPOD.Quantity, vAmount, vNominalAccount, vDistributionCode)
        End If
      Next vPOD
    End Sub

    Public Sub CreateFromTrader(ByVal pParams As CDBParameters)
      'NOTE: Dont use init as this class has already been initialised
      mvClassFields(PurchaseInvoiceFields.ContactNumber).IntegerValue = pParams("PID_ContactNumber").IntegerValue
      mvClassFields(PurchaseInvoiceFields.AddressNumber).IntegerValue = pParams("PID_AddressNumber").IntegerValue
      mvClassFields(PurchaseInvoiceFields.Amount).DoubleValue = pParams("PID_Amount").DoubleValue
      mvClassFields(PurchaseInvoiceFields.PurchaseOrderNumber).DoubleValue = pParams("PID_PurchaseOrderNumber").DoubleValue
      mvClassFields(PurchaseInvoiceFields.PayeeContactNumber).IntegerValue = pParams("PID_PayeeContactNumber").IntegerValue
      mvClassFields(PurchaseInvoiceFields.PayeeAddressNumber).IntegerValue = pParams("PID_PayeeAddressNumber").IntegerValue
      mvClassFields(PurchaseInvoiceFields.PayeeReference).Value = pParams.ParameterExists("PID_PayeeReference").Value
      mvClassFields(PurchaseInvoiceFields.PurchaseInvoiceDate).Value = pParams("PID_PurchaseInvoiceDate").Value
      mvClassFields(PurchaseInvoiceFields.Campaign).Value = pParams.ParameterExists("PID_Campaign").Value
      mvClassFields(PurchaseInvoiceFields.Appeal).Value = pParams.ParameterExists("PID_Appeal").Value
      mvClassFields(PurchaseInvoiceFields.Segment).Value = pParams.ParameterExists("PID_Segment").Value
      mvClassFields(PurchaseInvoiceFields.CurrencyCode).Value = pParams.ParameterExists("PID_CurrencyCode").Value
      mvClassFields(PurchaseInvoiceFields.PopPaymentMethod).Value = "CHQ"
    End Sub

    Public Sub SetBankDetailsNumber(ByVal pNewValue As Integer)
      If pNewValue > 0 Then
        mvClassFields.Item(PurchaseInvoiceFields.BankDetailsNumber).IntegerValue = pNewValue
      Else
        mvClassFields.Item(PurchaseInvoiceFields.BankDetailsNumber).Value = ""
      End If
    End Sub

    Public Sub SetPayeeDetails(ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer)
      mvClassFields.Item(PurchaseInvoiceFields.PayeeContactNumber).IntegerValue = pContactNumber
      mvClassFields.Item(PurchaseInvoiceFields.PayeeAddressNumber).IntegerValue = pAddressNumber
    End Sub

    ''' <summary>Clone the PurchaseInvoice and all of it's PurchaseInvoiceDetail lines.</summary>
    ''' <param name="pRecord">The existing PurchaseInvoice to be cloned.</param>
    ''' <param name="pParams">CDBParamaters collection for any data that may need to be set differently each time.</param>
    Public Sub CloneWithDetails(ByVal pRecord As CARERecord, ByVal pParams As CDBParameters)
      'Copy all values from original PurchaseOrderPayment 
      MyBase.Clone(pRecord, pParams)

      'Now set the fields that need to be different
      With mvClassFields
        '.Item(PurchaseInvoiceFields.Amount).DoubleValue = (.Item(PurchaseInvoiceFields.Amount).DoubleValue * -1)
        .Item(PurchaseInvoiceFields.AdjustmentStatus).Value = String.Empty
        .Item(PurchaseInvoiceFields.CancellationReason).Value = String.Empty
        .Item(PurchaseInvoiceFields.CancellationSource).Value = String.Empty
        .Item(PurchaseInvoiceFields.CancelledBy).Value = String.Empty
        .Item(PurchaseInvoiceFields.CancelledOn).Value = String.Empty
      End With

      mvClassFields.SetControlNumber(mvEnv)

      If CType(pRecord, PurchaseInvoice).Details.Count = 0 Then CType(pRecord, PurchaseInvoice).InitDetails()

      Dim vNewPID As PurchaseInvoiceDetail = Nothing
      mvDetails = New CollectionList(Of PurchaseInvoiceDetail)

      For Each vPID As PurchaseInvoiceDetail In CType(pRecord, PurchaseInvoice).Details
        vNewPID = New PurchaseInvoiceDetail()
        vNewPID.Init(mvEnv)
        vNewPID.Clone(vPID, PurchaseInvoiceNumber)
        If Amount < 0 AndAlso pParams.ContainsKey("Amount") Then
          'Update lines to be negative as well
          pParams("Amount").Value = FixTwoPlaces(vPID.Amount * -1).ToString("F")
          pParams("LinePrice").Value = FixTwoPlaces(vPID.LinePrice * -1).ToString("F")
          pParams("Quantity").Value = (-vPID.Quantity).ToString
          vNewPID.Update(pParams)
        End If
        mvDetails.Add(vNewPID.LineNumber.ToString, vNewPID)
      Next

    End Sub
    Public Sub SaveWithDetails(ByRef pDeleteFirst As Boolean, Optional ByVal pAmendedBy As String = "", Optional ByVal pAudit As Boolean = False)
      Dim vPID As PurchaseInvoiceDetail
      Dim vWhereFields As New CDBFields
      Dim vPO As New PurchaseOrder(mvEnv)
      Dim vPOContact As New Contact(mvEnv)
      Dim vPIContact As New Contact(mvEnv)
      Dim vCheckActivities As Boolean
      Dim vCatTable As String
      Dim vCatAttr As String
      Dim vRecordSet As CDBRecordSet

      If pDeleteFirst Then
        vWhereFields.Add((mvClassFields(PurchaseInvoiceFields.PurchaseInvoiceNumber).Name), PurchaseInvoiceNumber)
        mvEnv.Connection.DeleteRecords("purchase_invoice_details", vWhereFields)
      End If
      If PurchaseOrderNumber > 0 Then 'There is an existing purchase order for this invoice
        vPO.Init(PurchaseOrderNumber)
        If vPO.ContactNumber <> ContactNumber Then 'And it's contact number is different
          vPOContact.Init((vPO.ContactNumber))
          vPIContact.Init(ContactNumber)
          vCheckActivities = True 'So check for creating activities against the invoice contact
          If pDeleteFirst Then
            If vPIContact.ContactType = Contact.ContactTypes.ctcOrganisation Then
              vCatTable = "organisation_categories"
              vCatAttr = "organisation_number"
            Else
              vCatTable = "contact_categories"
              vCatAttr = "contact_number"
            End If
            vWhereFields.Clear()
            vWhereFields.Add(vCatAttr, CDBField.FieldTypes.cftLong, vPIContact.ContactNumber)
            vWhereFields.Add("activity_value", CDBField.FieldTypes.cftCharacter, "SELECT poa.activity_value FROM purchase_order_details pod, purchase_order_activities poa WHERE pod.purchase_order_number = " & PurchaseOrderNumber & " AND poa.activity_value = pod.line_item", CDBField.FieldWhereOperators.fwoIn)
            mvEnv.Connection.DeleteRecords(vCatTable, vWhereFields, False)
          End If
        End If
      End If
      For Each vPID In Details
        vPID.Save(pAmendedBy, pAudit)
        If vCheckActivities Then
          If vPOContact.ContactType = Contact.ContactTypes.ctcOrganisation Then
            vCatTable = "organisation_categories"
            vCatAttr = "organisation_number"
          Else
            vCatTable = "contact_categories"
            vCatAttr = "contact_number"
          End If
          vRecordSet = mvEnv.Connection.GetRecordSet("SELECT cats.activity, cats.activity_value, cats.source FROM purchase_order_details pod, purchase_order_activities poa, " & vCatTable & " cats WHERE pod.purchase_order_number = " & PurchaseOrderNumber & " AND pod.line_item = '" & vPID.LineItem & "' AND poa.activity_value = pod.line_item AND cats.activity = poa.activity AND cats.activity_value = poa.activity_value AND cats." & vCatAttr & " = " & vPOContact.ContactNumber)
          If vRecordSet.Fetch() = True Then
            Dim vCC As New ContactCategory(mvEnv)
            vCC.ContactTypeSaveActivity(vPIContact.ContactType, vPIContact.ContactNumber, vRecordSet.Fields(1).Value, vRecordSet.Fields(2).Value, vRecordSet.Fields(3).Value, TodaysDate, TodaysDate, "", ContactCategory.ActivityEntryStyles.aesNormal)
          End If
          vRecordSet.CloseRecordSet()
        End If
      Next vPID
      MyBase.Save(pAmendedBy, pAudit)
    End Sub

    ''' <summary>Cancel the Purchase Invoice and all of it's Details.</summary>
    ''' <param name="pCancelReason">Reason for the cancellation.</param>
    ''' <param name="pCancelBy">User performing the cancellation.</param>
    ''' <param name="pCancelOn">Date cancellation takes place.</param>
    ''' <param name="pCancelSource">The source of the cancellation.</param>
    ''' <param name="pAdjustmentStatus">The adjustment status that should be applied.</param>
    Friend Sub CancelWithDetails(ByVal pCancelReason As String, ByVal pCancelBy As String, ByVal pCancelOn As String, ByVal pCancelSource As String, ByVal pAdjustmentStatus As String)
      With mvClassFields
        .Item(PurchaseInvoiceFields.CancellationReason).Value = pCancelReason
        .Item(PurchaseInvoiceFields.CancelledOn).Value = pCancelOn
        .Item(PurchaseInvoiceFields.CancelledBy).Value = pCancelBy
        .Item(PurchaseInvoiceFields.CancellationSource).Value = pCancelSource
        .Item(PurchaseInvoiceFields.AdjustmentStatus).Value = pAdjustmentStatus
      End With

      If Details.Count = 0 Then InitDetails()
      For Each vPID As PurchaseInvoiceDetail In Details
        vPID.Cancel(pCancelReason, pCancelBy, pCancelOn, pCancelSource, pAdjustmentStatus)
      Next
    End Sub

#End Region
  End Class
End Namespace
