Namespace Access

  Partial Public Class ProductRate
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum RateFields
      AllFields = 0
      Product
      Rate
      CurrentPrice
      FuturePrice
      PriceChangeDate
      HistoryOnly
      NominalAccountSuffix
      SubsequentNominalSuffix
      RateDesc
      Concessionary
      VatExclusive
      CurrencyCode
      CurrentPriceLowerLimit
      CurrentPriceUpperLimit
      FuturePriceLowerLimit
      FuturePriceUpperLimit
      FixedPrice
      UpperLowerPriceMandatory
      UseModifiers
      PriceIsPercentage
      WebPublish
      LoanInterest
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("product")
        .Add("rate")
        .Add("current_price", CDBField.FieldTypes.cftNumeric)
        .Add("future_price", CDBField.FieldTypes.cftNumeric)
        .Add("price_change_date", CDBField.FieldTypes.cftDate)
        .Add("history_only")
        .Add("nominal_account_suffix")
        .Add("subsequent_nominal_suffix")
        .Add("rate_desc")
        .Add("concessionary")
        .Add("vat_exclusive")
        .Add("currency_code")
        .Add("current_price_lower_limit", CDBField.FieldTypes.cftNumeric)
        .Add("current_price_upper_limit", CDBField.FieldTypes.cftNumeric)
        .Add("future_price_lower_limit", CDBField.FieldTypes.cftNumeric)
        .Add("future_price_upper_limit", CDBField.FieldTypes.cftNumeric)
        .Add("fixed_price")
        .Add("upper_lower_price_mandatory")
        .Add("use_modifiers")
        .Add("price_is_percentage")
        .Add("web_publish")
        .Add("loan_interest").InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLoans)

        .Item(RateFields.Product).PrimaryKey = True
        .Item(RateFields.Rate).PrimaryKey = True

        .Item(RateFields.Product).PrefixRequired = True
        .Item(RateFields.Rate).PrefixRequired = True
        .Item(RateFields.WebPublish).PrefixRequired = True

        .Item(RateFields.CurrencyCode).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataCurrencyCode)
        .Item(RateFields.FixedPrice).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataEventFixedPrice)
        .Item(RateFields.UpperLowerPriceMandatory).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataMinPriceMandatory)
        .Item(RateFields.UseModifiers).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbRateModifier)
        .Item(RateFields.PriceIsPercentage).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPriceIsPercentage)
        .Item(RateFields.WebPublish).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbProductWebPublish)
      End With
    End Sub
    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      mvClassFields.Item(RateFields.WebPublish).Value = "N"
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "r"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "rates"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ProductCode() As String
      Get
        Return mvClassFields(RateFields.Product).Value
      End Get
    End Property
    Public ReadOnly Property RateCode() As String
      Get
        Return mvClassFields(RateFields.Rate).Value
      End Get
    End Property
    Public ReadOnly Property HistoryOnly() As Boolean
      Get
        Return mvClassFields(RateFields.HistoryOnly).Bool
      End Get
    End Property
    Public ReadOnly Property NominalAccountSuffix() As String
      Get
        Return mvClassFields(RateFields.NominalAccountSuffix).Value
      End Get
    End Property
    Public ReadOnly Property SubsequentNominalSuffix() As String
      Get
        Return mvClassFields(RateFields.SubsequentNominalSuffix).Value
      End Get
    End Property
    Public ReadOnly Property RateDesc() As String
      Get
        Return mvClassFields(RateFields.RateDesc).Value
      End Get
    End Property
    Public ReadOnly Property Concessionary() As Boolean
      Get
        Return mvClassFields(RateFields.Concessionary).Bool
      End Get
    End Property
    Public ReadOnly Property VatExclusive() As Boolean
      Get
        Return mvClassFields(RateFields.VatExclusive).Bool
      End Get
    End Property
    Public ReadOnly Property CurrencyCode() As String
      Get
        Return mvClassFields(RateFields.CurrencyCode).Value
      End Get
    End Property
    Public ReadOnly Property CurrentPriceLowerLimit() As Double
      Get
        Return mvClassFields(RateFields.CurrentPriceLowerLimit).DoubleValue
      End Get
    End Property
    Public ReadOnly Property CurrentPriceUpperLimit() As Double
      Get
        Return mvClassFields(RateFields.CurrentPriceUpperLimit).DoubleValue
      End Get
    End Property
    Public ReadOnly Property FuturePriceLowerLimit() As Double
      Get
        Return mvClassFields(RateFields.FuturePriceLowerLimit).DoubleValue
      End Get
    End Property
    Public ReadOnly Property FuturePriceUpperLimit() As Double
      Get
        Return mvClassFields(RateFields.FuturePriceUpperLimit).DoubleValue
      End Get
    End Property
    Public ReadOnly Property FixedPrice() As Boolean
      Get
        Return mvClassFields(RateFields.FixedPrice).Bool
      End Get
    End Property
    Public ReadOnly Property UpperLowerPriceMandatory() As String
      Get
        Return mvClassFields(RateFields.UpperLowerPriceMandatory).Value
      End Get
    End Property
    Public ReadOnly Property WebPublish() As Boolean
      Get
        Return mvClassFields(RateFields.WebPublish).Bool
      End Get
    End Property
    Public ReadOnly Property LoanInterest() As Boolean
      Get
        Return mvClassFields(RateFields.LoanInterest).Bool
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(RateFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(RateFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property UseModifiers() As String
      Get
        Return mvClassFields(RateFields.UseModifiers).Value
      End Get
    End Property
    Public ReadOnly Property CurrentPrice() As String
      Get
        Return mvClassFields(RateFields.CurrentPrice).Value
      End Get
    End Property
    Public ReadOnly Property FuturePrice() As String
      Get
        Return mvClassFields(RateFields.FuturePrice).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"
    Private mvFinalPrice As Double
    Private mvFinalRenewalPrice As Double
    Private mvPrevContactNo As Integer
    Private mvPrevTransDate As Date
    Private mvPrevRenewalCFDateType As RenewalCurrentFutureDateTypes = RenewalCurrentFutureDateTypes.rcfdtNone
    Private mvNoVatExclusiveVatRequired As Boolean
    Private mvPaymentPlanDetailPricing As PaymentPlanDetailPricing = Nothing
    Private mvActivitySQL As SQLStatement = Nothing

    Public Enum RenewalCurrentFutureDateTypes
      rcfdtNone = 0
      rcfdtCurrent = 1
      rcfdtFuture = 2
    End Enum

    Public ReadOnly Property PriceWillChange(ByVal pTransactionDate As Date) As Boolean
      Get
        If CDate(mvClassFields(RateFields.PriceChangeDate).Value) > Date.Today.Date Then
          If mvClassFields(RateFields.CurrentPrice).DoubleValue <> mvClassFields(RateFields.FuturePrice).DoubleValue Then
            If pTransactionDate >= CDate(mvClassFields(RateFields.PriceChangeDate).Value) Then
              Return True
            End If
          End If
        End If
      End Get
    End Property

    Public ReadOnly Property PriceIsZero() As Boolean
      Get
        If mvClassFields(RateFields.UseModifiers).Bool Then
          If mvFinalPrice = 0 AndAlso mvFinalRenewalPrice = 0 Then
            Return True
          Else
            Return False
          End If
        Else
          Return mvClassFields(RateFields.CurrentPrice).DoubleValue = 0
        End If
      End Get
    End Property

    Public ReadOnly Property PriceIsPercentage() As String
      Get
        Return mvClassFields(RateFields.PriceIsPercentage).Value
      End Get
    End Property

    ''' <summary>Gets the Renewal Price for this Rate</summary>
    ''' <param name="pFuture">Set to True to always return the Future Price, otherwise Set to False to return the Current Price</param>
    ''' <param name="pModifierContactNumber">Contact Number for any modifiers applicable to this Rate that may affect the Price</param>
    ''' <returns>Calculated Price including VAT</returns>
    ''' <remarks>The calculated Price is returned after adding VAT (if required to be added)</remarks>
    Public ReadOnly Property RenewalPrice(ByVal pFuture As Boolean, ByVal pModifierContactNumber As Integer) As Double
      Get
        Dim vContact As New Contact(mvEnv)
        Dim vVATCategory As String = ""
        If pModifierContactNumber > 0 Then
          vContact.Init(pModifierContactNumber)
          vVATCategory = vContact.VATCategory
        Else
          vVATCategory = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDefConVatCat)
        End If
        Dim vProduct As New Product(mvEnv)
        vProduct.Init(ProductCode)
        Dim vVATRate As VatRate = mvEnv.VATRate(vProduct.ProductVatCategory, vVATCategory)
        Return RenewalPrice(pFuture, pModifierContactNumber, 1, vVATRate, Nothing)
      End Get
    End Property
    ''' <summary>Gets the Renewal Price for this Rate</summary>
    ''' <param name="pFuture">Set to True to always return the Future Price, otherwise Set to False to return the Current Price</param>
    ''' <param name="pModifierContactNumber">Contact Number for any modifiers applicable to this Rate that may affect the Price</param>
    ''' <param name="pRenewalDate">The Payment Plan Renewal Date</param>
    ''' <returns>Calculated Price including VAT</returns>
    ''' <remarks>The calculated Price is returned after adding VAT (if required to be added)</remarks>
    Public ReadOnly Property RenewalPrice(ByVal pFuture As Boolean, ByVal pModifierContactNumber As Integer, ByVal pRenewalDate As String) As Double
      Get
        Dim vContact As New Contact(mvEnv)
        Dim vVATCategory As String = ""
        If pModifierContactNumber > 0 Then
          vContact.Init(pModifierContactNumber)
          vVATCategory = vContact.VATCategory
        Else
          vVATCategory = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDefConVatCat)
        End If
        Dim vProduct As New Product(mvEnv)
        vProduct.Init(ProductCode)
        Dim vVATRate As VatRate = mvEnv.VATRate(vProduct.ProductVatCategory, vVATCategory)
        Dim vRenewalDate As Date
        If pRenewalDate.Length > 0 Then vRenewalDate = CDate(pRenewalDate)
        Return RenewalPrice(pFuture, pModifierContactNumber, 1, vVATRate, vRenewalDate)
      End Get
    End Property
    ''' <summary>Gets the Renewal Price for this Rate</summary>
    ''' <param name="pFuture">Set to True to always return the Future Price otherwise Set to False to return the Current Price</param>
    ''' <param name="pModifierContactNumber">Contact Number for any modifiers applicable to this Rate that may affect the Price</param>
    ''' <param name="pQuantity">The number of units required. Returned Price will have been multiplied by this figure</param>
    ''' <param name="pVATRate">For VAT-exclusive Rates this will be used for calculating the VAT element of the returned Price</param>
    ''' <param name="pRenewalDate">The Payment Plan Renewal Date</param>
    ''' <returns>Calculated Price including VAT</returns>
    ''' <remarks>The calculated Price is returned after multipling by pQuantity and then adding VAT (if required to be added)</remarks>
    Public ReadOnly Property RenewalPrice(ByVal pFuture As Boolean, ByVal pModifierContactNumber As Integer, ByVal pQuantity As Double, ByVal pVATRate As VatRate, ByVal pRenewalDate As Date) As Double
      Get
        Dim vPrice As Double
        If pFuture Then
          If mvClassFields(RateFields.UseModifiers).Bool AndAlso pModifierContactNumber > 0 Then
            vPrice = RenewalPrice(pModifierContactNumber, mvClassFields(RateFields.FuturePrice).DoubleValue, pRenewalDate, RenewalCurrentFutureDateTypes.rcfdtFuture)
          Else
            vPrice = mvClassFields(RateFields.FuturePrice).DoubleValue
          End If
        Else
          If mvClassFields(RateFields.UseModifiers).Bool AndAlso pModifierContactNumber > 0 Then
            vPrice = RenewalPrice(pModifierContactNumber, mvClassFields(RateFields.CurrentPrice).DoubleValue, pRenewalDate, RenewalCurrentFutureDateTypes.rcfdtCurrent)
          Else
            vPrice = mvClassFields(RateFields.CurrentPrice).DoubleValue
          End If
        End If
        Dim vUnitPrice As Double = vPrice
        'Before returning the Price, deduct any discounts, calculate VAT etc.
        If pQuantity = 0 Then pQuantity = 1 'Just in case!!
        vPrice = FixTwoPlaces(vPrice * pQuantity)
        Dim vActualPrice As Double = vPrice
        If VatExclusive = True AndAlso (PriceIsPercentage.Length = 0 OrElse PriceIsPercentage = "N") Then
          'When PriceIsPercentage is 'P' or 'T', the price is actually a percentage and so no VAT is required.
          Dim vVATAmount As Double = pVATRate.CalculateVATAmount(vPrice, True, TodaysDate)
          vPrice = FixTwoPlaces(vPrice + vVATAmount)
        End If
        PaymentPlanDetailPricing.CalculatePricing(vUnitPrice, vActualPrice, VatExclusive, pRenewalDate.ToString(CAREDateFormat), pVATRate, False)
        Return vPrice
      End Get
    End Property

    Public ReadOnly Property PriceChangeDate() As Date
      Get
        Return CDate(mvClassFields(RateFields.PriceChangeDate).Value)
      End Get
    End Property

    ''' <summary>Gets the Price for this Rate</summary>
    ''' <param name="pModifierContactNumber">Contact Number for any modifiers applicable to this Rate that may affect the Price</param>
    ''' <returns>Calculated Price including VAT</returns>
    ''' <remarks>The calculated Price is returned after adding VAT (if required to be added)</remarks>
    Public ReadOnly Property Price(ByVal pModifierContactNumber As Integer) As Double
      Get
        Return Price(Date.Today.Date, pModifierContactNumber)
      End Get
    End Property

    ''' <summary>Gets the Price for this Rate</summary>
    ''' <param name="pTransactionDate">Date the Price is required for</param>
    ''' <param name="pModifierContact">Any modifier Contact applicable to this Rate that may affect the Price</param>
    ''' <returns>Calculated Price including VAT</returns>
    ''' <remarks>The calculated Price is returned after adding VAT (if required to be added)</remarks>
    Public ReadOnly Property Price(ByVal pTransactionDate As Date, ByVal pModifierContact As Contact) As Double
      Get
        Dim vVATCategory As String = ""
        Dim vModifierContactNumber As Integer
        If pModifierContact IsNot Nothing AndAlso pModifierContact.ContactNumber > 0 Then
          vVATCategory = pModifierContact.VATCategory
          vModifierContactNumber = pModifierContact.ContactNumber
        Else
          vVATCategory = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDefConVatCat)
        End If
        Dim vProduct As New Product(mvEnv)
        vProduct.Init(ProductCode)
        Dim vVATRate As VatRate = mvEnv.VATRate(vProduct.ProductVatCategory, vVATCategory)
        Return Price(pTransactionDate, vModifierContactNumber, 1, vVATRate, 0, 0, 0)
      End Get
    End Property

    ''' <summary>Gets the Price for this Rate</summary>
    ''' <param name="pTransactionDate">Date the Price is required for</param>
    ''' <param name="pModifierContactNumber">Contact Number for any modifiers applicable to this Rate that may affect the Price</param>
    ''' <returns>Calculated Price including VAT</returns>
    ''' <remarks>The calculated Price is returned after adding VAT (if required to be added)</remarks>
    Public ReadOnly Property Price(ByVal pTransactionDate As Date, ByVal pModifierContactNumber As Integer) As Double
      Get
        Dim vContact As Contact = Nothing
        If pModifierContactNumber > 0 Then
          vContact = New Contact(mvEnv)
          vContact.Init(pModifierContactNumber)
        End If
        Return Price(pTransactionDate, vContact)
      End Get
    End Property

    ''' <summary>Gets the Price for this Rate</summary>
    ''' <param name="pModifierContactNumber">Contact Number for any modifiers applicable to this Rate that may affect the Price</param>
    ''' <param name="pVATRate">For VAT-exclusive Rates this will be used for calculating the VAT element of the returned Price</param>
    ''' <returns>Calculated Price including VAT</returns>
    ''' <remarks>The calculated Price is returned after adding VAT (if required to be added)</remarks>
    Public ReadOnly Property Price(ByVal pModifierContactNumber As Integer, ByVal pVATRate As VatRate) As Double
      Get
        Return Price(Date.Today.Date, pModifierContactNumber, 1, pVATRate, 0, 0, 0)
      End Get
    End Property

    ''' <summary>Gets the Price for this Rate</summary>
    ''' <param name="pTransactionDate">Date the Price is required for</param>
    ''' <param name="pModifierContactNumber">Contact Number for any modifiers applicable to this Rate that may affect the Price</param>
    ''' <param name="pQuantity">The number of units required. Returned Price will have been multiplied by this figure</param>
    ''' <param name="pVATRate">For VAT-exclusive Rates this will be used for calculating the VAT element of the returned Price</param>
    ''' <returns>Calculated Price including VAT</returns>
    ''' <remarks>The calculated Price is returned after multipling by pQuantity and then adding VAT (if required to be added)</remarks>
    Public ReadOnly Property Price(ByVal pTransactionDate As Date, ByVal pModifierContactNumber As Integer, ByVal pQuantity As Double, ByVal pVATRate As VatRate) As Double
      Get
        Return Price(pTransactionDate, pModifierContactNumber, pQuantity, pVATRate, 0, 0, 0)
      End Get
    End Property
    ''' <summary>Gets the Price for this Rate</summary>
    ''' <param name="pTransactionDate">Date the Price is required for</param>
    ''' <param name="pModifierContactNumber">Contact Number for any modifiers applicable to this Rate that may affect the Price</param>
    ''' <param name="pQuantity">The number of units required. Returned Price will have been multiplied by this figure</param>
    ''' <param name="pVATRate">For VAT-exclusive Rates this will be used for calculating the VAT element of the returned Price</param>
    ''' <param name="pSourceDiscountPercentage">Discount percentage to be applied</param>
    ''' <param name="pTermMonths">For Pro-rated Payment Plans, the number of months in the current Plan term</param>
    ''' <param name="pProRataMonths">For Pro-rated Payment Plans, the number of months worth of Price that is required to be returned</param>
    ''' <returns>Calculated Price including VAT</returns>
    ''' <remarks>The calculated Price is returned after multipling by pQuantity, deducting any pSourceDiscountPercentage, reducing to be for just pProrataMonths and then adding VAT (if required to be added)</remarks>
    Public ReadOnly Property Price(ByVal pTransactionDate As Date, ByVal pModifierContactNumber As Integer, ByVal pQuantity As Double, ByVal pVATRate As VatRate, ByVal pSourceDiscountPercentage As Double, ByVal pTermMonths As Integer, ByVal pProRataMonths As Integer) As Double
      Get
        Dim vPrice As Double
        If IsDate(mvClassFields(RateFields.PriceChangeDate).Value) Then
          If pTransactionDate >= Date.Parse(mvClassFields(RateFields.PriceChangeDate).Value) Then
            If mvClassFields(RateFields.UseModifiers).Bool AndAlso pModifierContactNumber > 0 Then
              vPrice = NewPrice(pModifierContactNumber, mvClassFields(RateFields.FuturePrice).DoubleValue, pTransactionDate)
            Else
              vPrice = mvClassFields(RateFields.FuturePrice).DoubleValue
            End If
          Else
            If mvClassFields(RateFields.UseModifiers).Bool AndAlso pModifierContactNumber > 0 Then
              vPrice = NewPrice(pModifierContactNumber, mvClassFields(RateFields.CurrentPrice).DoubleValue, pTransactionDate)
            Else
              vPrice = mvClassFields(RateFields.CurrentPrice).DoubleValue
            End If
          End If
        Else
          If mvClassFields(RateFields.UseModifiers).Bool AndAlso pModifierContactNumber > 0 Then
            vPrice = NewPrice(pModifierContactNumber, mvClassFields(RateFields.CurrentPrice).DoubleValue, pTransactionDate)
          Else
            vPrice = mvClassFields(RateFields.CurrentPrice).DoubleValue
          End If
        End If

        Dim vUnitPrice As Double = vPrice
        Dim vProRated As Boolean = False
        'Before returning the Price, deduct any discounts, calculate VAT etc.
        If pQuantity = 0 Then pQuantity = 1 'Just in case!!
        vPrice = FixTwoPlaces(vPrice * pQuantity)
        If pSourceDiscountPercentage > 0 Then
          'Source code has given a discount so calculate discount and deduct it
          Dim vDiscount As Double = FixTwoPlaces(vPrice * (pSourceDiscountPercentage / 100))
          vPrice = FixTwoPlaces(vPrice - vDiscount)
        End If
        If pTermMonths <> 0 AndAlso pProRataMonths <> 0 Then
          'Need to return a Price that is correct for the number of months (pProRataMonths) that it applies to
          Dim vMonthlyPrice As Double = vPrice / pTermMonths    'Do not put a FixTwoPlaces around this! This figure must contain all the decimal places to prevent rounding errors
          vPrice = FixTwoPlaces(vMonthlyPrice * pProRataMonths)
          If pTermMonths <> pProRataMonths Then vProRated = True ' only set the pro rated flag if we are actually changing the amount
        End If
        Dim vActualPrice As Double = vPrice
        If VatExclusive = True AndAlso NoVatExclusiveVatRequired = False AndAlso (PriceIsPercentage.Length = 0 OrElse PriceIsPercentage = "N") Then
          'When PriceIsPercentage is 'P' or 'T', the price is actually a percentage and so no VAT is required.
          Dim vVATAmount As Double = pVATRate.CalculateVATAmount(vPrice, True, pTransactionDate.ToString(CAREDateFormat))
          vPrice = FixTwoPlaces(vPrice + vVATAmount)
        End If
        PaymentPlanDetailPricing.CalculatePricing(vUnitPrice, vActualPrice, VatExclusive, pTransactionDate.ToString(CAREDateFormat), pVATRate, vProRated)
        Return vPrice
      End Get
    End Property

    Public Overloads Sub Init(ByVal pProductCode As String, ByVal pRateCode As String)
      CheckClassFields()
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add(mvClassFields(RateFields.Product).Name, pProductCode)
      vWhereFields.Add(mvClassFields(RateFields.Rate).Name, pRateCode)
      InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Shared Function CreateInstance(ByVal pEnv As CDBEnvironment, ByVal pProductCode As String, ByVal pRateCode As String) As ProductRate
      Dim vInstance As New ProductRate(pEnv)
      vInstance.Init(pProductCode, pRateCode)
      Return vInstance
    End Function

    Public Overloads Sub InitForPrice(ByVal pProductCode As String, ByVal pRateCode As String, ByVal pCurrentPrice As Double, ByVal pFuturePrice As Double, ByVal pPriceChangeDate As String, Optional ByVal pUseModifier As String = "", Optional ByVal pPriceIsPercentage As String = "N", Optional ByVal pVATExclusive As Boolean = False)
      CheckClassFields()
      mvClassFields(ProductRate.RateFields.Product).Value = pProductCode
      mvClassFields(ProductRate.RateFields.Rate).Value = pRateCode
      mvClassFields(ProductRate.RateFields.CurrentPrice).DoubleValue = pCurrentPrice
      mvClassFields(ProductRate.RateFields.FuturePrice).DoubleValue = pFuturePrice
      mvClassFields(ProductRate.RateFields.PriceChangeDate).Value = pPriceChangeDate
      mvClassFields(ProductRate.RateFields.UseModifiers).Value = pUseModifier
      mvClassFields(ProductRate.RateFields.PriceIsPercentage).Value = pPriceIsPercentage
      mvClassFields(ProductRate.RateFields.VatExclusive).Value = BooleanString(pVATExclusive)
    End Sub

    ''' <summary>
    ''' Sets the NoVatExclusiveVatRequired flag- required to prevent VAT being added for VAT exclusive rates
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub SetNoVatExclusiveVatRequired()
      mvNoVatExclusiveVatRequired = True
    End Sub

    Public ReadOnly Property IsValid As Boolean
      Get
        If Existing Then Return True
        If mvClassFields IsNot Nothing AndAlso mvClassFields(ProductRate.RateFields.PriceChangeDate).Value.Length > 0 Then Return True
      End Get
    End Property

    Private ReadOnly Property NewPrice(ByVal pModifierContactNumber As Integer, ByVal pPrice As Double, ByVal pTransactionDate As Date) As Double
      Get
        If Not CachedPriceValid(pModifierContactNumber) Then
          mvFinalPrice = ReCalculatePrice(pModifierContactNumber, pPrice, pTransactionDate, RenewalCurrentFutureDateTypes.rcfdtNone)
        End If
        Return mvFinalPrice
      End Get
    End Property

    Private ReadOnly Property RenewalPrice(ByVal pModifierContactNumber As Integer, ByVal pPrice As Double, ByVal pTransactionDate As Date, ByVal pRenewalCurrentFutureDateType As RenewalCurrentFutureDateTypes) As Double
      Get
        If Not CachedPriceValid(pModifierContactNumber, pTransactionDate, pRenewalCurrentFutureDateType) Then
          mvFinalRenewalPrice = ReCalculatePrice(pModifierContactNumber, pPrice, pTransactionDate, pRenewalCurrentFutureDateType)
        End If
        Return mvFinalRenewalPrice
      End Get
    End Property

    Private Function ReCalculatePrice(ByVal pModifierContactNumber As Integer, ByVal pPrice As Double, ByVal pTransactionDate As Date, pRenewalCurrentFutureDateType As RenewalCurrentFutureDateTypes) As Double
      Dim vFinalPrice As Double = 0
      Dim vFinished As Boolean = False
      Dim vNextSequenceNumber As Integer = 0
      Dim vActivityDT As DataTable = GetActivityDataTable(pModifierContactNumber, pTransactionDate)
      If vActivityDT IsNot Nothing AndAlso vActivityDT.Rows.Count > 0 Then
        Dim vRS As CDBRecordSet = getRateModifiers()
        Dim vRateModifier As New RateModifier(mvEnv)
        While vRS.Fetch And Not vFinished
          Dim vModifierTriggered As Boolean = False
          vRateModifier.InitFromRecordSet(vRS)
          If vRateModifier.SequenceNumber >= vNextSequenceNumber Then
            vNextSequenceNumber = 0
            Dim vActivityInfo As ActivityInfo = getActivityInfo(vActivityDT, vRateModifier.Activity, vRateModifier.ActivityValue)
            If vActivityInfo IsNot Nothing Then
              If ActivityRelevant(vActivityInfo, pTransactionDate, vRateModifier.UseActivityDate) Then
                Dim vQuantity As Double = If(vRateModifier.UseActivityDate And vActivityInfo.IsDated, CalculateYearsDiff(vActivityInfo.Date, pTransactionDate), DoubleValue(vActivityInfo.Quantity.ToString))
                If vQuantity >= vRateModifier.LowerQuantityLimit AndAlso vQuantity <= vRateModifier.UpperQuantityLimit AndAlso (vNextSequenceNumber = 0) Then
                  vNextSequenceNumber = vRateModifier.NextSequenceNumber
                  Dim vCurrentFuturePrice As Double = 0
                  Select Case pRenewalCurrentFutureDateType
                    Case RenewalCurrentFutureDateTypes.rcfdtNone
                      If pTransactionDate >= CDate(vRateModifier.PriceChangeDate) Then
                        vCurrentFuturePrice = vRateModifier.FuturePrice
                      Else
                        vCurrentFuturePrice = vRateModifier.CurrentPrice
                      End If
                    Case RenewalCurrentFutureDateTypes.rcfdtCurrent
                      vCurrentFuturePrice = vRateModifier.CurrentPrice
                    Case Else
                      vCurrentFuturePrice = vRateModifier.FuturePrice
                  End Select
                  vFinalPrice += If(vRateModifier.PerItem = "Y", (vCurrentFuturePrice * vQuantity), vCurrentFuturePrice)
                  PaymentPlanDetailPricing.SetModifierData(vRateModifier, vQuantity, If(vActivityInfo.ContainsDate, vActivityInfo.Date.ToString(CAREDateFormat), ""), vCurrentFuturePrice, vFinalPrice)
                  vModifierTriggered = True
                  vFinished = vRateModifier.SequenceNumber > 0 AndAlso vRateModifier.NextSequenceNumber = 0
                End If
              End If
            End If
            If Not vFinished Then
              vFinished = (Not vModifierTriggered) AndAlso vRateModifier.StopIfNoModifiers
            End If
          End If
        End While
        vRS.CloseRecordSet()
      End If
      SetCacheEnvironment(pModifierContactNumber, pTransactionDate, pRenewalCurrentFutureDateType)
      Return If(vFinalPrice = 0, pPrice, vFinalPrice)
    End Function

    Private Function getRateModifiers() As CDBRecordSet
      Dim vWhereFields As New CDBFields()
      vWhereFields.Add("product", CDBField.FieldTypes.cftCharacter, mvClassFields(RateFields.Product).Value)
      vWhereFields.Add("rate", CDBField.FieldTypes.cftCharacter, mvClassFields(RateFields.Rate).Value)
      vWhereFields.Add("cc.activity", CDBField.FieldTypes.cftCharacter, "", CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoNotEqual)
      vWhereFields.Add("rm.stop_if_no_modifiers", CDBField.FieldTypes.cftCharacter, "Y", CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket)
      Dim vAnsiJoins As New AnsiJoins
      vAnsiJoins.AddLeftOuterJoin(String.Format("({0}) cc", mvActivitySQL.SQL), "rm.activity", "cc.activity", "rm.activity_value", "cc.activity_value")
      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, (New RateModifier(mvEnv)).GetRecordSetFields(), "rate_modifiers rm", vWhereFields, If(mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbRateModifiersSequence), "product,rate," & mvEnv.Connection.DBIsNull("sequence_number", "0"), ""), vAnsiJoins)
      Return vSQLStatement.GetRecordSet()
    End Function

    Private Function getActivityInfo(ByVal pDataTable As DataTable, ByVal pActivity As String, ByVal pActivityValue As String) As ActivityInfo
      Dim vResult As ActivityInfo = Nothing
      If pDataTable IsNot Nothing AndAlso pDataTable.Rows.Count > 0 Then
        Dim vFilter As String = String.Format("activity = '{0}' AND activity_value = '{1}'", pActivity, pActivityValue)
        pDataTable.DefaultView.RowFilter = vFilter
        Dim vData As DataTable = pDataTable.DefaultView.ToTable
        If vData.Rows.Count > 0 Then
          vResult = New ActivityInfo(vData.Rows(0))
        End If
      End If
      Return vResult
    End Function

    Private Function GetActivityDataTable(ByVal pModifierContactNumber As Integer, ByVal pTransactionDate As Date) As DataTable
      Return GetActivitySQL(pModifierContactNumber, pTransactionDate).GetDataTable
    End Function

    Private Function GetActivitySQL(ByVal pModifierContactNumber As Integer, ByVal pTransactionDate As Date) As SQLStatement
      Dim vFieldNames As String = "activity,activity_value,quantity" & If(mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbRateModifiersUseActivityDate), ",activity_date", "")
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("contact_number", CDBField.FieldTypes.cftCharacter, pModifierContactNumber)
      'vWhereFields.Add("activity", CDBField.FieldTypes.cftCharacter, pActivity)
      'vWhereFields.Add("activity_value", CDBField.FieldTypes.cftCharacter, pActivityValue)
      vWhereFields.Add("valid_from", CDBField.FieldTypes.cftDate, If(pTransactionDate = Nothing, TodaysDate, pTransactionDate.ToString), CDBField.FieldWhereOperators.fwoLessThanEqual)
      vWhereFields.Add("valid_to", CDBField.FieldTypes.cftDate, If(pTransactionDate = Nothing, TodaysDate, pTransactionDate.ToString), CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      mvActivitySQL = New SQLStatement(mvEnv.Connection, vFieldNames, "contact_categories", vWhereFields)
      Dim vWhereFields2 As New CDBFields()
      vWhereFields2.Add("organisation_number", CDBField.FieldTypes.cftCharacter, pModifierContactNumber)
      'vWhereFields2.Add("activity", CDBField.FieldTypes.cftCharacter, pActivity)
      'vWhereFields2.Add("activity_value", CDBField.FieldTypes.cftCharacter, pActivityValue)
      vWhereFields2.Add("valid_from", CDBField.FieldTypes.cftDate, If(pTransactionDate = Nothing, TodaysDate, pTransactionDate.ToString), CDBField.FieldWhereOperators.fwoLessThanEqual)
      vWhereFields2.Add("valid_to", CDBField.FieldTypes.cftDate, If(pTransactionDate = Nothing, TodaysDate, pTransactionDate.ToString), CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      Dim vSQL2 As New SQLStatement(mvEnv.Connection, vFieldNames, "organisation_categories", vWhereFields2)
      mvActivitySQL.AddUnion(vSQL2)
      Return mvActivitySQL
    End Function

    Private Function ActivityRelevant(pActivity As ActivityInfo, pTransactionDate As Date, pUseActivityDate As Boolean) As Boolean
      Dim vResult As Boolean = True
      If pUseActivityDate AndAlso pActivity.IsDated Then
        vResult = pActivity.ContainsDate AndAlso pActivity.Date <= pTransactionDate
      End If
      Return vResult
    End Function

    Private Sub SetCacheEnvironment(ByVal pModifierContactNumber As Integer, ByVal pTransactionDate As Date, ByVal pRenewalCurrentFutureDateType As RenewalCurrentFutureDateTypes)
      mvPrevContactNo = pModifierContactNumber
      mvPrevTransDate = pTransactionDate
      mvPrevRenewalCFDateType = pRenewalCurrentFutureDateType
    End Sub

    Private Function CachedPriceValid(pModifierContactNumber As Integer) As Boolean
      Return mvPrevContactNo = pModifierContactNumber
    End Function

    Private Function CachedPriceValid(pModifierContactNumber As Integer, pTransactionDate As Date, pRenewalCurrentFutureDateType As RenewalCurrentFutureDateTypes) As Boolean
      Return mvPrevContactNo = pModifierContactNumber AndAlso mvPrevTransDate = pTransactionDate AndAlso mvPrevRenewalCFDateType = pRenewalCurrentFutureDateType
    End Function

    ''' <summary>Gets the Price for this VAT-Exclusive Rate without adding VAT</summary>
    ''' <param name="pTransactionDate">Date the Price is required for</param>
    ''' <param name="pQuantity">The number of units required. Returned Price will have been multiplied by this figure</param>
    ''' <returns>Calculated price without VAT</returns>
    Public ReadOnly Property PriceWithoutVAT(ByVal pTransactionDate As Date, ByVal pQuantity As Double) As Double
      Get
        Return PriceWithoutVAT(pTransactionDate, pQuantity, 0, 0, 0, 0)
      End Get
    End Property

    ''' <summary>Gets the Price for this VAT-Exclusive Rate without adding VAT</summary>
    ''' <param name="pTransactionDate">Date the Price is required for</param>
    ''' <param name="pQuantity">The number of units required. Returned Price will have been multiplied by this figure</param>
    ''' <param name="pModifierContactNumber">Contact Number for any modifiers applicable to this Rate that may affect the Price</param>
    ''' <param name="pSourceDiscountPercentage">Discount percentage to be applied</param>
    ''' <param name="pTermMonths">For Pro-rated Payment Plans, the number of months in the current Plan term</param>
    ''' <param name="pProRataMonths">For Pro-rated Payment Plans, the number of months worth of Price that is required to be returned</param>
    ''' <returns>Calculated price without VAT</returns>
    Public ReadOnly Property PriceWithoutVAT(ByVal pTransactionDate As Date, ByVal pQuantity As Double, ByVal pModifierContactNumber As Integer, ByVal pSourceDiscountPercentage As Double, ByVal pTermMonths As Integer, ByVal pProRataMonths As Integer) As Double
      Get
        Dim vPrice As Double
        If IsDate(mvClassFields(RateFields.PriceChangeDate).Value) Then
          If pTransactionDate >= Date.Parse(mvClassFields(RateFields.PriceChangeDate).Value) Then
            If mvClassFields(RateFields.UseModifiers).Bool AndAlso pModifierContactNumber > 0 Then
              vPrice = NewPrice(pModifierContactNumber, mvClassFields(RateFields.FuturePrice).DoubleValue, pTransactionDate)
            Else
              vPrice = mvClassFields(RateFields.FuturePrice).DoubleValue
            End If
          Else
            If mvClassFields(RateFields.UseModifiers).Bool AndAlso pModifierContactNumber > 0 Then
              vPrice = NewPrice(pModifierContactNumber, mvClassFields(RateFields.CurrentPrice).DoubleValue, pTransactionDate)
            Else
              vPrice = mvClassFields(RateFields.CurrentPrice).DoubleValue
            End If
          End If
        Else
          If mvClassFields(RateFields.UseModifiers).Bool AndAlso pModifierContactNumber > 0 Then
            vPrice = NewPrice(pModifierContactNumber, mvClassFields(RateFields.CurrentPrice).DoubleValue, pTransactionDate)
          Else
            vPrice = mvClassFields(RateFields.CurrentPrice).DoubleValue
          End If
        End If

        'Before returning the Price, deduct any discounts, calculate VAT etc.
        If pQuantity = 0 Then pQuantity = 1 'Just in case!!
        vPrice = FixTwoPlaces(vPrice * pQuantity)
        If pSourceDiscountPercentage > 0 Then
          'Source code has given a discount so calculate discount and deduct it
          Dim vDiscount As Double = FixTwoPlaces(vPrice * (pSourceDiscountPercentage / 100))
          vPrice = FixTwoPlaces(vPrice - vDiscount)
        End If
        If pTermMonths <> 0 AndAlso pProRataMonths <> 0 Then
          'Need to return a Price that is correct for the number of months (pProRataMonths) that it applies to
          Dim vMonthlyPrice As Double = vPrice / pTermMonths    'Do not put a FixTwoPlaces around this! This figure must contain all the decimal places to prevent rounding errors
          vPrice = FixTwoPlaces(vMonthlyPrice * pProRataMonths)
        End If
        Return vPrice
      End Get
    End Property

    Public ReadOnly Property NoVatExclusiveVatRequired() As Boolean
      Get
        Return mvNoVatExclusiveVatRequired
      End Get
    End Property

    Public ReadOnly Property PaymentPlanDetailPricing As PaymentPlanDetailPricing
      Get
        If mvPaymentPlanDetailPricing Is Nothing Then
          mvPaymentPlanDetailPricing = New PaymentPlanDetailPricing(mvEnv)
          mvPaymentPlanDetailPricing.Init()
        End If
        Return mvPaymentPlanDetailPricing
      End Get
    End Property

    Public Sub ResetPaymentPlanDetailsPricing()
      mvPaymentPlanDetailPricing = Nothing
    End Sub

    Private Class ActivityInfo

      Private mvQuantity As Double = 0
      Private mvDate As Date = Nothing
      Private mvIsDated As Boolean = False
      Private mvContainsDate As Boolean = False

      Public Sub New(pQuantity As Double)
        mvQuantity = pQuantity
      End Sub

      Public Sub New(pQuantity As Double, pDate As Date)
        mvQuantity = pQuantity
        mvDate = pDate
        mvIsDated = True
        mvContainsDate = True
      End Sub

      Public Sub New(pData As DataRow)
        If Not String.IsNullOrWhiteSpace(pData("quantity").ToString) Then
          Double.TryParse(pData("quantity").ToString, mvQuantity)
        End If
        If pData.Table.Columns.Contains("activity_date") Then
          mvIsDated = True
          If Date.TryParse(pData("activity_date").ToString, mvDate) Then
            mvContainsDate = True
          End If
        End If
      End Sub

      Public ReadOnly Property Quantity As Double
        Get
          Return mvQuantity
        End Get
      End Property

      Public ReadOnly Property [Date] As Date
        Get
          Return mvDate
        End Get
      End Property

      Public ReadOnly Property IsDated As Boolean
        Get
          Return mvIsDated
        End Get
      End Property

      Public ReadOnly Property ContainsDate As Boolean
        Get
          Return mvContainsDate
        End Get
      End Property

    End Class

#End Region

  End Class
End Namespace
