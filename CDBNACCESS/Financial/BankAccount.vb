Namespace Access

  Public Class BankAccount
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum BankAccountFields
      AllFields = 0
      BankAccount
      BankAccountDesc
      Company
      CashBookBankAccount
      SortCode
      AccountNumber
      SoClearanceAccount
      CashBatchPrefix
      CashBatchNumber
      ClaimDay
      InterfaceCode
      DefaultSource
      DefaultProduct
      DefaultRate
      IbanNumber
      BicCode
      DdCreditorName
      CurrencyCode
      AutoPayDelay
      DDClaimFileFormat
      RGBValue
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("bank_account")
        .Add("bank_account_desc")
        .Add("company")
        .Add("cash_book_bank_account")
        .Add("sort_code")
        .Add("account_number")
        .Add("so_clearance_account")
        .Add("cash_batch_prefix")
        .Add("cash_batch_number", CDBField.FieldTypes.cftInteger)
        .Add("claim_day", CDBField.FieldTypes.cftInteger)
        .Add("interface_code")
        .Add("default_source")
        .Add("default_product")
        .Add("default_rate")
        .Add("iban_number")
        .Add("bic_code")
        .Add("dd_creditor_name")
        .Add("currency_code").PrefixRequired = True
        .Add("auto_pay_delay", CDBField.FieldTypes.cftInteger)
        .Add("dd_claim_file_format")
        .Add("rgb_value", CDBField.FieldTypes.cftInteger).PrefixRequired = True

        .Item(BankAccountFields.BankAccount).PrimaryKey = True
        .Item(BankAccountFields.BankAccount).PrefixRequired = True

        .Item(BankAccountFields.Company).PrefixRequired = True
        .Item(BankAccountFields.DefaultSource).PrefixRequired = True
        .Item(BankAccountFields.DefaultProduct).PrefixRequired = True
        .Item(BankAccountFields.DefaultRate).PrefixRequired = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ba"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "bank_accounts"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property BankAccountCode() As String
      Get
        Return mvClassFields(BankAccountFields.BankAccount).Value
      End Get
    End Property
    Public ReadOnly Property BankAccountDesc() As String
      Get
        Return mvClassFields(BankAccountFields.BankAccountDesc).Value
      End Get
    End Property
    Public ReadOnly Property Company() As String
      Get
        Return mvClassFields(BankAccountFields.Company).Value
      End Get
    End Property
    Public ReadOnly Property CashBookBankAccount() As String
      Get
        Return mvClassFields(BankAccountFields.CashBookBankAccount).Value
      End Get
    End Property
    Public ReadOnly Property SortCode() As String
      Get
        Return mvClassFields(BankAccountFields.SortCode).Value
      End Get
    End Property
    Public ReadOnly Property AccountNumber() As String
      Get
        Return mvClassFields(BankAccountFields.AccountNumber).Value
      End Get
    End Property
    Public ReadOnly Property SoClearanceAccount() As String
      Get
        Return mvClassFields(BankAccountFields.SoClearanceAccount).Value
      End Get
    End Property
    Public ReadOnly Property CashBatchPrefix() As String
      Get
        Return mvClassFields(BankAccountFields.CashBatchPrefix).Value
      End Get
    End Property
    Public ReadOnly Property CashBatchNumber() As Integer
      Get
        Return mvClassFields(BankAccountFields.CashBatchNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ClaimDay() As Integer
      Get
        Return mvClassFields(BankAccountFields.ClaimDay).IntegerValue
      End Get
    End Property
    Public ReadOnly Property InterfaceCode() As String
      Get
        Return mvClassFields(BankAccountFields.InterfaceCode).Value
      End Get
    End Property
    Public ReadOnly Property DefaultSource() As String
      Get
        Return mvClassFields(BankAccountFields.DefaultSource).Value
      End Get
    End Property
    Public ReadOnly Property DefaultProduct() As String
      Get
        Return mvClassFields(BankAccountFields.DefaultProduct).Value
      End Get
    End Property
    Public ReadOnly Property DefaultRate() As String
      Get
        Return mvClassFields(BankAccountFields.DefaultRate).Value
      End Get
    End Property
    Public ReadOnly Property IbanNumber() As String
      Get
        Return mvClassFields(BankAccountFields.IbanNumber).Value
      End Get
    End Property
    Public ReadOnly Property BicCode() As String
      Get
        Return mvClassFields(BankAccountFields.BicCode).Value
      End Get
    End Property
    Public ReadOnly Property DdCreditorName() As String
      Get
        Return mvClassFields(BankAccountFields.DdCreditorName).Value
      End Get
    End Property

    Public ReadOnly Property CurrencyCode() As String
      Get
        Return mvClassFields.Item(BankAccount.BankAccountFields.CurrencyCode).Value
      End Get
    End Property

    ''' <summary>The Auto Pay Delay days for Direct Debits.</summary>
    Public ReadOnly Property AutoPayDelay() As Nullable(Of Integer)
      Get
        Dim vAutoPayDelay As Nullable(Of Integer) = Nothing
        If String.IsNullOrWhiteSpace(mvClassFields.Item(BankAccountFields.AutoPayDelay).Value) = False Then
          vAutoPayDelay = mvClassFields.Item(BankAccountFields.AutoPayDelay).IntegerValue
        End If
        Return vAutoPayDelay
      End Get
    End Property

    Public ReadOnly Property DDClaimFileFormat() As String
      Get
        Return mvClassFields.Item(BankAccountFields.DDClaimFileFormat).Value
      End Get
    End Property

    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(BankAccountFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(BankAccountFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non AutoGeneratedCode"

    Private mvCCClaimDates As Collection 'All available CC scheduled_claim_dates
    Private mvCCClaimDays As Collection 'All available CC bank_account_claim_days
    Private mvDDClaimDates As Collection 'All available DD scheduled_claim_dates
    Private mvDDClaimDays As Collection 'All available DD bank_account_claim_days

    Public Function GetClaimDates(ByVal pClaimType As String) As Collection
      'This will return a collection of scheduled_claim_dates for the specified type (CC or DD)
      'where the earliest claim_date is 2 years before today
      Dim vRS As CDBRecordSet
      Dim vSchClaimDate As ScheduledClaimDate
      Dim vSQL As String

      If mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlAutoPayClaimDateMethod) = "A" Then
        Select Case pClaimType
          Case "DD"
            'Direct Debits
            If mvDDClaimDates Is Nothing Then
              mvDDClaimDates = New Collection
              vSchClaimDate = New ScheduledClaimDate
              vSchClaimDate.Init(mvEnv)
              vSQL = "SELECT " & vSchClaimDate.GetRecordSetFields(ScheduledClaimDate.ScheduledClaimDateRecordSetTypes.scdrtAll) & " FROM scheduled_claim_dates scd WHERE bank_account = '" & mvClassFields(BankAccountFields.BankAccount).Value & "'"
              vSQL = vSQL & " AND claim_type = 'DD' AND claim_date " & mvEnv.Connection.SQLLiteral(">=", DateAdd(Microsoft.VisualBasic.DateInterval.Year, -2, CDate(TodaysDate())))
              vSQL = vSQL & " ORDER BY claim_date"
              vRS = mvEnv.Connection.GetRecordSet(vSQL)
              While vRS.Fetch() = True
                vSchClaimDate = New ScheduledClaimDate
                vSchClaimDate.InitFromRecordSet(mvEnv, vRS, ScheduledClaimDate.ScheduledClaimDateRecordSetTypes.scdrtAll)
                mvDDClaimDates.Add(vSchClaimDate, vSchClaimDate.ClaimDate)
              End While
              vRS.CloseRecordSet()
            End If
            GetClaimDates = mvDDClaimDates

          Case Else 'CC
            'Continuous Credit Card Authorities
            If mvCCClaimDates Is Nothing Then
              mvCCClaimDates = New Collection
              vSchClaimDate = New ScheduledClaimDate
              vSchClaimDate.Init(mvEnv)
              vSQL = "SELECT " & vSchClaimDate.GetRecordSetFields(ScheduledClaimDate.ScheduledClaimDateRecordSetTypes.scdrtAll) & " FROM scheduled_claim_dates scd WHERE bank_account = '" & mvClassFields(BankAccountFields.BankAccount).Value & "'"
              vSQL = vSQL & " AND claim_type = 'CC' AND claim_date " & mvEnv.Connection.SQLLiteral(">=", DateAdd(Microsoft.VisualBasic.DateInterval.Year, -2, CDate(TodaysDate())))
              vSQL = vSQL & " ORDER BY claim_date"
              vRS = mvEnv.Connection.GetRecordSet(vSQL)
              While vRS.Fetch() = True
                vSchClaimDate = New ScheduledClaimDate
                vSchClaimDate.InitFromRecordSet(mvEnv, vRS, ScheduledClaimDate.ScheduledClaimDateRecordSetTypes.scdrtAll)
                mvCCClaimDates.Add(vSchClaimDate, vSchClaimDate.ClaimDate)
              End While
              vRS.CloseRecordSet()
            End If
            GetClaimDates = mvCCClaimDates
        End Select
      Else
        'If we get here this is user error!
        mvDDClaimDates = New Collection
        mvCCClaimDates = New Collection
        GetClaimDates = mvDDClaimDates
      End If

    End Function

    Public Function GetClaimDays(ByVal pClaimType As String) As Collection
      'This will return a collection of bank_account_claim_days for the specified type (CC or DD)
      Dim vRS As CDBRecordSet
      Dim vBAClaimDay As BankAccountClaimDay
      Dim vSQL As String
      Dim vColl As Collection = Nothing

      If mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlAutoPayClaimDateMethod) = "D" Then
        Select Case pClaimType
          Case "DD"
            'Direct Debits
            If mvDDClaimDays Is Nothing Then
              mvDDClaimDays = New Collection
              vBAClaimDay = New BankAccountClaimDay
              vBAClaimDay.Init(mvEnv)
              vSQL = "SELECT " & vBAClaimDay.GetRecordSetFields(BankAccountClaimDay.BankAccountClaimDayRecordSetTypes.bacdrtAll) & " FROM bank_account_claim_days bacd WHERE bank_account = '" & mvClassFields(BankAccountFields.BankAccount).Value & "'"
              vSQL = vSQL & " AND claim_type = 'DD' ORDER BY claim_day"
              vRS = mvEnv.Connection.GetRecordSet(vSQL)
              While vRS.Fetch() = True
                vBAClaimDay = New BankAccountClaimDay
                vBAClaimDay.InitFromRecordSet(mvEnv, vRS, BankAccountClaimDay.BankAccountClaimDayRecordSetTypes.bacdrtAll)
                mvDDClaimDays.Add(vBAClaimDay, CStr(vBAClaimDay.ClaimDay))
              End While
              vRS.CloseRecordSet()
            End If
            vColl = mvDDClaimDays

          Case "CC"
            'Continuous Credit Card Authorities
            If mvCCClaimDays Is Nothing Then
              mvCCClaimDays = New Collection
              vBAClaimDay = New BankAccountClaimDay
              vBAClaimDay.Init(mvEnv)
              vSQL = "SELECT " & vBAClaimDay.GetRecordSetFields(BankAccountClaimDay.BankAccountClaimDayRecordSetTypes.bacdrtAll) & " FROM bank_account_claim_days bacd WHERE bank_account = '" & mvClassFields(BankAccountFields.BankAccount).Value & "'"
              vSQL = vSQL & " AND claim_type = 'CC' ORDER BY claim_day"
              vRS = mvEnv.Connection.GetRecordSet(vSQL)
              While vRS.Fetch() = True
                vBAClaimDay = New BankAccountClaimDay
                vBAClaimDay.InitFromRecordSet(mvEnv, vRS, BankAccountClaimDay.BankAccountClaimDayRecordSetTypes.bacdrtAll)
                mvCCClaimDays.Add(vBAClaimDay, CStr(vBAClaimDay.ClaimDay))
              End While
              vRS.CloseRecordSet()
            End If
            vColl = mvCCClaimDays
        End Select
      Else
        'If we get here it is user error!
        mvDDClaimDays = New Collection
        mvCCClaimDays = New Collection
        vColl = mvDDClaimDays
      End If
      Return vColl
    End Function

    Public Function GetRawClaimDate(year As Integer, month As Integer, claimDay As Integer) As Date
      Dim lastInMonth As Date = New Date(If(month < 12, year, year + 1),
                                         If(month < 12, month + 1, 1),
                                         1
                                        ).AddDays(-1)
      Return DateSerial(year,
                        month,
                        If(CInt(claimDay) > lastInMonth.Day,
                           lastInMonth.Day,
                           CInt(claimDay)
                          )
                       )
    End Function

    Public Function GetAdjustedClaimDate(claimDate As Date, claimDay As Integer, autoPaymentType As String) As Date
      Dim result As Date = claimDate
      Dim vNonWorkingDayAction As String = "U"
      For Each vBankAccountClaimDay As BankAccountClaimDay In Me.GetClaimDays(autoPaymentType)
        If vBankAccountClaimDay.ClaimDay = claimDay Then
          vNonWorkingDayAction = vBankAccountClaimDay.NonWorkingDayBehaviour
        End If
      Next vBankAccountClaimDay
      If vNonWorkingDayAction.Equals("N", StringComparison.InvariantCultureIgnoreCase) Then
        result = result.NextWorkingDay(Me.Environment)
      ElseIf vNonWorkingDayAction.Equals("P", StringComparison.InvariantCultureIgnoreCase) Then
        result = result.PreviousWorkingDay(Me.Environment)
      End If
      Return result
    End Function

    ''' <summary>Gets the Auto Pay Delay days appropriate for this Bank Account.</summary>
    ''' <param name="pAutoPayMethod">The type of auto payment method.</param>
    ''' <returns>If the <see cref="AutoPayDelay"/> is not set then the fp_auto_pay_delay configuration option will be used.</returns>
    Friend Function GetAutoPayDelayDays(ByVal pAutoPayMethod As PaymentPlan.ppAutoPayMethods) As Integer
      Dim vAutoPayDelayDays As Nullable(Of Integer)
      If pAutoPayMethod = PaymentPlan.ppAutoPayMethods.ppAPMDD Then vAutoPayDelayDays = Me.AutoPayDelay
      If vAutoPayDelayDays.HasValue = False AndAlso pAutoPayMethod <> PaymentPlan.ppAutoPayMethods.ppAPMSO Then
        vAutoPayDelayDays = IntegerValue(mvEnv.GetConfig("fp_auto_pay_delay", "0"))
      End If
      If vAutoPayDelayDays.HasValue = False Then vAutoPayDelayDays = 0
      Return vAutoPayDelayDays.Value
    End Function

    ''' <summary>Gets the Direct Debit claim file format for this Bank Account.</summary>
    ''' <returns>If the <see cref="DDClaimFileFormat"/> is not set then the fp_direct_debit_format configuration option will be used.</returns>
    Public Function GetDDClaimFileFormat() As String
      Dim vDDClaimFileFormat As String = Me.DDClaimFileFormat
      If String.IsNullOrEmpty(vDDClaimFileFormat) Then
        vDDClaimFileFormat = mvEnv.GetConfig("fp_direct_debit_format")
      End If
      If String.IsNullOrEmpty(vDDClaimFileFormat) = False Then vDDClaimFileFormat = vDDClaimFileFormat.ToUpper
      Return vDDClaimFileFormat
    End Function

#End Region


  End Class
End Namespace
