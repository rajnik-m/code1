Namespace Access

  Public Class Cheque
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum ChequeFields
      AllFields = 0
      ChequeReferenceNumber
      ContactNumber
      AddressNumber
      Amount
      PrintedOn
      ChequeNumber
      ReconciledOn
      ChequeStatus
      ReprintCount
      CurrencyCode
      AdjustmentStatus
      CancellationReason
      CancellationSource
      CancelledBy
      CancelledOn
      PopPaymentMethod
      BankDetailsNumber
      PopProductionNumber
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("cheque_reference_number", CDBField.FieldTypes.cftLong)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("amount", CDBField.FieldTypes.cftNumeric)
        .Add("printed_on", CDBField.FieldTypes.cftDate)
        .Add("cheque_number", CDBField.FieldTypes.cftLong)
        .Add("reconciled_on", CDBField.FieldTypes.cftDate)
        .Add("cheque_status")
        .Add("reprint_count", CDBField.FieldTypes.cftInteger)
        .Add("currency_code")
        .Add("adjustment_status")
        .Add("cancellation_reason")
        .Add("cancellation_source")
        .Add("cancelled_by")
        .Add("cancelled_on", CDBField.FieldTypes.cftDate)
        .Add("pop_payment_method")
        .Add("bank_details_number")
        .Add("pop_production_number")
        .Item(ChequeFields.ChequeReferenceNumber).PrimaryKey = True
        .Item(ChequeFields.ReprintCount).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataChequeReissue)
        .Item(ChequeFields.CurrencyCode).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPurchaseOrderCurrencyCode)


        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPopPaymentMethod) Then
          .Item(ChequeFields.PopPaymentMethod).InDatabase = True
          .Item(ChequeFields.BankDetailsNumber).InDatabase = True
          .Item(ChequeFields.PopProductionNumber).InDatabase = True
          .Item(ChequeFields.PopPaymentMethod).PrefixRequired = True
          .Item(ChequeFields.BankDetailsNumber).PrefixRequired = True
          .Item(ChequeFields.PopProductionNumber).PrefixRequired = True
        End If

        .SetControlNumberField(ChequeFields.ChequeReferenceNumber, "CR")
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "c"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "cheques"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ChequeReferenceNumber() As Integer
      Get
        Return mvClassFields(ChequeFields.ChequeReferenceNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ContactNumber() As Integer
      Get
        Return mvClassFields(ChequeFields.ContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AddressNumber() As Integer
      Get
        Return mvClassFields(ChequeFields.AddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Amount() As Double
      Get
        Return mvClassFields(ChequeFields.Amount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property PrintedOn() As String
      Get
        Return mvClassFields(ChequeFields.PrintedOn).Value
      End Get
    End Property
    Public ReadOnly Property ChequeNumber() As Integer
      Get
        Return mvClassFields(ChequeFields.ChequeNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ReconciledOn() As String
      Get
        Return mvClassFields(ChequeFields.ReconciledOn).Value
      End Get
    End Property
    Public ReadOnly Property ChequeStatus() As String
      Get
        Return mvClassFields(ChequeFields.ChequeStatus).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ChequeFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ChequeFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property ReprintCount() As Integer
      Get
        Return mvClassFields(ChequeFields.ReprintCount).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CurrencyCode() As String
      Get
        Return mvClassFields(ChequeFields.CurrencyCode).Value
      End Get
    End Property
    Public ReadOnly Property AdjustmentStatus() As String
      Get
        Return mvClassFields(ChequeFields.AdjustmentStatus).Value
      End Get
    End Property
    Public ReadOnly Property CancellationReason() As String
      Get
        Return mvClassFields(ChequeFields.CancellationReason).Value
      End Get
    End Property
    Public ReadOnly Property CancellationSource() As String
      Get
        Return mvClassFields(ChequeFields.CancellationSource).Value
      End Get
    End Property
    Public ReadOnly Property CancelledBy() As String
      Get
        Return mvClassFields(ChequeFields.CancelledBy).Value
      End Get
    End Property
    Public ReadOnly Property CancelledOn() As String
      Get
        Return mvClassFields(ChequeFields.CancelledOn).Value
      End Get
    End Property
    Public ReadOnly Property PopPaymentMethod As String
      Get
        Return mvClassFields(ChequeFields.PopPaymentMethod).Value
      End Get
    End Property
    Public ReadOnly Property BankDetailsNumber As Integer
      Get
        Return mvClassFields(ChequeFields.BankDetailsNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PopProductionNumber As String
      Get
        Return mvClassFields(ChequeFields.PopProductionNumber).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Private mvPurchaseOrderPayments As CollectionList(Of PurchaseOrderPayment)
    Private mvPurchaseInvoices As CollectionList(Of PurchaseInvoice)

    Public ReadOnly Property PurchaseOrderPayments() As CollectionList(Of PurchaseOrderPayment)
      Get
        If mvPurchaseOrderPayments Is Nothing Then mvPurchaseOrderPayments = New CollectionList(Of PurchaseOrderPayment)
        PurchaseOrderPayments = mvPurchaseOrderPayments
      End Get
    End Property
    Public ReadOnly Property PurchaseInvoices() As CollectionList(Of PurchaseInvoice)
      Get
        If mvPurchaseInvoices Is Nothing Then mvPurchaseInvoices = New CollectionList(Of PurchaseInvoice)
        PurchaseInvoices = mvPurchaseInvoices
      End Get
    End Property

    Public Sub Reconcile(ByVal pReconciledOn As String, ByVal pChequeStatus As String)
      mvClassFields(ChequeFields.ReconciledOn).Value = pReconciledOn
      mvClassFields(ChequeFields.ChequeStatus).Value = pChequeStatus
    End Sub

    Public Sub SetFieldsForReissue()
      mvClassFields.Item(ChequeFields.ChequeNumber).Value = ""
      mvClassFields.Item(ChequeFields.PrintedOn).Value = ""
      mvClassFields.Item(ChequeFields.ChequeStatus).Value = ""
      mvClassFields.Item(ChequeFields.ReprintCount).LongValue += 1
    End Sub

    Public Sub InitFromChequeNumber(ByVal pChequeNumber As Integer)
      Dim vRecordSet As CDBRecordSet = New SQLStatement(mvEnv.Connection, GetRecordSetFields(), mvClassFields.TableNameAndAlias, New CDBField("cheque_number", pChequeNumber)).GetRecordSet
      If vRecordSet.Fetch() = True Then
        InitFromRecordSet(vRecordSet)
      Else
        Init()
      End If
      vRecordSet.CloseRecordSet()
    End Sub

    Public Sub InitPurchaseOrderPayments()
      Dim vPOP As New PurchaseOrderPayment(mvEnv)

      vPOP.Init()
      Dim vWhereFields As New CDBFields(New CDBField("cheque_reference_number", ChequeReferenceNumber))
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPOPaymentReversals) Then
        vWhereFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, "")
      End If
      vWhereFields.Add("amount", CDBField.FieldTypes.cftNumeric, "0", CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vPOP.GetRecordSetFields(), "purchase_order_payments pop", vWhereFields, "payment_number")
      Dim vRecordSet As CDBRecordSet = vSQLStatement.GetRecordSet()
      While vRecordSet.Fetch() = True
        vPOP = New PurchaseOrderPayment(mvEnv)
        vPOP.InitFromRecordSet(vRecordSet)
        PurchaseOrderPayments.Add(vPOP.ToString, vPOP)
      End While
      vRecordSet.CloseRecordSet()
    End Sub

    Public Sub InitPurchaseInvoices()
      Dim vPI As New PurchaseInvoice(mvEnv)

      vPI.Init()
      Dim vWhereFields As New CDBFields(New CDBField("cheque_reference_number", ChequeReferenceNumber))
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPOPaymentReversals) Then
        vWhereFields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, "")
      End If
      vWhereFields.Add("amount", CDBField.FieldTypes.cftNumeric, "0", CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vPI.GetRecordSetFields(), "purchase_invoices pi", vWhereFields, "purchase_invoice_number")
      Dim vRecordSet As CDBRecordSet = vSQLStatement.GetRecordSet()
      While vRecordSet.Fetch() = True
        vPI = New PurchaseInvoice(mvEnv)
        vPI.InitFromRecordSet(vRecordSet)
        PurchaseInvoices.Add(vPI.PurchaseInvoiceNumber.ToString, vPI)
      End While
      vRecordSet.CloseRecordSet()
    End Sub

    Public Sub SetPayeeFields(ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer)
      mvClassFields.Item(ChequeFields.ContactNumber).IntegerValue = pContactNumber
      mvClassFields.Item(ChequeFields.AddressNumber).IntegerValue = pAddressNumber
    End Sub

    Public Sub SetStatus(ByVal pStatus As String)
      mvClassFields.Item(ChequeFields.ChequeStatus).Value = pStatus
    End Sub

    Protected Overrides Sub SetValid()
      MyBase.SetValid()
      If CurrencyCode.Length = 0 AndAlso mvClassFields(ChequeFields.CurrencyCode).InDatabase Then
        'This should not happen in theory as we do not save a new cheque record using this class.
        Debug.Assert(False)
        mvClassFields(ChequeFields.CurrencyCode).Value = mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlCurrencyCode)
      End If
    End Sub

    Public Overloads Sub Clone(ByVal pRecord As CARERecord)
      MyBase.Clone(pRecord)

      'Now set the fields that need to be different
      With mvClassFields
        .Item(ChequeFields.Amount).DoubleValue = FixTwoPlaces(.Item(ChequeFields.Amount).DoubleValue * -1)
        '.Item(ChequeFields.BankDetailsNumber).IntegerValue = 0
        .Item(ChequeFields.PopProductionNumber).IntegerValue = 0
        .Item(ChequeFields.AdjustmentStatus).Value = String.Empty
        .Item(ChequeFields.CancellationReason).Value = String.Empty
        .Item(ChequeFields.CancellationSource).Value = String.Empty
        .Item(ChequeFields.CancelledBy).Value = String.Empty
        .Item(ChequeFields.CancelledOn).Value = String.Empty
      End With
    End Sub

    ''' <summary>Cancel the Cheque.</summary>
    ''' <param name="pCancelReason">Reason for the cancellation.</param>
    ''' <param name="pCancelBy">User performing the cancellation.</param>
    ''' <param name="pCancelOn">Date cancellation takes place.</param>
    ''' <param name="pCancelSource">The source of the cancellation.</param>
    ''' <param name="pAdjustmentStatus">The adjustment status that should be applied.</param>
    Friend Sub Cancel(ByVal pCancelReason As String, ByVal pCancelBy As String, ByVal pCancelOn As String, ByVal pCancelSource As String, ByVal pAdjustmentStatus As String)
      With mvClassFields
        .Item(ChequeFields.CancellationReason).Value = pCancelReason
        .Item(ChequeFields.CancelledOn).Value = pCancelOn
        .Item(ChequeFields.CancelledBy).Value = pCancelBy
        .Item(ChequeFields.CancellationSource).Value = pCancelSource
        .Item(ChequeFields.AdjustmentStatus).Value = pAdjustmentStatus
      End With
    End Sub

#End Region

  End Class
End Namespace
