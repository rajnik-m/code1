Namespace Access

  Public Class InvoicePaymentHistory
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum InvoicePaymentHistoryFields
      AllFields = 0
      InvoiceNumber
      BatchNumber
      TransactionNumber
      LineNumber
      Amount
      Status
      ProvisionalInvoiceNumber
      AllocationDate
      AllocationBatchNumber
      AllocationTransactionNumber
      AllocationLineNumber
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("invoice_number", CDBField.FieldTypes.cftLong)
        .Add("batch_number", CDBField.FieldTypes.cftLong)
        .Add("transaction_number", CDBField.FieldTypes.cftInteger)
        .Add("line_number", CDBField.FieldTypes.cftInteger)
        .Add("amount", CDBField.FieldTypes.cftNumeric)
        .Add("status")
        .Add("provisional_invoice_number", CDBField.FieldTypes.cftLong)
        .Add("allocation_date", CDBField.FieldTypes.cftDate)
        .Add("allocation_batch_number", CDBField.FieldTypes.cftInteger)
        .Add("allocation_transaction_number", CDBField.FieldTypes.cftInteger)
        .Add("allocation_line_number", CDBField.FieldTypes.cftInteger)
      End With

      mvClassFields.Item(InvoicePaymentHistoryFields.InvoiceNumber).PrefixRequired = True
      mvClassFields.Item(InvoicePaymentHistoryFields.BatchNumber).PrefixRequired = True
      mvClassFields.Item(InvoicePaymentHistoryFields.TransactionNumber).PrefixRequired = True
      mvClassFields.Item(InvoicePaymentHistoryFields.LineNumber).PrefixRequired = True
      mvClassFields.Item(InvoicePaymentHistoryFields.ProvisionalInvoiceNumber).PrefixRequired = True
      mvClassFields.Item(InvoicePaymentHistoryFields.Amount).PrefixRequired = True
      mvClassFields.Item(InvoicePaymentHistoryFields.Status).PrefixRequired = True

      mvClassFields.Item(InvoicePaymentHistoryFields.ProvisionalInvoiceNumber).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataProvisionalInvoiceNumber)
      mvClassFields.Item(InvoicePaymentHistoryFields.AllocationDate).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataAllocationsOnIPH)
      mvClassFields.Item(InvoicePaymentHistoryFields.AllocationBatchNumber).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataAllocationsOnIPH)
      mvClassFields.Item(InvoicePaymentHistoryFields.AllocationTransactionNumber).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataAllocationsOnIPH)
      mvClassFields.Item(InvoicePaymentHistoryFields.AllocationLineNumber).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataAllocationsOnIPH)
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return False
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "iph"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "invoice_payment_history"
      End Get
    End Property

    Protected Overrides Sub PreValidateCreateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PreValidateCreateParameters(pParameterList)
      'Need to ensure that ProvisionalInvoiceNumber is used if required
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataProvisionalInvoiceNumber) Then
        'If we haven't got a ProvisionalInvoiceNumber then get it and only use if it is the same as the InvoiceNumber (i.e. Invoice does not have a real number yet)
        'otherwise InvoiceProduction will fail to re-link the IPH after assigning a "real" Invoice number
        If pParameterList.ParameterExists("ProvisionalInvoiceNumber").IntegerValue = 0 Then
          Dim vInvoice As New Invoice()
          vInvoice.Init(mvEnv, 0, 0, pParameterList.ParameterExists("InvoiceNumber").IntegerValue)
          If vInvoice.Existing = True AndAlso vInvoice.ProvisionalInvoiceNumber > 0 AndAlso vInvoice.ProvisionalInvoiceNumber = IntegerValue(vInvoice.InvoiceNumber) Then
            If pParameterList.Exists("ProvisionalInvoiceNumber") = False Then pParameterList.Add("ProvisionalInvoiceNumber", CDBField.FieldTypes.cftInteger)
            pParameterList("ProvisionalInvoiceNumber").Value = vInvoice.ProvisionalInvoiceNumber.ToString
          End If
        End If
      End If
    End Sub

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property InvoiceNumber() As Integer
      Get
        Return mvClassFields(InvoicePaymentHistoryFields.InvoiceNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property BatchNumber() As Integer
      Get
        Return mvClassFields(InvoicePaymentHistoryFields.BatchNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property TransactionNumber() As Integer
      Get
        Return mvClassFields(InvoicePaymentHistoryFields.TransactionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property LineNumber() As Integer
      Get
        Return mvClassFields(InvoicePaymentHistoryFields.LineNumber).IntegerValue
      End Get
    End Property

    Public ReadOnly Property Amount() As Double
      Get
        Return mvClassFields(InvoicePaymentHistoryFields.Amount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property Status() As String
      Get
        Return mvClassFields(InvoicePaymentHistoryFields.Status).Value
      End Get
    End Property
    Public ReadOnly Property ProvisionalInvoiceNumber() As Integer
      Get
        Return mvClassFields(InvoicePaymentHistoryFields.ProvisionalInvoiceNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AllocationDate() As String
      Get
        Return mvClassFields.Item(InvoicePaymentHistoryFields.AllocationDate).Value
      End Get
    End Property
    Public ReadOnly Property AllocationBatchNumber() As Integer
      Get
        Return mvClassFields.Item(InvoicePaymentHistoryFields.AllocationBatchNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AllocationTransactionNumber() As Integer
      Get
        Return mvClassFields.Item(InvoicePaymentHistoryFields.AllocationTransactionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AllocationLineNumber() As Integer
      Get
        Return mvClassFields.Item(InvoicePaymentHistoryFields.AllocationLineNumber).IntegerValue
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    ''' <summary>Initialise InvoicePaymentHistory using Batch, Transaction and Line numbers</summary>
    ''' <remarks>If record cannot be found with these numbers then it will be initialised using the Allocation Batch, Transaction and Line numbers</remarks>
    Public Sub InitFromBatchTransactionLine(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pLineNumber As Integer)
      Dim vWherefields As New CDBFields
      With vWherefields
        .Add("batch_number", pBatchNumber)
        .Add("transaction_number", pTransactionNumber)
        .Add("line_number", pLineNumber)
      End With
      InitWithPrimaryKey(vWherefields)
      If mvExisting = False AndAlso mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataAllocationsOnIPH) = True Then
        'Try again, this time checking the 'allocation_' columns
        vWherefields.Clear()
        With vWherefields
          .Add("allocation_batch_number", pBatchNumber)
          .Add("allocation_transaction_number", pTransactionNumber)
          .Add("allocation_line_number", pLineNumber)
        End With
        InitWithPrimaryKey(vWherefields)
      End If
    End Sub

    ''' <summary>Marks this record as having been adjusted and creates a new record for the reversal</summary>
    ''' <param name="pStatus">Adjustment status</param>
    ''' <param name="pBatchNumber">Adjustment batch number</param>
    ''' <param name="pTransactionNumber">Adjustment transaction number</param>
    ''' <param name="pLineNumber">Adjustment line number</param>
    ''' <param name="pTransactionDate">Adjustment date</param>
    Friend Sub Reverse(ByVal pStatus As String, ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pLineNumber As Integer, ByVal pTransactionDate As Date)
      If pBatchNumber > 0 Then
        Debug.Assert(pTransactionNumber > 0 And pLineNumber > 0)
      Else
        Debug.Assert(pTransactionNumber = 0 And pLineNumber = 0)
      End If

      mvClassFields.Item(InvoicePaymentHistoryFields.Status).Value = pStatus
      Save()
      'Reverse this IPH record
      mvClassFields.ClearSetValues()
      mvClassFields.Item(InvoicePaymentHistoryFields.BatchNumber).IntegerValue = pBatchNumber
      mvClassFields.Item(InvoicePaymentHistoryFields.TransactionNumber).IntegerValue = pTransactionNumber
      mvClassFields.Item(InvoicePaymentHistoryFields.LineNumber).LongValue = pLineNumber
      mvClassFields.Item(InvoicePaymentHistoryFields.AllocationBatchNumber).LongValue = pBatchNumber
      mvClassFields.Item(InvoicePaymentHistoryFields.AllocationTransactionNumber).LongValue = pTransactionNumber
      mvClassFields.Item(InvoicePaymentHistoryFields.AllocationLineNumber).LongValue = pLineNumber
      mvClassFields.Item(InvoicePaymentHistoryFields.Amount).DoubleValue = (mvClassFields.Item(InvoicePaymentHistoryFields.Amount).DoubleValue * -1)
      mvClassFields.Item(InvoicePaymentHistoryFields.Status).Value = ""
      mvClassFields.Item(InvoicePaymentHistoryFields.AllocationDate).Value = pTransactionDate.ToString(CAREDateFormat)
      mvExisting = False
      Save()
    End Sub

    ''' <summary>Gets the Batch / Transaction / Line numbers for the allocation transaction</summary>
    ''' <param name="pAllocationBatchNumber">Returns the allocation batch number</param>
    ''' <param name="pAllocationTransactionNumber">Returns the allocation transaction number</param>
    ''' <param name="pAllocationLineNumber">Returns the allocation line number</param>
    Friend Sub GetAllocationNumbers(ByRef pAllocationBatchNumber As Integer, ByRef pAllocationTransactionNumber As Integer, ByRef pAllocationLineNumber As Integer)
      pAllocationBatchNumber = 0
      pAllocationTransactionNumber = 0
      pAllocationLineNumber = 0
      If mvExisting Then
        With mvClassFields
          If .Item(InvoicePaymentHistoryFields.AllocationBatchNumber).IntegerValue > 0 Then
            pAllocationBatchNumber = .Item(InvoicePaymentHistoryFields.AllocationBatchNumber).IntegerValue
            pAllocationTransactionNumber = .Item(InvoicePaymentHistoryFields.AllocationTransactionNumber).IntegerValue
            pAllocationLineNumber = .Item(InvoicePaymentHistoryFields.AllocationLineNumber).IntegerValue
          ElseIf .Item(InvoicePaymentHistoryFields.BatchNumber).IntegerValue > 0 Then
            pAllocationBatchNumber = .Item(InvoicePaymentHistoryFields.BatchNumber).IntegerValue
            pAllocationTransactionNumber = .Item(InvoicePaymentHistoryFields.TransactionNumber).IntegerValue
            pAllocationLineNumber = .Item(InvoicePaymentHistoryFields.LineNumber).IntegerValue
          End If
        End With
      End If
    End Sub
#End Region

  End Class
End Namespace
