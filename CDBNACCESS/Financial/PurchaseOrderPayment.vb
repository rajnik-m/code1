Namespace Access

  Public Class PurchaseOrderPayment
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum PurchaseOrderPaymentFields
      AllFields = 0
      PurchaseOrderNumber
      PaymentNumber
      PurchaseInvoiceNumber
      DueDate
      LatestExpectedDate
      Amount
      Percentage
      AuthorisationRequired
      AuthorisationStatus
      AuthorisedBy
      AuthorisedOn
      PostedOn
      JournalNumber
      ChequeProducedOn
      ChequeReferenceNumber
      PayeeContactNumber
      PayeeAddressNumber
      PayByBacs
      PayeeReference
      NoPaymentRequired
      PoPaymentType
      SeparatePayment
      NominalAccount
      DistributionCode
      ExpectedReceipt
      ExpectedReceiptAmount
      ExpectedReceiptReason
      ReceiptForPaymentNumber
      AdjustmentStatus
      CancellationReason
      CancellationSource
      CancelledBy
      CancelledOn
      PopPaymentMethod
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("purchase_order_number", CDBField.FieldTypes.cftLong)
        .Add("payment_number", CDBField.FieldTypes.cftLong)
        .Add("purchase_invoice_number", CDBField.FieldTypes.cftLong)
        .Add("due_date", CDBField.FieldTypes.cftDate)
        .Add("latest_expected_date", CDBField.FieldTypes.cftDate)
        .Add("amount", CDBField.FieldTypes.cftNumeric)
        .Add("percentage", CDBField.FieldTypes.cftInteger)
        .Add("authorisation_required")
        .Add("authorisation_status")
        .Add("authorised_by")
        .Add("authorised_on", CDBField.FieldTypes.cftDate)
        .Add("posted_on", CDBField.FieldTypes.cftDate)
        .Add("journal_number", CDBField.FieldTypes.cftLong)
        .Add("cheque_produced_on", CDBField.FieldTypes.cftDate)
        .Add("cheque_reference_number", CDBField.FieldTypes.cftLong)
        .Add("payee_contact_number", CDBField.FieldTypes.cftLong)
        .Add("payee_address_number", CDBField.FieldTypes.cftLong)
        .Add("pay_by_bacs")
        .Add("payee_reference")
        .Add("no_payment_required")
        .Add("po_payment_type")
        .Add("separate_payment")
        .Add("nominal_account")
        .Add("distribution_code")
        .Add("expected_receipt")
        .Add("expected_receipt_amount", CDBField.FieldTypes.cftNumeric)
        .Add("expected_receipt_reason")
        .Add("receipt_for_payment_number")
        .Add("adjustment_status")
        .Add("cancellation_reason")
        .Add("cancellation_source")
        .Add("cancelled_by")
        .Add("cancelled_on", CDBField.FieldTypes.cftDate)
        .Add("pop_payment_method")

        .Item(PurchaseOrderPaymentFields.PurchaseOrderNumber).PrimaryKey = True
        .Item(PurchaseOrderPaymentFields.PaymentNumber).PrimaryKey = True

        .Item(PurchaseOrderPaymentFields.PurchaseOrderNumber).PrefixRequired = True
        .Item(PurchaseOrderPaymentFields.Amount).PrefixRequired = True
        .Item(PurchaseOrderPaymentFields.AuthorisedBy).PrefixRequired = True
        .Item(PurchaseOrderPaymentFields.AuthorisedOn).PrefixRequired = True
        .Item(PurchaseOrderPaymentFields.PayeeContactNumber).PrefixRequired = True
        .Item(PurchaseOrderPaymentFields.PayeeAddressNumber).PrefixRequired = True
        .Item(PurchaseOrderPaymentFields.CancellationReason).PrefixRequired = True
        .Item(PurchaseOrderPaymentFields.CancellationSource).PrefixRequired = True
        .Item(PurchaseOrderPaymentFields.CancelledBy).PrefixRequired = True
        .Item(PurchaseOrderPaymentFields.CancelledOn).PrefixRequired = True
        .Item(PurchaseOrderPaymentFields.PopPaymentMethod).PrefixRequired = True

        .Item(PurchaseOrderPaymentFields.PayeeContactNumber).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPOPMultiplePayees)
        .Item(PurchaseOrderPaymentFields.PayeeAddressNumber).InDatabase = .Item(PurchaseOrderPaymentFields.PayeeContactNumber).InDatabase
        .Item(PurchaseOrderPaymentFields.PayByBacs).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPOPPayByBACS)

        Dim vAdHocPayments As Boolean = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbAdHocPurchaseOrderPayments)
        .Item(PurchaseOrderPaymentFields.PayeeReference).InDatabase = vAdHocPayments
        .Item(PurchaseOrderPaymentFields.NoPaymentRequired).InDatabase = vAdHocPayments
        .Item(PurchaseOrderPaymentFields.SeparatePayment).InDatabase = vAdHocPayments
        .Item(PurchaseOrderPaymentFields.PoPaymentType).InDatabase = vAdHocPayments
        .Item(PurchaseOrderPaymentFields.NominalAccount).InDatabase = vAdHocPayments
        .Item(PurchaseOrderPaymentFields.DistributionCode).InDatabase = vAdHocPayments
        .Item(PurchaseOrderPaymentFields.ExpectedReceipt).InDatabase = vAdHocPayments
        .Item(PurchaseOrderPaymentFields.ExpectedReceiptAmount).InDatabase = vAdHocPayments
        .Item(PurchaseOrderPaymentFields.ExpectedReceiptReason).InDatabase = vAdHocPayments
        .Item(PurchaseOrderPaymentFields.ReceiptForPaymentNumber).InDatabase = vAdHocPayments
        .Item(PurchaseOrderPaymentFields.PopPaymentMethod).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPopPaymentMethod)

      End With

    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "pop"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "purchase_order_payments"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property PurchaseOrderNumber() As Integer
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.PurchaseOrderNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PaymentNumber() As Integer
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.PaymentNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PurchaseInvoiceNumber() As Integer
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.PurchaseInvoiceNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property DueDate() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.DueDate).Value
      End Get
    End Property
    Public ReadOnly Property LatestExpectedDate() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.LatestExpectedDate).Value
      End Get
    End Property
    Public ReadOnly Property Amount() As Double
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.Amount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property Percentage() As Integer
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.Percentage).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AuthorisationRequired() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.AuthorisationRequired).Value
      End Get
    End Property
    Public ReadOnly Property AuthorisationStatus() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.AuthorisationStatus).Value
      End Get
    End Property
    Public ReadOnly Property AuthorisedBy() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.AuthorisedBy).Value
      End Get
    End Property
    Public ReadOnly Property AuthorisedOn() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.AuthorisedOn).Value
      End Get
    End Property
    Public ReadOnly Property PostedOn() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.PostedOn).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property JournalNumber() As Integer
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.JournalNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ChequeProducedOn() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.ChequeProducedOn).Value
      End Get
    End Property
    Public ReadOnly Property ChequeReferenceNumber() As Integer
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.ChequeReferenceNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PayeeContactNumber() As Integer
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.PayeeContactNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PayeeAddressNumber() As Integer
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.PayeeAddressNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PayByBacs() As Boolean
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.PayByBacs).Bool
      End Get
    End Property
    Public ReadOnly Property PayeeReference() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.PayeeReference).Value
      End Get
    End Property
    Public ReadOnly Property NoPaymentRequired() As Boolean
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.NoPaymentRequired).Bool
      End Get
    End Property
    Public ReadOnly Property SeparatePayment() As Boolean
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.SeparatePayment).Bool
      End Get
    End Property
    Public ReadOnly Property PoPaymentType() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.PoPaymentType).Value
      End Get
    End Property
    Public ReadOnly Property NominalAccount() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.NominalAccount).Value
      End Get
    End Property
    Public ReadOnly Property DistributionCode() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.DistributionCode).Value
      End Get
    End Property
    Public ReadOnly Property ExpectedReceipt() As Boolean
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.ExpectedReceipt).Bool
      End Get
    End Property
    Public ReadOnly Property ExpectedReceiptAmount() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.ExpectedReceiptAmount).Value
      End Get
    End Property
    Public ReadOnly Property ExpectedReceiptReason() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.ExpectedReceiptReason).Value
      End Get
    End Property
    Public ReadOnly Property AdjustmentStatus() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.AdjustmentStatus).Value
      End Get
    End Property
    Public ReadOnly Property CancellationReason() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.CancellationReason).Value
      End Get
    End Property
    Public ReadOnly Property CancellationSource() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.CancellationSource).Value
      End Get
    End Property
    Public ReadOnly Property CancelledBy() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.CancelledBy).Value
      End Get
    End Property
    Public ReadOnly Property CancelledOn() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.CancelledOn).Value
      End Get
    End Property
    Public ReadOnly Property ReceiptForPaymentNumber() As Integer
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.ReceiptForPaymentNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PopPaymentMethod() As String
      Get
        Return mvClassFields(PurchaseOrderPaymentFields.PopPaymentMethod).Value
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Private mvReadyForPayment As String = ""

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvReadyForPayment = ""
    End Sub

    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      mvClassFields(PurchaseOrderPaymentFields.AuthorisationRequired).Bool = True
      mvClassFields(PurchaseOrderPaymentFields.PayByBacs).Bool = False
      mvClassFields(PurchaseOrderPaymentFields.ExpectedReceipt).Bool = False
      mvClassFields(PurchaseOrderPaymentFields.NoPaymentRequired).Bool = False
      mvClassFields(PurchaseOrderPaymentFields.SeparatePayment).Bool = False
    End Sub

    Protected Overrides Sub SetValid()
      MyBase.SetValid()
      If Percentage = 0 Then mvClassFields.Item(PurchaseOrderPaymentFields.Percentage).Value = ""
    End Sub


    Public Overloads Sub Init(ByVal pPurchaseOrderNumber As Integer, ByVal pPaymentNumber As Integer)
      CheckClassFields()
      Dim vWhereFields As New CDBFields
      vWhereFields.Add(mvClassFields(PurchaseOrderPaymentFields.PurchaseOrderNumber).Name, pPurchaseOrderNumber)
      vWhereFields.Add(mvClassFields(PurchaseOrderPaymentFields.PaymentNumber).Name, pPaymentNumber)
      MyBase.InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Sub InitFromInvoiceNumber(ByVal pPurchaseInvoiceNumber As Integer)
      CheckClassFields()
      Dim vWhereFields As New CDBFields
      vWhereFields.Add(mvClassFields(PurchaseOrderPaymentFields.PurchaseInvoiceNumber).Name, pPurchaseInvoiceNumber)
      MyBase.InitWithPrimaryKey(vWhereFields)
    End Sub

    Public Sub SetPayeeDetails(ByVal pContactNumber As Integer, ByVal pAddressNumber As Integer)
      mvClassFields.Item(PurchaseOrderPaymentFields.PayeeContactNumber).IntegerValue = pContactNumber
      mvClassFields.Item(PurchaseOrderPaymentFields.PayeeAddressNumber).IntegerValue = pAddressNumber
    End Sub

    Public Sub InitFromPO(ByVal pEnv As CDBEnvironment, ByVal pPO As PurchaseOrder, ByVal pDueDate As String, ByVal pLatestDate As String, ByVal pAmount As Double, ByVal pPercentage As Integer, ByVal pAuthorisationRequired As String, ByVal pAuthStatus As String, ByVal pPosted As String, ByVal pPINumber As Integer, ByVal pAuthBy As String, ByVal pAuthOn As String)
      Init()
      mvClassFields(PurchaseOrderPaymentFields.PurchaseOrderNumber).IntegerValue = pPO.PurchaseOrderNumber
      mvClassFields(PurchaseOrderPaymentFields.PaymentNumber).Value = CStr(pPO.Payments.Count() + 1)
      mvClassFields(PurchaseOrderPaymentFields.DueDate).Value = pDueDate
      mvClassFields(PurchaseOrderPaymentFields.LatestExpectedDate).Value = pLatestDate
      mvClassFields(PurchaseOrderPaymentFields.Amount).DoubleValue = pAmount
      mvClassFields(PurchaseOrderPaymentFields.Percentage).IntegerValue = pPercentage
      mvClassFields(PurchaseOrderPaymentFields.AuthorisationRequired).Value = pAuthorisationRequired
      mvClassFields(PurchaseOrderPaymentFields.AuthorisationStatus).Value = pAuthStatus
      mvClassFields(PurchaseOrderPaymentFields.PostedOn).Value = pPosted
      If pPINumber > 0 Then mvClassFields(PurchaseOrderPaymentFields.PurchaseInvoiceNumber).IntegerValue = pPINumber
      mvClassFields(PurchaseOrderPaymentFields.AuthorisedBy).Value = pAuthBy
      mvClassFields(PurchaseOrderPaymentFields.AuthorisedOn).Value = pAuthOn
      mvClassFields(PurchaseOrderPaymentFields.PayeeContactNumber).IntegerValue = pPO.PayeeContactNumber
      mvClassFields(PurchaseOrderPaymentFields.PayeeAddressNumber).IntegerValue = pPO.PayeeAddressNumber
    End Sub

    Public Sub InitReadyForPayment()
      If AuthorisationStatus.Length > 0 Then
        mvReadyForPayment = mvEnv.Connection.GetValue("SELECT ready_for_payment FROM authorisation_statuses WHERE authorisation_status = '" & AuthorisationStatus & "'")
      Else
        mvReadyForPayment = ""
      End If
    End Sub

    Public Function GetDataAsParameters() As CDBParameters
      Dim vParams As New CDBParameters
      For Each vField As ClassField In mvClassFields
        If vField.Name <> "amended_by" And vField.Name <> "amended_on" Then vParams.Add(ProperName((vField.Name)), (vField.FieldType), If(vField.FieldType = CDBField.FieldTypes.cftNumeric, FixedFormat(vField.DoubleValue), vField.Value))
      Next vField
      vParams.Add("ReadyForPayment", CDBField.FieldTypes.cftCharacter, mvReadyForPayment)
      Return vParams
    End Function

    Public Function LineDataType(ByRef pAttributeName As String) As CDBField.FieldTypes
      Select Case pAttributeName
        Case "ReadyForPayment"
          Return CDBField.FieldTypes.cftCharacter
        Case Else
          Return mvClassFields.ItemDataType(pAttributeName)
      End Select
    End Function

    Public WriteOnly Property LineValue(ByVal pAttributeName As String) As String
      Set(ByVal Value As String)
        Select Case pAttributeName
          Case "ReadyForPayment"
            mvReadyForPayment = Value
          Case Else
            mvClassFields.ItemValue(pAttributeName) = Value
        End Select
      End Set
    End Property

    Public Sub Authorise(ByVal pStatus As String)
      'Make sure you only change any classfield value after checking the RegularPayments flag
      Dim vReadyForPayment As Boolean
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPurchaseOrderManagement) Then
        vReadyForPayment = mvEnv.Connection.GetValue("SELECT ready_for_payment FROM authorisation_statuses WHERE authorisation_status = '" & pStatus & "'") = "Y"
      Else
        vReadyForPayment = True
      End If

      If vReadyForPayment = True Then
        Dim vNewPOP As New PurchaseOrderPayment(mvEnv)
        Dim vPO As New PurchaseOrder(mvEnv)
        vPO.Init(PurchaseOrderNumber)
        vPO.InitDetails()
        If vPO.PurchaseOrderType.RegularPayments Then
          vNewPOP.CopyValues(Me, True)
          vPO.AddPayment(vNewPOP) 'Get the new payment number
        End If
        mvClassFields(PurchaseOrderPaymentFields.AuthorisationStatus).Value = pStatus
        mvClassFields(PurchaseOrderPaymentFields.AuthorisedBy).Value = mvEnv.User.UserID
        mvClassFields(PurchaseOrderPaymentFields.AuthorisedOn).Value = TodaysDate()
        Dim vAmount As Double
        If vPO.Existing AndAlso vPO.Details.Count() > 0 Then
          If Percentage > 0 Then
            vAmount = FixTwoPlaces(vPO.Amount * (Percentage / 100))
          Else
            vAmount = Amount
          End If
          Dim vPI As New PurchaseInvoice(mvEnv)
          vPI.InitFromPO(vPO, Me, vAmount)
          mvClassFields(PurchaseOrderPaymentFields.PurchaseInvoiceNumber).IntegerValue = vPI.PurchaseInvoiceNumber
          If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPOPMultiplePayees) Then
            vPI.SetPayeeDetails(PayeeContactNumber, PayeeAddressNumber)
          End If
          Dim vCA As New ContactAccount
          If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataPOPPayByBACS) OrElse _
            mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPopPaymentMethod) Then

            If PayByBacs OrElse PopRequiresBankDetails(PopPaymentMethod) Then
              vCA.InitDefaultAccountByContact(mvEnv, PayeeContactNumber)
              If Not vCA.Existing Then RaiseError(DataAccessErrors.daePOPPayByBacsNoDefaultBankAccount)
              vPI.SetBankDetailsNumber(vCA.BankDetailsNumber)
            End If
            If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPopPaymentMethod) Then vPI.PopPaymentMethod = PopPaymentMethod
          End If

          mvEnv.Connection.StartTransaction()
          Save()
          vPI.Save()
          For Each vPID As PurchaseInvoiceDetail In vPI.Details
            vPID.Save()
          Next vPID
          If vPO.PurchaseOrderType.RegularPayments Then
            vNewPOP.SetRegularPaymentDetails(vPO)
            vNewPOP.Save()
          End If
          vPO.Save()
          For Each vPOD As PurchaseOrderDetail In vPO.Details
            vPOD.Save()
          Next vPOD
          mvEnv.Connection.CommitTransaction()
        End If
      Else
        mvClassFields(PurchaseOrderPaymentFields.AuthorisationStatus).Value = pStatus
        Save()
      End If
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      'When saving a payment we need to make sure that the payment has not exceeded the amount on the purchase order
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbAdHocPurchaseOrderPayments) Then
        Dim vPO As New PurchaseOrder(mvEnv)
        vPO.Init(PurchaseOrderNumber)
        If vPO.PurchaseOrderType.AdHocPayments Then
          If PoPaymentType.Length > 0 Then
            Dim vSQL As New SQLStatement(mvEnv.Connection, "ignore_amount", "po_payment_types", New CDBField("po_payment_type", PoPaymentType))
            If vSQL.GetValue <> "Y" Then
              Dim vWhereFields As New CDBFields
              vWhereFields.Add("pop.purchase_order_number", vPO.PurchaseOrderNumber)
              'BR17873: include purchase order payment reversals -ve amounts
              If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPOPaymentReversals) Then
                vWhereFields.Add("amount", 0, CDBField.FieldWhereOperators.fwoOpenBracket Or CDBField.FieldWhereOperators.fwoGreaterThan)
                vWhereFields.Add("ppr.purchase_order_number", vPO.PurchaseOrderNumber, CDBField.FieldWhereOperators.fwoOR Or CDBField.FieldWhereOperators.fwoCloseBracket)
              Else
                vWhereFields.Add("amount", 0, CDBField.FieldWhereOperators.fwoGreaterThan)
              End If
              vWhereFields.Add("ignore_amount", "N", CDBField.FieldWhereOperators.fwoNullOrEqual)
              '   vWhereFields.Add("adjustment_status", "R", CDBField.FieldWhereOperators.fwoNOT) 'BR17340 exclude reversed records
              If mvExisting Then vWhereFields.Add("pop.payment_number", PaymentNumber, CDBField.FieldWhereOperators.fwoNotEqual)
              Dim vAnsiJoins As New AnsiJoins
              vAnsiJoins.AddLeftOuterJoin("po_payment_types ppt", "pop.po_payment_type", "ppt.po_payment_type")
              If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbPOPaymentReversals) Then
                vAnsiJoins.AddLeftOuterJoin("po_payments_reversals ppr", "pop.purchase_order_number", "ppr.purchase_order_number_rev", "pop.payment_number", "ppr.payment_number_rev")
              End If
              'Get the total of all positive payments, but including negative reversal records, that do not have the ignore flag set
              Dim vTotalSQL As New SQLStatement(mvEnv.Connection, "COALESCE(SUM(amount),0)", Me.DatabaseTableName & " " & Me.TableAlias, vWhereFields, "", vAnsiJoins)
              'Do addition in Decimal to avoid floating point addition errors when adding Doubles
              Dim vTotalSQLValue As String = vTotalSQL.GetValue
              Dim vTotalPreviousPayments As Decimal = Convert.ToDecimal(vTotalSQLValue)
              Dim vTotalAmount As Decimal = vTotalPreviousPayments + Convert.ToDecimal(Amount)
              If vTotalAmount > Convert.ToDecimal(vPO.Amount) Then
                RaiseError(DataAccessErrors.daePOPaymentAmountExceeded)
              End If
            End If
          End If
        End If
      End If
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      If AuthorisedBy.Length > 0 Then
        RaiseError(DataAccessErrors.daeCannotDeleteAuthorisedPayment)
      Else
        Dim vWhereFields As New CDBFields
        vWhereFields.Add(mvClassFields(PurchaseOrderPaymentFields.PurchaseOrderNumber).Name, Me.PurchaseOrderNumber)
        vWhereFields.Add(mvClassFields(PurchaseOrderPaymentFields.ReceiptForPaymentNumber).Name, PaymentNumber)
        If mvEnv.Connection.GetCount(DatabaseTableName, vWhereFields) > 0 Then
          RaiseError(DataAccessErrors.daeCannotDeleteReceiptExists)
        End If
      End If
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
    End Sub
    Private Function PopRequiresBankDetails(ByVal pPaymentMethod As String) As Boolean
      Dim vResult As Boolean
      Dim vWhereClause As New CDBFields
      vWhereClause.Add("pop_payment_method", pPaymentMethod)

      Dim vSqlcommand As New SQLStatement(mvEnv.Connection, "requires_bank_details", "pop_payment_methods", vWhereClause)
      Dim vDataTable As New CDBDataTable
      vDataTable.FillFromSQL(mvEnv, vSqlcommand)

      If vDataTable.Rows.Count > 0 Then
        vResult = If(vDataTable.Rows(0).Item("requires_bank_details") = "Y", True, False)
      End If
      Return vResult
    End Function

    Private Overloads Sub CopyValues(ByVal pRecord As CARERecord, ByVal pClearPaymentNumber As Boolean)
      MyBase.CopyValues(pRecord)
      If pClearPaymentNumber Then mvClassFields.Item(PurchaseOrderPaymentFields.PaymentNumber).Value = ""
    End Sub

    Private Sub SetRegularPaymentDetails(ByVal pPurchaseOrder As PurchaseOrder)
      'Before calling this routine, CopyValues and PurchaseOrder.AddPayment should have been called.
      If pPurchaseOrder.PurchaseOrderType.RegularPayments Then
        mvClassFields(PurchaseOrderPaymentFields.AuthorisationStatus).Value = ""
        Dim vPaymentFrequency As New PaymentFrequency
        vPaymentFrequency.Init(mvEnv, pPurchaseOrder.PaymentFrequency)
        If vPaymentFrequency.Period = PaymentFrequency.PaymentFrequencyPeriods.pfpMonths Then
          mvClassFields(PurchaseOrderPaymentFields.DueDate).Value = DateTime.Parse(DueDate).AddMonths(vPaymentFrequency.Interval).ToString(CAREDateFormat)
          If LatestExpectedDate.Length > 0 Then mvClassFields(PurchaseOrderPaymentFields.LatestExpectedDate).Value = DateTime.Parse(LatestExpectedDate).AddMonths(vPaymentFrequency.Interval).ToString(CAREDateFormat)
        Else
          mvClassFields(PurchaseOrderPaymentFields.DueDate).Value = DateTime.Parse(DueDate).AddDays(vPaymentFrequency.Interval).ToString(CAREDateFormat)
          If LatestExpectedDate.Length > 0 Then mvClassFields(PurchaseOrderPaymentFields.LatestExpectedDate).Value = DateTime.Parse(LatestExpectedDate).AddDays(vPaymentFrequency.Interval).ToString(CAREDateFormat)
        End If
        pPurchaseOrder.UpdateForRegularPayments(Amount)
      End If
    End Sub

    Public Overloads Sub Clone(ByVal pRecord As CARERecord, ByVal pPrimaryKeyValue As Integer)
      'Copy all values from original PurchaseOrderPayment
      MyBase.CopyValues(pRecord)

      'Now set the fields that need to be different
      With mvClassFields
        .Item(PurchaseOrderPaymentFields.PaymentNumber).IntegerValue = pPrimaryKeyValue
        '.Item(PurchaseOrderPaymentFields.Amount).DoubleValue = (.Item(PurchaseOrderPaymentFields.Amount).DoubleValue * -1)    'Make it a negative of the original amount
        .Item(PurchaseOrderPaymentFields.AdjustmentStatus).Value = String.Empty
        .Item(PurchaseOrderPaymentFields.CancellationReason).Value = String.Empty
        .Item(PurchaseOrderPaymentFields.CancellationSource).Value = String.Empty
        .Item(PurchaseOrderPaymentFields.CancelledBy).Value = String.Empty
        .Item(PurchaseOrderPaymentFields.CancelledOn).Value = String.Empty
        .Item(PurchaseOrderPaymentFields.JournalNumber).Value = String.Empty
        .Item(PurchaseOrderPaymentFields.PostedOn).Value = String.Empty
      End With

    End Sub

    Public Overrides Function ToString() As String
      Return PurchaseOrderNumber.ToString & "-" & PaymentNumber.ToString
    End Function

    Public Sub Cancel(ByVal pCancelReason As String, ByVal pCancelBy As String, ByVal pCancelOn As String, ByVal pCancelSource As String, ByVal pAdjustmentStatus As String)
      With mvClassFields
        .Item(PurchaseOrderPaymentFields.CancellationReason).Value = pCancelReason
        .Item(PurchaseOrderPaymentFields.CancelledBy).Value = pCancelBy
        .Item(PurchaseOrderPaymentFields.CancelledOn).Value = pCancelOn
        .Item(PurchaseOrderPaymentFields.CancellationSource).Value = pCancelSource
        .Item(PurchaseOrderPaymentFields.AdjustmentStatus).Value = pAdjustmentStatus
      End With
    End Sub

    Public Sub Reverse(ByVal pParams As CDBParameters, ByRef pPInvoice As PurchaseInvoice)
      Dim vParams As New CDBParameters
      Dim vPInvoiceReversal As PurchaseInvoice = Nothing
      Dim vPOPReversal As PurchaseOrderPayment = Nothing
      Dim vTrans As Boolean = False

      Dim vAdjustmentStatus As String = If(pParams.HasValue("AdjustmentStatus"), pParams("AdjustmentStatus").Value, "R")
      Dim vCancellationReason As String = pParams("CancellationReason").Value
      Dim vCancelledBy As String = If(pParams.HasValue("CancelledBy"), pParams("CancelledBy").Value, mvEnv.User.UserID)
      Dim vCancelledOn As String = If(pParams.HasValue("CancelledOn"), pParams("CancelledOn").Value, TodaysDate)
      Dim vCancellationSource As String = pParams.ParameterExists("CancellationSource").Value

      Dim vChqPayment As New Cheque(mvEnv)
      vChqPayment.Init(pPInvoice.ChequeReferenceNumber)
      Dim vNewChequeReferenceNumber As Integer = vChqPayment.ChequeReferenceNumber

      If pParams("CancelPayment").Bool Then
        'As the payment is being cancelled, also need to cancel all linked payments
        Dim vRelatedPayments As New CollectionList(Of PurchaseOrderPayment)
        Dim vRelatedPOrders As New CollectionList(Of PurchaseOrder)
        Dim vRelatedPInvoices As New CollectionList(Of PurchaseInvoice)
        Dim vNewChqCreated As Boolean = False

        'Get all the linked PurchaseInvoices, PurchaseOrderPayments and PurchaseOrders
        Dim vLinkedPOP As PurchaseOrderPayment
        Dim vLinkedPInvoice As PurchaseInvoice

        vChqPayment.InitPurchaseInvoices()
        vChqPayment.InitPurchaseOrderPayments()
        vRelatedPInvoices = vChqPayment.PurchaseInvoices
        vRelatedPayments = vChqPayment.PurchaseOrderPayments

        For Each vLinkedPInvoice In vRelatedPInvoices
          vLinkedPInvoice.InitDetails()
        Next
        Dim vLinkedPOrder As New PurchaseOrder(mvEnv)
        vLinkedPOrder.Init()

        Dim vAnsiJoins As New AnsiJoins
        vAnsiJoins.Add("purchase_orders po", "pop.purchase_order_number", "po.purchase_order_number")
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vLinkedPOrder.GetRecordSetFields(), "purchase_order_payments pop", New CDBFields(New CDBField("cheque_reference_number", vChqPayment.ChequeReferenceNumber)), "", vAnsiJoins)
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        While vRS.Fetch
          If vRelatedPOrders.ContainsKey(vRS.Fields("purchase_order_number").Value) = False Then
            vLinkedPOrder = New PurchaseOrder(mvEnv)
            vLinkedPOrder.InitFromRecordSet(vRS)
            vLinkedPOrder.InitDetails()
            vRelatedPOrders.Add(vLinkedPOrder.PurchaseOrderNumber.ToString, vLinkedPOrder)
          End If
        End While
        vRS.CloseRecordSet()

        If mvEnv.Connection.InTransaction = False Then
          mvEnv.Connection.StartTransaction()
          vTrans = True
        End If

        For Each vLinkedPOP In vRelatedPayments
          'Cancel the payment record
          vLinkedPOP.Cancel(vCancellationReason, vCancelledBy, vCancelledOn, vCancellationSource, vAdjustmentStatus)
          vLinkedPOP.Save(mvEnv.User.UserID, True)

          'Update Balance on PurchaseOrder & PurchaseOrderDetails
          vLinkedPOrder = vRelatedPOrders.Item(vLinkedPOP.PurchaseOrderNumber.ToString)
          vLinkedPInvoice = vRelatedPInvoices.Item(vLinkedPOP.PurchaseInvoiceNumber.ToString)

          vParams.Clear()
          vParams.Add("Balance", FixTwoPlaces(vLinkedPOrder.Balance + vLinkedPOP.Amount)) 'increase balance of PO by amount of the POP
          vLinkedPOrder.Update(vParams)
          For Each vPOD As PurchaseOrderDetail In vLinkedPOrder.Details
            For Each vPID As PurchaseInvoiceDetail In vLinkedPInvoice.Details
              If vPOD.LineNumber = vPID.LineNumber Then
                vParams("Balance").Value = FixTwoPlaces(vPOD.Balance + vPID.Amount).ToString
                vPOD.Update(vParams)
                vPOD.Save(mvEnv.User.UserID, True)
              End If
            Next
          Next
          vLinkedPOrder.Save(mvEnv.User.UserID, True)

          'Cancel PurchaseInvoice
          If Not (vLinkedPInvoice.PurchaseInvoiceNumber = Me.PurchaseInvoiceNumber) Then
            vLinkedPInvoice.CancelWithDetails(vCancellationReason, vCancelledBy, vCancelledOn, vCancellationSource, vAdjustmentStatus)
            For Each vPID As PurchaseInvoiceDetail In vLinkedPInvoice.Details
              vPID.Save(mvEnv.User.UserID, True)
            Next
            vLinkedPInvoice.Save(mvEnv.User.UserID, True)
          End If

          'Cancel Payment
          vChqPayment.Cancel(vCancellationReason, vCancelledBy, vCancelledOn, vCancellationSource, vAdjustmentStatus)
          vChqPayment.Save(mvEnv.User.UserID, True)

          'Create a new payment (only the 1!!)
          If vNewChqCreated = False Then
            Dim vChqReversal As New Cheque(mvEnv)
            vChqReversal.Clone(vChqPayment)
            vChqReversal.Save(mvEnv.User.UserID, True)
            vNewChqCreated = True
            vNewChequeReferenceNumber = vChqReversal.ChequeReferenceNumber
          End If

          vParams.Clear()
          vParams.Add("ChequeReferenceNumber", vNewChequeReferenceNumber)

          'Create new PurchaseInvoice
          If Not (vLinkedPInvoice.PurchaseInvoiceNumber = Me.PurchaseInvoiceNumber) Then
            'This record will be dealt with later, so just do any others
            vParams.Add("PurchaseInvoiceDate", CDBField.FieldTypes.cftDate, vCancelledOn)
            vParams.Add("Amount", CDBField.FieldTypes.cftNumeric, (vLinkedPInvoice.Amount * -1).ToString("F"))
            vParams.Add("LinePrice", CDBField.FieldTypes.cftNumeric)
            vParams.Add("Quantity", CDBField.FieldTypes.cftInteger)
            vPInvoiceReversal = New PurchaseInvoice(mvEnv)
            vPInvoiceReversal.CloneWithDetails(vLinkedPInvoice, vParams)

            For Each vPID As PurchaseInvoiceDetail In vPInvoiceReversal.Details
              vPID.Save(mvEnv.User.UserID, True)
            Next
            vPInvoiceReversal.Save(mvEnv.User.UserID, True)
            vParams.Add("PurchseInvoiceNumber", vPInvoiceReversal.PurchaseInvoiceNumber)
          End If

          'Create new PurchaseOrderPayment, PurchaseInvoice, PurchaseInvoiceDetails, Cheques
          If Not (vLinkedPOP.PurchaseOrderNumber = Me.PurchaseOrderNumber AndAlso vLinkedPOP.PaymentNumber = Me.PaymentNumber) Then
            'This record will be dealt with later, so just do any others
            vParams.Add("DueDate", CDBField.FieldTypes.cftDate, vCancelledOn)
            vParams.Add("LatestExpectedDate", CDBField.FieldTypes.cftDate, vCancelledOn)
            If vParams.Exists("Amount") = False Then vParams.Add("Amount", CDBField.FieldTypes.cftNumeric)
            vParams("Amount").Value = FixTwoPlaces(vLinkedPOP.Amount * -1).ToString("F")
            vPOPReversal = New PurchaseOrderPayment(mvEnv)
            vPOPReversal.Clone(vLinkedPOP, vLinkedPOP.GetNextPaymentNumber)
            vPOPReversal.Update(vParams)
            vPOPReversal.Save(mvEnv.User.UserID, True)
          End If

          'Add POPaymentReversal
          If Not (vLinkedPOP.PurchaseOrderNumber = Me.PurchaseOrderNumber AndAlso vLinkedPOP.PaymentNumber = Me.PaymentNumber AndAlso vLinkedPOP.PurchaseInvoiceNumber = Me.PurchaseInvoiceNumber) Then
            vParams.Clear()
            With vParams
              'Original details
              .Add("PurchaseOrderNumber", vLinkedPOP.PurchaseOrderNumber)
              .Add("PurchaseInvoiceNumber", vLinkedPOP.PurchaseInvoiceNumber)
              .Add("PaymentNumber", vLinkedPOP.PaymentNumber)
              .Add("ChequeReferenceNumber", vChqPayment.ChequeReferenceNumber)
              'New details
              .Add("PurchaseOrderNumberRev", vPOPReversal.PurchaseOrderNumber)
              .Add("PurchaseInvoiceNumberRev", vPOPReversal.PurchaseInvoiceNumber)
              .Add("PaymentNumberRev", vPOPReversal.PaymentNumber)
              .Add("ChequeReferenceNumberRev", vPOPReversal.ChequeReferenceNumber)
            End With
            Dim vReversals As New PoPaymentsReversal(mvEnv)
            vReversals.Create(vParams)
            vReversals.Save(mvEnv.User.UserID, True)
          End If
        Next
      End If

      'Now handle everything for this actual payment
      If mvEnv.Connection.InTransaction = False Then
        'If we are not already in a transaction (which may have been started above) then start it now
        mvEnv.Connection.StartTransaction()
        vTrans = True
      End If

      vParams.Clear()
      vParams.Add("DueDate", CDBField.FieldTypes.cftDate)
      vParams("DueDate").Value = If(pParams.HasValue("DueDate"), pParams("DueDate").Value, vCancelledOn)
      vParams.Add("LatestExpectedDate", CDBField.FieldTypes.cftDate)
      vParams("LatestExpectedDate").Value = If(pParams.HasValue("LatestExpectedDate"), pParams("LatestExpectedDate").Value, vParams("DueDate").Value)
      vParams.Add("ChequeReferenceNumber", vNewChequeReferenceNumber)
      vParams.Add("PurchaseInvoiceDate", CDBField.FieldTypes.cftDate, vParams("DueDate").Value)

      'Cancel PurchaseInvoice
      pPInvoice.CancelWithDetails(vCancellationReason, vCancelledBy, vCancelledOn, vCancellationSource, vAdjustmentStatus)
      For Each vPID As PurchaseInvoiceDetail In pPInvoice.Details
        vPID.Save(mvEnv.User.UserID, True)
      Next
      pPInvoice.Save(mvEnv.User.UserID, True)

      'Cancel PurchaseOrderPayment
      Me.Cancel(vCancellationReason, vCancelledBy, vCancelledOn, vCancellationSource, vAdjustmentStatus)
      Me.Save(mvEnv.User.UserID, True)

      'Create new PurchaseInvoice for reversal
      vParams.Add("Amount", CDBField.FieldTypes.cftNumeric, FixTwoPlaces(pPInvoice.Amount * -1).ToString("F"))
      vParams.Add("LinePrice", CDBField.FieldTypes.cftNumeric)
      vParams.Add("Quantity", CDBField.FieldTypes.cftInteger)
      vPInvoiceReversal = New PurchaseInvoice(mvEnv)
      vPInvoiceReversal.CloneWithDetails(pPInvoice, vParams)
      For Each vPID As PurchaseInvoiceDetail In vPInvoiceReversal.Details
        vPID.Save(mvEnv.User.UserID, True)
      Next
      vPInvoiceReversal.Save(mvEnv.User.UserID, True)

      'Create new PurchaseOrderPayment for reversal
      vPOPReversal = New PurchaseOrderPayment(mvEnv)
      vPOPReversal.Clone(Me, Me.GetNextPaymentNumber)
      vParams("Amount").Value = FixTwoPlaces(Me.Amount * -1).ToString("F")
      vParams.Add("PurchaseInvoiceNumber", vPInvoiceReversal.PurchaseInvoiceNumber)
      vPOPReversal.Update(vParams)
      vPOPReversal.Save(mvEnv.User.UserID, True)

      'Add POPaymentReversal
      vParams.Clear()
      With vParams
        'Original details
        .Add("PurchaseOrderNumber", Me.PurchaseOrderNumber)
        .Add("PurchaseInvoiceNumber", Me.PurchaseInvoiceNumber)
        .Add("PaymentNumber", Me.PaymentNumber)
        .Add("ChequeReferenceNumber", vChqPayment.ChequeReferenceNumber)
        'New details
        .Add("PurchaseOrderNumberRev", vPOPReversal.PurchaseOrderNumber)
        .Add("PurchaseInvoiceNumberRev", vPOPReversal.PurchaseInvoiceNumber)
        .Add("PaymentNumberRev", vPOPReversal.PaymentNumber)
        .Add("ChequeReferenceNumberRev", vPOPReversal.ChequeReferenceNumber)
      End With
      Dim vPOPayReversals As New PoPaymentsReversal(mvEnv)
      vPOPayReversals.Create(vParams)
      vPOPayReversals.Save(mvEnv.User.UserID, True)

      If vTrans Then mvEnv.Connection.CommitTransaction()

    End Sub

    Public Function GetNextPaymentNumber() As Integer
      Dim vSQL As New SQLStatement(mvEnv.Connection, "MAX(payment_number)", "purchase_order_payments", New CDBField("purchase_order_number", PurchaseOrderNumber))
      Dim vNextPaymentNumber As Integer = vSQL.GetIntegerValue + 1
      Return vNextPaymentNumber
    End Function

#End Region

  End Class
End Namespace
