Imports System.Linq
Namespace Access

  Partial Public Class BatchTransactionAnalysis
    Inherits CARERecord

    Private mvDeclarationLineUnclaimed As DeclarationLinesUnclaimed
    Private mvDeclarationLineClaimed As DeclarationTaxClaimLine
    Private mvPaymentPlan As PaymentPlan
    Private mvFHDLines As IList(Of FinancialHistoryDetail)
    Private mvReversal As Reversal
    Private mvContactNumberList As List(Of Integer)

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum BatchTransactionAnalysisFields
      AllFields = 0
      BatchNumber
      TransactionNumber
      LineNumber
      LineType
      Product
      Rate
      Quantity
      Issued
      GrossAmount
      Amount
      CurrencyAmount
      Discount
      VatRate
      VatAmount
      CurrencyVatAmount
      PaymentPlanNumber
      MemberNumber
      CovenantNumber
      DeceasedContactNumber
      AcceptAsFull
      DespatchMethod
      Source
      WhenField
      ContactNumber
      AddressNumber
      Notes
      DistributionCode
      SalesContactNumber
      InvoiceNumber
      ProductNumber
      Warehouse
      CashInvoiceNumber
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("batch_number", CDBField.FieldTypes.cftLong)
        .Add("transaction_number", CDBField.FieldTypes.cftInteger)
        .Add("line_number", CDBField.FieldTypes.cftInteger)
        .Add("line_type")
        .Add("product")
        .Add("rate")
        .Add("quantity", CDBField.FieldTypes.cftInteger)
        .Add("issued", CDBField.FieldTypes.cftInteger)
        .Add("gross_amount", CDBField.FieldTypes.cftNumeric)
        .Add("amount", CDBField.FieldTypes.cftNumeric)
        .Add("currency_amount", CDBField.FieldTypes.cftNumeric)
        .Add("discount", CDBField.FieldTypes.cftNumeric)
        .Add("vat_rate")
        .Add("vat_amount", CDBField.FieldTypes.cftNumeric)
        .Add("currency_vat_amount", CDBField.FieldTypes.cftNumeric)
        .Add("order_number", CDBField.FieldTypes.cftLong)
        .Add("member_number")
        .Add("covenant_number", CDBField.FieldTypes.cftLong)
        .Add("deceased_contact_number", CDBField.FieldTypes.cftLong)
        .Add("accept_as_full")
        .Add("despatch_method")
        .Add("source")
        .Add("when", CDBField.FieldTypes.cftDate)
        .Add("contact_number", CDBField.FieldTypes.cftLong)
        .Add("address_number", CDBField.FieldTypes.cftLong)
        .Add("notes", CDBField.FieldTypes.cftMemo)
        .Add("distribution_code")
        .Add("sales_contact_number", CDBField.FieldTypes.cftLong)
        .Add("invoice_number", CDBField.FieldTypes.cftLong)
        .Add("product_number", CDBField.FieldTypes.cftLong)
        .Add("warehouse")
        .Add("cash_invoice_number", CDBField.FieldTypes.cftInteger).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbInvoiceAdjustmentStatus)

        mvClassFields.Item(BatchTransactionAnalysisFields.BatchNumber).PrimaryKey = True
        mvClassFields.Item(BatchTransactionAnalysisFields.TransactionNumber).PrimaryKey = True
        mvClassFields.Item(BatchTransactionAnalysisFields.LineNumber).PrimaryKey = True

        mvClassFields.Item(BatchTransactionAnalysisFields.BatchNumber).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.TransactionNumber).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.ContactNumber).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.AddressNumber).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.Product).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.Rate).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.Amount).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.CurrencyAmount).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.Source).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.Notes).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.DistributionCode).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.Quantity).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.PaymentPlanNumber).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.DespatchMethod).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.ProductNumber).PrefixRequired = True

        mvClassFields.Item(BatchTransactionAnalysisFields.GrossAmount).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.VatAmount).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.VatRate).PrefixRequired = True
        mvClassFields.Item(BatchTransactionAnalysisFields.CashInvoiceNumber).PrefixRequired = True

        mvClassFields.Item(BatchTransactionAnalysisFields.WhenField).SpecialColumn = True

      End With
    End Sub

    Public Property UnclaimedGiftAidClaim As DeclarationLinesUnclaimed
      Get
        If mvDeclarationLineUnclaimed Is Nothing Then Me.UnclaimedGiftAidClaim = GetGADUnclaimedInstance()
        Return mvDeclarationLineUnclaimed
      End Get
      Private Set(value As DeclarationLinesUnclaimed)
        mvDeclarationLineUnclaimed = value
      End Set
    End Property

    Private Function GetGADUnclaimedInstance() As DeclarationLinesUnclaimed
      Dim vResult As DeclarationLinesUnclaimed = Nothing

      Dim vTest As DeclarationLinesUnclaimed = Me.GetRelatedInstance(Of DeclarationLinesUnclaimed)(New List(Of Integer)({BatchTransactionAnalysisFields.BatchNumber,
                                                BatchTransactionAnalysisFields.TransactionNumber,
                                                BatchTransactionAnalysisFields.LineNumber}))

      If vTest IsNot Nothing AndAlso vTest.Existing Then
        Dim vTestList As New List(Of DeclarationLinesUnclaimed)((From vDLU In New List(Of DeclarationLinesUnclaimed)({vTest})
                                                                 Where vDLU IsNot Nothing _
                                                                  AndAlso vDLU.Existing _
                                                                   AndAlso ContactNumberList.Contains(vDLU.ContactNumber)
                                                                 Select vDLU).ToList())
        If vTestList.Count = 0 Then
          'If BTA Contact or Individuals within Joint not linked to DLU Contact raise error
          RaiseError(DataAccessErrors.daeDeclarationLinesUnclaimedContactError, Me.BatchNumber.ToString, Me.TransactionNumber.ToString, Me.LineNumber.ToString, Me.ContactNumber.ToString) 'The Declaration Lines Unclaimed Contact Number does not match Batch Transaction Analysis %1/%2/%3 Contact Number %4.
        End If
        vResult = vTest
      ElseIf Me.EligibleForGiftAid Then
        vTest = New DeclarationLinesUnclaimed(Me.Environment)
        vTest.Create(CreateParams(New List(Of Integer)({BatchTransactionAnalysisFields.BatchNumber,
                                                BatchTransactionAnalysisFields.TransactionNumber,
                                                BatchTransactionAnalysisFields.LineNumber,
                                                BatchTransactionAnalysisFields.ContactNumber})))

        If vTest.GiftAidDeclaration IsNot Nothing AndAlso vTest.FinancialHistoryDetailLines IsNot Nothing Then
          vResult = vTest
        End If
      End If
      Return vResult
    End Function

    Private Property ContactNumberList() As List(Of Integer)
      Get
        If mvContactNumberList Is Nothing Then
          'initialise list of contacts
          Dim vContactNumberList As New List(Of Integer)
          If Me.ContactNumber > 0 Then
            vContactNumberList.Add(Me.ContactNumber)
            'Check if joint contact and if joint add individuals of the joint to list
            Dim vContact As New Contact(Me.Environment)
            vContact.Init(Me.ContactNumber)
            If vContact.Existing AndAlso vContact.ContactType = Contact.ContactTypes.ctcJoint Then
              For Each vContactLink As ContactLink In vContact.GetJointLinks(True)
                vContactNumberList.Add(vContactLink.ContactNumber2)
              Next vContactLink
            End If
          End If
          Me.ContactNumberList = vContactNumberList
        End If
        Return mvContactNumberList
      End Get
      Set(value As List(Of Integer))
        mvContactNumberList = value
      End Set
    End Property

    Public Property ClaimedGiftAidClaim As DeclarationTaxClaimLine
      Get
        If mvDeclarationLineClaimed Is Nothing Then Me.ClaimedGiftAidClaim = GetGADClaimedInstance()
        Return mvDeclarationLineClaimed
      End Get
      Private Set(value As DeclarationTaxClaimLine)
        mvDeclarationLineClaimed = value
      End Set
    End Property
    Private Function GetGADClaimedInstance() As DeclarationTaxClaimLine
      Dim vResult As DeclarationTaxClaimLine = Nothing
      Dim vFields As CDBFields = Me.CreateWhere(New List(Of Integer)({BatchTransactionAnalysisFields.BatchNumber,
                                                                        BatchTransactionAnalysisFields.TransactionNumber,
                                                                        BatchTransactionAnalysisFields.LineNumber}))
      Dim vTest As New DeclarationTaxClaimLine(Me.Environment)
      vTest.InitWithPrimaryKey(vFields)
      If vTest.Existing Then vResult = vTest
      Return vResult
    End Function

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "bta"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "batch_transaction_analysis"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property BatchNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.BatchNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property TransactionNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.TransactionNumber).IntegerValue
      End Get
    End Property
    Public Property LineNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.LineNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionAnalysisFields.LineNumber).IntegerValue = value
      End Set
    End Property
    Public Property LineType() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.LineType).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionAnalysisFields.LineType).Value = value
      End Set
    End Property
    Public Property ProductCode() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.Product).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionAnalysisFields.Product).Value = value
      End Set
    End Property
    Public Property RateCode() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.Rate).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionAnalysisFields.Rate).Value = value
      End Set
    End Property
    Public Property Quantity() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.Quantity).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionAnalysisFields.Quantity).IntegerValue = value
      End Set
    End Property
    Public Property Issued() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.Issued).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionAnalysisFields.Issued).IntegerValue = value
      End Set
    End Property

    Public ReadOnly Property IssuedSet As Boolean
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.Issued).Value.Length > 0
      End Get
    End Property

    Public Property GrossAmount() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.GrossAmount).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionAnalysisFields.GrossAmount).Value = value
      End Set
    End Property
    Public Property Amount() As Double
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.Amount).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(BatchTransactionAnalysisFields.Amount).DoubleValue = value
      End Set
    End Property
    Public Property CurrencyAmount() As Double
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.CurrencyAmount).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(BatchTransactionAnalysisFields.CurrencyAmount).DoubleValue = value
      End Set
    End Property
    Public Property Discount() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.Discount).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionAnalysisFields.Discount).Value = value
      End Set
    End Property
    Public Property VatRate() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.VatRate).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionAnalysisFields.VatRate).Value = value
      End Set
    End Property
    Public Property VatAmount() As Double
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.VatAmount).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(BatchTransactionAnalysisFields.VatAmount).DoubleValue = value
      End Set
    End Property
    Public Property CurrencyVatAmount() As Double
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.CurrencyVatAmount).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(BatchTransactionAnalysisFields.CurrencyVatAmount).DoubleValue = value
      End Set
    End Property
    Public Property PaymentPlanNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.PaymentPlanNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionAnalysisFields.PaymentPlanNumber).IntegerValue = value
      End Set
    End Property
    Public Property MemberNumber() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.MemberNumber).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionAnalysisFields.MemberNumber).Value = value
      End Set
    End Property
    Public Property CovenantNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.CovenantNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionAnalysisFields.CovenantNumber).IntegerValue = value
      End Set
    End Property
    Public Property DeceasedContactNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.DeceasedContactNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionAnalysisFields.DeceasedContactNumber).IntegerValue = value
      End Set
    End Property
    Public Property AcceptAsFull() As Boolean
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.AcceptAsFull).Bool
      End Get
      Set(ByVal value As Boolean)
        mvClassFields(BatchTransactionAnalysisFields.AcceptAsFull).Bool = value
      End Set
    End Property
    Public Property DespatchMethod() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.DespatchMethod).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionAnalysisFields.DespatchMethod).Value = value
      End Set
    End Property
    Public Property Source() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.Source).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionAnalysisFields.Source).Value = value
      End Set
    End Property
    Public Property WhenValue() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.WhenField).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionAnalysisFields.WhenField).Value = value
      End Set
    End Property
    Public Property ContactNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.ContactNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionAnalysisFields.ContactNumber).IntegerValue = value
      End Set
    End Property
    Public Property AddressNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.AddressNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionAnalysisFields.AddressNumber).IntegerValue = value
      End Set
    End Property
    Public Property Notes() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.Notes).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionAnalysisFields.Notes).Value = value
      End Set
    End Property
    Public Property DistributionCode() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.DistributionCode).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(BatchTransactionAnalysisFields.DistributionCode).Value = value
      End Set
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.AmendedOn).Value
      End Get
    End Property
    Public Property SalesContactNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.SalesContactNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        If value > 0 Then
          mvClassFields(BatchTransactionAnalysisFields.SalesContactNumber).IntegerValue = value
        Else
          mvClassFields(BatchTransactionAnalysisFields.SalesContactNumber).Value = ""
        End If
      End Set
    End Property
    Public Property InvoiceNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.InvoiceNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionAnalysisFields.InvoiceNumber).IntegerValue = value
      End Set
    End Property
    Public Property ProductNumber() As Integer
      Get
        Return mvClassFields(BatchTransactionAnalysisFields.ProductNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(BatchTransactionAnalysisFields.ProductNumber).IntegerValue = value
      End Set
    End Property

    Public Property Warehouse() As String
      Get
        Dim vRS As CDBRecordSet
        Dim vBatchType As String = ""
        Dim vSQL As String
        Dim vWarehouse As String = mvClassFields(BatchTransactionAnalysisFields.Warehouse).Value
        If vWarehouse.Length = 0 Then
          'Get warehouse value from latest stock movement record
          If Product.StockItem = True Then
            If mvEnv.GetConfigOption("fp_stock_multiple_warehouses") = True Then
              vRS = mvEnv.Connection.GetRecordSet("SELECT warehouse FROM stock_movements WHERE batch_number = " & BatchNumber & " AND transaction_number = " & TransactionNumber & " AND line_number = " & LineNumber & " AND movement_quantity < 1 ORDER BY stock_movement_number DESC")
              If vRS.Fetch Then vWarehouse = vRS.Fields("warehouse").Value
              vRS.CloseRecordSet()

              If vWarehouse.Length = 0 Then
                vRS = mvEnv.Connection.GetRecordSet("SELECT batch_type FROM batches WHERE batch_number = " & BatchNumber)
                If vRS.Fetch Then vBatchType = vRS.Fields("batch_type").Value
                vRS.CloseRecordSet()
                If vBatchType.Length > 0 Then
                  If Batch.GetBatchType(vBatchType) <> Batch.BatchTypes.Cash And Batch.GetBatchType(vBatchType) <> Batch.BatchTypes.CashWithInvoice And Batch.GetBatchType(vBatchType) <> Batch.BatchTypes.FinancialAdjustment Then
                    'May be a back orders batch (CA & FA become BO so can exclude them)
                    vSQL = "SELECT st.warehouse FROM despatch_notes dn, issued_stock st WHERE dn.batch_number = " & BatchNumber
                    vSQL = vSQL & " AND dn.transaction_number = " & TransactionNumber & " AND st.picking_list_number = dn.picking_list_number"
                    vSQL = vSQL & " AND st.despatch_note_number = dn.despatch_note_number AND st.product = '" & Product.ProductCode & "'"
                    vRS = mvEnv.Connection.GetRecordSet(vSQL)
                    If vRS.Fetch Then vWarehouse = vRS.Fields("warehouse").Value
                    vRS.CloseRecordSet()
                  End If
                End If
              End If
            Else
              vWarehouse = Product.Warehouse
            End If
          End If
        End If
        Warehouse = vWarehouse
      End Get
      Set(ByVal Value As String)
        mvClassFields(BatchTransactionAnalysisFields.Warehouse).Value = Value
      End Set
    End Property

    Public ReadOnly Property CashInvoiceNumber As Integer
      Get
        Return mvClassFields.Item(BatchTransactionAnalysisFields.CashInvoiceNumber).IntegerValue
      End Get
    End Property

#End Region

#Region "Non-AutoGenerated Code"

    Private mvBatchTransaction As BatchTransaction
    Private mvLinkedBookingNo As Integer
    Private mvProduct As Product
    Private mvSchPaymentNumber As String 'Set as String as it could be null
    Private mvAdditionalNumber As Integer
    Private mvAdditionalNumber2 As Integer
    Private mvAdditionalNumber3 As Integer
    Private mvAdditionalType As TransactionAnalysisAdditionalTypes
    Private mvTransContainsEventBooking As Boolean
    Private mvProcessed As Boolean
    Private mvWriteOffLineAmount As Double
    Private mvOrderPaymentHistory As OrderPaymentHistory = Nothing

    Protected Overrides Sub ClearFields()
      mvLinkedBookingNo = 0
      mvProduct = Nothing
      mvSchPaymentNumber = ""
      mvAdditionalNumber = 0
      mvAdditionalNumber2 = 0
      mvAdditionalNumber3 = 0
      mvAdditionalType = TransactionAnalysisAdditionalTypes.taatNotSet
      mvTransContainsEventBooking = False
      mvProcessed = False
    End Sub

    Public Overloads Sub Init(ByVal pBatchNumber As Integer, ByVal pTransactionNumber As Integer, ByVal pLineNumber As Integer)
      If pBatchNumber > 0 AndAlso pTransactionNumber > 0 Then
        Init()
        Dim vWhereFields As New CDBFields
        vWhereFields.Add(mvClassFields(BatchTransactionAnalysisFields.BatchNumber).Name, pBatchNumber)
        vWhereFields.Add(mvClassFields(BatchTransactionAnalysisFields.TransactionNumber).Name, pTransactionNumber)
        vWhereFields.Add(mvClassFields(BatchTransactionAnalysisFields.LineNumber).Name, pLineNumber)
        InitWithPrimaryKey(vWhereFields)
      Else
        Init()
      End If
    End Sub

    Public Overloads Sub InitClassFields()
      MyBase.InitClassFields()
      Me.UnclaimedGiftAidClaim = Nothing
      Me.ClaimedGiftAidClaim = Nothing
      Me.FinancialHistoryDetailLines = Nothing
      Me.Reversal = Nothing
      Me.PaymentPlan = Nothing
    End Sub

    Public Sub ClearContactAndAddressNumbers()
      mvClassFields(BatchTransactionAnalysisFields.ContactNumber).Value = String.Empty
      mvClassFields(BatchTransactionAnalysisFields.AddressNumber).Value = String.Empty
    End Sub

    Public Sub InitFromTransaction(ByVal pBatchTransaction As BatchTransaction, Optional ByVal pLineNumber As Integer = 0, Optional ByVal pSetContactAndAddress As Boolean = True)
      Dim vLineNumber As Integer

      Me.BatchTransaction = pBatchTransaction
      Init()
      With Me.BatchTransaction
        mvClassFields.Item(BatchTransactionAnalysisFields.BatchNumber).IntegerValue = .BatchNumber
        mvClassFields.Item(BatchTransactionAnalysisFields.TransactionNumber).IntegerValue = .TransactionNumber
        If pSetContactAndAddress Then
          If .ContactNumber > 0 Then mvClassFields.Item(BatchTransactionAnalysisFields.ContactNumber).IntegerValue = .ContactNumber
          If .AddressNumber > 0 Then mvClassFields.Item(BatchTransactionAnalysisFields.AddressNumber).IntegerValue = .AddressNumber
        End If
        If pLineNumber = 0 Then
          vLineNumber = .NextLineNumber
          mvClassFields.Item(BatchTransactionAnalysisFields.LineNumber).IntegerValue = vLineNumber
          .NextLineNumber = vLineNumber + 1
        Else
          mvClassFields.Item(BatchTransactionAnalysisFields.LineNumber).IntegerValue = pLineNumber
          If pLineNumber > .NextLineNumber Then .NextLineNumber = pLineNumber
        End If
      End With
    End Sub

    Public Sub CloneFromBTA(ByVal pBTA As BatchTransactionAnalysis)
      'Set all Values apart from Batch, Transaction & Line Number to that of existing BTA

      With mvClassFields
        .Item(BatchTransactionAnalysisFields.LineType).Value = pBTA.LineType
        .Item(BatchTransactionAnalysisFields.Product).Value = pBTA.ProductCode
        .Item(BatchTransactionAnalysisFields.Rate).Value = pBTA.RateCode
        .Item(BatchTransactionAnalysisFields.DistributionCode).Value = pBTA.DistributionCode
        .Item(BatchTransactionAnalysisFields.Quantity).IntegerValue = pBTA.Quantity
        If pBTA.IssuedSet Then
          .Item(BatchTransactionAnalysisFields.Issued).IntegerValue = pBTA.Issued
        Else
          .Item(BatchTransactionAnalysisFields.Issued).Value = ""
        End If
        If pBTA.GrossAmount.Length > 0 Then .Item(BatchTransactionAnalysisFields.GrossAmount).DoubleValue = DoubleValue(pBTA.GrossAmount)
        .Item(BatchTransactionAnalysisFields.Amount).DoubleValue = pBTA.Amount
        .Item(BatchTransactionAnalysisFields.CurrencyAmount).DoubleValue = pBTA.CurrencyAmount
        If pBTA.Discount.Length > 0 Then .Item(BatchTransactionAnalysisFields.Discount).DoubleValue = DoubleValue(pBTA.Discount)
        .Item(BatchTransactionAnalysisFields.VatRate).Value = pBTA.VatRate
        .Item(BatchTransactionAnalysisFields.VatAmount).DoubleValue = pBTA.VatAmount
        .Item(BatchTransactionAnalysisFields.CurrencyVatAmount).DoubleValue = pBTA.CurrencyVatAmount
        If pBTA.PaymentPlanNumber <> 0 Then .Item(BatchTransactionAnalysisFields.PaymentPlanNumber).IntegerValue = pBTA.PaymentPlanNumber
        .Item(BatchTransactionAnalysisFields.MemberNumber).Value = pBTA.MemberNumber
        If pBTA.CovenantNumber <> 0 Then .Item(BatchTransactionAnalysisFields.CovenantNumber).IntegerValue = pBTA.CovenantNumber
        If pBTA.DeceasedContactNumber <> 0 Then .Item(BatchTransactionAnalysisFields.DeceasedContactNumber).IntegerValue = pBTA.DeceasedContactNumber
        If pBTA.AcceptAsFull = True Then .Item(BatchTransactionAnalysisFields.AcceptAsFull).Value = "Y"
        .Item(BatchTransactionAnalysisFields.DespatchMethod).Value = pBTA.DespatchMethod
        .Item(BatchTransactionAnalysisFields.Source).Value = pBTA.Source
        .Item(BatchTransactionAnalysisFields.WhenField).Value = pBTA.WhenValue
        If pBTA.ContactNumber <> 0 Then .Item(BatchTransactionAnalysisFields.ContactNumber).IntegerValue = pBTA.ContactNumber
        If pBTA.AddressNumber <> 0 Then .Item(BatchTransactionAnalysisFields.AddressNumber).IntegerValue = pBTA.AddressNumber
        .Item(BatchTransactionAnalysisFields.Notes).Value = pBTA.Notes
        If pBTA.SalesContactNumber <> 0 Then .Item(BatchTransactionAnalysisFields.SalesContactNumber).IntegerValue = pBTA.SalesContactNumber
        If pBTA.InvoiceNumber <> 0 Then .Item(BatchTransactionAnalysisFields.InvoiceNumber).IntegerValue = pBTA.InvoiceNumber
        If pBTA.ProductNumber <> 0 Then .Item(BatchTransactionAnalysisFields.ProductNumber).IntegerValue = pBTA.ProductNumber
        If .Item(BatchTransactionAnalysisFields.Warehouse).InDatabase Then .Item(BatchTransactionAnalysisFields.Warehouse).Value = pBTA.Warehouse
        If .Item(BatchTransactionAnalysisFields.CashInvoiceNumber).InDatabase = True AndAlso pBTA.CashInvoiceNumber > 0 Then .Item(BatchTransactionAnalysisFields.CashInvoiceNumber).IntegerValue = pBTA.CashInvoiceNumber
      End With
    End Sub

    Public Property LinkedBookingNo() As Integer
      Get
        Return mvLinkedBookingNo
      End Get
      Set(ByVal Value As Integer)
        mvLinkedBookingNo = Value
      End Set
    End Property

    Public Property WriteOffLineAmount() As Double
      Get
        Return mvWriteOffLineAmount
      End Get
      Set(ByVal Value As Double)
        mvWriteOffLineAmount = Value
      End Set
    End Property

    Public ReadOnly Property OrderPaymentHistory() As OrderPaymentHistory
      Get
        If mvOrderPaymentHistory Is Nothing Then InitOrderPaymentHistory()
        Return mvOrderPaymentHistory
      End Get
    End Property

    Public Overloads Sub Save()
      Save("")
    End Sub
    Public Overloads Sub Save(ByVal pAmendedBy As String)
      If mvExisting Then
        MyBase.Save(pAmendedBy)
      Else
        If UpdateTransactionAmountOnSave Then
          With Me.BatchTransaction
            .Amount = .Amount + ClassFields(BatchTransactionAnalysisFields.Amount).DoubleValue
            If ClassFields(BatchTransactionAnalysisFields.Amount).DoubleValue > 0 AndAlso ClassFields(BatchTransactionAnalysisFields.CurrencyAmount).DoubleValue = 0 Then mvClassFields.Item(BatchTransactionAnalysisFields.CurrencyAmount).DoubleValue = mvClassFields.Item(BatchTransactionAnalysisFields.Amount).DoubleValue
            .CurrencyAmount = .CurrencyAmount + ClassFields(BatchTransactionAnalysisFields.CurrencyAmount).DoubleValue
            .LineTotal = .LineTotal + ClassFields(BatchTransactionAnalysisFields.Amount).DoubleValue
          End With
        End If
        MyBase.Save(pAmendedBy)
      End If
    End Sub

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer)
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
      'Claim Gift aid if eligible and there are detail lines that can claim gift aid
      CheckGiftAidClaim()
    End Sub

    Public Overrides Sub Save(pAmendedBy As String, pAudit As Boolean, pJournalNumber As Integer, pForceAmendmentHistory As Boolean)
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber, pForceAmendmentHistory)
      'Claim Gift aid if eligible and there are detail lines that can claim gift aid
      CheckGiftAidClaim()
    End Sub

    Private Sub CheckGiftAidClaim()
      Dim vCanClaim As Boolean = Me.EligibleForGiftAid AndAlso
                                 Me.UnclaimedGiftAidClaim IsNot Nothing AndAlso
                                 Me.UnclaimedGiftAidClaim.FinancialHistoryDetailLines IsNot Nothing 'will only allow the creation of a gift aid claim if there are Products that are eligible
      If vCanClaim Then Me.UnclaimedGiftAidClaim.Save()
    End Sub

    Private Sub InitOrderPaymentHistory()
      mvOrderPaymentHistory = New OrderPaymentHistory
      mvOrderPaymentHistory.Init(mvEnv)
      Dim vWhereFields As New CDBFields
      With vWhereFields
        .Add("order_number", CDBField.FieldTypes.cftLong, PaymentPlanNumber)
        .Add("batch_number", CDBField.FieldTypes.cftLong, BatchNumber)
        .Add("transaction_number", CDBField.FieldTypes.cftLong, TransactionNumber)
        .Add("line_number", CDBField.FieldTypes.cftLong, LineNumber)
      End With

      Dim vRS As CDBRecordSet = mvEnv.Connection.GetRecordSet("SELECT " & mvOrderPaymentHistory.GetRecordSetFields(OrderPaymentHistory.OrderPaymentHistoryRecordSetTypes.ophrtAll) & " FROM order_payment_history oph WHERE " & mvEnv.Connection.WhereClause(vWhereFields))
      If vRS.Fetch() = True Then mvOrderPaymentHistory.InitFromRecordSet(mvEnv, vRS, OrderPaymentHistory.OrderPaymentHistoryRecordSetTypes.ophrtAll)
      vRS.CloseRecordSet()
    End Sub

    Friend Sub SetCashInvoiceNumber(ByVal pCashInvoiceNumber As Integer)
      If pCashInvoiceNumber > 0 Then mvClassFields.Item(BatchTransactionAnalysisFields.CashInvoiceNumber).IntegerValue = pCashInvoiceNumber
    End Sub

    Friend Sub ClearInvoiceNumber()
      If InvoiceNumber > 0 Then
        If Notes.Length > 0 Then Notes = Notes & vbCrLf
        Notes = Notes & "Payment for invoice " & InvoiceNumber
        mvClassFields(BatchTransactionAnalysisFields.InvoiceNumber).Value = ""
      End If
    End Sub

    Public Property FinancialHistoryDetailLines As IList(Of FinancialHistoryDetail)
      Get
        If mvFHDLines Is Nothing Then
          Me.FinancialHistoryDetailLines = Me.GetRelatedList(Of FinancialHistoryDetail)({BatchTransactionAnalysisFields.BatchNumber,
                                                                                        BatchTransactionAnalysisFields.TransactionNumber,
                                                                                        BatchTransactionAnalysisFields.LineNumber})
        End If
        Return mvFHDLines
      End Get
      Private Set(value As IList(Of FinancialHistoryDetail))
        mvFHDLines = New List(Of FinancialHistoryDetail)(value)
      End Set
    End Property

    Public Property BatchTransaction As BatchTransaction
      Get
        If mvBatchTransaction Is Nothing Then
          Me.BatchTransaction = GetRelatedInstance(Of BatchTransaction)({BatchTransactionAnalysisFields.BatchNumber, BatchTransactionAnalysisFields.TransactionNumber})
          Me.UpdateTransactionAmountOnSave = False 'This should only occur when the Transaction is passed to the class from outside (legacy code)
        End If
        Return mvBatchTransaction
      End Get
      Private Set(value As BatchTransaction)
        mvBatchTransaction = value
        Me.UpdateTransactionAmountOnSave = True 'Done by default to maintain previous functionality
      End Set
    End Property

    Private ReadOnly Property EligibleForGiftAid As Boolean
      Get
        Dim vResult As Boolean = Me.Amount <> 0
        If vResult Then
          If Me.Reversal IsNot Nothing Then
            'Eligible for gift aid if the original transaction was claimed as for gift-aid.
            vResult = Me.Reversal.OriginalBatchTransactionAnalysis.HasGiftAidClaim
          Else
            'Eligible for gift aid if not already claimed
            vResult = Me.BatchTransaction IsNot Nothing AndAlso Me.BatchTransaction.EligibleForGiftAid AndAlso Me.ClaimedGiftAidClaim Is Nothing
            'If there's a Payment Plan then the Membership must be not gifted for Adults or for a child that's being paid for by a tax-paying adult etc.  Complicated rules.
            vResult = vResult AndAlso (Me.PaymentPlan Is Nothing OrElse Me.PaymentPlan.EligibleForGiftAid = True)
          End If
        End If
        Return vResult
      End Get
    End Property

    Private Property UpdateTransactionAmountOnSave As Boolean

    Public Property Reversal As Reversal
      Get
        If mvReversal Is Nothing AndAlso Me.BatchNumber > 0 AndAlso Me.TransactionNumber > 0 AndAlso Me.LineNumber > 0 Then
          Me.Reversal = Me.GetRelatedInstance(Of Reversal)({BatchTransactionAnalysisFields.BatchNumber,
                                                                         BatchTransactionAnalysisFields.TransactionNumber,
                                                                         BatchTransactionAnalysisFields.LineNumber})
        End If
        Return mvReversal
      End Get
      Private Set(ByVal value As Reversal)
        mvReversal = value
      End Set
    End Property

    ''' <summary>
    ''' Indicates whether a Gift Aid Claim has already been made for the object.
    ''' </summary>
    ''' <remarks>
    ''' When claim is first made for a BTA line, it is created as an Unclaimed Gift Aid record (declaration_lined_unclaimed)
    ''' Once the claim has been processed, the claim is treated as a Claimed Gift Aid record (declaration_tax_claim_lines)
    ''' Returns TRUE if the BTA line is either Claimed GAD or Unclaimed
    ''' </remarks>
    ''' <returns></returns>
    Public ReadOnly Property HasGiftAidClaim As Boolean
      Get
        Return (Me.UnclaimedGiftAidClaim IsNot Nothing AndAlso Me.UnclaimedGiftAidClaim.Existing = True) OrElse
          (Me.ClaimedGiftAidClaim IsNot Nothing AndAlso Me.ClaimedGiftAidClaim.Existing = True)
      End Get
    End Property

    ''' <summary>
    ''' Returns all Financial History Detail Lines whose Product is Eligible for Gift-Aid
    ''' </summary>
    ''' <returns></returns>
    Public ReadOnly Property GiftAidableDetailLines As IList(Of FinancialHistoryDetail)
      Get
        Dim vResult As IList(Of FinancialHistoryDetail) = Nothing
        If Me.FinancialHistoryDetailLines IsNot Nothing Then
          vResult = Me.FinancialHistoryDetailLines.Where(Function(vFHDLine) vFHDLine.Product IsNot Nothing AndAlso vFHDLine.Product.EligibleForGiftAid).ToList()
        End If
        Return vResult
      End Get
    End Property
    Public Property GiftAidClaimedAmount As Double
      Get
        Dim vAmount As Double = 0
        If Me.UnclaimedGiftAidClaim IsNot Nothing Then
          vAmount = Me.UnclaimedGiftAidClaim.NetAmount
        ElseIf Me.ClaimedGiftAidClaim IsNot Nothing Then
          vAmount = Me.ClaimedGiftAidClaim.NetAmount
        End If
        Return vAmount
      End Get
      Set(value As Double)

      End Set
    End Property
#End Region
    Public Property PaymentPlan As PaymentPlan
      Get
        If mvPaymentPlan Is Nothing Then Me.PaymentPlan = GetPaymentPlanInstance()
        Return mvPaymentPlan
      End Get
      Set(value As PaymentPlan)
        mvPaymentPlan = value
      End Set
    End Property

    Private Function GetPaymentPlanInstance() As PaymentPlan
      Dim vResult As PaymentPlan = Nothing
      If Me.PaymentPlanNumber > 0 Then
        Dim vTest As New PaymentPlan()
        vTest.Init(Me.Environment, Me.PaymentPlanNumber)
        If vTest.Existing Then vResult = vTest
      End If
      Return vResult
    End Function
  End Class
End Namespace
