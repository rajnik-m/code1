Namespace Access

  Partial Public Class FinancialHistoryDetail
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum FinancialHistoryDetailFields
      AllFields = 0
      BatchNumber
      TransactionNumber
      LineNumber
      Amount
      Product
      Rate
      Source
      Quantity
      VatRate
      VatAmount
      Status
      SalesContactNumber
      InvoicePayment
      CurrencyAmount
      CurrencyVatAmount
      DistributionCode
      CashInvoiceNumber
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("batch_number", CDBField.FieldTypes.cftInteger)
        .Add("transaction_number", CDBField.FieldTypes.cftInteger)
        .Add("line_number", CDBField.FieldTypes.cftInteger)
        .Add("amount", CDBField.FieldTypes.cftNumeric)
        .Add("product")
        .Add("rate")
        .Add("source")
        .Add("quantity", CDBField.FieldTypes.cftInteger)
        .Add("vat_rate")
        .Add("vat_amount", CDBField.FieldTypes.cftNumeric)
        .Add("status")
        .Add("sales_contact_number", CDBField.FieldTypes.cftInteger)
        .Add("invoice_payment")
        .Add("currency_amount", CDBField.FieldTypes.cftNumeric)
        .Add("currency_vat_amount", CDBField.FieldTypes.cftNumeric)
        .Add("distribution_code")
        .Add("cash_invoice_number", CDBField.FieldTypes.cftInteger)

        .Item(FinancialHistoryDetailFields.BatchNumber).PrefixRequired = True
        .Item(FinancialHistoryDetailFields.TransactionNumber).PrefixRequired = True
        .Item(FinancialHistoryDetailFields.Product).PrefixRequired = True
        .Item(FinancialHistoryDetailFields.Rate).PrefixRequired = True
        .Item(FinancialHistoryDetailFields.Source).PrefixRequired = True
        .Item(FinancialHistoryDetailFields.VatRate).PrefixRequired = True
        .Item(FinancialHistoryDetailFields.SalesContactNumber).PrefixRequired = True
        .Item(FinancialHistoryDetailFields.DistributionCode).PrefixRequired = True

        .Item(FinancialHistoryDetailFields.BatchNumber).SetPrimaryKeyOnly()
        .Item(FinancialHistoryDetailFields.TransactionNumber).SetPrimaryKeyOnly()
        .Item(FinancialHistoryDetailFields.LineNumber).SetPrimaryKeyOnly()

        .Item(FinancialHistoryDetailFields.CurrencyAmount).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataCurrencyCode)
        .Item(FinancialHistoryDetailFields.CurrencyVatAmount).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataCurrencyCode)


      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return False
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "fhd"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "financial_history_details"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public Property BatchNumber() As Integer
      Get
        Return mvClassFields(FinancialHistoryDetailFields.BatchNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields.Item(FinancialHistoryDetailFields.BatchNumber).IntegerValue = value
      End Set
    End Property
    Public Property TransactionNumber() As Integer
      Get
        Return mvClassFields(FinancialHistoryDetailFields.TransactionNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(FinancialHistoryDetailFields.TransactionNumber).IntegerValue = value
      End Set
    End Property
    Public Property LineNumber() As Integer
      Get
        Return mvClassFields(FinancialHistoryDetailFields.LineNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(FinancialHistoryDetailFields.LineNumber).IntegerValue = value
      End Set
    End Property
    Public Property Amount() As Double
      Get
        Return mvClassFields(FinancialHistoryDetailFields.Amount).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(FinancialHistoryDetailFields.Amount).DoubleValue = value
      End Set
    End Property
    Public Property ProductCode() As String
      Get
        Return mvClassFields(FinancialHistoryDetailFields.Product).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(FinancialHistoryDetailFields.Product).Value = value
      End Set
    End Property
    Public Property RateCode() As String
      Get
        Return mvClassFields(FinancialHistoryDetailFields.Rate).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(FinancialHistoryDetailFields.Rate).Value = value
      End Set
    End Property
    Public Property Source() As String
      Get
        Return mvClassFields(FinancialHistoryDetailFields.Source).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(FinancialHistoryDetailFields.Source).Value = value
      End Set
    End Property
    Public Property Quantity() As String
      Get
        Return mvClassFields(FinancialHistoryDetailFields.Quantity).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(FinancialHistoryDetailFields.Quantity).Value = value
      End Set
    End Property
    Public Property VatRate() As String
      Get
        Return mvClassFields(FinancialHistoryDetailFields.VatRate).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(FinancialHistoryDetailFields.VatRate).Value = value
      End Set
    End Property
    Public Property VatAmount() As Double
      Get
        Return mvClassFields(FinancialHistoryDetailFields.VatAmount).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(FinancialHistoryDetailFields.VatAmount).DoubleValue = value
      End Set
    End Property
    Public ReadOnly Property StatusCode() As String
      Get
        Return mvClassFields(FinancialHistoryDetailFields.Status).Value
      End Get
    End Property
    Public Property SalesContactNumber() As Integer
      Get
        Return mvClassFields(FinancialHistoryDetailFields.SalesContactNumber).IntegerValue
      End Get
      Set(ByVal value As Integer)
        mvClassFields(FinancialHistoryDetailFields.SalesContactNumber).IntegerValue = value
      End Set
    End Property
    Public Property InvoicePayment() As Boolean
      Get
        Return mvClassFields(FinancialHistoryDetailFields.InvoicePayment).Bool
      End Get
      Set(ByVal value As Boolean)
        mvClassFields(FinancialHistoryDetailFields.InvoicePayment).Bool = value
      End Set
    End Property
    Public Property CurrencyAmount() As Double
      Get
        Return mvClassFields(FinancialHistoryDetailFields.CurrencyAmount).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(FinancialHistoryDetailFields.CurrencyAmount).DoubleValue = value
      End Set
    End Property
    Public Property CurrencyVatAmount() As Double
      Get
        Return mvClassFields(FinancialHistoryDetailFields.CurrencyVatAmount).DoubleValue
      End Get
      Set(ByVal value As Double)
        mvClassFields(FinancialHistoryDetailFields.CurrencyVatAmount).DoubleValue = value
      End Set
    End Property
    Public Property DistributionCode() As String
      Get
        Return mvClassFields(FinancialHistoryDetailFields.DistributionCode).Value
      End Get
      Set(ByVal value As String)
        mvClassFields(FinancialHistoryDetailFields.DistributionCode).Value = value
      End Set
    End Property
    Public ReadOnly Property CashInvoiceNumber() As Integer
      Get
        Return mvClassFields(FinancialHistoryDetailFields.CashInvoiceNumber).IntegerValue
      End Get
    End Property
#End Region

#Region "Non AutoGenerated Code"

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvProduct = Nothing
      mvIsEventBookingChecked = False
      mvIsEventBooking = False
      mvIsEventBookingLineChecked = False
      mvIsEventBookingLine = False
      mvGotBatchType = False
      mvBatchType = Batch.BatchTypes.None
      mvAdjustmentStateSet = False
      mvAdjustmentState = FinancialHistory.AdjustmentStates.adjsNone
      mvAdjustmentBatchNumber = 0
      mvAdjustmentTransactionNumber = 0
      mvAdjustmentLineNumber = 0
      mvAdjustmentWasBatchNumber = 0
      mvAdjustmentWasTransactionNumber = 0
      mvAdjustmentWasLineNumber = 0
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      SetValid()
      If mvExisting Then
        'WARNING - No UNIQUE KEY Can't update, must delete all and re-insert from FinancialHistory.Save
        System.Diagnostics.Debug.Assert(False, "")
        'mvEnv.Connection.UpdateRecords "financial_history_details", mvClassFields.UpdateFields, mvClassFields.WhereFields
      Else
        mvClassFields.ClearSetValues() 'do this so all fhd details are included in the insert
        mvClassFields.Save(mvEnv, mvExisting, pAmendedBy, pAudit, pJournalNumber)
      End If
    End Sub

    Private mvProduct As Product

    'Used for deciding which Smart Client menu items should be available
    Private mvIsEventBookingChecked As Boolean
    Private mvIsEventBooking As Boolean
    Private mvIsEventBookingLineChecked As Boolean
    Private mvIsEventBookingLine As Boolean
    Private mvBatchType As Batch.BatchTypes
    Private mvGotBatchType As Boolean
    Private mvAdjustmentState As FinancialHistory.AdjustmentStates
    Private mvAdjustmentStateSet As Boolean
    Private mvAdjustmentBatchNumber As Integer
    Private mvAdjustmentTransactionNumber As Integer
    Private mvAdjustmentLineNumber As Integer
    Private mvAdjustmentWasBatchNumber As Integer
    Private mvAdjustmentWasTransactionNumber As Integer
    Private mvAdjustmentWasLineNumber As Integer

    Overloads Sub InitClassFields()
      MyBase.InitClassFields()
      Me.Product = Nothing
      Me.BatchTransactionAnalysis = Nothing
    End Sub

    Public Property Product() As Product
      Get
        If mvProduct Is Nothing Then Me.Product = GetProductInstance()
        Return mvProduct
      End Get
      Set(ByVal Value As Product)
        mvProduct = Value
      End Set
    End Property

    Private Function GetProductInstance() As Product
      Dim vResult As Product = Nothing
      If Not String.IsNullOrWhiteSpace(Me.ProductCode) Then
        Dim vTest As Product = Me.GetRelatedInstance(Of Product)({FinancialHistoryDetailFields.Product})
        If vTest.Existing Then vResult = vTest
      End If
      Return vResult
    End Function
    Public Property Status() As FinancialHistory.FinancialHistoryStatus
      Get
        Select Case mvClassFields.Item(FinancialHistoryDetailFields.Status).Value
          Case "A"
            Status = FinancialHistory.FinancialHistoryStatus.fhsAdjusted
          Case "B"
            Status = FinancialHistory.FinancialHistoryStatus.fhsOnBackOrder
          Case "M"
            Status = FinancialHistory.FinancialHistoryStatus.fhsMoved
          Case "R"
            Status = FinancialHistory.FinancialHistoryStatus.fhsReversed
          Case Else
            Status = FinancialHistory.FinancialHistoryStatus.fhsNormal
        End Select
      End Get
      Set(ByVal Value As FinancialHistory.FinancialHistoryStatus)
        Select Case Value
          Case FinancialHistory.FinancialHistoryStatus.fhsAdjusted
            mvClassFields.Item(FinancialHistoryDetailFields.Status).Value = "A"
          Case FinancialHistory.FinancialHistoryStatus.fhsOnBackOrder
            mvClassFields.Item(FinancialHistoryDetailFields.Status).Value = "B"
          Case FinancialHistory.FinancialHistoryStatus.fhsMoved
            mvClassFields.Item(FinancialHistoryDetailFields.Status).Value = "M"
          Case FinancialHistory.FinancialHistoryStatus.fhsReversed
            mvClassFields.Item(FinancialHistoryDetailFields.Status).Value = "R"
          Case Else
            mvClassFields.Item(FinancialHistoryDetailFields.Status).Value = ""
        End Select
      End Set
    End Property

    Public Sub InitFromInvoiceNumber(ByVal pInvoiceNumber As Integer)
      Init()
      Dim vAnsiJoins As New AnsiJoins()
      vAnsiJoins.Add("financial_history_details fhd", "i.batch_number", "fhd.batch_number", "i.transaction_number", "fhd.transaction_number")

      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, GetRecordSetFields, "invoices i", New CDBFields(New CDBField("invoice_number", pInvoiceNumber)), "", vAnsiJoins)
      Dim vRecordSet As CDBRecordSet = vSQLStatement.GetRecordSet()
      If vRecordSet.Fetch() Then
        'Although this could potentially return multiple records, oly the first will be used
        MyBase.InitFromRecordSet(vRecordSet)
      Else
        SetDefaults()
      End If
      vRecordSet.CloseRecordSet()
    End Sub

    Public ReadOnly Property AdjustmentBatchNumber() As Integer
      Get
        AdjustmentBatchNumber = mvAdjustmentBatchNumber
      End Get
    End Property
    Public ReadOnly Property AdjustmentTransactionNumber() As Integer
      Get
        AdjustmentTransactionNumber = mvAdjustmentTransactionNumber
      End Get
    End Property
    Public ReadOnly Property AdjustmentLineNumber() As Integer
      Get
        AdjustmentLineNumber = mvAdjustmentLineNumber
      End Get
    End Property
    Public ReadOnly Property AdjustmentWasBatchNumber() As Integer
      Get
        AdjustmentWasBatchNumber = mvAdjustmentWasBatchNumber
      End Get
    End Property
    Public ReadOnly Property AdjustmentWasTransactionNumber() As Integer
      Get
        AdjustmentWasTransactionNumber = mvAdjustmentWasTransactionNumber
      End Get
    End Property
    Public ReadOnly Property AdjustmentWasLineNumber() As Integer
      Get
        AdjustmentWasLineNumber = mvAdjustmentWasLineNumber
      End Get
    End Property

    Public Sub Reverse()
      Reverse(0, 0, 0)
    End Sub
    Public Sub Reverse(ByVal pNewBatchNumber As Integer, ByVal pNewTransactionNumber As Integer, ByVal pNewLineNumber As Integer)
      Amount = -Amount
      VatAmount = -VatAmount
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataCurrencyCode) Then
        CurrencyAmount = -CurrencyAmount
        CurrencyVatAmount = -CurrencyVatAmount
      End If
      If pNewBatchNumber > 0 Then
        With mvClassFields
          .Item(FinancialHistoryDetailFields.BatchNumber).IntegerValue = pNewBatchNumber
          .Item(FinancialHistoryDetailFields.TransactionNumber).IntegerValue = pNewTransactionNumber
          .Item(FinancialHistoryDetailFields.LineNumber).IntegerValue = pNewLineNumber
        End With
      End If
      mvExisting = False
    End Sub

    Public Function CanReverse() As Boolean
      Dim vCan As Boolean

      vCan = Not IsEventBooking()
      If vCan Then vCan = Not IsEventBookingLine()
      If vCan Then vCan = (Status <> FinancialHistory.FinancialHistoryStatus.fhsMoved And Status <> FinancialHistory.FinancialHistoryStatus.fhsReversed And Status <> FinancialHistory.FinancialHistoryStatus.fhsAdjusted)
      If vCan Then vCan = (BatchType() = Batch.BatchTypes.Cash Or BatchType() = Batch.BatchTypes.CashWithInvoice Or BatchType() = Batch.BatchTypes.FinancialAdjustment)
      Dim vSLItems As FinancialHistory.SalesLedgerItems = FinancialHistory.ContainsSalesLedgerItems(mvEnv, BatchNumber, TransactionNumber, LineNumber)
      If (vSLItems.HasFlag(FinancialHistory.SalesLedgerItems.SLCashAllocation) OrElse vSLItems.HasFlag(FinancialHistory.SalesLedgerItems.CreditNoteAllocation)) Then vCan = False
      If vCan = True AndAlso vSLItems > FinancialHistory.SalesLedgerItems.None Then
        If IsFinancialAdjustment() Then vCan = False
      End If
      If vCan Then
        'Check against the financial control 'one reversal only' value
        If mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlOneReversalOnly) = "Y" _
          And IsFinancialAdjustment = True Then
          'Prevent reversal
          vCan = False
        End If
      End If
      CanReverse = vCan
    End Function

    Public Function CanRefund() As Boolean
      Dim vCan As Boolean

      vCan = Not IsEventBooking()
      If vCan Then vCan = Not IsEventBookingLine()
      If vCan Then vCan = (Status <> FinancialHistory.FinancialHistoryStatus.fhsMoved And Status <> FinancialHistory.FinancialHistoryStatus.fhsReversed And Status <> FinancialHistory.FinancialHistoryStatus.fhsAdjusted)
      If vCan Then vCan = (BatchType() <> Batch.BatchTypes.GiveAsYouEarn And BatchType() <> Batch.BatchTypes.PostTaxPayrollGiving And BatchType() <> Batch.BatchTypes.CAFVouchers And BatchType() <> Batch.BatchTypes.DirectCredit And BatchType() <> Batch.BatchTypes.Cash And BatchType() <> Batch.BatchTypes.CashWithInvoice And BatchType() <> Batch.BatchTypes.FinancialAdjustment)
      Dim vSLItems As FinancialHistory.SalesLedgerItems = FinancialHistory.ContainsSalesLedgerItems(mvEnv, BatchNumber, TransactionNumber, LineNumber)
      If (vSLItems.HasFlag(FinancialHistory.SalesLedgerItems.SLCashAllocation) OrElse vSLItems.HasFlag(FinancialHistory.SalesLedgerItems.CreditNoteAllocation)) Then vCan = False
      If vCan = True AndAlso vSLItems > FinancialHistory.SalesLedgerItems.None Then
        If IsFinancialAdjustment() Then vCan = False
      End If
      If vCan Then
        'Check against the financial control 'one reversal only' value
        If mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlOneReversalOnly) = "Y" _
          And IsFinancialAdjustment = True Then
          'Prevent reversal
          vCan = False
        End If
      End If
      CanRefund = vCan
    End Function

    Public Function IsEventBooking() As Boolean
      If Not mvIsEventBookingChecked Then
        Dim vWhereFields As New CDBFields({New CDBField("batch_number", BatchNumber), New CDBField("transaction_number", TransactionNumber)})
        vWhereFields.Add("line_number", LineNumber)
        mvIsEventBooking = mvEnv.Connection.GetCount("event_bookings", vWhereFields) > 0
      End If
      Return mvIsEventBooking
    End Function

    ''' <summary>Is this line an Event Booking line or a line created as a result of amending an Event Booking?</summary>
    ''' <returns>True if this is line is linked to an Event Booking, otherwise False.</returns>
    Public Function IsEventBookingLine() As Boolean
      If mvIsEventBookingLineChecked = False Then
        mvIsEventBookingLine = False
        Dim vWhereFields As New CDBFields({New CDBField("z.batch_number", BatchNumber), New CDBField("z.transaction_number", TransactionNumber)})
        vWhereFields.Add("z.line_number", LineNumber)
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, "line_type", "batch_transaction_analysis z", vWhereFields)
        If vSQLStatement.GetValue.Equals("X") Then mvIsEventBookingLine = True
        If mvIsEventBookingLine = False Then
          vWhereFields.Add("z.batch_number#2", CDBField.FieldTypes.cftInteger, "eb.batch_number", CDBField.FieldWhereOperators.fwoNotEqual)
          Dim vAnsiJoins As New AnsiJoins({New AnsiJoin("event_bookings eb", "z.event_number", "eb.event_number", "z.booking_number", "eb.booking_number")})
          vSQLStatement = New SQLStatement(mvEnv.Connection, String.Empty, "event_booking_transactions z", vWhereFields, String.Empty, vAnsiJoins)
          If mvEnv.Connection.GetCountFromStatement(vSQLStatement) > 0 Then mvIsEventBookingLine = True
        End If
      End If
      Return mvIsEventBookingLine
    End Function

    Public Function BatchType() As Batch.BatchTypes
      If Not mvGotBatchType Then
        mvBatchType = Batch.GetBatchType(mvEnv.Connection.GetValue("SELECT batch_type FROM batches WHERE batch_number = " & BatchNumber))
        mvGotBatchType = True
      End If
      BatchType = mvBatchType
    End Function

    Public Function AdjustmentState() As FinancialHistory.AdjustmentStates
      Dim vWhereFields As New CDBFields
      Dim vRS As CDBRecordSet
      Dim vBaseSQL As String
      Dim vSQL As String
      Dim vCount As Integer

      If Not mvAdjustmentStateSet Then
        mvAdjustmentState = FinancialHistory.AdjustmentStates.adjsNone
        vBaseSQL = "SELECT %1batch_number, %1transaction_number, %1line_number FROM reversals WHERE "
        Do
          If vCount = 0 Then
            With vWhereFields
              .Add("batch_number", CDBField.FieldTypes.cftLong, BatchNumber)
              .Add("transaction_number", CDBField.FieldTypes.cftLong, TransactionNumber)
              .Add("line_number", CDBField.FieldTypes.cftLong, LineNumber)
            End With
          Else
            With vWhereFields
              .Item(1).Name = "was_batch_number"
              .Item(2).Name = "was_transaction_number"
              .Item(3).Name = "was_line_number"
            End With
          End If
          If vCount = 0 Then
            vSQL = Replace(vBaseSQL, "%1", "was_")
          Else
            vSQL = Replace(vBaseSQL, "%1", "")
          End If
          vRS = mvEnv.Connection.GetRecordSet(vSQL & mvEnv.Connection.WhereClause(vWhereFields))
          With vRS
            If .Fetch() = True Then
              If vCount = 0 Then
                mvAdjustmentState = FinancialHistory.AdjustmentStates.adjsIsAnAdjustment
                mvAdjustmentWasBatchNumber = .Fields.Item(1).IntegerValue
                mvAdjustmentWasTransactionNumber = .Fields.Item(2).IntegerValue
                mvAdjustmentWasLineNumber = .Fields.Item(3).IntegerValue
              Else
                If mvAdjustmentState = FinancialHistory.AdjustmentStates.adjsIsAnAdjustment Then
                  mvAdjustmentState = FinancialHistory.AdjustmentStates.adjsIsAnAdjustmentAndHasBeenAdjusted
                Else
                  mvAdjustmentState = FinancialHistory.AdjustmentStates.adjsHasBeenAdjusted
                End If
                mvAdjustmentBatchNumber = .Fields.Item(1).IntegerValue
                mvAdjustmentTransactionNumber = .Fields.Item(2).IntegerValue
                mvAdjustmentLineNumber = .Fields.Item(3).IntegerValue
              End If
            End If
            .CloseRecordSet()
          End With
          vCount = vCount + 1
        Loop While vCount < 2
        mvAdjustmentStateSet = True
      End If
      AdjustmentState = mvAdjustmentState
    End Function

    Public Function CanAddFundraisingPaymentLink() As Boolean
      Dim vResult As Boolean
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataFundraisingPayments) AndAlso Status = FinancialHistory.FinancialHistoryStatus.fhsNormal _
      AndAlso mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlDefaultFundPayType).Length > 0 Then
        If BatchType() = Batch.BatchTypes.GiftInKind Then
          vResult = True
        Else
          Dim vProduct As New Product(mvEnv)
          vProduct.Init(ProductCode)
          If vProduct.Existing Then
            Dim vFH As New FinancialHistory
            vFH.Init(mvEnv, BatchNumber, TransactionNumber)

            vResult = vProduct.Donation AndAlso (vFH.TransactionSign = "C") AndAlso Amount > 0
            If vResult Then
              Dim vWhereFields As New CDBFields
              vWhereFields.Add("batch_number", BatchNumber)
              vWhereFields.Add("transaction_number", TransactionNumber)
              vWhereFields.Add("line_number", LineNumber)
              vResult = mvEnv.Connection.GetCount("fundraising_payment_history", vWhereFields) = 0
            End If
          End If
        End If
      End If
      Return vResult
    End Function

    Public Function CanPartRefund() As Boolean
      Dim vCanPartRefund As Boolean = CanRefund()
      If vCanPartRefund Then
        Dim vCT As New ConfirmedTransaction(mvEnv)
        vCT.Init(BatchNumber, TransactionNumber)
        vCanPartRefund = Not (vCT.Existing)
        If vCanPartRefund Then
          vCanPartRefund = False
          Dim vSLItems As FinancialHistory.SalesLedgerItems = FinancialHistory.ContainsSalesLedgerItems(mvEnv, BatchNumber, TransactionNumber, LineNumber)
          If vSLItems > FinancialHistory.SalesLedgerItems.None AndAlso (vSLItems.HasFlag(FinancialHistory.SalesLedgerItems.InvoicePayments) OrElse vSLItems.HasFlag(FinancialHistory.SalesLedgerItems.UnallocatedSLCash)) Then
            If (vSLItems.HasFlag(FinancialHistory.SalesLedgerItems.CreditNoteAllocation) = False AndAlso vSLItems.HasFlag(FinancialHistory.SalesLedgerItems.SLCashAllocation) = False) Then vCanPartRefund = True
            ' Can only part-refund if line is an Invoice payment (line 'N') or unallocated Sales Ledger Cash (line 'U')
          ElseIf (vSLItems = FinancialHistory.SalesLedgerItems.None AndAlso IntegerValue(Quantity) > 1) Then
            'Can only part-refund if line has no Sales Ledger items and has a quantity > 1
            vCanPartRefund = True
          End If
        End If
      End If
      Return vCanPartRefund
    End Function

    Public Function CanPartReverse() As Boolean
      Dim vCanPartReverse As Boolean = CanReverse()
      If vCanPartReverse Then
        Dim vCT As New ConfirmedTransaction(mvEnv)
        vCT.Init(BatchNumber, TransactionNumber)
        vCanPartReverse = Not (vCT.Existing)
        If vCanPartReverse Then
          vCanPartReverse = False
          Dim vSLItems As FinancialHistory.SalesLedgerItems = FinancialHistory.ContainsSalesLedgerItems(mvEnv, BatchNumber, TransactionNumber, LineNumber)
          If vSLItems > FinancialHistory.SalesLedgerItems.None AndAlso (vSLItems.HasFlag(FinancialHistory.SalesLedgerItems.InvoicePayments) OrElse vSLItems.HasFlag(FinancialHistory.SalesLedgerItems.UnallocatedSLCash)) Then
            If (vSLItems.HasFlag(FinancialHistory.SalesLedgerItems.CreditNoteAllocation) = False AndAlso vSLItems.HasFlag(FinancialHistory.SalesLedgerItems.SLCashAllocation) = False) Then vCanPartReverse = True
            ' Can only part-refund if line is an Invoice payment (line 'N') or unallocated Sales Ledger Cash (line 'U')
          ElseIf (vSLItems = FinancialHistory.SalesLedgerItems.None AndAlso IntegerValue(Quantity) > 1) Then
            'Can only part-refund if line has no Sales Ledger items and has a quantity > 1
            vCanPartReverse = True
          End If
        End If
      End If
      Return vCanPartReverse
    End Function

    ''' <summary>Is this transaction line the result of a financial adjustment?</summary>
    ''' <returns>True if the transaction line is the result of a financial adjustment, otherwise False</returns>
    Public ReadOnly Property IsFinancialAdjustment As Boolean
      Get
        Return Me.BatchTransactionAnalysis.IsFinancialAdjustment
      End Get
    End Property

#End Region

  End Class
End Namespace
