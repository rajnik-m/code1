Namespace Access

  Public Class VatRate
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum VatRateFields
      AllFields = 0
      VatRate
      VatRateDesc
      Percentage
      PreviousPercentage
      RateChanged
      NominalAccount
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("vat_rate")
        .Add("vat_rate_desc")
        .Add("percentage", CDBField.FieldTypes.cftNumeric)
        .Add("previous_percentage", CDBField.FieldTypes.cftNumeric)
        .Add("rate_changed", CDBField.FieldTypes.cftDate)
        .Add("nominal_account")

        .Item(VatRateFields.VatRate).PrimaryKey = True
        .Item(VatRateFields.VatRate).PrefixRequired = True
        .Item(VatRateFields.Percentage).PrefixRequired = True
        .Item(VatRateFields.RateChanged).PrefixRequired = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "vr"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "vat_rates"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
      mvVATHistoryChecked = False
      mvVATHistory = New CollectionList(Of VatRateHistory)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property VatRateCode() As String
      Get
        Return mvClassFields(VatRateFields.VatRate).Value
      End Get
    End Property
    Public ReadOnly Property VatRateDesc() As String
      Get
        Return mvClassFields(VatRateFields.VatRateDesc).Value
      End Get
    End Property
    Public ReadOnly Property Percentage() As Double
      Get
        Return mvClassFields(VatRateFields.Percentage).DoubleValue
      End Get
    End Property
    Public ReadOnly Property PreviousPercentage() As Double
      Get
        Return mvClassFields(VatRateFields.PreviousPercentage).DoubleValue
      End Get
    End Property
    Public ReadOnly Property RateChanged() As String
      Get
        Return mvClassFields(VatRateFields.RateChanged).Value
      End Get
    End Property
    Public ReadOnly Property NominalAccount() As String
      Get
        Return mvClassFields(VatRateFields.NominalAccount).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(VatRateFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(VatRateFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"
    Private mvVATHistoryChecked As Boolean
    Private mvVATHistory As CollectionList(Of VatRateHistory)

    ''' <summary>Gets the VAT Percentage was current on the Transaction Date</summary>
    ''' <param name="pTransactionDate">Date the VAT Percentage is required for</param>
    ''' <returns>VAT Percentage</returns>
    Public ReadOnly Property CurrentPercentage(ByVal pTransactionDate As String) As Double
      Get
        'If pTransactionDate is less than mvRateChangedDate then use mvPreviousPercentage
        If IsDate(pTransactionDate) = False Then pTransactionDate = TodaysDate()
        If DateDiff(DateInterval.Day, Date.Parse(pTransactionDate), Date.Parse(RateChanged)) > 0 Then
          'Return historical percentage
          Return GetHistoricVATPercentage(pTransactionDate)
        Else
          Return Percentage
        End If
      End Get
    End Property

    ''' <summary>Calculates the VAT Amount for the entered Amount</summary>
    ''' <param name="pAmount">The amount that requires the VAT calculation</param>
    ''' <param name="pVATExclusive">Boolean flag indicating whether the amount excludes VAT</param>
    ''' <param name="pTransactionDate">Date the VAT is to be calculated for</param>
    ''' <returns>VAT Amount</returns>
    Public Function CalculateVATAmount(ByVal pAmount As Double, ByVal pVATExclusive As Boolean, ByVal pTransactionDate As String) As Double
      'Class initialisation IS required
      Return CalculateVATAmount(pAmount, pVATExclusive, CurrentPercentage(pTransactionDate))
    End Function

    ''' <summary>Calculates the VAT Amount for the entered Amount</summary>
    ''' <param name="pAmount">The amount that requires the VAT calculation</param>
    ''' <param name="pVATExclusive">Boolean flag indicating whether the amount excludes VAT</param>
    ''' <param name="pPercentage">The VAT Percentage to be used for the VAT calculation</param>
    ''' <returns>VAT Amount</returns>
    Public Function CalculateVATAmount(ByVal pAmount As Double, ByVal pVATExclusive As Boolean, ByVal pPercentage As Double) As Double
      'Class initialisation is NOT required
      If pVATExclusive Then
        Return FixTwoPlaces((pAmount * (pPercentage / 100)).ToString)
      Else
        Return CInt(((pAmount - (pAmount / (1 + pPercentage / 100))) * 100)) / 100
      End If
    End Function

    ''' <summary>Initialise the class and build collection of any VAT History</summary>
    ''' <param name="pRecordSet"></param>
    ''' <remarks></remarks>
    Public Sub InitFromRecordSetWithHistory(ByVal pRecordSet As Data.CDBRecordSet)
      MyBase.InitFromRecordSet(pRecordSet)
      mvVATHistory = New CollectionList(Of VatRateHistory)
      Dim vVatRateHistory As VatRateHistory
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataVatRateHistory) Then
        Dim vCCategory As String = pRecordSet.Fields("contact_vat_category").Value
        Dim vPCategory As String = pRecordSet.Fields("product_vat_category").Value
        While pRecordSet.Status = True AndAlso (pRecordSet.Fields("vat_rate").Value = VatRateCode AndAlso pRecordSet.Fields("contact_vat_category").Value = vCCategory AndAlso pRecordSet.Fields("product_vat_category").Value = vPCategory)
          If pRecordSet.Fields("vrh_percentage").Value.Length > 0 Then
            vVatRateHistory = New VatRateHistory(mvEnv)
            vVatRateHistory.InitFromRecordSet(pRecordSet)
            Dim vKey As String = vVatRateHistory.ToString
            If Not (mvVATHistory.ContainsKey(vKey)) Then mvVATHistory.Add(vKey, vVatRateHistory)
          End If
          pRecordSet.Fetch()
        End While
      Else
        pRecordSet.Fetch()
      End If
      mvVATHistoryChecked = True
    End Sub

    ''' <summary>Get the VAT Percentage that was current at the transaction date</summary>
    ''' <param name="pTransactionDate">The date the VAT percentage is required for</param>
    ''' <returns>VAT Rate percentage</returns>
    Private Function GetHistoricVATPercentage(ByVal pTransactionDate As String) As Double
      If mvVATHistoryChecked = False Then SelectHistoricVATData()
      Dim vPercentage As Nullable(Of Double)

      For Each vVATRateHistory As VatRateHistory In mvVATHistory
        If DateDiff(DateInterval.Day, CDate(pTransactionDate), CDate(vVATRateHistory.RateChanged)) <= 0 Then
          'pTransactionDate is on/after RateChanged
          vPercentage = vVATRateHistory.Percentage
          Exit For
        End If
      Next
      If vPercentage Is Nothing AndAlso mvVATHistory.Count > 0 Then
        'Our transaction is older than all the historic rates so just use the last one (Note - collection is sorted so last item is in fact the first item!)
        vPercentage = mvVATHistory(0).Percentage
      ElseIf mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataVatRateHistory) = False Then
        'Old data structures so use the PreviousPercentage
        vPercentage = PreviousPercentage
      End If
      If vPercentage Is Nothing Then vPercentage = Percentage 'There were no historic rates so use the current percentage
      Return DoubleValue(vPercentage.ToString)
    End Function

    ''' <summary>Build CollectionList of VATRateHistory objects</summary>
    Private Sub SelectHistoricVATData()
      If mvVATHistoryChecked = False Then
        mvVATHistory = New CollectionList(Of VatRateHistory)
        Dim vVatRateHistory As New VatRateHistory(mvEnv)
        Dim vSQL As New SQLStatement(mvEnv.Connection, vVatRateHistory.GetRecordSetFields(), "vat_rate_history vrh", New CDBFields(New CDBField("vat_rate", VatRateCode)), "rate_changed DESC")
        Dim vRS As CDBRecordSet = vSQL.GetRecordSet()
        While vRS.Fetch
          vVatRateHistory = New VatRateHistory(mvEnv)
          vVatRateHistory.InitFromRecordSet(vRS)
          Dim vKey As String = vVatRateHistory.Percentage.ToString & CDate(vVatRateHistory.RateChanged).ToString(CAREDateFormat).Replace("/", "")
          mvVATHistory.Add(vKey, vVatRateHistory)
        End While
        vRS.CloseRecordSet()
        mvVATHistoryChecked = True
      End If
    End Sub
#End Region

  End Class
End Namespace
