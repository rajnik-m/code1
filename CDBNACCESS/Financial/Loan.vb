Namespace Access

  Public Class Loan
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum LoanFields
      AllFields = 0
      LoanNumber
      OrderNumber
      LoanType
      LoanAmount
      LoanTerm
      FixedMonthlyAmount
      InterestRate
      Source
      InterestCalculatedDate
      CreatedBy
      CreatedOn
      CancellationReason
      CancellationSource
      CancelledBy
      CancelledOn
      InterestCapitalisationDate
      InterestCapitalisationAmount
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("loan_number", CDBField.FieldTypes.cftLong)
        .Add("order_number", CDBField.FieldTypes.cftLong).PrefixRequired = True
        .Add("loan_type")
        .Add("loan_amount", CDBField.FieldTypes.cftNumeric)
        .Add("loan_term", CDBField.FieldTypes.cftInteger)
        .Add("fixed_monthly_amount", CDBField.FieldTypes.cftNumeric)
        .Add("interest_rate", CDBField.FieldTypes.cftNumeric)
        .Add("source").PrefixRequired = True
        .Add("interest_calculated_date", CDBField.FieldTypes.cftDate)
        .Add("created_by").PrefixRequired = True
        .Add("created_on", CDBField.FieldTypes.cftDate).PrefixRequired = True
        .Add("cancellation_reason").PrefixRequired = True
        .Add("cancellation_source").PrefixRequired = True
        .Add("cancelled_by").PrefixRequired = True
        .Add("cancelled_on", CDBField.FieldTypes.cftDate).PrefixRequired = True
        .Add("interest_capitalisation_date", CDBField.FieldTypes.cftDate)
        .Add("interest_capitalisation_amount", CDBField.FieldTypes.cftNumeric)

        .Item(LoanFields.LoanNumber).PrimaryKey = True
        .SetControlNumberField(LoanFields.LoanNumber, "LN")
        .Item(LoanFields.InterestCalculatedDate).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLoanInterestRates)
        .Item(LoanFields.InterestCapitalisationAmount).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLoanInterestRates)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "l"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "loans"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property LoanNumber() As Integer
      Get
        Return mvClassFields(LoanFields.LoanNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property PaymentPlanNumber() As Integer
      Get
        Return mvClassFields(LoanFields.OrderNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property LoanTypeCode() As String
      Get
        Return mvClassFields(LoanFields.LoanType).Value
      End Get
    End Property
    Public ReadOnly Property LoanAmount() As Double
      Get
        Return mvClassFields(LoanFields.LoanAmount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property LoanTerm() As Integer
      Get
        Return mvClassFields(LoanFields.LoanTerm).IntegerValue
      End Get
    End Property
    Public ReadOnly Property FixedMonthlyAmount() As Double
      Get
        Return mvClassFields(LoanFields.FixedMonthlyAmount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property InterestRate() As Double
      Get
        Return mvClassFields(LoanFields.InterestRate).DoubleValue
      End Get
    End Property
    Public ReadOnly Property Source() As String
      Get
        Return mvClassFields(LoanFields.Source).Value
      End Get
    End Property
    Public ReadOnly Property InterestCalculatedDate() As String
      Get
        Return mvClassFields(LoanFields.InterestCalculatedDate).Value
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(LoanFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(LoanFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property CancellationReason() As String
      Get
        Return mvClassFields(LoanFields.CancellationReason).Value
      End Get
    End Property
    Public ReadOnly Property CancellationSource() As String
      Get
        Return mvClassFields(LoanFields.CancellationSource).Value
      End Get
    End Property
    Public ReadOnly Property CancelledBy() As String
      Get
        Return mvClassFields(LoanFields.CancelledBy).Value
      End Get
    End Property
    Public ReadOnly Property CancelledOn() As String
      Get
        Return mvClassFields(LoanFields.CancelledOn).Value
      End Get
    End Property
    ''' <summary>Gets the date Capitalisation last took place</summary>
    ''' <remarks>This is the date this Loan was last capitalised</remarks>
    Public ReadOnly Property InterestCapitalisationDate() As String
      Get
        'Could be null
        Return mvClassFields.Item(LoanFields.InterestCapitalisationDate).Value
      End Get
    End Property
    Public ReadOnly Property InterestCapitalisationAmount() As Double
      Get
        Return mvClassFields.Item(LoanFields.InterestCapitalisationAmount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(LoanFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(LoanFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      mvClassFields(LoanFields.CreatedBy).Value = mvEnv.User.UserID
      mvClassFields(LoanFields.CreatedOn).Value = TodaysDate()
      mvClassFields(LoanFields.InterestCalculatedDate).Value = TodaysDate()
    End Sub

    Protected Overrides Sub ClearFields()
      MyBase.ClearFields()
      mvLoanType = Nothing
      mvLoanStartDate = ""
      mvGotInterestRates = False
      mvInterestRates = Nothing
      mvLoanCapitalisationDate = Nothing
    End Sub

    Private mvLoanType As LoanType

    ''' <summary>Initialise the Loan from the Payment Plan Number.</summary>
    ''' <param name="pPaymentPlanNumber">The number of the Payment Plan the Loan is linked to</param>
    ''' <remarks>The loan must not have been cancelled</remarks>
    Public Sub InitFromPaymentPlan(ByVal pPaymentPlanNumber As Integer)
      InitFromPaymentPlan(pPaymentPlanNumber, False)
    End Sub

    ''' <summary>Initialise the Loan from the Payment Plan Number.</summary>
    ''' <param name="pPaymentPlanNumber">The number of the Payment Plan the Loan is linked to</param>
    ''' <param name="pCancelledLoan">Set to True if the Loan is cancelled, otherwise set to False</param>
    Public Sub InitFromPaymentPlan(ByVal pPaymentPlanNumber As Integer, ByVal pCancelledLoan As Boolean)
      If pPaymentPlanNumber > 0 Then
        Dim vWherefields As New CDBFields(New CDBField("order_number", pPaymentPlanNumber))
        Dim vOrderBy As String = ""
        If pCancelledLoan Then
          vWherefields.Add("cancellation_reason", "", CDBField.FieldWhereOperators.fwoNotEqual)
          vOrderBy = "cancelled_on DESC, loan_number DESC"
        Else
          vWherefields.Add("cancellation_reason", CDBField.FieldTypes.cftCharacter, "")
        End If
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, GetRecordSetFields(), "loans l", vWherefields, vOrderBy)
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        If vRS.Fetch Then
          InitFromRecordSet(vRS)
        Else
          Init()
        End If
        vRS.CloseRecordSet()
      Else
        Init()
      End If
    End Sub

    Public ReadOnly Property LoanType() As LoanType
      Get
        If mvLoanType Is Nothing Then
          mvLoanType = New LoanType(mvEnv)
          mvLoanType.Init(mvClassFields(LoanFields.LoanType).Value)
        End If
        Return mvLoanType
      End Get
    End Property

    Friend Sub SetInterestCalculated(ByVal pCalculationDate As String)
      mvClassFields(LoanFields.InterestCalculatedDate).Value = pCalculationDate
    End Sub

    Friend Sub SetUnCancelled()
      With mvClassFields
        .Item(LoanFields.CancellationReason).Value = ""
        .Item(LoanFields.CancellationSource).Value = ""
        .Item(LoanFields.CancelledBy).Value = ""
        .Item(LoanFields.CancelledOn).Value = ""
      End With
    End Sub

    Private mvLoanStartDate As String = ""
    Friend WriteOnly Property StartDate() As String
      Set(ByVal pValue As String)
        mvLoanStartDate = pValue
      End Set
    End Property

    Protected Overrides Sub PostValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PostValidateUpdateParameters(pParameterList)
      If mvClassFields.Item(LoanFields.InterestRate).ValueChanged Then
        UpdateInterestRate(mvClassFields.Item(LoanFields.InterestRate).DoubleValue, TodaysDate)
      End If
    End Sub

    Private mvGotInterestRates As Boolean
    Private mvInterestRates As CollectionList(Of LoanInterestRate)
    ''' <summary>Update the Interest Rate and add a record to the Loan Interest Rates table</summary>
    ''' <param name="pNewInterestRate">The new Interest Rate</param>
    ''' <param name="pChangeDate">The date the new interest rate takes effect</param>
    Public Sub UpdateInterestRate(ByVal pNewInterestRate As Double, ByVal pChangeDate As String)
      mvClassFields.Item(LoanFields.InterestRate).DoubleValue = pNewInterestRate
      If mvClassFields.Item(LoanFields.InterestRate).ValueChanged Then
        Dim vLIR As New LoanInterestRate(mvEnv)
        vLIR.AddOrUpdate(LoanNumber, pNewInterestRate, pChangeDate)
        vLIR.Save()
        mvGotInterestRates = False      'Force a re-selection of the data
      End If
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      If mvExisting = False Then
        'Adding a new Loan must also add a new LoanInterestRate
        If mvClassFields(LoanFields.LoanNumber).IntegerValue = 0 Then SetControlNumber()
        Dim vParams As New CDBParameters
        With vParams
          .Add("LoanNumber", LoanNumber)
          .Add("RateChanged", CDBField.FieldTypes.cftDate, InterestCalculatedDate)
          .Add("InterestRate", InterestRate)
        End With
        Dim vLIR As New LoanInterestRate(mvEnv)
        vLIR.Create(vParams)
        vLIR.Save(pAmendedBy, pAudit, pJournalNumber)
      End If
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
    End Sub

    ''' <summary>Gets a CollectionList of all LoanInterestRate's for the period in question</summary>
    ''' <returns>CollectionList of chosen LoanInterestRate objects</returns>
    Friend Function GetInterestRatesForPeriod(ByVal pFromDate As Date, ByVal pToDate As Date) As CollectionList(Of LoanInterestRate)
      SelectLoanInterestRates()
      Dim vInterestRates As New CollectionList(Of LoanInterestRate)
      Dim vToDate As Date = pToDate
      For Each vLIR As LoanInterestRate In mvInterestRates
        If (CDate(vLIR.RateChanged) <= pToDate AndAlso vToDate >= pFromDate) Then
          vInterestRates.Add(vLIR.ToString, vLIR)
        End If
        vToDate = CDate(vLIR.RateChanged).AddDays(-1)
      Next
      Return vInterestRates
    End Function

    ''' <summary>Build CollectionList of LoanInterestRate objects. If there are no Loan Interest Rates then collection just contains the default interest</summary>
    Private Sub SelectLoanInterestRates()
      If mvGotInterestRates = False Then
        Dim vLIR As New LoanInterestRate(mvEnv)
        mvInterestRates = New CollectionList(Of LoanInterestRate)
        If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLoanInterestRates) Then
          Dim vWhereFields As New CDBFields(New CDBField("loan_number", LoanNumber))
          Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vLIR.GetRecordSetFields, "loan_interest_rates lir", vWhereFields, "rate_changed DESC")
          Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
          While vRS.Fetch
            vLIR = New LoanInterestRate(mvEnv)
            vLIR.InitFromRecordSet(vRS)
            mvInterestRates.Add(vLIR.ToString, vLIR)
          End While
          vRS.CloseRecordSet()
        Else
          vLIR.AddOrUpdate(LoanNumber, InterestRate, If(mvLoanStartDate.Length > 0, mvLoanStartDate, DateSerial(1900, 1, 1).ToString(CAREDateFormat)))
          mvInterestRates.Add(vLIR.ToString, vLIR)
        End If
        mvGotInterestRates = True
      End If
    End Sub

    Private mvLoanCapitalisationDate As Nullable(Of Date)
    ''' <summary>Gets the date the Loan Capitalisation takes place</summary>
    ''' <remarks>This is the date that Capitalisation takes place and not the date this individual Loan was capitalised</remarks>
    Friend ReadOnly Property LoanCapitalisationDate() As Date
      Get
        If mvLoanCapitalisationDate Is Nothing Then
          mvLoanCapitalisationDate = CDate(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbLoanCapitalisationDate))
          mvLoanCapitalisationDate = DateSerial(Today.Year, mvLoanCapitalisationDate.Value.Month, mvLoanCapitalisationDate.Value.Day)
        End If
        Return mvLoanCapitalisationDate.Value
      End Get
    End Property

    ''' <summary>Does the Loan require Capitalisation?</summary>
    Friend Function RequiresCapitalisation() As Boolean
      Dim vCapitaliseInterest As Boolean = False
      If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbLoanInterestRates) Then
        If LoanCapitalisationDate <= Today Then
          'Need to Capitalise the Loan
          Dim vLastCapitalised As Date = CDate(If(InterestCapitalisationDate.Length > 0, InterestCapitalisationDate, mvLoanStartDate))
          If vLastCapitalised < LoanCapitalisationDate Then vCapitaliseInterest = True
        End If
      End If
      Return vCapitaliseInterest
    End Function

    Friend Sub SetLoanCapitalisation(ByVal pCapitalisationAmount As Double)
      mvClassFields.Item(LoanFields.InterestCapitalisationAmount).Value = pCapitalisationAmount.ToString()
      mvClassFields.Item(LoanFields.InterestCapitalisationDate).Value = LoanCapitalisationDate.ToString(CAREDateFormat)
    End Sub

#End Region

  End Class
End Namespace
