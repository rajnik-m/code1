Namespace Access

  Public Class SurveyAnswer
    Inherits CARERecord
    Implements IRecordCreate

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum SurveyAnswerFields
      AllFields = 0
      AnswerDataType
      AnswerSequence
      AnswerText
      CreatedBy
      CreatedOn
      ListValues
      MaximumValue
      MinimumValue
      NextQuestionNumber
      SurveyAnswerNumber
      SurveyQuestionNumber
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("answer_data_type")
        .Add("answer_sequence", CDBField.FieldTypes.cftLong)
        .Add("answer_text", CDBField.FieldTypes.cftMemo)
        .Add("created_by")
        .Add("created_on", CDBField.FieldTypes.cftDate)
        .Add("list_values")
        .Add("maximum_value")
        .Add("minimum_value")
        .Add("next_question_number", CDBField.FieldTypes.cftLong)
        .Add("survey_answer_number", CDBField.FieldTypes.cftLong)
        .Add("survey_question_number", CDBField.FieldTypes.cftLong)

        .Item(SurveyAnswerFields.SurveyAnswerNumber).PrimaryKey = True
        .SetControlNumberField(SurveyAnswerFields.SurveyAnswerNumber, "SA")
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "sa"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "survey_answers"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(SurveyAnswerFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(SurveyAnswerFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property AnswerDataType() As String
      Get
        Return mvClassFields(SurveyAnswerFields.AnswerDataType).Value
      End Get
    End Property
    Public ReadOnly Property AnswerSequence() As Integer
      Get
        Return mvClassFields(SurveyAnswerFields.AnswerSequence).IntegerValue
      End Get
    End Property
    Public ReadOnly Property AnswerText() As String
      Get
        Return mvClassFields(SurveyAnswerFields.AnswerText).Value
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(SurveyAnswerFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(SurveyAnswerFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property ListValues() As String
      Get
        Return mvClassFields(SurveyAnswerFields.ListValues).Value
      End Get
    End Property
    Public ReadOnly Property MaximumValue() As String
      Get
        Return mvClassFields(SurveyAnswerFields.MaximumValue).Value
      End Get
    End Property
    Public ReadOnly Property MinimumValue() As String
      Get
        Return mvClassFields(SurveyAnswerFields.MinimumValue).Value
      End Get
    End Property
    Public ReadOnly Property NextQuestionNumber() As Integer
      Get
        Return mvClassFields(SurveyAnswerFields.NextQuestionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property SurveyAnswerNumber() As Integer
      Get
        Return mvClassFields(SurveyAnswerFields.SurveyAnswerNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property SurveyQuestionNumber() As Integer
      Get
        Return mvClassFields(SurveyAnswerFields.SurveyQuestionNumber).IntegerValue
      End Get
    End Property
#End Region

    Public Function CreateInstance(ByVal pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New SurveyAnswer(pEnv)
    End Function

    Public Shared Function CreateInstance(ByVal pEnv As CDBEnvironment, ByVal pParameterList As CDBParameters) As SurveyAnswer
      Dim vSurveyAnswer As New SurveyAnswer(pEnv)
      vSurveyAnswer.Init(pParameterList)
      Return vSurveyAnswer
    End Function

    ''' <summary>
    ''' Validate Parameters
    ''' </summary>
    ''' <param name="pParameterList"></param>
    ''' <remarks></remarks>
    Public Sub ValidateParameters(ByVal pParameterList As CDBParameters)
      ValidateSurveyAnswerNumber(pParameterList)
      ValidateSurveyQuestionParameter(pParameterList)
      ValidateSurveyAnswerParameters(pParameterList)
    End Sub
    ''' <summary>
    ''' Validate the Survey Number if it is present.
    ''' </summary>
    ''' <param name="pParameterList"></param>
    ''' <remarks>Not present when creating.</remarks>
    Public Sub ValidateSurveyAnswerNumber(ByVal pParameterList As CDBParameters)
      If pParameterList.Exists("SurveyAnswerNumber") Then
        Dim vInteger As Integer
        If pParameterList("SurveyAnswerNumber").Value.Length = 0 Or (pParameterList("SurveyAnswerNumber").Value.Length > 0 AndAlso Not Integer.TryParse(pParameterList("SurveyAnswerNumber").Value, vInteger)) Then
          RaiseError(DataAccessErrors.daeSurveyAnswerNumberInvalid)
        End If
      End If
    End Sub

    ''' <summary>
    ''' Validate the Survey number
    ''' </summary>
    ''' <param name="pParameterList"></param>
    ''' <remarks>If this Survey Question is to be linked to a Survey there should have enough information in the parameters to Init a Survey</remarks>
    Public Sub ValidateSurveyQuestionParameter(ByVal pParameterList As CDBParameters)
      ValidateSurveyAnswerParameters(pParameterList)
    End Sub

    ''' <summary>
    ''' Validate Parameters for Survey Answers
    ''' </summary>
    ''' <param name="pParameterList"></param>
    ''' <remarks>Validation is the same for Update and Create, so only one validation subroutine.</remarks>
    Private Sub ValidateSurveyAnswerParameters(ByVal pParameterList As CDBParameters)

      Dim vSurveyQuestion As New SurveyQuestion(mvEnv)
      vSurveyQuestion.Init(pParameterList("SurveyQuestionNumber").IntegerValue)
      If Not vSurveyQuestion.Existing Then
        RaiseError(DataAccessErrors.daeSurveyQuestionNumberInvalid)
      End If
      If pParameterList.ContainsKey("AnswerDataType") Then
        'Clone will not contain this parameter so check it exists first
        Select Case pParameterList("AnswerDataType").Value
          Case "Y" 'Y/N
            If (pParameterList("MinimumValue").Value.Length > 0 Or pParameterList("MaximumValue").Value.Length > 0) Then
              RaiseError(DataAccessErrors.daeSurveyAnswerRangeNotAppropriate)
            End If
            If pParameterList("ListValues").Value.Length <> 0 Then
              RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
            End If
          Case "I" 'Integer
            Dim vInteger As Integer
            If pParameterList("MinimumValue").Value.Length > 0 AndAlso Not Integer.TryParse(pParameterList("MinimumValue").Value, vInteger) Then
              RaiseError(DataAccessErrors.daeSurveyAnswerMinimumNotAppropriate)
            End If
            If pParameterList("MaximumValue").Value.Length > 0 AndAlso Not Integer.TryParse(pParameterList("MaximumValue").Value, vInteger) Then
              RaiseError(DataAccessErrors.daeSurveyAnswerMaximumNotAppropriate)
            End If
            If pParameterList("MinimumValue").IntegerValue > pParameterList("MaximumValue").IntegerValue Then
              RaiseError(DataAccessErrors.daeMaximumValueGreaterThanMinimum)
            End If
            If pParameterList("ListValues").Value.Length <> 0 Then
              RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
            End If
          Case "N" 'Numeric
            Dim vDouble As Double
            If pParameterList("MinimumValue").Value.Length > 0 AndAlso Not Double.TryParse(pParameterList("MinimumValue").Value, vDouble) Then
              RaiseError(DataAccessErrors.daeSurveyAnswerMinimumNotAppropriate)
            End If
            If pParameterList("MaximumValue").Value.Length > 0 AndAlso Not Double.TryParse(pParameterList("MaximumValue").Value, vDouble) Then
              RaiseError(DataAccessErrors.daeSurveyAnswerMaximumNotAppropriate)
            End If
            If pParameterList("MinimumValue").DoubleValue > pParameterList("MaximumValue").DoubleValue Then
              RaiseError(DataAccessErrors.daeMaximumValueGreaterThanMinimum)
            End If
            If pParameterList("ListValues").Value.Length <> 0 Then
              RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
            End If
          Case "A" 'Alpha
            If (pParameterList("MinimumValue").Value.Length > 0 Or pParameterList("MaximumValue").Value.Length > 0) Then
              RaiseError(DataAccessErrors.daeSurveyAnswerRangeNotAppropriate)
            End If
            If pParameterList("ListValues").Value.Length <> 0 Then
              RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
            End If
          Case "C" 'Char
            If pParameterList("MinimumValue").Value.Length <> 0 Then
              RaiseError(DataAccessErrors.daeSurveyAnswerMinimumNotAppropriate)
            End If
            If pParameterList("MaximumValue").Value.Length <> 0 Then
              RaiseError(DataAccessErrors.daeSurveyAnswerMaximumNotAppropriate)
            End If
            If pParameterList("ListValues").Value.Length <> 0 Then
              RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
            End If
          Case "D" 'Date
            Dim vDate As Date
            If pParameterList("MinimumValue").Value.Length > 0 AndAlso Not Date.TryParse(pParameterList("MinimumValue").Value, vDate) Then
              RaiseError(DataAccessErrors.daeSurveyAnswerMinimumNotAppropriate)
            End If
            If pParameterList("MaximumValue").Value.Length > 0 AndAlso Not Date.TryParse(pParameterList("MaximumValue").Value, vDate) Then
              RaiseError(DataAccessErrors.daeSurveyAnswerMaximumNotAppropriate)
            End If
            Dim vMinDate As Date = Date.MinValue
            Dim vMaxDate As Date = Date.MaxValue
            If pParameterList("MinimumValue").Value.Length > 0 Then
              vMinDate = CDate(pParameterList("MinimumValue").Value)
            End If
            If pParameterList("MaximumValue").Value.Length > 0 Then
              vMaxDate = CDate(pParameterList("MaximumValue").Value)
            End If
            If vMinDate > vMaxDate Then
              RaiseError(DataAccessErrors.daeMaximumValueGreaterThanMinimum)
            End If
            If pParameterList("ListValues").Value.Length <> 0 Then
              RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
            End If
          Case "T" 'Time
            Dim vTime As TimeSpan
            If pParameterList("MinimumValue").Value.Length > 0 AndAlso Not TimeSpan.TryParse(pParameterList("MinimumValue").Value, vTime) Then
              RaiseError(DataAccessErrors.daeSurveyAnswerMinimumNotAppropriate)
            End If
            If pParameterList("MaximumValue").Value.Length > 0 AndAlso Not TimeSpan.TryParse(pParameterList("MaximumValue").Value, vTime) Then
              RaiseError(DataAccessErrors.daeSurveyAnswerMaximumNotAppropriate)
            End If
            Dim vMinTime As TimeSpan = TimeSpan.MinValue
            Dim vMaxTime As TimeSpan = TimeSpan.MaxValue
            If pParameterList("MinimumValue").Value.Length > 0 Then
              vMinTime = TimeSpan.Parse(pParameterList("MinimumValue").Value)
              If vMinTime.Days >= 1 Then
                RaiseError(DataAccessErrors.daeSurveyAnswerMinimumNotAppropriate)
              End If
            End If
            If pParameterList("MaximumValue").Value.Length > 0 Then
              vMaxTime = TimeSpan.Parse(pParameterList("MaximumValue").Value)
              If vMaxTime.Days >= 1 Then
                RaiseError(DataAccessErrors.daeSurveyAnswerMaximumNotAppropriate)
              End If
            End If
            If vMinTime > vMaxTime Then
              RaiseError(DataAccessErrors.daeMaximumValueGreaterThanMinimum)
            End If
            If pParameterList("ListValues").Value.Length <> 0 Then
              RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
            End If
          Case "L" 'List
            If (pParameterList("MinimumValue").Value.Length > 0 Or pParameterList("MaximumValue").Value.Length > 0) Then
              RaiseError(DataAccessErrors.daeSurveyAnswerRangeNotAppropriate)
            End If
            If pParameterList("ListValues").Value.Length = 0 Then
              RaiseError(DataAccessErrors.daeSurveyAnswerListEmpty)
            End If
          Case Else
            RaiseError(DataAccessErrors.daeSurveyAnswerDataTypeInvalid)
        End Select
      End If
      
    End Sub
    Public Sub ValidatePersistedAnswerType()
      Select Case Me.AnswerDataType
        Case "Y" 'Y/N
          If (Me.MinimumValue.Length > 0 Or MaximumValue.Length > 0) Then
            RaiseError(DataAccessErrors.daeSurveyAnswerRangeNotAppropriate)
          End If
          If Me.ListValues.Length <> 0 Then
            RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
          End If
        Case "I" 'Integer
          Dim vIntegerMin As Integer
          If Me.MinimumValue.Length > 0 AndAlso Not Integer.TryParse(Me.MinimumValue, vIntegerMin) Then
            RaiseError(DataAccessErrors.daeSurveyAnswerMinimumNotAppropriate)
          End If
          Dim vIntegerMax As Integer
          If Me.MaximumValue.Length > 0 AndAlso Not Integer.TryParse(Me.MaximumValue, vIntegerMax) Then
            RaiseError(DataAccessErrors.daeSurveyAnswerMaximumNotAppropriate)
          End If
          If vIntegerMin > vIntegerMax Then
            RaiseError(DataAccessErrors.daeMaximumValueGreaterThanMinimum)
          End If
          If Me.ListValues.Length <> 0 Then
            RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
          End If
        Case "N" 'Numeric
          Dim vDouble As Double
          If Me.MinimumValue.Length > 0 AndAlso Not Double.TryParse(Me.MinimumValue, vDouble) Then
            RaiseError(DataAccessErrors.daeSurveyAnswerMinimumNotAppropriate)
          End If
          If Me.MaximumValue.Length > 0 AndAlso Not Double.TryParse(Me.MaximumValue, vDouble) Then
            RaiseError(DataAccessErrors.daeSurveyAnswerMaximumNotAppropriate)
          End If
          If CDbl(Me.MinimumValue) > CDbl(Me.MaximumValue) Then
            RaiseError(DataAccessErrors.daeMaximumValueGreaterThanMinimum)
          End If
          If Me.ListValues.Length <> 0 Then
            RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
          End If
        Case "A" 'Alpha
          If Me.ListValues.Length <> 0 Then
            RaiseError(DataAccessErrors.daeSurveyAnswerRangeNotAppropriate)
          End If
          If Me.ListValues.Length <> 0 Then
            RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
          End If
        Case "C" 'Char
          If Me.MinimumValue.Length <> 0 AndAlso Me.MinimumValue.Length <> 1 Then
            RaiseError(DataAccessErrors.daeSurveyAnswerMinimumNotAppropriate)
          End If
          If Me.MaximumValue.Length <> 0 AndAlso Me.MaximumValue.Length <> 1 Then
            RaiseError(DataAccessErrors.daeSurveyAnswerMaximumNotAppropriate)
          End If
          If Me.MinimumValue > Me.MaximumValue Then
            RaiseError(DataAccessErrors.daeMaximumValueGreaterThanMinimum)
          End If
          If Me.ListValues.Length <> 0 Then
            RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
          End If
        Case "D" 'Date
          Dim vDate As Date
          If Me.MinimumValue.Length > 0 AndAlso Not Date.TryParse(Me.MinimumValue, vDate) Then
            RaiseError(DataAccessErrors.daeSurveyAnswerMinimumNotAppropriate)
          End If
          If Me.MaximumValue.Length > 0 AndAlso Not Date.TryParse(Me.MaximumValue, vDate) Then
            RaiseError(DataAccessErrors.daeSurveyAnswerMaximumNotAppropriate)
          End If
          Dim vMinDate As Date = Date.MinValue
          Dim vMaxDate As Date = Date.MaxValue
          If Me.MinimumValue.Length > 0 Then
            vMinDate = CDate(Me.MinimumValue)
          End If
          If Me.MaximumValue.Length > 0 Then
            vMaxDate = CDate(Me.MaximumValue)
          End If
          If vMinDate > vMaxDate Then
            RaiseError(DataAccessErrors.daeMaximumValueGreaterThanMinimum)
          End If
          If Me.ListValues.Length <> 0 Then
            RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
          End If
        Case "T" 'Time
          Dim vTime As TimeSpan
          If Me.MinimumValue.Length > 0 AndAlso Not TimeSpan.TryParse(Me.MinimumValue, vTime) Then
            RaiseError(DataAccessErrors.daeSurveyAnswerMinimumNotAppropriate)
          End If
          If Me.MaximumValue.Length > 0 AndAlso Not TimeSpan.TryParse(Me.MaximumValue, vTime) Then
            RaiseError(DataAccessErrors.daeSurveyAnswerMaximumNotAppropriate)
          End If
          Dim vMinTime As TimeSpan = TimeSpan.MinValue
          Dim vMaxTime As TimeSpan = TimeSpan.MaxValue
          If Me.MinimumValue.Length > 0 Then
            vMinTime = TimeSpan.Parse(Me.MinimumValue)
          End If
          If Me.MaximumValue.Length > 0 Then
            vMaxTime = TimeSpan.Parse(Me.MaximumValue)
          End If
          If vMinTime > vMaxTime Then
            RaiseError(DataAccessErrors.daeMaximumValueGreaterThanMinimum)
          End If
          If Me.ListValues.Length <> 0 Then
            RaiseError(DataAccessErrors.daeSurveyAnswerListNotAppropriate)
          End If
        Case "L" 'List
          If (Me.MinimumValue.Length > 0 Or Me.MaximumValue.Length > 0) Then
            RaiseError(DataAccessErrors.daeSurveyAnswerRangeNotAppropriate)
          End If
          If Me.ListValues.Length = 0 Then
            RaiseError(DataAccessErrors.daeSurveyAnswerListEmpty)
          End If
        Case Else
          RaiseError(DataAccessErrors.daeSurveyAnswerDataTypeInvalid)
      End Select

    End Sub

    Protected Overrides Sub PreValidateCreateParameters(ByVal pParameterList As CDBParameters)
      'Add code here to validate parameters passed to the create methods
      ValidateParameters(pParameterList)
    End Sub

    Protected Overrides Sub PreValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      'Add code here to validate parameters passed to the update methods
      ValidateParameters(pParameterList)
    End Sub

    Protected Overrides Sub PostValidateCreateParameters(ByVal pParameterList As CDBParameters)
      'Add code here to validate parameters passed to the create methods
      MyBase.PostValidateUpdateParameters(pParameterList)
    End Sub

    Protected Overrides Sub PostValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      'Add code here to validate parameters passed to the update methods
      MyBase.PostValidateUpdateParameters(pParameterList)
    End Sub
  End Class


End Namespace
