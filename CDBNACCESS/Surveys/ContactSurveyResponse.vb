Namespace Access

  Public Class ContactSurveyResponse
    Inherits CARERecord
    Implements IRecordCreate

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum ContactSurveyResponseFields
      AllFields = 0
      ContactSurveyNumber
      CreatedBy
      CreatedOn
      ResponseAnswerText
      SurveyAnswerNumber
      SurveyQuestionNumber
      SurveyResponseNumber
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("contact_survey_number", CDBField.FieldTypes.cftLong)
        .Add("created_by")
        .Add("created_on", CDBField.FieldTypes.cftDate)
        .Add("response_answer_text", CDBField.FieldTypes.cftMemo)
        .Add("survey_answer_number", CDBField.FieldTypes.cftLong)
        .Add("survey_question_number", CDBField.FieldTypes.cftLong)
        .Add("survey_response_number", CDBField.FieldTypes.cftLong)

        .Item(ContactSurveyResponseFields.SurveyResponseNumber).PrimaryKey = True
        .SetControlNumberField(ContactSurveyResponseFields.SurveyResponseNumber, "RA")
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "csr"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "contact_survey_responses"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ContactSurveyResponseFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ContactSurveyResponseFields.AmendedOn).Value
      End Get
    End Property
    Public ReadOnly Property ContactSurveyNumber() As Integer
      Get
        Return mvClassFields(ContactSurveyResponseFields.ContactSurveyNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(ContactSurveyResponseFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(ContactSurveyResponseFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property ResponseAnswerText() As String
      Get
        Return mvClassFields(ContactSurveyResponseFields.ResponseAnswerText).Value
      End Get
    End Property
    Public ReadOnly Property SurveyAnswerNumber() As Integer
      Get
        Return mvClassFields(ContactSurveyResponseFields.SurveyAnswerNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property SurveyQuestionNumber() As Integer
      Get
        Return mvClassFields(ContactSurveyResponseFields.SurveyQuestionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property SurveyResponseNumber() As Integer
      Get
        Return mvClassFields(ContactSurveyResponseFields.SurveyResponseNumber).IntegerValue
      End Get
    End Property
#End Region

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      Dim vTrans As Boolean = False

      Try
        Dim vSurvey As New Survey(mvEnv)
        Dim vSurveyVersion As New SurveyVersion(mvEnv)
        vSurvey.Init()
        vSurveyVersion.Init()

        Dim vContactSurvey As New ContactSurvey(mvEnv)
        vContactSurvey.Init(ContactSurveyNumber)

        Dim vContact As New Contact(mvEnv)
        vContact.Init()

        Dim vRespondedDate As String = TodaysDate()

        Dim vCategory As ContactCategory = Nothing
        If vContactSurvey.Existing Then
          vSurvey.Init(vContactSurvey.SurveyNumber)
          vSurveyVersion.Init(vContactSurvey.SurveyVersionNumber)
          If IsDate(vContactSurvey.CompletedOn) Then vRespondedDate = vContactSurvey.CompletedOn

          If vSurvey.RespondedActivity.Length > 0 AndAlso vSurvey.RespondedActivityValue.Length > 0 Then
            'As the Responded Category is set on a Contact as each question is answered, find existing Category and update the valid from / to dates
            vCategory = vContactSurvey.GetRespondedContactCategory(vSurvey.RespondedActivity, vSurvey.RespondedActivityValue, vSurveyVersion)
          End If
        End If

        vTrans = mvEnv.Connection.StartTransaction()

        MyBase.Save(pAmendedBy, pAudit, pJournalNumber)

        If vSurvey.RespondedActivity.Length > 0 AndAlso vSurvey.RespondedActivityValue.Length > 0 Then
          If vCategory IsNot Nothing Then
            If vCategory.Existing Then
              'Update existing Category
              vCategory.Update(vRespondedDate, vRespondedDate)
              If vCategory.IsValidForUpdate Then vCategory.Save(mvEnv.User.UserID, pAudit)
            Else
              'Create a new record
              vCategory.SaveActivity(ContactCategory.ActivityEntryStyles.aesSmartClient, vContactSurvey.ContactNumber, vSurvey.RespondedActivity, vSurvey.RespondedActivityValue, vSurveyVersion.Source, vRespondedDate, vRespondedDate)
            End If
          End If
        End If

        If vTrans Then mvEnv.Connection.CommitTransaction()

      Catch vEX As Exception
        If vTrans Then mvEnv.Connection.RollbackTransaction()
        Throw vEX
      End Try
    End Sub

    Public Overloads Sub Init(ByVal pContactSurveyNumber As Integer, ByVal pSurveyQuestionNumber As Integer, ByVal pSurveyAnswerNumber As Integer)
      CheckClassFields()
      Dim vWhereFields As New CDBFields
      vWhereFields.Add(mvClassFields(ContactSurveyResponseFields.ContactSurveyNumber).Name, pContactSurveyNumber)
      vWhereFields.Add(mvClassFields(ContactSurveyResponseFields.SurveyQuestionNumber).Name, pSurveyQuestionNumber)
      vWhereFields.Add(mvClassFields(ContactSurveyResponseFields.SurveyAnswerNumber).Name, pSurveyAnswerNumber)
      InitWithPrimaryKey(vWhereFields)
    End Sub
    Public Function CreateInstance(ByVal pEnv As CDBEnvironment) As CARERecord Implements IRecordCreate.CreateInstance
      Return New ContactSurveyResponse(pEnv)
    End Function

    Public Shared Function CreateInstance(ByVal pEnv As CDBEnvironment, ByVal pParameterList As CDBParameters) As ContactSurveyResponse
      Dim vContactSurveyResponse As New ContactSurveyResponse(pEnv)
      vContactSurveyResponse.ValidateParameters(pParameterList)
      vContactSurveyResponse.Init(pParameterList)
      Return vContactSurveyResponse
    End Function
#Region "Validation"
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="pParameterList"></param>
    ''' <remarks></remarks>
    Public Sub ValidateParameters(ByVal pParameterList As CDBParameters)
      'Mandatory
      ValidateContactSurveyNumberParameter(pParameterList)
      'Optional
      ValidateResponseAnswerTextParameter(pParameterList)
    End Sub


    ''' <summary>
    ''' Validate SurveyNumber for Create Contact Survey
    ''' </summary>
    ''' <param name="pParameterList"></param>
    ''' <remarks>Survey Number must exist to create a contact Survey, but not for update.</remarks>
    Public Sub ValidateContactSurveyNumberParameter(ByVal pParameterList As CDBParameters)
      Dim vContactSurvey As ContactSurvey = ContactSurvey.CreateInstance(mvEnv, pParameterList)
      If Not vContactSurvey.Existing Then
        RaiseError(DataAccessErrors.daeContactSurveyNumberInvalid)
      End If

    End Sub


    Public Sub ValidateUpdateSurveyQuestion(ByVal pParameterList As CDBParameters)
      Dim vSurveyQuestion As SurveyQuestion = SurveyQuestion.CreateInstance(mvEnv, pParameterList)
      If Not vSurveyQuestion.Existing Then
        RaiseError(DataAccessErrors.daeSurveyQuestionNumberInvalid)
        If vSurveyQuestion.SurveyQuestionNumber <> Me.SurveyQuestionNumber Then
          RaiseError(DataAccessErrors.daeSurveyAnswerNumberInvalid)
        End If
      End If
    End Sub

    Public Sub ValidateCreateSurveyAnswer(ByVal pParameterList As CDBParameters)
      Dim vContactSurvey As ContactSurvey = ContactSurvey.CreateInstance(mvEnv, pParameterList)
      If Not vContactSurvey.Existing() Then
        RaiseError(DataAccessErrors.daeContactSurveyNumberInvalid)
      End If
      Dim vSurvey As New Survey(mvEnv)
      vSurvey.Init(vContactSurvey.SurveyNumber)
      If Not vSurvey.Existing Then
        RaiseError(DataAccessErrors.daeSurveyQuestionNumberInvalid)
      End If
      Dim vSurveyQuestion As SurveyQuestion = SurveyQuestion.CreateInstance(mvEnv, pParameterList)
      If Not vSurveyQuestion.Existing Then
        RaiseError(DataAccessErrors.daeSurveyQuestionNumberInvalid)
      End If
      If vSurveyQuestion.SurveyNumber <> vSurvey.SurveyNumber Then
        RaiseError(DataAccessErrors.daeSurveyQuestionNumberInvalid)
      End If
      Dim vSurveyAnswer As SurveyAnswer = SurveyAnswer.CreateInstance(mvEnv, pParameterList)
      If Not vSurveyAnswer.Existing Then
        RaiseError(DataAccessErrors.daeSurveyAnswerNumberInvalid)
      End If
      If vSurveyAnswer.SurveyQuestionNumber <> vSurveyQuestion.SurveyQuestionNumber Then
        RaiseError(DataAccessErrors.daeSurveyAnswerNumberInvalid)
      End If
    End Sub

    Public Sub ValidateCreateSurveyQuestion(ByVal pParameterList As CDBParameters)
      'Validated by validate  Create Survey answer, have to go throught the qwuestion to get to the answer. Not implemented.
    End Sub

    Public Sub ValidateUpdateSurveyAnswer(ByVal pParameterList As CDBParameters)
      Dim vSurveyAnswer As SurveyAnswer = SurveyAnswer.CreateInstance(mvEnv, pParameterList)
      If Not vSurveyAnswer.Existing Then
        RaiseError(DataAccessErrors.daeSurveyAnswerNumberInvalid)
      End If
      If vSurveyAnswer.SurveyAnswerNumber <> Me.SurveyAnswerNumber Then
        RaiseError(DataAccessErrors.daeSurveyAnswerNumberInvalid)
      End If
      If vSurveyAnswer.SurveyQuestionNumber <> Me.SurveyQuestionNumber Then
        RaiseError(DataAccessErrors.daeSurveyQuestionNumberInvalid)
      End If
    End Sub

    Public Sub ValidateResponseAnswerTextParameter(ByVal pParameterList As CDBParameters)
      Dim vSurveyAnswer As New SurveyAnswer(mvEnv)
      vSurveyAnswer.Init(pParameterList("SurveyAnswerNumber").IntegerValue)
      vSurveyAnswer.ValidatePersistedAnswerType()
      Dim vSurveyQuestion As New SurveyQuestion(mvEnv)
      vSurveyQuestion.Init(vSurveyAnswer.SurveyQuestionNumber)

      If pParameterList.Exists("ResponseAnswerText") Then
        If pParameterList("ResponseAnswerText").Value.Trim.Length = 0 Then
          RaiseError(DataAccessErrors.daeSurveyResponseAnswerInvalid)
        End If
        Select Case vSurveyAnswer.AnswerDataType.Trim
          Case "Y" 'Y/N
            If Not (vSurveyQuestion.AnswerType = "S") Then
              ValidateYNAnswerType(pParameterList("ResponseAnswerText").Value, vSurveyAnswer)
            End If
          Case "I" 'Integer
            ValidateIntegerAnswerType(pParameterList("ResponseAnswerText").Value, vSurveyAnswer)
          Case "N" 'Numeric
            ValidateNumericAnswerType(pParameterList("ResponseAnswerText").Value, vSurveyAnswer)
          Case "A" 'Alpha
            ValidateAlphaAnswerType(pParameterList("ResponseAnswerText").Value, vSurveyAnswer)
          Case "C" 'Char
            ValidateCharAnswerType(pParameterList("ResponseAnswerText").Value, vSurveyAnswer)
          Case "D" 'Date
            ValidateDateAnswerType(pParameterList("ResponseAnswerText").Value, vSurveyAnswer)
          Case "T" 'Time
            ValidateTimeAnswerType(pParameterList("ResponseAnswerText").Value, vSurveyAnswer)
          Case "L" 'List
            ValidateListAnswerType(pParameterList("ResponseAnswerText").Value, vSurveyAnswer)
          Case Else
            RaiseError(DataAccessErrors.daeSurveyResponseAnswerDataTypeInvalid)
        End Select
      End If
    End Sub

    Public Sub ValidateYNAnswerType(pResponse As String, pSurveyAnswer As SurveyAnswer)
      If Not (pResponse.Trim = "Y" Or pResponse.Trim = "YES" Or pResponse.Trim = "N" Or pResponse.TrimEnd = "NO") Then 'BR20679 YES|NO hard coded in Smart Client since 2010.
        RaiseError(DataAccessErrors.daeSurveyResponseNotYorN)
      End If
    End Sub
    Public Sub ValidateIntegerAnswerType(pResponse As String, pSurveyAnswer As SurveyAnswer)
      Dim vMinInteger As Integer
      Dim vMaxInteger As Integer
      Dim vResponseInteger As Integer
      If Not Integer.TryParse(pResponse.Trim, vResponseInteger) Then
        RaiseError(DataAccessErrors.daeSurveyResponseIsNotaValidInteger)
      End If
      If pSurveyAnswer.MinimumValue.Length > 0 Then
        vMinInteger = Integer.Parse(pSurveyAnswer.MinimumValue)
        If vResponseInteger < vMinInteger Then
          RaiseError(DataAccessErrors.daeSurveyResponseValueLessThanMinimum)
        End If
      End If
      If pSurveyAnswer.MaximumValue.Length > 0 Then
        vMaxInteger = Integer.Parse(pSurveyAnswer.MaximumValue)
        If vResponseInteger > vMaxInteger Then
          RaiseError(DataAccessErrors.daeSurveyResponseValueGreaterThanMaximum)
        End If
      End If
    End Sub
    Public Sub ValidateNumericAnswerType(pResponse As String, pSurveyAnswer As SurveyAnswer)
      Dim vMinDouble As Double
      Dim vMaxDouble As Double
      Dim vResponseDouble As Double
      If Not Double.TryParse(pResponse.Trim, vResponseDouble) Then
        RaiseError(DataAccessErrors.daeSurveyResponseIsNotaValidNumber)
      End If
      If pSurveyAnswer.MinimumValue.Length > 0 Then
        vMinDouble = Double.Parse(pSurveyAnswer.MinimumValue)
        If vResponseDouble < vMinDouble Then
          RaiseError(DataAccessErrors.daeSurveyResponseValueLessThanMinimum)
        End If
      End If
      If pSurveyAnswer.MaximumValue.Length > 0 Then
        vMaxDouble = Double.Parse(pSurveyAnswer.MaximumValue)
        If vResponseDouble > vMaxDouble Then
          RaiseError(DataAccessErrors.daeSurveyResponseValueGreaterThanMaximum)
        End If
      End If
    End Sub
    Public Sub ValidateAlphaAnswerType(pResponse As String, pSurveyAnswer As SurveyAnswer)
      'No validation required
    End Sub
    ''' <summary>
    ''' Char type can only contain A- Z only.
    ''' </summary>
    ''' <param name="pResponse"></param>
    ''' <param name="pSurveyAnswer"></param>
    ''' <remarks></remarks>
    Public Sub ValidateCharAnswerType(pResponse As String, pSurveyAnswer As SurveyAnswer)
      If Not IsOnlyAlpha(pResponse) Then
        RaiseError(DataAccessErrors.daeSurveyResponseIsNotaValidCharacter)
      End If
    End Sub
    Public Sub ValidateDateAnswerType(pResponse As String, pSurveyAnswer As SurveyAnswer)
      Dim vMinDate As Date
      Dim vMaxDate As Date
      Dim vResponseDate As Date
      If Not Date.TryParse(pResponse.Trim, vResponseDate) Then
        RaiseError(DataAccessErrors.daeSurveyResponseIsNotaValidDate)
      End If
      If pSurveyAnswer.MinimumValue.Length > 0 Then
        vMinDate = Date.Parse(pSurveyAnswer.MinimumValue)
        If vResponseDate < vMinDate Then
          RaiseError(DataAccessErrors.daeSurveyResponseValueLessThanMinimum)
        End If
      End If
      If pSurveyAnswer.MaximumValue.Length > 0 Then
        vMaxDate = Date.Parse(pSurveyAnswer.MaximumValue)
        If vResponseDate > vMaxDate Then
          RaiseError(DataAccessErrors.daeSurveyResponseValueGreaterThanMaximum)
        End If
      End If
    End Sub
    Public Sub ValidateTimeAnswerType(pResponse As String, pSurveyAnswer As SurveyAnswer)
      Dim vMinTime As TimeSpan
      Dim vMaxTime As TimeSpan
      Dim vResponseTime As TimeSpan
      If Not TimeSpan.TryParse(pResponse.Trim, vResponseTime) Then
        RaiseError(DataAccessErrors.daeSurveyResponseIsNotaValidTime)
      End If
      If vResponseTime.Days >= 1 Then
        RaiseError(DataAccessErrors.daeSurveyResponseIsNotaValidTime)
      End If
      If pSurveyAnswer.MinimumValue.Length > 0 Then
        vMinTime = TimeSpan.Parse(pSurveyAnswer.MinimumValue)
        If vResponseTime < vMinTime Then
          RaiseError(DataAccessErrors.daeSurveyResponseValueLessThanMinimum)
        End If
      End If
      If pSurveyAnswer.MaximumValue.Length > 0 Then
        vMaxTime = TimeSpan.Parse(pSurveyAnswer.MaximumValue)
        If vResponseTime > vMaxTime Then
          RaiseError(DataAccessErrors.daeSurveyResponseValueGreaterThanMaximum)
        End If
      End If
    End Sub

    Public Sub ValidateListAnswerType(pResponse As String, pSurveyAnswer As SurveyAnswer)
      If pSurveyAnswer.ListValues.Contains(",") Then
        Dim vListItems As Array = pSurveyAnswer.ListValues.Replace(", ", ",").ToUpper().Split(CChar(","))
        If Not Array.IndexOf(vListItems, pResponse.ToUpper.Trim) >= 0 Then
          RaiseError(DataAccessErrors.daeResponseNotInListOfValidResponses)
        End If
      Else
        'Only one value in the list
        If pResponse.Trim <> pSurveyAnswer.ListValues.Trim Then
          RaiseError(DataAccessErrors.daeResponseNotInListOfValidResponses)
        End If
      End If
    End Sub



    Public Overrides Sub PreValidateParameterList(ByVal pType As MaintenanceTypes, ByVal pParameterList As CDBParameters)
      'Add code here to validate parameters passed to the create methods
      MyBase.PreValidateParameterList(pType, pParameterList)
    End Sub
    Protected Overrides Sub PreValidateCreateParameters(ByVal pParameterList As CDBParameters)
      'Add code here to validate parameters passed to the create methods
      ValidateCreateSurveyAnswer(pParameterList)
      ValidateParameters(pParameterList)
    End Sub

    Protected Overrides Sub PreValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      'Add code here to validate parameters passed to the update methods
      ValidateUpdateSurveyQuestion(pParameterList)
      ValidateUpdateSurveyAnswer(pParameterList)
      ValidateParameters(pParameterList)
    End Sub

    Protected Overrides Sub PostValidateCreateParameters(ByVal pParameterList As CDBParameters)
      'Add code here to validate parameters passed to the create methods
      MyBase.PostValidateCreateParameters(pParameterList)
    End Sub

    Protected Overrides Sub PostValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      'Add code here to validate parameters passed to the update methods
      MyBase.PostValidateUpdateParameters(pParameterList)
    End Sub
#End Region
  End Class
End Namespace
