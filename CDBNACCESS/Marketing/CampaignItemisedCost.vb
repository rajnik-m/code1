Namespace Access

  Public Class CampaignItemisedCost
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum CampaignItemisedCostFields
      AllFields = 0
      CampaignCostNumber
      Campaign
      Appeal
      SegmentCollection
      CollectionNumber
      CampaignCostType
      Amount
      Notes
      AmendedBy
      AmendedOn
    End Enum

'--------------------------------------------------
'Required overrides for the class
'--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("campaign_cost_number")
        .Add("campaign")
        .Add("appeal")
        .Add("segment_collection")
        .Add("collection_number")
        .Add("campaign_cost_type")
        .Add("amount", CDBField.FieldTypes.cftNumeric)
        .Add("notes", CDBField.FieldTypes.cftMemo)

        .Item(CampaignItemisedCostFields.CampaignCostNumber).PrimaryKey = True
        .SetControlNumberField(CampaignItemisedCostFields.CampaignCostNumber, "CT")

        .Item(CampaignItemisedCostFields.Campaign).NonUpdatable = True
        .Item(CampaignItemisedCostFields.Appeal).NonUpdatable = True
        .Item(CampaignItemisedCostFields.SegmentCollection).NonUpdatable = True
        .Item(CampaignItemisedCostFields.CollectionNumber).NonUpdatable = True

      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "cic"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "campaign_itemised_costs"
      End Get
    End Property

'--------------------------------------------------
'Default constructor
'--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property CampaignCostNumber() As Integer
      Get
        Return mvClassFields(CampaignItemisedCostFields.CampaignCostNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property Campaign() As String
      Get
        Return mvClassFields(CampaignItemisedCostFields.Campaign).Value
      End Get
    End Property
    Public ReadOnly Property Appeal() As String
      Get
        Return mvClassFields(CampaignItemisedCostFields.Appeal).Value
      End Get
    End Property
    Public ReadOnly Property SegmentCollection() As String
      Get
        Return mvClassFields(CampaignItemisedCostFields.SegmentCollection).Value
      End Get
    End Property
    Public ReadOnly Property CollectionNumber() As Integer
      Get
        Return mvClassFields(CampaignItemisedCostFields.CollectionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property CampaignCostType() As String
      Get
        Return mvClassFields(CampaignItemisedCostFields.CampaignCostType).Value
      End Get
    End Property
    Public ReadOnly Property Amount() As Double
      Get
        Return mvClassFields(CampaignItemisedCostFields.Amount).DoubleValue
      End Get
    End Property
    Public ReadOnly Property Notes() As String
      Get
        Return mvClassFields(CampaignItemisedCostFields.Notes).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(CampaignItemisedCostFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(CampaignItemisedCostFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Public Overrides Function GetAddRecordMandatoryParameters() As String
      Return "Campaign,CampaignCostType,Amount"
    End Function

    Protected Overrides Sub PreValidateCreateParameters(ByVal pParams As CDBParameters)
      MyBase.PreValidateCreateParameters(pParams)
      If pParams.Exists("Segment") Then
        pParams.Add("SegmentCollection", pParams("Segment").Value)
        if pParams.Exists("CollectionNumber") then pParams.Remove("CollectionNumber")
      ElseIf pParams.Exists("CollectionNumber") Then
        Dim vAppealCollection As New AppealCollection(mvEnv)
        MyBase.ValidateRecordExists(pParams("CollectionNumber").LongValue, "Collection", vAppealCollection)
        If vAppealCollection.Campaign <> pParams("Campaign").Value OrElse vAppealCollection.Appeal <> pParams("Appeal").Value Then RaiseError(DataAccessErrors.daeRecordDoesNotExists, "Collection")
        pParams.Add("SegmentCollection", vAppealCollection.Collection)
      End If
    End Sub

    Private Sub CalculateTotalItemisedCost(ByVal pDelete As Boolean)
      Dim vWhereFields As New CDBFields
      vWhereFields.Add("campaign", Campaign)
      If Appeal.Length > 0 Then vWhereFields.Add("appeal", Appeal)
      If SegmentCollection.Length > 0 Then vWhereFields.Add("segment_collection", SegmentCollection)

      Dim vUpdateSQL As New StringBuilder
      vUpdateSQL.Append("(SELECT")
      vUpdateSQL.Append(mvEnv.Connection.DBIsNull("SUM(amount)", "0"))
      If pDelete = False Then
        vUpdateSQL.Append("+ ")
        vUpdateSQL.Append(Amount.ToString)
      End If
      vUpdateSQL.Append(" AS amount FROM campaign_itemised_costs WHERE {0} AND ")
      vUpdateSQL.Append(mvEnv.Connection.WhereClause(New CDBFields(New CDBField("campaign_cost_number", CampaignCostNumber, CDBField.FieldWhereOperators.fwoNotEqual))))
      vUpdateSQL.Append(" )")
      Dim vUpdateFields As New CDBFields
      vUpdateFields.Add("total_itemised_cost", CDBField.FieldTypes.cftInteger)

      With vWhereFields
        If SegmentCollection.Length > 0 Then
          vUpdateFields("total_itemised_cost").Value = String.Format(vUpdateSQL.ToString, mvEnv.Connection.WhereClause(vWhereFields))
          .Remove("segment_collection")
          If CollectionNumber > 0 Then
            'Collection Level Itemised Cost Calculation
            .Add("collection", SegmentCollection)
            mvEnv.Connection.UpdateRecords("appeal_collections", vUpdateFields, vWhereFields, False)
            .Remove("collection")
          Else
            'Segment Level Itemised Cost Calculation
            .Add("segment", SegmentCollection)
            mvEnv.Connection.UpdateRecords("segments", vUpdateFields, vWhereFields, False)
            .Remove("segment")
          End If
        End If

        If Appeal.Length > 0 Then
          'Appeal Level Itemised Cost Calculation
          vUpdateFields("total_itemised_cost").Value = String.Format(vUpdateSQL.ToString, mvEnv.Connection.WhereClause(vWhereFields))
          mvEnv.Connection.UpdateRecords("appeals", vUpdateFields, vWhereFields, False)
          .Remove("appeal")
        End If

        'Campaign Level Itemised Cost Calculation
        vUpdateFields("total_itemised_cost").Value = String.Format(vUpdateSQL.ToString, mvEnv.Connection.WhereClause(vWhereFields))
        mvEnv.Connection.UpdateRecords("campaigns", vUpdateFields, vWhereFields, False)
      End With
    End Sub

    Public Overrides Sub Save(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      mvEnv.Connection.StartTransaction()
      CalculateTotalItemisedCost(False)
      MyBase.Save(pAmendedBy, pAudit, pJournalNumber)
      mvEnv.Connection.CommitTransaction()
    End Sub

    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      mvEnv.Connection.StartTransaction()
      CalculateTotalItemisedCost(True)
      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
      mvEnv.Connection.CommitTransaction()
    End Sub

#End Region
  End Class
End Namespace
