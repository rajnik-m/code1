Imports CARE.Access.AccessRights

Namespace Access

  Public Class Action
    Inherits CARERecord

    Private Const DEFAULT_DURATION As Integer = 30

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum ActionFields
      AllFields = 0
      ActionNumber
      MasterAction
      ActionLevel
      SequenceNumber
      ActionDesc
      ActionText
      ActionPriority
      ActionStatus
      DocumentClass
      CreatedBy
      CreatedOn
      DurationDays
      DurationHours
      DurationMinutes
      Deadline
      ScheduledOn
      CompletedOn
      RepeatCount
      DelayedActivation
      ActionerSetting
      ManagerSetting
      OutlookId
      UseNegativeOffsets
      UseWorkingDays
      ActionTemplateNumber
      DelayDays
      DelayMonths
      DeadlineDays
      DeadlineMonths
      RepeatDays
      RepeatMonths
      ActionChangeReason      'This is not actually an attribute in the DB but here to force creation of amendment history for it
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("action_number", CDBField.FieldTypes.cftLong)
        .Add("master_action", CDBField.FieldTypes.cftLong)
        .Add("action_level", CDBField.FieldTypes.cftInteger)
        .Add("sequence_number", CDBField.FieldTypes.cftInteger)
        .Add("action_desc")
        .Add("action_text", CDBField.FieldTypes.cftMemo)
        .Add("action_priority")
        .Add("action_status")
        .Add("document_class")
        .Add("created_by").PrefixRequired = True
        .Add("created_on", CDBField.FieldTypes.cftDate).PrefixRequired = True
        .Add("duration_days", CDBField.FieldTypes.cftInteger)
        .Add("duration_hours", CDBField.FieldTypes.cftInteger)
        .Add("duration_minutes", CDBField.FieldTypes.cftInteger)
        .Add("deadline", CDBField.FieldTypes.cftTime)
        .Add("scheduled_on", CDBField.FieldTypes.cftTime)
        .Add("completed_on", CDBField.FieldTypes.cftTime)
        .Add("repeat_count", CDBField.FieldTypes.cftInteger)
        .Add("delayed_activation")
        .Add("actioner_setting")
        .Add("manager_setting")
        .Add("outlook_id", CDBField.FieldTypes.cftCharacter)
        .Add("use_negative_offsets")
        .Add("use_working_days")
        .Add("action_template_number", CDBField.FieldTypes.cftInteger)
        .Add("delay_days", CDBField.FieldTypes.cftInteger)
        .Add("delay_months", CDBField.FieldTypes.cftInteger)
        .Add("deadline_days", CDBField.FieldTypes.cftInteger)
        .Add("deadline_months", CDBField.FieldTypes.cftInteger)
        .Add("repeat_days", CDBField.FieldTypes.cftInteger)
        .Add("repeat_months", CDBField.FieldTypes.cftInteger)
        .Add("action_change_reason").InDatabase = False

        .SetControlNumberField(ActionFields.ActionNumber, "AC")
        .Item(ActionFields.ActionNumber).PrimaryKey = True
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "ac"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "actions"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property ActionNumber() As Integer
      Get
        Return mvClassFields(ActionFields.ActionNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property MasterAction() As Integer
      Get
        Return mvClassFields(ActionFields.MasterAction).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ActionLevel() As Integer
      Get
        Return mvClassFields(ActionFields.ActionLevel).IntegerValue
      End Get
    End Property
    Public ReadOnly Property SequenceNumber() As Integer
      Get
        Return mvClassFields(ActionFields.SequenceNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ActionDesc() As String
      Get
        Return mvClassFields(ActionFields.ActionDesc).Value
      End Get
    End Property
    Public ReadOnly Property ActionText() As String
      Get
        Return mvClassFields(ActionFields.ActionText).Value
      End Get
    End Property
    Public ReadOnly Property ActionPriority() As String
      Get
        Return mvClassFields(ActionFields.ActionPriority).Value
      End Get
    End Property
    Public ReadOnly Property ActionStatusCode() As String
      Get
        Return mvClassFields(ActionFields.ActionStatus).Value
      End Get
    End Property
    Public ReadOnly Property DocumentClass() As String
      Get
        Return mvClassFields(ActionFields.DocumentClass).Value
      End Get
    End Property
    Public ReadOnly Property CreatedBy() As String
      Get
        Return mvClassFields(ActionFields.CreatedBy).Value
      End Get
    End Property
    Public ReadOnly Property CreatedOn() As String
      Get
        Return mvClassFields(ActionFields.CreatedOn).Value
      End Get
    End Property
    Public ReadOnly Property DurationDays() As Integer
      Get
        Return mvClassFields(ActionFields.DurationDays).IntegerValue
      End Get
    End Property
    Public ReadOnly Property DurationHours() As Integer
      Get
        Return mvClassFields(ActionFields.DurationHours).IntegerValue
      End Get
    End Property
    Public ReadOnly Property DurationMinutes() As Integer
      Get
        Return mvClassFields(ActionFields.DurationMinutes).IntegerValue
      End Get
    End Property
    Public ReadOnly Property OutlookId() As String
      Get
        Return mvClassFields(ActionFields.OutlookId).Value
      End Get
    End Property
    Public Property Deadline() As String
      Get
        Return mvClassFields(ActionFields.Deadline).Value
      End Get
      Set(ByVal Value As String)
        If Value.Length > 0 Then
          mvClassFields.Item(ActionFields.Deadline).Value = CDate(Value).ToString(CAREDateTimeFormat)
        Else
          mvClassFields.Item(ActionFields.Deadline).Value = Value
        End If
      End Set
    End Property
    Public ReadOnly Property ScheduledOn() As String
      Get
        Return mvClassFields(ActionFields.ScheduledOn).Value
      End Get
    End Property
    Public ReadOnly Property CompletedOn() As String
      Get
        Return mvClassFields(ActionFields.CompletedOn).Value
      End Get
    End Property
    Public ReadOnly Property RepeatCount() As Integer
      Get
        Return mvClassFields(ActionFields.RepeatCount).IntegerValue
      End Get
    End Property
    Public ReadOnly Property DelayedActivation() As Boolean
      Get
        Return mvClassFields(ActionFields.DelayedActivation).Bool
      End Get
    End Property
    Public Property ActionerSetting() As ActionerManagerSettings
      Get
        Select Case mvClassFields.Item(ActionFields.ActionerSetting).Value
          Case AMS_ASK
            Return ActionerManagerSettings.amsAsk
          Case AMS_DEFINED
            Return ActionerManagerSettings.amsAsDefined
          Case Else
            Return ActionerManagerSettings.amsAsCreator
        End Select
      End Get
      Set(ByVal Value As ActionerManagerSettings)
        Select Case Value
          Case ActionerManagerSettings.amsAsk
            mvClassFields.Item(ActionFields.ActionerSetting).Value = AMS_ASK
          Case ActionerManagerSettings.amsAsCreator
            mvClassFields.Item(ActionFields.ActionerSetting).Value = AMS_CREATOR
          Case ActionerManagerSettings.amsAsDefined
            mvClassFields.Item(ActionFields.ActionerSetting).Value = AMS_DEFINED
        End Select
      End Set
    End Property
    Public Property ManagerSetting() As ActionerManagerSettings
      Get
        Select Case mvClassFields.Item(ActionFields.ManagerSetting).Value
          Case AMS_ASK
            Return ActionerManagerSettings.amsAsk
          Case AMS_CREATOR
            Return ActionerManagerSettings.amsAsCreator
          Case Else
            Return ActionerManagerSettings.amsAsDefined
        End Select
      End Get
      Set(ByVal Value As ActionerManagerSettings)
        Select Case Value
          Case ActionerManagerSettings.amsAsk
            mvClassFields.Item(ActionFields.ManagerSetting).Value = AMS_ASK
          Case ActionerManagerSettings.amsAsCreator
            mvClassFields.Item(ActionFields.ManagerSetting).Value = AMS_CREATOR
          Case ActionerManagerSettings.amsAsDefined
            mvClassFields.Item(ActionFields.ManagerSetting).Value = AMS_DEFINED
        End Select
      End Set
    End Property
    ''' <summary>When creating new Actions from a template, controls whether the deadline or delay days and months will be treated as positive or negative values.</summary>
    ''' <returns>True if deadline or delay day and month values should be treated as negative values, otherwise False.</returns>
    Public ReadOnly Property UseNegativeOffsets() As Boolean
      Get
        Return mvClassFields.Item(ActionFields.UseNegativeOffsets).Bool
      End Get
    End Property
    ''' <summary>When creating new Actions from a template, controls whether the date calculations will use elapsed days or working days.</summary>
    ''' <returns>True if the date calculations will use working days, otherwise False.</returns>
    ''' <remarks>When set to use working days, weekend and bank holiday days are excluded and the resultant date will always be a weekday.</remarks>
    Public ReadOnly Property UseWorkingDays() As Boolean
      Get
        Return mvClassFields.Item(ActionFields.UseWorkingDays).Bool
      End Get
    End Property
    ''' <summary>When the Action has been created from a template, this will show the <see cref="ActionNumber">Action Number</see> of the template.</summary>
    ''' <returns>Action number of the template used to create this Action, otherwise 0.</returns>
    Public ReadOnly Property ActionTemplateNumber() As Integer
      Get
        Return mvClassFields.Item(ActionFields.ActionTemplateNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property DeadlineDays As Nullable(Of Integer)
      'This could be null and need to know if it is null
      Get
        If mvClassFields.Item(ActionFields.DeadlineDays).Value.Length > 0 Then
          Return mvClassFields.Item(ActionFields.DeadlineDays).IntegerValue
        Else
          Return Nothing
        End If
      End Get
    End Property
    Public ReadOnly Property DeadlineMonths As Nullable(Of Integer)
      'This could be null and need to know if it is null
      Get
        If mvClassFields.Item(ActionFields.DeadlineMonths).Value.Length > 0 Then
          Return mvClassFields.Item(ActionFields.DeadlineMonths).IntegerValue
        Else
          Return Nothing
        End If
      End Get
    End Property
    Public ReadOnly Property DelayDays As Nullable(Of Integer)
      'This could be null and need to know if it is null
      Get
        If mvClassFields.Item(ActionFields.DelayDays).Value.Length > 0 Then
          Return (mvClassFields.Item(ActionFields.DelayDays).IntegerValue)
        Else
          Return Nothing
        End If
      End Get
    End Property
    Public ReadOnly Property DelayMonths As Nullable(Of Integer)
      'This could be null and need to know if it is null
      Get
        If mvClassFields.Item(ActionFields.DelayMonths).Value.Length > 0 Then
          Return mvClassFields.Item(ActionFields.DelayMonths).IntegerValue
        Else
          Return Nothing
        End If
      End Get
    End Property
    Public ReadOnly Property RepeatDays As Nullable(Of Integer)
      'This could be null and need to know if it is null
      Get
        If mvClassFields.Item(ActionFields.RepeatDays).Value.Length > 0 Then
          Return mvClassFields.Item(ActionFields.RepeatDays).IntegerValue
        Else
          Return Nothing
        End If
      End Get
    End Property
    Public ReadOnly Property RepeatMonths As Nullable(Of Integer)
      'This could be null and need to know if it is null
      Get
        If mvClassFields.Item(ActionFields.RepeatMonths).Value.Length > 0 Then
          Return mvClassFields.Item(ActionFields.RepeatMonths).IntegerValue
        Else
          Return Nothing
        End If
      End Get
    End Property
    Private ReadOnly Property ActionChangeReason() As String
      Get
        Return mvClassFields.Item(ActionFields.ActionChangeReason).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(ActionFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(ActionFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Private Const VC_HOURS_IN_DAY As Integer = 24
    Private Const VC_MINS_IN_DAY As Integer = 1440

    Private mvLinks As List(Of IActionLink)
    Private mvIgnoreWeekend As Boolean
    Private mvIgnoreWorkingDay As Boolean
    Private mvIgnoreLunch As Boolean
    Private mvToBeDeleted As Boolean = False

    'These two properties are used to display descriptions when creating provisional actions from templates
    Friend Property ActionPriorityDescription As String
    Friend Property ActionStatusDescription As String

    Public Enum ActionStatuses
      astInactive         'INAC
      astDefined          'DEF
      astProForma         'PROF
      astScheduled        'SCH
      astCompleted        'COMP
      astOverdue          'OVDE
      astCancelled        'CANC
    End Enum

    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      mvClassFields.Item(ActionFields.CreatedOn).Value = TodaysDate()
      mvClassFields.Item(ActionFields.CreatedBy).Value = mvEnv.User.UserID
      mvClassFields.Item(ActionFields.ActionStatus).Value = GetActionStatusCode(ActionStatuses.astDefined)
      mvClassFields.Item(ActionFields.ActionPriority).Value = "1"
      mvClassFields.Item(ActionFields.ActionLevel).Value = "1"
      mvClassFields.Item(ActionFields.UseNegativeOffsets).Value = "N"
      mvClassFields.Item(ActionFields.UseWorkingDays).Value = "N"
    End Sub

    Protected Overrides Sub SetValid()
      MyBase.SetValid()
      If MasterAction = 0 Then
        mvClassFields.Item(ActionFields.MasterAction).IntegerValue = ActionNumber
        mvClassFields.Item(ActionFields.ActionLevel).Value = "1"
        mvClassFields.Item(ActionFields.SequenceNumber).Value = "1"
      End If
      If ActionTemplateNumber > 0 Then
        'These fields are only set on the Template itself
        mvClassFields.Item(ActionFields.DeadlineDays).Value = String.Empty
        mvClassFields.Item(ActionFields.DeadlineMonths).Value = String.Empty
        mvClassFields.Item(ActionFields.DelayDays).Value = String.Empty
        mvClassFields.Item(ActionFields.DelayMonths).Value = String.Empty
        mvClassFields.Item(ActionFields.RepeatDays).Value = String.Empty
        mvClassFields.Item(ActionFields.RepeatMonths).Value = String.Empty
      End If
    End Sub

    Protected Overrides Sub PreValidateCreateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PreValidateCreateParameters(pParameterList)

      Dim vActionStatus As String = pParameterList.ParameterExists("ActionStatus").Value
      vActionStatus = If(vActionStatus.Length > 0, vActionStatus, GetActionStatusCode(ActionStatuses.astDefined))
      If pParameterList.ContainsKey("ActionStatus") = False Then pParameterList.Add("ActionStatus")
      pParameterList("ActionStatus").Value = vActionStatus

      If pParameterList.Exists("DurationDays") AndAlso pParameterList.Exists("DurationHours") AndAlso pParameterList.Exists("DurationMinutes") Then
        'OK - Duration will be set
      Else
        'Don't set any
        If pParameterList.Exists("DurationDays") Then pParameterList.Remove("DurationDays")
        If pParameterList.Exists("DurationHours") Then pParameterList.Remove("DurationHours")
        If pParameterList.Exists("DurationMinutes") Then pParameterList.Remove("DurationMinutes")
      End If
    End Sub

    Protected Overrides Sub PostValidateCreateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PostValidateCreateParameters(pParameterList)

      If mvClassFields.Item(ActionFields.ScheduledOn).ValueChanged Then SetScheduled(ScheduledOn)

      ChangeAppointmentsCheck()

      mvClassFields.Item(ActionFields.SequenceNumber).IntegerValue = 0    'Rest back to default as ResetSequence will handle all this
      Dim vSequenceNumber As Integer = pParameterList.ParameterExists("SequenceNumber").IntegerValue
      If vSequenceNumber > 0 AndAlso vSequenceNumber <> mvClassFields.Item(ActionFields.SequenceNumber).IntegerValue Then
        ResetSequences(vSequenceNumber)
      End If

      If mvClassFields.Item(ActionFields.CompletedOn).ValueChanged Then SetCompleted(CompletedOn)
      If mvClassFields.Item(ActionFields.Deadline).ValueChanged Then SetDeadline(Deadline)
      mvClassFields.Item(ActionFields.ActionChangeReason).Value = String.Empty
    End Sub

    Protected Overrides Sub PostValidateUpdateParameters(ByVal pParameterList As CDBParameters)
      MyBase.PostValidateUpdateParameters(pParameterList)

      If mvClassFields.Item(ActionFields.ScheduledOn).ValueChanged Then SetScheduled(ScheduledOn)

      ChangeAppointmentsCheck()

      Dim vOriginalLevel As Integer = IntegerValue(mvClassFields.Item(ActionFields.ActionLevel).SetValue)
      mvClassFields.Item(ActionFields.ActionLevel).IntegerValue = vOriginalLevel    'Reset this back as ResetLevels will handle all this
      Dim vActionLevel As Integer = pParameterList.ParameterExists("ActionLevel").IntegerValue
      If mvExisting = True AndAlso vActionLevel > 0 And vActionLevel <> mvClassFields.Item(ActionFields.ActionLevel).IntegerValue Then
        ResetLevels(vActionLevel)
      End If

      Dim vOriginalSequenceNumber As Integer = IntegerValue(mvClassFields.Item(ActionFields.SequenceNumber).SetValue)
      mvClassFields.Item(ActionFields.SequenceNumber).IntegerValue = vOriginalSequenceNumber    'Rest back to default as ResetSequence will handle all this
      Dim vSequenceNumber As Integer = pParameterList.ParameterExists("SequenceNumber").IntegerValue
      If vSequenceNumber > 0 AndAlso vSequenceNumber <> mvClassFields.Item(ActionFields.SequenceNumber).IntegerValue Then
        ResetSequences(vSequenceNumber)
      End If

      If mvClassFields.Item(ActionFields.CompletedOn).ValueChanged Then SetCompleted(CompletedOn)
      If mvClassFields.Item(ActionFields.Deadline).ValueChanged Then SetDeadline(Deadline)
    End Sub

    Private Sub ChangeAppointmentsCheck()
      Dim vChangeAppointments As Boolean = False

      If ActionStatus <> ActionStatuses.astProForma AndAlso mvClassFields.Item(ActionFields.ScheduledOn).ValueChanged = True Then vChangeAppointments = True
      If mvClassFields(ActionFields.DurationDays).ValueChanged OrElse mvClassFields(ActionFields.DurationHours).ValueChanged OrElse mvClassFields(ActionFields.DurationMinutes).ValueChanged Then
        If ActionStatus <> ActionStatuses.astProForma Then vChangeAppointments = True
      End If

      If vChangeAppointments Then
        ResetAppointments(True)
      ElseIf mvClassFields(ActionFields.ActionDesc).ValueChanged Then
        Dim vWhereFields As New CDBFields(New CDBField("record_type", CDBField.FieldTypes.cftCharacter, "A"))
        vWhereFields.Add("unique_id", CDBField.FieldTypes.cftLong, ActionNumber)
        Dim vUpdateFields As New CDBFields(New CDBField("description", CDBField.FieldTypes.cftCharacter, ActionDesc))
        mvEnv.Connection.UpdateRecords("contact_appointments", vUpdateFields, vWhereFields, False)
      End If
    End Sub

    ''' <summary>Delete this record.  If the Action is a Template then links to any Actions created from this template will be removed.</summary>
    ''' <param name="pAmendedBy">User ID of the User performing the delete.</param>
    ''' <param name="pAudit">Flag indicating whether the delete should be audited.</param>
    ''' <param name="pJournalNumber">Journal number to be applied ot the audit record.</param>
    Public Overrides Sub Delete(ByVal pAmendedBy As String, ByVal pAudit As Boolean, ByVal pJournalNumber As Integer)
      Dim vTrans As Boolean = False
      If ActionStatus = ActionStatuses.astProForma Then
        'Update any linked Actions so that they are no longer linked
        Dim vWhereFields As New CDBFields(New CDBField("action_template_number", ActionNumber))
        Dim vUpdateParams As New CDBParameters()
        vUpdateParams.Add("ActionTemplateNumber", CDBField.FieldTypes.cftCharacter, "")   'Want to set this to null
        If ActionChangeReason.Length > 0 Then vUpdateParams.Add("ActionChangeReason", ActionChangeReason)
        Dim vLinkedAction As New Action(mvEnv)
        vLinkedAction.Init()
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vLinkedAction.GetRecordSetFields, "actions ac", vWhereFields)
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        While vRS.Fetch
          If mvEnv.Connection.InTransaction = False Then
            mvEnv.Connection.StartTransaction()
            vTrans = True
          End If
          vLinkedAction = New Action(mvEnv)
          vLinkedAction.InitFromRecordSet(vRS)
          If vLinkedAction.Existing Then
            vLinkedAction.Update(vUpdateParams)
            vLinkedAction.Save(pAmendedBy, pAudit)
          End If
        End While
        vRS.CloseRecordSet()
      End If

      MyBase.Delete(pAmendedBy, pAudit, pJournalNumber)
      If vTrans Then mvEnv.Connection.CommitTransaction()
    End Sub

    Public ReadOnly Property ActionStatus() As ActionStatuses
      Get
        Select Case mvClassFields(Action.ActionFields.ActionStatus).Value
          Case "INAC"
            Return ActionStatuses.astInactive
          Case "PROF"
            Return ActionStatuses.astProForma
          Case "SCH"
            Return ActionStatuses.astScheduled
          Case "COMP"
            Return ActionStatuses.astCompleted
          Case "OVDE"
            Return ActionStatuses.astOverdue
          Case "CANC"
            Return ActionStatuses.astCancelled
          Case Else     ' "DEF"
            Return ActionStatuses.astDefined
        End Select
      End Get
    End Property

    Public Shared Function GetActionStatusCode(ByVal pStatus As ActionStatuses) As String
      Select Case pStatus
        Case ActionStatuses.astInactive
          Return "INAC"
        Case ActionStatuses.astProForma
          Return "PROF"
        Case ActionStatuses.astScheduled
          Return "SCH"
        Case ActionStatuses.astCompleted
          Return "COMP"
        Case ActionStatuses.astOverdue
          Return "OVDE"
        Case ActionStatuses.astCancelled
          Return "CANC"
        Case Else     ' "DEF"
          Return "DEF"
      End Select
    End Function

    Public Shared Function ActionLinkTypeDescription(ByVal pLinkType As String) As String
      Select Case pLinkType
        Case "A"
          Return ProjectText.String16487    'Actioner
        Case "M"
          Return ProjectText.String16488    'Manager
        Case Else
          Return ProjectText.String15807    'Related To
      End Select
    End Function

    Public Function GetActionLinkCode(ByVal pActionLinkType As String) As IActionLink.ActionLinkTypes
      Select Case pActionLinkType
        Case "A"
          Return IActionLink.ActionLinkTypes.altActioner
        Case "M"
          Return IActionLink.ActionLinkTypes.altManager
        Case Else
          Return IActionLink.ActionLinkTypes.altRelated
      End Select
    End Function

    Public Overrides ReadOnly Property DataTable() As CDBDataTable
      Get
        Dim vTable As New CDBDataTable
        Dim vMonthDays As MonthDays
        Dim vAccessRights As New AccessRights
        Dim vRights As AccessRights.DocumentAccessRights

        vTable.AddColumnsFromList("ActionNumber,MasterAction,ActionLevel,SequenceNumber,ActionDesc,ActionText,ActionPriority,ActionStatus,DocumentClass,CreatedBy,CreatedOn,DurationDays,DurationHours,DurationMinutes,Deadline,ScheduledOn,CompletedOn,RepeatCount,DelayedActivation,ActionerSetting,ManagerSetting,TemplateDelayMonths,TemplateDelayDays,TemplateActivation,TemplateDeadlineMonths,TemplateDeadlineDays,TemplateRepeatMonths,TemplateRepeatDays,ActionRights,UseWorkingDays,UseNegativeOffsets")

        Dim vRow As CDBDataRow = vTable.AddRow
        With vRow
          .Item(1) = ActionNumber.ToString
          .Item(2) = MasterAction.ToString
          .Item(3) = ActionLevel.ToString
          .Item(4) = SequenceNumber.ToString
          .Item(5) = ActionDesc
          .Item(6) = ActionText
          .Item(7) = ActionPriority
          .Item(8) = mvClassFields(ActionFields.ActionStatus).Value
          .Item(9) = DocumentClass
          .Item(10) = CreatedBy
          .Item(11) = CreatedOn
          If DurationDays > 0 Then .Item(12) = DurationDays.ToString
          If DurationHours > 0 Then .Item(13) = DurationHours.ToString
          If DurationMinutes > 0 Then .Item(14) = DurationMinutes.ToString
          .Item(15) = Deadline
          .Item(16) = ScheduledOn
          .Item(17) = CompletedOn
          .Item(18) = RepeatCount.ToString
          .Item(19) = mvClassFields.Item(ActionFields.DelayedActivation).Value
          .Item(20) = mvClassFields.Item(ActionFields.ActionerSetting).Value
          .Item(21) = mvClassFields.Item(ActionFields.ManagerSetting).Value
          .Item(22) = "0"      'TemplateDelayMonths
          .Item(23) = "0"      'TemplateDelayDays
          If DelayedActivation Then
            If IsDate(ScheduledOn) Then
              If DelayDays.HasValue = True OrElse DelayMonths.HasValue = True Then
                .Item(22) = If(DelayMonths.HasValue = True, DelayMonths.Value.ToString, "0")    'TemplateDelayMonths
                .Item(23) = If(DelayDays.HasValue = True, DelayDays.Value.ToString, "0")        'TemplateDelayDays
              Else
                vMonthDays = CalcDateDiff(CreatedOn, ScheduledOn)
                .Item(22) = vMonthDays.Months.ToString 'TemplateDelayMonths
                .Item(23) = vMonthDays.Days.ToString   'TemplateDelayDays
              End If
            End If
          Else
            .Item(22) = ""        'TemplateDelayMonths
            .Item(23) = ""        'TemplateDelayDays
            If IsDate(ScheduledOn) Then
              .Item(24) = CDate(ScheduledOn).Subtract(CDate(CreatedOn)).Days.ToString 'TemplateActivation
            End If
          End If
          .Item(25) = "0"          'TemplateDeadlineMonths
          .Item(26) = "0"          'TemplateDeadlineDays
          If IsDate(Deadline) Then
            If DeadlineDays.HasValue = True OrElse DeadlineMonths.HasValue = True Then
              .Item(25) = If(DeadlineMonths.HasValue = True, DeadlineMonths.Value.ToString, "0")    'TemplateDeadlineMonths
              .Item(26) = If(DeadlineDays.HasValue = True, DeadlineDays.Value.ToString, "0")        'TemplateDeadlineDays
            Else
              vMonthDays = CalcDateDiff(CreatedOn, Deadline)
              .Item(25) = vMonthDays.Months.ToString   'TemplateDeadlineMonths
              .Item(26) = vMonthDays.Days.ToString     'TemplateDeadlineDays
            End If
          End If
          .Item(27) = "0"           'TemplateRepeatMonths
          .Item(28) = "0"           'TemplateRepeatDays
          If IsDate(CompletedOn) Then
            If RepeatDays.HasValue = True OrElse RepeatMonths.HasValue = True Then
              .Item(27) = If(RepeatMonths.HasValue = True, RepeatMonths.Value.ToString, "0")      'TemplateRepeatMonths
              .Item(28) = If(RepeatDays.HasValue = True, RepeatDays.Value.ToString, "0")          'TemplateRepeatDays
            Else
              vMonthDays = CalcDateDiff(CreatedOn, CompletedOn)
              .Item(27) = vMonthDays.Months.ToString   'TemplateRepeatMonths
              .Item(28) = vMonthDays.Days.ToString     'TemplateRepeatDays
            End If
          End If
          vAccessRights.Init(mvEnv)
          Dim vRecordSet As CDBRecordSet = mvEnv.Connection.GetRecordSet("SELECT action_desc, action_number, master_action, action_level, sequence_number, created_by, department," & vAccessRights.AccessAttributes() & " FROM actions a, document_classes dc, users u WHERE action_number = " & ActionNumber & " AND a.document_class = dc.document_class AND a.created_by = u.logname ORDER BY sequence_number")
          vRecordSet.Fetch()
          If vRecordSet.Fields IsNot Nothing Then vRights = vAccessRights.GetAccessRights(vRecordSet, vRecordSet.Fields(7).Value, vRecordSet.Fields(6).Value)
          .Item(29) = CStr(vRights)
          .Item(30) = BooleanString(UseWorkingDays)
          .Item(31) = BooleanString(UseNegativeOffsets)
        End With
        Return vTable
      End Get
    End Property

    Private Structure MonthDays
      Dim Months As Integer
      Dim Days As Integer
    End Structure

    Private Function CalcDateDiff(ByVal pStartDate As String, ByVal pEndDate As String) As MonthDays
      Dim vMonthDays As New MonthDays
      Dim vStartDate As Date = CDate(pStartDate)
      Dim vEndDate As Date = CDate(pEndDate)

      vMonthDays.Months = ((vEndDate.Year - vStartDate.Year) * 12) + (vEndDate.Month - vStartDate.Month)
      If vMonthDays.Months <> 0 Then vStartDate = vStartDate.AddMonths(vMonthDays.Months)
      vMonthDays.Days = vEndDate.Subtract(vStartDate).Days
      Return vMonthDays
    End Function

    Public ReadOnly Property StartDate() As Date
      Get
        Dim vStartDate As Date
        If Date.TryParse(ScheduledOn, vStartDate) Then
          Return vStartDate
        Else
          Return Nothing
        End If
      End Get
    End Property

    Public ReadOnly Property EndDate() As Date
      Get
        Dim vStartDate As Date = StartDate
        If vStartDate = Nothing Then
          Return vStartDate
        Else
          If DurationDays = 0 AndAlso DurationHours = 0 AndAlso DurationMinutes = 0 Then mvClassFields(ActionFields.DurationMinutes).LongValue = 30
          Return AddDuration(vStartDate)
        End If
      End Get
    End Property

    Public ReadOnly Property Links() As List(Of IActionLink)
      Get
        If mvLinks Is Nothing Then
          mvLinks = New List(Of IActionLink)
          Dim vLink As ActionLink
          For Each vObjectType As IActionLink.ActionLinkObjectTypes In [Enum].GetValues(GetType(IActionLink.ActionLinkObjectTypes))
            Select Case vObjectType
              Case IActionLink.ActionLinkObjectTypes.alotExamCentre
                vLink = New ExamCentreAction(mvEnv)
              Case IActionLink.ActionLinkObjectTypes.alotWorkstream
                vLink = New WorkstreamActionLink(mvEnv)
              Case IActionLink.ActionLinkObjectTypes.alotContactPosition
                vLink = New ContactPositionAction(mvEnv)
              Case Else
                vLink = New ActionLink(mvEnv)
            End Select
            vLink.InitFromObjectType(vObjectType)
            Dim vAnsiJoins As New AnsiJoins
            Dim vLabelName As String = String.Empty
            Select Case vObjectType
              Case IActionLink.ActionLinkObjectTypes.alotContact
                vAnsiJoins.Add("contacts c", "c.contact_number", "ca.contact_number")
                vLabelName = ", label_name, address_number"
              Case IActionLink.ActionLinkObjectTypes.alotOrganisation
                vAnsiJoins.Add("organisations o", "o.organisation_number", "ca.organisation_number")
                vLabelName = ", name, address_number"
              Case IActionLink.ActionLinkObjectTypes.alotExamCentre
                vAnsiJoins.Add("exam_centres ec", "eca.exam_centre_id", "ec.exam_centre_id")
                vLabelName = ", exam_centre_description"
              Case IActionLink.ActionLinkObjectTypes.alotWorkstream
                vAnsiJoins.Add("workstreams w", "wal.workstream_id", "w.workstream_id")
              Case IActionLink.ActionLinkObjectTypes.alotContactPosition
                vAnsiJoins.Add("contact_positions cp", "cpa.contact_position_number", "cp.contact_position_number")
            End Select
            Dim vSQL As New SQLStatement(mvEnv.Connection, vLink.GetRecordSetFields & vLabelName, String.Format("{0} {1}", vLink.TableName, vLink.AliasValue), New CDBFields(New CDBField("action_number", ActionNumber)), "", vAnsiJoins)
            Dim vRS As CDBRecordSet = vSQL.GetRecordSet
            While vRS.Fetch
              Dim vRecord As IActionLink
              Select Case vObjectType
                Case IActionLink.ActionLinkObjectTypes.alotExamCentre
                  vRecord = New ExamCentreAction(mvEnv)
                Case IActionLink.ActionLinkObjectTypes.alotWorkstream
                  vRecord = New WorkstreamActionLink(mvEnv)
                Case IActionLink.ActionLinkObjectTypes.alotContactPosition
                  vRecord = New ContactPositionAction(mvEnv)
                Case Else
                  vRecord = New ActionLink(mvEnv)
              End Select
              vRecord.InitFromObjectType(vObjectType)
              vRecord.InitFromRecordSet(vRS)
              mvLinks.Add(vRecord)
            End While
            vRS.CloseRecordSet()
          Next
        End If
        Return mvLinks
      End Get
    End Property

    Public Sub SetScheduled(ByVal pNewDate As String)
      If pNewDate.Length > 0 Then
        mvClassFields(ActionFields.ScheduledOn).Value = pNewDate
        If ActionStatus <> ActionStatuses.astProForma Then mvClassFields.Item(ActionFields.ActionStatus).Value = GetActionStatusCode(ActionStatuses.astScheduled)
      Else
        mvClassFields(ActionFields.ScheduledOn).Value = ""
        If ActionStatus = ActionStatuses.astScheduled Then mvClassFields.Item(ActionFields.ActionStatus).Value = GetActionStatusCode(ActionStatuses.astDefined)
      End If
    End Sub

    Public Sub SetDuration(ByVal pDays As Integer, ByVal pHours As Integer, ByVal pMinutes As Integer)
      mvClassFields.Item(ActionFields.DurationDays).LongValue = pDays
      mvClassFields.Item(ActionFields.DurationHours).LongValue = pHours
      mvClassFields.Item(ActionFields.DurationMinutes).LongValue = pMinutes
    End Sub

    Public Function AddDuration(ByVal pStartDate As Date) As Date
      'used to add a time duration to a supplied start date/time variable
      'routine first forces the time to a period within the working day and then adds the duration in days, hours AND minutes
      'by using the working period of each day and considering the lunch breaks where necessary
      'Time comparisons are undertaken in both numeric and string mode.
      'In string mode it is imperative that both dates compared have the same format.
      'make sure that supplied day is not an unworkable weekend - see constants
      AdjustForWeekend(pStartDate)
      Dim vCurrentTime As Date = TimeValue(pStartDate.ToString("HH:mm"))
      'NOTE we could store these constants as converted time values but it would not be very readable
      'Set time values and check start time is valid within working hours
      Dim vEndOfDay As Date
      Dim vStartOfDay As Date
      If mvIgnoreWorkingDay Then
        'Working day values are not going to be used, so set to the entire day
        vStartOfDay = TimeValue("00:00")
        vEndOfDay = TimeValue("23:59")
      Else
        vStartOfDay = TimeValue(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlStartOfDay))
        vEndOfDay = TimeValue(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlEndOfDay))
        If vCurrentTime < vStartOfDay Then vCurrentTime = vStartOfDay
        If vCurrentTime > vEndOfDay Then vCurrentTime = vEndOfDay
      End If

      Dim vEndOfLunch As Date
      Dim vStartOfLunch As Date
      Dim vConsiderLunch As Boolean
      If mvIgnoreLunch = False Then
        vStartOfLunch = TimeValue(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlStartOfLunch))
        vEndOfLunch = TimeValue(mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlEndOfLunch))
        If vCurrentTime > vStartOfLunch And vCurrentTime < vEndOfLunch Then vCurrentTime = vEndOfLunch
        If vCurrentTime < vEndOfLunch Then vConsiderLunch = True
      End If

      pStartDate = Date.Parse(pStartDate.ToString(CAREDateFormat) & " " & vCurrentTime.ToString("HH:mm"))
      Dim vCurrentDate As Date
      vCurrentDate = pStartDate    'want to return the valid starting date as modified by the above code (pStartDate)
      'now add time period which should be one of day,hour OR minutes
      If DurationDays > 0 Then
        'if adding days - no check on working period
        vCurrentDate = vCurrentDate.AddDays(DurationDays)
        AdjustForWeekend(vCurrentDate)
      End If
      If DurationHours > 0 Or DurationMinutes > 0 Then
        vCurrentTime = vCurrentTime.AddHours(DurationHours)
        vCurrentTime = vCurrentTime.AddMinutes(DurationMinutes)
        If vConsiderLunch = True And mvIgnoreLunch = False Then
          If vCurrentTime > vEndOfLunch Then
            vCurrentTime = vCurrentTime.AddMinutes(vEndOfLunch.Subtract(vStartOfLunch).TotalMinutes)
          End If
        End If
        If vCurrentTime >= vEndOfDay Then
          vCurrentTime = vStartOfDay.AddMinutes(vCurrentTime.Subtract(vEndOfDay).TotalMinutes)
          vCurrentDate = vCurrentDate.AddDays(1)
          AdjustForWeekend(vCurrentDate)
          'vCurrentTime = vStartOfDay
          vConsiderLunch = True     'for next day
        End If
      End If
      'now convert date and time back to a full date/time value
      Return Date.Parse(vCurrentDate.ToString(CAREDateFormat) & " " & vCurrentTime.ToString("HH:mm"))
    End Function

    Private Sub AdjustForWeekend(ByRef pDate As Date)
      If mvIgnoreWeekend = False Then
        If (Weekday(pDate) = vbSaturday) Then pDate = pDate.AddDays(1)
        If (Weekday(pDate) = vbSunday) Then pDate = pDate.AddDays(1)
      End If
    End Sub

    ''' <summary>Delete this Action plus all linked Actions that have the same <see cref="MasterAction">Master Action</see> number as this Action and a <see cref="SequenceNumber">Sequence Number</see> that is greater than or equal to the sequence number of this Action.
    ''' This will check that the user has the appropriate access rights to delete all of the Actions.</summary>
    ''' <param name="pAmendedBy">User ID of the user performing the delete.</param>
    ''' <param name="pAudit">Flag indicating whether the deletes should be audited.</param>
    Public Sub DeleteWithSubActions(Optional ByRef pAmendedBy As String = "", Optional ByRef pAudit As Boolean = False)
      Dim vRights As AccessRights.DocumentAccessRights
      Dim vActionNumbers As String = ""

      Dim vAccessRights As New AccessRights
      vAccessRights.Init(mvEnv)
      Dim vAttrs As String = "action_number, action_level, created_by, u.department, " & vAccessRights.AccessAttributes
      Dim vAnsiJoins As New AnsiJoins({New AnsiJoin("document_classes dc", "ac.document_class", "dc.document_class")})
      vAnsiJoins.AddLeftOuterJoin("users u", "ac.created_by", "u.logname")
      Dim vWhereFields As New CDBFields(New CDBField("ac.master_action", MasterAction))
      vWhereFields.Add("ac.sequence_number", SequenceNumber, CDBField.FieldWhereOperators.fwoGreaterThanEqual)
      Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vAttrs, "actions ac", vWhereFields, "ac.sequence_number", vAnsiJoins)
      Dim vRecordSet As CDBRecordSet = vSQLStatement.GetRecordSet()

      vRecordSet.Fetch()
      Do While vRecordSet.Status
        vRights = vAccessRights.GetAccessRights(vRecordSet, vRecordSet.Fields(4).Value, vRecordSet.Fields(3).Value)
        If (vRights And AccessRights.DocumentAccessRights.darDelete) = 0 Then
          RaiseError(DataAccessErrors.daeNoActionRights) 'Insufficient rights to delete the action or some of it's sub-actions
        Else
          'Build a list of actions
          If vActionNumbers.Length > 0 Then vActionNumbers = vActionNumbers & ","
          vActionNumbers = vActionNumbers & vRecordSet.Fields(1).Value
          If vRecordSet.Fetch() Then
            If vRecordSet.Fields(2).LongValue = ActionLevel Then Exit Do
          End If
        End If
      Loop
      vRecordSet.CloseRecordSet()
      DeleteActions(vActionNumbers, pAmendedBy, pAudit)
    End Sub
    Public Overloads Sub InitFromOutlookId(ByVal pOutlookId As String)
      CheckClassFields()
      Dim vWhereFields As New CDBFields()

      vWhereFields.Add(mvClassFields(ActionFields.OutlookId).Name, CDBField.FieldTypes.cftCharacter, pOutlookId)
      MyBase.InitWithPrimaryKey(vWhereFields)
    End Sub

    ''' <summary>Delete this Action plus the specified Actions.  Additionally this will cascade delete related data for the specified Actions.</summary>
    ''' <param name="pActionNumbers">A comma-separated list of Action numbers to be deleted.</param>
    ''' <param name="pAmendedBy">User ID of the user performing the delete.</param>
    ''' <param name="pAudit">Flag indicating whether the delete of this Action should be audited.</param>
    Public Sub DeleteActions(ByVal pActionNumbers As String, Optional ByRef pAmendedBy As String = "", Optional ByRef pAudit As Boolean = False)
      Dim vFields As New CDBFields(New CDBField("action_number", CDBField.FieldTypes.cftInteger, pActionNumbers, CDBField.FieldWhereOperators.fwoIn))

      Dim vAction As New Action(mvEnv)
      Dim vActionsToDelete As New CollectionList(Of Action)
      Dim vChangeReason As String = Me.ActionChangeReason
      If ActionStatus = ActionStatuses.astProForma OrElse pAudit = True OrElse vChangeReason.Length > 0 Then
        'If this Action is a Template then need to remove the link from all the templates that are about to be deleted.
        'Or if auditing is required need to delete all separately to get the amendment history created
        'Or ActionChangeReason needs to be set on each Action before deletion
        vAction.Init()
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vAction.GetRecordSetFields, "actions ac", vFields)
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        While vRS.Fetch
          vAction = New Action(mvEnv)
          vAction.InitFromRecordSet(vRS)
          If vChangeReason.Length > 0 Then vAction.SetChangeReason(vChangeReason)
          If vActionsToDelete.ContainsKey(vAction.ActionNumber.ToString) = False AndAlso vAction.ActionNumber.Equals(ActionNumber) = False Then
            vActionsToDelete.Add(vAction.ActionNumber.ToString, vAction)
          End If
        End While
        vRS.CloseRecordSet()
      End If

      Dim vTrans As Boolean = mvEnv.Connection.StartTransaction()

      Me.Delete(pAmendedBy, pAudit, 0)

      If vActionsToDelete.Count > 0 Then
        For Each vAction In vActionsToDelete
          vAction.Delete(pAmendedBy, pAudit, 0)
        Next
      Else
        'Just delete all Actions
        mvEnv.Connection.DeleteRecords("actions", vFields, False)
      End If

      'Add current ActionNumber to list of Actions so that related data for current Action is always deleted, but only if not already in the list
      'It should already be in the list, so this is "just in case"
      Dim vInList As Boolean = False
      If pActionNumbers.Contains(",") = False Then
        If IntegerValue(pActionNumbers).Equals(ActionNumber) = True Then vInList = True
      Else
        Dim vNumberString() As String = pActionNumbers.Split(","c)
        For vIndex As Integer = 0 To vNumberString.GetUpperBound(0)
          If IntegerValue(vNumberString(vIndex)).Equals(ActionNumber) = True Then vInList = True
          If vInList Then Exit For
        Next
      End If

      If vInList = False Then
        pActionNumbers = pActionNumbers & If(pActionNumbers.Length > 0, ",", "") & ActionNumber.ToString
        vFields(1).Value = pActionNumbers
      End If

      mvEnv.Connection.DeleteRecords("action_subjects", vFields, False)
      mvEnv.Connection.DeleteRecords("contact_actions", vFields, False)
      mvEnv.Connection.DeleteRecords("organisation_actions", vFields, False)
      mvEnv.Connection.DeleteRecords("document_actions", vFields, False)
      mvEnv.Connection.DeleteRecords("action_dependencies", vFields, False)
      mvEnv.Connection.DeleteRecords("fundraising_actions", vFields, False)
      mvEnv.Connection.DeleteRecords("action_links", vFields, False)

      vFields.Clear()
      vFields.Add("prior_action", CDBField.FieldTypes.cftLong, pActionNumbers, CDBField.FieldWhereOperators.fwoIn)
      mvEnv.Connection.DeleteRecords("action_dependencies", vFields, False)

      vFields.Clear()
      vFields.Add("unique_id", CDBField.FieldTypes.cftLong, pActionNumbers, CDBField.FieldWhereOperators.fwoIn)
      vFields.Add("record_type", CDBField.FieldTypes.cftCharacter, "A")
      mvEnv.Connection.DeleteRecords("sticky_notes", vFields, False)
      mvEnv.Connection.DeleteRecords("contact_appointments", vFields, False)

      If vTrans Then mvEnv.Connection.CommitTransaction()
    End Sub

    Friend Sub CloneForRepeatAction(ByVal pBaseAction As Action, ByVal pRepeatActionNumber As Integer, ByVal pProcessingData As Date, ByVal pRepeatDays As Integer, ByVal pRepeatMonths As Integer)
      InitClassFields()
      SetDefaults()

      Clone(pBaseAction, pRepeatActionNumber)

      'These fields are only set on the Template itself
      mvClassFields.Item(ActionFields.DeadlineDays).Value = String.Empty
      mvClassFields.Item(ActionFields.DeadlineMonths).Value = String.Empty
      mvClassFields.Item(ActionFields.DelayDays).Value = String.Empty
      mvClassFields.Item(ActionFields.DelayMonths).Value = String.Empty
      mvClassFields.Item(ActionFields.RepeatDays).Value = String.Empty
      mvClassFields.Item(ActionFields.RepeatMonths).Value = String.Empty

      mvClassFields.Item(ActionFields.ActionStatus).Value = GetActionStatusCode(ActionStatuses.astInactive)
      Dim vCompletedOnDate As Date = CalculateNewDate(Today, pRepeatDays, pRepeatMonths, False)
      If pBaseAction.RepeatCount <> 1 Then
        mvClassFields.Item(ActionFields.CompletedOn).Value = CDate(vCompletedOnDate.ToString(CAREDateFormat) & " " & mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlStartOfDay)).ToString(CAREDateTimeFormat)
        If pBaseAction.RepeatCount > 1 Then
          mvClassFields.Item(ActionFields.RepeatCount).IntegerValue = (pBaseAction.RepeatCount - 1)
          mvClassFields.Item(ActionFields.RepeatDays).IntegerValue = pRepeatDays
          mvClassFields.Item(ActionFields.RepeatMonths).IntegerValue = pRepeatMonths
        End If
      End If
      mvClassFields.Item(ActionFields.ScheduledOn).Value = CDate(vCompletedOnDate.ToString(CAREDateFormat) & " " & mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlStartOfDay)).ToString(CAREDateTimeFormat)

      SetValid()
    End Sub

    ''' <summary>Gets the current user's <see cref="DocumentAccessRights">Access Rights</see> to this Action.</summary>
    ''' <remarks>There is no requirement for the Action to exist, as long as the <see cref="DocumentClass">DocumentClass</see> has been set.</remarks>
    Private Function GetUserAccessRights() As DocumentAccessRights
      Dim vRights As DocumentAccessRights = DocumentAccessRights.darHeader

      If DocumentClass.Length > 0 Then
        Dim vCreatorDept As String = String.Empty
        If mvEnv.User.UserID.Equals(CreatedBy, StringComparison.InvariantCultureIgnoreCase) Then
          vCreatorDept = mvEnv.User.Department
        Else
          Dim vUser As New CDBUser(mvEnv)
          vUser.Init(CreatedBy)
          If vUser.Existing Then vCreatorDept = vUser.Department
        End If
        Dim vAccessRights As New AccessRights
        vAccessRights.Init(mvEnv)
        vRights = vAccessRights.GetClassRights(DocumentClass, vCreatorDept, CreatedBy)
      End If
      Return vRights
    End Function

    ''' <summary>Used when creating / updating Actions from provisional Actions to record that the Action is to be deleted.</summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function ToBeDeleted() As Boolean
      Return mvToBeDeleted
    End Function

    ''' <summary>Can the current <see cref="CDBUser">User</see> view this <see cref="Action">Action</see>?</summary>
    Public Function UserCanView() As Boolean
      Return (GetUserAccessRights.HasFlag(DocumentAccessRights.darView))
    End Function

    ''' <summary>Used by Web Services to extract all of the data into a <see cref="CDBParameters">CDBParameters</see> collection.</summary>
    Public Function GetDataAsParameters(ByVal pParams As CDBParameters) As CDBParameters
      For Each vClassfield As ClassField In mvClassFields
        With vClassfield
          pParams.Add(.ProperName, .FieldType, .Value)
        End With
      Next
      pParams.Add("ActionPriorityDesc", If(ActionPriorityDescription IsNot Nothing, ActionPriorityDescription, ActionPriority))
      pParams.Add("ActionStatusDesc", If(ActionStatusDescription IsNot Nothing, ActionStatusDescription, ActionStatusCode))
      pParams.Add("IsExisting", CDBField.FieldTypes.cftCharacter, BooleanString(Existing))
      pParams.Add("AccessRights", CDBField.FieldTypes.cftInteger, CInt(GetUserAccessRights()).ToString)
      Return pParams
    End Function

    ''' <summary>Set the class up with values that have been returned via Web Services.</summary>
    Public Sub SetDataFromXML(ByVal pAttributeName As String, ByVal pAttributeValue As String)
      If mvClassFields.ContainsKey(pAttributeName) Then
        mvClassFields.Item(pAttributeName).Value = pAttributeValue
        If mvExisting = True AndAlso mvClassFields.Item(pAttributeName).PrimaryKey = True Then mvClassFields.Item(pAttributeName).SetValue = pAttributeValue 'Ensure PrimaryKey fields don't get updated
      Else
        Select Case pAttributeName.ToLower
          Case "delete"
            mvToBeDeleted = BooleanValue(If(pAttributeValue.Equals("True", StringComparison.InvariantCultureIgnoreCase), "Y", "N"))
          Case "existing", "is_existing"
            mvExisting = BooleanValue(pAttributeValue)
            If mvExisting Then
              For Each vClassField As ClassField In mvClassFields
                If vClassField.PrimaryKey = True AndAlso vClassField.Value.Length > 0 Then
                  vClassField.SetValue = vClassField.Value    'Ensure PrimaryKey fields don't get updated
                End If
              Next
            End If
        End Select
      End If
    End Sub

    ''' <summary>Gets the attribute <see cref="CDBField.FieldTypes">data type</see>.</summary>
    Public Function GetFieldDataType(ByVal pAttributeName As String) As CDBField.FieldTypes
      If mvClassFields.ContainsKey(pAttributeName) Then
        Return mvClassFields.Item(pAttributeName).FieldType
      Else
        Return CDBField.FieldTypes.cftCharacter
      End If
    End Function

    ''' <summary>Updates the <see cref="Action">Action</see> dates from the specified Proforma (Template) <see cref="Action">Action</see>.</summary>
    ''' <param name="pEnv"></param>
    ''' <param name="pProForma">The Proforma (Template) <see cref="Action">Action</see> used to update this <see cref="Action">Action</see>.</param>
    ''' <param name="pProcessingDate">The base date to use for calculating the new Action dates.</param>
    Friend Sub UpdateDatesFromProforma(ByVal pEnv As CDBEnvironment, ByVal pProForma As Action, ByVal pProcessingDate As Date)
      If (CompletedOn.Length = 0 OrElse CDate(CompletedOn).CompareTo(Date.Today) >= 0) _
      AndAlso Not ((ActionStatus = ActionStatuses.astCancelled OrElse ActionStatus = ActionStatuses.astCompleted)) Then
        'Only update the dates when the CompletedOn date is either null or not historic
        Dim vCreatedOn As String
        Dim vDeadline As String
        Dim vScheduledOn As String
        Dim vCompletedOn As String
        Dim vDays As Integer
        Dim vMonths As Integer

        With pProForma
          vCreatedOn = .CreatedOn
          vDeadline = .Deadline
          vScheduledOn = .ScheduledOn
          vCompletedOn = .CompletedOn

          'Update these from the Template
          mvClassFields.Item(ActionFields.UseNegativeOffsets).Bool = pProForma.UseNegativeOffsets
          mvClassFields.Item(ActionFields.UseWorkingDays).Bool = pProForma.UseWorkingDays

          'Set the deadline as an offset from the created on date of the proforma
          If vDeadline.Length > 0 Then
            If .DeadlineDays.HasValue = True OrElse .DeadlineMonths.HasValue Then
              If .DeadlineMonths.HasValue = True AndAlso .DeadlineMonths.Value <> 0 Then vMonths = .DeadlineMonths.Value
              If .DeadlineDays.HasValue = True AndAlso .DeadlineDays.Value <> 0 Then vDays = .DeadlineDays.Value
            Else
              vDays = CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(vCreatedOn), CDate(vDeadline)))
            End If
            vDeadline = CalculateNewDate(pProcessingDate, vDays, vMonths, UseNegativeOffsets).ToString(CAREDateFormat) & " " & mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlStartOfDay)
          End If
          If vDeadline.Length > 0 Then vDeadline = CDate(vDeadline).ToString(CAREDateTimeFormat)
          mvClassFields.Item(ActionFields.Deadline).Value = vDeadline

          If .DelayedActivation Then 'If delayed
            If vScheduledOn.Length > 0 Then
              vDays = 0
              vMonths = 0
              If .DelayDays.HasValue = True OrElse .DelayMonths.HasValue = True Then
                If .DelayDays.HasValue Then vDays = .DelayDays.Value
                If .DelayMonths.HasValue Then vMonths = .DelayMonths.Value
              Else
                vDays = CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(vCreatedOn), CDate(vScheduledOn)))
              End If
              vScheduledOn = CalculateNewDate(pProcessingDate, vDays, vMonths, UseNegativeOffsets).ToString(CAREDateFormat) & " " & mvEnv.GetControlValue(CDBEnvironment.cdbControlConstants.cdbControlStartOfDay)
            End If
            If vScheduledOn.Length > 0 Then vScheduledOn = CDate(vScheduledOn).ToString(CAREDateTimeFormat)
            mvClassFields.Item(ActionFields.ScheduledOn).Value = vScheduledOn
          Else
            'Not delayed activation
            If pProForma.PriorActions.Count() > 0 Then
              mvClassFields.Item(ActionFields.ScheduledOn).Value = String.Empty 'Dependant - set scheduled to null
            Else
              mvClassFields.Item(ActionFields.ScheduledOn).Value = .ActivationDate
              If mvClassFields.Item(ActionFields.ScheduledOn).Value.Length = 0 Then
                mvClassFields.Item(ActionFields.RepeatCount).Value = String.Empty 'Immediate - repeat count null
                mvClassFields.Item(ActionFields.ScheduledOn).Value = String.Empty 'Immediate - set scheduled to null
                mvClassFields.Item(ActionFields.CompletedOn).Value = String.Empty 'Immediate - set completed to null
                mvClassFields.Item(ActionFields.ActionStatus).Value = GetActionStatusCode(ActionStatuses.astDefined)
              End If
            End If
          End If
        End With
      End If
    End Sub

    ''' <summary>Create a new <see cref="Action">Action</see> from a provisional Action in the specified Proforma (Template) <see cref="Action">Action</see>.</summary>
    ''' <param name="pProforma">The Proforma (Template) <see cref="Action">Action</see> used to create this <see cref="Action">Action</see>.</param>
    ''' <param name="pMasterActionNumber">The master Action Number to be used.  The first <see cref="Action">Action</see> in the <see cref="ActionSet">ActionSet</see> is the master Action.</param>
    Friend Sub CreateFromProvisionalProforma(ByVal pProforma As Action, ByVal pMasterActionNumber As Integer, ByVal pWorkstreamId As Integer)
      'Ensure these get set to zero if they are null
      If mvClassFields.Item(ActionFields.DurationDays).Value.Length = 0 Then mvClassFields.Item(ActionFields.DurationDays).Value = "0"
      If mvClassFields.Item(ActionFields.DurationHours).Value.Length = 0 Then mvClassFields.Item(ActionFields.DurationHours).Value = "0"
      If mvClassFields.Item(ActionFields.DurationMinutes).Value.Length = 0 Then mvClassFields.Item(ActionFields.DurationMinutes).Value = "0"
      If mvClassFields.Item(ActionFields.RepeatCount).Value.Length = 0 Then mvClassFields.Item(ActionFields.RepeatCount).Value = "0"

      If Existing Then
        'Just save changes
        Save(mvEnv.User.UserID, True)
      Else
        'Re-set the Action & MasterAction numbers and save
        mvClassFields.Item(ActionFields.ActionNumber).Value = String.Empty
        mvClassFields.Item(ActionFields.MasterAction).Value = If(pMasterActionNumber > 0, pMasterActionNumber.ToString, String.Empty)
        SetValid()

        Dim vTrans As Boolean = False
        If mvEnv.Connection.InTransaction = False Then
          mvEnv.Connection.StartTransaction()
          vTrans = True
        End If

        Save(mvEnv.User.UserID, True)

        'Now add the remaining data that was not created previously
        With pProforma
          CopyActionSubjects(.Subjects, ActionNumber)
          CopyActionLinks(.Links)
        End With

        If ActionerCount = 0 AndAlso ActionerSetting = ActionerManagerSettings.amsAsCreator Then AddLink(IActionLink.ActionLinkObjectTypes.alotContact, IActionLink.ActionLinkTypes.altActioner, mvEnv.User.ContactNumber)
        If ManagerCount = 0 AndAlso ManagerSetting = ActionerManagerSettings.amsAsCreator Then AddLink(IActionLink.ActionLinkObjectTypes.alotContact, IActionLink.ActionLinkTypes.altManager, mvEnv.User.ContactNumber)

        If pWorkstreamId > 0 Then AddLink(IActionLink.ActionLinkObjectTypes.alotWorkstream, IActionLink.ActionLinkTypes.altRelated, pWorkstreamId)

        If DelayedActivation = False AndAlso PriorActions.Count = 0 Then
          Dim vDays As Integer = 0
          Dim vMonths As Integer = 0
          Dim vRepeatRequired As Boolean = False
          If IsDate(pProforma.CompletedOn) Then
            If pProforma.RepeatDays.HasValue = True OrElse pProforma.RepeatMonths.HasValue = True Then
              If pProforma.RepeatDays.HasValue Then vDays = pProforma.RepeatDays.Value
              If pProforma.RepeatMonths.HasValue Then vMonths = pProforma.RepeatMonths.Value
            Else
              vDays = CInt(DateDiff(Microsoft.VisualBasic.DateInterval.Day, CDate(pProforma.CreatedOn), CDate(pProforma.CompletedOn)))
            End If
            If vDays > 0 OrElse vMonths > 0 Then vRepeatRequired = True
          End If

          If vRepeatRequired Then
            Dim vRepeatActionNumber As Integer = mvEnv.GetControlNumber("AC")
            Dim vRepeatAction As New Action(mvEnv)
            vRepeatAction.CloneForRepeatAction(Me, vRepeatActionNumber, Today, vDays, vMonths)
            vRepeatAction.Save(mvEnv.User.UserID, True)

            CopyActionSubjects(pProforma.Subjects, vRepeatActionNumber)
            vRepeatAction.CopyActionLinks(pProforma.Links)
          End If

          If vTrans Then mvEnv.Connection.CommitTransaction()

        End If
      End If
    End Sub

    Private Function CalculateNewDate(ByVal pBaseDate As Date, ByVal pDays As Integer, ByVal pMonths As Integer, ByVal pUseNegativeOffsets As Boolean) As Date
      If pDays <> 0 AndAlso pUseNegativeOffsets Then pDays = (pDays * -1)
      If pMonths <> 0 AndAlso pUseNegativeOffsets Then pMonths = (pMonths * -1)

      Dim vBankHolidays As New CollectionList(Of Date)
      If UseWorkingDays Then
        Dim vBHEndDate As Date = pBaseDate.AddMonths(pMonths).AddDays((pDays * 5) + 10)    'Add extra days & months to this selection to ensure that it covers the required date range
        Dim vWhereFields As New CDBFields(New CDBField("bank_holiday_day", CDBField.FieldTypes.cftDate, If(pUseNegativeOffsets = True, vBHEndDate, pBaseDate).ToString(CAREDateFormat), CDBField.FieldWhereOperators.fwoBetweenFrom))
        vWhereFields.Add("bank_holiday_day#2", CDBField.FieldTypes.cftDate, If(pUseNegativeOffsets = True, pBaseDate, vBHEndDate).ToString(CAREDateFormat), CDBField.FieldWhereOperators.fwoBetweenTo)
        Dim vSQLStatement As New SQLStatement(mvEnv.Connection, "bank_holiday_day,bank_holiday_day_desc", "bank_holiday_days", vWhereFields, "bank_holiday_day")
        Dim vRS As CDBRecordSet = vSQLStatement.GetRecordSet()
        While vRS.Fetch
          vBankHolidays.Add(CDate(vRS.Fields(1).Value).ToString(CAREDateFormat), CDate(vRS.Fields(1).Value))
        End While
        vRS.CloseRecordSet()
      End If

      Dim vCalcDate As Date = pBaseDate
      If pMonths <> 0 Then vCalcDate = AddMonths(vCalcDate, pMonths, (pDays = 0 AndAlso UseWorkingDays), vBankHolidays)
      If pDays <> 0 Then
        If UseWorkingDays Then
          vCalcDate = AddWeekdays(vCalcDate, pDays, True, vBankHolidays)
        Else
          'Just add elapsed days
          vCalcDate = vCalcDate.AddDays(pDays)
        End If
      End If

      Return vCalcDate

    End Function

    ''' <summary>Set the Action Change Reason for an existing Action.</summary>
    ''' <param name="pChangeReason">The change reason to be applied to the current changes.</param>
    ''' <remarks>This will only set the change reason for an existing Action.</remarks>
    Public Sub SetChangeReason(ByVal pChangeReason As String)
      If Existing Then
        mvClassFields.Item(ActionFields.ActionChangeReason).Value = pChangeReason
      Else
        mvClassFields.Item(ActionFields.ActionChangeReason).Value = String.Empty
      End If
    End Sub

#End Region

  End Class
End Namespace
