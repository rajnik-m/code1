Namespace Access

  Public Class UserHistoryItem
    Inherits CARERecord

#Region "AutoGenerated Code"

'--------------------------------------------------
'Enum defining all the fields in the table
'--------------------------------------------------
    Private Enum UserHistoryItemFields
      AllFields = 0
      Logname
      ItemTime
      ItemGroup
      ItemNumber
      ItemDesc
      FavouriteItem
      ItemID
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("logname")
        .Add("item_time", CDBField.FieldTypes.cftTime)
        .Add("item_group")
        .Add("item_number", CDBField.FieldTypes.cftLong)
        .Add("item_desc")
        .Add("favourite_item")
        .Add("item_id")

        .Item(UserHistoryItemFields.Logname).PrimaryKey = True
        .Item(UserHistoryItemFields.ItemGroup).PrimaryKey = True
        .Item(UserHistoryItemFields.ItemNumber).PrimaryKey = True
        .Item(UserHistoryItemFields.FavouriteItem).InDatabase = mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataUserHistoryFavourites)
        .Item(UserHistoryItemFields.ItemID).InDatabase = mvEnv.Connection.AttributeExists(mvClassFields.DatabaseTableName, .Item(UserHistoryItemFields.ItemID).Name)
      End With
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return False
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "uhi"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "user_history_items"
      End Get
    End Property

    Public Property ItemID As String
      Get
        Return mvClassFields(UserHistoryItemFields.ItemID).Value
      End Get
      Set(value As String)
        mvClassFields(UserHistoryItemFields.ItemID).Value = value
      End Set
    End Property
    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

'--------------------------------------------------
'Public property procedures
'--------------------------------------------------
    Public ReadOnly Property Logname() As String
      Get
        Return mvClassFields(UserHistoryItemFields.Logname).Value
      End Get
    End Property
    Public ReadOnly Property ItemTime() As String
      Get
        Return mvClassFields(UserHistoryItemFields.ItemTime).Value
      End Get
    End Property
    Public ReadOnly Property ItemGroup() As String
      Get
        Return mvClassFields(UserHistoryItemFields.ItemGroup).Value
      End Get
    End Property
    Public ReadOnly Property ItemNumber() As Integer
      Get
        Return mvClassFields(UserHistoryItemFields.ItemNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property ItemDesc() As String
      Get
        Return mvClassFields(UserHistoryItemFields.ItemDesc).Value
      End Get
    End Property
    Public ReadOnly Property FavouriteItem() As String
      Get
        Return mvClassFields(UserHistoryItemFields.FavouriteItem).Value
      End Get
    End Property
#End Region

#Region "Non-Autogenerated Code"

    Public Overloads Sub Init(ByVal pLogname As String, ByVal pHistoryItemType As String, ByVal pHistoryItemNumber As Integer)
      MyBase.Init()
      Dim vFields As New CDBFields
      vFields.Add(mvClassFields(UserHistoryItemFields.Logname).Name, pLogname)
      vFields.Add(mvClassFields(UserHistoryItemFields.ItemGroup).Name, pHistoryItemType)
      vFields.Add(mvClassFields(UserHistoryItemFields.ItemNumber).Name, pHistoryItemNumber)
      MyBase.InitWithPrimaryKey(vFields)
    End Sub

    Public Overloads Sub Create(ByVal pType As String, ByVal pDesc As String, ByVal pNumber As Integer, ByVal pTime As String)
      Create(pType, pDesc, pNumber, pTime, False)
    End Sub

    Public Overloads Sub Create(ByVal pType As String, ByVal pDesc As String, ByVal pNumber As Integer, ByVal pTime As String, ByVal pFavourite As Boolean)
      MyBase.Init()
      mvClassFields.Item(UserHistoryItemFields.Logname).Value = mvEnv.User.Logname
      mvClassFields.Item(UserHistoryItemFields.ItemGroup).Value = pType
      mvClassFields.Item(UserHistoryItemFields.ItemNumber).IntegerValue = pNumber
      If pTime.Length = 0 Then pTime = ItemTime
      Update(pTime, pFavourite, pDesc)
    End Sub

    Public Overloads Sub Update(ByVal pTime As String)
      mvClassFields(UserHistoryItemFields.ItemTime).Value = pTime
    End Sub

    Public Overloads Sub Update(ByVal pTime As String, ByVal pFavourite As Boolean, ByVal pDescription As String)
      mvClassFields(UserHistoryItemFields.ItemTime).Value = pTime
      mvClassFields(UserHistoryItemFields.FavouriteItem).Bool = pFavourite
      If Not String.IsNullOrEmpty(pDescription) Then mvClassFields(UserHistoryItemFields.ItemDesc).Value = pDescription
    End Sub

#End Region

  End Class
End Namespace
