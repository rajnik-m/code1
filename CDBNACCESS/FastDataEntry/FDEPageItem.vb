Namespace Access

  Public Class FDEPageItem
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum FdePageItemFields
      AllFields = 0
      FdePageItemNumber
      FdePageNumber
      SequenceNumber
      FdeUserControl
      FdeItemHeight
      FdeItemWidth
      InitialParameters
      DefaultParameters
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("fde_page_item_number", CDBField.FieldTypes.cftLong)
        .Add("fde_page_number", CDBField.FieldTypes.cftLong)
        .Add("sequence_number", CDBField.FieldTypes.cftLong)
        .Add("fde_user_control")
        .Add("fde_item_height", CDBField.FieldTypes.cftInteger)
        .Add("fde_item_width", CDBField.FieldTypes.cftInteger)
        .Add("initial_parameters")
        .Add("default_parameters")

        .SetControlNumberField(FdePageItemFields.FdePageItemNumber, "FI")

        .Item(FdePageItemFields.FdePageItemNumber).PrimaryKey = True
      End With
      'These two are defined in Non-auto Generated Code
      mvDefaultParameterList = Nothing
      mvInitialParameterList = Nothing
    End Sub

    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "fdepi"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "fde_page_items"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property FdePageItemNumber() As Integer
      Get
        Return mvClassFields(FdePageItemFields.FdePageItemNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property FdePageNumber() As Integer
      Get
        Return mvClassFields(FdePageItemFields.FdePageNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property SequenceNumber() As Integer
      Get
        Return mvClassFields(FdePageItemFields.SequenceNumber).IntegerValue
      End Get
    End Property
    Public ReadOnly Property FdeUserControl() As String
      Get
        Return mvClassFields(FdePageItemFields.FdeUserControl).Value
      End Get
    End Property
    Public ReadOnly Property FdeItemHeight() As Integer
      Get
        Return mvClassFields(FdePageItemFields.FdeItemHeight).IntegerValue
      End Get
    End Property
    Public ReadOnly Property FdeItemWidth() As Integer
      Get
        Return mvClassFields(FdePageItemFields.FdeItemWidth).IntegerValue
      End Get
    End Property
    Public ReadOnly Property InitialParameters() As String
      Get
        Return mvClassFields(FdePageItemFields.InitialParameters).Value
      End Get
    End Property
    Public ReadOnly Property DefaultParameters() As String
      Get
        Return mvClassFields(FdePageItemFields.DefaultParameters).Value
      End Get
    End Property
    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields(FdePageItemFields.AmendedBy).Value
      End Get
    End Property
    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields(FdePageItemFields.AmendedOn).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Private mvDefaultParameterList As CDBParameters
    Private mvInitialParameterList As CDBParameters

    Public ReadOnly Property CustomisationRequired() As Boolean
      Get
        Dim vFDEControl As New FDEUserControl(mvEnv)
        Select Case vFDEControl.ControlTypeFromName(FdeUserControl)
          Case Access.FDEUserControl.FDEControlTypes.AddDonationCC, Access.FDEUserControl.FDEControlTypes.AddMemberDD, _
               Access.FDEUserControl.FDEControlTypes.AddDonationCC, Access.FDEUserControl.FDEControlTypes.AddRegularDonation, _
               Access.FDEUserControl.FDEControlTypes.ActivityDisplay, Access.FDEUserControl.FDEControlTypes.SuppressionDisplay
            Return True
          Case Else
            Return False
        End Select
      End Get
    End Property

    Public ReadOnly Property DefaultParameterList() As CDBParameters
      Get
        If mvDefaultParameterList Is Nothing Then mvDefaultParameterList = BuildParameterList(DefaultParameters)
        Return mvDefaultParameterList
      End Get
    End Property

    Public ReadOnly Property FDEControlType() As FDEUserControl.FDEControlTypes
      Get
        Dim vFDEControl As New FDEUserControl(mvEnv)
        Return vFDEControl.ControlTypeFromName(FdeUserControl)
      End Get
    End Property

    Public ReadOnly Property FpPageType() As String
      Get
        Dim vFDEControl As New FDEUserControl(mvEnv)
        If mvExisting Then vFDEControl.Init(FdeUserControl)
        Return vFDEControl.FpPageType
      End Get
    End Property

    Public ReadOnly Property InitialParameterList() As CDBParameters
      Get
        If mvInitialParameterList Is Nothing Then mvInitialParameterList = BuildParameterList(InitialParameters)
        Return mvInitialParameterList
      End Get
    End Property

    Private Function BuildParameterList(ByVal pList As String) As CDBParameters
      Dim vParams As New CDBParameters

      If pList.Length > 0 Then
        Dim vList As String() = pList.Split(","c)

        For vIndex As Integer = 0 To vList.GetUpperBound(0)
          Dim vKey As String = ""
          Dim vValue As String = ""
          If vList(vIndex).Contains("=") Then
            Dim vPos As Integer = vList(vIndex).IndexOf("=")
            vKey = vList(vIndex).Substring(0, vPos)
            vValue = vList(vIndex).Substring(vPos + 1)
            If vValue.Contains("+") Then vValue = vValue.Replace("+", ",")
            If vValue.Contains("^") Then vValue = vValue.Replace("^", "=")
          Else
            vKey = vList(vIndex)
          End If
          vParams.Add(vKey, vValue)
        Next
      End If

      Return vParams
    End Function

    Public Function ItemDataTable(ByVal pAttributeName As String) As CDBDataTable
      Dim vDT As New CDBDataTable
      Select Case FDEControlType
        Case Access.FDEUserControl.FDEControlTypes.AddDonationCC, Access.FDEUserControl.FDEControlTypes.AddMemberDD, Access.FDEUserControl.FDEControlTypes.AddRegularDonation
          Dim vAttrs As String = ""
          Dim vTableNames As String = ""
          Dim vOrderBy As String = ""
          Dim vWhereFields As New CDBFields
          Select Case pAttributeName
            Case "distribution_code"
              vAttrs = "distribution_code, distribution_code_desc"
              vOrderBy = "distribution_code_desc"
              If DefaultParameterList.ContainsKey("DistributionCodeLookupGroup") Then
                'restrict by lookup group
                vTableNames = "lookup_group_details lgd,"
                vWhereFields.Add("lgd.lookup_group", DefaultParameterList("DistributionCodeLookupGroup").Value)
                vWhereFields.AddJoin("lgd.lookup_item", "dc.distribution_code")
              End If
              If mvEnv.GetDataStructureInfo(CDBEnvironment.cdbDataStructureConstants.cdbDataHistoryOnlyDistribCodes) Then vWhereFields.Add("dc.history_only", "N")
              vTableNames &= "distribution_codes dc"
            Case "membership_type"
              vAttrs = "membership_type, membership_type_desc"
              vTableNames = "membership_types mt"
              vOrderBy = "membership_type_desc"
              vWhereFields.Add("members_per_order", "0", CDBField.FieldWhereOperators.fwoGreaterThan)
              vWhereFields.Add("associate_membership_type", "")
            Case "payment_frequency"
              vAttrs = "payment_frequency, payment_frequency_desc"
              vTableNames = "payment_frequencies pf"
              vOrderBy = "payment_frequency_desc"
              If FDEControlType = Access.FDEUserControl.FDEControlTypes.AddRegularDonation Then vWhereFields.Add("frequency", 1)
          End Select
          If vAttrs.Length > 0 Then
            Dim vSQLStatement As New SQLStatement(mvEnv.Connection, vAttrs, vTableNames, vWhereFields, vOrderBy)
            vDT.FillFromSQL(mvEnv, vSQLStatement, True)
          End If
      End Select
      Return vDT
    End Function

    Public Sub RevertPageControls()
      Dim vCDBControl As New CDBcontrol(mvEnv)
      vCDBControl.RevertPageControls(FdePageItemNumber, FpPageType)
    End Sub
#End Region

  End Class
End Namespace
