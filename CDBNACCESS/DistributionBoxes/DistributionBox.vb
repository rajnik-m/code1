Namespace Access
  Public Class DistributionBox
    Inherits CARERecord

#Region "AutoGenerated Code"

    '--------------------------------------------------
    'Enum defining all the fields in the table
    '--------------------------------------------------
    Private Enum DistributionBoxFields
      AllFields = 0
      DistributionCode
      BoxNumber
      DistributionAffiliate
      Warehouse
      BoxStatus
      LabelPrinted
      AdviceNotePrinted
      BoxDestination
      DateSent
      DateArrived
      DespatchMethod
      BoxPrice
      BoxValue
      BoxCurrencyValue
      Comments
      AmendedBy
      AmendedOn
    End Enum

    '--------------------------------------------------
    'Required overrides for the class
    '--------------------------------------------------
    Protected Overrides Sub AddFields()
      With mvClassFields
        .Add("distribution_code")
        .Add("box_number", CDBField.FieldTypes.cftLong)
        .Add("distribution_affiliate")
        .Add("warehouse")
        .Add("box_status")
        .Add("label_printed")
        .Add("advice_note_printed")
        .Add("box_destination")
        .Add("date_sent", CDBField.FieldTypes.cftDate)
        .Add("date_arrived", CDBField.FieldTypes.cftDate)
        .Add("despatch_method")
        .Add("box_price", CDBField.FieldTypes.cftNumeric)
        .Add("box_value", CDBField.FieldTypes.cftNumeric)
        .Add("box_currency_value", CDBField.FieldTypes.cftNumeric)
        .Add("comments")

        .Item(DistributionBoxFields.DistributionCode).PrimaryKey = True
      End With
    End Sub
    Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
      Get
        Return True
      End Get
    End Property
    Protected Overrides ReadOnly Property TableAlias() As String
      Get
        Return "db"
      End Get
    End Property
    Protected Overrides ReadOnly Property DatabaseTableName() As String
      Get
        Return "distribution_boxes"
      End Get
    End Property

    '--------------------------------------------------
    'Default constructor
    '--------------------------------------------------
    Public Sub New(ByVal pEnv As CDBEnvironment)
      MyBase.New(pEnv)
    End Sub

    '--------------------------------------------------
    'Public property procedures
    '--------------------------------------------------
    Public ReadOnly Property AdviceNotePrinted() As Boolean
      Get
        Return mvClassFields.Item(DistributionBoxFields.AdviceNotePrinted).Bool
      End Get
    End Property

    Public ReadOnly Property AmendedBy() As String
      Get
        Return mvClassFields.Item(DistributionBoxFields.AmendedBy).Value
      End Get
    End Property

    Public ReadOnly Property AmendedOn() As String
      Get
        Return mvClassFields.Item(DistributionBoxFields.AmendedOn).Value
      End Get
    End Property

    Public ReadOnly Property BoxCurrencyValue() As Double
      Get
        Return mvClassFields.Item(DistributionBoxFields.BoxCurrencyValue).DoubleValue
      End Get
    End Property

    Public ReadOnly Property BoxDestination() As String
      Get
        Return mvClassFields.Item(DistributionBoxFields.BoxDestination).Value
      End Get
    End Property

    Public ReadOnly Property BoxNumber() As Integer
      Get
        Return CInt(mvClassFields.Item(DistributionBoxFields.BoxNumber).Value)
      End Get
    End Property

    Public ReadOnly Property BoxPrice() As Double
      Get
        Return mvClassFields.Item(DistributionBoxFields.BoxPrice).DoubleValue
      End Get
    End Property

    Public ReadOnly Property BoxStatus() As DistributionBoxStatus
      Get
        If mvClassFields.Item(DistributionBoxFields.BoxStatus).Value = "C" Then
          Return DistributionBoxStatus.Closed
        Else
          Return DistributionBoxStatus.Open
        End If
      End Get
    End Property

    Public ReadOnly Property BoxStatusCode() As String
      Get
        Return mvClassFields.Item(DistributionBoxFields.BoxStatus).Value
      End Get
    End Property

    Public ReadOnly Property BoxValue() As Double
      Get
        Return mvClassFields.Item(DistributionBoxFields.BoxValue).DoubleValue
      End Get
    End Property

    Public ReadOnly Property Comments() As String
      Get
        Return mvClassFields.Item(DistributionBoxFields.Comments).Value
      End Get
    End Property

    Public ReadOnly Property DateArrived() As String
      Get
        Return mvClassFields.Item(DistributionBoxFields.DateArrived).Value
      End Get
    End Property

    Public ReadOnly Property DateSent() As String
      Get
        Return mvClassFields.Item(DistributionBoxFields.DateSent).Value
      End Get
    End Property

    Public ReadOnly Property DespatchMethod() As String
      Get
        Return mvClassFields.Item(DistributionBoxFields.DespatchMethod).Value
      End Get
    End Property

    Public ReadOnly Property DistributionAffiliateCode() As String
      Get
        Return mvClassFields.Item(DistributionBoxFields.DistributionAffiliate).Value
      End Get
    End Property

    Public ReadOnly Property DistributionCode() As String
      Get
        Return mvClassFields.Item(DistributionBoxFields.DistributionCode).Value
      End Get
    End Property

    Public ReadOnly Property LabelPrinted() As Boolean
      Get
        Return mvClassFields.Item(DistributionBoxFields.LabelPrinted).Bool
      End Get
    End Property

    Public ReadOnly Property Warehouse() As String
      Get
        Return mvClassFields.Item(DistributionBoxFields.Warehouse).Value
      End Get
    End Property
#End Region

#Region "Non-AutoGenerated Code"

    Private mvMinBoxPrice As Double

    Public Enum DistributionBoxStatus
      Open
      Closed
    End Enum

    Public Sub InitFromBoxNumber(ByVal pEnv As CDBEnvironment, ByVal pDistributionAffiliate As String, ByVal pBoxNumber As Long)
      Dim vRecordSet As CDBRecordSet

      mvEnv = pEnv
      If Len(pDistributionAffiliate) > 0 And pBoxNumber > 0 Then
        vRecordSet = pEnv.Connection.GetRecordSet("SELECT " & GetRecordSetFields() & " FROM distribution_boxes db WHERE distribution_affiliate = '" & pDistributionAffiliate & "' AND box_number = " & pBoxNumber)
        If vRecordSet.Fetch() Then
          InitFromRecordSet(vRecordSet)
        Else
          InitClassFields()
          SetDefaults()
        End If
        vRecordSet.CloseRecordSet()
      Else
        InitClassFields()
        SetDefaults()
      End If
    End Sub

    Public Sub AllocateDonation(ByVal pCurrencyAmount As Double, ByVal pSterlingAmount As Double)
      AllocateDonation(pCurrencyAmount, pSterlingAmount, False)
    End Sub

    Public Sub AllocateDonation(ByVal pCurrencyAmount As Double, ByVal pSterlingAmount As Double, ByVal pFundraiserDonationsRemaining As Boolean)
      mvClassFields.Item(DistributionBoxFields.BoxCurrencyValue).DoubleValue = FixTwoPlaces(mvClassFields.Item(DistributionBoxFields.BoxCurrencyValue).DoubleValue + pCurrencyAmount)
      mvClassFields.Item(DistributionBoxFields.BoxValue).DoubleValue = FixTwoPlaces(mvClassFields.Item(DistributionBoxFields.BoxValue).DoubleValue + pSterlingAmount)
      If FixTwoPlaces(BoxCurrencyValue) = FixTwoPlaces(BoxPrice) Then
        'Box is complete so close it
        CloseBox()
      ElseIf (FixTwoPlaces(BoxCurrencyValue) >= mvMinBoxPrice) And mvMinBoxPrice > 0 And Not pFundraiserDonationsRemaining Then
        'Box is not complete but can be closed if it is >= 98% of BoxPrice
        CloseBox()
      ElseIf BoxStatus = DistributionBoxStatus.Closed And pSterlingAmount < 0 And pCurrencyAmount < 0 Then
        'Open the Box when processing the adjustment for a Closed Box
        mvClassFields.Item(DistributionBoxFields.BoxStatus).Value = "O"
      End If
    End Sub

    Public Sub CloseBox()
      mvClassFields.Item(DistributionBoxFields.BoxStatus).Value = "C"
    End Sub

    Protected Overrides Sub SetDefaults()
      MyBase.SetDefaults()
      With mvClassFields
        .Item(DistributionBoxFields.BoxStatus).Value = "O"
        .Item(DistributionBoxFields.LabelPrinted).Value = "N"
        .Item(DistributionBoxFields.AdviceNotePrinted).Value = "N"
        .Item(DistributionBoxFields.BoxValue).Value = "0.00"
        .Item(DistributionBoxFields.BoxCurrencyValue).Value = "0.00"
      End With
      mvMinBoxPrice = 0
    End Sub

    Public Overrides Sub InitFromRecordSet(ByVal pRecordSet As Data.CDBRecordSet)
      MyBase.InitFromRecordSet(pRecordSet)
      mvMinBoxPrice = FixTwoPlaces(mvClassFields.Item(DistributionBoxFields.BoxPrice).DoubleValue - ((mvClassFields.Item(DistributionBoxFields.BoxPrice).DoubleValue / 100) * 2))  'Minimum amount is BoxPrice less 2%
    End Sub

#End Region

  End Class
End Namespace