Imports CARE.Access
Imports CARE.Data

Public Class DefectReport
  Inherits CARERecord

  Public Sub New(ByVal pEnv As CDBEnvironment)
    MyBase.New(pEnv)
  End Sub

  Protected Overrides Sub AddFields()
    With mvClassFields
      .Add("report_number")
      .Add("version")
      .Add("workaround")
      .Add("report_type")
      .Add("reported_on", CDBField.FieldTypes.cftDate)
      .Add("area")
      .Add("description")
      .Add("resolution")
      .Add("log_number", CDBField.FieldTypes.cftInteger)
      .Add("finder")
      .Add("change_configuration")
      .Add("change_database")
      .Add("change_reports")
      .Add("fixed_on", CDBField.FieldTypes.cftDate)
      .Add("fixed_in_version", CDBField.FieldTypes.cftInteger)
    End With
  End Sub

  Protected Overrides ReadOnly Property DatabaseTableName() As String
    Get
      Return "reports"
    End Get
  End Property

  Protected Overrides ReadOnly Property SupportsAmendedOnAndBy() As Boolean
    Get
      Return False
    End Get
  End Property

  Protected Overrides ReadOnly Property TableAlias() As String
    Get
      Return "br"
    End Get
  End Property

#Region "Non-AutoGenerated Code"

  Public Enum DefectReportType
    BugReport
    Jira
  End Enum

  Private Enum JiraFields
    IssueType
    ReportNumber
    Client
    Summary
    FixedInBuild
    CreatedDate
    Resolution
    CRMReferences
    SupportIncidents
    Components
    FixedInRelease
    FoundInBuild
    FixedOnDate
  End Enum

  Private mvDefectReportType As DefectReportType = DefectReportType.BugReport
  Private mvFixedInRelease As String = ""

  Friend Sub New(ByVal pEnv As CDBEnvironment, ByVal pJiraData As CARE.ArrayListEx)
    MyBase.New(pEnv)
    InitClassFields()
    mvDefectReportType = DefectReportType.Jira
    mvExisting = True
    With mvClassFields
      .Item("report_type").Value = pJiraData.Item(JiraFields.IssueType).ToString
      .Item("report_number").Value = pJiraData.Item(JiraFields.ReportNumber).ToString
      '.Item("client_code").Value = pJiraData.Item(JiraFields.Client).ToString
      .Item("description").Value = pJiraData.Item(JiraFields.Summary).ToString
      .Item("fixed_in_version").Value = CleanBuildNumbers(pJiraData.Item(JiraFields.FixedInBuild).ToString)
      .Item("reported_on").Value = CleanDates(pJiraData.Item(JiraFields.CreatedDate).ToString)
      .Item("resolution").Value = CleanResolution(pJiraData.Item(JiraFields.Resolution).ToString)
      '.Item("log_number").Value = pJiraData.Item(JiraFields.CRMReferences).ToString
      .Item("area").Value = pJiraData.Item(JiraFields.Components).ToString
      .Item("version").Value = CleanBuildNumbers(pJiraData.Item(JiraFields.FoundInBuild).ToString)
      .Item("fixed_on").Value = CleanDates(pJiraData.Item(JiraFields.FixedOnDate).ToString)
    End With
    'Handle an special cases
    'FixedInRelease
    mvFixedInRelease = CleanReleaseNumber(pJiraData.Item(JiraFields.FixedInRelease).ToString)
    'Client
    Dim vClient As String = pJiraData.Item(JiraFields.Client).ToString
    If vClient.StartsWith("CBS") OrElse vClient.StartsWith("TEST") Then
      vClient = ""
    Else
      vClient = "C"
    End If
    mvClassFields.Item("finder").Value = vClient
    'ReportType
    If mvClassFields.Item("report_type").Value.ToLower = "defect" Then
      mvClassFields.Item("report_type").Value = "BugReport"
    ElseIf pJiraData.Item(JiraFields.Client).ToString.ToLower.StartsWith("test") Then
      mvClassFields.Item("report_type").Value = "SystemTest"
    End If
    'CRMReferences
    Dim vCRMReferences As String = pJiraData.Item(JiraFields.CRMReferences).ToString
    If vCRMReferences.ToLower.StartsWith("no crm") Then vCRMReferences = ""
    mvClassFields.Item("log_number").Value = vCRMReferences
    'FoundInVersion
    If mvClassFields.Item("version").Value.Length = 0 Then mvClassFields.Item("version").Value = "n/a"
  End Sub

  Private Function CleanBuildNumbers(ByVal pBuildNumber As String) As String
    'If pBuildNumber.ToLower.StartsWith("build") Then pBuildNumber = pBuildNumber.Substring(5).Trim
    If pBuildNumber.ToLower.Contains("build") Then
      Dim vPos As Integer = pBuildNumber.ToLower.IndexOf("build")
      If vPos >= 0 Then pBuildNumber = pBuildNumber.Substring(vPos + 5).Trim
    End If
    If pBuildNumber.StartsWith("_") OrElse pBuildNumber.StartsWith("-") Then pBuildNumber = pBuildNumber.Substring(1).Trim
    If pBuildNumber.Contains(",") Then
      Dim vPos As Integer = pBuildNumber.IndexOf(","c)
      pBuildNumber = pBuildNumber.Substring(0, vPos - 1).Trim
    End If
    If pBuildNumber.Length > 0 AndAlso pBuildNumber.Contains(".") Then
      Dim vPos As Integer = pBuildNumber.LastIndexOf("."c)
      pBuildNumber = pBuildNumber.Substring(vPos + 1).Trim
    End If
    If pBuildNumber.Contains("+") Then
      Dim vPos As Integer = pBuildNumber.IndexOf("+"c)
      pBuildNumber = pBuildNumber.Substring(0, vPos).Trim
    End If
    Return pBuildNumber
  End Function

  Private Function CleanResolution(ByVal pResolution As String) As String
    'Remove clone info
    'If pResolution.ToUpper.StartsWith("CLONE") OrElse pResolution.Contains("CLONE") Then
    '  Do
    '    pResolution = pResolution.Substring(5).Trim
    '    If pResolution.StartsWith("-") OrElse pResolution.StartsWith("_") Then pResolution = pResolution.Substring(1).Trim
    '  Loop While pResolution.ToLower.StartsWith("clone")
    'End If
    Return pResolution
  End Function

  Private Function CleanDates(ByVal pDate As String) As String
    'Remove time info
    Dim vNewDate As String = pDate
    Dim vDate As Date
    If Date.TryParse(pDate, vDate) Then
      vNewDate = vDate.ToShortDateString
    End If
    Return vNewDate
  End Function

  Private Function CleanReleaseNumber(ByVal pReleaseNumber As String) As String
    If pReleaseNumber.Length > 0 Then
      If pReleaseNumber.ToLower.StartsWith("v") Then pReleaseNumber = pReleaseNumber.Substring(1).Trim
      If pReleaseNumber.Contains(" ") Then
        Dim vPos As Integer = pReleaseNumber.IndexOf(" "c)
        pReleaseNumber = pReleaseNumber.Substring(0, vPos).Trim
      End If
      If pReleaseNumber.Contains(",") Then
        Dim vPos As Integer = pReleaseNumber.IndexOf(","c)
        pReleaseNumber = pReleaseNumber.Substring(0, vPos).Trim
      End If
      If pReleaseNumber.Contains("R") Then pReleaseNumber = pReleaseNumber.Replace("R", ".")
    End If
    Return pReleaseNumber
  End Function

  Private Function GetJiraReportNumber(ByVal pJiraReport As String) As Integer
    Dim vJiraReportNumber As Integer
    If pJiraReport.StartsWith("NFPCARE") Then
      vJiraReportNumber = CInt(pJiraReport.Substring(8))
    Else
      vJiraReportNumber = CInt(pJiraReport)
    End If
    Return vJiraReportNumber
  End Function

  Friend ReadOnly Property FixedInRelease() As String
    Get
      Return mvFixedInRelease
    End Get
  End Property

  Friend ReadOnly Property FixedInVersion() As Integer
    Get
      Return mvClassFields.Item("fixed_in_version").IntegerValue
    End Get
  End Property

  Friend ReadOnly Property ReportType() As DefectReport.DefectReportType
    Get
      Return mvDefectReportType
    End Get
  End Property

  Public Overrides Function ToString() As String
    Dim vFixedInString As String = FixedInVersion.ToString()
    If mvDefectReportType = DefectReportType.BugReport Then
      Return vFixedInString
    Else
      Return vFixedInString & GetJiraReportNumber(mvClassFields.Item("report_number").Value).ToString("0000")
    End If
  End Function

#End Region

End Class
