'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
'
Namespace ExamsAccess
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ExamsDataAccessSoap", [Namespace]:="http://care.co.uk/webservices/")>  _
    Partial Public Class ExamsDataAccess
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private UpdateCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamBookingUnitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamCentreAssessmentTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamCentreAssessmentTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamCentreAssessmentTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamCentreActionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamCentreContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamCentreContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamCentreContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamCentreUnitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamCentreUnitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamCentreUnitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamCentreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamCentreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamCentreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamExemptionUnitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamExemptionUnitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamExemptionUnitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamExemptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamExemptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamExemptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamPersonnelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamPersonnelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamPersonnelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamPersonnelAssessTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamPersonnelAssessTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamPersonnelAssessTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamPersonnelExpenseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamPersonnelExpenseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamPersonnelExpenseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamSessionCentreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamSessionCentreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamSessionCentreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamSessionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamSessionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamSessionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamStudentExemptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamStudentExemptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamStudentExemptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamStudentUnitHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamUnitAssessmentTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamUnitAssessmentTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamUnitAssessmentTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamUnitEligibilityCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamUnitEligibilityCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamUnitEligibilityCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamUnitGradeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamUnitGradeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamUnitGradeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamUnitLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShareExamUnitLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamUnitLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamUnitPersonnelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamUnitPersonnelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamUnitPersonnelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamUnitPrerequisiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamUnitPrerequisiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamUnitPrerequisiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamUnitProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamUnitProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamUnitProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamUnitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamUnitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamUnitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectExamDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExamMaintenanceControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamMaintenanceControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateExamProgrammeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateExamCentreUnitsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateExamSessionCentresOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExamEligibilityChecksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CalculateExamBookingPriceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindExamPersonnelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelExamBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeExamBookingCentreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamCandidateActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExamCandidateActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamCandidateActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExamMarkerAllocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExamMarkerAllocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CareDocumentation.My.MySettings.Default.CareDocumentation_ExamsAccess_ExamsDataAccess
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event UpdateCategoryCompleted As UpdateCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCategoryCompleted As DeleteCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamBookingUnitCompleted As UpdateExamBookingUnitCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamBookingCompleted As AddExamBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamCentreAssessmentTypeCompleted As AddExamCentreAssessmentTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamCentreAssessmentTypeCompleted As UpdateExamCentreAssessmentTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamCentreAssessmentTypeCompleted As DeleteExamCentreAssessmentTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamCentreActionCompleted As AddExamCentreActionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamCentreContactCompleted As AddExamCentreContactCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamCentreContactCompleted As UpdateExamCentreContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamCentreContactCompleted As DeleteExamCentreContactCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamCentreUnitCompleted As AddExamCentreUnitCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamCentreUnitCompleted As UpdateExamCentreUnitCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamCentreUnitCompleted As DeleteExamCentreUnitCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamCentreCompleted As AddExamCentreCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamCentreCompleted As UpdateExamCentreCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamCentreCompleted As DeleteExamCentreCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamExemptionUnitCompleted As AddExamExemptionUnitCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamExemptionUnitCompleted As UpdateExamExemptionUnitCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamExemptionUnitCompleted As DeleteExamExemptionUnitCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamExemptionCompleted As AddExamExemptionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamExemptionCompleted As UpdateExamExemptionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamExemptionCompleted As DeleteExamExemptionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamPersonnelCompleted As AddExamPersonnelCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamPersonnelCompleted As UpdateExamPersonnelCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamPersonnelCompleted As DeleteExamPersonnelCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamPersonnelAssessTypeCompleted As AddExamPersonnelAssessTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamPersonnelAssessTypeCompleted As UpdateExamPersonnelAssessTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamPersonnelAssessTypeCompleted As DeleteExamPersonnelAssessTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamPersonnelExpenseCompleted As AddExamPersonnelExpenseCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamPersonnelExpenseCompleted As UpdateExamPersonnelExpenseCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamPersonnelExpenseCompleted As DeleteExamPersonnelExpenseCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamScheduleCompleted As AddExamScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamScheduleCompleted As UpdateExamScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamScheduleCompleted As DeleteExamScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamSessionCentreCompleted As AddExamSessionCentreCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamSessionCentreCompleted As UpdateExamSessionCentreCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamSessionCentreCompleted As DeleteExamSessionCentreCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamSessionCompleted As AddExamSessionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamSessionCompleted As UpdateExamSessionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamSessionCompleted As DeleteExamSessionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamStudentExemptionCompleted As AddExamStudentExemptionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamStudentExemptionCompleted As UpdateExamStudentExemptionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamStudentExemptionCompleted As DeleteExamStudentExemptionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamStudentUnitHeaderCompleted As UpdateExamStudentUnitHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamUnitAssessmentTypeCompleted As AddExamUnitAssessmentTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamUnitAssessmentTypeCompleted As UpdateExamUnitAssessmentTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamUnitAssessmentTypeCompleted As DeleteExamUnitAssessmentTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamUnitEligibilityCheckCompleted As AddExamUnitEligibilityCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamUnitEligibilityCheckCompleted As UpdateExamUnitEligibilityCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamUnitEligibilityCheckCompleted As DeleteExamUnitEligibilityCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamUnitGradeCompleted As AddExamUnitGradeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamUnitGradeCompleted As UpdateExamUnitGradeCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamUnitGradeCompleted As DeleteExamUnitGradeCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamUnitLinkCompleted As AddExamUnitLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event ShareExamUnitLinkCompleted As ShareExamUnitLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamUnitLinkCompleted As DeleteExamUnitLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamUnitPersonnelCompleted As AddExamUnitPersonnelCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamUnitPersonnelCompleted As UpdateExamUnitPersonnelCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamUnitPersonnelCompleted As DeleteExamUnitPersonnelCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamUnitPrerequisiteCompleted As AddExamUnitPrerequisiteCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamUnitPrerequisiteCompleted As UpdateExamUnitPrerequisiteCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamUnitPrerequisiteCompleted As DeleteExamUnitPrerequisiteCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamUnitProductCompleted As AddExamUnitProductCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamUnitProductCompleted As UpdateExamUnitProductCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamUnitProductCompleted As DeleteExamUnitProductCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamUnitCompleted As AddExamUnitCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamUnitCompleted As UpdateExamUnitCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamUnitCompleted As DeleteExamUnitCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectExamDataCompleted As SelectExamDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExamMaintenanceControlsCompleted As GetExamMaintenanceControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamMaintenanceControlsCompleted As UpdateExamMaintenanceControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateExamProgrammeCompleted As CreateExamProgrammeCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateExamCentreUnitsCompleted As CreateExamCentreUnitsCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateExamSessionCentresCompleted As CreateExamSessionCentresCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExamEligibilityChecksCompleted As GetExamEligibilityChecksCompletedEventHandler
        
        '''<remarks/>
        Public Event CalculateExamBookingPriceCompleted As CalculateExamBookingPriceCompletedEventHandler
        
        '''<remarks/>
        Public Event FindExamPersonnelCompleted As FindExamPersonnelCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelExamBookingCompleted As CancelExamBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeExamBookingCentreCompleted As ChangeExamBookingCentreCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamCandidateActivityCompleted As AddExamCandidateActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExamCandidateActivityCompleted As UpdateExamCandidateActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamCandidateActivityCompleted As DeleteExamCandidateActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExamMarkerAllocationCompleted As DeleteExamMarkerAllocationCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExamMarkerAllocationCompleted As AddExamMarkerAllocationCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCategoryCompleted As AddCategoryCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCategory", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCategory(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCategory", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCategoryAsync(ByVal pXMLParams As String)
            Me.UpdateCategoryAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCategoryAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCategoryOperationCompleted Is Nothing) Then
                Me.UpdateCategoryOperationCompleted = AddressOf Me.OnUpdateCategoryOperationCompleted
            End If
            Me.InvokeAsync("UpdateCategory", New Object() {pXMLParams}, Me.UpdateCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCategoryCompleted(Me, New UpdateCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCategory", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCategory(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCategory", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCategoryAsync(ByVal pXMLParams As String)
            Me.DeleteCategoryAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCategoryAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCategoryOperationCompleted Is Nothing) Then
                Me.DeleteCategoryOperationCompleted = AddressOf Me.OnDeleteCategoryOperationCompleted
            End If
            Me.InvokeAsync("DeleteCategory", New Object() {pXMLParams}, Me.DeleteCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCategoryCompleted(Me, New DeleteCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamBookingUnit", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamBookingUnit(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamBookingUnit", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamBookingUnitAsync(ByVal pXMLParams As String)
            Me.UpdateExamBookingUnitAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamBookingUnitAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamBookingUnitOperationCompleted Is Nothing) Then
                Me.UpdateExamBookingUnitOperationCompleted = AddressOf Me.OnUpdateExamBookingUnitOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamBookingUnit", New Object() {pXMLParams}, Me.UpdateExamBookingUnitOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamBookingUnitOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamBookingUnitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamBookingUnitCompleted(Me, New UpdateExamBookingUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamBookingAsync(ByVal pXMLParams As String)
            Me.AddExamBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamBookingOperationCompleted Is Nothing) Then
                Me.AddExamBookingOperationCompleted = AddressOf Me.OnAddExamBookingOperationCompleted
            End If
            Me.InvokeAsync("AddExamBooking", New Object() {pXMLParams}, Me.AddExamBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamBookingCompleted(Me, New AddExamBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamCentreAssessmentType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamCentreAssessmentType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamCentreAssessmentType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamCentreAssessmentTypeAsync(ByVal pXMLParams As String)
            Me.AddExamCentreAssessmentTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamCentreAssessmentTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamCentreAssessmentTypeOperationCompleted Is Nothing) Then
                Me.AddExamCentreAssessmentTypeOperationCompleted = AddressOf Me.OnAddExamCentreAssessmentTypeOperationCompleted
            End If
            Me.InvokeAsync("AddExamCentreAssessmentType", New Object() {pXMLParams}, Me.AddExamCentreAssessmentTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamCentreAssessmentTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamCentreAssessmentTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamCentreAssessmentTypeCompleted(Me, New AddExamCentreAssessmentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamCentreAssessmentType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamCentreAssessmentType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamCentreAssessmentType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamCentreAssessmentTypeAsync(ByVal pXMLParams As String)
            Me.UpdateExamCentreAssessmentTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamCentreAssessmentTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamCentreAssessmentTypeOperationCompleted Is Nothing) Then
                Me.UpdateExamCentreAssessmentTypeOperationCompleted = AddressOf Me.OnUpdateExamCentreAssessmentTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamCentreAssessmentType", New Object() {pXMLParams}, Me.UpdateExamCentreAssessmentTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamCentreAssessmentTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamCentreAssessmentTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamCentreAssessmentTypeCompleted(Me, New UpdateExamCentreAssessmentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamCentreAssessmentType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamCentreAssessmentType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamCentreAssessmentType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamCentreAssessmentTypeAsync(ByVal pXMLParams As String)
            Me.DeleteExamCentreAssessmentTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamCentreAssessmentTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamCentreAssessmentTypeOperationCompleted Is Nothing) Then
                Me.DeleteExamCentreAssessmentTypeOperationCompleted = AddressOf Me.OnDeleteExamCentreAssessmentTypeOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamCentreAssessmentType", New Object() {pXMLParams}, Me.DeleteExamCentreAssessmentTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamCentreAssessmentTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamCentreAssessmentTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamCentreAssessmentTypeCompleted(Me, New DeleteExamCentreAssessmentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamCentreAction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamCentreAction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamCentreAction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamCentreActionAsync(ByVal pXMLParams As String)
            Me.AddExamCentreActionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamCentreActionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamCentreActionOperationCompleted Is Nothing) Then
                Me.AddExamCentreActionOperationCompleted = AddressOf Me.OnAddExamCentreActionOperationCompleted
            End If
            Me.InvokeAsync("AddExamCentreAction", New Object() {pXMLParams}, Me.AddExamCentreActionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamCentreActionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamCentreActionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamCentreActionCompleted(Me, New AddExamCentreActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamCentreContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamCentreContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamCentreContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamCentreContactAsync(ByVal pXMLParams As String)
            Me.AddExamCentreContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamCentreContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamCentreContactOperationCompleted Is Nothing) Then
                Me.AddExamCentreContactOperationCompleted = AddressOf Me.OnAddExamCentreContactOperationCompleted
            End If
            Me.InvokeAsync("AddExamCentreContact", New Object() {pXMLParams}, Me.AddExamCentreContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamCentreContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamCentreContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamCentreContactCompleted(Me, New AddExamCentreContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamCentreContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamCentreContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamCentreContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamCentreContactAsync(ByVal pXMLParams As String)
            Me.UpdateExamCentreContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamCentreContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamCentreContactOperationCompleted Is Nothing) Then
                Me.UpdateExamCentreContactOperationCompleted = AddressOf Me.OnUpdateExamCentreContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamCentreContact", New Object() {pXMLParams}, Me.UpdateExamCentreContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamCentreContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamCentreContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamCentreContactCompleted(Me, New UpdateExamCentreContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamCentreContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamCentreContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamCentreContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamCentreContactAsync(ByVal pXMLParams As String)
            Me.DeleteExamCentreContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamCentreContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamCentreContactOperationCompleted Is Nothing) Then
                Me.DeleteExamCentreContactOperationCompleted = AddressOf Me.OnDeleteExamCentreContactOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamCentreContact", New Object() {pXMLParams}, Me.DeleteExamCentreContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamCentreContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamCentreContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamCentreContactCompleted(Me, New DeleteExamCentreContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamCentreUnit", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamCentreUnit(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamCentreUnit", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamCentreUnitAsync(ByVal pXMLParams As String)
            Me.AddExamCentreUnitAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamCentreUnitAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamCentreUnitOperationCompleted Is Nothing) Then
                Me.AddExamCentreUnitOperationCompleted = AddressOf Me.OnAddExamCentreUnitOperationCompleted
            End If
            Me.InvokeAsync("AddExamCentreUnit", New Object() {pXMLParams}, Me.AddExamCentreUnitOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamCentreUnitOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamCentreUnitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamCentreUnitCompleted(Me, New AddExamCentreUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamCentreUnit", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamCentreUnit(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamCentreUnit", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamCentreUnitAsync(ByVal pXMLParams As String)
            Me.UpdateExamCentreUnitAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamCentreUnitAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamCentreUnitOperationCompleted Is Nothing) Then
                Me.UpdateExamCentreUnitOperationCompleted = AddressOf Me.OnUpdateExamCentreUnitOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamCentreUnit", New Object() {pXMLParams}, Me.UpdateExamCentreUnitOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamCentreUnitOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamCentreUnitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamCentreUnitCompleted(Me, New UpdateExamCentreUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamCentreUnit", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamCentreUnit(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamCentreUnit", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamCentreUnitAsync(ByVal pXMLParams As String)
            Me.DeleteExamCentreUnitAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamCentreUnitAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamCentreUnitOperationCompleted Is Nothing) Then
                Me.DeleteExamCentreUnitOperationCompleted = AddressOf Me.OnDeleteExamCentreUnitOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamCentreUnit", New Object() {pXMLParams}, Me.DeleteExamCentreUnitOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamCentreUnitOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamCentreUnitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamCentreUnitCompleted(Me, New DeleteExamCentreUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamCentre", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamCentre(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamCentre", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamCentreAsync(ByVal pXMLParams As String)
            Me.AddExamCentreAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamCentreAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamCentreOperationCompleted Is Nothing) Then
                Me.AddExamCentreOperationCompleted = AddressOf Me.OnAddExamCentreOperationCompleted
            End If
            Me.InvokeAsync("AddExamCentre", New Object() {pXMLParams}, Me.AddExamCentreOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamCentreOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamCentreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamCentreCompleted(Me, New AddExamCentreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamCentre", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamCentre(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamCentre", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamCentreAsync(ByVal pXMLParams As String)
            Me.UpdateExamCentreAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamCentreAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamCentreOperationCompleted Is Nothing) Then
                Me.UpdateExamCentreOperationCompleted = AddressOf Me.OnUpdateExamCentreOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamCentre", New Object() {pXMLParams}, Me.UpdateExamCentreOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamCentreOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamCentreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamCentreCompleted(Me, New UpdateExamCentreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamCentre", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamCentre(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamCentre", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamCentreAsync(ByVal pXMLParams As String)
            Me.DeleteExamCentreAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamCentreAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamCentreOperationCompleted Is Nothing) Then
                Me.DeleteExamCentreOperationCompleted = AddressOf Me.OnDeleteExamCentreOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamCentre", New Object() {pXMLParams}, Me.DeleteExamCentreOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamCentreOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamCentreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamCentreCompleted(Me, New DeleteExamCentreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamExemptionUnit", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamExemptionUnit(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamExemptionUnit", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamExemptionUnitAsync(ByVal pXMLParams As String)
            Me.AddExamExemptionUnitAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamExemptionUnitAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamExemptionUnitOperationCompleted Is Nothing) Then
                Me.AddExamExemptionUnitOperationCompleted = AddressOf Me.OnAddExamExemptionUnitOperationCompleted
            End If
            Me.InvokeAsync("AddExamExemptionUnit", New Object() {pXMLParams}, Me.AddExamExemptionUnitOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamExemptionUnitOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamExemptionUnitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamExemptionUnitCompleted(Me, New AddExamExemptionUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamExemptionUnit", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamExemptionUnit(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamExemptionUnit", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamExemptionUnitAsync(ByVal pXMLParams As String)
            Me.UpdateExamExemptionUnitAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamExemptionUnitAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamExemptionUnitOperationCompleted Is Nothing) Then
                Me.UpdateExamExemptionUnitOperationCompleted = AddressOf Me.OnUpdateExamExemptionUnitOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamExemptionUnit", New Object() {pXMLParams}, Me.UpdateExamExemptionUnitOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamExemptionUnitOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamExemptionUnitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamExemptionUnitCompleted(Me, New UpdateExamExemptionUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamExemptionUnit", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamExemptionUnit(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamExemptionUnit", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamExemptionUnitAsync(ByVal pXMLParams As String)
            Me.DeleteExamExemptionUnitAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamExemptionUnitAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamExemptionUnitOperationCompleted Is Nothing) Then
                Me.DeleteExamExemptionUnitOperationCompleted = AddressOf Me.OnDeleteExamExemptionUnitOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamExemptionUnit", New Object() {pXMLParams}, Me.DeleteExamExemptionUnitOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamExemptionUnitOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamExemptionUnitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamExemptionUnitCompleted(Me, New DeleteExamExemptionUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamExemption", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamExemption(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamExemption", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamExemptionAsync(ByVal pXMLParams As String)
            Me.AddExamExemptionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamExemptionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamExemptionOperationCompleted Is Nothing) Then
                Me.AddExamExemptionOperationCompleted = AddressOf Me.OnAddExamExemptionOperationCompleted
            End If
            Me.InvokeAsync("AddExamExemption", New Object() {pXMLParams}, Me.AddExamExemptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamExemptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamExemptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamExemptionCompleted(Me, New AddExamExemptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamExemption", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamExemption(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamExemption", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamExemptionAsync(ByVal pXMLParams As String)
            Me.UpdateExamExemptionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamExemptionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamExemptionOperationCompleted Is Nothing) Then
                Me.UpdateExamExemptionOperationCompleted = AddressOf Me.OnUpdateExamExemptionOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamExemption", New Object() {pXMLParams}, Me.UpdateExamExemptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamExemptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamExemptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamExemptionCompleted(Me, New UpdateExamExemptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamExemption", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamExemption(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamExemption", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamExemptionAsync(ByVal pXMLParams As String)
            Me.DeleteExamExemptionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamExemptionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamExemptionOperationCompleted Is Nothing) Then
                Me.DeleteExamExemptionOperationCompleted = AddressOf Me.OnDeleteExamExemptionOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamExemption", New Object() {pXMLParams}, Me.DeleteExamExemptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamExemptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamExemptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamExemptionCompleted(Me, New DeleteExamExemptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamPersonnel", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamPersonnel(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamPersonnel", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamPersonnelAsync(ByVal pXMLParams As String)
            Me.AddExamPersonnelAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamPersonnelAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamPersonnelOperationCompleted Is Nothing) Then
                Me.AddExamPersonnelOperationCompleted = AddressOf Me.OnAddExamPersonnelOperationCompleted
            End If
            Me.InvokeAsync("AddExamPersonnel", New Object() {pXMLParams}, Me.AddExamPersonnelOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamPersonnelOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamPersonnelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamPersonnelCompleted(Me, New AddExamPersonnelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamPersonnel", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamPersonnel(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamPersonnel", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamPersonnelAsync(ByVal pXMLParams As String)
            Me.UpdateExamPersonnelAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamPersonnelAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamPersonnelOperationCompleted Is Nothing) Then
                Me.UpdateExamPersonnelOperationCompleted = AddressOf Me.OnUpdateExamPersonnelOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamPersonnel", New Object() {pXMLParams}, Me.UpdateExamPersonnelOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamPersonnelOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamPersonnelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamPersonnelCompleted(Me, New UpdateExamPersonnelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamPersonnel", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamPersonnel(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamPersonnel", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamPersonnelAsync(ByVal pXMLParams As String)
            Me.DeleteExamPersonnelAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamPersonnelAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamPersonnelOperationCompleted Is Nothing) Then
                Me.DeleteExamPersonnelOperationCompleted = AddressOf Me.OnDeleteExamPersonnelOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamPersonnel", New Object() {pXMLParams}, Me.DeleteExamPersonnelOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamPersonnelOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamPersonnelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamPersonnelCompleted(Me, New DeleteExamPersonnelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamPersonnelAssessType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamPersonnelAssessType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamPersonnelAssessType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamPersonnelAssessTypeAsync(ByVal pXMLParams As String)
            Me.AddExamPersonnelAssessTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamPersonnelAssessTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamPersonnelAssessTypeOperationCompleted Is Nothing) Then
                Me.AddExamPersonnelAssessTypeOperationCompleted = AddressOf Me.OnAddExamPersonnelAssessTypeOperationCompleted
            End If
            Me.InvokeAsync("AddExamPersonnelAssessType", New Object() {pXMLParams}, Me.AddExamPersonnelAssessTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamPersonnelAssessTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamPersonnelAssessTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamPersonnelAssessTypeCompleted(Me, New AddExamPersonnelAssessTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamPersonnelAssessType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamPersonnelAssessType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamPersonnelAssessType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamPersonnelAssessTypeAsync(ByVal pXMLParams As String)
            Me.UpdateExamPersonnelAssessTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamPersonnelAssessTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamPersonnelAssessTypeOperationCompleted Is Nothing) Then
                Me.UpdateExamPersonnelAssessTypeOperationCompleted = AddressOf Me.OnUpdateExamPersonnelAssessTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamPersonnelAssessType", New Object() {pXMLParams}, Me.UpdateExamPersonnelAssessTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamPersonnelAssessTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamPersonnelAssessTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamPersonnelAssessTypeCompleted(Me, New UpdateExamPersonnelAssessTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamPersonnelAssessType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamPersonnelAssessType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamPersonnelAssessType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamPersonnelAssessTypeAsync(ByVal pXMLParams As String)
            Me.DeleteExamPersonnelAssessTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamPersonnelAssessTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamPersonnelAssessTypeOperationCompleted Is Nothing) Then
                Me.DeleteExamPersonnelAssessTypeOperationCompleted = AddressOf Me.OnDeleteExamPersonnelAssessTypeOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamPersonnelAssessType", New Object() {pXMLParams}, Me.DeleteExamPersonnelAssessTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamPersonnelAssessTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamPersonnelAssessTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamPersonnelAssessTypeCompleted(Me, New DeleteExamPersonnelAssessTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamPersonnelExpense", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamPersonnelExpense(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamPersonnelExpense", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamPersonnelExpenseAsync(ByVal pXMLParams As String)
            Me.AddExamPersonnelExpenseAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamPersonnelExpenseAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamPersonnelExpenseOperationCompleted Is Nothing) Then
                Me.AddExamPersonnelExpenseOperationCompleted = AddressOf Me.OnAddExamPersonnelExpenseOperationCompleted
            End If
            Me.InvokeAsync("AddExamPersonnelExpense", New Object() {pXMLParams}, Me.AddExamPersonnelExpenseOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamPersonnelExpenseOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamPersonnelExpenseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamPersonnelExpenseCompleted(Me, New AddExamPersonnelExpenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamPersonnelExpense", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamPersonnelExpense(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamPersonnelExpense", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamPersonnelExpenseAsync(ByVal pXMLParams As String)
            Me.UpdateExamPersonnelExpenseAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamPersonnelExpenseAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamPersonnelExpenseOperationCompleted Is Nothing) Then
                Me.UpdateExamPersonnelExpenseOperationCompleted = AddressOf Me.OnUpdateExamPersonnelExpenseOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamPersonnelExpense", New Object() {pXMLParams}, Me.UpdateExamPersonnelExpenseOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamPersonnelExpenseOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamPersonnelExpenseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamPersonnelExpenseCompleted(Me, New UpdateExamPersonnelExpenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamPersonnelExpense", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamPersonnelExpense(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamPersonnelExpense", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamPersonnelExpenseAsync(ByVal pXMLParams As String)
            Me.DeleteExamPersonnelExpenseAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamPersonnelExpenseAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamPersonnelExpenseOperationCompleted Is Nothing) Then
                Me.DeleteExamPersonnelExpenseOperationCompleted = AddressOf Me.OnDeleteExamPersonnelExpenseOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamPersonnelExpense", New Object() {pXMLParams}, Me.DeleteExamPersonnelExpenseOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamPersonnelExpenseOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamPersonnelExpenseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamPersonnelExpenseCompleted(Me, New DeleteExamPersonnelExpenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamSchedule", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamSchedule(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamSchedule", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamScheduleAsync(ByVal pXMLParams As String)
            Me.AddExamScheduleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamScheduleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamScheduleOperationCompleted Is Nothing) Then
                Me.AddExamScheduleOperationCompleted = AddressOf Me.OnAddExamScheduleOperationCompleted
            End If
            Me.InvokeAsync("AddExamSchedule", New Object() {pXMLParams}, Me.AddExamScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamScheduleCompleted(Me, New AddExamScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamSchedule", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamSchedule(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamSchedule", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamScheduleAsync(ByVal pXMLParams As String)
            Me.UpdateExamScheduleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamScheduleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamScheduleOperationCompleted Is Nothing) Then
                Me.UpdateExamScheduleOperationCompleted = AddressOf Me.OnUpdateExamScheduleOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamSchedule", New Object() {pXMLParams}, Me.UpdateExamScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamScheduleCompleted(Me, New UpdateExamScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamSchedule", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamSchedule(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamSchedule", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamScheduleAsync(ByVal pXMLParams As String)
            Me.DeleteExamScheduleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamScheduleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamScheduleOperationCompleted Is Nothing) Then
                Me.DeleteExamScheduleOperationCompleted = AddressOf Me.OnDeleteExamScheduleOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamSchedule", New Object() {pXMLParams}, Me.DeleteExamScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamScheduleCompleted(Me, New DeleteExamScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamSessionCentre", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamSessionCentre(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamSessionCentre", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamSessionCentreAsync(ByVal pXMLParams As String)
            Me.AddExamSessionCentreAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamSessionCentreAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamSessionCentreOperationCompleted Is Nothing) Then
                Me.AddExamSessionCentreOperationCompleted = AddressOf Me.OnAddExamSessionCentreOperationCompleted
            End If
            Me.InvokeAsync("AddExamSessionCentre", New Object() {pXMLParams}, Me.AddExamSessionCentreOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamSessionCentreOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamSessionCentreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamSessionCentreCompleted(Me, New AddExamSessionCentreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamSessionCentre", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamSessionCentre(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamSessionCentre", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamSessionCentreAsync(ByVal pXMLParams As String)
            Me.UpdateExamSessionCentreAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamSessionCentreAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamSessionCentreOperationCompleted Is Nothing) Then
                Me.UpdateExamSessionCentreOperationCompleted = AddressOf Me.OnUpdateExamSessionCentreOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamSessionCentre", New Object() {pXMLParams}, Me.UpdateExamSessionCentreOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamSessionCentreOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamSessionCentreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamSessionCentreCompleted(Me, New UpdateExamSessionCentreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamSessionCentre", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamSessionCentre(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamSessionCentre", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamSessionCentreAsync(ByVal pXMLParams As String)
            Me.DeleteExamSessionCentreAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamSessionCentreAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamSessionCentreOperationCompleted Is Nothing) Then
                Me.DeleteExamSessionCentreOperationCompleted = AddressOf Me.OnDeleteExamSessionCentreOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamSessionCentre", New Object() {pXMLParams}, Me.DeleteExamSessionCentreOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamSessionCentreOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamSessionCentreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamSessionCentreCompleted(Me, New DeleteExamSessionCentreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamSession", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamSession(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamSession", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamSessionAsync(ByVal pXMLParams As String)
            Me.AddExamSessionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamSessionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamSessionOperationCompleted Is Nothing) Then
                Me.AddExamSessionOperationCompleted = AddressOf Me.OnAddExamSessionOperationCompleted
            End If
            Me.InvokeAsync("AddExamSession", New Object() {pXMLParams}, Me.AddExamSessionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamSessionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamSessionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamSessionCompleted(Me, New AddExamSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamSession", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamSession(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamSession", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamSessionAsync(ByVal pXMLParams As String)
            Me.UpdateExamSessionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamSessionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamSessionOperationCompleted Is Nothing) Then
                Me.UpdateExamSessionOperationCompleted = AddressOf Me.OnUpdateExamSessionOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamSession", New Object() {pXMLParams}, Me.UpdateExamSessionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamSessionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamSessionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamSessionCompleted(Me, New UpdateExamSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamSession", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamSession(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamSession", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamSessionAsync(ByVal pXMLParams As String)
            Me.DeleteExamSessionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamSessionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamSessionOperationCompleted Is Nothing) Then
                Me.DeleteExamSessionOperationCompleted = AddressOf Me.OnDeleteExamSessionOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamSession", New Object() {pXMLParams}, Me.DeleteExamSessionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamSessionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamSessionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamSessionCompleted(Me, New DeleteExamSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamStudentExemption", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamStudentExemption(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamStudentExemption", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamStudentExemptionAsync(ByVal pXMLParams As String)
            Me.AddExamStudentExemptionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamStudentExemptionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamStudentExemptionOperationCompleted Is Nothing) Then
                Me.AddExamStudentExemptionOperationCompleted = AddressOf Me.OnAddExamStudentExemptionOperationCompleted
            End If
            Me.InvokeAsync("AddExamStudentExemption", New Object() {pXMLParams}, Me.AddExamStudentExemptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamStudentExemptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamStudentExemptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamStudentExemptionCompleted(Me, New AddExamStudentExemptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamStudentExemption", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamStudentExemption(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamStudentExemption", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamStudentExemptionAsync(ByVal pXMLParams As String)
            Me.UpdateExamStudentExemptionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamStudentExemptionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamStudentExemptionOperationCompleted Is Nothing) Then
                Me.UpdateExamStudentExemptionOperationCompleted = AddressOf Me.OnUpdateExamStudentExemptionOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamStudentExemption", New Object() {pXMLParams}, Me.UpdateExamStudentExemptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamStudentExemptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamStudentExemptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamStudentExemptionCompleted(Me, New UpdateExamStudentExemptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamStudentExemption", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamStudentExemption(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamStudentExemption", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamStudentExemptionAsync(ByVal pXMLParams As String)
            Me.DeleteExamStudentExemptionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamStudentExemptionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamStudentExemptionOperationCompleted Is Nothing) Then
                Me.DeleteExamStudentExemptionOperationCompleted = AddressOf Me.OnDeleteExamStudentExemptionOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamStudentExemption", New Object() {pXMLParams}, Me.DeleteExamStudentExemptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamStudentExemptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamStudentExemptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamStudentExemptionCompleted(Me, New DeleteExamStudentExemptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamStudentUnitHeader", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamStudentUnitHeader(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamStudentUnitHeader", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamStudentUnitHeaderAsync(ByVal pXMLParams As String)
            Me.UpdateExamStudentUnitHeaderAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamStudentUnitHeaderAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamStudentUnitHeaderOperationCompleted Is Nothing) Then
                Me.UpdateExamStudentUnitHeaderOperationCompleted = AddressOf Me.OnUpdateExamStudentUnitHeaderOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamStudentUnitHeader", New Object() {pXMLParams}, Me.UpdateExamStudentUnitHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamStudentUnitHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamStudentUnitHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamStudentUnitHeaderCompleted(Me, New UpdateExamStudentUnitHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamUnitAssessmentType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamUnitAssessmentType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamUnitAssessmentType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitAssessmentTypeAsync(ByVal pXMLParams As String)
            Me.AddExamUnitAssessmentTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitAssessmentTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamUnitAssessmentTypeOperationCompleted Is Nothing) Then
                Me.AddExamUnitAssessmentTypeOperationCompleted = AddressOf Me.OnAddExamUnitAssessmentTypeOperationCompleted
            End If
            Me.InvokeAsync("AddExamUnitAssessmentType", New Object() {pXMLParams}, Me.AddExamUnitAssessmentTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamUnitAssessmentTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamUnitAssessmentTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamUnitAssessmentTypeCompleted(Me, New AddExamUnitAssessmentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamUnitAssessmentType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamUnitAssessmentType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamUnitAssessmentType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitAssessmentTypeAsync(ByVal pXMLParams As String)
            Me.UpdateExamUnitAssessmentTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitAssessmentTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamUnitAssessmentTypeOperationCompleted Is Nothing) Then
                Me.UpdateExamUnitAssessmentTypeOperationCompleted = AddressOf Me.OnUpdateExamUnitAssessmentTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamUnitAssessmentType", New Object() {pXMLParams}, Me.UpdateExamUnitAssessmentTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamUnitAssessmentTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamUnitAssessmentTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamUnitAssessmentTypeCompleted(Me, New UpdateExamUnitAssessmentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamUnitAssessmentType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamUnitAssessmentType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamUnitAssessmentType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitAssessmentTypeAsync(ByVal pXMLParams As String)
            Me.DeleteExamUnitAssessmentTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitAssessmentTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamUnitAssessmentTypeOperationCompleted Is Nothing) Then
                Me.DeleteExamUnitAssessmentTypeOperationCompleted = AddressOf Me.OnDeleteExamUnitAssessmentTypeOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamUnitAssessmentType", New Object() {pXMLParams}, Me.DeleteExamUnitAssessmentTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamUnitAssessmentTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamUnitAssessmentTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamUnitAssessmentTypeCompleted(Me, New DeleteExamUnitAssessmentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamUnitEligibilityCheck", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamUnitEligibilityCheck(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamUnitEligibilityCheck", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitEligibilityCheckAsync(ByVal pXMLParams As String)
            Me.AddExamUnitEligibilityCheckAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitEligibilityCheckAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamUnitEligibilityCheckOperationCompleted Is Nothing) Then
                Me.AddExamUnitEligibilityCheckOperationCompleted = AddressOf Me.OnAddExamUnitEligibilityCheckOperationCompleted
            End If
            Me.InvokeAsync("AddExamUnitEligibilityCheck", New Object() {pXMLParams}, Me.AddExamUnitEligibilityCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamUnitEligibilityCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamUnitEligibilityCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamUnitEligibilityCheckCompleted(Me, New AddExamUnitEligibilityCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamUnitEligibilityCheck", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamUnitEligibilityCheck(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamUnitEligibilityCheck", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitEligibilityCheckAsync(ByVal pXMLParams As String)
            Me.UpdateExamUnitEligibilityCheckAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitEligibilityCheckAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamUnitEligibilityCheckOperationCompleted Is Nothing) Then
                Me.UpdateExamUnitEligibilityCheckOperationCompleted = AddressOf Me.OnUpdateExamUnitEligibilityCheckOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamUnitEligibilityCheck", New Object() {pXMLParams}, Me.UpdateExamUnitEligibilityCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamUnitEligibilityCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamUnitEligibilityCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamUnitEligibilityCheckCompleted(Me, New UpdateExamUnitEligibilityCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamUnitEligibilityCheck", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamUnitEligibilityCheck(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamUnitEligibilityCheck", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitEligibilityCheckAsync(ByVal pXMLParams As String)
            Me.DeleteExamUnitEligibilityCheckAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitEligibilityCheckAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamUnitEligibilityCheckOperationCompleted Is Nothing) Then
                Me.DeleteExamUnitEligibilityCheckOperationCompleted = AddressOf Me.OnDeleteExamUnitEligibilityCheckOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamUnitEligibilityCheck", New Object() {pXMLParams}, Me.DeleteExamUnitEligibilityCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamUnitEligibilityCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamUnitEligibilityCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamUnitEligibilityCheckCompleted(Me, New DeleteExamUnitEligibilityCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamUnitGrade", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamUnitGrade(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamUnitGrade", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitGradeAsync(ByVal pXMLParams As String)
            Me.AddExamUnitGradeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitGradeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamUnitGradeOperationCompleted Is Nothing) Then
                Me.AddExamUnitGradeOperationCompleted = AddressOf Me.OnAddExamUnitGradeOperationCompleted
            End If
            Me.InvokeAsync("AddExamUnitGrade", New Object() {pXMLParams}, Me.AddExamUnitGradeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamUnitGradeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamUnitGradeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamUnitGradeCompleted(Me, New AddExamUnitGradeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamUnitGrade", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamUnitGrade(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamUnitGrade", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitGradeAsync(ByVal pXMLParams As String)
            Me.UpdateExamUnitGradeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitGradeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamUnitGradeOperationCompleted Is Nothing) Then
                Me.UpdateExamUnitGradeOperationCompleted = AddressOf Me.OnUpdateExamUnitGradeOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamUnitGrade", New Object() {pXMLParams}, Me.UpdateExamUnitGradeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamUnitGradeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamUnitGradeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamUnitGradeCompleted(Me, New UpdateExamUnitGradeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamUnitGrade", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamUnitGrade(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamUnitGrade", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitGradeAsync(ByVal pXMLParams As String)
            Me.DeleteExamUnitGradeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitGradeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamUnitGradeOperationCompleted Is Nothing) Then
                Me.DeleteExamUnitGradeOperationCompleted = AddressOf Me.OnDeleteExamUnitGradeOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamUnitGrade", New Object() {pXMLParams}, Me.DeleteExamUnitGradeOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamUnitGradeOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamUnitGradeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamUnitGradeCompleted(Me, New DeleteExamUnitGradeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamUnitLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamUnitLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamUnitLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitLinkAsync(ByVal pXMLParams As String)
            Me.AddExamUnitLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamUnitLinkOperationCompleted Is Nothing) Then
                Me.AddExamUnitLinkOperationCompleted = AddressOf Me.OnAddExamUnitLinkOperationCompleted
            End If
            Me.InvokeAsync("AddExamUnitLink", New Object() {pXMLParams}, Me.AddExamUnitLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamUnitLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamUnitLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamUnitLinkCompleted(Me, New AddExamUnitLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ShareExamUnitLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ShareExamUnitLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ShareExamUnitLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShareExamUnitLinkAsync(ByVal pXMLParams As String)
            Me.ShareExamUnitLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShareExamUnitLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ShareExamUnitLinkOperationCompleted Is Nothing) Then
                Me.ShareExamUnitLinkOperationCompleted = AddressOf Me.OnShareExamUnitLinkOperationCompleted
            End If
            Me.InvokeAsync("ShareExamUnitLink", New Object() {pXMLParams}, Me.ShareExamUnitLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnShareExamUnitLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShareExamUnitLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShareExamUnitLinkCompleted(Me, New ShareExamUnitLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamUnitLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamUnitLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamUnitLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitLinkAsync(ByVal pXMLParams As String)
            Me.DeleteExamUnitLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamUnitLinkOperationCompleted Is Nothing) Then
                Me.DeleteExamUnitLinkOperationCompleted = AddressOf Me.OnDeleteExamUnitLinkOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamUnitLink", New Object() {pXMLParams}, Me.DeleteExamUnitLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamUnitLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamUnitLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamUnitLinkCompleted(Me, New DeleteExamUnitLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamUnitPersonnel", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamUnitPersonnel(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamUnitPersonnel", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitPersonnelAsync(ByVal pXMLParams As String)
            Me.AddExamUnitPersonnelAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitPersonnelAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamUnitPersonnelOperationCompleted Is Nothing) Then
                Me.AddExamUnitPersonnelOperationCompleted = AddressOf Me.OnAddExamUnitPersonnelOperationCompleted
            End If
            Me.InvokeAsync("AddExamUnitPersonnel", New Object() {pXMLParams}, Me.AddExamUnitPersonnelOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamUnitPersonnelOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamUnitPersonnelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamUnitPersonnelCompleted(Me, New AddExamUnitPersonnelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamUnitPersonnel", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamUnitPersonnel(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamUnitPersonnel", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitPersonnelAsync(ByVal pXMLParams As String)
            Me.UpdateExamUnitPersonnelAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitPersonnelAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamUnitPersonnelOperationCompleted Is Nothing) Then
                Me.UpdateExamUnitPersonnelOperationCompleted = AddressOf Me.OnUpdateExamUnitPersonnelOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamUnitPersonnel", New Object() {pXMLParams}, Me.UpdateExamUnitPersonnelOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamUnitPersonnelOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamUnitPersonnelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamUnitPersonnelCompleted(Me, New UpdateExamUnitPersonnelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamUnitPersonnel", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamUnitPersonnel(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamUnitPersonnel", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitPersonnelAsync(ByVal pXMLParams As String)
            Me.DeleteExamUnitPersonnelAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitPersonnelAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamUnitPersonnelOperationCompleted Is Nothing) Then
                Me.DeleteExamUnitPersonnelOperationCompleted = AddressOf Me.OnDeleteExamUnitPersonnelOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamUnitPersonnel", New Object() {pXMLParams}, Me.DeleteExamUnitPersonnelOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamUnitPersonnelOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamUnitPersonnelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamUnitPersonnelCompleted(Me, New DeleteExamUnitPersonnelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamUnitPrerequisite", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamUnitPrerequisite(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamUnitPrerequisite", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitPrerequisiteAsync(ByVal pXMLParams As String)
            Me.AddExamUnitPrerequisiteAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitPrerequisiteAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamUnitPrerequisiteOperationCompleted Is Nothing) Then
                Me.AddExamUnitPrerequisiteOperationCompleted = AddressOf Me.OnAddExamUnitPrerequisiteOperationCompleted
            End If
            Me.InvokeAsync("AddExamUnitPrerequisite", New Object() {pXMLParams}, Me.AddExamUnitPrerequisiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamUnitPrerequisiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamUnitPrerequisiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamUnitPrerequisiteCompleted(Me, New AddExamUnitPrerequisiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamUnitPrerequisite", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamUnitPrerequisite(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamUnitPrerequisite", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitPrerequisiteAsync(ByVal pXMLParams As String)
            Me.UpdateExamUnitPrerequisiteAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitPrerequisiteAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamUnitPrerequisiteOperationCompleted Is Nothing) Then
                Me.UpdateExamUnitPrerequisiteOperationCompleted = AddressOf Me.OnUpdateExamUnitPrerequisiteOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamUnitPrerequisite", New Object() {pXMLParams}, Me.UpdateExamUnitPrerequisiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamUnitPrerequisiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamUnitPrerequisiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamUnitPrerequisiteCompleted(Me, New UpdateExamUnitPrerequisiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamUnitPrerequisite", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamUnitPrerequisite(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamUnitPrerequisite", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitPrerequisiteAsync(ByVal pXMLParams As String)
            Me.DeleteExamUnitPrerequisiteAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitPrerequisiteAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamUnitPrerequisiteOperationCompleted Is Nothing) Then
                Me.DeleteExamUnitPrerequisiteOperationCompleted = AddressOf Me.OnDeleteExamUnitPrerequisiteOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamUnitPrerequisite", New Object() {pXMLParams}, Me.DeleteExamUnitPrerequisiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamUnitPrerequisiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamUnitPrerequisiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamUnitPrerequisiteCompleted(Me, New DeleteExamUnitPrerequisiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamUnitProduct", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamUnitProduct(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamUnitProduct", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitProductAsync(ByVal pXMLParams As String)
            Me.AddExamUnitProductAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitProductAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamUnitProductOperationCompleted Is Nothing) Then
                Me.AddExamUnitProductOperationCompleted = AddressOf Me.OnAddExamUnitProductOperationCompleted
            End If
            Me.InvokeAsync("AddExamUnitProduct", New Object() {pXMLParams}, Me.AddExamUnitProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamUnitProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamUnitProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamUnitProductCompleted(Me, New AddExamUnitProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamUnitProduct", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamUnitProduct(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamUnitProduct", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitProductAsync(ByVal pXMLParams As String)
            Me.UpdateExamUnitProductAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitProductAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamUnitProductOperationCompleted Is Nothing) Then
                Me.UpdateExamUnitProductOperationCompleted = AddressOf Me.OnUpdateExamUnitProductOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamUnitProduct", New Object() {pXMLParams}, Me.UpdateExamUnitProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamUnitProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamUnitProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamUnitProductCompleted(Me, New UpdateExamUnitProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamUnitProduct", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamUnitProduct(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamUnitProduct", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitProductAsync(ByVal pXMLParams As String)
            Me.DeleteExamUnitProductAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitProductAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamUnitProductOperationCompleted Is Nothing) Then
                Me.DeleteExamUnitProductOperationCompleted = AddressOf Me.OnDeleteExamUnitProductOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamUnitProduct", New Object() {pXMLParams}, Me.DeleteExamUnitProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamUnitProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamUnitProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamUnitProductCompleted(Me, New DeleteExamUnitProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamUnit", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamUnit(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamUnit", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitAsync(ByVal pXMLParams As String)
            Me.AddExamUnitAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamUnitAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamUnitOperationCompleted Is Nothing) Then
                Me.AddExamUnitOperationCompleted = AddressOf Me.OnAddExamUnitOperationCompleted
            End If
            Me.InvokeAsync("AddExamUnit", New Object() {pXMLParams}, Me.AddExamUnitOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamUnitOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamUnitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamUnitCompleted(Me, New AddExamUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamUnit", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamUnit(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamUnit", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitAsync(ByVal pXMLParams As String)
            Me.UpdateExamUnitAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamUnitAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamUnitOperationCompleted Is Nothing) Then
                Me.UpdateExamUnitOperationCompleted = AddressOf Me.OnUpdateExamUnitOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamUnit", New Object() {pXMLParams}, Me.UpdateExamUnitOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamUnitOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamUnitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamUnitCompleted(Me, New UpdateExamUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamUnit", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamUnit(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamUnit", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitAsync(ByVal pXMLParams As String)
            Me.DeleteExamUnitAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamUnitAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamUnitOperationCompleted Is Nothing) Then
                Me.DeleteExamUnitOperationCompleted = AddressOf Me.OnDeleteExamUnitOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamUnit", New Object() {pXMLParams}, Me.DeleteExamUnitOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamUnitOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamUnitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamUnitCompleted(Me, New DeleteExamUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectExamData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectExamData(ByVal pSelectDataType As XMLExamDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectExamData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectExamDataAsync(ByVal pSelectDataType As XMLExamDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectExamDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectExamDataAsync(ByVal pSelectDataType As XMLExamDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectExamDataOperationCompleted Is Nothing) Then
                Me.SelectExamDataOperationCompleted = AddressOf Me.OnSelectExamDataOperationCompleted
            End If
            Me.InvokeAsync("SelectExamData", New Object() {pSelectDataType, pXMLParams}, Me.SelectExamDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectExamDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectExamDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectExamDataCompleted(Me, New SelectExamDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetExamMaintenanceControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExamMaintenanceControls(ByVal pMaintenanceType As XMLExamMaintenanceTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetExamMaintenanceControls", New Object() {pMaintenanceType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExamMaintenanceControlsAsync(ByVal pMaintenanceType As XMLExamMaintenanceTypes, ByVal pXMLParams As String)
            Me.GetExamMaintenanceControlsAsync(pMaintenanceType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExamMaintenanceControlsAsync(ByVal pMaintenanceType As XMLExamMaintenanceTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetExamMaintenanceControlsOperationCompleted Is Nothing) Then
                Me.GetExamMaintenanceControlsOperationCompleted = AddressOf Me.OnGetExamMaintenanceControlsOperationCompleted
            End If
            Me.InvokeAsync("GetExamMaintenanceControls", New Object() {pMaintenanceType, pXMLParams}, Me.GetExamMaintenanceControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExamMaintenanceControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExamMaintenanceControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExamMaintenanceControlsCompleted(Me, New GetExamMaintenanceControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamMaintenanceControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamMaintenanceControls(ByVal pMaintenanceType As XMLExamMaintenanceTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamMaintenanceControls", New Object() {pMaintenanceType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamMaintenanceControlsAsync(ByVal pMaintenanceType As XMLExamMaintenanceTypes, ByVal pXMLParams As String)
            Me.UpdateExamMaintenanceControlsAsync(pMaintenanceType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamMaintenanceControlsAsync(ByVal pMaintenanceType As XMLExamMaintenanceTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamMaintenanceControlsOperationCompleted Is Nothing) Then
                Me.UpdateExamMaintenanceControlsOperationCompleted = AddressOf Me.OnUpdateExamMaintenanceControlsOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamMaintenanceControls", New Object() {pMaintenanceType, pXMLParams}, Me.UpdateExamMaintenanceControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamMaintenanceControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamMaintenanceControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamMaintenanceControlsCompleted(Me, New UpdateExamMaintenanceControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CreateExamProgramme", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateExamProgramme(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CreateExamProgramme", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateExamProgrammeAsync(ByVal pXMLParams As String)
            Me.CreateExamProgrammeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateExamProgrammeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CreateExamProgrammeOperationCompleted Is Nothing) Then
                Me.CreateExamProgrammeOperationCompleted = AddressOf Me.OnCreateExamProgrammeOperationCompleted
            End If
            Me.InvokeAsync("CreateExamProgramme", New Object() {pXMLParams}, Me.CreateExamProgrammeOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateExamProgrammeOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateExamProgrammeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateExamProgrammeCompleted(Me, New CreateExamProgrammeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CreateExamCentreUnits", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateExamCentreUnits(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CreateExamCentreUnits", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateExamCentreUnitsAsync(ByVal pXMLParams As String)
            Me.CreateExamCentreUnitsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateExamCentreUnitsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CreateExamCentreUnitsOperationCompleted Is Nothing) Then
                Me.CreateExamCentreUnitsOperationCompleted = AddressOf Me.OnCreateExamCentreUnitsOperationCompleted
            End If
            Me.InvokeAsync("CreateExamCentreUnits", New Object() {pXMLParams}, Me.CreateExamCentreUnitsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateExamCentreUnitsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateExamCentreUnitsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateExamCentreUnitsCompleted(Me, New CreateExamCentreUnitsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CreateExamSessionCentres", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateExamSessionCentres(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CreateExamSessionCentres", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateExamSessionCentresAsync(ByVal pXMLParams As String)
            Me.CreateExamSessionCentresAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateExamSessionCentresAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CreateExamSessionCentresOperationCompleted Is Nothing) Then
                Me.CreateExamSessionCentresOperationCompleted = AddressOf Me.OnCreateExamSessionCentresOperationCompleted
            End If
            Me.InvokeAsync("CreateExamSessionCentres", New Object() {pXMLParams}, Me.CreateExamSessionCentresOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateExamSessionCentresOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateExamSessionCentresCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateExamSessionCentresCompleted(Me, New CreateExamSessionCentresCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetExamEligibilityChecks", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExamEligibilityChecks(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetExamEligibilityChecks", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExamEligibilityChecksAsync(ByVal pXMLParams As String)
            Me.GetExamEligibilityChecksAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExamEligibilityChecksAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetExamEligibilityChecksOperationCompleted Is Nothing) Then
                Me.GetExamEligibilityChecksOperationCompleted = AddressOf Me.OnGetExamEligibilityChecksOperationCompleted
            End If
            Me.InvokeAsync("GetExamEligibilityChecks", New Object() {pXMLParams}, Me.GetExamEligibilityChecksOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExamEligibilityChecksOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExamEligibilityChecksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExamEligibilityChecksCompleted(Me, New GetExamEligibilityChecksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CalculateExamBookingPrice", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CalculateExamBookingPrice(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CalculateExamBookingPrice", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalculateExamBookingPriceAsync(ByVal pXMLParams As String)
            Me.CalculateExamBookingPriceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalculateExamBookingPriceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CalculateExamBookingPriceOperationCompleted Is Nothing) Then
                Me.CalculateExamBookingPriceOperationCompleted = AddressOf Me.OnCalculateExamBookingPriceOperationCompleted
            End If
            Me.InvokeAsync("CalculateExamBookingPrice", New Object() {pXMLParams}, Me.CalculateExamBookingPriceOperationCompleted, userState)
        End Sub
        
        Private Sub OnCalculateExamBookingPriceOperationCompleted(ByVal arg As Object)
            If (Not (Me.CalculateExamBookingPriceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalculateExamBookingPriceCompleted(Me, New CalculateExamBookingPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindExamPersonnel", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindExamPersonnel(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindExamPersonnel", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindExamPersonnelAsync(ByVal pXMLParams As String)
            Me.FindExamPersonnelAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindExamPersonnelAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindExamPersonnelOperationCompleted Is Nothing) Then
                Me.FindExamPersonnelOperationCompleted = AddressOf Me.OnFindExamPersonnelOperationCompleted
            End If
            Me.InvokeAsync("FindExamPersonnel", New Object() {pXMLParams}, Me.FindExamPersonnelOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindExamPersonnelOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindExamPersonnelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindExamPersonnelCompleted(Me, New FindExamPersonnelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CancelExamBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelExamBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CancelExamBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelExamBookingAsync(ByVal pXMLParams As String)
            Me.CancelExamBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelExamBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CancelExamBookingOperationCompleted Is Nothing) Then
                Me.CancelExamBookingOperationCompleted = AddressOf Me.OnCancelExamBookingOperationCompleted
            End If
            Me.InvokeAsync("CancelExamBooking", New Object() {pXMLParams}, Me.CancelExamBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelExamBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelExamBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelExamBookingCompleted(Me, New CancelExamBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ChangeExamBookingCentre", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeExamBookingCentre(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ChangeExamBookingCentre", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeExamBookingCentreAsync(ByVal pXMLParams As String)
            Me.ChangeExamBookingCentreAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeExamBookingCentreAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ChangeExamBookingCentreOperationCompleted Is Nothing) Then
                Me.ChangeExamBookingCentreOperationCompleted = AddressOf Me.OnChangeExamBookingCentreOperationCompleted
            End If
            Me.InvokeAsync("ChangeExamBookingCentre", New Object() {pXMLParams}, Me.ChangeExamBookingCentreOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeExamBookingCentreOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeExamBookingCentreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeExamBookingCentreCompleted(Me, New ChangeExamBookingCentreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamCandidateActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamCandidateActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamCandidateActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamCandidateActivityAsync(ByVal pXMLParams As String)
            Me.AddExamCandidateActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamCandidateActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamCandidateActivityOperationCompleted Is Nothing) Then
                Me.AddExamCandidateActivityOperationCompleted = AddressOf Me.OnAddExamCandidateActivityOperationCompleted
            End If
            Me.InvokeAsync("AddExamCandidateActivity", New Object() {pXMLParams}, Me.AddExamCandidateActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamCandidateActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamCandidateActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamCandidateActivityCompleted(Me, New AddExamCandidateActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExamCandidateActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExamCandidateActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExamCandidateActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExamCandidateActivityAsync(ByVal pXMLParams As String)
            Me.UpdateExamCandidateActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExamCandidateActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExamCandidateActivityOperationCompleted Is Nothing) Then
                Me.UpdateExamCandidateActivityOperationCompleted = AddressOf Me.OnUpdateExamCandidateActivityOperationCompleted
            End If
            Me.InvokeAsync("UpdateExamCandidateActivity", New Object() {pXMLParams}, Me.UpdateExamCandidateActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExamCandidateActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExamCandidateActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExamCandidateActivityCompleted(Me, New UpdateExamCandidateActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamCandidateActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamCandidateActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamCandidateActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamCandidateActivityAsync(ByVal pXMLParams As String)
            Me.DeleteExamCandidateActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamCandidateActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamCandidateActivityOperationCompleted Is Nothing) Then
                Me.DeleteExamCandidateActivityOperationCompleted = AddressOf Me.OnDeleteExamCandidateActivityOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamCandidateActivity", New Object() {pXMLParams}, Me.DeleteExamCandidateActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamCandidateActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamCandidateActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamCandidateActivityCompleted(Me, New DeleteExamCandidateActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExamMarkerAllocation", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExamMarkerAllocation(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExamMarkerAllocation", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExamMarkerAllocationAsync(ByVal pXMLParams As String)
            Me.DeleteExamMarkerAllocationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExamMarkerAllocationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExamMarkerAllocationOperationCompleted Is Nothing) Then
                Me.DeleteExamMarkerAllocationOperationCompleted = AddressOf Me.OnDeleteExamMarkerAllocationOperationCompleted
            End If
            Me.InvokeAsync("DeleteExamMarkerAllocation", New Object() {pXMLParams}, Me.DeleteExamMarkerAllocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExamMarkerAllocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExamMarkerAllocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExamMarkerAllocationCompleted(Me, New DeleteExamMarkerAllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExamMarkerAllocation", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExamMarkerAllocation(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExamMarkerAllocation", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExamMarkerAllocationAsync(ByVal pXMLParams As String)
            Me.AddExamMarkerAllocationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExamMarkerAllocationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExamMarkerAllocationOperationCompleted Is Nothing) Then
                Me.AddExamMarkerAllocationOperationCompleted = AddressOf Me.OnAddExamMarkerAllocationOperationCompleted
            End If
            Me.InvokeAsync("AddExamMarkerAllocation", New Object() {pXMLParams}, Me.AddExamMarkerAllocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExamMarkerAllocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExamMarkerAllocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExamMarkerAllocationCompleted(Me, New AddExamMarkerAllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCategory", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCategory(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCategory", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCategoryAsync(ByVal pXMLParams As String)
            Me.AddCategoryAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCategoryAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCategoryOperationCompleted Is Nothing) Then
                Me.AddCategoryOperationCompleted = AddressOf Me.OnAddCategoryOperationCompleted
            End If
            Me.InvokeAsync("AddCategory", New Object() {pXMLParams}, Me.AddCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCategoryCompleted(Me, New AddCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLExamDataSelectionTypes
        
        '''<remarks/>
        None
        
        '''<remarks/>
        ExamHeaderInformation
        
        '''<remarks/>
        ExamBookingUnits
        
        '''<remarks/>
        ExamCandidateActivites
        
        '''<remarks/>
        ExamCentreAssessmentTypes
        
        '''<remarks/>
        ExamCentreContacts
        
        '''<remarks/>
        ExamCentreUnits
        
        '''<remarks/>
        ExamCentreUnitSelection
        
        '''<remarks/>
        ExamCentres
        
        '''<remarks/>
        ExamExemptions
        
        '''<remarks/>
        ExamExemptionUnits
        
        '''<remarks/>
        ExamExemptionUnitSelection
        
        '''<remarks/>
        ExamPersonnel
        
        '''<remarks/>
        ExamPersonnelAssessmentTypes
        
        '''<remarks/>
        ExamPersonnelExpenses
        
        '''<remarks/>
        ExamSchedule
        
        '''<remarks/>
        ExamSchedulePersonnel
        
        '''<remarks/>
        ExamSessionCentres
        
        '''<remarks/>
        ExamSessionCentreSelection
        
        '''<remarks/>
        ExamSessions
        
        '''<remarks/>
        ExamStudentEligibility
        
        '''<remarks/>
        ExamStudentExemptionHistory
        
        '''<remarks/>
        ExamStudentExemptions
        
        '''<remarks/>
        ExamStudentComponentResults
        
        '''<remarks/>
        ExamStudentHeader
        
        '''<remarks/>
        ExamStudentResults
        
        '''<remarks/>
        ExamStudentUnit
        
        '''<remarks/>
        ExamStudentUnitHeader
        
        '''<remarks/>
        ExamUnitAssessmentTypes
        
        '''<remarks/>
        ExamUnitEligibilityChecks
        
        '''<remarks/>
        ExamUnitLinks
        
        '''<remarks/>
        ExamUnitGrades
        
        '''<remarks/>
        ExamUnitPersonnel
        
        '''<remarks/>
        ExamUnitPrerequisites
        
        '''<remarks/>
        ExamUnitResources
        
        '''<remarks/>
        ExamUnits
        
        '''<remarks/>
        ExamStudentBookingUnits
        
        '''<remarks/>
        ExamScheduleAllCentres
        
        '''<remarks/>
        ExamPersonnelMarkerInfo
        
        '''<remarks/>
        ExamUnitCandidates
        
        '''<remarks/>
        ExamUnitMarkerAllocation
        
        '''<remarks/>
        ExamUnitMarkerAllocationList
        
        '''<remarks/>
        ExamMarkerList
        
        '''<remarks/>
        ExamMaintenanceButtons
        
        '''<remarks/>
        ExamMaintenanceCourses
        
        '''<remarks/>
        ExamMaintenanceCentres
        
        '''<remarks/>
        ExamMaintenancePersonnel
        
        '''<remarks/>
        ExamMaintenanceSessions
        
        '''<remarks/>
        ExamMaintenanceExemptions
        
        '''<remarks/>
        ExamCentreActions
        
        '''<remarks/>
        ExamCentreActionLinks
        
        '''<remarks/>
        ExamCentreActionAnalysis
        
        '''<remarks/>
        ExamCentreHistory
        
        '''<remarks/>
        ExamCentreCategories
        
        '''<remarks/>
        ExamUnitLinkCategories
        
        '''<remarks/>
        ExamCentreUnitLinkCategories
        
        '''<remarks/>
        ExamAccreditationHistory
        
        '''<remarks/>
        ExamCentreUnitDetails
        
        '''<remarks/>
        ExamUnitGradeHistory
        
        '''<remarks/>
        ExamCentreDocuments
        
        '''<remarks/>
        ExamUnitLinkDocuments
        
        '''<remarks/>
        ExamCentreUnitLinkDocuments
        
        '''<remarks/>
        ExamUnitStudyModes
        
        '''<remarks/>
        ExamCentreUnitStudyModes
        
        '''<remarks/>
        ExamUnitCertRunTypes
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLExamMaintenanceTypes
        
        '''<remarks/>
        None
        
        '''<remarks/>
        ExamBookingUnit
        
        '''<remarks/>
        ExamCentreAssessmentTypes
        
        '''<remarks/>
        ExamCentres
        
        '''<remarks/>
        ExamCentreContacts
        
        '''<remarks/>
        ExamExemptions
        
        '''<remarks/>
        ExamPersonnel
        
        '''<remarks/>
        ExamPersonnelAssessmentTypes
        
        '''<remarks/>
        ExamPersonnelExpenses
        
        '''<remarks/>
        ExamSchedule
        
        '''<remarks/>
        ExamSessions
        
        '''<remarks/>
        ExamUnit
        
        '''<remarks/>
        ExamUnitAssessmentTypes
        
        '''<remarks/>
        ExamUnitGrades
        
        '''<remarks/>
        ExamUnitPersonnel
        
        '''<remarks/>
        ExamUnitPrerequisites
        
        '''<remarks/>
        ExamUnitRequirements
        
        '''<remarks/>
        ExamUnitResources
        
        '''<remarks/>
        ExamMultipleSchedule
        
        '''<remarks/>
        ExamCandidateActivities
        
        '''<remarks/>
        ExamUnitMarkerAllocation
        
        '''<remarks/>
        ExamCentreActions
        
        '''<remarks/>
        ExamCentreActionAnalysis
        
        '''<remarks/>
        ExamCentreActionLinks
        
        '''<remarks/>
        ExamCentreCategories
        
        '''<remarks/>
        ExamUnitLinkCategories
        
        '''<remarks/>
        ExamCentreUnitLinkCategories
        
        '''<remarks/>
        ExamCentreUnitDetails
        
        '''<remarks/>
        ExamUnitLinkDocuments
        
        '''<remarks/>
        ExamCentreDocuments
        
        '''<remarks/>
        ExamCentreUnitLinkDocuments
        
        '''<remarks/>
        ExamUnitStudyModes
        
        '''<remarks/>
        ExamUnitCertRunTypes
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamBookingUnitCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamBookingUnitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamBookingUnitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamBookingCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamCentreAssessmentTypeCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamCentreAssessmentTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamCentreAssessmentTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamCentreAssessmentTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamCentreAssessmentTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamCentreAssessmentTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamCentreAssessmentTypeCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamCentreAssessmentTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamCentreAssessmentTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamCentreActionCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamCentreActionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamCentreActionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamCentreContactCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamCentreContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamCentreContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamCentreContactCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamCentreContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamCentreContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamCentreContactCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamCentreContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamCentreContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamCentreUnitCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamCentreUnitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamCentreUnitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamCentreUnitCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamCentreUnitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamCentreUnitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamCentreUnitCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamCentreUnitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamCentreUnitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamCentreCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamCentreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamCentreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamCentreCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamCentreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamCentreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamCentreCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamCentreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamCentreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamExemptionUnitCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamExemptionUnitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamExemptionUnitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamExemptionUnitCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamExemptionUnitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamExemptionUnitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamExemptionUnitCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamExemptionUnitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamExemptionUnitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamExemptionCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamExemptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamExemptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamExemptionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamExemptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamExemptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamExemptionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamExemptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamExemptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamPersonnelCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamPersonnelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamPersonnelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamPersonnelCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamPersonnelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamPersonnelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamPersonnelCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamPersonnelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamPersonnelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamPersonnelAssessTypeCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamPersonnelAssessTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamPersonnelAssessTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamPersonnelAssessTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamPersonnelAssessTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamPersonnelAssessTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamPersonnelAssessTypeCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamPersonnelAssessTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamPersonnelAssessTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamPersonnelExpenseCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamPersonnelExpenseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamPersonnelExpenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamPersonnelExpenseCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamPersonnelExpenseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamPersonnelExpenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamPersonnelExpenseCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamPersonnelExpenseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamPersonnelExpenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamSessionCentreCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamSessionCentreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamSessionCentreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamSessionCentreCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamSessionCentreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamSessionCentreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamSessionCentreCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamSessionCentreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamSessionCentreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamSessionCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamSessionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamSessionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamSessionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamSessionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamSessionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamSessionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamSessionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamSessionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamStudentExemptionCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamStudentExemptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamStudentExemptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamStudentExemptionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamStudentExemptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamStudentExemptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamStudentExemptionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamStudentExemptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamStudentExemptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamStudentUnitHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamStudentUnitHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamStudentUnitHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamUnitAssessmentTypeCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamUnitAssessmentTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamUnitAssessmentTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamUnitAssessmentTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamUnitAssessmentTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamUnitAssessmentTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamUnitAssessmentTypeCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamUnitAssessmentTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamUnitAssessmentTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamUnitEligibilityCheckCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamUnitEligibilityCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamUnitEligibilityCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamUnitEligibilityCheckCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamUnitEligibilityCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamUnitEligibilityCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamUnitEligibilityCheckCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamUnitEligibilityCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamUnitEligibilityCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamUnitGradeCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamUnitGradeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamUnitGradeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamUnitGradeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamUnitGradeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamUnitGradeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamUnitGradeCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamUnitGradeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamUnitGradeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamUnitLinkCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamUnitLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamUnitLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ShareExamUnitLinkCompletedEventHandler(ByVal sender As Object, ByVal e As ShareExamUnitLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShareExamUnitLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamUnitLinkCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamUnitLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamUnitLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamUnitPersonnelCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamUnitPersonnelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamUnitPersonnelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamUnitPersonnelCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamUnitPersonnelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamUnitPersonnelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamUnitPersonnelCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamUnitPersonnelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamUnitPersonnelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamUnitPrerequisiteCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamUnitPrerequisiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamUnitPrerequisiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamUnitPrerequisiteCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamUnitPrerequisiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamUnitPrerequisiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamUnitPrerequisiteCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamUnitPrerequisiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamUnitPrerequisiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamUnitProductCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamUnitProductCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamUnitProductCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamUnitProductCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamUnitProductCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamUnitProductCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamUnitProductCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamUnitProductCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamUnitProductCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamUnitCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamUnitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamUnitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamUnitCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamUnitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamUnitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamUnitCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamUnitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamUnitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectExamDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectExamDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectExamDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetExamMaintenanceControlsCompletedEventHandler(ByVal sender As Object, ByVal e As GetExamMaintenanceControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExamMaintenanceControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamMaintenanceControlsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamMaintenanceControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamMaintenanceControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CreateExamProgrammeCompletedEventHandler(ByVal sender As Object, ByVal e As CreateExamProgrammeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateExamProgrammeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CreateExamCentreUnitsCompletedEventHandler(ByVal sender As Object, ByVal e As CreateExamCentreUnitsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateExamCentreUnitsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CreateExamSessionCentresCompletedEventHandler(ByVal sender As Object, ByVal e As CreateExamSessionCentresCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateExamSessionCentresCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetExamEligibilityChecksCompletedEventHandler(ByVal sender As Object, ByVal e As GetExamEligibilityChecksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExamEligibilityChecksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CalculateExamBookingPriceCompletedEventHandler(ByVal sender As Object, ByVal e As CalculateExamBookingPriceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalculateExamBookingPriceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindExamPersonnelCompletedEventHandler(ByVal sender As Object, ByVal e As FindExamPersonnelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindExamPersonnelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CancelExamBookingCompletedEventHandler(ByVal sender As Object, ByVal e As CancelExamBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelExamBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ChangeExamBookingCentreCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeExamBookingCentreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeExamBookingCentreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamCandidateActivityCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamCandidateActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamCandidateActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExamCandidateActivityCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExamCandidateActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExamCandidateActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamCandidateActivityCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamCandidateActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamCandidateActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExamMarkerAllocationCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExamMarkerAllocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExamMarkerAllocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExamMarkerAllocationCompletedEventHandler(ByVal sender As Object, ByVal e As AddExamMarkerAllocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExamMarkerAllocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As AddCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
