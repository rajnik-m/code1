'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
'
Namespace CareNetServices
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="NDataAccessSoap", [Namespace]:="http://care.co.uk/webservices/")>  _
    Partial Public Class NDataAccess
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SaveTraderApplicationBankOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyTraderApplicationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteTraderApplicationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUnpostedBatchCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckAdjustmentAllowedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReverseTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeTransactionPayerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReversePOPMenuSelectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReversePurchaseOrderPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetImportTypesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InitDataImportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AccountNoVerifyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActionScheduleDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllPAFAddressesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBranchFromPostCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentNumberForDistributionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentMergeDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaintenanceDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSuppressContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNearestOrganisationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPAFAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPAFPostcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStandardDocumentFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectUserHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UniservPostCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDocumentFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateStandardDocumentFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMailingDocumentFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOwnershipUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOwnershipGroupInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOwnershipUserInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOwnershipDepartmentInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPaymentPlanAutoPayDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckIbanNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddRegisteredUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAvailableDatabasesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVersionNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginRegisteredUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogoutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRegisteredUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetApplicationControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFunctionControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTableMaintenanceControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MoveExternalDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DuplicateSurveyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCpdObjectiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCpdObjectiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCpdObjectiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddWebItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWebItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWebControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWebInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWebMenusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWebPageInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWebPageItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCurrencyRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectTelemarketingContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTelemarketingContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventDelegateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventDelegateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventDelegateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectConfigValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectCriteriaSetStepsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectCovenantDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectDashboardDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectDelegateDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectDirectDebitDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectDocumentDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectEventDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectJobProcessorsDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectJobScheduleDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InitListManagerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TerminateListManagerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectListManagerDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectListManagerCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectGiftAidDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectFundraisingEventDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectFundraisingRequestDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectJournalDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectMembershipDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectPaymentPlanDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectPledgeDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectPurchaseInvoiceDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectPurchaseOrderDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectSelectionSetAppointmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectSelectionSetCommsNumbersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectSelectionSetDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectTableDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectTransactionDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportOutputOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportParametersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportSectionDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportControlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportSectionDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DuplicateReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RenumberReportParametersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RenumberReportSectionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DuplicateReportSectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RenumberReportItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteReportParameterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteReportControlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteReportItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteReportSectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteReportAndContentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAutoPaymentMethodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMembershipOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPaymentPlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeMembershipTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteGiftAidDeclarationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAutoPaymentTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFDEControlTypesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDetailBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMemberBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMemberRenewalAmountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMembershipEntitlementsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNextPaymentDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPaymentPlanStartDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessPaymentPlanMenuOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePaymentPlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePaymentPlanInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPaymentPlanMemberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckMailingDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecalculateLoanInterestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadDataUpdatesFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectLoanDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMembershipCMTPricesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetModifierPriceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddContactMailingDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMailingDocumentMergeFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMailingDocumentParagraphsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTraderApplicationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessStockMovementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessTraderDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessTraderMailmergeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessTraderPPEligibleForGiftAidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckCriteriaContainsORsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMailingSelectionRoughCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateBatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactMailingDocumentFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventBookingTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetTraderApplicationsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteTraderApplicationsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveTraderApplicationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCriteriaSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCriteriaSetDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCustomFormDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExternalReferenceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFundraisingPaymentLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFundraisingPaymentScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFundraisingRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFutureMembershipTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddGiftAidDeclarationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddInvoicePaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMembershipGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMailingSelectedContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddOrganisationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPaymentPlanPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPositionActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPositionLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddProductSaleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPurchaseOrderPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddSelectionSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddSelectionSetDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddSelectionSetContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddSelectionStepOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddServiceBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddStandardDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddStickyNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddSuppressionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelAppropriateCertificateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelEventBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelGiftAidDeclarationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelServiceBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConfirmCardSaleTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConfirmCashSaleTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConfirmCreditSaleTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConfirmCreditAndCardSaleTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCriteriaVariableControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveListManagerSelectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddErrorLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddContactEmailingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddContactMailingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMailingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMailingHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindActionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindAppealCollectionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindBatchesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindCampaignAppealsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindCampaignCollectionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindCampaignsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindCampaignSegmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindCovenantsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindCreditCardAuthoritiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindDirectDebitsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindExternalDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindDuplicateContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindDuplicateOrganisationsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindEventsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindGiftAidDeclarationsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindInternalResourcesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindInUniservPhoneBookOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindInvoiceCreditNotesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindLegaciesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindMembersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindPaymentPlansOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindPayrollGivingPledgesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindPostTaxPayrollGivingPledgesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindPreTaxPayrollGivingPledgesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindProductsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindPurchaseOrdersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindSelectionSetsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindStandardDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindStandingOrdersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindTransactionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSurnamePrefixOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessListManagerMailingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessListManagerStepOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectAddressDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectBankAccountDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectCampaignDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectSystemModuleUsersDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectContactDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAddressUsageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAppointmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAppropriateCertificateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCommunicationsLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LockDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateChequeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCommunicationsLogLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCommunicationsLogSubjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCommunicationsNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCommunicationsNumbersAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCommunicationUsageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactFundraisingEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCreditCardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCreditCardAuthorityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCreditCustomerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCriteriaSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCustomFormDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDepartmentNotesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDirectDebitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExternalReferenceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFinancialHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFundraisingPaymentScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFundraisingRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFutureMembershipTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateGiftAidDeclarationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateInvoiceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMemberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMaintenanceTablesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMembershipGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePositionActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePositionLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWebDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProvisionalTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePurchaseOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePurchaseOrderPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateStandardDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateStandingOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateStickyNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSubscriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSuppressionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSystemModuleUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTableDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MakeBranchHistoricalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MoveBranchPostcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MoveRegionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAccessControlItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAccessControlGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateAccessControlDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateCopyOfSelectionSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReconcileStandingOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateBankersOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeOwnershipAccessLevelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMailingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMailingHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReanalysePurchaseOrderPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEntityAlertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddSystemModuleUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAccommodationBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddActionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddActionFromTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddActionLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddActionSubjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAddressUsageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAppointmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddBankOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddBatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCommunicationsLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCommunicationsLogHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCommunicationsLogLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCommunicationsLogSubjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCommunicationsNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCommunicationUsageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddContactAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddContactFundraisingEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCreditCustomerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TransferWaitingListBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAccommodationBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDelegateActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDelegateLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventBookingOptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventCostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDelegateToEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventOptionSessionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventOrganiserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventPersonnelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventPersonnelTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventPISOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventResourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventRoomAllocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventRoomBlockBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventSessionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventSessionTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventSessionTestResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventSubjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventSubmissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventVenueBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEntityAlertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteActionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteActionLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteActionSubjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAddressUsageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAppointmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteBatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCommunicationsLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCommunicationsLogLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCommunicationsLogSubjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCommunicationsNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCommunicationUsageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSelectedContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContactAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCriteriaSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCriteriaSetDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCustomFormDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteDuplicateContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExternalReferenceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContactFundraisingEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFundraisingPaymentScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFundraisingRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFutureMembershipTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteHistoryItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteJobScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeletePositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeletePositionActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeletePositionLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeletePurchaseOrderPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteProvisionalTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSelectionSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSelectionSetContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSelectionStepsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteStandardDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteStickyNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSuppressionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteDuplicateSystemModuleUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteInactiveSystemModuleUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContactIncentivesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEnclosuresOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MergeContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MergeAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContactSurveyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDirectoryPreferencesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AbortJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEntityAlertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEntityAlertItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InitCustomFormsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InitMailSortDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportTraderAppInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloseSiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MovePositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ResubmitJobScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateActionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateActionLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCampaignAppealOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCampaignCostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCampaignRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCampaignSegmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCampaignSupplierOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCollectionPointOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCollectorShiftOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCollectionResourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCollectionPISOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCollectionBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateH2HCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateH2hCollectorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMannedCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMannedCollectorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMailingSelectionSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMailingContactAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSegmentCostCentreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSegmentProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSelectionSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTableMaintenanceDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTableNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTickBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUnmannedCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDespatchNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddStockMovementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDuplicateContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddStockToPackOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEventLoanItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RenumberEventCandidatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RenumberSessionBookingsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactSurveyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactSurveyResponsesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddDelegateActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddDelegateLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventBookingOptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventCostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddDelegateToEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventMailingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventOptionSessionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventOrganiserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventOwnerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventPersonnelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventPersonnelTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventPISOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventResourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventRoomBlockBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventSessionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventSessionActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventSessionTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventSessionTestResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventSourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventSubjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventSubmissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventVenueBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllocatePISToDelegatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckEventBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckMembershipTypeRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteDelegateActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteDelegateLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventBookingOptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventCostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteDelegateFromEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventMailingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventOptionSessionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventOrganiserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventOwnerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventPersonnelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventPersonnelTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventPISOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventResourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventRoomBlockBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventSessionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventSessionActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventSessionTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventSessionTestResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventSourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventSubjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventSubmissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventVenueBookingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DuplicateEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindFundraisingPaymentScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindMailingsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindOrganisationsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindTextOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessBulkEMailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessMailingCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessMailingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectActionDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectFinancialProcessingDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePickingListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomisedDisplayListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetMailingDocumentFulfilmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMDPDocumentInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelReinstateProvisionalTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelMailingStandingOrdersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelGayePledgesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConfirmProvisionalTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessProductNumberAllocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReissueChequeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeChequePayeeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindVenueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddContactSurveyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBulkMailerMailingsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBulkMailerMailingPropertiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessBulkMailerMailingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAppealBudgetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAppealBudgetDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAppealResourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCampaignAppealOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCampaignCostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExportReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExportCustomFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckTraderDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExportTraderApplicationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCampaignRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCampaignSegmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCampaignSupplierOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCollectionBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCollectionPISOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCollectionPointOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCollectionRegionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCollectionResourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddCollectorShiftOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddH2HCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddH2hCollectorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMannedCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMannedCollectorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddSegmentCostCentreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddSegmentProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddTickBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUnmannedCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCampaignDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAppealBudgetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAppealBudgetDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAppealResourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCampaignAppealOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCampaignCostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCampaignRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCampaignSegmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCampaignSupplierOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCollectionBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCollectionPISOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCollectionPointOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCollectionRegionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCollectionResourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCollectorShiftOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteH2hCollectorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteMannedCollectorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteMailingSelectionSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteMeetingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteMeetingLinksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteMeetingDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSegmentCostCentreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSegmentProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteTableMaintenanceDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteTickBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAppealBudgetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAppealBudgetDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAppealResourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddContactCPDCycleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddContactCPDPointsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddContactIncentivesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUnFulFilledContactIncentivesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEnclosuresOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMeetingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMeetingLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMeetingDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DuplicateMeetingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMeetingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMeetingLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddDisplayListItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddEventFinancialLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddExternalDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddHistoryItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddLegacyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddLegacyBequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddLegacyBequestForecastOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddLegacyTaxCertificateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddLegacyExpenseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddLookupDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPreTaxPledgeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPostTaxPledgeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddTableMaintenanceDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddXmlDataItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AmalgamateOrganisationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CalculateEventBookingPriceFromMatrixOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckSetupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckUsedElsewhereOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckLicenseDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPromptForNewBranchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloneOrganisationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyEventPricingMatrixOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContactCPDCycleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContactCPDPointsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContactMailingDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCustomisedDisplayListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEventFinancialLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteExternalDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFastDataEntryControlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFastDataEntryPageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteLegacyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteLegacyBequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteLegacyBequestForecastOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteLegacyTaxCertificateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteLegacyExpenseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteXmlDataItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteDisplayListItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFastDataEntryControlItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMailingSelectedContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMailingRelevantMembersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFastDataEntryModuleDefaultsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessMailingSelectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMailingSelectionCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFinderControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLookupDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaintenanceControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectAppointmentDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectExternalDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectFastDataEntryDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectLegacyBequestDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactCPDCycleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactCPDPointsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateExternalDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFastDataEntryUserControlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFastDataEntryPageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFastDataEntryPageAccessLevelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFastDataEntryPageItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFastDataEntryPageItemControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFinderControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMaintenanceControlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateHistoryItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLegacyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLegacyBequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLegacyBequestForecastOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLegacyBequestReceiptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLegacyTaxCertificateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLegacyExpenseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePreTaxPledgeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePostTaxPledgeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindContactMailingDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindEventPersonnelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindEventPersonnelAppointmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CareDocumentation.My.MySettings.Default.CareDocumentation_CareNetServices_NDataAccess
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SaveTraderApplicationBankCompleted As SaveTraderApplicationBankCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyTraderApplicationCompleted As CopyTraderApplicationCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteTraderApplicationCompleted As DeleteTraderApplicationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUnpostedBatchCountCompleted As GetUnpostedBatchCountCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckAdjustmentAllowedCompleted As CheckAdjustmentAllowedCompletedEventHandler
        
        '''<remarks/>
        Public Event ReverseTransactionCompleted As ReverseTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeTransactionPayerCompleted As ChangeTransactionPayerCompletedEventHandler
        
        '''<remarks/>
        Public Event ReversePOPMenuSelectionCompleted As ReversePOPMenuSelectionCompletedEventHandler
        
        '''<remarks/>
        Public Event ReversePurchaseOrderPaymentCompleted As ReversePurchaseOrderPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetImportTypesCompleted As GetImportTypesCompletedEventHandler
        
        '''<remarks/>
        Public Event InitDataImportCompleted As InitDataImportCompletedEventHandler
        
        '''<remarks/>
        Public Event AccountNoVerifyCompleted As AccountNoVerifyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActionScheduleDateCompleted As GetActionScheduleDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllPAFAddressesCompleted As GetAllPAFAddressesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBranchFromPostCodeCompleted As GetBranchFromPostCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentNumberForDistributionCompleted As GetDocumentNumberForDistributionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentFileCompleted As GetDocumentFileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentMergeDataCompleted As GetDocumentMergeDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaintenanceDataCompleted As GetMaintenanceDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSuppressContactsCompleted As GetSuppressContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNearestOrganisationCompleted As GetNearestOrganisationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPAFAddressCompleted As GetPAFAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPAFPostcodeCompleted As GetPAFPostcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStandardDocumentFileCompleted As GetStandardDocumentFileCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectUserHistoryCompleted As SelectUserHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event UniservPostCheckCompleted As UniservPostCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDocumentFileCompleted As UpdateDocumentFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateStandardDocumentFileCompleted As UpdateStandardDocumentFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMailingDocumentFileCompleted As UpdateMailingDocumentFileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOwnershipUsersCompleted As GetOwnershipUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOwnershipGroupInformationCompleted As GetOwnershipGroupInformationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOwnershipUserInformationCompleted As GetOwnershipUserInformationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOwnershipDepartmentInformationCompleted As GetOwnershipDepartmentInformationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPaymentPlanAutoPayDateCompleted As GetPaymentPlanAutoPayDateCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckIbanNumberCompleted As CheckIbanNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event AddRegisteredUserCompleted As AddRegisteredUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAvailableDatabasesCompleted As GetAvailableDatabasesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientCodeCompleted As GetClientCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVersionNumberCompleted As GetVersionNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event LoginCompleted As LoginCompletedEventHandler
        
        '''<remarks/>
        Public Event LoginRegisteredUserCompleted As LoginRegisteredUserCompletedEventHandler
        
        '''<remarks/>
        Public Event LogoutCompleted As LogoutCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRegisteredUserCompleted As UpdateRegisteredUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetApplicationControlsCompleted As GetApplicationControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFunctionControlsCompleted As GetFunctionControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTableMaintenanceControlsCompleted As GetTableMaintenanceControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportControlsCompleted As GetReportControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event MoveExternalDocumentsCompleted As MoveExternalDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event DuplicateSurveyCompleted As DuplicateSurveyCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCpdObjectiveCompleted As AddCpdObjectiveCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCpdObjectiveCompleted As UpdateCpdObjectiveCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCpdObjectiveCompleted As DeleteCpdObjectiveCompletedEventHandler
        
        '''<remarks/>
        Public Event AddWebItemCompleted As AddWebItemCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWebItemCompleted As UpdateWebItemCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWebControlsCompleted As GetWebControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWebInfoCompleted As GetWebInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWebMenusCompleted As GetWebMenusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWebPageInfoCompleted As GetWebPageInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWebPageItemsCompleted As GetWebPageItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCurrencyRateCompleted As AddCurrencyRateCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectTelemarketingContactCompleted As SelectTelemarketingContactCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTelemarketingContactCompleted As UpdateTelemarketingContactCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventDelegateCompleted As AddEventDelegateCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventDelegateCompleted As DeleteEventDelegateCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventDelegateCompleted As UpdateEventDelegateCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectConfigValueCompleted As SelectConfigValueCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectCriteriaSetStepsCompleted As SelectCriteriaSetStepsCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectCovenantDataCompleted As SelectCovenantDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectDashboardDataCompleted As SelectDashboardDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectDelegateDataCompleted As SelectDelegateDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectDirectDebitDataCompleted As SelectDirectDebitDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectDocumentDataCompleted As SelectDocumentDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectEventDataCompleted As SelectEventDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectJobProcessorsDataCompleted As SelectJobProcessorsDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectJobScheduleDataCompleted As SelectJobScheduleDataCompletedEventHandler
        
        '''<remarks/>
        Public Event InitListManagerCompleted As InitListManagerCompletedEventHandler
        
        '''<remarks/>
        Public Event TerminateListManagerCompleted As TerminateListManagerCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectListManagerDataCompleted As SelectListManagerDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectListManagerCountCompleted As SelectListManagerCountCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectGiftAidDataCompleted As SelectGiftAidDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectFundraisingEventDataCompleted As SelectFundraisingEventDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectFundraisingRequestDataCompleted As SelectFundraisingRequestDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectJournalDataCompleted As SelectJournalDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectMembershipDataCompleted As SelectMembershipDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectPaymentPlanDataCompleted As SelectPaymentPlanDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectPledgeDataCompleted As SelectPledgeDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectPurchaseInvoiceDataCompleted As SelectPurchaseInvoiceDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectPurchaseOrderDataCompleted As SelectPurchaseOrderDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectSelectionSetAppointmentsCompleted As SelectSelectionSetAppointmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectSelectionSetCommsNumbersCompleted As SelectSelectionSetCommsNumbersCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectSelectionSetDataCompleted As SelectSelectionSetDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectTableDataCompleted As SelectTableDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectTransactionDataCompleted As SelectTransactionDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportFileCompleted As GetReportFileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportOutputCompleted As GetReportOutputCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportDataCompleted As GetReportDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportParametersCompleted As GetReportParametersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportSectionDetailCompleted As GetReportSectionDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportVersionCompleted As GetReportVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportControlCompleted As GetReportControlCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportSectionDataCompleted As GetReportSectionDataCompletedEventHandler
        
        '''<remarks/>
        Public Event DuplicateReportCompleted As DuplicateReportCompletedEventHandler
        
        '''<remarks/>
        Public Event RenumberReportParametersCompleted As RenumberReportParametersCompletedEventHandler
        
        '''<remarks/>
        Public Event RenumberReportSectionsCompleted As RenumberReportSectionsCompletedEventHandler
        
        '''<remarks/>
        Public Event DuplicateReportSectionCompleted As DuplicateReportSectionCompletedEventHandler
        
        '''<remarks/>
        Public Event RenumberReportItemsCompleted As RenumberReportItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteReportParameterCompleted As DeleteReportParameterCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteReportControlCompleted As DeleteReportControlCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteReportItemCompleted As DeleteReportItemCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteReportSectionCompleted As DeleteReportSectionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteReportAndContentCompleted As DeleteReportAndContentCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAutoPaymentMethodCompleted As AddAutoPaymentMethodCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMembershipCompleted As AddMembershipCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPaymentPlanCompleted As AddPaymentPlanCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeMembershipTypeCompleted As ChangeMembershipTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteGiftAidDeclarationCompleted As DeleteGiftAidDeclarationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAutoPaymentTypeCompleted As GetAutoPaymentTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFDEControlTypesCompleted As GetFDEControlTypesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDetailBalanceCompleted As GetDetailBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMemberBalanceCompleted As GetMemberBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMemberRenewalAmountCompleted As GetMemberRenewalAmountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMembershipEntitlementsCompleted As GetMembershipEntitlementsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNextPaymentDataCompleted As GetNextPaymentDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPaymentPlanStartDateCompleted As GetPaymentPlanStartDateCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessPaymentPlanMenuCompleted As ProcessPaymentPlanMenuCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePaymentPlanCompleted As UpdatePaymentPlanCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePaymentPlanInfoCompleted As UpdatePaymentPlanInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPaymentPlanMemberCompleted As AddPaymentPlanMemberCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckMailingDocumentsCompleted As CheckMailingDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event RecalculateLoanInterestCompleted As RecalculateLoanInterestCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadDataUpdatesFileCompleted As LoadDataUpdatesFileCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectLoanDataCompleted As SelectLoanDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMembershipCMTPricesCompleted As GetMembershipCMTPricesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetModifierPriceCompleted As GetModifierPriceCompletedEventHandler
        
        '''<remarks/>
        Public Event AddContactMailingDocumentCompleted As AddContactMailingDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMailingDocumentMergeFileCompleted As GetMailingDocumentMergeFileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMailingDocumentParagraphsCompleted As GetMailingDocumentParagraphsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTraderApplicationCompleted As GetTraderApplicationCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessStockMovementCompleted As ProcessStockMovementCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessTraderDataCompleted As ProcessTraderDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessTraderMailmergeCompleted As ProcessTraderMailmergeCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessTraderPPEligibleForGiftAidCompleted As ProcessTraderPPEligibleForGiftAidCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckCriteriaContainsORsCompleted As CheckCriteriaContainsORsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMailingSelectionRoughCountCompleted As GetMailingSelectionRoughCountCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateBatchCompleted As UpdateBatchCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactMailingDocumentFileCompleted As UpdateContactMailingDocumentFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventBookingTransactionCompleted As UpdateEventBookingTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event SetTraderApplicationsCompleted As SetTraderApplicationsCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteTraderApplicationsCompleted As DeleteTraderApplicationsCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveTraderApplicationCompleted As SaveTraderApplicationCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCriteriaSetCompleted As AddCriteriaSetCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCriteriaSetDetailsCompleted As AddCriteriaSetDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCustomFormDataCompleted As AddCustomFormDataCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventBookingCompleted As AddEventBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExternalReferenceCompleted As AddExternalReferenceCompletedEventHandler
        
        '''<remarks/>
        Public Event AddFundraisingPaymentLinkCompleted As AddFundraisingPaymentLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event AddFundraisingPaymentScheduleCompleted As AddFundraisingPaymentScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event AddFundraisingRequestCompleted As AddFundraisingRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event AddFutureMembershipTypeCompleted As AddFutureMembershipTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event AddGiftAidDeclarationCompleted As AddGiftAidDeclarationCompletedEventHandler
        
        '''<remarks/>
        Public Event AddInvoicePaymentCompleted As AddInvoicePaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event AddLinkCompleted As AddLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMembershipGroupCompleted As AddMembershipGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMailingSelectedContactCompleted As AddMailingSelectedContactCompletedEventHandler
        
        '''<remarks/>
        Public Event AddOrganisationCompleted As AddOrganisationCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPaymentPlanPaymentCompleted As AddPaymentPlanPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPositionCompleted As AddPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPositionActivityCompleted As AddPositionActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPositionLinkCompleted As AddPositionLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event AddProductSaleCompleted As AddProductSaleCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPurchaseOrderPaymentCompleted As AddPurchaseOrderPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event AddRoleCompleted As AddRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event AddSelectionSetCompleted As AddSelectionSetCompletedEventHandler
        
        '''<remarks/>
        Public Event AddSelectionSetDataCompleted As AddSelectionSetDataCompletedEventHandler
        
        '''<remarks/>
        Public Event AddSelectionSetContactCompleted As AddSelectionSetContactCompletedEventHandler
        
        '''<remarks/>
        Public Event AddSelectionStepCompleted As AddSelectionStepCompletedEventHandler
        
        '''<remarks/>
        Public Event AddServiceBookingCompleted As AddServiceBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event AddStandardDocumentCompleted As AddStandardDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event AddStickyNoteCompleted As AddStickyNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event AddSuppressionCompleted As AddSuppressionCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelAppropriateCertificateCompleted As CancelAppropriateCertificateCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelEventBookingCompleted As CancelEventBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelGiftAidDeclarationCompleted As CancelGiftAidDeclarationCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelServiceBookingCompleted As CancelServiceBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event ConfirmCardSaleTransactionCompleted As ConfirmCardSaleTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event ConfirmCashSaleTransactionCompleted As ConfirmCashSaleTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event ConfirmCreditSaleTransactionCompleted As ConfirmCreditSaleTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event ConfirmCreditAndCardSaleTransactionCompleted As ConfirmCreditAndCardSaleTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCriteriaVariableControlsCompleted As GetCriteriaVariableControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveListManagerSelectionCompleted As SaveListManagerSelectionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddErrorLogCompleted As AddErrorLogCompletedEventHandler
        
        '''<remarks/>
        Public Event AddContactEmailingCompleted As AddContactEmailingCompletedEventHandler
        
        '''<remarks/>
        Public Event AddContactMailingCompleted As AddContactMailingCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMailingCompleted As AddMailingCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMailingHistoryCompleted As AddMailingHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event FindActionsCompleted As FindActionsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindAppealCollectionsCompleted As FindAppealCollectionsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindBatchesCompleted As FindBatchesCompletedEventHandler
        
        '''<remarks/>
        Public Event FindCampaignAppealsCompleted As FindCampaignAppealsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindCampaignCollectionsCompleted As FindCampaignCollectionsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindCampaignsCompleted As FindCampaignsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindCampaignSegmentsCompleted As FindCampaignSegmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindCovenantsCompleted As FindCovenantsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindCreditCardAuthoritiesCompleted As FindCreditCardAuthoritiesCompletedEventHandler
        
        '''<remarks/>
        Public Event FindDataCompleted As FindDataCompletedEventHandler
        
        '''<remarks/>
        Public Event FindDirectDebitsCompleted As FindDirectDebitsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindDocumentsCompleted As FindDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindExternalDocumentsCompleted As FindExternalDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindDuplicateContactsCompleted As FindDuplicateContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindDuplicateOrganisationsCompleted As FindDuplicateOrganisationsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindEventsCompleted As FindEventsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindGiftAidDeclarationsCompleted As FindGiftAidDeclarationsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindInternalResourcesCompleted As FindInternalResourcesCompletedEventHandler
        
        '''<remarks/>
        Public Event FindInUniservPhoneBookCompleted As FindInUniservPhoneBookCompletedEventHandler
        
        '''<remarks/>
        Public Event FindInvoiceCreditNotesCompleted As FindInvoiceCreditNotesCompletedEventHandler
        
        '''<remarks/>
        Public Event FindLegaciesCompleted As FindLegaciesCompletedEventHandler
        
        '''<remarks/>
        Public Event FindMembersCompleted As FindMembersCompletedEventHandler
        
        '''<remarks/>
        Public Event FindPaymentPlansCompleted As FindPaymentPlansCompletedEventHandler
        
        '''<remarks/>
        Public Event FindPayrollGivingPledgesCompleted As FindPayrollGivingPledgesCompletedEventHandler
        
        '''<remarks/>
        Public Event FindPostTaxPayrollGivingPledgesCompleted As FindPostTaxPayrollGivingPledgesCompletedEventHandler
        
        '''<remarks/>
        Public Event FindPreTaxPayrollGivingPledgesCompleted As FindPreTaxPayrollGivingPledgesCompletedEventHandler
        
        '''<remarks/>
        Public Event FindProductsCompleted As FindProductsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindPurchaseOrdersCompleted As FindPurchaseOrdersCompletedEventHandler
        
        '''<remarks/>
        Public Event FindSelectionSetsCompleted As FindSelectionSetsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindStandardDocumentsCompleted As FindStandardDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindStandingOrdersCompleted As FindStandingOrdersCompletedEventHandler
        
        '''<remarks/>
        Public Event FindTransactionsCompleted As FindTransactionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSurnamePrefixCompleted As GetSurnamePrefixCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessListManagerMailingCompleted As ProcessListManagerMailingCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessListManagerStepCompleted As ProcessListManagerStepCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectAddressDataCompleted As SelectAddressDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectBankAccountDataCompleted As SelectBankAccountDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectCampaignDataCompleted As SelectCampaignDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectSystemModuleUsersDataCompleted As SelectSystemModuleUsersDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectContactDataCompleted As SelectContactDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateActivityCompleted As UpdateActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAddressCompleted As UpdateAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAddressUsageCompleted As UpdateAddressUsageCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAppointmentCompleted As UpdateAppointmentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAppropriateCertificateCompleted As UpdateAppropriateCertificateCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCommunicationsLogCompleted As UpdateCommunicationsLogCompletedEventHandler
        
        '''<remarks/>
        Public Event LockDocumentCompleted As LockDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateChequeCompleted As UpdateChequeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCommunicationsLogLinkCompleted As UpdateCommunicationsLogLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCommunicationsLogSubjectCompleted As UpdateCommunicationsLogSubjectCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCommunicationsNumberCompleted As UpdateCommunicationsNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCommunicationsNumbersAddressCompleted As UpdateCommunicationsNumbersAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCommunicationUsageCompleted As UpdateCommunicationUsageCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactCompleted As UpdateContactCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactAccountCompleted As UpdateContactAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactFundraisingEventCompleted As UpdateContactFundraisingEventCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCreditCardCompleted As UpdateCreditCardCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCreditCardAuthorityCompleted As UpdateCreditCardAuthorityCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCreditCustomerCompleted As UpdateCreditCustomerCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCriteriaSetCompleted As UpdateCriteriaSetCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCustomFormDataCompleted As UpdateCustomFormDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDepartmentNotesCompleted As UpdateDepartmentNotesCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDirectDebitCompleted As UpdateDirectDebitCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExternalReferenceCompleted As UpdateExternalReferenceCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFinancialHistoryCompleted As UpdateFinancialHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFundraisingPaymentScheduleCompleted As UpdateFundraisingPaymentScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFundraisingRequestCompleted As UpdateFundraisingRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFutureMembershipTypeCompleted As UpdateFutureMembershipTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateGiftAidDeclarationCompleted As UpdateGiftAidDeclarationCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateInvoiceCompleted As UpdateInvoiceCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLinkCompleted As UpdateLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMemberCompleted As UpdateMemberCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMaintenanceTablesCompleted As UpdateMaintenanceTablesCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMembershipGroupCompleted As UpdateMembershipGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePositionCompleted As UpdatePositionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePositionActivityCompleted As UpdatePositionActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePositionLinkCompleted As UpdatePositionLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWebDocumentCompleted As UpdateWebDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProvisionalTransactionCompleted As UpdateProvisionalTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePurchaseOrderCompleted As UpdatePurchaseOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePurchaseOrderPaymentCompleted As UpdatePurchaseOrderPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRoleCompleted As UpdateRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateStandardDocumentCompleted As UpdateStandardDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateStandingOrderCompleted As UpdateStandingOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateStickyNoteCompleted As UpdateStickyNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSubscriptionCompleted As UpdateSubscriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSuppressionCompleted As UpdateSuppressionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSystemModuleUserCompleted As UpdateSystemModuleUserCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTableDataCompleted As UpdateTableDataCompletedEventHandler
        
        '''<remarks/>
        Public Event MakeBranchHistoricalCompleted As MakeBranchHistoricalCompletedEventHandler
        
        '''<remarks/>
        Public Event MoveBranchPostcodeCompleted As MoveBranchPostcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event MoveRegionCompleted As MoveRegionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAccessControlItemCompleted As UpdateAccessControlItemCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAccessControlGroupCompleted As DeleteAccessControlGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateAccessControlDataCompleted As CreateAccessControlDataCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateCopyOfSelectionSetCompleted As CreateCopyOfSelectionSetCompletedEventHandler
        
        '''<remarks/>
        Public Event ReconcileStandingOrderCompleted As ReconcileStandingOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateBankersOrderCompleted As UpdateBankersOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeOwnershipAccessLevelCompleted As ChangeOwnershipAccessLevelCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMailingCompleted As UpdateMailingCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMailingHistoryCompleted As UpdateMailingHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event ReanalysePurchaseOrderPaymentCompleted As ReanalysePurchaseOrderPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEntityAlertCompleted As AddEntityAlertCompletedEventHandler
        
        '''<remarks/>
        Public Event AddSystemModuleUserCompleted As AddSystemModuleUserCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAccommodationBookingCompleted As AddAccommodationBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event AddActionCompleted As AddActionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddActionFromTemplateCompleted As AddActionFromTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event AddActionLinkCompleted As AddActionLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event AddActionSubjectCompleted As AddActionSubjectCompletedEventHandler
        
        '''<remarks/>
        Public Event AddActivityCompleted As AddActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAddressCompleted As AddAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAddressUsageCompleted As AddAddressUsageCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAppointmentCompleted As AddAppointmentCompletedEventHandler
        
        '''<remarks/>
        Public Event AddBankCompleted As AddBankCompletedEventHandler
        
        '''<remarks/>
        Public Event AddBatchCompleted As AddBatchCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCommunicationsLogCompleted As AddCommunicationsLogCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCommunicationsLogHistoryCompleted As AddCommunicationsLogHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCommunicationsLogLinkCompleted As AddCommunicationsLogLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCommunicationsLogSubjectCompleted As AddCommunicationsLogSubjectCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCommunicationsNumberCompleted As AddCommunicationsNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCommunicationUsageCompleted As AddCommunicationUsageCompletedEventHandler
        
        '''<remarks/>
        Public Event AddContactCompleted As AddContactCompletedEventHandler
        
        '''<remarks/>
        Public Event AddContactAccountCompleted As AddContactAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event AddContactFundraisingEventCompleted As AddContactFundraisingEventCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCreditCustomerCompleted As AddCreditCustomerCompletedEventHandler
        
        '''<remarks/>
        Public Event TransferWaitingListBookingCompleted As TransferWaitingListBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAccommodationBookingCompleted As UpdateAccommodationBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDelegateActivityCompleted As UpdateDelegateActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDelegateLinkCompleted As UpdateDelegateLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventCompleted As UpdateEventCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventBookingCompleted As UpdateEventBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventBookingOptionCompleted As UpdateEventBookingOptionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventContactCompleted As UpdateEventContactCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventCostCompleted As UpdateEventCostCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDelegateToEventCompleted As UpdateDelegateToEventCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventOptionSessionCompleted As UpdateEventOptionSessionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventOrganiserCompleted As UpdateEventOrganiserCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventPersonnelCompleted As UpdateEventPersonnelCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventPersonnelTaskCompleted As UpdateEventPersonnelTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventPISCompleted As UpdateEventPISCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventResourceCompleted As UpdateEventResourceCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventRoomAllocationCompleted As UpdateEventRoomAllocationCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventRoomBlockBookingCompleted As UpdateEventRoomBlockBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventSessionCompleted As UpdateEventSessionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventSessionTestCompleted As UpdateEventSessionTestCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventSessionTestResultCompleted As UpdateEventSessionTestResultCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventSubjectCompleted As UpdateEventSubjectCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventSubmissionCompleted As UpdateEventSubmissionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventVenueBookingCompleted As UpdateEventVenueBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEntityAlertCompleted As DeleteEntityAlertCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteActionCompleted As DeleteActionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteActionLinkCompleted As DeleteActionLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteActionSubjectCompleted As DeleteActionSubjectCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteActivityCompleted As DeleteActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAddressCompleted As DeleteAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAddressUsageCompleted As DeleteAddressUsageCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAppointmentCompleted As DeleteAppointmentCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteBatchCompleted As DeleteBatchCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCommunicationsLogCompleted As DeleteCommunicationsLogCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCommunicationsLogLinkCompleted As DeleteCommunicationsLogLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCommunicationsLogSubjectCompleted As DeleteCommunicationsLogSubjectCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCommunicationsNumberCompleted As DeleteCommunicationsNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCommunicationUsageCompleted As DeleteCommunicationUsageCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSelectedContactCompleted As DeleteSelectedContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContactCompleted As DeleteContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContactAccountCompleted As DeleteContactAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCriteriaSetCompleted As DeleteCriteriaSetCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCriteriaSetDetailsCompleted As DeleteCriteriaSetDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCustomFormDataCompleted As DeleteCustomFormDataCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteDuplicateContactCompleted As DeleteDuplicateContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExternalReferenceCompleted As DeleteExternalReferenceCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContactFundraisingEventCompleted As DeleteContactFundraisingEventCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFundraisingPaymentScheduleCompleted As DeleteFundraisingPaymentScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFundraisingRequestCompleted As DeleteFundraisingRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFutureMembershipTypeCompleted As DeleteFutureMembershipTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteHistoryItemCompleted As DeleteHistoryItemCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteJobScheduleCompleted As DeleteJobScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteLinkCompleted As DeleteLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event DeletePositionCompleted As DeletePositionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeletePositionActivityCompleted As DeletePositionActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event DeletePositionLinkCompleted As DeletePositionLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event DeletePurchaseOrderPaymentCompleted As DeletePurchaseOrderPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteProvisionalTransactionCompleted As DeleteProvisionalTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteRoleCompleted As DeleteRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSelectionSetCompleted As DeleteSelectionSetCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSelectionSetContactCompleted As DeleteSelectionSetContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSelectionStepsCompleted As DeleteSelectionStepsCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteStandardDocumentCompleted As DeleteStandardDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteStickyNoteCompleted As DeleteStickyNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSuppressionCompleted As DeleteSuppressionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteDuplicateSystemModuleUsersCompleted As DeleteDuplicateSystemModuleUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteInactiveSystemModuleUsersCompleted As DeleteInactiveSystemModuleUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContactIncentivesCompleted As DeleteContactIncentivesCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEnclosuresCompleted As DeleteEnclosuresCompletedEventHandler
        
        '''<remarks/>
        Public Event MergeContactCompleted As MergeContactCompletedEventHandler
        
        '''<remarks/>
        Public Event MergeAddressCompleted As MergeAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContactSurveyCompleted As DeleteContactSurveyCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDirectoryPreferencesCompleted As UpdateDirectoryPreferencesCompletedEventHandler
        
        '''<remarks/>
        Public Event AbortJobCompleted As AbortJobCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEntityAlertCompleted As UpdateEntityAlertCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEntityAlertItemCompleted As UpdateEntityAlertItemCompletedEventHandler
        
        '''<remarks/>
        Public Event InitCustomFormsCompleted As InitCustomFormsCompletedEventHandler
        
        '''<remarks/>
        Public Event InitMailSortDataCompleted As InitMailSortDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportTraderAppInfoCompleted As ImportTraderAppInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CloseSiteCompleted As CloseSiteCompletedEventHandler
        
        '''<remarks/>
        Public Event MovePositionCompleted As MovePositionCompletedEventHandler
        
        '''<remarks/>
        Public Event ResubmitJobScheduleCompleted As ResubmitJobScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event SetConfigCompleted As SetConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateActionCompleted As UpdateActionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateActionLinkCompleted As UpdateActionLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCampaignCompleted As UpdateCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCampaignAppealCompleted As UpdateCampaignAppealCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCampaignCostCompleted As UpdateCampaignCostCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCampaignRoleCompleted As UpdateCampaignRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCampaignSegmentCompleted As UpdateCampaignSegmentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCampaignSupplierCompleted As UpdateCampaignSupplierCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCollectionPointCompleted As UpdateCollectionPointCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCollectorShiftCompleted As UpdateCollectorShiftCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCollectionResourceCompleted As UpdateCollectionResourceCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCollectionPISCompleted As UpdateCollectionPISCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCollectionBoxCompleted As UpdateCollectionBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateH2HCollectionCompleted As UpdateH2HCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateH2hCollectorCompleted As UpdateH2hCollectorCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMannedCollectionCompleted As UpdateMannedCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMannedCollectorCompleted As UpdateMannedCollectorCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMailingSelectionSetCompleted As UpdateMailingSelectionSetCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMailingContactAddressCompleted As UpdateMailingContactAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSegmentCostCentreCompleted As UpdateSegmentCostCentreCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSegmentProductCompleted As UpdateSegmentProductCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSelectionSetCompleted As UpdateSelectionSetCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTableMaintenanceDataCompleted As UpdateTableMaintenanceDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTableNoteCompleted As UpdateTableNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTickBoxCompleted As UpdateTickBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUnmannedCollectionCompleted As UpdateUnmannedCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDespatchNoteCompleted As UpdateDespatchNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event AddStockMovementCompleted As AddStockMovementCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDuplicateContactCompleted As UpdateDuplicateContactCompletedEventHandler
        
        '''<remarks/>
        Public Event AddStockToPackCompleted As AddStockToPackCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEventLoanItemCompleted As UpdateEventLoanItemCompletedEventHandler
        
        '''<remarks/>
        Public Event RenumberEventCandidatesCompleted As RenumberEventCandidatesCompletedEventHandler
        
        '''<remarks/>
        Public Event RenumberSessionBookingsCompleted As RenumberSessionBookingsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactSurveyCompleted As UpdateContactSurveyCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactSurveyResponsesCompleted As UpdateContactSurveyResponsesCompletedEventHandler
        
        '''<remarks/>
        Public Event AddDelegateActivityCompleted As AddDelegateActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event AddDelegateLinkCompleted As AddDelegateLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventCompleted As AddEventCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventBookingOptionCompleted As AddEventBookingOptionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventContactCompleted As AddEventContactCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventCostCompleted As AddEventCostCompletedEventHandler
        
        '''<remarks/>
        Public Event AddDelegateToEventCompleted As AddDelegateToEventCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventMailingCompleted As AddEventMailingCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventOptionSessionCompleted As AddEventOptionSessionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventOrganiserCompleted As AddEventOrganiserCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventOwnerCompleted As AddEventOwnerCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventPersonnelCompleted As AddEventPersonnelCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventPersonnelTaskCompleted As AddEventPersonnelTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventPISCompleted As AddEventPISCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventResourceCompleted As AddEventResourceCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventRoomBlockBookingCompleted As AddEventRoomBlockBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventSessionCompleted As AddEventSessionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventSessionActivityCompleted As AddEventSessionActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventSessionTestCompleted As AddEventSessionTestCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventSessionTestResultCompleted As AddEventSessionTestResultCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventSourceCompleted As AddEventSourceCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventSubjectCompleted As AddEventSubjectCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventSubmissionCompleted As AddEventSubmissionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventVenueBookingCompleted As AddEventVenueBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event AllocatePISToDelegatesCompleted As AllocatePISToDelegatesCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckEventBookingCompleted As CheckEventBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckMembershipTypeRateCompleted As CheckMembershipTypeRateCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteDelegateActivityCompleted As DeleteDelegateActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteDelegateLinkCompleted As DeleteDelegateLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventCompleted As DeleteEventCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventBookingOptionCompleted As DeleteEventBookingOptionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventContactCompleted As DeleteEventContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventCostCompleted As DeleteEventCostCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteDelegateFromEventCompleted As DeleteDelegateFromEventCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventMailingCompleted As DeleteEventMailingCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventOptionSessionCompleted As DeleteEventOptionSessionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventOrganiserCompleted As DeleteEventOrganiserCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventOwnerCompleted As DeleteEventOwnerCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventPersonnelCompleted As DeleteEventPersonnelCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventPersonnelTaskCompleted As DeleteEventPersonnelTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventPISCompleted As DeleteEventPISCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventResourceCompleted As DeleteEventResourceCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventRoomBlockBookingCompleted As DeleteEventRoomBlockBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventSessionCompleted As DeleteEventSessionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventSessionActivityCompleted As DeleteEventSessionActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventSessionTestCompleted As DeleteEventSessionTestCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventSessionTestResultCompleted As DeleteEventSessionTestResultCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventSourceCompleted As DeleteEventSourceCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventSubjectCompleted As DeleteEventSubjectCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventSubmissionCompleted As DeleteEventSubmissionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventVenueBookingCompleted As DeleteEventVenueBookingCompletedEventHandler
        
        '''<remarks/>
        Public Event DuplicateEventCompleted As DuplicateEventCompletedEventHandler
        
        '''<remarks/>
        Public Event FindFundraisingPaymentScheduleCompleted As FindFundraisingPaymentScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event FindMailingsCompleted As FindMailingsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindOrganisationsCompleted As FindOrganisationsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindTextCompleted As FindTextCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessBulkEMailCompleted As ProcessBulkEMailCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessJobCompleted As ProcessJobCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessMailingCountCompleted As ProcessMailingCountCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessMailingCompleted As ProcessMailingCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectActionDataCompleted As SelectActionDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectFinancialProcessingDataCompleted As SelectFinancialProcessingDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePickingListCompleted As UpdatePickingListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCountCompleted As GetCountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomisedDisplayListCompleted As GetCustomisedDisplayListCompletedEventHandler
        
        '''<remarks/>
        Public Event SetMailingDocumentFulfilmentCompleted As SetMailingDocumentFulfilmentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMDPDocumentInfoCompleted As GetMDPDocumentInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelReinstateProvisionalTransactionCompleted As CancelReinstateProvisionalTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelMailingStandingOrdersCompleted As CancelMailingStandingOrdersCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelGayePledgesCompleted As CancelGayePledgesCompletedEventHandler
        
        '''<remarks/>
        Public Event ConfirmProvisionalTransactionCompleted As ConfirmProvisionalTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessProductNumberAllocationCompleted As ProcessProductNumberAllocationCompletedEventHandler
        
        '''<remarks/>
        Public Event ReissueChequeCompleted As ReissueChequeCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeChequePayeeCompleted As ChangeChequePayeeCompletedEventHandler
        
        '''<remarks/>
        Public Event FindVenueCompleted As FindVenueCompletedEventHandler
        
        '''<remarks/>
        Public Event AddContactSurveyCompleted As AddContactSurveyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBulkMailerMailingsCompleted As GetBulkMailerMailingsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBulkMailerMailingPropertiesCompleted As GetBulkMailerMailingPropertiesCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessBulkMailerMailingCompleted As ProcessBulkMailerMailingCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAppealBudgetCompleted As AddAppealBudgetCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAppealBudgetDetailCompleted As AddAppealBudgetDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAppealResourceCompleted As AddAppealResourceCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCampaignCompleted As AddCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCampaignAppealCompleted As AddCampaignAppealCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCampaignCostCompleted As AddCampaignCostCompletedEventHandler
        
        '''<remarks/>
        Public Event ExportReportCompleted As ExportReportCompletedEventHandler
        
        '''<remarks/>
        Public Event ExportCustomFormCompleted As ExportCustomFormCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckTraderDataCompleted As CheckTraderDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ExportTraderApplicationCompleted As ExportTraderApplicationCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCampaignRoleCompleted As AddCampaignRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCampaignSegmentCompleted As AddCampaignSegmentCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCampaignSupplierCompleted As AddCampaignSupplierCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCollectionBoxCompleted As AddCollectionBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCollectionPISCompleted As AddCollectionPISCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCollectionPointCompleted As AddCollectionPointCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCollectionRegionCompleted As AddCollectionRegionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCollectionResourceCompleted As AddCollectionResourceCompletedEventHandler
        
        '''<remarks/>
        Public Event AddCollectorShiftCompleted As AddCollectorShiftCompletedEventHandler
        
        '''<remarks/>
        Public Event AddH2HCollectionCompleted As AddH2HCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddH2hCollectorCompleted As AddH2hCollectorCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMannedCollectionCompleted As AddMannedCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMannedCollectorCompleted As AddMannedCollectorCompletedEventHandler
        
        '''<remarks/>
        Public Event AddSegmentCostCentreCompleted As AddSegmentCostCentreCompletedEventHandler
        
        '''<remarks/>
        Public Event AddSegmentProductCompleted As AddSegmentProductCompletedEventHandler
        
        '''<remarks/>
        Public Event AddTickBoxCompleted As AddTickBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUnmannedCollectionCompleted As AddUnmannedCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCampaignDataCompleted As CopyCampaignDataCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAppealBudgetCompleted As DeleteAppealBudgetCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAppealBudgetDetailCompleted As DeleteAppealBudgetDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAppealResourceCompleted As DeleteAppealResourceCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCampaignCompleted As DeleteCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCampaignAppealCompleted As DeleteCampaignAppealCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCampaignCostCompleted As DeleteCampaignCostCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCampaignRoleCompleted As DeleteCampaignRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCampaignSegmentCompleted As DeleteCampaignSegmentCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCampaignSupplierCompleted As DeleteCampaignSupplierCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCollectionCompleted As DeleteCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCollectionBoxCompleted As DeleteCollectionBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCollectionPISCompleted As DeleteCollectionPISCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCollectionPointCompleted As DeleteCollectionPointCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCollectionRegionCompleted As DeleteCollectionRegionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCollectionResourceCompleted As DeleteCollectionResourceCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCollectorShiftCompleted As DeleteCollectorShiftCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteH2hCollectorCompleted As DeleteH2hCollectorCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteMannedCollectorCompleted As DeleteMannedCollectorCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteMailingSelectionSetCompleted As DeleteMailingSelectionSetCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteMeetingCompleted As DeleteMeetingCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteReportCompleted As DeleteReportCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteMeetingLinksCompleted As DeleteMeetingLinksCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteMeetingDocumentCompleted As DeleteMeetingDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSegmentCostCentreCompleted As DeleteSegmentCostCentreCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSegmentProductCompleted As DeleteSegmentProductCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteTableMaintenanceDataCompleted As DeleteTableMaintenanceDataCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteTickBoxCompleted As DeleteTickBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAppealBudgetCompleted As UpdateAppealBudgetCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAppealBudgetDetailCompleted As UpdateAppealBudgetDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAppealResourceCompleted As UpdateAppealResourceCompletedEventHandler
        
        '''<remarks/>
        Public Event AddContactCPDCycleCompleted As AddContactCPDCycleCompletedEventHandler
        
        '''<remarks/>
        Public Event AddContactCPDPointsCompleted As AddContactCPDPointsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddContactIncentivesCompleted As AddContactIncentivesCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUnFulFilledContactIncentivesCompleted As AddUnFulFilledContactIncentivesCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEnclosuresCompleted As AddEnclosuresCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMeetingCompleted As AddMeetingCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMeetingLinkCompleted As AddMeetingLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMeetingDocumentCompleted As AddMeetingDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event DuplicateMeetingCompleted As DuplicateMeetingCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMeetingCompleted As UpdateMeetingCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMeetingLinkCompleted As UpdateMeetingLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event AddDisplayListItemCompleted As AddDisplayListItemCompletedEventHandler
        
        '''<remarks/>
        Public Event AddEventFinancialLinkCompleted As AddEventFinancialLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event AddExternalDataCompleted As AddExternalDataCompletedEventHandler
        
        '''<remarks/>
        Public Event AddHistoryItemCompleted As AddHistoryItemCompletedEventHandler
        
        '''<remarks/>
        Public Event AddLegacyCompleted As AddLegacyCompletedEventHandler
        
        '''<remarks/>
        Public Event AddLegacyBequestCompleted As AddLegacyBequestCompletedEventHandler
        
        '''<remarks/>
        Public Event AddLegacyBequestForecastCompleted As AddLegacyBequestForecastCompletedEventHandler
        
        '''<remarks/>
        Public Event AddLegacyTaxCertificateCompleted As AddLegacyTaxCertificateCompletedEventHandler
        
        '''<remarks/>
        Public Event AddLegacyExpenseCompleted As AddLegacyExpenseCompletedEventHandler
        
        '''<remarks/>
        Public Event AddLookupDataCompleted As AddLookupDataCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPreTaxPledgeCompleted As AddPreTaxPledgeCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPostTaxPledgeCompleted As AddPostTaxPledgeCompletedEventHandler
        
        '''<remarks/>
        Public Event AddTableMaintenanceDataCompleted As AddTableMaintenanceDataCompletedEventHandler
        
        '''<remarks/>
        Public Event AddXmlDataItemCompleted As AddXmlDataItemCompletedEventHandler
        
        '''<remarks/>
        Public Event AmalgamateOrganisationCompleted As AmalgamateOrganisationCompletedEventHandler
        
        '''<remarks/>
        Public Event CalculateEventBookingPriceFromMatrixCompleted As CalculateEventBookingPriceFromMatrixCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckSetupCompleted As CheckSetupCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckUsedElsewhereCompleted As CheckUsedElsewhereCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckLicenseDataCompleted As CheckLicenseDataCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPromptForNewBranchCompleted As CheckPromptForNewBranchCompletedEventHandler
        
        '''<remarks/>
        Public Event CloneOrganisationCompleted As CloneOrganisationCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyEventPricingMatrixCompleted As CopyEventPricingMatrixCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContactCPDCycleCompleted As DeleteContactCPDCycleCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContactCPDPointsCompleted As DeleteContactCPDPointsCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContactMailingDocumentCompleted As DeleteContactMailingDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCustomisedDisplayListCompleted As DeleteCustomisedDisplayListCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEventFinancialLinkCompleted As DeleteEventFinancialLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteExternalDataCompleted As DeleteExternalDataCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFastDataEntryControlCompleted As DeleteFastDataEntryControlCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFastDataEntryPageCompleted As DeleteFastDataEntryPageCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteLegacyCompleted As DeleteLegacyCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteLegacyBequestCompleted As DeleteLegacyBequestCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteLegacyBequestForecastCompleted As DeleteLegacyBequestForecastCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteLegacyTaxCertificateCompleted As DeleteLegacyTaxCertificateCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteLegacyExpenseCompleted As DeleteLegacyExpenseCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteXmlDataItemCompleted As DeleteXmlDataItemCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteDisplayListItemCompleted As DeleteDisplayListItemCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFastDataEntryControlItemsCompleted As GetFastDataEntryControlItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMailingSelectedContactsCompleted As GetMailingSelectedContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMailingRelevantMembersCompleted As GetMailingRelevantMembersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFastDataEntryModuleDefaultsCompleted As GetFastDataEntryModuleDefaultsCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessMailingSelectionCompleted As ProcessMailingSelectionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMailingSelectionCountCompleted As GetMailingSelectionCountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFinderControlsCompleted As GetFinderControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLookupDataCompleted As GetLookupDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaintenanceControlsCompleted As GetMaintenanceControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectAppointmentDataCompleted As SelectAppointmentDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectExternalDataCompleted As SelectExternalDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectFastDataEntryDataCompleted As SelectFastDataEntryDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectLegacyBequestDataCompleted As SelectLegacyBequestDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactCPDCycleCompleted As UpdateContactCPDCycleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactCPDPointsCompleted As UpdateContactCPDPointsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateExternalDataCompleted As UpdateExternalDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFastDataEntryUserControlCompleted As UpdateFastDataEntryUserControlCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFastDataEntryPageCompleted As UpdateFastDataEntryPageCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFastDataEntryPageAccessLevelsCompleted As UpdateFastDataEntryPageAccessLevelsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFastDataEntryPageItemCompleted As UpdateFastDataEntryPageItemCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFastDataEntryPageItemControlsCompleted As UpdateFastDataEntryPageItemControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFinderControlsCompleted As UpdateFinderControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMaintenanceControlsCompleted As UpdateMaintenanceControlsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateHistoryItemCompleted As UpdateHistoryItemCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLegacyCompleted As UpdateLegacyCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLegacyBequestCompleted As UpdateLegacyBequestCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLegacyBequestForecastCompleted As UpdateLegacyBequestForecastCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLegacyBequestReceiptCompleted As UpdateLegacyBequestReceiptCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLegacyTaxCertificateCompleted As UpdateLegacyTaxCertificateCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLegacyExpenseCompleted As UpdateLegacyExpenseCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePreTaxPledgeCompleted As UpdatePreTaxPledgeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePostTaxPledgeCompleted As UpdatePostTaxPledgeCompletedEventHandler
        
        '''<remarks/>
        Public Event FindContactMailingDocumentsCompleted As FindContactMailingDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindContactsCompleted As FindContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindEventPersonnelCompleted As FindEventPersonnelCompletedEventHandler
        
        '''<remarks/>
        Public Event FindEventPersonnelAppointmentsCompleted As FindEventPersonnelAppointmentsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SaveTraderApplicationBank", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveTraderApplicationBank(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SaveTraderApplicationBank", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveTraderApplicationBankAsync(ByVal pXMLParams As String)
            Me.SaveTraderApplicationBankAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveTraderApplicationBankAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SaveTraderApplicationBankOperationCompleted Is Nothing) Then
                Me.SaveTraderApplicationBankOperationCompleted = AddressOf Me.OnSaveTraderApplicationBankOperationCompleted
            End If
            Me.InvokeAsync("SaveTraderApplicationBank", New Object() {pXMLParams}, Me.SaveTraderApplicationBankOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveTraderApplicationBankOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveTraderApplicationBankCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveTraderApplicationBankCompleted(Me, New SaveTraderApplicationBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CopyTraderApplication", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CopyTraderApplication(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CopyTraderApplication", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyTraderApplicationAsync(ByVal pXMLParams As String)
            Me.CopyTraderApplicationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyTraderApplicationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CopyTraderApplicationOperationCompleted Is Nothing) Then
                Me.CopyTraderApplicationOperationCompleted = AddressOf Me.OnCopyTraderApplicationOperationCompleted
            End If
            Me.InvokeAsync("CopyTraderApplication", New Object() {pXMLParams}, Me.CopyTraderApplicationOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyTraderApplicationOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyTraderApplicationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyTraderApplicationCompleted(Me, New CopyTraderApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteTraderApplication", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteTraderApplication(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteTraderApplication", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteTraderApplicationAsync(ByVal pXMLParams As String)
            Me.DeleteTraderApplicationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTraderApplicationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteTraderApplicationOperationCompleted Is Nothing) Then
                Me.DeleteTraderApplicationOperationCompleted = AddressOf Me.OnDeleteTraderApplicationOperationCompleted
            End If
            Me.InvokeAsync("DeleteTraderApplication", New Object() {pXMLParams}, Me.DeleteTraderApplicationOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteTraderApplicationOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteTraderApplicationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteTraderApplicationCompleted(Me, New DeleteTraderApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetUnpostedBatchCount", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUnpostedBatchCount(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetUnpostedBatchCount", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUnpostedBatchCountAsync(ByVal pXMLParams As String)
            Me.GetUnpostedBatchCountAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUnpostedBatchCountAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetUnpostedBatchCountOperationCompleted Is Nothing) Then
                Me.GetUnpostedBatchCountOperationCompleted = AddressOf Me.OnGetUnpostedBatchCountOperationCompleted
            End If
            Me.InvokeAsync("GetUnpostedBatchCount", New Object() {pXMLParams}, Me.GetUnpostedBatchCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUnpostedBatchCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUnpostedBatchCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUnpostedBatchCountCompleted(Me, New GetUnpostedBatchCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CheckAdjustmentAllowed", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckAdjustmentAllowed(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CheckAdjustmentAllowed", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckAdjustmentAllowedAsync(ByVal pXMLParams As String)
            Me.CheckAdjustmentAllowedAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckAdjustmentAllowedAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CheckAdjustmentAllowedOperationCompleted Is Nothing) Then
                Me.CheckAdjustmentAllowedOperationCompleted = AddressOf Me.OnCheckAdjustmentAllowedOperationCompleted
            End If
            Me.InvokeAsync("CheckAdjustmentAllowed", New Object() {pXMLParams}, Me.CheckAdjustmentAllowedOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckAdjustmentAllowedOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckAdjustmentAllowedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckAdjustmentAllowedCompleted(Me, New CheckAdjustmentAllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ReverseTransaction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReverseTransaction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ReverseTransaction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReverseTransactionAsync(ByVal pXMLParams As String)
            Me.ReverseTransactionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReverseTransactionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ReverseTransactionOperationCompleted Is Nothing) Then
                Me.ReverseTransactionOperationCompleted = AddressOf Me.OnReverseTransactionOperationCompleted
            End If
            Me.InvokeAsync("ReverseTransaction", New Object() {pXMLParams}, Me.ReverseTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnReverseTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReverseTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReverseTransactionCompleted(Me, New ReverseTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ChangeTransactionPayer", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeTransactionPayer(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ChangeTransactionPayer", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeTransactionPayerAsync(ByVal pXMLParams As String)
            Me.ChangeTransactionPayerAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeTransactionPayerAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ChangeTransactionPayerOperationCompleted Is Nothing) Then
                Me.ChangeTransactionPayerOperationCompleted = AddressOf Me.OnChangeTransactionPayerOperationCompleted
            End If
            Me.InvokeAsync("ChangeTransactionPayer", New Object() {pXMLParams}, Me.ChangeTransactionPayerOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeTransactionPayerOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeTransactionPayerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeTransactionPayerCompleted(Me, New ChangeTransactionPayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ReversePOPMenuSelection", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReversePOPMenuSelection(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ReversePOPMenuSelection", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReversePOPMenuSelectionAsync(ByVal pXMLParams As String)
            Me.ReversePOPMenuSelectionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReversePOPMenuSelectionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ReversePOPMenuSelectionOperationCompleted Is Nothing) Then
                Me.ReversePOPMenuSelectionOperationCompleted = AddressOf Me.OnReversePOPMenuSelectionOperationCompleted
            End If
            Me.InvokeAsync("ReversePOPMenuSelection", New Object() {pXMLParams}, Me.ReversePOPMenuSelectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnReversePOPMenuSelectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReversePOPMenuSelectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReversePOPMenuSelectionCompleted(Me, New ReversePOPMenuSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ReversePurchaseOrderPayment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReversePurchaseOrderPayment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ReversePurchaseOrderPayment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReversePurchaseOrderPaymentAsync(ByVal pXMLParams As String)
            Me.ReversePurchaseOrderPaymentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReversePurchaseOrderPaymentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ReversePurchaseOrderPaymentOperationCompleted Is Nothing) Then
                Me.ReversePurchaseOrderPaymentOperationCompleted = AddressOf Me.OnReversePurchaseOrderPaymentOperationCompleted
            End If
            Me.InvokeAsync("ReversePurchaseOrderPayment", New Object() {pXMLParams}, Me.ReversePurchaseOrderPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnReversePurchaseOrderPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReversePurchaseOrderPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReversePurchaseOrderPaymentCompleted(Me, New ReversePurchaseOrderPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetImportTypes", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetImportTypes(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetImportTypes", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetImportTypesAsync(ByVal pXMLParams As String)
            Me.GetImportTypesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetImportTypesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetImportTypesOperationCompleted Is Nothing) Then
                Me.GetImportTypesOperationCompleted = AddressOf Me.OnGetImportTypesOperationCompleted
            End If
            Me.InvokeAsync("GetImportTypes", New Object() {pXMLParams}, Me.GetImportTypesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetImportTypesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetImportTypesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetImportTypesCompleted(Me, New GetImportTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/InitDataImport", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InitDataImport(ByVal pXMLParams As String, ByVal pImportAction As DataImportAction) As String
            Dim results() As Object = Me.Invoke("InitDataImport", New Object() {pXMLParams, pImportAction})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InitDataImportAsync(ByVal pXMLParams As String, ByVal pImportAction As DataImportAction)
            Me.InitDataImportAsync(pXMLParams, pImportAction, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InitDataImportAsync(ByVal pXMLParams As String, ByVal pImportAction As DataImportAction, ByVal userState As Object)
            If (Me.InitDataImportOperationCompleted Is Nothing) Then
                Me.InitDataImportOperationCompleted = AddressOf Me.OnInitDataImportOperationCompleted
            End If
            Me.InvokeAsync("InitDataImport", New Object() {pXMLParams, pImportAction}, Me.InitDataImportOperationCompleted, userState)
        End Sub
        
        Private Sub OnInitDataImportOperationCompleted(ByVal arg As Object)
            If (Not (Me.InitDataImportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InitDataImportCompleted(Me, New InitDataImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AccountNoVerify", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AccountNoVerify(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AccountNoVerify", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AccountNoVerifyAsync(ByVal pXMLParams As String)
            Me.AccountNoVerifyAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AccountNoVerifyAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AccountNoVerifyOperationCompleted Is Nothing) Then
                Me.AccountNoVerifyOperationCompleted = AddressOf Me.OnAccountNoVerifyOperationCompleted
            End If
            Me.InvokeAsync("AccountNoVerify", New Object() {pXMLParams}, Me.AccountNoVerifyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAccountNoVerifyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AccountNoVerifyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AccountNoVerifyCompleted(Me, New AccountNoVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetActionScheduleDate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActionScheduleDate(ByVal pScheduleType As XMLActionScheduleTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetActionScheduleDate", New Object() {pScheduleType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActionScheduleDateAsync(ByVal pScheduleType As XMLActionScheduleTypes, ByVal pXMLParams As String)
            Me.GetActionScheduleDateAsync(pScheduleType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActionScheduleDateAsync(ByVal pScheduleType As XMLActionScheduleTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetActionScheduleDateOperationCompleted Is Nothing) Then
                Me.GetActionScheduleDateOperationCompleted = AddressOf Me.OnGetActionScheduleDateOperationCompleted
            End If
            Me.InvokeAsync("GetActionScheduleDate", New Object() {pScheduleType, pXMLParams}, Me.GetActionScheduleDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActionScheduleDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActionScheduleDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActionScheduleDateCompleted(Me, New GetActionScheduleDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetAllPAFAddresses", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllPAFAddresses(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetAllPAFAddresses", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllPAFAddressesAsync(ByVal pXMLParams As String)
            Me.GetAllPAFAddressesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllPAFAddressesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetAllPAFAddressesOperationCompleted Is Nothing) Then
                Me.GetAllPAFAddressesOperationCompleted = AddressOf Me.OnGetAllPAFAddressesOperationCompleted
            End If
            Me.InvokeAsync("GetAllPAFAddresses", New Object() {pXMLParams}, Me.GetAllPAFAddressesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllPAFAddressesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllPAFAddressesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllPAFAddressesCompleted(Me, New GetAllPAFAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetBranchFromPostCode", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBranchFromPostCode(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetBranchFromPostCode", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBranchFromPostCodeAsync(ByVal pXMLParams As String)
            Me.GetBranchFromPostCodeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBranchFromPostCodeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetBranchFromPostCodeOperationCompleted Is Nothing) Then
                Me.GetBranchFromPostCodeOperationCompleted = AddressOf Me.OnGetBranchFromPostCodeOperationCompleted
            End If
            Me.InvokeAsync("GetBranchFromPostCode", New Object() {pXMLParams}, Me.GetBranchFromPostCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBranchFromPostCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBranchFromPostCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBranchFromPostCodeCompleted(Me, New GetBranchFromPostCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetDocumentNumberForDistribution", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentNumberForDistribution(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetDocumentNumberForDistribution", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentNumberForDistributionAsync(ByVal pXMLParams As String)
            Me.GetDocumentNumberForDistributionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentNumberForDistributionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetDocumentNumberForDistributionOperationCompleted Is Nothing) Then
                Me.GetDocumentNumberForDistributionOperationCompleted = AddressOf Me.OnGetDocumentNumberForDistributionOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentNumberForDistribution", New Object() {pXMLParams}, Me.GetDocumentNumberForDistributionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentNumberForDistributionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentNumberForDistributionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentNumberForDistributionCompleted(Me, New GetDocumentNumberForDistributionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetDocumentFile", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentFile(ByVal pXMLParams As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetDocumentFile", New Object() {pXMLParams})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentFileAsync(ByVal pXMLParams As String)
            Me.GetDocumentFileAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentFileAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetDocumentFileOperationCompleted Is Nothing) Then
                Me.GetDocumentFileOperationCompleted = AddressOf Me.OnGetDocumentFileOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentFile", New Object() {pXMLParams}, Me.GetDocumentFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentFileCompleted(Me, New GetDocumentFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetDocumentMergeData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentMergeData(ByVal pXMLParams As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetDocumentMergeData", New Object() {pXMLParams})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentMergeDataAsync(ByVal pXMLParams As String)
            Me.GetDocumentMergeDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentMergeDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetDocumentMergeDataOperationCompleted Is Nothing) Then
                Me.GetDocumentMergeDataOperationCompleted = AddressOf Me.OnGetDocumentMergeDataOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentMergeData", New Object() {pXMLParams}, Me.GetDocumentMergeDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentMergeDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentMergeDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentMergeDataCompleted(Me, New GetDocumentMergeDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMaintenanceData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaintenanceData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetMaintenanceData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaintenanceDataAsync(ByVal pXMLParams As String)
            Me.GetMaintenanceDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaintenanceDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetMaintenanceDataOperationCompleted Is Nothing) Then
                Me.GetMaintenanceDataOperationCompleted = AddressOf Me.OnGetMaintenanceDataOperationCompleted
            End If
            Me.InvokeAsync("GetMaintenanceData", New Object() {pXMLParams}, Me.GetMaintenanceDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaintenanceDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaintenanceDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaintenanceDataCompleted(Me, New GetMaintenanceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetSuppressContacts", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSuppressContacts(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetSuppressContacts", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSuppressContactsAsync(ByVal pXMLParams As String)
            Me.GetSuppressContactsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSuppressContactsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetSuppressContactsOperationCompleted Is Nothing) Then
                Me.GetSuppressContactsOperationCompleted = AddressOf Me.OnGetSuppressContactsOperationCompleted
            End If
            Me.InvokeAsync("GetSuppressContacts", New Object() {pXMLParams}, Me.GetSuppressContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSuppressContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSuppressContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSuppressContactsCompleted(Me, New GetSuppressContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetNearestOrganisation", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNearestOrganisation(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetNearestOrganisation", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNearestOrganisationAsync(ByVal pXMLParams As String)
            Me.GetNearestOrganisationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNearestOrganisationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetNearestOrganisationOperationCompleted Is Nothing) Then
                Me.GetNearestOrganisationOperationCompleted = AddressOf Me.OnGetNearestOrganisationOperationCompleted
            End If
            Me.InvokeAsync("GetNearestOrganisation", New Object() {pXMLParams}, Me.GetNearestOrganisationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNearestOrganisationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNearestOrganisationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNearestOrganisationCompleted(Me, New GetNearestOrganisationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetPAFAddress", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPAFAddress(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetPAFAddress", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPAFAddressAsync(ByVal pXMLParams As String)
            Me.GetPAFAddressAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPAFAddressAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetPAFAddressOperationCompleted Is Nothing) Then
                Me.GetPAFAddressOperationCompleted = AddressOf Me.OnGetPAFAddressOperationCompleted
            End If
            Me.InvokeAsync("GetPAFAddress", New Object() {pXMLParams}, Me.GetPAFAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPAFAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPAFAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPAFAddressCompleted(Me, New GetPAFAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetPAFPostcode", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPAFPostcode(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetPAFPostcode", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPAFPostcodeAsync(ByVal pXMLParams As String)
            Me.GetPAFPostcodeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPAFPostcodeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetPAFPostcodeOperationCompleted Is Nothing) Then
                Me.GetPAFPostcodeOperationCompleted = AddressOf Me.OnGetPAFPostcodeOperationCompleted
            End If
            Me.InvokeAsync("GetPAFPostcode", New Object() {pXMLParams}, Me.GetPAFPostcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPAFPostcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPAFPostcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPAFPostcodeCompleted(Me, New GetPAFPostcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetStandardDocumentFile", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStandardDocumentFile(ByVal pXMLParams As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetStandardDocumentFile", New Object() {pXMLParams})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStandardDocumentFileAsync(ByVal pXMLParams As String)
            Me.GetStandardDocumentFileAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStandardDocumentFileAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetStandardDocumentFileOperationCompleted Is Nothing) Then
                Me.GetStandardDocumentFileOperationCompleted = AddressOf Me.OnGetStandardDocumentFileOperationCompleted
            End If
            Me.InvokeAsync("GetStandardDocumentFile", New Object() {pXMLParams}, Me.GetStandardDocumentFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStandardDocumentFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStandardDocumentFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStandardDocumentFileCompleted(Me, New GetStandardDocumentFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectUserHistory", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectUserHistory(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectUserHistory", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectUserHistoryAsync(ByVal pXMLParams As String)
            Me.SelectUserHistoryAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectUserHistoryAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectUserHistoryOperationCompleted Is Nothing) Then
                Me.SelectUserHistoryOperationCompleted = AddressOf Me.OnSelectUserHistoryOperationCompleted
            End If
            Me.InvokeAsync("SelectUserHistory", New Object() {pXMLParams}, Me.SelectUserHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectUserHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectUserHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectUserHistoryCompleted(Me, New SelectUserHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UniservPostCheck", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UniservPostCheck(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UniservPostCheck", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UniservPostCheckAsync(ByVal pXMLParams As String)
            Me.UniservPostCheckAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UniservPostCheckAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UniservPostCheckOperationCompleted Is Nothing) Then
                Me.UniservPostCheckOperationCompleted = AddressOf Me.OnUniservPostCheckOperationCompleted
            End If
            Me.InvokeAsync("UniservPostCheck", New Object() {pXMLParams}, Me.UniservPostCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnUniservPostCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.UniservPostCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UniservPostCheckCompleted(Me, New UniservPostCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateDocumentFile", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDocumentFile(ByVal pXMLParams As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pBinaryData() As Byte) As String
            Dim results() As Object = Me.Invoke("UpdateDocumentFile", New Object() {pXMLParams, pBinaryData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDocumentFileAsync(ByVal pXMLParams As String, ByVal pBinaryData() As Byte)
            Me.UpdateDocumentFileAsync(pXMLParams, pBinaryData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDocumentFileAsync(ByVal pXMLParams As String, ByVal pBinaryData() As Byte, ByVal userState As Object)
            If (Me.UpdateDocumentFileOperationCompleted Is Nothing) Then
                Me.UpdateDocumentFileOperationCompleted = AddressOf Me.OnUpdateDocumentFileOperationCompleted
            End If
            Me.InvokeAsync("UpdateDocumentFile", New Object() {pXMLParams, pBinaryData}, Me.UpdateDocumentFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDocumentFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDocumentFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDocumentFileCompleted(Me, New UpdateDocumentFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateStandardDocumentFile", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateStandardDocumentFile(ByVal pXMLParams As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pBinaryData() As Byte) As String
            Dim results() As Object = Me.Invoke("UpdateStandardDocumentFile", New Object() {pXMLParams, pBinaryData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateStandardDocumentFileAsync(ByVal pXMLParams As String, ByVal pBinaryData() As Byte)
            Me.UpdateStandardDocumentFileAsync(pXMLParams, pBinaryData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateStandardDocumentFileAsync(ByVal pXMLParams As String, ByVal pBinaryData() As Byte, ByVal userState As Object)
            If (Me.UpdateStandardDocumentFileOperationCompleted Is Nothing) Then
                Me.UpdateStandardDocumentFileOperationCompleted = AddressOf Me.OnUpdateStandardDocumentFileOperationCompleted
            End If
            Me.InvokeAsync("UpdateStandardDocumentFile", New Object() {pXMLParams, pBinaryData}, Me.UpdateStandardDocumentFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateStandardDocumentFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateStandardDocumentFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateStandardDocumentFileCompleted(Me, New UpdateStandardDocumentFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMailingDocumentFile", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMailingDocumentFile(ByVal pXMLParams As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pBinaryData() As Byte) As String
            Dim results() As Object = Me.Invoke("UpdateMailingDocumentFile", New Object() {pXMLParams, pBinaryData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMailingDocumentFileAsync(ByVal pXMLParams As String, ByVal pBinaryData() As Byte)
            Me.UpdateMailingDocumentFileAsync(pXMLParams, pBinaryData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMailingDocumentFileAsync(ByVal pXMLParams As String, ByVal pBinaryData() As Byte, ByVal userState As Object)
            If (Me.UpdateMailingDocumentFileOperationCompleted Is Nothing) Then
                Me.UpdateMailingDocumentFileOperationCompleted = AddressOf Me.OnUpdateMailingDocumentFileOperationCompleted
            End If
            Me.InvokeAsync("UpdateMailingDocumentFile", New Object() {pXMLParams, pBinaryData}, Me.UpdateMailingDocumentFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMailingDocumentFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMailingDocumentFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMailingDocumentFileCompleted(Me, New UpdateMailingDocumentFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetOwnershipUsers", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOwnershipUsers(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetOwnershipUsers", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOwnershipUsersAsync(ByVal pXMLParams As String)
            Me.GetOwnershipUsersAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOwnershipUsersAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetOwnershipUsersOperationCompleted Is Nothing) Then
                Me.GetOwnershipUsersOperationCompleted = AddressOf Me.OnGetOwnershipUsersOperationCompleted
            End If
            Me.InvokeAsync("GetOwnershipUsers", New Object() {pXMLParams}, Me.GetOwnershipUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOwnershipUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOwnershipUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOwnershipUsersCompleted(Me, New GetOwnershipUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetOwnershipGroupInformation", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOwnershipGroupInformation(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetOwnershipGroupInformation", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOwnershipGroupInformationAsync(ByVal pXMLParams As String)
            Me.GetOwnershipGroupInformationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOwnershipGroupInformationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetOwnershipGroupInformationOperationCompleted Is Nothing) Then
                Me.GetOwnershipGroupInformationOperationCompleted = AddressOf Me.OnGetOwnershipGroupInformationOperationCompleted
            End If
            Me.InvokeAsync("GetOwnershipGroupInformation", New Object() {pXMLParams}, Me.GetOwnershipGroupInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOwnershipGroupInformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOwnershipGroupInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOwnershipGroupInformationCompleted(Me, New GetOwnershipGroupInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetOwnershipUserInformation", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOwnershipUserInformation(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetOwnershipUserInformation", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOwnershipUserInformationAsync(ByVal pXMLParams As String)
            Me.GetOwnershipUserInformationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOwnershipUserInformationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetOwnershipUserInformationOperationCompleted Is Nothing) Then
                Me.GetOwnershipUserInformationOperationCompleted = AddressOf Me.OnGetOwnershipUserInformationOperationCompleted
            End If
            Me.InvokeAsync("GetOwnershipUserInformation", New Object() {pXMLParams}, Me.GetOwnershipUserInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOwnershipUserInformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOwnershipUserInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOwnershipUserInformationCompleted(Me, New GetOwnershipUserInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetOwnershipDepartmentInformation", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOwnershipDepartmentInformation(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetOwnershipDepartmentInformation", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOwnershipDepartmentInformationAsync(ByVal pXMLParams As String)
            Me.GetOwnershipDepartmentInformationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOwnershipDepartmentInformationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetOwnershipDepartmentInformationOperationCompleted Is Nothing) Then
                Me.GetOwnershipDepartmentInformationOperationCompleted = AddressOf Me.OnGetOwnershipDepartmentInformationOperationCompleted
            End If
            Me.InvokeAsync("GetOwnershipDepartmentInformation", New Object() {pXMLParams}, Me.GetOwnershipDepartmentInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOwnershipDepartmentInformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOwnershipDepartmentInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOwnershipDepartmentInformationCompleted(Me, New GetOwnershipDepartmentInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetPaymentPlanAutoPayDate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPaymentPlanAutoPayDate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetPaymentPlanAutoPayDate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPaymentPlanAutoPayDateAsync(ByVal pXMLParams As String)
            Me.GetPaymentPlanAutoPayDateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPaymentPlanAutoPayDateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetPaymentPlanAutoPayDateOperationCompleted Is Nothing) Then
                Me.GetPaymentPlanAutoPayDateOperationCompleted = AddressOf Me.OnGetPaymentPlanAutoPayDateOperationCompleted
            End If
            Me.InvokeAsync("GetPaymentPlanAutoPayDate", New Object() {pXMLParams}, Me.GetPaymentPlanAutoPayDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPaymentPlanAutoPayDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPaymentPlanAutoPayDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPaymentPlanAutoPayDateCompleted(Me, New GetPaymentPlanAutoPayDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CheckIbanNumber", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckIbanNumber(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CheckIbanNumber", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckIbanNumberAsync(ByVal pXMLParams As String)
            Me.CheckIbanNumberAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckIbanNumberAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CheckIbanNumberOperationCompleted Is Nothing) Then
                Me.CheckIbanNumberOperationCompleted = AddressOf Me.OnCheckIbanNumberOperationCompleted
            End If
            Me.InvokeAsync("CheckIbanNumber", New Object() {pXMLParams}, Me.CheckIbanNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckIbanNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckIbanNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckIbanNumberCompleted(Me, New CheckIbanNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddRegisteredUser", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddRegisteredUser(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddRegisteredUser", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddRegisteredUserAsync(ByVal pXMLParams As String)
            Me.AddRegisteredUserAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddRegisteredUserAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddRegisteredUserOperationCompleted Is Nothing) Then
                Me.AddRegisteredUserOperationCompleted = AddressOf Me.OnAddRegisteredUserOperationCompleted
            End If
            Me.InvokeAsync("AddRegisteredUser", New Object() {pXMLParams}, Me.AddRegisteredUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddRegisteredUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddRegisteredUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddRegisteredUserCompleted(Me, New AddRegisteredUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetAvailableDatabases", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAvailableDatabases(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetAvailableDatabases", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAvailableDatabasesAsync(ByVal pXMLParams As String)
            Me.GetAvailableDatabasesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAvailableDatabasesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetAvailableDatabasesOperationCompleted Is Nothing) Then
                Me.GetAvailableDatabasesOperationCompleted = AddressOf Me.OnGetAvailableDatabasesOperationCompleted
            End If
            Me.InvokeAsync("GetAvailableDatabases", New Object() {pXMLParams}, Me.GetAvailableDatabasesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAvailableDatabasesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAvailableDatabasesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAvailableDatabasesCompleted(Me, New GetAvailableDatabasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetClientCode", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientCode(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetClientCode", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientCodeAsync(ByVal pXMLParams As String)
            Me.GetClientCodeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientCodeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetClientCodeOperationCompleted Is Nothing) Then
                Me.GetClientCodeOperationCompleted = AddressOf Me.OnGetClientCodeOperationCompleted
            End If
            Me.InvokeAsync("GetClientCode", New Object() {pXMLParams}, Me.GetClientCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientCodeCompleted(Me, New GetClientCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetVersionNumber", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVersionNumber() As String
            Dim results() As Object = Me.Invoke("GetVersionNumber", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVersionNumberAsync()
            Me.GetVersionNumberAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVersionNumberAsync(ByVal userState As Object)
            If (Me.GetVersionNumberOperationCompleted Is Nothing) Then
                Me.GetVersionNumberOperationCompleted = AddressOf Me.OnGetVersionNumberOperationCompleted
            End If
            Me.InvokeAsync("GetVersionNumber", New Object(-1) {}, Me.GetVersionNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVersionNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVersionNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVersionNumberCompleted(Me, New GetVersionNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/Login", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Login(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("Login", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal pXMLParams As String)
            Me.LoginAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.LoginOperationCompleted Is Nothing) Then
                Me.LoginOperationCompleted = AddressOf Me.OnLoginOperationCompleted
            End If
            Me.InvokeAsync("Login", New Object() {pXMLParams}, Me.LoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginCompleted(Me, New LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/LoginRegisteredUser", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoginRegisteredUser(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("LoginRegisteredUser", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginRegisteredUserAsync(ByVal pXMLParams As String)
            Me.LoginRegisteredUserAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginRegisteredUserAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.LoginRegisteredUserOperationCompleted Is Nothing) Then
                Me.LoginRegisteredUserOperationCompleted = AddressOf Me.OnLoginRegisteredUserOperationCompleted
            End If
            Me.InvokeAsync("LoginRegisteredUser", New Object() {pXMLParams}, Me.LoginRegisteredUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginRegisteredUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginRegisteredUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginRegisteredUserCompleted(Me, New LoginRegisteredUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/Logout", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Logout(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("Logout", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync(ByVal pXMLParams As String)
            Me.LogoutAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.LogoutOperationCompleted Is Nothing) Then
                Me.LogoutOperationCompleted = AddressOf Me.OnLogoutOperationCompleted
            End If
            Me.InvokeAsync("Logout", New Object() {pXMLParams}, Me.LogoutOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogoutOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogoutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogoutCompleted(Me, New LogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateRegisteredUser", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRegisteredUser(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateRegisteredUser", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRegisteredUserAsync(ByVal pXMLParams As String)
            Me.UpdateRegisteredUserAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRegisteredUserAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateRegisteredUserOperationCompleted Is Nothing) Then
                Me.UpdateRegisteredUserOperationCompleted = AddressOf Me.OnUpdateRegisteredUserOperationCompleted
            End If
            Me.InvokeAsync("UpdateRegisteredUser", New Object() {pXMLParams}, Me.UpdateRegisteredUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRegisteredUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRegisteredUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRegisteredUserCompleted(Me, New UpdateRegisteredUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetApplicationControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetApplicationControls(ByVal pType As TaskJobTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetApplicationControls", New Object() {pType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetApplicationControlsAsync(ByVal pType As TaskJobTypes, ByVal pXMLParams As String)
            Me.GetApplicationControlsAsync(pType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetApplicationControlsAsync(ByVal pType As TaskJobTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetApplicationControlsOperationCompleted Is Nothing) Then
                Me.GetApplicationControlsOperationCompleted = AddressOf Me.OnGetApplicationControlsOperationCompleted
            End If
            Me.InvokeAsync("GetApplicationControls", New Object() {pType, pXMLParams}, Me.GetApplicationControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetApplicationControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetApplicationControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetApplicationControlsCompleted(Me, New GetApplicationControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetFunctionControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFunctionControls(ByVal pType As FunctionParameterTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetFunctionControls", New Object() {pType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFunctionControlsAsync(ByVal pType As FunctionParameterTypes, ByVal pXMLParams As String)
            Me.GetFunctionControlsAsync(pType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFunctionControlsAsync(ByVal pType As FunctionParameterTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetFunctionControlsOperationCompleted Is Nothing) Then
                Me.GetFunctionControlsOperationCompleted = AddressOf Me.OnGetFunctionControlsOperationCompleted
            End If
            Me.InvokeAsync("GetFunctionControls", New Object() {pType, pXMLParams}, Me.GetFunctionControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFunctionControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFunctionControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFunctionControlsCompleted(Me, New GetFunctionControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetTableMaintenanceControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTableMaintenanceControls(ByVal pEditMode As XMLTableMaintenanceMode, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetTableMaintenanceControls", New Object() {pEditMode, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTableMaintenanceControlsAsync(ByVal pEditMode As XMLTableMaintenanceMode, ByVal pXMLParams As String)
            Me.GetTableMaintenanceControlsAsync(pEditMode, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTableMaintenanceControlsAsync(ByVal pEditMode As XMLTableMaintenanceMode, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetTableMaintenanceControlsOperationCompleted Is Nothing) Then
                Me.GetTableMaintenanceControlsOperationCompleted = AddressOf Me.OnGetTableMaintenanceControlsOperationCompleted
            End If
            Me.InvokeAsync("GetTableMaintenanceControls", New Object() {pEditMode, pXMLParams}, Me.GetTableMaintenanceControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTableMaintenanceControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTableMaintenanceControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTableMaintenanceControlsCompleted(Me, New GetTableMaintenanceControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetReportControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReportControls(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetReportControls", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportControlsAsync(ByVal pXMLParams As String)
            Me.GetReportControlsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportControlsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetReportControlsOperationCompleted Is Nothing) Then
                Me.GetReportControlsOperationCompleted = AddressOf Me.OnGetReportControlsOperationCompleted
            End If
            Me.InvokeAsync("GetReportControls", New Object() {pXMLParams}, Me.GetReportControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportControlsCompleted(Me, New GetReportControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/MoveExternalDocuments", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MoveExternalDocuments(ByVal pXMLParms As String, ByVal pDocuments() As Integer) As String
            Dim results() As Object = Me.Invoke("MoveExternalDocuments", New Object() {pXMLParms, pDocuments})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MoveExternalDocumentsAsync(ByVal pXMLParms As String, ByVal pDocuments() As Integer)
            Me.MoveExternalDocumentsAsync(pXMLParms, pDocuments, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MoveExternalDocumentsAsync(ByVal pXMLParms As String, ByVal pDocuments() As Integer, ByVal userState As Object)
            If (Me.MoveExternalDocumentsOperationCompleted Is Nothing) Then
                Me.MoveExternalDocumentsOperationCompleted = AddressOf Me.OnMoveExternalDocumentsOperationCompleted
            End If
            Me.InvokeAsync("MoveExternalDocuments", New Object() {pXMLParms, pDocuments}, Me.MoveExternalDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnMoveExternalDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.MoveExternalDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MoveExternalDocumentsCompleted(Me, New MoveExternalDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DuplicateSurvey", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DuplicateSurvey(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DuplicateSurvey", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DuplicateSurveyAsync(ByVal pXMLParams As String)
            Me.DuplicateSurveyAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DuplicateSurveyAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DuplicateSurveyOperationCompleted Is Nothing) Then
                Me.DuplicateSurveyOperationCompleted = AddressOf Me.OnDuplicateSurveyOperationCompleted
            End If
            Me.InvokeAsync("DuplicateSurvey", New Object() {pXMLParams}, Me.DuplicateSurveyOperationCompleted, userState)
        End Sub
        
        Private Sub OnDuplicateSurveyOperationCompleted(ByVal arg As Object)
            If (Not (Me.DuplicateSurveyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DuplicateSurveyCompleted(Me, New DuplicateSurveyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCpdObjective", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCpdObjective(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCpdObjective", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCpdObjectiveAsync(ByVal pXMLParams As String)
            Me.AddCpdObjectiveAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCpdObjectiveAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCpdObjectiveOperationCompleted Is Nothing) Then
                Me.AddCpdObjectiveOperationCompleted = AddressOf Me.OnAddCpdObjectiveOperationCompleted
            End If
            Me.InvokeAsync("AddCpdObjective", New Object() {pXMLParams}, Me.AddCpdObjectiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCpdObjectiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCpdObjectiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCpdObjectiveCompleted(Me, New AddCpdObjectiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCpdObjective", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCpdObjective(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCpdObjective", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCpdObjectiveAsync(ByVal pXMLParams As String)
            Me.UpdateCpdObjectiveAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCpdObjectiveAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCpdObjectiveOperationCompleted Is Nothing) Then
                Me.UpdateCpdObjectiveOperationCompleted = AddressOf Me.OnUpdateCpdObjectiveOperationCompleted
            End If
            Me.InvokeAsync("UpdateCpdObjective", New Object() {pXMLParams}, Me.UpdateCpdObjectiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCpdObjectiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCpdObjectiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCpdObjectiveCompleted(Me, New UpdateCpdObjectiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCpdObjective", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCpdObjective(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCpdObjective", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCpdObjectiveAsync(ByVal pXMLParams As String)
            Me.DeleteCpdObjectiveAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCpdObjectiveAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCpdObjectiveOperationCompleted Is Nothing) Then
                Me.DeleteCpdObjectiveOperationCompleted = AddressOf Me.OnDeleteCpdObjectiveOperationCompleted
            End If
            Me.InvokeAsync("DeleteCpdObjective", New Object() {pXMLParams}, Me.DeleteCpdObjectiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCpdObjectiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCpdObjectiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCpdObjectiveCompleted(Me, New DeleteCpdObjectiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddWebItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddWebItem(ByVal pType As XMLWebDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddWebItem", New Object() {pType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddWebItemAsync(ByVal pType As XMLWebDataSelectionTypes, ByVal pXMLParams As String)
            Me.AddWebItemAsync(pType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddWebItemAsync(ByVal pType As XMLWebDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddWebItemOperationCompleted Is Nothing) Then
                Me.AddWebItemOperationCompleted = AddressOf Me.OnAddWebItemOperationCompleted
            End If
            Me.InvokeAsync("AddWebItem", New Object() {pType, pXMLParams}, Me.AddWebItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddWebItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddWebItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddWebItemCompleted(Me, New AddWebItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateWebItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWebItem(ByVal pType As XMLWebDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateWebItem", New Object() {pType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWebItemAsync(ByVal pType As XMLWebDataSelectionTypes, ByVal pXMLParams As String)
            Me.UpdateWebItemAsync(pType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWebItemAsync(ByVal pType As XMLWebDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateWebItemOperationCompleted Is Nothing) Then
                Me.UpdateWebItemOperationCompleted = AddressOf Me.OnUpdateWebItemOperationCompleted
            End If
            Me.InvokeAsync("UpdateWebItem", New Object() {pType, pXMLParams}, Me.UpdateWebItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWebItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWebItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWebItemCompleted(Me, New UpdateWebItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetWebControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWebControls(ByVal pType As WebControlTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetWebControls", New Object() {pType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWebControlsAsync(ByVal pType As WebControlTypes, ByVal pXMLParams As String)
            Me.GetWebControlsAsync(pType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWebControlsAsync(ByVal pType As WebControlTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetWebControlsOperationCompleted Is Nothing) Then
                Me.GetWebControlsOperationCompleted = AddressOf Me.OnGetWebControlsOperationCompleted
            End If
            Me.InvokeAsync("GetWebControls", New Object() {pType, pXMLParams}, Me.GetWebControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWebControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWebControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWebControlsCompleted(Me, New GetWebControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetWebInfo", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWebInfo(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetWebInfo", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWebInfoAsync(ByVal pXMLParams As String)
            Me.GetWebInfoAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWebInfoAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetWebInfoOperationCompleted Is Nothing) Then
                Me.GetWebInfoOperationCompleted = AddressOf Me.OnGetWebInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWebInfo", New Object() {pXMLParams}, Me.GetWebInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWebInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWebInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWebInfoCompleted(Me, New GetWebInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetWebMenus", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWebMenus(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetWebMenus", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWebMenusAsync(ByVal pXMLParams As String)
            Me.GetWebMenusAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWebMenusAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetWebMenusOperationCompleted Is Nothing) Then
                Me.GetWebMenusOperationCompleted = AddressOf Me.OnGetWebMenusOperationCompleted
            End If
            Me.InvokeAsync("GetWebMenus", New Object() {pXMLParams}, Me.GetWebMenusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWebMenusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWebMenusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWebMenusCompleted(Me, New GetWebMenusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetWebPageInfo", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWebPageInfo(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetWebPageInfo", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWebPageInfoAsync(ByVal pXMLParams As String)
            Me.GetWebPageInfoAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWebPageInfoAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetWebPageInfoOperationCompleted Is Nothing) Then
                Me.GetWebPageInfoOperationCompleted = AddressOf Me.OnGetWebPageInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWebPageInfo", New Object() {pXMLParams}, Me.GetWebPageInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWebPageInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWebPageInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWebPageInfoCompleted(Me, New GetWebPageInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetWebPageItems", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWebPageItems(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetWebPageItems", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWebPageItemsAsync(ByVal pXMLParams As String)
            Me.GetWebPageItemsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWebPageItemsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetWebPageItemsOperationCompleted Is Nothing) Then
                Me.GetWebPageItemsOperationCompleted = AddressOf Me.OnGetWebPageItemsOperationCompleted
            End If
            Me.InvokeAsync("GetWebPageItems", New Object() {pXMLParams}, Me.GetWebPageItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWebPageItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWebPageItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWebPageItemsCompleted(Me, New GetWebPageItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCurrencyRate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCurrencyRate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCurrencyRate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCurrencyRateAsync(ByVal pXMLParams As String)
            Me.AddCurrencyRateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCurrencyRateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCurrencyRateOperationCompleted Is Nothing) Then
                Me.AddCurrencyRateOperationCompleted = AddressOf Me.OnAddCurrencyRateOperationCompleted
            End If
            Me.InvokeAsync("AddCurrencyRate", New Object() {pXMLParams}, Me.AddCurrencyRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCurrencyRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCurrencyRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCurrencyRateCompleted(Me, New AddCurrencyRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectTelemarketingContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectTelemarketingContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectTelemarketingContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectTelemarketingContactAsync(ByVal pXMLParams As String)
            Me.SelectTelemarketingContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectTelemarketingContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectTelemarketingContactOperationCompleted Is Nothing) Then
                Me.SelectTelemarketingContactOperationCompleted = AddressOf Me.OnSelectTelemarketingContactOperationCompleted
            End If
            Me.InvokeAsync("SelectTelemarketingContact", New Object() {pXMLParams}, Me.SelectTelemarketingContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectTelemarketingContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectTelemarketingContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectTelemarketingContactCompleted(Me, New SelectTelemarketingContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateTelemarketingContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTelemarketingContact(ByVal pType As TelemarketingUpdateType, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateTelemarketingContact", New Object() {pType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTelemarketingContactAsync(ByVal pType As TelemarketingUpdateType, ByVal pXMLParams As String)
            Me.UpdateTelemarketingContactAsync(pType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTelemarketingContactAsync(ByVal pType As TelemarketingUpdateType, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateTelemarketingContactOperationCompleted Is Nothing) Then
                Me.UpdateTelemarketingContactOperationCompleted = AddressOf Me.OnUpdateTelemarketingContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateTelemarketingContact", New Object() {pType, pXMLParams}, Me.UpdateTelemarketingContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTelemarketingContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTelemarketingContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTelemarketingContactCompleted(Me, New UpdateTelemarketingContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventDelegate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventDelegate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventDelegate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventDelegateAsync(ByVal pXMLParams As String)
            Me.AddEventDelegateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventDelegateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventDelegateOperationCompleted Is Nothing) Then
                Me.AddEventDelegateOperationCompleted = AddressOf Me.OnAddEventDelegateOperationCompleted
            End If
            Me.InvokeAsync("AddEventDelegate", New Object() {pXMLParams}, Me.AddEventDelegateOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventDelegateOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventDelegateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventDelegateCompleted(Me, New AddEventDelegateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventDelegate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventDelegate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventDelegate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventDelegateAsync(ByVal pXMLParams As String)
            Me.DeleteEventDelegateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventDelegateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventDelegateOperationCompleted Is Nothing) Then
                Me.DeleteEventDelegateOperationCompleted = AddressOf Me.OnDeleteEventDelegateOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventDelegate", New Object() {pXMLParams}, Me.DeleteEventDelegateOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventDelegateOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventDelegateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventDelegateCompleted(Me, New DeleteEventDelegateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventDelegate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventDelegate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventDelegate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventDelegateAsync(ByVal pXMLParams As String)
            Me.UpdateEventDelegateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventDelegateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventDelegateOperationCompleted Is Nothing) Then
                Me.UpdateEventDelegateOperationCompleted = AddressOf Me.OnUpdateEventDelegateOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventDelegate", New Object() {pXMLParams}, Me.UpdateEventDelegateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventDelegateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventDelegateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventDelegateCompleted(Me, New UpdateEventDelegateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectConfigValue", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectConfigValue(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectConfigValue", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectConfigValueAsync(ByVal pXMLParams As String)
            Me.SelectConfigValueAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectConfigValueAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectConfigValueOperationCompleted Is Nothing) Then
                Me.SelectConfigValueOperationCompleted = AddressOf Me.OnSelectConfigValueOperationCompleted
            End If
            Me.InvokeAsync("SelectConfigValue", New Object() {pXMLParams}, Me.SelectConfigValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectConfigValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectConfigValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectConfigValueCompleted(Me, New SelectConfigValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectCriteriaSetSteps", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectCriteriaSetSteps(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectCriteriaSetSteps", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectCriteriaSetStepsAsync(ByVal pXMLParams As String)
            Me.SelectCriteriaSetStepsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectCriteriaSetStepsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectCriteriaSetStepsOperationCompleted Is Nothing) Then
                Me.SelectCriteriaSetStepsOperationCompleted = AddressOf Me.OnSelectCriteriaSetStepsOperationCompleted
            End If
            Me.InvokeAsync("SelectCriteriaSetSteps", New Object() {pXMLParams}, Me.SelectCriteriaSetStepsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectCriteriaSetStepsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectCriteriaSetStepsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectCriteriaSetStepsCompleted(Me, New SelectCriteriaSetStepsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectCovenantData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectCovenantData(ByVal pSelectDataType As XMLCovenantDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectCovenantData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectCovenantDataAsync(ByVal pSelectDataType As XMLCovenantDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectCovenantDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectCovenantDataAsync(ByVal pSelectDataType As XMLCovenantDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectCovenantDataOperationCompleted Is Nothing) Then
                Me.SelectCovenantDataOperationCompleted = AddressOf Me.OnSelectCovenantDataOperationCompleted
            End If
            Me.InvokeAsync("SelectCovenantData", New Object() {pSelectDataType, pXMLParams}, Me.SelectCovenantDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectCovenantDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectCovenantDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectCovenantDataCompleted(Me, New SelectCovenantDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectDashboardData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectDashboardData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectDashboardData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectDashboardDataAsync(ByVal pXMLParams As String)
            Me.SelectDashboardDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectDashboardDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectDashboardDataOperationCompleted Is Nothing) Then
                Me.SelectDashboardDataOperationCompleted = AddressOf Me.OnSelectDashboardDataOperationCompleted
            End If
            Me.InvokeAsync("SelectDashboardData", New Object() {pXMLParams}, Me.SelectDashboardDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectDashboardDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectDashboardDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectDashboardDataCompleted(Me, New SelectDashboardDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectDelegateData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectDelegateData(ByVal pSelectDataType As XMLDelegateDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectDelegateData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectDelegateDataAsync(ByVal pSelectDataType As XMLDelegateDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectDelegateDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectDelegateDataAsync(ByVal pSelectDataType As XMLDelegateDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectDelegateDataOperationCompleted Is Nothing) Then
                Me.SelectDelegateDataOperationCompleted = AddressOf Me.OnSelectDelegateDataOperationCompleted
            End If
            Me.InvokeAsync("SelectDelegateData", New Object() {pSelectDataType, pXMLParams}, Me.SelectDelegateDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectDelegateDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectDelegateDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectDelegateDataCompleted(Me, New SelectDelegateDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectDirectDebitData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectDirectDebitData(ByVal pSelectDataType As XMLDirectDebitDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectDirectDebitData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectDirectDebitDataAsync(ByVal pSelectDataType As XMLDirectDebitDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectDirectDebitDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectDirectDebitDataAsync(ByVal pSelectDataType As XMLDirectDebitDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectDirectDebitDataOperationCompleted Is Nothing) Then
                Me.SelectDirectDebitDataOperationCompleted = AddressOf Me.OnSelectDirectDebitDataOperationCompleted
            End If
            Me.InvokeAsync("SelectDirectDebitData", New Object() {pSelectDataType, pXMLParams}, Me.SelectDirectDebitDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectDirectDebitDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectDirectDebitDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectDirectDebitDataCompleted(Me, New SelectDirectDebitDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectDocumentData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectDocumentData(ByVal pSelectDataType As XMLDocumentDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectDocumentData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectDocumentDataAsync(ByVal pSelectDataType As XMLDocumentDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectDocumentDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectDocumentDataAsync(ByVal pSelectDataType As XMLDocumentDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectDocumentDataOperationCompleted Is Nothing) Then
                Me.SelectDocumentDataOperationCompleted = AddressOf Me.OnSelectDocumentDataOperationCompleted
            End If
            Me.InvokeAsync("SelectDocumentData", New Object() {pSelectDataType, pXMLParams}, Me.SelectDocumentDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectDocumentDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectDocumentDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectDocumentDataCompleted(Me, New SelectDocumentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectEventData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectEventData(ByVal pSelectDataType As XMLEventDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectEventData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectEventDataAsync(ByVal pSelectDataType As XMLEventDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectEventDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectEventDataAsync(ByVal pSelectDataType As XMLEventDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectEventDataOperationCompleted Is Nothing) Then
                Me.SelectEventDataOperationCompleted = AddressOf Me.OnSelectEventDataOperationCompleted
            End If
            Me.InvokeAsync("SelectEventData", New Object() {pSelectDataType, pXMLParams}, Me.SelectEventDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectEventDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectEventDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectEventDataCompleted(Me, New SelectEventDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectJobProcessorsData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectJobProcessorsData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectJobProcessorsData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectJobProcessorsDataAsync(ByVal pXMLParams As String)
            Me.SelectJobProcessorsDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectJobProcessorsDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectJobProcessorsDataOperationCompleted Is Nothing) Then
                Me.SelectJobProcessorsDataOperationCompleted = AddressOf Me.OnSelectJobProcessorsDataOperationCompleted
            End If
            Me.InvokeAsync("SelectJobProcessorsData", New Object() {pXMLParams}, Me.SelectJobProcessorsDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectJobProcessorsDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectJobProcessorsDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectJobProcessorsDataCompleted(Me, New SelectJobProcessorsDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectJobScheduleData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectJobScheduleData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectJobScheduleData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectJobScheduleDataAsync(ByVal pXMLParams As String)
            Me.SelectJobScheduleDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectJobScheduleDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectJobScheduleDataOperationCompleted Is Nothing) Then
                Me.SelectJobScheduleDataOperationCompleted = AddressOf Me.OnSelectJobScheduleDataOperationCompleted
            End If
            Me.InvokeAsync("SelectJobScheduleData", New Object() {pXMLParams}, Me.SelectJobScheduleDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectJobScheduleDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectJobScheduleDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectJobScheduleDataCompleted(Me, New SelectJobScheduleDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/InitListManager", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InitListManager(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("InitListManager", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InitListManagerAsync(ByVal pXMLParams As String)
            Me.InitListManagerAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InitListManagerAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.InitListManagerOperationCompleted Is Nothing) Then
                Me.InitListManagerOperationCompleted = AddressOf Me.OnInitListManagerOperationCompleted
            End If
            Me.InvokeAsync("InitListManager", New Object() {pXMLParams}, Me.InitListManagerOperationCompleted, userState)
        End Sub
        
        Private Sub OnInitListManagerOperationCompleted(ByVal arg As Object)
            If (Not (Me.InitListManagerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InitListManagerCompleted(Me, New InitListManagerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/TerminateListManager", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TerminateListManager(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("TerminateListManager", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TerminateListManagerAsync(ByVal pXMLParams As String)
            Me.TerminateListManagerAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TerminateListManagerAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.TerminateListManagerOperationCompleted Is Nothing) Then
                Me.TerminateListManagerOperationCompleted = AddressOf Me.OnTerminateListManagerOperationCompleted
            End If
            Me.InvokeAsync("TerminateListManager", New Object() {pXMLParams}, Me.TerminateListManagerOperationCompleted, userState)
        End Sub
        
        Private Sub OnTerminateListManagerOperationCompleted(ByVal arg As Object)
            If (Not (Me.TerminateListManagerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TerminateListManagerCompleted(Me, New TerminateListManagerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectListManagerData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectListManagerData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectListManagerData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectListManagerDataAsync(ByVal pXMLParams As String)
            Me.SelectListManagerDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectListManagerDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectListManagerDataOperationCompleted Is Nothing) Then
                Me.SelectListManagerDataOperationCompleted = AddressOf Me.OnSelectListManagerDataOperationCompleted
            End If
            Me.InvokeAsync("SelectListManagerData", New Object() {pXMLParams}, Me.SelectListManagerDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectListManagerDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectListManagerDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectListManagerDataCompleted(Me, New SelectListManagerDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectListManagerCount", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectListManagerCount(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectListManagerCount", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectListManagerCountAsync(ByVal pXMLParams As String)
            Me.SelectListManagerCountAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectListManagerCountAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectListManagerCountOperationCompleted Is Nothing) Then
                Me.SelectListManagerCountOperationCompleted = AddressOf Me.OnSelectListManagerCountOperationCompleted
            End If
            Me.InvokeAsync("SelectListManagerCount", New Object() {pXMLParams}, Me.SelectListManagerCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectListManagerCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectListManagerCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectListManagerCountCompleted(Me, New SelectListManagerCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectGiftAidData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectGiftAidData(ByVal pSelectDataType As XMLGiftAidDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectGiftAidData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectGiftAidDataAsync(ByVal pSelectDataType As XMLGiftAidDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectGiftAidDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectGiftAidDataAsync(ByVal pSelectDataType As XMLGiftAidDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectGiftAidDataOperationCompleted Is Nothing) Then
                Me.SelectGiftAidDataOperationCompleted = AddressOf Me.OnSelectGiftAidDataOperationCompleted
            End If
            Me.InvokeAsync("SelectGiftAidData", New Object() {pSelectDataType, pXMLParams}, Me.SelectGiftAidDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectGiftAidDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectGiftAidDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectGiftAidDataCompleted(Me, New SelectGiftAidDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectFundraisingEventData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectFundraisingEventData(ByVal pSelectDataType As XMLFundraisingEventDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectFundraisingEventData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectFundraisingEventDataAsync(ByVal pSelectDataType As XMLFundraisingEventDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectFundraisingEventDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectFundraisingEventDataAsync(ByVal pSelectDataType As XMLFundraisingEventDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectFundraisingEventDataOperationCompleted Is Nothing) Then
                Me.SelectFundraisingEventDataOperationCompleted = AddressOf Me.OnSelectFundraisingEventDataOperationCompleted
            End If
            Me.InvokeAsync("SelectFundraisingEventData", New Object() {pSelectDataType, pXMLParams}, Me.SelectFundraisingEventDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectFundraisingEventDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectFundraisingEventDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectFundraisingEventDataCompleted(Me, New SelectFundraisingEventDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectFundraisingRequestData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectFundraisingRequestData(ByVal pSelectDataType As XMLFundraisingDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectFundraisingRequestData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectFundraisingRequestDataAsync(ByVal pSelectDataType As XMLFundraisingDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectFundraisingRequestDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectFundraisingRequestDataAsync(ByVal pSelectDataType As XMLFundraisingDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectFundraisingRequestDataOperationCompleted Is Nothing) Then
                Me.SelectFundraisingRequestDataOperationCompleted = AddressOf Me.OnSelectFundraisingRequestDataOperationCompleted
            End If
            Me.InvokeAsync("SelectFundraisingRequestData", New Object() {pSelectDataType, pXMLParams}, Me.SelectFundraisingRequestDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectFundraisingRequestDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectFundraisingRequestDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectFundraisingRequestDataCompleted(Me, New SelectFundraisingRequestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectJournalData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectJournalData(ByVal pSelectDataType As XMLJournalDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectJournalData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectJournalDataAsync(ByVal pSelectDataType As XMLJournalDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectJournalDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectJournalDataAsync(ByVal pSelectDataType As XMLJournalDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectJournalDataOperationCompleted Is Nothing) Then
                Me.SelectJournalDataOperationCompleted = AddressOf Me.OnSelectJournalDataOperationCompleted
            End If
            Me.InvokeAsync("SelectJournalData", New Object() {pSelectDataType, pXMLParams}, Me.SelectJournalDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectJournalDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectJournalDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectJournalDataCompleted(Me, New SelectJournalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectMembershipData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectMembershipData(ByVal pSelectDataType As XMLMembershipDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectMembershipData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectMembershipDataAsync(ByVal pSelectDataType As XMLMembershipDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectMembershipDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectMembershipDataAsync(ByVal pSelectDataType As XMLMembershipDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectMembershipDataOperationCompleted Is Nothing) Then
                Me.SelectMembershipDataOperationCompleted = AddressOf Me.OnSelectMembershipDataOperationCompleted
            End If
            Me.InvokeAsync("SelectMembershipData", New Object() {pSelectDataType, pXMLParams}, Me.SelectMembershipDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectMembershipDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectMembershipDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectMembershipDataCompleted(Me, New SelectMembershipDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectPaymentPlanData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectPaymentPlanData(ByVal pSelectDataType As XMLPaymentPlanDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectPaymentPlanData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectPaymentPlanDataAsync(ByVal pSelectDataType As XMLPaymentPlanDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectPaymentPlanDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectPaymentPlanDataAsync(ByVal pSelectDataType As XMLPaymentPlanDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectPaymentPlanDataOperationCompleted Is Nothing) Then
                Me.SelectPaymentPlanDataOperationCompleted = AddressOf Me.OnSelectPaymentPlanDataOperationCompleted
            End If
            Me.InvokeAsync("SelectPaymentPlanData", New Object() {pSelectDataType, pXMLParams}, Me.SelectPaymentPlanDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectPaymentPlanDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectPaymentPlanDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectPaymentPlanDataCompleted(Me, New SelectPaymentPlanDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectPledgeData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectPledgeData(ByVal pSelectDataType As XMLPledgeDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectPledgeData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectPledgeDataAsync(ByVal pSelectDataType As XMLPledgeDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectPledgeDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectPledgeDataAsync(ByVal pSelectDataType As XMLPledgeDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectPledgeDataOperationCompleted Is Nothing) Then
                Me.SelectPledgeDataOperationCompleted = AddressOf Me.OnSelectPledgeDataOperationCompleted
            End If
            Me.InvokeAsync("SelectPledgeData", New Object() {pSelectDataType, pXMLParams}, Me.SelectPledgeDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectPledgeDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectPledgeDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectPledgeDataCompleted(Me, New SelectPledgeDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectPurchaseInvoiceData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectPurchaseInvoiceData(ByVal pSelectDataType As XMLPurchaseInvoiceDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectPurchaseInvoiceData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectPurchaseInvoiceDataAsync(ByVal pSelectDataType As XMLPurchaseInvoiceDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectPurchaseInvoiceDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectPurchaseInvoiceDataAsync(ByVal pSelectDataType As XMLPurchaseInvoiceDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectPurchaseInvoiceDataOperationCompleted Is Nothing) Then
                Me.SelectPurchaseInvoiceDataOperationCompleted = AddressOf Me.OnSelectPurchaseInvoiceDataOperationCompleted
            End If
            Me.InvokeAsync("SelectPurchaseInvoiceData", New Object() {pSelectDataType, pXMLParams}, Me.SelectPurchaseInvoiceDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectPurchaseInvoiceDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectPurchaseInvoiceDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectPurchaseInvoiceDataCompleted(Me, New SelectPurchaseInvoiceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectPurchaseOrderData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectPurchaseOrderData(ByVal pSelectDataType As XMLPurchaseOrderDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectPurchaseOrderData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectPurchaseOrderDataAsync(ByVal pSelectDataType As XMLPurchaseOrderDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectPurchaseOrderDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectPurchaseOrderDataAsync(ByVal pSelectDataType As XMLPurchaseOrderDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectPurchaseOrderDataOperationCompleted Is Nothing) Then
                Me.SelectPurchaseOrderDataOperationCompleted = AddressOf Me.OnSelectPurchaseOrderDataOperationCompleted
            End If
            Me.InvokeAsync("SelectPurchaseOrderData", New Object() {pSelectDataType, pXMLParams}, Me.SelectPurchaseOrderDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectPurchaseOrderDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectPurchaseOrderDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectPurchaseOrderDataCompleted(Me, New SelectPurchaseOrderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectSelectionSetAppointments", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectSelectionSetAppointments(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectSelectionSetAppointments", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectSelectionSetAppointmentsAsync(ByVal pXMLParams As String)
            Me.SelectSelectionSetAppointmentsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectSelectionSetAppointmentsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectSelectionSetAppointmentsOperationCompleted Is Nothing) Then
                Me.SelectSelectionSetAppointmentsOperationCompleted = AddressOf Me.OnSelectSelectionSetAppointmentsOperationCompleted
            End If
            Me.InvokeAsync("SelectSelectionSetAppointments", New Object() {pXMLParams}, Me.SelectSelectionSetAppointmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectSelectionSetAppointmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectSelectionSetAppointmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectSelectionSetAppointmentsCompleted(Me, New SelectSelectionSetAppointmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectSelectionSetCommsNumbers", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectSelectionSetCommsNumbers(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectSelectionSetCommsNumbers", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectSelectionSetCommsNumbersAsync(ByVal pXMLParams As String)
            Me.SelectSelectionSetCommsNumbersAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectSelectionSetCommsNumbersAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectSelectionSetCommsNumbersOperationCompleted Is Nothing) Then
                Me.SelectSelectionSetCommsNumbersOperationCompleted = AddressOf Me.OnSelectSelectionSetCommsNumbersOperationCompleted
            End If
            Me.InvokeAsync("SelectSelectionSetCommsNumbers", New Object() {pXMLParams}, Me.SelectSelectionSetCommsNumbersOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectSelectionSetCommsNumbersOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectSelectionSetCommsNumbersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectSelectionSetCommsNumbersCompleted(Me, New SelectSelectionSetCommsNumbersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectSelectionSetData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectSelectionSetData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectSelectionSetData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectSelectionSetDataAsync(ByVal pXMLParams As String)
            Me.SelectSelectionSetDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectSelectionSetDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectSelectionSetDataOperationCompleted Is Nothing) Then
                Me.SelectSelectionSetDataOperationCompleted = AddressOf Me.OnSelectSelectionSetDataOperationCompleted
            End If
            Me.InvokeAsync("SelectSelectionSetData", New Object() {pXMLParams}, Me.SelectSelectionSetDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectSelectionSetDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectSelectionSetDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectSelectionSetDataCompleted(Me, New SelectSelectionSetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectTableData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectTableData(ByVal pSelectDataType As XMLTableDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectTableData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectTableDataAsync(ByVal pSelectDataType As XMLTableDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectTableDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectTableDataAsync(ByVal pSelectDataType As XMLTableDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectTableDataOperationCompleted Is Nothing) Then
                Me.SelectTableDataOperationCompleted = AddressOf Me.OnSelectTableDataOperationCompleted
            End If
            Me.InvokeAsync("SelectTableData", New Object() {pSelectDataType, pXMLParams}, Me.SelectTableDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectTableDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectTableDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectTableDataCompleted(Me, New SelectTableDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectTransactionData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectTransactionData(ByVal pSelectDataType As XMLTransactionDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectTransactionData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectTransactionDataAsync(ByVal pSelectDataType As XMLTransactionDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectTransactionDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectTransactionDataAsync(ByVal pSelectDataType As XMLTransactionDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectTransactionDataOperationCompleted Is Nothing) Then
                Me.SelectTransactionDataOperationCompleted = AddressOf Me.OnSelectTransactionDataOperationCompleted
            End If
            Me.InvokeAsync("SelectTransactionData", New Object() {pSelectDataType, pXMLParams}, Me.SelectTransactionDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectTransactionDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectTransactionDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectTransactionDataCompleted(Me, New SelectTransactionDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetReportFile", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReportFile(ByVal pXMLParams As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetReportFile", New Object() {pXMLParams})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportFileAsync(ByVal pXMLParams As String)
            Me.GetReportFileAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportFileAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetReportFileOperationCompleted Is Nothing) Then
                Me.GetReportFileOperationCompleted = AddressOf Me.OnGetReportFileOperationCompleted
            End If
            Me.InvokeAsync("GetReportFile", New Object() {pXMLParams}, Me.GetReportFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportFileCompleted(Me, New GetReportFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetReportOutput", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReportOutput(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetReportOutput", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportOutputAsync(ByVal pXMLParams As String)
            Me.GetReportOutputAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportOutputAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetReportOutputOperationCompleted Is Nothing) Then
                Me.GetReportOutputOperationCompleted = AddressOf Me.OnGetReportOutputOperationCompleted
            End If
            Me.InvokeAsync("GetReportOutput", New Object() {pXMLParams}, Me.GetReportOutputOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportOutputOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportOutputCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportOutputCompleted(Me, New GetReportOutputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetReportData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReportData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetReportData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportDataAsync(ByVal pXMLParams As String)
            Me.GetReportDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetReportDataOperationCompleted Is Nothing) Then
                Me.GetReportDataOperationCompleted = AddressOf Me.OnGetReportDataOperationCompleted
            End If
            Me.InvokeAsync("GetReportData", New Object() {pXMLParams}, Me.GetReportDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportDataCompleted(Me, New GetReportDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetReportParameters", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReportParameters(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetReportParameters", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportParametersAsync(ByVal pXMLParams As String)
            Me.GetReportParametersAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportParametersAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetReportParametersOperationCompleted Is Nothing) Then
                Me.GetReportParametersOperationCompleted = AddressOf Me.OnGetReportParametersOperationCompleted
            End If
            Me.InvokeAsync("GetReportParameters", New Object() {pXMLParams}, Me.GetReportParametersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportParametersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportParametersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportParametersCompleted(Me, New GetReportParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetReportSectionDetail", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReportSectionDetail(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetReportSectionDetail", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportSectionDetailAsync(ByVal pXMLParams As String)
            Me.GetReportSectionDetailAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportSectionDetailAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetReportSectionDetailOperationCompleted Is Nothing) Then
                Me.GetReportSectionDetailOperationCompleted = AddressOf Me.OnGetReportSectionDetailOperationCompleted
            End If
            Me.InvokeAsync("GetReportSectionDetail", New Object() {pXMLParams}, Me.GetReportSectionDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportSectionDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportSectionDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportSectionDetailCompleted(Me, New GetReportSectionDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetReportVersion", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReportVersion(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetReportVersion", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportVersionAsync(ByVal pXMLParams As String)
            Me.GetReportVersionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportVersionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetReportVersionOperationCompleted Is Nothing) Then
                Me.GetReportVersionOperationCompleted = AddressOf Me.OnGetReportVersionOperationCompleted
            End If
            Me.InvokeAsync("GetReportVersion", New Object() {pXMLParams}, Me.GetReportVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportVersionCompleted(Me, New GetReportVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetReportControl", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReportControl(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetReportControl", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportControlAsync(ByVal pXMLParams As String)
            Me.GetReportControlAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportControlAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetReportControlOperationCompleted Is Nothing) Then
                Me.GetReportControlOperationCompleted = AddressOf Me.OnGetReportControlOperationCompleted
            End If
            Me.InvokeAsync("GetReportControl", New Object() {pXMLParams}, Me.GetReportControlOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportControlOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportControlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportControlCompleted(Me, New GetReportControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetReportSectionData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReportSectionData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetReportSectionData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportSectionDataAsync(ByVal pXMLParams As String)
            Me.GetReportSectionDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportSectionDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetReportSectionDataOperationCompleted Is Nothing) Then
                Me.GetReportSectionDataOperationCompleted = AddressOf Me.OnGetReportSectionDataOperationCompleted
            End If
            Me.InvokeAsync("GetReportSectionData", New Object() {pXMLParams}, Me.GetReportSectionDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportSectionDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportSectionDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportSectionDataCompleted(Me, New GetReportSectionDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DuplicateReport", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DuplicateReport(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DuplicateReport", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DuplicateReportAsync(ByVal pXMLParams As String)
            Me.DuplicateReportAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DuplicateReportAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DuplicateReportOperationCompleted Is Nothing) Then
                Me.DuplicateReportOperationCompleted = AddressOf Me.OnDuplicateReportOperationCompleted
            End If
            Me.InvokeAsync("DuplicateReport", New Object() {pXMLParams}, Me.DuplicateReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnDuplicateReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.DuplicateReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DuplicateReportCompleted(Me, New DuplicateReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/RenumberReportParameters", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RenumberReportParameters(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("RenumberReportParameters", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RenumberReportParametersAsync(ByVal pXMLParams As String)
            Me.RenumberReportParametersAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RenumberReportParametersAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.RenumberReportParametersOperationCompleted Is Nothing) Then
                Me.RenumberReportParametersOperationCompleted = AddressOf Me.OnRenumberReportParametersOperationCompleted
            End If
            Me.InvokeAsync("RenumberReportParameters", New Object() {pXMLParams}, Me.RenumberReportParametersOperationCompleted, userState)
        End Sub
        
        Private Sub OnRenumberReportParametersOperationCompleted(ByVal arg As Object)
            If (Not (Me.RenumberReportParametersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RenumberReportParametersCompleted(Me, New RenumberReportParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/RenumberReportSections", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RenumberReportSections(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("RenumberReportSections", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RenumberReportSectionsAsync(ByVal pXMLParams As String)
            Me.RenumberReportSectionsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RenumberReportSectionsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.RenumberReportSectionsOperationCompleted Is Nothing) Then
                Me.RenumberReportSectionsOperationCompleted = AddressOf Me.OnRenumberReportSectionsOperationCompleted
            End If
            Me.InvokeAsync("RenumberReportSections", New Object() {pXMLParams}, Me.RenumberReportSectionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnRenumberReportSectionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.RenumberReportSectionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RenumberReportSectionsCompleted(Me, New RenumberReportSectionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DuplicateReportSection", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DuplicateReportSection(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DuplicateReportSection", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DuplicateReportSectionAsync(ByVal pXMLParams As String)
            Me.DuplicateReportSectionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DuplicateReportSectionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DuplicateReportSectionOperationCompleted Is Nothing) Then
                Me.DuplicateReportSectionOperationCompleted = AddressOf Me.OnDuplicateReportSectionOperationCompleted
            End If
            Me.InvokeAsync("DuplicateReportSection", New Object() {pXMLParams}, Me.DuplicateReportSectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDuplicateReportSectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DuplicateReportSectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DuplicateReportSectionCompleted(Me, New DuplicateReportSectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/RenumberReportItems", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RenumberReportItems(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("RenumberReportItems", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RenumberReportItemsAsync(ByVal pXMLParams As String)
            Me.RenumberReportItemsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RenumberReportItemsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.RenumberReportItemsOperationCompleted Is Nothing) Then
                Me.RenumberReportItemsOperationCompleted = AddressOf Me.OnRenumberReportItemsOperationCompleted
            End If
            Me.InvokeAsync("RenumberReportItems", New Object() {pXMLParams}, Me.RenumberReportItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnRenumberReportItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.RenumberReportItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RenumberReportItemsCompleted(Me, New RenumberReportItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteReportParameter", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteReportParameter(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteReportParameter", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteReportParameterAsync(ByVal pXMLParams As String)
            Me.DeleteReportParameterAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteReportParameterAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteReportParameterOperationCompleted Is Nothing) Then
                Me.DeleteReportParameterOperationCompleted = AddressOf Me.OnDeleteReportParameterOperationCompleted
            End If
            Me.InvokeAsync("DeleteReportParameter", New Object() {pXMLParams}, Me.DeleteReportParameterOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteReportParameterOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteReportParameterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteReportParameterCompleted(Me, New DeleteReportParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteReportControl", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteReportControl(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteReportControl", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteReportControlAsync(ByVal pXMLParams As String)
            Me.DeleteReportControlAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteReportControlAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteReportControlOperationCompleted Is Nothing) Then
                Me.DeleteReportControlOperationCompleted = AddressOf Me.OnDeleteReportControlOperationCompleted
            End If
            Me.InvokeAsync("DeleteReportControl", New Object() {pXMLParams}, Me.DeleteReportControlOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteReportControlOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteReportControlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteReportControlCompleted(Me, New DeleteReportControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteReportItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteReportItem(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteReportItem", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteReportItemAsync(ByVal pXMLParams As String)
            Me.DeleteReportItemAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteReportItemAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteReportItemOperationCompleted Is Nothing) Then
                Me.DeleteReportItemOperationCompleted = AddressOf Me.OnDeleteReportItemOperationCompleted
            End If
            Me.InvokeAsync("DeleteReportItem", New Object() {pXMLParams}, Me.DeleteReportItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteReportItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteReportItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteReportItemCompleted(Me, New DeleteReportItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteReportSection", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteReportSection(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteReportSection", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteReportSectionAsync(ByVal pXMLParams As String)
            Me.DeleteReportSectionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteReportSectionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteReportSectionOperationCompleted Is Nothing) Then
                Me.DeleteReportSectionOperationCompleted = AddressOf Me.OnDeleteReportSectionOperationCompleted
            End If
            Me.InvokeAsync("DeleteReportSection", New Object() {pXMLParams}, Me.DeleteReportSectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteReportSectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteReportSectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteReportSectionCompleted(Me, New DeleteReportSectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteReportAndContent", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteReportAndContent(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteReportAndContent", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteReportAndContentAsync(ByVal pXMLParams As String)
            Me.DeleteReportAndContentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteReportAndContentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteReportAndContentOperationCompleted Is Nothing) Then
                Me.DeleteReportAndContentOperationCompleted = AddressOf Me.OnDeleteReportAndContentOperationCompleted
            End If
            Me.InvokeAsync("DeleteReportAndContent", New Object() {pXMLParams}, Me.DeleteReportAndContentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteReportAndContentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteReportAndContentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteReportAndContentCompleted(Me, New DeleteReportAndContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddAutoPaymentMethod", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAutoPaymentMethod(ByVal pAutoPaymentType As ppAutoPayMethods, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddAutoPaymentMethod", New Object() {pAutoPaymentType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAutoPaymentMethodAsync(ByVal pAutoPaymentType As ppAutoPayMethods, ByVal pXMLParams As String)
            Me.AddAutoPaymentMethodAsync(pAutoPaymentType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAutoPaymentMethodAsync(ByVal pAutoPaymentType As ppAutoPayMethods, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddAutoPaymentMethodOperationCompleted Is Nothing) Then
                Me.AddAutoPaymentMethodOperationCompleted = AddressOf Me.OnAddAutoPaymentMethodOperationCompleted
            End If
            Me.InvokeAsync("AddAutoPaymentMethod", New Object() {pAutoPaymentType, pXMLParams}, Me.AddAutoPaymentMethodOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAutoPaymentMethodOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAutoPaymentMethodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAutoPaymentMethodCompleted(Me, New AddAutoPaymentMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddMembership", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMembership(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddMembership", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMembershipAsync(ByVal pXMLParams As String)
            Me.AddMembershipAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMembershipAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddMembershipOperationCompleted Is Nothing) Then
                Me.AddMembershipOperationCompleted = AddressOf Me.OnAddMembershipOperationCompleted
            End If
            Me.InvokeAsync("AddMembership", New Object() {pXMLParams}, Me.AddMembershipOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMembershipOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMembershipCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMembershipCompleted(Me, New AddMembershipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddPaymentPlan", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPaymentPlan(ByVal pPlanType As ppType, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddPaymentPlan", New Object() {pPlanType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPaymentPlanAsync(ByVal pPlanType As ppType, ByVal pXMLParams As String)
            Me.AddPaymentPlanAsync(pPlanType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPaymentPlanAsync(ByVal pPlanType As ppType, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddPaymentPlanOperationCompleted Is Nothing) Then
                Me.AddPaymentPlanOperationCompleted = AddressOf Me.OnAddPaymentPlanOperationCompleted
            End If
            Me.InvokeAsync("AddPaymentPlan", New Object() {pPlanType, pXMLParams}, Me.AddPaymentPlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPaymentPlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPaymentPlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPaymentPlanCompleted(Me, New AddPaymentPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ChangeMembershipType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeMembershipType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ChangeMembershipType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeMembershipTypeAsync(ByVal pXMLParams As String)
            Me.ChangeMembershipTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeMembershipTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ChangeMembershipTypeOperationCompleted Is Nothing) Then
                Me.ChangeMembershipTypeOperationCompleted = AddressOf Me.OnChangeMembershipTypeOperationCompleted
            End If
            Me.InvokeAsync("ChangeMembershipType", New Object() {pXMLParams}, Me.ChangeMembershipTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeMembershipTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeMembershipTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeMembershipTypeCompleted(Me, New ChangeMembershipTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteGiftAidDeclaration", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteGiftAidDeclaration(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteGiftAidDeclaration", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteGiftAidDeclarationAsync(ByVal pXMLParams As String)
            Me.DeleteGiftAidDeclarationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteGiftAidDeclarationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteGiftAidDeclarationOperationCompleted Is Nothing) Then
                Me.DeleteGiftAidDeclarationOperationCompleted = AddressOf Me.OnDeleteGiftAidDeclarationOperationCompleted
            End If
            Me.InvokeAsync("DeleteGiftAidDeclaration", New Object() {pXMLParams}, Me.DeleteGiftAidDeclarationOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteGiftAidDeclarationOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteGiftAidDeclarationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteGiftAidDeclarationCompleted(Me, New DeleteGiftAidDeclarationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetAutoPaymentType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAutoPaymentType(ByVal pXMLParams As String) As ppAutoPayMethods
            Dim results() As Object = Me.Invoke("GetAutoPaymentType", New Object() {pXMLParams})
            Return CType(results(0),ppAutoPayMethods)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAutoPaymentTypeAsync(ByVal pXMLParams As String)
            Me.GetAutoPaymentTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAutoPaymentTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetAutoPaymentTypeOperationCompleted Is Nothing) Then
                Me.GetAutoPaymentTypeOperationCompleted = AddressOf Me.OnGetAutoPaymentTypeOperationCompleted
            End If
            Me.InvokeAsync("GetAutoPaymentType", New Object() {pXMLParams}, Me.GetAutoPaymentTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAutoPaymentTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAutoPaymentTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAutoPaymentTypeCompleted(Me, New GetAutoPaymentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetFDEControlTypes", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFDEControlTypes(ByVal pXMLParams As String) As FDEControlTypes
            Dim results() As Object = Me.Invoke("GetFDEControlTypes", New Object() {pXMLParams})
            Return CType(results(0),FDEControlTypes)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFDEControlTypesAsync(ByVal pXMLParams As String)
            Me.GetFDEControlTypesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFDEControlTypesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetFDEControlTypesOperationCompleted Is Nothing) Then
                Me.GetFDEControlTypesOperationCompleted = AddressOf Me.OnGetFDEControlTypesOperationCompleted
            End If
            Me.InvokeAsync("GetFDEControlTypes", New Object() {pXMLParams}, Me.GetFDEControlTypesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFDEControlTypesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFDEControlTypesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFDEControlTypesCompleted(Me, New GetFDEControlTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetDetailBalance", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDetailBalance(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetDetailBalance", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDetailBalanceAsync(ByVal pXMLParams As String)
            Me.GetDetailBalanceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDetailBalanceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetDetailBalanceOperationCompleted Is Nothing) Then
                Me.GetDetailBalanceOperationCompleted = AddressOf Me.OnGetDetailBalanceOperationCompleted
            End If
            Me.InvokeAsync("GetDetailBalance", New Object() {pXMLParams}, Me.GetDetailBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDetailBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDetailBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDetailBalanceCompleted(Me, New GetDetailBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMemberBalance", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMemberBalance(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetMemberBalance", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMemberBalanceAsync(ByVal pXMLParams As String)
            Me.GetMemberBalanceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMemberBalanceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetMemberBalanceOperationCompleted Is Nothing) Then
                Me.GetMemberBalanceOperationCompleted = AddressOf Me.OnGetMemberBalanceOperationCompleted
            End If
            Me.InvokeAsync("GetMemberBalance", New Object() {pXMLParams}, Me.GetMemberBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMemberBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMemberBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMemberBalanceCompleted(Me, New GetMemberBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMemberRenewalAmount", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMemberRenewalAmount(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetMemberRenewalAmount", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMemberRenewalAmountAsync(ByVal pXMLParams As String)
            Me.GetMemberRenewalAmountAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMemberRenewalAmountAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetMemberRenewalAmountOperationCompleted Is Nothing) Then
                Me.GetMemberRenewalAmountOperationCompleted = AddressOf Me.OnGetMemberRenewalAmountOperationCompleted
            End If
            Me.InvokeAsync("GetMemberRenewalAmount", New Object() {pXMLParams}, Me.GetMemberRenewalAmountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMemberRenewalAmountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMemberRenewalAmountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMemberRenewalAmountCompleted(Me, New GetMemberRenewalAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMembershipEntitlements", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMembershipEntitlements(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetMembershipEntitlements", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMembershipEntitlementsAsync(ByVal pXMLParams As String)
            Me.GetMembershipEntitlementsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMembershipEntitlementsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetMembershipEntitlementsOperationCompleted Is Nothing) Then
                Me.GetMembershipEntitlementsOperationCompleted = AddressOf Me.OnGetMembershipEntitlementsOperationCompleted
            End If
            Me.InvokeAsync("GetMembershipEntitlements", New Object() {pXMLParams}, Me.GetMembershipEntitlementsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMembershipEntitlementsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMembershipEntitlementsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMembershipEntitlementsCompleted(Me, New GetMembershipEntitlementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetNextPaymentData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNextPaymentData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetNextPaymentData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNextPaymentDataAsync(ByVal pXMLParams As String)
            Me.GetNextPaymentDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNextPaymentDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetNextPaymentDataOperationCompleted Is Nothing) Then
                Me.GetNextPaymentDataOperationCompleted = AddressOf Me.OnGetNextPaymentDataOperationCompleted
            End If
            Me.InvokeAsync("GetNextPaymentData", New Object() {pXMLParams}, Me.GetNextPaymentDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNextPaymentDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNextPaymentDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNextPaymentDataCompleted(Me, New GetNextPaymentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetPaymentPlanStartDate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPaymentPlanStartDate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetPaymentPlanStartDate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPaymentPlanStartDateAsync(ByVal pXMLParams As String)
            Me.GetPaymentPlanStartDateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPaymentPlanStartDateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetPaymentPlanStartDateOperationCompleted Is Nothing) Then
                Me.GetPaymentPlanStartDateOperationCompleted = AddressOf Me.OnGetPaymentPlanStartDateOperationCompleted
            End If
            Me.InvokeAsync("GetPaymentPlanStartDate", New Object() {pXMLParams}, Me.GetPaymentPlanStartDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPaymentPlanStartDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPaymentPlanStartDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPaymentPlanStartDateCompleted(Me, New GetPaymentPlanStartDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessPaymentPlanMenu", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessPaymentPlanMenu(ByVal pMenuType As XMLPaymentPlanMenuTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ProcessPaymentPlanMenu", New Object() {pMenuType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessPaymentPlanMenuAsync(ByVal pMenuType As XMLPaymentPlanMenuTypes, ByVal pXMLParams As String)
            Me.ProcessPaymentPlanMenuAsync(pMenuType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessPaymentPlanMenuAsync(ByVal pMenuType As XMLPaymentPlanMenuTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ProcessPaymentPlanMenuOperationCompleted Is Nothing) Then
                Me.ProcessPaymentPlanMenuOperationCompleted = AddressOf Me.OnProcessPaymentPlanMenuOperationCompleted
            End If
            Me.InvokeAsync("ProcessPaymentPlanMenu", New Object() {pMenuType, pXMLParams}, Me.ProcessPaymentPlanMenuOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessPaymentPlanMenuOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessPaymentPlanMenuCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessPaymentPlanMenuCompleted(Me, New ProcessPaymentPlanMenuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdatePaymentPlan", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePaymentPlan(ByVal pUpdateType As XMLPaymentPlanUpdateTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdatePaymentPlan", New Object() {pUpdateType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePaymentPlanAsync(ByVal pUpdateType As XMLPaymentPlanUpdateTypes, ByVal pXMLParams As String)
            Me.UpdatePaymentPlanAsync(pUpdateType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePaymentPlanAsync(ByVal pUpdateType As XMLPaymentPlanUpdateTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdatePaymentPlanOperationCompleted Is Nothing) Then
                Me.UpdatePaymentPlanOperationCompleted = AddressOf Me.OnUpdatePaymentPlanOperationCompleted
            End If
            Me.InvokeAsync("UpdatePaymentPlan", New Object() {pUpdateType, pXMLParams}, Me.UpdatePaymentPlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePaymentPlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePaymentPlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePaymentPlanCompleted(Me, New UpdatePaymentPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdatePaymentPlanInfo", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePaymentPlanInfo(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdatePaymentPlanInfo", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePaymentPlanInfoAsync(ByVal pXMLParams As String)
            Me.UpdatePaymentPlanInfoAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePaymentPlanInfoAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdatePaymentPlanInfoOperationCompleted Is Nothing) Then
                Me.UpdatePaymentPlanInfoOperationCompleted = AddressOf Me.OnUpdatePaymentPlanInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdatePaymentPlanInfo", New Object() {pXMLParams}, Me.UpdatePaymentPlanInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePaymentPlanInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePaymentPlanInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePaymentPlanInfoCompleted(Me, New UpdatePaymentPlanInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddPaymentPlanMember", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPaymentPlanMember(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddPaymentPlanMember", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPaymentPlanMemberAsync(ByVal pXMLParams As String)
            Me.AddPaymentPlanMemberAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPaymentPlanMemberAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddPaymentPlanMemberOperationCompleted Is Nothing) Then
                Me.AddPaymentPlanMemberOperationCompleted = AddressOf Me.OnAddPaymentPlanMemberOperationCompleted
            End If
            Me.InvokeAsync("AddPaymentPlanMember", New Object() {pXMLParams}, Me.AddPaymentPlanMemberOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPaymentPlanMemberOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPaymentPlanMemberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPaymentPlanMemberCompleted(Me, New AddPaymentPlanMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CheckMailingDocuments", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckMailingDocuments(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CheckMailingDocuments", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckMailingDocumentsAsync(ByVal pXMLParams As String)
            Me.CheckMailingDocumentsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckMailingDocumentsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CheckMailingDocumentsOperationCompleted Is Nothing) Then
                Me.CheckMailingDocumentsOperationCompleted = AddressOf Me.OnCheckMailingDocumentsOperationCompleted
            End If
            Me.InvokeAsync("CheckMailingDocuments", New Object() {pXMLParams}, Me.CheckMailingDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckMailingDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckMailingDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckMailingDocumentsCompleted(Me, New CheckMailingDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/RecalculateLoanInterest", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecalculateLoanInterest(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("RecalculateLoanInterest", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecalculateLoanInterestAsync(ByVal pXMLParams As String)
            Me.RecalculateLoanInterestAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecalculateLoanInterestAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.RecalculateLoanInterestOperationCompleted Is Nothing) Then
                Me.RecalculateLoanInterestOperationCompleted = AddressOf Me.OnRecalculateLoanInterestOperationCompleted
            End If
            Me.InvokeAsync("RecalculateLoanInterest", New Object() {pXMLParams}, Me.RecalculateLoanInterestOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecalculateLoanInterestOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecalculateLoanInterestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecalculateLoanInterestCompleted(Me, New RecalculateLoanInterestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/LoadDataUpdatesFile", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadDataUpdatesFile(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("LoadDataUpdatesFile", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadDataUpdatesFileAsync(ByVal pXMLParams As String)
            Me.LoadDataUpdatesFileAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadDataUpdatesFileAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.LoadDataUpdatesFileOperationCompleted Is Nothing) Then
                Me.LoadDataUpdatesFileOperationCompleted = AddressOf Me.OnLoadDataUpdatesFileOperationCompleted
            End If
            Me.InvokeAsync("LoadDataUpdatesFile", New Object() {pXMLParams}, Me.LoadDataUpdatesFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadDataUpdatesFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadDataUpdatesFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadDataUpdatesFileCompleted(Me, New LoadDataUpdatesFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectLoanData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectLoanData(ByVal pUpdateType As XMLLoanDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectLoanData", New Object() {pUpdateType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectLoanDataAsync(ByVal pUpdateType As XMLLoanDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectLoanDataAsync(pUpdateType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectLoanDataAsync(ByVal pUpdateType As XMLLoanDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectLoanDataOperationCompleted Is Nothing) Then
                Me.SelectLoanDataOperationCompleted = AddressOf Me.OnSelectLoanDataOperationCompleted
            End If
            Me.InvokeAsync("SelectLoanData", New Object() {pUpdateType, pXMLParams}, Me.SelectLoanDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectLoanDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectLoanDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectLoanDataCompleted(Me, New SelectLoanDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMembershipCMTPrices", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMembershipCMTPrices(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetMembershipCMTPrices", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMembershipCMTPricesAsync(ByVal pXMLParams As String)
            Me.GetMembershipCMTPricesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMembershipCMTPricesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetMembershipCMTPricesOperationCompleted Is Nothing) Then
                Me.GetMembershipCMTPricesOperationCompleted = AddressOf Me.OnGetMembershipCMTPricesOperationCompleted
            End If
            Me.InvokeAsync("GetMembershipCMTPrices", New Object() {pXMLParams}, Me.GetMembershipCMTPricesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMembershipCMTPricesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMembershipCMTPricesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMembershipCMTPricesCompleted(Me, New GetMembershipCMTPricesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetModifierPrice", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetModifierPrice(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetModifierPrice", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetModifierPriceAsync(ByVal pXMLParams As String)
            Me.GetModifierPriceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetModifierPriceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetModifierPriceOperationCompleted Is Nothing) Then
                Me.GetModifierPriceOperationCompleted = AddressOf Me.OnGetModifierPriceOperationCompleted
            End If
            Me.InvokeAsync("GetModifierPrice", New Object() {pXMLParams}, Me.GetModifierPriceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetModifierPriceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetModifierPriceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetModifierPriceCompleted(Me, New GetModifierPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddContactMailingDocument", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddContactMailingDocument(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddContactMailingDocument", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddContactMailingDocumentAsync(ByVal pXMLParams As String)
            Me.AddContactMailingDocumentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddContactMailingDocumentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddContactMailingDocumentOperationCompleted Is Nothing) Then
                Me.AddContactMailingDocumentOperationCompleted = AddressOf Me.OnAddContactMailingDocumentOperationCompleted
            End If
            Me.InvokeAsync("AddContactMailingDocument", New Object() {pXMLParams}, Me.AddContactMailingDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddContactMailingDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddContactMailingDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddContactMailingDocumentCompleted(Me, New AddContactMailingDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMailingDocumentMergeFile", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMailingDocumentMergeFile(ByVal pXMLParams As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetMailingDocumentMergeFile", New Object() {pXMLParams})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMailingDocumentMergeFileAsync(ByVal pXMLParams As String)
            Me.GetMailingDocumentMergeFileAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMailingDocumentMergeFileAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetMailingDocumentMergeFileOperationCompleted Is Nothing) Then
                Me.GetMailingDocumentMergeFileOperationCompleted = AddressOf Me.OnGetMailingDocumentMergeFileOperationCompleted
            End If
            Me.InvokeAsync("GetMailingDocumentMergeFile", New Object() {pXMLParams}, Me.GetMailingDocumentMergeFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMailingDocumentMergeFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMailingDocumentMergeFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMailingDocumentMergeFileCompleted(Me, New GetMailingDocumentMergeFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMailingDocumentParagraphs", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMailingDocumentParagraphs(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetMailingDocumentParagraphs", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMailingDocumentParagraphsAsync(ByVal pXMLParams As String)
            Me.GetMailingDocumentParagraphsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMailingDocumentParagraphsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetMailingDocumentParagraphsOperationCompleted Is Nothing) Then
                Me.GetMailingDocumentParagraphsOperationCompleted = AddressOf Me.OnGetMailingDocumentParagraphsOperationCompleted
            End If
            Me.InvokeAsync("GetMailingDocumentParagraphs", New Object() {pXMLParams}, Me.GetMailingDocumentParagraphsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMailingDocumentParagraphsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMailingDocumentParagraphsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMailingDocumentParagraphsCompleted(Me, New GetMailingDocumentParagraphsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetTraderApplication", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTraderApplication(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetTraderApplication", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTraderApplicationAsync(ByVal pXMLParams As String)
            Me.GetTraderApplicationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTraderApplicationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetTraderApplicationOperationCompleted Is Nothing) Then
                Me.GetTraderApplicationOperationCompleted = AddressOf Me.OnGetTraderApplicationOperationCompleted
            End If
            Me.InvokeAsync("GetTraderApplication", New Object() {pXMLParams}, Me.GetTraderApplicationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTraderApplicationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTraderApplicationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTraderApplicationCompleted(Me, New GetTraderApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessStockMovement", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessStockMovement(ByVal pType As ProcessStockMovementType, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ProcessStockMovement", New Object() {pType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessStockMovementAsync(ByVal pType As ProcessStockMovementType, ByVal pXMLParams As String)
            Me.ProcessStockMovementAsync(pType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessStockMovementAsync(ByVal pType As ProcessStockMovementType, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ProcessStockMovementOperationCompleted Is Nothing) Then
                Me.ProcessStockMovementOperationCompleted = AddressOf Me.OnProcessStockMovementOperationCompleted
            End If
            Me.InvokeAsync("ProcessStockMovement", New Object() {pType, pXMLParams}, Me.ProcessStockMovementOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessStockMovementOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessStockMovementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessStockMovementCompleted(Me, New ProcessStockMovementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessTraderData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessTraderData(ByVal pType As TraderProcessDataTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ProcessTraderData", New Object() {pType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessTraderDataAsync(ByVal pType As TraderProcessDataTypes, ByVal pXMLParams As String)
            Me.ProcessTraderDataAsync(pType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessTraderDataAsync(ByVal pType As TraderProcessDataTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ProcessTraderDataOperationCompleted Is Nothing) Then
                Me.ProcessTraderDataOperationCompleted = AddressOf Me.OnProcessTraderDataOperationCompleted
            End If
            Me.InvokeAsync("ProcessTraderData", New Object() {pType, pXMLParams}, Me.ProcessTraderDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessTraderDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessTraderDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessTraderDataCompleted(Me, New ProcessTraderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessTraderMailmerge", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessTraderMailmerge(ByVal pType As TraderMailmergeType, ByVal pXMLParams As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ProcessTraderMailmerge", New Object() {pType, pXMLParams})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessTraderMailmergeAsync(ByVal pType As TraderMailmergeType, ByVal pXMLParams As String)
            Me.ProcessTraderMailmergeAsync(pType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessTraderMailmergeAsync(ByVal pType As TraderMailmergeType, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ProcessTraderMailmergeOperationCompleted Is Nothing) Then
                Me.ProcessTraderMailmergeOperationCompleted = AddressOf Me.OnProcessTraderMailmergeOperationCompleted
            End If
            Me.InvokeAsync("ProcessTraderMailmerge", New Object() {pType, pXMLParams}, Me.ProcessTraderMailmergeOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessTraderMailmergeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessTraderMailmergeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessTraderMailmergeCompleted(Me, New ProcessTraderMailmergeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessTraderPPEligibleForGiftAid", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessTraderPPEligibleForGiftAid(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ProcessTraderPPEligibleForGiftAid", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessTraderPPEligibleForGiftAidAsync(ByVal pXMLParams As String)
            Me.ProcessTraderPPEligibleForGiftAidAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessTraderPPEligibleForGiftAidAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ProcessTraderPPEligibleForGiftAidOperationCompleted Is Nothing) Then
                Me.ProcessTraderPPEligibleForGiftAidOperationCompleted = AddressOf Me.OnProcessTraderPPEligibleForGiftAidOperationCompleted
            End If
            Me.InvokeAsync("ProcessTraderPPEligibleForGiftAid", New Object() {pXMLParams}, Me.ProcessTraderPPEligibleForGiftAidOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessTraderPPEligibleForGiftAidOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessTraderPPEligibleForGiftAidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessTraderPPEligibleForGiftAidCompleted(Me, New ProcessTraderPPEligibleForGiftAidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CheckCriteriaContainsORs", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckCriteriaContainsORs(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CheckCriteriaContainsORs", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckCriteriaContainsORsAsync(ByVal pXMLParams As String)
            Me.CheckCriteriaContainsORsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckCriteriaContainsORsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CheckCriteriaContainsORsOperationCompleted Is Nothing) Then
                Me.CheckCriteriaContainsORsOperationCompleted = AddressOf Me.OnCheckCriteriaContainsORsOperationCompleted
            End If
            Me.InvokeAsync("CheckCriteriaContainsORs", New Object() {pXMLParams}, Me.CheckCriteriaContainsORsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckCriteriaContainsORsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckCriteriaContainsORsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckCriteriaContainsORsCompleted(Me, New CheckCriteriaContainsORsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMailingSelectionRoughCount", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMailingSelectionRoughCount(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetMailingSelectionRoughCount", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMailingSelectionRoughCountAsync(ByVal pXMLParams As String)
            Me.GetMailingSelectionRoughCountAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMailingSelectionRoughCountAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetMailingSelectionRoughCountOperationCompleted Is Nothing) Then
                Me.GetMailingSelectionRoughCountOperationCompleted = AddressOf Me.OnGetMailingSelectionRoughCountOperationCompleted
            End If
            Me.InvokeAsync("GetMailingSelectionRoughCount", New Object() {pXMLParams}, Me.GetMailingSelectionRoughCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMailingSelectionRoughCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMailingSelectionRoughCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMailingSelectionRoughCountCompleted(Me, New GetMailingSelectionRoughCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateBatch", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateBatch(ByVal pType As UpdateBatchOptions, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateBatch", New Object() {pType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateBatchAsync(ByVal pType As UpdateBatchOptions, ByVal pXMLParams As String)
            Me.UpdateBatchAsync(pType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateBatchAsync(ByVal pType As UpdateBatchOptions, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateBatchOperationCompleted Is Nothing) Then
                Me.UpdateBatchOperationCompleted = AddressOf Me.OnUpdateBatchOperationCompleted
            End If
            Me.InvokeAsync("UpdateBatch", New Object() {pType, pXMLParams}, Me.UpdateBatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateBatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateBatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateBatchCompleted(Me, New UpdateBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateContactMailingDocumentFile", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactMailingDocumentFile(ByVal pXMLParams As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pBinaryData() As Byte) As String
            Dim results() As Object = Me.Invoke("UpdateContactMailingDocumentFile", New Object() {pXMLParams, pBinaryData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactMailingDocumentFileAsync(ByVal pXMLParams As String, ByVal pBinaryData() As Byte)
            Me.UpdateContactMailingDocumentFileAsync(pXMLParams, pBinaryData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactMailingDocumentFileAsync(ByVal pXMLParams As String, ByVal pBinaryData() As Byte, ByVal userState As Object)
            If (Me.UpdateContactMailingDocumentFileOperationCompleted Is Nothing) Then
                Me.UpdateContactMailingDocumentFileOperationCompleted = AddressOf Me.OnUpdateContactMailingDocumentFileOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactMailingDocumentFile", New Object() {pXMLParams, pBinaryData}, Me.UpdateContactMailingDocumentFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactMailingDocumentFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactMailingDocumentFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactMailingDocumentFileCompleted(Me, New UpdateContactMailingDocumentFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventBookingTransaction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventBookingTransaction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventBookingTransaction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventBookingTransactionAsync(ByVal pXMLParams As String)
            Me.UpdateEventBookingTransactionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventBookingTransactionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventBookingTransactionOperationCompleted Is Nothing) Then
                Me.UpdateEventBookingTransactionOperationCompleted = AddressOf Me.OnUpdateEventBookingTransactionOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventBookingTransaction", New Object() {pXMLParams}, Me.UpdateEventBookingTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventBookingTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventBookingTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventBookingTransactionCompleted(Me, New UpdateEventBookingTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SetTraderApplications", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetTraderApplications(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SetTraderApplications", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetTraderApplicationsAsync(ByVal pXMLParams As String)
            Me.SetTraderApplicationsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetTraderApplicationsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SetTraderApplicationsOperationCompleted Is Nothing) Then
                Me.SetTraderApplicationsOperationCompleted = AddressOf Me.OnSetTraderApplicationsOperationCompleted
            End If
            Me.InvokeAsync("SetTraderApplications", New Object() {pXMLParams}, Me.SetTraderApplicationsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetTraderApplicationsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetTraderApplicationsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetTraderApplicationsCompleted(Me, New SetTraderApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteTraderApplications", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteTraderApplications(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteTraderApplications", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteTraderApplicationsAsync(ByVal pXMLParams As String)
            Me.DeleteTraderApplicationsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTraderApplicationsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteTraderApplicationsOperationCompleted Is Nothing) Then
                Me.DeleteTraderApplicationsOperationCompleted = AddressOf Me.OnDeleteTraderApplicationsOperationCompleted
            End If
            Me.InvokeAsync("DeleteTraderApplications", New Object() {pXMLParams}, Me.DeleteTraderApplicationsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteTraderApplicationsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteTraderApplicationsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteTraderApplicationsCompleted(Me, New DeleteTraderApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SaveTraderApplication", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveTraderApplication(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SaveTraderApplication", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveTraderApplicationAsync(ByVal pXMLParams As String)
            Me.SaveTraderApplicationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveTraderApplicationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SaveTraderApplicationOperationCompleted Is Nothing) Then
                Me.SaveTraderApplicationOperationCompleted = AddressOf Me.OnSaveTraderApplicationOperationCompleted
            End If
            Me.InvokeAsync("SaveTraderApplication", New Object() {pXMLParams}, Me.SaveTraderApplicationOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveTraderApplicationOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveTraderApplicationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveTraderApplicationCompleted(Me, New SaveTraderApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCriteriaSet", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCriteriaSet(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCriteriaSet", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCriteriaSetAsync(ByVal pXMLParams As String)
            Me.AddCriteriaSetAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCriteriaSetAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCriteriaSetOperationCompleted Is Nothing) Then
                Me.AddCriteriaSetOperationCompleted = AddressOf Me.OnAddCriteriaSetOperationCompleted
            End If
            Me.InvokeAsync("AddCriteriaSet", New Object() {pXMLParams}, Me.AddCriteriaSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCriteriaSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCriteriaSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCriteriaSetCompleted(Me, New AddCriteriaSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCriteriaSetDetails", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCriteriaSetDetails(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCriteriaSetDetails", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCriteriaSetDetailsAsync(ByVal pXMLParams As String)
            Me.AddCriteriaSetDetailsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCriteriaSetDetailsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCriteriaSetDetailsOperationCompleted Is Nothing) Then
                Me.AddCriteriaSetDetailsOperationCompleted = AddressOf Me.OnAddCriteriaSetDetailsOperationCompleted
            End If
            Me.InvokeAsync("AddCriteriaSetDetails", New Object() {pXMLParams}, Me.AddCriteriaSetDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCriteriaSetDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCriteriaSetDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCriteriaSetDetailsCompleted(Me, New AddCriteriaSetDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCustomFormData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCustomFormData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCustomFormData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCustomFormDataAsync(ByVal pXMLParams As String)
            Me.AddCustomFormDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCustomFormDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCustomFormDataOperationCompleted Is Nothing) Then
                Me.AddCustomFormDataOperationCompleted = AddressOf Me.OnAddCustomFormDataOperationCompleted
            End If
            Me.InvokeAsync("AddCustomFormData", New Object() {pXMLParams}, Me.AddCustomFormDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCustomFormDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCustomFormDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCustomFormDataCompleted(Me, New AddCustomFormDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventBookingAsync(ByVal pXMLParams As String)
            Me.AddEventBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventBookingOperationCompleted Is Nothing) Then
                Me.AddEventBookingOperationCompleted = AddressOf Me.OnAddEventBookingOperationCompleted
            End If
            Me.InvokeAsync("AddEventBooking", New Object() {pXMLParams}, Me.AddEventBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventBookingCompleted(Me, New AddEventBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExternalReference", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExternalReference(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExternalReference", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExternalReferenceAsync(ByVal pXMLParams As String)
            Me.AddExternalReferenceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExternalReferenceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExternalReferenceOperationCompleted Is Nothing) Then
                Me.AddExternalReferenceOperationCompleted = AddressOf Me.OnAddExternalReferenceOperationCompleted
            End If
            Me.InvokeAsync("AddExternalReference", New Object() {pXMLParams}, Me.AddExternalReferenceOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExternalReferenceOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExternalReferenceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExternalReferenceCompleted(Me, New AddExternalReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddFundraisingPaymentLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFundraisingPaymentLink(ByVal pParams As String) As String
            Dim results() As Object = Me.Invoke("AddFundraisingPaymentLink", New Object() {pParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFundraisingPaymentLinkAsync(ByVal pParams As String)
            Me.AddFundraisingPaymentLinkAsync(pParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFundraisingPaymentLinkAsync(ByVal pParams As String, ByVal userState As Object)
            If (Me.AddFundraisingPaymentLinkOperationCompleted Is Nothing) Then
                Me.AddFundraisingPaymentLinkOperationCompleted = AddressOf Me.OnAddFundraisingPaymentLinkOperationCompleted
            End If
            Me.InvokeAsync("AddFundraisingPaymentLink", New Object() {pParams}, Me.AddFundraisingPaymentLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFundraisingPaymentLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFundraisingPaymentLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFundraisingPaymentLinkCompleted(Me, New AddFundraisingPaymentLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddFundraisingPaymentSchedule", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFundraisingPaymentSchedule(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddFundraisingPaymentSchedule", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFundraisingPaymentScheduleAsync(ByVal pXMLParams As String)
            Me.AddFundraisingPaymentScheduleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFundraisingPaymentScheduleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddFundraisingPaymentScheduleOperationCompleted Is Nothing) Then
                Me.AddFundraisingPaymentScheduleOperationCompleted = AddressOf Me.OnAddFundraisingPaymentScheduleOperationCompleted
            End If
            Me.InvokeAsync("AddFundraisingPaymentSchedule", New Object() {pXMLParams}, Me.AddFundraisingPaymentScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFundraisingPaymentScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFundraisingPaymentScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFundraisingPaymentScheduleCompleted(Me, New AddFundraisingPaymentScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddFundraisingRequest", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFundraisingRequest(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddFundraisingRequest", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFundraisingRequestAsync(ByVal pXMLParams As String)
            Me.AddFundraisingRequestAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFundraisingRequestAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddFundraisingRequestOperationCompleted Is Nothing) Then
                Me.AddFundraisingRequestOperationCompleted = AddressOf Me.OnAddFundraisingRequestOperationCompleted
            End If
            Me.InvokeAsync("AddFundraisingRequest", New Object() {pXMLParams}, Me.AddFundraisingRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFundraisingRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFundraisingRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFundraisingRequestCompleted(Me, New AddFundraisingRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddFutureMembershipType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFutureMembershipType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddFutureMembershipType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFutureMembershipTypeAsync(ByVal pXMLParams As String)
            Me.AddFutureMembershipTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFutureMembershipTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddFutureMembershipTypeOperationCompleted Is Nothing) Then
                Me.AddFutureMembershipTypeOperationCompleted = AddressOf Me.OnAddFutureMembershipTypeOperationCompleted
            End If
            Me.InvokeAsync("AddFutureMembershipType", New Object() {pXMLParams}, Me.AddFutureMembershipTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFutureMembershipTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFutureMembershipTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFutureMembershipTypeCompleted(Me, New AddFutureMembershipTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddGiftAidDeclaration", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddGiftAidDeclaration(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddGiftAidDeclaration", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddGiftAidDeclarationAsync(ByVal pXMLParams As String)
            Me.AddGiftAidDeclarationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddGiftAidDeclarationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddGiftAidDeclarationOperationCompleted Is Nothing) Then
                Me.AddGiftAidDeclarationOperationCompleted = AddressOf Me.OnAddGiftAidDeclarationOperationCompleted
            End If
            Me.InvokeAsync("AddGiftAidDeclaration", New Object() {pXMLParams}, Me.AddGiftAidDeclarationOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddGiftAidDeclarationOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddGiftAidDeclarationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddGiftAidDeclarationCompleted(Me, New AddGiftAidDeclarationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddInvoicePayment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddInvoicePayment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddInvoicePayment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddInvoicePaymentAsync(ByVal pXMLParams As String)
            Me.AddInvoicePaymentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddInvoicePaymentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddInvoicePaymentOperationCompleted Is Nothing) Then
                Me.AddInvoicePaymentOperationCompleted = AddressOf Me.OnAddInvoicePaymentOperationCompleted
            End If
            Me.InvokeAsync("AddInvoicePayment", New Object() {pXMLParams}, Me.AddInvoicePaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddInvoicePaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddInvoicePaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddInvoicePaymentCompleted(Me, New AddInvoicePaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddLinkAsync(ByVal pXMLParams As String)
            Me.AddLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddLinkOperationCompleted Is Nothing) Then
                Me.AddLinkOperationCompleted = AddressOf Me.OnAddLinkOperationCompleted
            End If
            Me.InvokeAsync("AddLink", New Object() {pXMLParams}, Me.AddLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddLinkCompleted(Me, New AddLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddMembershipGroup", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMembershipGroup(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddMembershipGroup", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMembershipGroupAsync(ByVal pXMLParams As String)
            Me.AddMembershipGroupAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMembershipGroupAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddMembershipGroupOperationCompleted Is Nothing) Then
                Me.AddMembershipGroupOperationCompleted = AddressOf Me.OnAddMembershipGroupOperationCompleted
            End If
            Me.InvokeAsync("AddMembershipGroup", New Object() {pXMLParams}, Me.AddMembershipGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMembershipGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMembershipGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMembershipGroupCompleted(Me, New AddMembershipGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddMailingSelectedContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMailingSelectedContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddMailingSelectedContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMailingSelectedContactAsync(ByVal pXMLParams As String)
            Me.AddMailingSelectedContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMailingSelectedContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddMailingSelectedContactOperationCompleted Is Nothing) Then
                Me.AddMailingSelectedContactOperationCompleted = AddressOf Me.OnAddMailingSelectedContactOperationCompleted
            End If
            Me.InvokeAsync("AddMailingSelectedContact", New Object() {pXMLParams}, Me.AddMailingSelectedContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMailingSelectedContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMailingSelectedContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMailingSelectedContactCompleted(Me, New AddMailingSelectedContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddOrganisation", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddOrganisation(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddOrganisation", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddOrganisationAsync(ByVal pXMLParams As String)
            Me.AddOrganisationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddOrganisationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddOrganisationOperationCompleted Is Nothing) Then
                Me.AddOrganisationOperationCompleted = AddressOf Me.OnAddOrganisationOperationCompleted
            End If
            Me.InvokeAsync("AddOrganisation", New Object() {pXMLParams}, Me.AddOrganisationOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOrganisationOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddOrganisationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddOrganisationCompleted(Me, New AddOrganisationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddPaymentPlanPayment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPaymentPlanPayment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddPaymentPlanPayment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPaymentPlanPaymentAsync(ByVal pXMLParams As String)
            Me.AddPaymentPlanPaymentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPaymentPlanPaymentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddPaymentPlanPaymentOperationCompleted Is Nothing) Then
                Me.AddPaymentPlanPaymentOperationCompleted = AddressOf Me.OnAddPaymentPlanPaymentOperationCompleted
            End If
            Me.InvokeAsync("AddPaymentPlanPayment", New Object() {pXMLParams}, Me.AddPaymentPlanPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPaymentPlanPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPaymentPlanPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPaymentPlanPaymentCompleted(Me, New AddPaymentPlanPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddPosition", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPosition(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddPosition", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPositionAsync(ByVal pXMLParams As String)
            Me.AddPositionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPositionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddPositionOperationCompleted Is Nothing) Then
                Me.AddPositionOperationCompleted = AddressOf Me.OnAddPositionOperationCompleted
            End If
            Me.InvokeAsync("AddPosition", New Object() {pXMLParams}, Me.AddPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPositionCompleted(Me, New AddPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddPositionActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPositionActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddPositionActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPositionActivityAsync(ByVal pXMLParams As String)
            Me.AddPositionActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPositionActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddPositionActivityOperationCompleted Is Nothing) Then
                Me.AddPositionActivityOperationCompleted = AddressOf Me.OnAddPositionActivityOperationCompleted
            End If
            Me.InvokeAsync("AddPositionActivity", New Object() {pXMLParams}, Me.AddPositionActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPositionActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPositionActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPositionActivityCompleted(Me, New AddPositionActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddPositionLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPositionLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddPositionLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPositionLinkAsync(ByVal pXMLParams As String)
            Me.AddPositionLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPositionLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddPositionLinkOperationCompleted Is Nothing) Then
                Me.AddPositionLinkOperationCompleted = AddressOf Me.OnAddPositionLinkOperationCompleted
            End If
            Me.InvokeAsync("AddPositionLink", New Object() {pXMLParams}, Me.AddPositionLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPositionLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPositionLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPositionLinkCompleted(Me, New AddPositionLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddProductSale", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddProductSale(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddProductSale", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddProductSaleAsync(ByVal pXMLParams As String)
            Me.AddProductSaleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddProductSaleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddProductSaleOperationCompleted Is Nothing) Then
                Me.AddProductSaleOperationCompleted = AddressOf Me.OnAddProductSaleOperationCompleted
            End If
            Me.InvokeAsync("AddProductSale", New Object() {pXMLParams}, Me.AddProductSaleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddProductSaleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddProductSaleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddProductSaleCompleted(Me, New AddProductSaleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddPurchaseOrderPayment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPurchaseOrderPayment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddPurchaseOrderPayment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPurchaseOrderPaymentAsync(ByVal pXMLParams As String)
            Me.AddPurchaseOrderPaymentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPurchaseOrderPaymentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddPurchaseOrderPaymentOperationCompleted Is Nothing) Then
                Me.AddPurchaseOrderPaymentOperationCompleted = AddressOf Me.OnAddPurchaseOrderPaymentOperationCompleted
            End If
            Me.InvokeAsync("AddPurchaseOrderPayment", New Object() {pXMLParams}, Me.AddPurchaseOrderPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPurchaseOrderPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPurchaseOrderPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPurchaseOrderPaymentCompleted(Me, New AddPurchaseOrderPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddRole", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddRole(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddRole", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddRoleAsync(ByVal pXMLParams As String)
            Me.AddRoleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddRoleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddRoleOperationCompleted Is Nothing) Then
                Me.AddRoleOperationCompleted = AddressOf Me.OnAddRoleOperationCompleted
            End If
            Me.InvokeAsync("AddRole", New Object() {pXMLParams}, Me.AddRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddRoleCompleted(Me, New AddRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddSelectionSet", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddSelectionSet(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddSelectionSet", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddSelectionSetAsync(ByVal pXMLParams As String)
            Me.AddSelectionSetAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddSelectionSetAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddSelectionSetOperationCompleted Is Nothing) Then
                Me.AddSelectionSetOperationCompleted = AddressOf Me.OnAddSelectionSetOperationCompleted
            End If
            Me.InvokeAsync("AddSelectionSet", New Object() {pXMLParams}, Me.AddSelectionSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddSelectionSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddSelectionSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddSelectionSetCompleted(Me, New AddSelectionSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddSelectionSetData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddSelectionSetData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddSelectionSetData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddSelectionSetDataAsync(ByVal pXMLParams As String)
            Me.AddSelectionSetDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddSelectionSetDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddSelectionSetDataOperationCompleted Is Nothing) Then
                Me.AddSelectionSetDataOperationCompleted = AddressOf Me.OnAddSelectionSetDataOperationCompleted
            End If
            Me.InvokeAsync("AddSelectionSetData", New Object() {pXMLParams}, Me.AddSelectionSetDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddSelectionSetDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddSelectionSetDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddSelectionSetDataCompleted(Me, New AddSelectionSetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddSelectionSetContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddSelectionSetContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddSelectionSetContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddSelectionSetContactAsync(ByVal pXMLParams As String)
            Me.AddSelectionSetContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddSelectionSetContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddSelectionSetContactOperationCompleted Is Nothing) Then
                Me.AddSelectionSetContactOperationCompleted = AddressOf Me.OnAddSelectionSetContactOperationCompleted
            End If
            Me.InvokeAsync("AddSelectionSetContact", New Object() {pXMLParams}, Me.AddSelectionSetContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddSelectionSetContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddSelectionSetContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddSelectionSetContactCompleted(Me, New AddSelectionSetContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddSelectionStep", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddSelectionStep(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddSelectionStep", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddSelectionStepAsync(ByVal pXMLParams As String)
            Me.AddSelectionStepAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddSelectionStepAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddSelectionStepOperationCompleted Is Nothing) Then
                Me.AddSelectionStepOperationCompleted = AddressOf Me.OnAddSelectionStepOperationCompleted
            End If
            Me.InvokeAsync("AddSelectionStep", New Object() {pXMLParams}, Me.AddSelectionStepOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddSelectionStepOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddSelectionStepCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddSelectionStepCompleted(Me, New AddSelectionStepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddServiceBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddServiceBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddServiceBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddServiceBookingAsync(ByVal pXMLParams As String)
            Me.AddServiceBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddServiceBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddServiceBookingOperationCompleted Is Nothing) Then
                Me.AddServiceBookingOperationCompleted = AddressOf Me.OnAddServiceBookingOperationCompleted
            End If
            Me.InvokeAsync("AddServiceBooking", New Object() {pXMLParams}, Me.AddServiceBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddServiceBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddServiceBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddServiceBookingCompleted(Me, New AddServiceBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddStandardDocument", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddStandardDocument(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddStandardDocument", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddStandardDocumentAsync(ByVal pXMLParams As String)
            Me.AddStandardDocumentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddStandardDocumentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddStandardDocumentOperationCompleted Is Nothing) Then
                Me.AddStandardDocumentOperationCompleted = AddressOf Me.OnAddStandardDocumentOperationCompleted
            End If
            Me.InvokeAsync("AddStandardDocument", New Object() {pXMLParams}, Me.AddStandardDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddStandardDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddStandardDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddStandardDocumentCompleted(Me, New AddStandardDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddStickyNote", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddStickyNote(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddStickyNote", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddStickyNoteAsync(ByVal pXMLParams As String)
            Me.AddStickyNoteAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddStickyNoteAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddStickyNoteOperationCompleted Is Nothing) Then
                Me.AddStickyNoteOperationCompleted = AddressOf Me.OnAddStickyNoteOperationCompleted
            End If
            Me.InvokeAsync("AddStickyNote", New Object() {pXMLParams}, Me.AddStickyNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddStickyNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddStickyNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddStickyNoteCompleted(Me, New AddStickyNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddSuppression", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddSuppression(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddSuppression", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddSuppressionAsync(ByVal pXMLParams As String)
            Me.AddSuppressionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddSuppressionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddSuppressionOperationCompleted Is Nothing) Then
                Me.AddSuppressionOperationCompleted = AddressOf Me.OnAddSuppressionOperationCompleted
            End If
            Me.InvokeAsync("AddSuppression", New Object() {pXMLParams}, Me.AddSuppressionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddSuppressionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddSuppressionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddSuppressionCompleted(Me, New AddSuppressionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CancelAppropriateCertificate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelAppropriateCertificate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CancelAppropriateCertificate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelAppropriateCertificateAsync(ByVal pXMLParams As String)
            Me.CancelAppropriateCertificateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelAppropriateCertificateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CancelAppropriateCertificateOperationCompleted Is Nothing) Then
                Me.CancelAppropriateCertificateOperationCompleted = AddressOf Me.OnCancelAppropriateCertificateOperationCompleted
            End If
            Me.InvokeAsync("CancelAppropriateCertificate", New Object() {pXMLParams}, Me.CancelAppropriateCertificateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelAppropriateCertificateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelAppropriateCertificateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelAppropriateCertificateCompleted(Me, New CancelAppropriateCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CancelEventBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelEventBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CancelEventBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelEventBookingAsync(ByVal pXMLParams As String)
            Me.CancelEventBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelEventBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CancelEventBookingOperationCompleted Is Nothing) Then
                Me.CancelEventBookingOperationCompleted = AddressOf Me.OnCancelEventBookingOperationCompleted
            End If
            Me.InvokeAsync("CancelEventBooking", New Object() {pXMLParams}, Me.CancelEventBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelEventBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelEventBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelEventBookingCompleted(Me, New CancelEventBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CancelGiftAidDeclaration", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelGiftAidDeclaration(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CancelGiftAidDeclaration", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelGiftAidDeclarationAsync(ByVal pXMLParams As String)
            Me.CancelGiftAidDeclarationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelGiftAidDeclarationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CancelGiftAidDeclarationOperationCompleted Is Nothing) Then
                Me.CancelGiftAidDeclarationOperationCompleted = AddressOf Me.OnCancelGiftAidDeclarationOperationCompleted
            End If
            Me.InvokeAsync("CancelGiftAidDeclaration", New Object() {pXMLParams}, Me.CancelGiftAidDeclarationOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelGiftAidDeclarationOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelGiftAidDeclarationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelGiftAidDeclarationCompleted(Me, New CancelGiftAidDeclarationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CancelServiceBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelServiceBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CancelServiceBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelServiceBookingAsync(ByVal pXMLParams As String)
            Me.CancelServiceBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelServiceBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CancelServiceBookingOperationCompleted Is Nothing) Then
                Me.CancelServiceBookingOperationCompleted = AddressOf Me.OnCancelServiceBookingOperationCompleted
            End If
            Me.InvokeAsync("CancelServiceBooking", New Object() {pXMLParams}, Me.CancelServiceBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelServiceBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelServiceBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelServiceBookingCompleted(Me, New CancelServiceBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ConfirmCardSaleTransaction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConfirmCardSaleTransaction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ConfirmCardSaleTransaction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConfirmCardSaleTransactionAsync(ByVal pXMLParams As String)
            Me.ConfirmCardSaleTransactionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConfirmCardSaleTransactionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ConfirmCardSaleTransactionOperationCompleted Is Nothing) Then
                Me.ConfirmCardSaleTransactionOperationCompleted = AddressOf Me.OnConfirmCardSaleTransactionOperationCompleted
            End If
            Me.InvokeAsync("ConfirmCardSaleTransaction", New Object() {pXMLParams}, Me.ConfirmCardSaleTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnConfirmCardSaleTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConfirmCardSaleTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConfirmCardSaleTransactionCompleted(Me, New ConfirmCardSaleTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ConfirmCashSaleTransaction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConfirmCashSaleTransaction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ConfirmCashSaleTransaction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConfirmCashSaleTransactionAsync(ByVal pXMLParams As String)
            Me.ConfirmCashSaleTransactionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConfirmCashSaleTransactionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ConfirmCashSaleTransactionOperationCompleted Is Nothing) Then
                Me.ConfirmCashSaleTransactionOperationCompleted = AddressOf Me.OnConfirmCashSaleTransactionOperationCompleted
            End If
            Me.InvokeAsync("ConfirmCashSaleTransaction", New Object() {pXMLParams}, Me.ConfirmCashSaleTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnConfirmCashSaleTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConfirmCashSaleTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConfirmCashSaleTransactionCompleted(Me, New ConfirmCashSaleTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ConfirmCreditSaleTransaction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConfirmCreditSaleTransaction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ConfirmCreditSaleTransaction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConfirmCreditSaleTransactionAsync(ByVal pXMLParams As String)
            Me.ConfirmCreditSaleTransactionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConfirmCreditSaleTransactionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ConfirmCreditSaleTransactionOperationCompleted Is Nothing) Then
                Me.ConfirmCreditSaleTransactionOperationCompleted = AddressOf Me.OnConfirmCreditSaleTransactionOperationCompleted
            End If
            Me.InvokeAsync("ConfirmCreditSaleTransaction", New Object() {pXMLParams}, Me.ConfirmCreditSaleTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnConfirmCreditSaleTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConfirmCreditSaleTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConfirmCreditSaleTransactionCompleted(Me, New ConfirmCreditSaleTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ConfirmCreditAndCardSaleTransaction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConfirmCreditAndCardSaleTransaction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ConfirmCreditAndCardSaleTransaction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConfirmCreditAndCardSaleTransactionAsync(ByVal pXMLParams As String)
            Me.ConfirmCreditAndCardSaleTransactionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConfirmCreditAndCardSaleTransactionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ConfirmCreditAndCardSaleTransactionOperationCompleted Is Nothing) Then
                Me.ConfirmCreditAndCardSaleTransactionOperationCompleted = AddressOf Me.OnConfirmCreditAndCardSaleTransactionOperationCompleted
            End If
            Me.InvokeAsync("ConfirmCreditAndCardSaleTransaction", New Object() {pXMLParams}, Me.ConfirmCreditAndCardSaleTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnConfirmCreditAndCardSaleTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConfirmCreditAndCardSaleTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConfirmCreditAndCardSaleTransactionCompleted(Me, New ConfirmCreditAndCardSaleTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetCriteriaVariableControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCriteriaVariableControls(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetCriteriaVariableControls", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCriteriaVariableControlsAsync(ByVal pXMLParams As String)
            Me.GetCriteriaVariableControlsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCriteriaVariableControlsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetCriteriaVariableControlsOperationCompleted Is Nothing) Then
                Me.GetCriteriaVariableControlsOperationCompleted = AddressOf Me.OnGetCriteriaVariableControlsOperationCompleted
            End If
            Me.InvokeAsync("GetCriteriaVariableControls", New Object() {pXMLParams}, Me.GetCriteriaVariableControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCriteriaVariableControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCriteriaVariableControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCriteriaVariableControlsCompleted(Me, New GetCriteriaVariableControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SaveListManagerSelection", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveListManagerSelection(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SaveListManagerSelection", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveListManagerSelectionAsync(ByVal pXMLParams As String)
            Me.SaveListManagerSelectionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveListManagerSelectionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SaveListManagerSelectionOperationCompleted Is Nothing) Then
                Me.SaveListManagerSelectionOperationCompleted = AddressOf Me.OnSaveListManagerSelectionOperationCompleted
            End If
            Me.InvokeAsync("SaveListManagerSelection", New Object() {pXMLParams}, Me.SaveListManagerSelectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveListManagerSelectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveListManagerSelectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveListManagerSelectionCompleted(Me, New SaveListManagerSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddErrorLog", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddErrorLog(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddErrorLog", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddErrorLogAsync(ByVal pXMLParams As String)
            Me.AddErrorLogAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddErrorLogAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddErrorLogOperationCompleted Is Nothing) Then
                Me.AddErrorLogOperationCompleted = AddressOf Me.OnAddErrorLogOperationCompleted
            End If
            Me.InvokeAsync("AddErrorLog", New Object() {pXMLParams}, Me.AddErrorLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddErrorLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddErrorLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddErrorLogCompleted(Me, New AddErrorLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddContactEmailing", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddContactEmailing(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddContactEmailing", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddContactEmailingAsync(ByVal pXMLParams As String)
            Me.AddContactEmailingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddContactEmailingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddContactEmailingOperationCompleted Is Nothing) Then
                Me.AddContactEmailingOperationCompleted = AddressOf Me.OnAddContactEmailingOperationCompleted
            End If
            Me.InvokeAsync("AddContactEmailing", New Object() {pXMLParams}, Me.AddContactEmailingOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddContactEmailingOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddContactEmailingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddContactEmailingCompleted(Me, New AddContactEmailingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddContactMailing", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddContactMailing(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddContactMailing", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddContactMailingAsync(ByVal pXMLParams As String)
            Me.AddContactMailingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddContactMailingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddContactMailingOperationCompleted Is Nothing) Then
                Me.AddContactMailingOperationCompleted = AddressOf Me.OnAddContactMailingOperationCompleted
            End If
            Me.InvokeAsync("AddContactMailing", New Object() {pXMLParams}, Me.AddContactMailingOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddContactMailingOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddContactMailingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddContactMailingCompleted(Me, New AddContactMailingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddMailing", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMailing(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddMailing", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMailingAsync(ByVal pXMLParams As String)
            Me.AddMailingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMailingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddMailingOperationCompleted Is Nothing) Then
                Me.AddMailingOperationCompleted = AddressOf Me.OnAddMailingOperationCompleted
            End If
            Me.InvokeAsync("AddMailing", New Object() {pXMLParams}, Me.AddMailingOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMailingOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMailingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMailingCompleted(Me, New AddMailingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddMailingHistory", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMailingHistory(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddMailingHistory", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMailingHistoryAsync(ByVal pXMLParams As String)
            Me.AddMailingHistoryAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMailingHistoryAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddMailingHistoryOperationCompleted Is Nothing) Then
                Me.AddMailingHistoryOperationCompleted = AddressOf Me.OnAddMailingHistoryOperationCompleted
            End If
            Me.InvokeAsync("AddMailingHistory", New Object() {pXMLParams}, Me.AddMailingHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMailingHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMailingHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMailingHistoryCompleted(Me, New AddMailingHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindActions", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindActions(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindActions", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindActionsAsync(ByVal pXMLParams As String)
            Me.FindActionsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindActionsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindActionsOperationCompleted Is Nothing) Then
                Me.FindActionsOperationCompleted = AddressOf Me.OnFindActionsOperationCompleted
            End If
            Me.InvokeAsync("FindActions", New Object() {pXMLParams}, Me.FindActionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindActionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindActionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindActionsCompleted(Me, New FindActionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindAppealCollections", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindAppealCollections(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindAppealCollections", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindAppealCollectionsAsync(ByVal pXMLParams As String)
            Me.FindAppealCollectionsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindAppealCollectionsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindAppealCollectionsOperationCompleted Is Nothing) Then
                Me.FindAppealCollectionsOperationCompleted = AddressOf Me.OnFindAppealCollectionsOperationCompleted
            End If
            Me.InvokeAsync("FindAppealCollections", New Object() {pXMLParams}, Me.FindAppealCollectionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindAppealCollectionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindAppealCollectionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindAppealCollectionsCompleted(Me, New FindAppealCollectionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindBatches", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindBatches(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindBatches", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindBatchesAsync(ByVal pXMLParams As String)
            Me.FindBatchesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindBatchesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindBatchesOperationCompleted Is Nothing) Then
                Me.FindBatchesOperationCompleted = AddressOf Me.OnFindBatchesOperationCompleted
            End If
            Me.InvokeAsync("FindBatches", New Object() {pXMLParams}, Me.FindBatchesOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindBatchesOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindBatchesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindBatchesCompleted(Me, New FindBatchesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindCampaignAppeals", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindCampaignAppeals(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindCampaignAppeals", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindCampaignAppealsAsync(ByVal pXMLParams As String)
            Me.FindCampaignAppealsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindCampaignAppealsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindCampaignAppealsOperationCompleted Is Nothing) Then
                Me.FindCampaignAppealsOperationCompleted = AddressOf Me.OnFindCampaignAppealsOperationCompleted
            End If
            Me.InvokeAsync("FindCampaignAppeals", New Object() {pXMLParams}, Me.FindCampaignAppealsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindCampaignAppealsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindCampaignAppealsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindCampaignAppealsCompleted(Me, New FindCampaignAppealsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindCampaignCollections", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindCampaignCollections(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindCampaignCollections", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindCampaignCollectionsAsync(ByVal pXMLParams As String)
            Me.FindCampaignCollectionsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindCampaignCollectionsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindCampaignCollectionsOperationCompleted Is Nothing) Then
                Me.FindCampaignCollectionsOperationCompleted = AddressOf Me.OnFindCampaignCollectionsOperationCompleted
            End If
            Me.InvokeAsync("FindCampaignCollections", New Object() {pXMLParams}, Me.FindCampaignCollectionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindCampaignCollectionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindCampaignCollectionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindCampaignCollectionsCompleted(Me, New FindCampaignCollectionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindCampaigns", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindCampaigns(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindCampaigns", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindCampaignsAsync(ByVal pXMLParams As String)
            Me.FindCampaignsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindCampaignsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindCampaignsOperationCompleted Is Nothing) Then
                Me.FindCampaignsOperationCompleted = AddressOf Me.OnFindCampaignsOperationCompleted
            End If
            Me.InvokeAsync("FindCampaigns", New Object() {pXMLParams}, Me.FindCampaignsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindCampaignsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindCampaignsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindCampaignsCompleted(Me, New FindCampaignsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindCampaignSegments", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindCampaignSegments(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindCampaignSegments", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindCampaignSegmentsAsync(ByVal pXMLParams As String)
            Me.FindCampaignSegmentsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindCampaignSegmentsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindCampaignSegmentsOperationCompleted Is Nothing) Then
                Me.FindCampaignSegmentsOperationCompleted = AddressOf Me.OnFindCampaignSegmentsOperationCompleted
            End If
            Me.InvokeAsync("FindCampaignSegments", New Object() {pXMLParams}, Me.FindCampaignSegmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindCampaignSegmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindCampaignSegmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindCampaignSegmentsCompleted(Me, New FindCampaignSegmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindCovenants", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindCovenants(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindCovenants", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindCovenantsAsync(ByVal pXMLParams As String)
            Me.FindCovenantsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindCovenantsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindCovenantsOperationCompleted Is Nothing) Then
                Me.FindCovenantsOperationCompleted = AddressOf Me.OnFindCovenantsOperationCompleted
            End If
            Me.InvokeAsync("FindCovenants", New Object() {pXMLParams}, Me.FindCovenantsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindCovenantsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindCovenantsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindCovenantsCompleted(Me, New FindCovenantsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindCreditCardAuthorities", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindCreditCardAuthorities(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindCreditCardAuthorities", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindCreditCardAuthoritiesAsync(ByVal pXMLParams As String)
            Me.FindCreditCardAuthoritiesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindCreditCardAuthoritiesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindCreditCardAuthoritiesOperationCompleted Is Nothing) Then
                Me.FindCreditCardAuthoritiesOperationCompleted = AddressOf Me.OnFindCreditCardAuthoritiesOperationCompleted
            End If
            Me.InvokeAsync("FindCreditCardAuthorities", New Object() {pXMLParams}, Me.FindCreditCardAuthoritiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindCreditCardAuthoritiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindCreditCardAuthoritiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindCreditCardAuthoritiesCompleted(Me, New FindCreditCardAuthoritiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindData(ByVal pDataFinderType As XMLDataFinderTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindData", New Object() {pDataFinderType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindDataAsync(ByVal pDataFinderType As XMLDataFinderTypes, ByVal pXMLParams As String)
            Me.FindDataAsync(pDataFinderType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindDataAsync(ByVal pDataFinderType As XMLDataFinderTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindDataOperationCompleted Is Nothing) Then
                Me.FindDataOperationCompleted = AddressOf Me.OnFindDataOperationCompleted
            End If
            Me.InvokeAsync("FindData", New Object() {pDataFinderType, pXMLParams}, Me.FindDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindDataCompleted(Me, New FindDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindDirectDebits", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindDirectDebits(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindDirectDebits", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindDirectDebitsAsync(ByVal pXMLParams As String)
            Me.FindDirectDebitsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindDirectDebitsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindDirectDebitsOperationCompleted Is Nothing) Then
                Me.FindDirectDebitsOperationCompleted = AddressOf Me.OnFindDirectDebitsOperationCompleted
            End If
            Me.InvokeAsync("FindDirectDebits", New Object() {pXMLParams}, Me.FindDirectDebitsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindDirectDebitsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindDirectDebitsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindDirectDebitsCompleted(Me, New FindDirectDebitsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindDocuments", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindDocuments(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindDocuments", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindDocumentsAsync(ByVal pXMLParams As String)
            Me.FindDocumentsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindDocumentsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindDocumentsOperationCompleted Is Nothing) Then
                Me.FindDocumentsOperationCompleted = AddressOf Me.OnFindDocumentsOperationCompleted
            End If
            Me.InvokeAsync("FindDocuments", New Object() {pXMLParams}, Me.FindDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindDocumentsCompleted(Me, New FindDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindExternalDocuments", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindExternalDocuments(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindExternalDocuments", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindExternalDocumentsAsync(ByVal pXMLParams As String)
            Me.FindExternalDocumentsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindExternalDocumentsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindExternalDocumentsOperationCompleted Is Nothing) Then
                Me.FindExternalDocumentsOperationCompleted = AddressOf Me.OnFindExternalDocumentsOperationCompleted
            End If
            Me.InvokeAsync("FindExternalDocuments", New Object() {pXMLParams}, Me.FindExternalDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindExternalDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindExternalDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindExternalDocumentsCompleted(Me, New FindExternalDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindDuplicateContacts", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindDuplicateContacts(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindDuplicateContacts", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindDuplicateContactsAsync(ByVal pXMLParams As String)
            Me.FindDuplicateContactsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindDuplicateContactsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindDuplicateContactsOperationCompleted Is Nothing) Then
                Me.FindDuplicateContactsOperationCompleted = AddressOf Me.OnFindDuplicateContactsOperationCompleted
            End If
            Me.InvokeAsync("FindDuplicateContacts", New Object() {pXMLParams}, Me.FindDuplicateContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindDuplicateContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindDuplicateContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindDuplicateContactsCompleted(Me, New FindDuplicateContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindDuplicateOrganisations", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindDuplicateOrganisations(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindDuplicateOrganisations", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindDuplicateOrganisationsAsync(ByVal pXMLParams As String)
            Me.FindDuplicateOrganisationsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindDuplicateOrganisationsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindDuplicateOrganisationsOperationCompleted Is Nothing) Then
                Me.FindDuplicateOrganisationsOperationCompleted = AddressOf Me.OnFindDuplicateOrganisationsOperationCompleted
            End If
            Me.InvokeAsync("FindDuplicateOrganisations", New Object() {pXMLParams}, Me.FindDuplicateOrganisationsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindDuplicateOrganisationsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindDuplicateOrganisationsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindDuplicateOrganisationsCompleted(Me, New FindDuplicateOrganisationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindEvents", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindEvents(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindEvents", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindEventsAsync(ByVal pXMLParams As String)
            Me.FindEventsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindEventsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindEventsOperationCompleted Is Nothing) Then
                Me.FindEventsOperationCompleted = AddressOf Me.OnFindEventsOperationCompleted
            End If
            Me.InvokeAsync("FindEvents", New Object() {pXMLParams}, Me.FindEventsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindEventsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindEventsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindEventsCompleted(Me, New FindEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindGiftAidDeclarations", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindGiftAidDeclarations(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindGiftAidDeclarations", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindGiftAidDeclarationsAsync(ByVal pXMLParams As String)
            Me.FindGiftAidDeclarationsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindGiftAidDeclarationsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindGiftAidDeclarationsOperationCompleted Is Nothing) Then
                Me.FindGiftAidDeclarationsOperationCompleted = AddressOf Me.OnFindGiftAidDeclarationsOperationCompleted
            End If
            Me.InvokeAsync("FindGiftAidDeclarations", New Object() {pXMLParams}, Me.FindGiftAidDeclarationsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindGiftAidDeclarationsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindGiftAidDeclarationsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindGiftAidDeclarationsCompleted(Me, New FindGiftAidDeclarationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindInternalResources", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindInternalResources(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindInternalResources", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindInternalResourcesAsync(ByVal pXMLParams As String)
            Me.FindInternalResourcesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindInternalResourcesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindInternalResourcesOperationCompleted Is Nothing) Then
                Me.FindInternalResourcesOperationCompleted = AddressOf Me.OnFindInternalResourcesOperationCompleted
            End If
            Me.InvokeAsync("FindInternalResources", New Object() {pXMLParams}, Me.FindInternalResourcesOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindInternalResourcesOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindInternalResourcesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindInternalResourcesCompleted(Me, New FindInternalResourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindInUniservPhoneBook", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindInUniservPhoneBook(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindInUniservPhoneBook", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindInUniservPhoneBookAsync(ByVal pXMLParams As String)
            Me.FindInUniservPhoneBookAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindInUniservPhoneBookAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindInUniservPhoneBookOperationCompleted Is Nothing) Then
                Me.FindInUniservPhoneBookOperationCompleted = AddressOf Me.OnFindInUniservPhoneBookOperationCompleted
            End If
            Me.InvokeAsync("FindInUniservPhoneBook", New Object() {pXMLParams}, Me.FindInUniservPhoneBookOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindInUniservPhoneBookOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindInUniservPhoneBookCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindInUniservPhoneBookCompleted(Me, New FindInUniservPhoneBookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindInvoiceCreditNotes", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindInvoiceCreditNotes(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindInvoiceCreditNotes", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindInvoiceCreditNotesAsync(ByVal pXMLParams As String)
            Me.FindInvoiceCreditNotesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindInvoiceCreditNotesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindInvoiceCreditNotesOperationCompleted Is Nothing) Then
                Me.FindInvoiceCreditNotesOperationCompleted = AddressOf Me.OnFindInvoiceCreditNotesOperationCompleted
            End If
            Me.InvokeAsync("FindInvoiceCreditNotes", New Object() {pXMLParams}, Me.FindInvoiceCreditNotesOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindInvoiceCreditNotesOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindInvoiceCreditNotesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindInvoiceCreditNotesCompleted(Me, New FindInvoiceCreditNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindLegacies", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindLegacies(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindLegacies", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindLegaciesAsync(ByVal pXMLParams As String)
            Me.FindLegaciesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindLegaciesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindLegaciesOperationCompleted Is Nothing) Then
                Me.FindLegaciesOperationCompleted = AddressOf Me.OnFindLegaciesOperationCompleted
            End If
            Me.InvokeAsync("FindLegacies", New Object() {pXMLParams}, Me.FindLegaciesOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindLegaciesOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindLegaciesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindLegaciesCompleted(Me, New FindLegaciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindMembers", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindMembers(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindMembers", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindMembersAsync(ByVal pXMLParams As String)
            Me.FindMembersAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindMembersAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindMembersOperationCompleted Is Nothing) Then
                Me.FindMembersOperationCompleted = AddressOf Me.OnFindMembersOperationCompleted
            End If
            Me.InvokeAsync("FindMembers", New Object() {pXMLParams}, Me.FindMembersOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindMembersOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindMembersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindMembersCompleted(Me, New FindMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindPaymentPlans", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindPaymentPlans(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindPaymentPlans", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindPaymentPlansAsync(ByVal pXMLParams As String)
            Me.FindPaymentPlansAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindPaymentPlansAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindPaymentPlansOperationCompleted Is Nothing) Then
                Me.FindPaymentPlansOperationCompleted = AddressOf Me.OnFindPaymentPlansOperationCompleted
            End If
            Me.InvokeAsync("FindPaymentPlans", New Object() {pXMLParams}, Me.FindPaymentPlansOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindPaymentPlansOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindPaymentPlansCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindPaymentPlansCompleted(Me, New FindPaymentPlansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindPayrollGivingPledges", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindPayrollGivingPledges(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindPayrollGivingPledges", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindPayrollGivingPledgesAsync(ByVal pXMLParams As String)
            Me.FindPayrollGivingPledgesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindPayrollGivingPledgesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindPayrollGivingPledgesOperationCompleted Is Nothing) Then
                Me.FindPayrollGivingPledgesOperationCompleted = AddressOf Me.OnFindPayrollGivingPledgesOperationCompleted
            End If
            Me.InvokeAsync("FindPayrollGivingPledges", New Object() {pXMLParams}, Me.FindPayrollGivingPledgesOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindPayrollGivingPledgesOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindPayrollGivingPledgesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindPayrollGivingPledgesCompleted(Me, New FindPayrollGivingPledgesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindPostTaxPayrollGivingPledges", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindPostTaxPayrollGivingPledges(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindPostTaxPayrollGivingPledges", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindPostTaxPayrollGivingPledgesAsync(ByVal pXMLParams As String)
            Me.FindPostTaxPayrollGivingPledgesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindPostTaxPayrollGivingPledgesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindPostTaxPayrollGivingPledgesOperationCompleted Is Nothing) Then
                Me.FindPostTaxPayrollGivingPledgesOperationCompleted = AddressOf Me.OnFindPostTaxPayrollGivingPledgesOperationCompleted
            End If
            Me.InvokeAsync("FindPostTaxPayrollGivingPledges", New Object() {pXMLParams}, Me.FindPostTaxPayrollGivingPledgesOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindPostTaxPayrollGivingPledgesOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindPostTaxPayrollGivingPledgesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindPostTaxPayrollGivingPledgesCompleted(Me, New FindPostTaxPayrollGivingPledgesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindPreTaxPayrollGivingPledges", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindPreTaxPayrollGivingPledges(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindPreTaxPayrollGivingPledges", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindPreTaxPayrollGivingPledgesAsync(ByVal pXMLParams As String)
            Me.FindPreTaxPayrollGivingPledgesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindPreTaxPayrollGivingPledgesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindPreTaxPayrollGivingPledgesOperationCompleted Is Nothing) Then
                Me.FindPreTaxPayrollGivingPledgesOperationCompleted = AddressOf Me.OnFindPreTaxPayrollGivingPledgesOperationCompleted
            End If
            Me.InvokeAsync("FindPreTaxPayrollGivingPledges", New Object() {pXMLParams}, Me.FindPreTaxPayrollGivingPledgesOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindPreTaxPayrollGivingPledgesOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindPreTaxPayrollGivingPledgesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindPreTaxPayrollGivingPledgesCompleted(Me, New FindPreTaxPayrollGivingPledgesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindProducts", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindProducts(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindProducts", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindProductsAsync(ByVal pXMLParams As String)
            Me.FindProductsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindProductsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindProductsOperationCompleted Is Nothing) Then
                Me.FindProductsOperationCompleted = AddressOf Me.OnFindProductsOperationCompleted
            End If
            Me.InvokeAsync("FindProducts", New Object() {pXMLParams}, Me.FindProductsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindProductsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindProductsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindProductsCompleted(Me, New FindProductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindPurchaseOrders", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindPurchaseOrders(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindPurchaseOrders", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindPurchaseOrdersAsync(ByVal pXMLParams As String)
            Me.FindPurchaseOrdersAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindPurchaseOrdersAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindPurchaseOrdersOperationCompleted Is Nothing) Then
                Me.FindPurchaseOrdersOperationCompleted = AddressOf Me.OnFindPurchaseOrdersOperationCompleted
            End If
            Me.InvokeAsync("FindPurchaseOrders", New Object() {pXMLParams}, Me.FindPurchaseOrdersOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindPurchaseOrdersOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindPurchaseOrdersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindPurchaseOrdersCompleted(Me, New FindPurchaseOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindSelectionSets", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindSelectionSets(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindSelectionSets", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindSelectionSetsAsync(ByVal pXMLParams As String)
            Me.FindSelectionSetsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindSelectionSetsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindSelectionSetsOperationCompleted Is Nothing) Then
                Me.FindSelectionSetsOperationCompleted = AddressOf Me.OnFindSelectionSetsOperationCompleted
            End If
            Me.InvokeAsync("FindSelectionSets", New Object() {pXMLParams}, Me.FindSelectionSetsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindSelectionSetsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindSelectionSetsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindSelectionSetsCompleted(Me, New FindSelectionSetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindStandardDocuments", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindStandardDocuments(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindStandardDocuments", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindStandardDocumentsAsync(ByVal pXMLParams As String)
            Me.FindStandardDocumentsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindStandardDocumentsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindStandardDocumentsOperationCompleted Is Nothing) Then
                Me.FindStandardDocumentsOperationCompleted = AddressOf Me.OnFindStandardDocumentsOperationCompleted
            End If
            Me.InvokeAsync("FindStandardDocuments", New Object() {pXMLParams}, Me.FindStandardDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindStandardDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindStandardDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindStandardDocumentsCompleted(Me, New FindStandardDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindStandingOrders", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindStandingOrders(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindStandingOrders", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindStandingOrdersAsync(ByVal pXMLParams As String)
            Me.FindStandingOrdersAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindStandingOrdersAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindStandingOrdersOperationCompleted Is Nothing) Then
                Me.FindStandingOrdersOperationCompleted = AddressOf Me.OnFindStandingOrdersOperationCompleted
            End If
            Me.InvokeAsync("FindStandingOrders", New Object() {pXMLParams}, Me.FindStandingOrdersOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindStandingOrdersOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindStandingOrdersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindStandingOrdersCompleted(Me, New FindStandingOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindTransactions", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindTransactions(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindTransactions", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindTransactionsAsync(ByVal pXMLParams As String)
            Me.FindTransactionsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindTransactionsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindTransactionsOperationCompleted Is Nothing) Then
                Me.FindTransactionsOperationCompleted = AddressOf Me.OnFindTransactionsOperationCompleted
            End If
            Me.InvokeAsync("FindTransactions", New Object() {pXMLParams}, Me.FindTransactionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindTransactionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindTransactionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindTransactionsCompleted(Me, New FindTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetSurnamePrefix", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSurnamePrefix(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetSurnamePrefix", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSurnamePrefixAsync(ByVal pXMLParams As String)
            Me.GetSurnamePrefixAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSurnamePrefixAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetSurnamePrefixOperationCompleted Is Nothing) Then
                Me.GetSurnamePrefixOperationCompleted = AddressOf Me.OnGetSurnamePrefixOperationCompleted
            End If
            Me.InvokeAsync("GetSurnamePrefix", New Object() {pXMLParams}, Me.GetSurnamePrefixOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSurnamePrefixOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSurnamePrefixCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSurnamePrefixCompleted(Me, New GetSurnamePrefixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessListManagerMailing", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessListManagerMailing(ByVal pXMLParams As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ProcessListManagerMailing", New Object() {pXMLParams})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessListManagerMailingAsync(ByVal pXMLParams As String)
            Me.ProcessListManagerMailingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessListManagerMailingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ProcessListManagerMailingOperationCompleted Is Nothing) Then
                Me.ProcessListManagerMailingOperationCompleted = AddressOf Me.OnProcessListManagerMailingOperationCompleted
            End If
            Me.InvokeAsync("ProcessListManagerMailing", New Object() {pXMLParams}, Me.ProcessListManagerMailingOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessListManagerMailingOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessListManagerMailingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessListManagerMailingCompleted(Me, New ProcessListManagerMailingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessListManagerStep", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessListManagerStep(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ProcessListManagerStep", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessListManagerStepAsync(ByVal pXMLParams As String)
            Me.ProcessListManagerStepAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessListManagerStepAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ProcessListManagerStepOperationCompleted Is Nothing) Then
                Me.ProcessListManagerStepOperationCompleted = AddressOf Me.OnProcessListManagerStepOperationCompleted
            End If
            Me.InvokeAsync("ProcessListManagerStep", New Object() {pXMLParams}, Me.ProcessListManagerStepOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessListManagerStepOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessListManagerStepCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessListManagerStepCompleted(Me, New ProcessListManagerStepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectAddressData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectAddressData(ByVal pSelectDataType As XMLAddressDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectAddressData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectAddressDataAsync(ByVal pSelectDataType As XMLAddressDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectAddressDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectAddressDataAsync(ByVal pSelectDataType As XMLAddressDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectAddressDataOperationCompleted Is Nothing) Then
                Me.SelectAddressDataOperationCompleted = AddressOf Me.OnSelectAddressDataOperationCompleted
            End If
            Me.InvokeAsync("SelectAddressData", New Object() {pSelectDataType, pXMLParams}, Me.SelectAddressDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectAddressDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectAddressDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectAddressDataCompleted(Me, New SelectAddressDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectBankAccountData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectBankAccountData(ByVal pSelectDataType As XMLBankAccountDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectBankAccountData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectBankAccountDataAsync(ByVal pSelectDataType As XMLBankAccountDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectBankAccountDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectBankAccountDataAsync(ByVal pSelectDataType As XMLBankAccountDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectBankAccountDataOperationCompleted Is Nothing) Then
                Me.SelectBankAccountDataOperationCompleted = AddressOf Me.OnSelectBankAccountDataOperationCompleted
            End If
            Me.InvokeAsync("SelectBankAccountData", New Object() {pSelectDataType, pXMLParams}, Me.SelectBankAccountDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectBankAccountDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectBankAccountDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectBankAccountDataCompleted(Me, New SelectBankAccountDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectCampaignData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectCampaignData(ByVal pSelectDataType As XMLCampaignDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectCampaignData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectCampaignDataAsync(ByVal pSelectDataType As XMLCampaignDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectCampaignDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectCampaignDataAsync(ByVal pSelectDataType As XMLCampaignDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectCampaignDataOperationCompleted Is Nothing) Then
                Me.SelectCampaignDataOperationCompleted = AddressOf Me.OnSelectCampaignDataOperationCompleted
            End If
            Me.InvokeAsync("SelectCampaignData", New Object() {pSelectDataType, pXMLParams}, Me.SelectCampaignDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectCampaignDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectCampaignDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectCampaignDataCompleted(Me, New SelectCampaignDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectSystemModuleUsersData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectSystemModuleUsersData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectSystemModuleUsersData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectSystemModuleUsersDataAsync(ByVal pXMLParams As String)
            Me.SelectSystemModuleUsersDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectSystemModuleUsersDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectSystemModuleUsersDataOperationCompleted Is Nothing) Then
                Me.SelectSystemModuleUsersDataOperationCompleted = AddressOf Me.OnSelectSystemModuleUsersDataOperationCompleted
            End If
            Me.InvokeAsync("SelectSystemModuleUsersData", New Object() {pXMLParams}, Me.SelectSystemModuleUsersDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectSystemModuleUsersDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectSystemModuleUsersDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectSystemModuleUsersDataCompleted(Me, New SelectSystemModuleUsersDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectContactData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectContactData(ByVal pSelectDataType As XMLContactDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectContactData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectContactDataAsync(ByVal pSelectDataType As XMLContactDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectContactDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectContactDataAsync(ByVal pSelectDataType As XMLContactDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectContactDataOperationCompleted Is Nothing) Then
                Me.SelectContactDataOperationCompleted = AddressOf Me.OnSelectContactDataOperationCompleted
            End If
            Me.InvokeAsync("SelectContactData", New Object() {pSelectDataType, pXMLParams}, Me.SelectContactDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectContactDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectContactDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectContactDataCompleted(Me, New SelectContactDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateActivityAsync(ByVal pXMLParams As String)
            Me.UpdateActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateActivityOperationCompleted Is Nothing) Then
                Me.UpdateActivityOperationCompleted = AddressOf Me.OnUpdateActivityOperationCompleted
            End If
            Me.InvokeAsync("UpdateActivity", New Object() {pXMLParams}, Me.UpdateActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateActivityCompleted(Me, New UpdateActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateAddress", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAddress(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateAddress", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAddressAsync(ByVal pXMLParams As String)
            Me.UpdateAddressAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAddressAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateAddressOperationCompleted Is Nothing) Then
                Me.UpdateAddressOperationCompleted = AddressOf Me.OnUpdateAddressOperationCompleted
            End If
            Me.InvokeAsync("UpdateAddress", New Object() {pXMLParams}, Me.UpdateAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAddressCompleted(Me, New UpdateAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateAddressUsage", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAddressUsage(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateAddressUsage", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAddressUsageAsync(ByVal pXMLParams As String)
            Me.UpdateAddressUsageAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAddressUsageAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateAddressUsageOperationCompleted Is Nothing) Then
                Me.UpdateAddressUsageOperationCompleted = AddressOf Me.OnUpdateAddressUsageOperationCompleted
            End If
            Me.InvokeAsync("UpdateAddressUsage", New Object() {pXMLParams}, Me.UpdateAddressUsageOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAddressUsageOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAddressUsageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAddressUsageCompleted(Me, New UpdateAddressUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateAppointment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAppointment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateAppointment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAppointmentAsync(ByVal pXMLParams As String)
            Me.UpdateAppointmentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAppointmentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateAppointmentOperationCompleted Is Nothing) Then
                Me.UpdateAppointmentOperationCompleted = AddressOf Me.OnUpdateAppointmentOperationCompleted
            End If
            Me.InvokeAsync("UpdateAppointment", New Object() {pXMLParams}, Me.UpdateAppointmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAppointmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAppointmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAppointmentCompleted(Me, New UpdateAppointmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateAppropriateCertificate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAppropriateCertificate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateAppropriateCertificate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAppropriateCertificateAsync(ByVal pXMLParams As String)
            Me.UpdateAppropriateCertificateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAppropriateCertificateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateAppropriateCertificateOperationCompleted Is Nothing) Then
                Me.UpdateAppropriateCertificateOperationCompleted = AddressOf Me.OnUpdateAppropriateCertificateOperationCompleted
            End If
            Me.InvokeAsync("UpdateAppropriateCertificate", New Object() {pXMLParams}, Me.UpdateAppropriateCertificateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAppropriateCertificateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAppropriateCertificateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAppropriateCertificateCompleted(Me, New UpdateAppropriateCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCommunicationsLog", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCommunicationsLog(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCommunicationsLog", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCommunicationsLogAsync(ByVal pXMLParams As String)
            Me.UpdateCommunicationsLogAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCommunicationsLogAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCommunicationsLogOperationCompleted Is Nothing) Then
                Me.UpdateCommunicationsLogOperationCompleted = AddressOf Me.OnUpdateCommunicationsLogOperationCompleted
            End If
            Me.InvokeAsync("UpdateCommunicationsLog", New Object() {pXMLParams}, Me.UpdateCommunicationsLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCommunicationsLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCommunicationsLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCommunicationsLogCompleted(Me, New UpdateCommunicationsLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/LockDocument", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LockDocument(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("LockDocument", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LockDocumentAsync(ByVal pXMLParams As String)
            Me.LockDocumentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LockDocumentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.LockDocumentOperationCompleted Is Nothing) Then
                Me.LockDocumentOperationCompleted = AddressOf Me.OnLockDocumentOperationCompleted
            End If
            Me.InvokeAsync("LockDocument", New Object() {pXMLParams}, Me.LockDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnLockDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.LockDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LockDocumentCompleted(Me, New LockDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCheque", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCheque(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCheque", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateChequeAsync(ByVal pXMLParams As String)
            Me.UpdateChequeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateChequeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateChequeOperationCompleted Is Nothing) Then
                Me.UpdateChequeOperationCompleted = AddressOf Me.OnUpdateChequeOperationCompleted
            End If
            Me.InvokeAsync("UpdateCheque", New Object() {pXMLParams}, Me.UpdateChequeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateChequeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateChequeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateChequeCompleted(Me, New UpdateChequeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCommunicationsLogLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCommunicationsLogLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCommunicationsLogLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCommunicationsLogLinkAsync(ByVal pXMLParams As String)
            Me.UpdateCommunicationsLogLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCommunicationsLogLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCommunicationsLogLinkOperationCompleted Is Nothing) Then
                Me.UpdateCommunicationsLogLinkOperationCompleted = AddressOf Me.OnUpdateCommunicationsLogLinkOperationCompleted
            End If
            Me.InvokeAsync("UpdateCommunicationsLogLink", New Object() {pXMLParams}, Me.UpdateCommunicationsLogLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCommunicationsLogLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCommunicationsLogLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCommunicationsLogLinkCompleted(Me, New UpdateCommunicationsLogLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCommunicationsLogSubject", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCommunicationsLogSubject(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCommunicationsLogSubject", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCommunicationsLogSubjectAsync(ByVal pXMLParams As String)
            Me.UpdateCommunicationsLogSubjectAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCommunicationsLogSubjectAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCommunicationsLogSubjectOperationCompleted Is Nothing) Then
                Me.UpdateCommunicationsLogSubjectOperationCompleted = AddressOf Me.OnUpdateCommunicationsLogSubjectOperationCompleted
            End If
            Me.InvokeAsync("UpdateCommunicationsLogSubject", New Object() {pXMLParams}, Me.UpdateCommunicationsLogSubjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCommunicationsLogSubjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCommunicationsLogSubjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCommunicationsLogSubjectCompleted(Me, New UpdateCommunicationsLogSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCommunicationsNumber", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCommunicationsNumber(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCommunicationsNumber", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCommunicationsNumberAsync(ByVal pXMLParams As String)
            Me.UpdateCommunicationsNumberAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCommunicationsNumberAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCommunicationsNumberOperationCompleted Is Nothing) Then
                Me.UpdateCommunicationsNumberOperationCompleted = AddressOf Me.OnUpdateCommunicationsNumberOperationCompleted
            End If
            Me.InvokeAsync("UpdateCommunicationsNumber", New Object() {pXMLParams}, Me.UpdateCommunicationsNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCommunicationsNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCommunicationsNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCommunicationsNumberCompleted(Me, New UpdateCommunicationsNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCommunicationsNumbersAddress", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCommunicationsNumbersAddress(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCommunicationsNumbersAddress", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCommunicationsNumbersAddressAsync(ByVal pXMLParams As String)
            Me.UpdateCommunicationsNumbersAddressAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCommunicationsNumbersAddressAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCommunicationsNumbersAddressOperationCompleted Is Nothing) Then
                Me.UpdateCommunicationsNumbersAddressOperationCompleted = AddressOf Me.OnUpdateCommunicationsNumbersAddressOperationCompleted
            End If
            Me.InvokeAsync("UpdateCommunicationsNumbersAddress", New Object() {pXMLParams}, Me.UpdateCommunicationsNumbersAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCommunicationsNumbersAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCommunicationsNumbersAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCommunicationsNumbersAddressCompleted(Me, New UpdateCommunicationsNumbersAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCommunicationUsage", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCommunicationUsage(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCommunicationUsage", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCommunicationUsageAsync(ByVal pXMLParams As String)
            Me.UpdateCommunicationUsageAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCommunicationUsageAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCommunicationUsageOperationCompleted Is Nothing) Then
                Me.UpdateCommunicationUsageOperationCompleted = AddressOf Me.OnUpdateCommunicationUsageOperationCompleted
            End If
            Me.InvokeAsync("UpdateCommunicationUsage", New Object() {pXMLParams}, Me.UpdateCommunicationUsageOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCommunicationUsageOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCommunicationUsageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCommunicationUsageCompleted(Me, New UpdateCommunicationUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactAsync(ByVal pXMLParams As String)
            Me.UpdateContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateContactOperationCompleted Is Nothing) Then
                Me.UpdateContactOperationCompleted = AddressOf Me.OnUpdateContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateContact", New Object() {pXMLParams}, Me.UpdateContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactCompleted(Me, New UpdateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateContactAccount", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactAccount(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateContactAccount", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactAccountAsync(ByVal pXMLParams As String)
            Me.UpdateContactAccountAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactAccountAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateContactAccountOperationCompleted Is Nothing) Then
                Me.UpdateContactAccountOperationCompleted = AddressOf Me.OnUpdateContactAccountOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactAccount", New Object() {pXMLParams}, Me.UpdateContactAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactAccountCompleted(Me, New UpdateContactAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateContactFundraisingEvent", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactFundraisingEvent(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateContactFundraisingEvent", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactFundraisingEventAsync(ByVal pXMLParams As String)
            Me.UpdateContactFundraisingEventAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactFundraisingEventAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateContactFundraisingEventOperationCompleted Is Nothing) Then
                Me.UpdateContactFundraisingEventOperationCompleted = AddressOf Me.OnUpdateContactFundraisingEventOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactFundraisingEvent", New Object() {pXMLParams}, Me.UpdateContactFundraisingEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactFundraisingEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactFundraisingEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactFundraisingEventCompleted(Me, New UpdateContactFundraisingEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCreditCard", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCreditCard(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCreditCard", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditCardAsync(ByVal pXMLParams As String)
            Me.UpdateCreditCardAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditCardAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCreditCardOperationCompleted Is Nothing) Then
                Me.UpdateCreditCardOperationCompleted = AddressOf Me.OnUpdateCreditCardOperationCompleted
            End If
            Me.InvokeAsync("UpdateCreditCard", New Object() {pXMLParams}, Me.UpdateCreditCardOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCreditCardOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCreditCardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCreditCardCompleted(Me, New UpdateCreditCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCreditCardAuthority", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCreditCardAuthority(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCreditCardAuthority", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditCardAuthorityAsync(ByVal pXMLParams As String)
            Me.UpdateCreditCardAuthorityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditCardAuthorityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCreditCardAuthorityOperationCompleted Is Nothing) Then
                Me.UpdateCreditCardAuthorityOperationCompleted = AddressOf Me.OnUpdateCreditCardAuthorityOperationCompleted
            End If
            Me.InvokeAsync("UpdateCreditCardAuthority", New Object() {pXMLParams}, Me.UpdateCreditCardAuthorityOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCreditCardAuthorityOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCreditCardAuthorityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCreditCardAuthorityCompleted(Me, New UpdateCreditCardAuthorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCreditCustomer", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCreditCustomer(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCreditCustomer", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditCustomerAsync(ByVal pXMLParams As String)
            Me.UpdateCreditCustomerAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditCustomerAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCreditCustomerOperationCompleted Is Nothing) Then
                Me.UpdateCreditCustomerOperationCompleted = AddressOf Me.OnUpdateCreditCustomerOperationCompleted
            End If
            Me.InvokeAsync("UpdateCreditCustomer", New Object() {pXMLParams}, Me.UpdateCreditCustomerOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCreditCustomerOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCreditCustomerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCreditCustomerCompleted(Me, New UpdateCreditCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCriteriaSet", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCriteriaSet(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCriteriaSet", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCriteriaSetAsync(ByVal pXMLParams As String)
            Me.UpdateCriteriaSetAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCriteriaSetAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCriteriaSetOperationCompleted Is Nothing) Then
                Me.UpdateCriteriaSetOperationCompleted = AddressOf Me.OnUpdateCriteriaSetOperationCompleted
            End If
            Me.InvokeAsync("UpdateCriteriaSet", New Object() {pXMLParams}, Me.UpdateCriteriaSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCriteriaSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCriteriaSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCriteriaSetCompleted(Me, New UpdateCriteriaSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCustomFormData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCustomFormData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCustomFormData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCustomFormDataAsync(ByVal pXMLParams As String)
            Me.UpdateCustomFormDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCustomFormDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCustomFormDataOperationCompleted Is Nothing) Then
                Me.UpdateCustomFormDataOperationCompleted = AddressOf Me.OnUpdateCustomFormDataOperationCompleted
            End If
            Me.InvokeAsync("UpdateCustomFormData", New Object() {pXMLParams}, Me.UpdateCustomFormDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCustomFormDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCustomFormDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCustomFormDataCompleted(Me, New UpdateCustomFormDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateDepartmentNotes", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDepartmentNotes(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateDepartmentNotes", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDepartmentNotesAsync(ByVal pXMLParams As String)
            Me.UpdateDepartmentNotesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDepartmentNotesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateDepartmentNotesOperationCompleted Is Nothing) Then
                Me.UpdateDepartmentNotesOperationCompleted = AddressOf Me.OnUpdateDepartmentNotesOperationCompleted
            End If
            Me.InvokeAsync("UpdateDepartmentNotes", New Object() {pXMLParams}, Me.UpdateDepartmentNotesOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDepartmentNotesOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDepartmentNotesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDepartmentNotesCompleted(Me, New UpdateDepartmentNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateDirectDebit", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDirectDebit(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateDirectDebit", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDirectDebitAsync(ByVal pXMLParams As String)
            Me.UpdateDirectDebitAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDirectDebitAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateDirectDebitOperationCompleted Is Nothing) Then
                Me.UpdateDirectDebitOperationCompleted = AddressOf Me.OnUpdateDirectDebitOperationCompleted
            End If
            Me.InvokeAsync("UpdateDirectDebit", New Object() {pXMLParams}, Me.UpdateDirectDebitOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDirectDebitOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDirectDebitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDirectDebitCompleted(Me, New UpdateDirectDebitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExternalReference", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExternalReference(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExternalReference", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExternalReferenceAsync(ByVal pXMLParams As String)
            Me.UpdateExternalReferenceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExternalReferenceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExternalReferenceOperationCompleted Is Nothing) Then
                Me.UpdateExternalReferenceOperationCompleted = AddressOf Me.OnUpdateExternalReferenceOperationCompleted
            End If
            Me.InvokeAsync("UpdateExternalReference", New Object() {pXMLParams}, Me.UpdateExternalReferenceOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExternalReferenceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExternalReferenceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExternalReferenceCompleted(Me, New UpdateExternalReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateFinancialHistory", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFinancialHistory(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateFinancialHistory", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFinancialHistoryAsync(ByVal pXMLParams As String)
            Me.UpdateFinancialHistoryAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFinancialHistoryAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateFinancialHistoryOperationCompleted Is Nothing) Then
                Me.UpdateFinancialHistoryOperationCompleted = AddressOf Me.OnUpdateFinancialHistoryOperationCompleted
            End If
            Me.InvokeAsync("UpdateFinancialHistory", New Object() {pXMLParams}, Me.UpdateFinancialHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFinancialHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFinancialHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFinancialHistoryCompleted(Me, New UpdateFinancialHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateFundraisingPaymentSchedule", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFundraisingPaymentSchedule(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateFundraisingPaymentSchedule", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFundraisingPaymentScheduleAsync(ByVal pXMLParams As String)
            Me.UpdateFundraisingPaymentScheduleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFundraisingPaymentScheduleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateFundraisingPaymentScheduleOperationCompleted Is Nothing) Then
                Me.UpdateFundraisingPaymentScheduleOperationCompleted = AddressOf Me.OnUpdateFundraisingPaymentScheduleOperationCompleted
            End If
            Me.InvokeAsync("UpdateFundraisingPaymentSchedule", New Object() {pXMLParams}, Me.UpdateFundraisingPaymentScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFundraisingPaymentScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFundraisingPaymentScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFundraisingPaymentScheduleCompleted(Me, New UpdateFundraisingPaymentScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateFundraisingRequest", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFundraisingRequest(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateFundraisingRequest", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFundraisingRequestAsync(ByVal pXMLParams As String)
            Me.UpdateFundraisingRequestAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFundraisingRequestAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateFundraisingRequestOperationCompleted Is Nothing) Then
                Me.UpdateFundraisingRequestOperationCompleted = AddressOf Me.OnUpdateFundraisingRequestOperationCompleted
            End If
            Me.InvokeAsync("UpdateFundraisingRequest", New Object() {pXMLParams}, Me.UpdateFundraisingRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFundraisingRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFundraisingRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFundraisingRequestCompleted(Me, New UpdateFundraisingRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateFutureMembershipType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFutureMembershipType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateFutureMembershipType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFutureMembershipTypeAsync(ByVal pXMLParams As String)
            Me.UpdateFutureMembershipTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFutureMembershipTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateFutureMembershipTypeOperationCompleted Is Nothing) Then
                Me.UpdateFutureMembershipTypeOperationCompleted = AddressOf Me.OnUpdateFutureMembershipTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateFutureMembershipType", New Object() {pXMLParams}, Me.UpdateFutureMembershipTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFutureMembershipTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFutureMembershipTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFutureMembershipTypeCompleted(Me, New UpdateFutureMembershipTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateGiftAidDeclaration", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateGiftAidDeclaration(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateGiftAidDeclaration", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateGiftAidDeclarationAsync(ByVal pXMLParams As String)
            Me.UpdateGiftAidDeclarationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGiftAidDeclarationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateGiftAidDeclarationOperationCompleted Is Nothing) Then
                Me.UpdateGiftAidDeclarationOperationCompleted = AddressOf Me.OnUpdateGiftAidDeclarationOperationCompleted
            End If
            Me.InvokeAsync("UpdateGiftAidDeclaration", New Object() {pXMLParams}, Me.UpdateGiftAidDeclarationOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateGiftAidDeclarationOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateGiftAidDeclarationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateGiftAidDeclarationCompleted(Me, New UpdateGiftAidDeclarationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateInvoice", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateInvoice(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateInvoice", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateInvoiceAsync(ByVal pXMLParams As String)
            Me.UpdateInvoiceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateInvoiceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateInvoiceOperationCompleted Is Nothing) Then
                Me.UpdateInvoiceOperationCompleted = AddressOf Me.OnUpdateInvoiceOperationCompleted
            End If
            Me.InvokeAsync("UpdateInvoice", New Object() {pXMLParams}, Me.UpdateInvoiceOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateInvoiceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateInvoiceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateInvoiceCompleted(Me, New UpdateInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLinkAsync(ByVal pXMLParams As String)
            Me.UpdateLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateLinkOperationCompleted Is Nothing) Then
                Me.UpdateLinkOperationCompleted = AddressOf Me.OnUpdateLinkOperationCompleted
            End If
            Me.InvokeAsync("UpdateLink", New Object() {pXMLParams}, Me.UpdateLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLinkCompleted(Me, New UpdateLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMember", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMember(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateMember", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMemberAsync(ByVal pXMLParams As String)
            Me.UpdateMemberAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMemberAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateMemberOperationCompleted Is Nothing) Then
                Me.UpdateMemberOperationCompleted = AddressOf Me.OnUpdateMemberOperationCompleted
            End If
            Me.InvokeAsync("UpdateMember", New Object() {pXMLParams}, Me.UpdateMemberOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMemberOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMemberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMemberCompleted(Me, New UpdateMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMaintenanceTables", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMaintenanceTables(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateMaintenanceTables", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMaintenanceTablesAsync(ByVal pXMLParams As String)
            Me.UpdateMaintenanceTablesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMaintenanceTablesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateMaintenanceTablesOperationCompleted Is Nothing) Then
                Me.UpdateMaintenanceTablesOperationCompleted = AddressOf Me.OnUpdateMaintenanceTablesOperationCompleted
            End If
            Me.InvokeAsync("UpdateMaintenanceTables", New Object() {pXMLParams}, Me.UpdateMaintenanceTablesOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMaintenanceTablesOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMaintenanceTablesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMaintenanceTablesCompleted(Me, New UpdateMaintenanceTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMembershipGroup", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMembershipGroup(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateMembershipGroup", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMembershipGroupAsync(ByVal pXMLParams As String)
            Me.UpdateMembershipGroupAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMembershipGroupAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateMembershipGroupOperationCompleted Is Nothing) Then
                Me.UpdateMembershipGroupOperationCompleted = AddressOf Me.OnUpdateMembershipGroupOperationCompleted
            End If
            Me.InvokeAsync("UpdateMembershipGroup", New Object() {pXMLParams}, Me.UpdateMembershipGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMembershipGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMembershipGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMembershipGroupCompleted(Me, New UpdateMembershipGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdatePosition", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePosition(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdatePosition", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePositionAsync(ByVal pXMLParams As String)
            Me.UpdatePositionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePositionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdatePositionOperationCompleted Is Nothing) Then
                Me.UpdatePositionOperationCompleted = AddressOf Me.OnUpdatePositionOperationCompleted
            End If
            Me.InvokeAsync("UpdatePosition", New Object() {pXMLParams}, Me.UpdatePositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePositionCompleted(Me, New UpdatePositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdatePositionActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePositionActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdatePositionActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePositionActivityAsync(ByVal pXMLParams As String)
            Me.UpdatePositionActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePositionActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdatePositionActivityOperationCompleted Is Nothing) Then
                Me.UpdatePositionActivityOperationCompleted = AddressOf Me.OnUpdatePositionActivityOperationCompleted
            End If
            Me.InvokeAsync("UpdatePositionActivity", New Object() {pXMLParams}, Me.UpdatePositionActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePositionActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePositionActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePositionActivityCompleted(Me, New UpdatePositionActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdatePositionLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePositionLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdatePositionLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePositionLinkAsync(ByVal pXMLParams As String)
            Me.UpdatePositionLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePositionLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdatePositionLinkOperationCompleted Is Nothing) Then
                Me.UpdatePositionLinkOperationCompleted = AddressOf Me.OnUpdatePositionLinkOperationCompleted
            End If
            Me.InvokeAsync("UpdatePositionLink", New Object() {pXMLParams}, Me.UpdatePositionLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePositionLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePositionLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePositionLinkCompleted(Me, New UpdatePositionLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateWebDocument", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWebDocument(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateWebDocument", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWebDocumentAsync(ByVal pXMLParams As String)
            Me.UpdateWebDocumentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWebDocumentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateWebDocumentOperationCompleted Is Nothing) Then
                Me.UpdateWebDocumentOperationCompleted = AddressOf Me.OnUpdateWebDocumentOperationCompleted
            End If
            Me.InvokeAsync("UpdateWebDocument", New Object() {pXMLParams}, Me.UpdateWebDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWebDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWebDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWebDocumentCompleted(Me, New UpdateWebDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateProvisionalTransaction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProvisionalTransaction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateProvisionalTransaction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProvisionalTransactionAsync(ByVal pXMLParams As String)
            Me.UpdateProvisionalTransactionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProvisionalTransactionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateProvisionalTransactionOperationCompleted Is Nothing) Then
                Me.UpdateProvisionalTransactionOperationCompleted = AddressOf Me.OnUpdateProvisionalTransactionOperationCompleted
            End If
            Me.InvokeAsync("UpdateProvisionalTransaction", New Object() {pXMLParams}, Me.UpdateProvisionalTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProvisionalTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProvisionalTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProvisionalTransactionCompleted(Me, New UpdateProvisionalTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdatePurchaseOrder", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePurchaseOrder(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdatePurchaseOrder", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePurchaseOrderAsync(ByVal pXMLParams As String)
            Me.UpdatePurchaseOrderAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePurchaseOrderAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdatePurchaseOrderOperationCompleted Is Nothing) Then
                Me.UpdatePurchaseOrderOperationCompleted = AddressOf Me.OnUpdatePurchaseOrderOperationCompleted
            End If
            Me.InvokeAsync("UpdatePurchaseOrder", New Object() {pXMLParams}, Me.UpdatePurchaseOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePurchaseOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePurchaseOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePurchaseOrderCompleted(Me, New UpdatePurchaseOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdatePurchaseOrderPayment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePurchaseOrderPayment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdatePurchaseOrderPayment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePurchaseOrderPaymentAsync(ByVal pXMLParams As String)
            Me.UpdatePurchaseOrderPaymentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePurchaseOrderPaymentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdatePurchaseOrderPaymentOperationCompleted Is Nothing) Then
                Me.UpdatePurchaseOrderPaymentOperationCompleted = AddressOf Me.OnUpdatePurchaseOrderPaymentOperationCompleted
            End If
            Me.InvokeAsync("UpdatePurchaseOrderPayment", New Object() {pXMLParams}, Me.UpdatePurchaseOrderPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePurchaseOrderPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePurchaseOrderPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePurchaseOrderPaymentCompleted(Me, New UpdatePurchaseOrderPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateRole", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRole(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateRole", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRoleAsync(ByVal pXMLParams As String)
            Me.UpdateRoleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRoleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateRoleOperationCompleted Is Nothing) Then
                Me.UpdateRoleOperationCompleted = AddressOf Me.OnUpdateRoleOperationCompleted
            End If
            Me.InvokeAsync("UpdateRole", New Object() {pXMLParams}, Me.UpdateRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRoleCompleted(Me, New UpdateRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateStandardDocument", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateStandardDocument(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateStandardDocument", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateStandardDocumentAsync(ByVal pXMLParams As String)
            Me.UpdateStandardDocumentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateStandardDocumentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateStandardDocumentOperationCompleted Is Nothing) Then
                Me.UpdateStandardDocumentOperationCompleted = AddressOf Me.OnUpdateStandardDocumentOperationCompleted
            End If
            Me.InvokeAsync("UpdateStandardDocument", New Object() {pXMLParams}, Me.UpdateStandardDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateStandardDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateStandardDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateStandardDocumentCompleted(Me, New UpdateStandardDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateStandingOrder", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateStandingOrder(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateStandingOrder", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateStandingOrderAsync(ByVal pXMLParams As String)
            Me.UpdateStandingOrderAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateStandingOrderAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateStandingOrderOperationCompleted Is Nothing) Then
                Me.UpdateStandingOrderOperationCompleted = AddressOf Me.OnUpdateStandingOrderOperationCompleted
            End If
            Me.InvokeAsync("UpdateStandingOrder", New Object() {pXMLParams}, Me.UpdateStandingOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateStandingOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateStandingOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateStandingOrderCompleted(Me, New UpdateStandingOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateStickyNote", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateStickyNote(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateStickyNote", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateStickyNoteAsync(ByVal pXMLParams As String)
            Me.UpdateStickyNoteAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateStickyNoteAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateStickyNoteOperationCompleted Is Nothing) Then
                Me.UpdateStickyNoteOperationCompleted = AddressOf Me.OnUpdateStickyNoteOperationCompleted
            End If
            Me.InvokeAsync("UpdateStickyNote", New Object() {pXMLParams}, Me.UpdateStickyNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateStickyNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateStickyNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateStickyNoteCompleted(Me, New UpdateStickyNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateSubscription", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSubscription(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateSubscription", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSubscriptionAsync(ByVal pXMLParams As String)
            Me.UpdateSubscriptionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSubscriptionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateSubscriptionOperationCompleted Is Nothing) Then
                Me.UpdateSubscriptionOperationCompleted = AddressOf Me.OnUpdateSubscriptionOperationCompleted
            End If
            Me.InvokeAsync("UpdateSubscription", New Object() {pXMLParams}, Me.UpdateSubscriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSubscriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSubscriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSubscriptionCompleted(Me, New UpdateSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateSuppression", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSuppression(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateSuppression", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSuppressionAsync(ByVal pXMLParams As String)
            Me.UpdateSuppressionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSuppressionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateSuppressionOperationCompleted Is Nothing) Then
                Me.UpdateSuppressionOperationCompleted = AddressOf Me.OnUpdateSuppressionOperationCompleted
            End If
            Me.InvokeAsync("UpdateSuppression", New Object() {pXMLParams}, Me.UpdateSuppressionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSuppressionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSuppressionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSuppressionCompleted(Me, New UpdateSuppressionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateSystemModuleUser", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSystemModuleUser(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateSystemModuleUser", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSystemModuleUserAsync(ByVal pXMLParams As String)
            Me.UpdateSystemModuleUserAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSystemModuleUserAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateSystemModuleUserOperationCompleted Is Nothing) Then
                Me.UpdateSystemModuleUserOperationCompleted = AddressOf Me.OnUpdateSystemModuleUserOperationCompleted
            End If
            Me.InvokeAsync("UpdateSystemModuleUser", New Object() {pXMLParams}, Me.UpdateSystemModuleUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSystemModuleUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSystemModuleUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSystemModuleUserCompleted(Me, New UpdateSystemModuleUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateTableData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTableData(ByVal pXMLParams As String, ByVal pUpdateData As String) As String
            Dim results() As Object = Me.Invoke("UpdateTableData", New Object() {pXMLParams, pUpdateData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTableDataAsync(ByVal pXMLParams As String, ByVal pUpdateData As String)
            Me.UpdateTableDataAsync(pXMLParams, pUpdateData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTableDataAsync(ByVal pXMLParams As String, ByVal pUpdateData As String, ByVal userState As Object)
            If (Me.UpdateTableDataOperationCompleted Is Nothing) Then
                Me.UpdateTableDataOperationCompleted = AddressOf Me.OnUpdateTableDataOperationCompleted
            End If
            Me.InvokeAsync("UpdateTableData", New Object() {pXMLParams, pUpdateData}, Me.UpdateTableDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTableDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTableDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTableDataCompleted(Me, New UpdateTableDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/MakeBranchHistorical", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MakeBranchHistorical(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("MakeBranchHistorical", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MakeBranchHistoricalAsync(ByVal pXMLParams As String)
            Me.MakeBranchHistoricalAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MakeBranchHistoricalAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.MakeBranchHistoricalOperationCompleted Is Nothing) Then
                Me.MakeBranchHistoricalOperationCompleted = AddressOf Me.OnMakeBranchHistoricalOperationCompleted
            End If
            Me.InvokeAsync("MakeBranchHistorical", New Object() {pXMLParams}, Me.MakeBranchHistoricalOperationCompleted, userState)
        End Sub
        
        Private Sub OnMakeBranchHistoricalOperationCompleted(ByVal arg As Object)
            If (Not (Me.MakeBranchHistoricalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MakeBranchHistoricalCompleted(Me, New MakeBranchHistoricalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/MoveBranchPostcode", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MoveBranchPostcode(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("MoveBranchPostcode", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MoveBranchPostcodeAsync(ByVal pXMLParams As String)
            Me.MoveBranchPostcodeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MoveBranchPostcodeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.MoveBranchPostcodeOperationCompleted Is Nothing) Then
                Me.MoveBranchPostcodeOperationCompleted = AddressOf Me.OnMoveBranchPostcodeOperationCompleted
            End If
            Me.InvokeAsync("MoveBranchPostcode", New Object() {pXMLParams}, Me.MoveBranchPostcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnMoveBranchPostcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.MoveBranchPostcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MoveBranchPostcodeCompleted(Me, New MoveBranchPostcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/MoveRegion", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MoveRegion(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("MoveRegion", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MoveRegionAsync(ByVal pXMLParams As String)
            Me.MoveRegionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MoveRegionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.MoveRegionOperationCompleted Is Nothing) Then
                Me.MoveRegionOperationCompleted = AddressOf Me.OnMoveRegionOperationCompleted
            End If
            Me.InvokeAsync("MoveRegion", New Object() {pXMLParams}, Me.MoveRegionOperationCompleted, userState)
        End Sub
        
        Private Sub OnMoveRegionOperationCompleted(ByVal arg As Object)
            If (Not (Me.MoveRegionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MoveRegionCompleted(Me, New MoveRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateAccessControlItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAccessControlItem(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateAccessControlItem", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAccessControlItemAsync(ByVal pXMLParams As String)
            Me.UpdateAccessControlItemAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAccessControlItemAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateAccessControlItemOperationCompleted Is Nothing) Then
                Me.UpdateAccessControlItemOperationCompleted = AddressOf Me.OnUpdateAccessControlItemOperationCompleted
            End If
            Me.InvokeAsync("UpdateAccessControlItem", New Object() {pXMLParams}, Me.UpdateAccessControlItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAccessControlItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAccessControlItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAccessControlItemCompleted(Me, New UpdateAccessControlItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteAccessControlGroup", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteAccessControlGroup(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteAccessControlGroup", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAccessControlGroupAsync(ByVal pXMLParams As String)
            Me.DeleteAccessControlGroupAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAccessControlGroupAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteAccessControlGroupOperationCompleted Is Nothing) Then
                Me.DeleteAccessControlGroupOperationCompleted = AddressOf Me.OnDeleteAccessControlGroupOperationCompleted
            End If
            Me.InvokeAsync("DeleteAccessControlGroup", New Object() {pXMLParams}, Me.DeleteAccessControlGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAccessControlGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAccessControlGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAccessControlGroupCompleted(Me, New DeleteAccessControlGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CreateAccessControlData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateAccessControlData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CreateAccessControlData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateAccessControlDataAsync(ByVal pXMLParams As String)
            Me.CreateAccessControlDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAccessControlDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CreateAccessControlDataOperationCompleted Is Nothing) Then
                Me.CreateAccessControlDataOperationCompleted = AddressOf Me.OnCreateAccessControlDataOperationCompleted
            End If
            Me.InvokeAsync("CreateAccessControlData", New Object() {pXMLParams}, Me.CreateAccessControlDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateAccessControlDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateAccessControlDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateAccessControlDataCompleted(Me, New CreateAccessControlDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CreateCopyOfSelectionSet", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateCopyOfSelectionSet(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CreateCopyOfSelectionSet", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateCopyOfSelectionSetAsync(ByVal pXMLParams As String)
            Me.CreateCopyOfSelectionSetAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateCopyOfSelectionSetAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CreateCopyOfSelectionSetOperationCompleted Is Nothing) Then
                Me.CreateCopyOfSelectionSetOperationCompleted = AddressOf Me.OnCreateCopyOfSelectionSetOperationCompleted
            End If
            Me.InvokeAsync("CreateCopyOfSelectionSet", New Object() {pXMLParams}, Me.CreateCopyOfSelectionSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateCopyOfSelectionSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateCopyOfSelectionSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateCopyOfSelectionSetCompleted(Me, New CreateCopyOfSelectionSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ReconcileStandingOrder", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReconcileStandingOrder(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ReconcileStandingOrder", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReconcileStandingOrderAsync(ByVal pXMLParams As String)
            Me.ReconcileStandingOrderAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReconcileStandingOrderAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ReconcileStandingOrderOperationCompleted Is Nothing) Then
                Me.ReconcileStandingOrderOperationCompleted = AddressOf Me.OnReconcileStandingOrderOperationCompleted
            End If
            Me.InvokeAsync("ReconcileStandingOrder", New Object() {pXMLParams}, Me.ReconcileStandingOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnReconcileStandingOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReconcileStandingOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReconcileStandingOrderCompleted(Me, New ReconcileStandingOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateBankersOrder", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateBankersOrder(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateBankersOrder", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateBankersOrderAsync(ByVal pXMLParams As String)
            Me.UpdateBankersOrderAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateBankersOrderAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateBankersOrderOperationCompleted Is Nothing) Then
                Me.UpdateBankersOrderOperationCompleted = AddressOf Me.OnUpdateBankersOrderOperationCompleted
            End If
            Me.InvokeAsync("UpdateBankersOrder", New Object() {pXMLParams}, Me.UpdateBankersOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateBankersOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateBankersOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateBankersOrderCompleted(Me, New UpdateBankersOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ChangeOwnershipAccessLevel", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeOwnershipAccessLevel(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ChangeOwnershipAccessLevel", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeOwnershipAccessLevelAsync(ByVal pXMLParams As String)
            Me.ChangeOwnershipAccessLevelAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeOwnershipAccessLevelAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ChangeOwnershipAccessLevelOperationCompleted Is Nothing) Then
                Me.ChangeOwnershipAccessLevelOperationCompleted = AddressOf Me.OnChangeOwnershipAccessLevelOperationCompleted
            End If
            Me.InvokeAsync("ChangeOwnershipAccessLevel", New Object() {pXMLParams}, Me.ChangeOwnershipAccessLevelOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeOwnershipAccessLevelOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeOwnershipAccessLevelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeOwnershipAccessLevelCompleted(Me, New ChangeOwnershipAccessLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMailing", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMailing(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateMailing", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMailingAsync(ByVal pXMLParams As String)
            Me.UpdateMailingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMailingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateMailingOperationCompleted Is Nothing) Then
                Me.UpdateMailingOperationCompleted = AddressOf Me.OnUpdateMailingOperationCompleted
            End If
            Me.InvokeAsync("UpdateMailing", New Object() {pXMLParams}, Me.UpdateMailingOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMailingOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMailingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMailingCompleted(Me, New UpdateMailingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMailingHistory", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMailingHistory(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateMailingHistory", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMailingHistoryAsync(ByVal pXMLParams As String)
            Me.UpdateMailingHistoryAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMailingHistoryAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateMailingHistoryOperationCompleted Is Nothing) Then
                Me.UpdateMailingHistoryOperationCompleted = AddressOf Me.OnUpdateMailingHistoryOperationCompleted
            End If
            Me.InvokeAsync("UpdateMailingHistory", New Object() {pXMLParams}, Me.UpdateMailingHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMailingHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMailingHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMailingHistoryCompleted(Me, New UpdateMailingHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ReanalysePurchaseOrderPayment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReanalysePurchaseOrderPayment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ReanalysePurchaseOrderPayment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReanalysePurchaseOrderPaymentAsync(ByVal pXMLParams As String)
            Me.ReanalysePurchaseOrderPaymentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReanalysePurchaseOrderPaymentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ReanalysePurchaseOrderPaymentOperationCompleted Is Nothing) Then
                Me.ReanalysePurchaseOrderPaymentOperationCompleted = AddressOf Me.OnReanalysePurchaseOrderPaymentOperationCompleted
            End If
            Me.InvokeAsync("ReanalysePurchaseOrderPayment", New Object() {pXMLParams}, Me.ReanalysePurchaseOrderPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnReanalysePurchaseOrderPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReanalysePurchaseOrderPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReanalysePurchaseOrderPaymentCompleted(Me, New ReanalysePurchaseOrderPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEntityAlert", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEntityAlert(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEntityAlert", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEntityAlertAsync(ByVal pXMLParams As String)
            Me.AddEntityAlertAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEntityAlertAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEntityAlertOperationCompleted Is Nothing) Then
                Me.AddEntityAlertOperationCompleted = AddressOf Me.OnAddEntityAlertOperationCompleted
            End If
            Me.InvokeAsync("AddEntityAlert", New Object() {pXMLParams}, Me.AddEntityAlertOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEntityAlertOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEntityAlertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEntityAlertCompleted(Me, New AddEntityAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddSystemModuleUser", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddSystemModuleUser(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddSystemModuleUser", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddSystemModuleUserAsync(ByVal pXMLParams As String)
            Me.AddSystemModuleUserAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddSystemModuleUserAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddSystemModuleUserOperationCompleted Is Nothing) Then
                Me.AddSystemModuleUserOperationCompleted = AddressOf Me.OnAddSystemModuleUserOperationCompleted
            End If
            Me.InvokeAsync("AddSystemModuleUser", New Object() {pXMLParams}, Me.AddSystemModuleUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddSystemModuleUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddSystemModuleUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddSystemModuleUserCompleted(Me, New AddSystemModuleUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddAccommodationBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAccommodationBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddAccommodationBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAccommodationBookingAsync(ByVal pXMLParams As String)
            Me.AddAccommodationBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAccommodationBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddAccommodationBookingOperationCompleted Is Nothing) Then
                Me.AddAccommodationBookingOperationCompleted = AddressOf Me.OnAddAccommodationBookingOperationCompleted
            End If
            Me.InvokeAsync("AddAccommodationBooking", New Object() {pXMLParams}, Me.AddAccommodationBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAccommodationBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAccommodationBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAccommodationBookingCompleted(Me, New AddAccommodationBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddAction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddAction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddActionAsync(ByVal pXMLParams As String)
            Me.AddActionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddActionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddActionOperationCompleted Is Nothing) Then
                Me.AddActionOperationCompleted = AddressOf Me.OnAddActionOperationCompleted
            End If
            Me.InvokeAsync("AddAction", New Object() {pXMLParams}, Me.AddActionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddActionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddActionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddActionCompleted(Me, New AddActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddActionFromTemplate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddActionFromTemplate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddActionFromTemplate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddActionFromTemplateAsync(ByVal pXMLParams As String)
            Me.AddActionFromTemplateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddActionFromTemplateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddActionFromTemplateOperationCompleted Is Nothing) Then
                Me.AddActionFromTemplateOperationCompleted = AddressOf Me.OnAddActionFromTemplateOperationCompleted
            End If
            Me.InvokeAsync("AddActionFromTemplate", New Object() {pXMLParams}, Me.AddActionFromTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddActionFromTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddActionFromTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddActionFromTemplateCompleted(Me, New AddActionFromTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddActionLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddActionLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddActionLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddActionLinkAsync(ByVal pXMLParams As String)
            Me.AddActionLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddActionLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddActionLinkOperationCompleted Is Nothing) Then
                Me.AddActionLinkOperationCompleted = AddressOf Me.OnAddActionLinkOperationCompleted
            End If
            Me.InvokeAsync("AddActionLink", New Object() {pXMLParams}, Me.AddActionLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddActionLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddActionLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddActionLinkCompleted(Me, New AddActionLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddActionSubject", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddActionSubject(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddActionSubject", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddActionSubjectAsync(ByVal pXMLParams As String)
            Me.AddActionSubjectAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddActionSubjectAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddActionSubjectOperationCompleted Is Nothing) Then
                Me.AddActionSubjectOperationCompleted = AddressOf Me.OnAddActionSubjectOperationCompleted
            End If
            Me.InvokeAsync("AddActionSubject", New Object() {pXMLParams}, Me.AddActionSubjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddActionSubjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddActionSubjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddActionSubjectCompleted(Me, New AddActionSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddActivityAsync(ByVal pXMLParams As String)
            Me.AddActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddActivityOperationCompleted Is Nothing) Then
                Me.AddActivityOperationCompleted = AddressOf Me.OnAddActivityOperationCompleted
            End If
            Me.InvokeAsync("AddActivity", New Object() {pXMLParams}, Me.AddActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddActivityCompleted(Me, New AddActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddAddress", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAddress(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddAddress", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAddressAsync(ByVal pXMLParams As String)
            Me.AddAddressAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAddressAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddAddressOperationCompleted Is Nothing) Then
                Me.AddAddressOperationCompleted = AddressOf Me.OnAddAddressOperationCompleted
            End If
            Me.InvokeAsync("AddAddress", New Object() {pXMLParams}, Me.AddAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAddressCompleted(Me, New AddAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddAddressUsage", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAddressUsage(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddAddressUsage", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAddressUsageAsync(ByVal pXMLParams As String)
            Me.AddAddressUsageAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAddressUsageAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddAddressUsageOperationCompleted Is Nothing) Then
                Me.AddAddressUsageOperationCompleted = AddressOf Me.OnAddAddressUsageOperationCompleted
            End If
            Me.InvokeAsync("AddAddressUsage", New Object() {pXMLParams}, Me.AddAddressUsageOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAddressUsageOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAddressUsageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAddressUsageCompleted(Me, New AddAddressUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddAppointment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAppointment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddAppointment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAppointmentAsync(ByVal pXMLParams As String)
            Me.AddAppointmentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAppointmentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddAppointmentOperationCompleted Is Nothing) Then
                Me.AddAppointmentOperationCompleted = AddressOf Me.OnAddAppointmentOperationCompleted
            End If
            Me.InvokeAsync("AddAppointment", New Object() {pXMLParams}, Me.AddAppointmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAppointmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAppointmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAppointmentCompleted(Me, New AddAppointmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddBank", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddBank(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddBank", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddBankAsync(ByVal pXMLParams As String)
            Me.AddBankAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddBankAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddBankOperationCompleted Is Nothing) Then
                Me.AddBankOperationCompleted = AddressOf Me.OnAddBankOperationCompleted
            End If
            Me.InvokeAsync("AddBank", New Object() {pXMLParams}, Me.AddBankOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddBankOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddBankCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddBankCompleted(Me, New AddBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddBatch", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddBatch(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddBatch", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddBatchAsync(ByVal pXMLParams As String)
            Me.AddBatchAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddBatchAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddBatchOperationCompleted Is Nothing) Then
                Me.AddBatchOperationCompleted = AddressOf Me.OnAddBatchOperationCompleted
            End If
            Me.InvokeAsync("AddBatch", New Object() {pXMLParams}, Me.AddBatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddBatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddBatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddBatchCompleted(Me, New AddBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCommunicationsLog", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCommunicationsLog(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCommunicationsLog", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCommunicationsLogAsync(ByVal pXMLParams As String)
            Me.AddCommunicationsLogAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCommunicationsLogAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCommunicationsLogOperationCompleted Is Nothing) Then
                Me.AddCommunicationsLogOperationCompleted = AddressOf Me.OnAddCommunicationsLogOperationCompleted
            End If
            Me.InvokeAsync("AddCommunicationsLog", New Object() {pXMLParams}, Me.AddCommunicationsLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCommunicationsLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCommunicationsLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCommunicationsLogCompleted(Me, New AddCommunicationsLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCommunicationsLogHistory", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCommunicationsLogHistory(ByVal pHistoryAction As XMLDocumentHistoryActions, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCommunicationsLogHistory", New Object() {pHistoryAction, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCommunicationsLogHistoryAsync(ByVal pHistoryAction As XMLDocumentHistoryActions, ByVal pXMLParams As String)
            Me.AddCommunicationsLogHistoryAsync(pHistoryAction, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCommunicationsLogHistoryAsync(ByVal pHistoryAction As XMLDocumentHistoryActions, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCommunicationsLogHistoryOperationCompleted Is Nothing) Then
                Me.AddCommunicationsLogHistoryOperationCompleted = AddressOf Me.OnAddCommunicationsLogHistoryOperationCompleted
            End If
            Me.InvokeAsync("AddCommunicationsLogHistory", New Object() {pHistoryAction, pXMLParams}, Me.AddCommunicationsLogHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCommunicationsLogHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCommunicationsLogHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCommunicationsLogHistoryCompleted(Me, New AddCommunicationsLogHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCommunicationsLogLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCommunicationsLogLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCommunicationsLogLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCommunicationsLogLinkAsync(ByVal pXMLParams As String)
            Me.AddCommunicationsLogLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCommunicationsLogLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCommunicationsLogLinkOperationCompleted Is Nothing) Then
                Me.AddCommunicationsLogLinkOperationCompleted = AddressOf Me.OnAddCommunicationsLogLinkOperationCompleted
            End If
            Me.InvokeAsync("AddCommunicationsLogLink", New Object() {pXMLParams}, Me.AddCommunicationsLogLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCommunicationsLogLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCommunicationsLogLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCommunicationsLogLinkCompleted(Me, New AddCommunicationsLogLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCommunicationsLogSubject", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCommunicationsLogSubject(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCommunicationsLogSubject", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCommunicationsLogSubjectAsync(ByVal pXMLParams As String)
            Me.AddCommunicationsLogSubjectAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCommunicationsLogSubjectAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCommunicationsLogSubjectOperationCompleted Is Nothing) Then
                Me.AddCommunicationsLogSubjectOperationCompleted = AddressOf Me.OnAddCommunicationsLogSubjectOperationCompleted
            End If
            Me.InvokeAsync("AddCommunicationsLogSubject", New Object() {pXMLParams}, Me.AddCommunicationsLogSubjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCommunicationsLogSubjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCommunicationsLogSubjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCommunicationsLogSubjectCompleted(Me, New AddCommunicationsLogSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCommunicationsNumber", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCommunicationsNumber(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCommunicationsNumber", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCommunicationsNumberAsync(ByVal pXMLParams As String)
            Me.AddCommunicationsNumberAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCommunicationsNumberAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCommunicationsNumberOperationCompleted Is Nothing) Then
                Me.AddCommunicationsNumberOperationCompleted = AddressOf Me.OnAddCommunicationsNumberOperationCompleted
            End If
            Me.InvokeAsync("AddCommunicationsNumber", New Object() {pXMLParams}, Me.AddCommunicationsNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCommunicationsNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCommunicationsNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCommunicationsNumberCompleted(Me, New AddCommunicationsNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCommunicationUsage", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCommunicationUsage(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCommunicationUsage", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCommunicationUsageAsync(ByVal pXMLParams As String)
            Me.AddCommunicationUsageAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCommunicationUsageAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCommunicationUsageOperationCompleted Is Nothing) Then
                Me.AddCommunicationUsageOperationCompleted = AddressOf Me.OnAddCommunicationUsageOperationCompleted
            End If
            Me.InvokeAsync("AddCommunicationUsage", New Object() {pXMLParams}, Me.AddCommunicationUsageOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCommunicationUsageOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCommunicationUsageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCommunicationUsageCompleted(Me, New AddCommunicationUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddContactAsync(ByVal pXMLParams As String)
            Me.AddContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddContactOperationCompleted Is Nothing) Then
                Me.AddContactOperationCompleted = AddressOf Me.OnAddContactOperationCompleted
            End If
            Me.InvokeAsync("AddContact", New Object() {pXMLParams}, Me.AddContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddContactCompleted(Me, New AddContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddContactAccount", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddContactAccount(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddContactAccount", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddContactAccountAsync(ByVal pXMLParams As String)
            Me.AddContactAccountAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddContactAccountAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddContactAccountOperationCompleted Is Nothing) Then
                Me.AddContactAccountOperationCompleted = AddressOf Me.OnAddContactAccountOperationCompleted
            End If
            Me.InvokeAsync("AddContactAccount", New Object() {pXMLParams}, Me.AddContactAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddContactAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddContactAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddContactAccountCompleted(Me, New AddContactAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddContactFundraisingEvent", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddContactFundraisingEvent(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddContactFundraisingEvent", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddContactFundraisingEventAsync(ByVal pXMLParams As String)
            Me.AddContactFundraisingEventAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddContactFundraisingEventAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddContactFundraisingEventOperationCompleted Is Nothing) Then
                Me.AddContactFundraisingEventOperationCompleted = AddressOf Me.OnAddContactFundraisingEventOperationCompleted
            End If
            Me.InvokeAsync("AddContactFundraisingEvent", New Object() {pXMLParams}, Me.AddContactFundraisingEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddContactFundraisingEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddContactFundraisingEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddContactFundraisingEventCompleted(Me, New AddContactFundraisingEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCreditCustomer", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCreditCustomer(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCreditCustomer", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCreditCustomerAsync(ByVal pXMLParams As String)
            Me.AddCreditCustomerAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCreditCustomerAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCreditCustomerOperationCompleted Is Nothing) Then
                Me.AddCreditCustomerOperationCompleted = AddressOf Me.OnAddCreditCustomerOperationCompleted
            End If
            Me.InvokeAsync("AddCreditCustomer", New Object() {pXMLParams}, Me.AddCreditCustomerOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCreditCustomerOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCreditCustomerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCreditCustomerCompleted(Me, New AddCreditCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/TransferWaitingListBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TransferWaitingListBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("TransferWaitingListBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TransferWaitingListBookingAsync(ByVal pXMLParams As String)
            Me.TransferWaitingListBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TransferWaitingListBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.TransferWaitingListBookingOperationCompleted Is Nothing) Then
                Me.TransferWaitingListBookingOperationCompleted = AddressOf Me.OnTransferWaitingListBookingOperationCompleted
            End If
            Me.InvokeAsync("TransferWaitingListBooking", New Object() {pXMLParams}, Me.TransferWaitingListBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnTransferWaitingListBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.TransferWaitingListBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TransferWaitingListBookingCompleted(Me, New TransferWaitingListBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateAccommodationBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAccommodationBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateAccommodationBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAccommodationBookingAsync(ByVal pXMLParams As String)
            Me.UpdateAccommodationBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAccommodationBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateAccommodationBookingOperationCompleted Is Nothing) Then
                Me.UpdateAccommodationBookingOperationCompleted = AddressOf Me.OnUpdateAccommodationBookingOperationCompleted
            End If
            Me.InvokeAsync("UpdateAccommodationBooking", New Object() {pXMLParams}, Me.UpdateAccommodationBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAccommodationBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAccommodationBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAccommodationBookingCompleted(Me, New UpdateAccommodationBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateDelegateActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDelegateActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateDelegateActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDelegateActivityAsync(ByVal pXMLParams As String)
            Me.UpdateDelegateActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDelegateActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateDelegateActivityOperationCompleted Is Nothing) Then
                Me.UpdateDelegateActivityOperationCompleted = AddressOf Me.OnUpdateDelegateActivityOperationCompleted
            End If
            Me.InvokeAsync("UpdateDelegateActivity", New Object() {pXMLParams}, Me.UpdateDelegateActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDelegateActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDelegateActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDelegateActivityCompleted(Me, New UpdateDelegateActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateDelegateLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDelegateLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateDelegateLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDelegateLinkAsync(ByVal pXMLParams As String)
            Me.UpdateDelegateLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDelegateLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateDelegateLinkOperationCompleted Is Nothing) Then
                Me.UpdateDelegateLinkOperationCompleted = AddressOf Me.OnUpdateDelegateLinkOperationCompleted
            End If
            Me.InvokeAsync("UpdateDelegateLink", New Object() {pXMLParams}, Me.UpdateDelegateLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDelegateLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDelegateLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDelegateLinkCompleted(Me, New UpdateDelegateLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEvent", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEvent(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEvent", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventAsync(ByVal pXMLParams As String)
            Me.UpdateEventAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventOperationCompleted Is Nothing) Then
                Me.UpdateEventOperationCompleted = AddressOf Me.OnUpdateEventOperationCompleted
            End If
            Me.InvokeAsync("UpdateEvent", New Object() {pXMLParams}, Me.UpdateEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventCompleted(Me, New UpdateEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventBookingAsync(ByVal pXMLParams As String)
            Me.UpdateEventBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventBookingOperationCompleted Is Nothing) Then
                Me.UpdateEventBookingOperationCompleted = AddressOf Me.OnUpdateEventBookingOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventBooking", New Object() {pXMLParams}, Me.UpdateEventBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventBookingCompleted(Me, New UpdateEventBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventBookingOption", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventBookingOption(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventBookingOption", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventBookingOptionAsync(ByVal pXMLParams As String)
            Me.UpdateEventBookingOptionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventBookingOptionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventBookingOptionOperationCompleted Is Nothing) Then
                Me.UpdateEventBookingOptionOperationCompleted = AddressOf Me.OnUpdateEventBookingOptionOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventBookingOption", New Object() {pXMLParams}, Me.UpdateEventBookingOptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventBookingOptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventBookingOptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventBookingOptionCompleted(Me, New UpdateEventBookingOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventContactAsync(ByVal pXMLParams As String)
            Me.UpdateEventContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventContactOperationCompleted Is Nothing) Then
                Me.UpdateEventContactOperationCompleted = AddressOf Me.OnUpdateEventContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventContact", New Object() {pXMLParams}, Me.UpdateEventContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventContactCompleted(Me, New UpdateEventContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventCost", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventCost(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventCost", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventCostAsync(ByVal pXMLParams As String)
            Me.UpdateEventCostAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventCostAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventCostOperationCompleted Is Nothing) Then
                Me.UpdateEventCostOperationCompleted = AddressOf Me.OnUpdateEventCostOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventCost", New Object() {pXMLParams}, Me.UpdateEventCostOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventCostOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventCostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventCostCompleted(Me, New UpdateEventCostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateDelegateToEvent", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDelegateToEvent(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateDelegateToEvent", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDelegateToEventAsync(ByVal pXMLParams As String)
            Me.UpdateDelegateToEventAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDelegateToEventAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateDelegateToEventOperationCompleted Is Nothing) Then
                Me.UpdateDelegateToEventOperationCompleted = AddressOf Me.OnUpdateDelegateToEventOperationCompleted
            End If
            Me.InvokeAsync("UpdateDelegateToEvent", New Object() {pXMLParams}, Me.UpdateDelegateToEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDelegateToEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDelegateToEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDelegateToEventCompleted(Me, New UpdateDelegateToEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventOptionSession", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventOptionSession(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventOptionSession", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventOptionSessionAsync(ByVal pXMLParams As String)
            Me.UpdateEventOptionSessionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventOptionSessionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventOptionSessionOperationCompleted Is Nothing) Then
                Me.UpdateEventOptionSessionOperationCompleted = AddressOf Me.OnUpdateEventOptionSessionOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventOptionSession", New Object() {pXMLParams}, Me.UpdateEventOptionSessionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventOptionSessionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventOptionSessionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventOptionSessionCompleted(Me, New UpdateEventOptionSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventOrganiser", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventOrganiser(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventOrganiser", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventOrganiserAsync(ByVal pXMLParams As String)
            Me.UpdateEventOrganiserAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventOrganiserAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventOrganiserOperationCompleted Is Nothing) Then
                Me.UpdateEventOrganiserOperationCompleted = AddressOf Me.OnUpdateEventOrganiserOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventOrganiser", New Object() {pXMLParams}, Me.UpdateEventOrganiserOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventOrganiserOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventOrganiserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventOrganiserCompleted(Me, New UpdateEventOrganiserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventPersonnel", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventPersonnel(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventPersonnel", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventPersonnelAsync(ByVal pXMLParams As String)
            Me.UpdateEventPersonnelAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventPersonnelAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventPersonnelOperationCompleted Is Nothing) Then
                Me.UpdateEventPersonnelOperationCompleted = AddressOf Me.OnUpdateEventPersonnelOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventPersonnel", New Object() {pXMLParams}, Me.UpdateEventPersonnelOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventPersonnelOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventPersonnelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventPersonnelCompleted(Me, New UpdateEventPersonnelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventPersonnelTask", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventPersonnelTask(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventPersonnelTask", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventPersonnelTaskAsync(ByVal pXMLParams As String)
            Me.UpdateEventPersonnelTaskAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventPersonnelTaskAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventPersonnelTaskOperationCompleted Is Nothing) Then
                Me.UpdateEventPersonnelTaskOperationCompleted = AddressOf Me.OnUpdateEventPersonnelTaskOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventPersonnelTask", New Object() {pXMLParams}, Me.UpdateEventPersonnelTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventPersonnelTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventPersonnelTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventPersonnelTaskCompleted(Me, New UpdateEventPersonnelTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventPIS", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventPIS(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventPIS", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventPISAsync(ByVal pXMLParams As String)
            Me.UpdateEventPISAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventPISAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventPISOperationCompleted Is Nothing) Then
                Me.UpdateEventPISOperationCompleted = AddressOf Me.OnUpdateEventPISOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventPIS", New Object() {pXMLParams}, Me.UpdateEventPISOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventPISOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventPISCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventPISCompleted(Me, New UpdateEventPISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventResource", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventResource(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventResource", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventResourceAsync(ByVal pXMLParams As String)
            Me.UpdateEventResourceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventResourceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventResourceOperationCompleted Is Nothing) Then
                Me.UpdateEventResourceOperationCompleted = AddressOf Me.OnUpdateEventResourceOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventResource", New Object() {pXMLParams}, Me.UpdateEventResourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventResourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventResourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventResourceCompleted(Me, New UpdateEventResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventRoomAllocation", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventRoomAllocation(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventRoomAllocation", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventRoomAllocationAsync(ByVal pXMLParams As String)
            Me.UpdateEventRoomAllocationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventRoomAllocationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventRoomAllocationOperationCompleted Is Nothing) Then
                Me.UpdateEventRoomAllocationOperationCompleted = AddressOf Me.OnUpdateEventRoomAllocationOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventRoomAllocation", New Object() {pXMLParams}, Me.UpdateEventRoomAllocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventRoomAllocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventRoomAllocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventRoomAllocationCompleted(Me, New UpdateEventRoomAllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventRoomBlockBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventRoomBlockBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventRoomBlockBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventRoomBlockBookingAsync(ByVal pXMLParams As String)
            Me.UpdateEventRoomBlockBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventRoomBlockBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventRoomBlockBookingOperationCompleted Is Nothing) Then
                Me.UpdateEventRoomBlockBookingOperationCompleted = AddressOf Me.OnUpdateEventRoomBlockBookingOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventRoomBlockBooking", New Object() {pXMLParams}, Me.UpdateEventRoomBlockBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventRoomBlockBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventRoomBlockBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventRoomBlockBookingCompleted(Me, New UpdateEventRoomBlockBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventSession", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventSession(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventSession", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventSessionAsync(ByVal pXMLParams As String)
            Me.UpdateEventSessionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventSessionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventSessionOperationCompleted Is Nothing) Then
                Me.UpdateEventSessionOperationCompleted = AddressOf Me.OnUpdateEventSessionOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventSession", New Object() {pXMLParams}, Me.UpdateEventSessionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventSessionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventSessionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventSessionCompleted(Me, New UpdateEventSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventSessionTest", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventSessionTest(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventSessionTest", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventSessionTestAsync(ByVal pXMLParams As String)
            Me.UpdateEventSessionTestAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventSessionTestAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventSessionTestOperationCompleted Is Nothing) Then
                Me.UpdateEventSessionTestOperationCompleted = AddressOf Me.OnUpdateEventSessionTestOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventSessionTest", New Object() {pXMLParams}, Me.UpdateEventSessionTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventSessionTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventSessionTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventSessionTestCompleted(Me, New UpdateEventSessionTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventSessionTestResult", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventSessionTestResult(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventSessionTestResult", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventSessionTestResultAsync(ByVal pXMLParams As String)
            Me.UpdateEventSessionTestResultAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventSessionTestResultAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventSessionTestResultOperationCompleted Is Nothing) Then
                Me.UpdateEventSessionTestResultOperationCompleted = AddressOf Me.OnUpdateEventSessionTestResultOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventSessionTestResult", New Object() {pXMLParams}, Me.UpdateEventSessionTestResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventSessionTestResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventSessionTestResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventSessionTestResultCompleted(Me, New UpdateEventSessionTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventSubject", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventSubject(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventSubject", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventSubjectAsync(ByVal pXMLParams As String)
            Me.UpdateEventSubjectAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventSubjectAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventSubjectOperationCompleted Is Nothing) Then
                Me.UpdateEventSubjectOperationCompleted = AddressOf Me.OnUpdateEventSubjectOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventSubject", New Object() {pXMLParams}, Me.UpdateEventSubjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventSubjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventSubjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventSubjectCompleted(Me, New UpdateEventSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventSubmission", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventSubmission(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventSubmission", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventSubmissionAsync(ByVal pXMLParams As String)
            Me.UpdateEventSubmissionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventSubmissionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventSubmissionOperationCompleted Is Nothing) Then
                Me.UpdateEventSubmissionOperationCompleted = AddressOf Me.OnUpdateEventSubmissionOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventSubmission", New Object() {pXMLParams}, Me.UpdateEventSubmissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventSubmissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventSubmissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventSubmissionCompleted(Me, New UpdateEventSubmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventVenueBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventVenueBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventVenueBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventVenueBookingAsync(ByVal pXMLParams As String)
            Me.UpdateEventVenueBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventVenueBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventVenueBookingOperationCompleted Is Nothing) Then
                Me.UpdateEventVenueBookingOperationCompleted = AddressOf Me.OnUpdateEventVenueBookingOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventVenueBooking", New Object() {pXMLParams}, Me.UpdateEventVenueBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventVenueBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventVenueBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventVenueBookingCompleted(Me, New UpdateEventVenueBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEntityAlert", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEntityAlert(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEntityAlert", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEntityAlertAsync(ByVal pXMLParams As String)
            Me.DeleteEntityAlertAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEntityAlertAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEntityAlertOperationCompleted Is Nothing) Then
                Me.DeleteEntityAlertOperationCompleted = AddressOf Me.OnDeleteEntityAlertOperationCompleted
            End If
            Me.InvokeAsync("DeleteEntityAlert", New Object() {pXMLParams}, Me.DeleteEntityAlertOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEntityAlertOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEntityAlertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEntityAlertCompleted(Me, New DeleteEntityAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteAction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteAction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteAction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteActionAsync(ByVal pXMLParams As String)
            Me.DeleteActionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteActionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteActionOperationCompleted Is Nothing) Then
                Me.DeleteActionOperationCompleted = AddressOf Me.OnDeleteActionOperationCompleted
            End If
            Me.InvokeAsync("DeleteAction", New Object() {pXMLParams}, Me.DeleteActionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteActionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteActionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteActionCompleted(Me, New DeleteActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteActionLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteActionLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteActionLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteActionLinkAsync(ByVal pXMLParams As String)
            Me.DeleteActionLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteActionLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteActionLinkOperationCompleted Is Nothing) Then
                Me.DeleteActionLinkOperationCompleted = AddressOf Me.OnDeleteActionLinkOperationCompleted
            End If
            Me.InvokeAsync("DeleteActionLink", New Object() {pXMLParams}, Me.DeleteActionLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteActionLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteActionLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteActionLinkCompleted(Me, New DeleteActionLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteActionSubject", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteActionSubject(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteActionSubject", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteActionSubjectAsync(ByVal pXMLParams As String)
            Me.DeleteActionSubjectAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteActionSubjectAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteActionSubjectOperationCompleted Is Nothing) Then
                Me.DeleteActionSubjectOperationCompleted = AddressOf Me.OnDeleteActionSubjectOperationCompleted
            End If
            Me.InvokeAsync("DeleteActionSubject", New Object() {pXMLParams}, Me.DeleteActionSubjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteActionSubjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteActionSubjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteActionSubjectCompleted(Me, New DeleteActionSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteActivityAsync(ByVal pXMLParams As String)
            Me.DeleteActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteActivityOperationCompleted Is Nothing) Then
                Me.DeleteActivityOperationCompleted = AddressOf Me.OnDeleteActivityOperationCompleted
            End If
            Me.InvokeAsync("DeleteActivity", New Object() {pXMLParams}, Me.DeleteActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteActivityCompleted(Me, New DeleteActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteAddress", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteAddress(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteAddress", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAddressAsync(ByVal pXMLParams As String)
            Me.DeleteAddressAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAddressAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteAddressOperationCompleted Is Nothing) Then
                Me.DeleteAddressOperationCompleted = AddressOf Me.OnDeleteAddressOperationCompleted
            End If
            Me.InvokeAsync("DeleteAddress", New Object() {pXMLParams}, Me.DeleteAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAddressCompleted(Me, New DeleteAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteAddressUsage", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteAddressUsage(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteAddressUsage", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAddressUsageAsync(ByVal pXMLParams As String)
            Me.DeleteAddressUsageAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAddressUsageAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteAddressUsageOperationCompleted Is Nothing) Then
                Me.DeleteAddressUsageOperationCompleted = AddressOf Me.OnDeleteAddressUsageOperationCompleted
            End If
            Me.InvokeAsync("DeleteAddressUsage", New Object() {pXMLParams}, Me.DeleteAddressUsageOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAddressUsageOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAddressUsageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAddressUsageCompleted(Me, New DeleteAddressUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteAppointment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteAppointment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteAppointment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAppointmentAsync(ByVal pXMLParams As String)
            Me.DeleteAppointmentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAppointmentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteAppointmentOperationCompleted Is Nothing) Then
                Me.DeleteAppointmentOperationCompleted = AddressOf Me.OnDeleteAppointmentOperationCompleted
            End If
            Me.InvokeAsync("DeleteAppointment", New Object() {pXMLParams}, Me.DeleteAppointmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAppointmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAppointmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAppointmentCompleted(Me, New DeleteAppointmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteBatch", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteBatch(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteBatch", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteBatchAsync(ByVal pXMLParams As String)
            Me.DeleteBatchAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteBatchAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteBatchOperationCompleted Is Nothing) Then
                Me.DeleteBatchOperationCompleted = AddressOf Me.OnDeleteBatchOperationCompleted
            End If
            Me.InvokeAsync("DeleteBatch", New Object() {pXMLParams}, Me.DeleteBatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteBatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteBatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteBatchCompleted(Me, New DeleteBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCommunicationsLog", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCommunicationsLog(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCommunicationsLog", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCommunicationsLogAsync(ByVal pXMLParams As String)
            Me.DeleteCommunicationsLogAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCommunicationsLogAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCommunicationsLogOperationCompleted Is Nothing) Then
                Me.DeleteCommunicationsLogOperationCompleted = AddressOf Me.OnDeleteCommunicationsLogOperationCompleted
            End If
            Me.InvokeAsync("DeleteCommunicationsLog", New Object() {pXMLParams}, Me.DeleteCommunicationsLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCommunicationsLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCommunicationsLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCommunicationsLogCompleted(Me, New DeleteCommunicationsLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCommunicationsLogLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCommunicationsLogLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCommunicationsLogLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCommunicationsLogLinkAsync(ByVal pXMLParams As String)
            Me.DeleteCommunicationsLogLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCommunicationsLogLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCommunicationsLogLinkOperationCompleted Is Nothing) Then
                Me.DeleteCommunicationsLogLinkOperationCompleted = AddressOf Me.OnDeleteCommunicationsLogLinkOperationCompleted
            End If
            Me.InvokeAsync("DeleteCommunicationsLogLink", New Object() {pXMLParams}, Me.DeleteCommunicationsLogLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCommunicationsLogLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCommunicationsLogLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCommunicationsLogLinkCompleted(Me, New DeleteCommunicationsLogLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCommunicationsLogSubject", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCommunicationsLogSubject(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCommunicationsLogSubject", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCommunicationsLogSubjectAsync(ByVal pXMLParams As String)
            Me.DeleteCommunicationsLogSubjectAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCommunicationsLogSubjectAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCommunicationsLogSubjectOperationCompleted Is Nothing) Then
                Me.DeleteCommunicationsLogSubjectOperationCompleted = AddressOf Me.OnDeleteCommunicationsLogSubjectOperationCompleted
            End If
            Me.InvokeAsync("DeleteCommunicationsLogSubject", New Object() {pXMLParams}, Me.DeleteCommunicationsLogSubjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCommunicationsLogSubjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCommunicationsLogSubjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCommunicationsLogSubjectCompleted(Me, New DeleteCommunicationsLogSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCommunicationsNumber", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCommunicationsNumber(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCommunicationsNumber", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCommunicationsNumberAsync(ByVal pXMLParams As String)
            Me.DeleteCommunicationsNumberAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCommunicationsNumberAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCommunicationsNumberOperationCompleted Is Nothing) Then
                Me.DeleteCommunicationsNumberOperationCompleted = AddressOf Me.OnDeleteCommunicationsNumberOperationCompleted
            End If
            Me.InvokeAsync("DeleteCommunicationsNumber", New Object() {pXMLParams}, Me.DeleteCommunicationsNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCommunicationsNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCommunicationsNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCommunicationsNumberCompleted(Me, New DeleteCommunicationsNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCommunicationUsage", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCommunicationUsage(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCommunicationUsage", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCommunicationUsageAsync(ByVal pXMLParams As String)
            Me.DeleteCommunicationUsageAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCommunicationUsageAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCommunicationUsageOperationCompleted Is Nothing) Then
                Me.DeleteCommunicationUsageOperationCompleted = AddressOf Me.OnDeleteCommunicationUsageOperationCompleted
            End If
            Me.InvokeAsync("DeleteCommunicationUsage", New Object() {pXMLParams}, Me.DeleteCommunicationUsageOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCommunicationUsageOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCommunicationUsageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCommunicationUsageCompleted(Me, New DeleteCommunicationUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteSelectedContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteSelectedContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteSelectedContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteSelectedContactAsync(ByVal pXMLParams As String)
            Me.DeleteSelectedContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSelectedContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteSelectedContactOperationCompleted Is Nothing) Then
                Me.DeleteSelectedContactOperationCompleted = AddressOf Me.OnDeleteSelectedContactOperationCompleted
            End If
            Me.InvokeAsync("DeleteSelectedContact", New Object() {pXMLParams}, Me.DeleteSelectedContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSelectedContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSelectedContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSelectedContactCompleted(Me, New DeleteSelectedContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteContactAsync(ByVal pXMLParams As String)
            Me.DeleteContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteContactOperationCompleted Is Nothing) Then
                Me.DeleteContactOperationCompleted = AddressOf Me.OnDeleteContactOperationCompleted
            End If
            Me.InvokeAsync("DeleteContact", New Object() {pXMLParams}, Me.DeleteContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContactCompleted(Me, New DeleteContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteContactAccount", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteContactAccount(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteContactAccount", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteContactAccountAsync(ByVal pXMLParams As String)
            Me.DeleteContactAccountAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContactAccountAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteContactAccountOperationCompleted Is Nothing) Then
                Me.DeleteContactAccountOperationCompleted = AddressOf Me.OnDeleteContactAccountOperationCompleted
            End If
            Me.InvokeAsync("DeleteContactAccount", New Object() {pXMLParams}, Me.DeleteContactAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContactAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContactAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContactAccountCompleted(Me, New DeleteContactAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCriteriaSet", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCriteriaSet(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCriteriaSet", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCriteriaSetAsync(ByVal pXMLParams As String)
            Me.DeleteCriteriaSetAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCriteriaSetAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCriteriaSetOperationCompleted Is Nothing) Then
                Me.DeleteCriteriaSetOperationCompleted = AddressOf Me.OnDeleteCriteriaSetOperationCompleted
            End If
            Me.InvokeAsync("DeleteCriteriaSet", New Object() {pXMLParams}, Me.DeleteCriteriaSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCriteriaSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCriteriaSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCriteriaSetCompleted(Me, New DeleteCriteriaSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCriteriaSetDetails", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCriteriaSetDetails(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCriteriaSetDetails", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCriteriaSetDetailsAsync(ByVal pXMLParams As String)
            Me.DeleteCriteriaSetDetailsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCriteriaSetDetailsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCriteriaSetDetailsOperationCompleted Is Nothing) Then
                Me.DeleteCriteriaSetDetailsOperationCompleted = AddressOf Me.OnDeleteCriteriaSetDetailsOperationCompleted
            End If
            Me.InvokeAsync("DeleteCriteriaSetDetails", New Object() {pXMLParams}, Me.DeleteCriteriaSetDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCriteriaSetDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCriteriaSetDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCriteriaSetDetailsCompleted(Me, New DeleteCriteriaSetDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCustomFormData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCustomFormData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCustomFormData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCustomFormDataAsync(ByVal pXMLParams As String)
            Me.DeleteCustomFormDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCustomFormDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCustomFormDataOperationCompleted Is Nothing) Then
                Me.DeleteCustomFormDataOperationCompleted = AddressOf Me.OnDeleteCustomFormDataOperationCompleted
            End If
            Me.InvokeAsync("DeleteCustomFormData", New Object() {pXMLParams}, Me.DeleteCustomFormDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCustomFormDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCustomFormDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCustomFormDataCompleted(Me, New DeleteCustomFormDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteDuplicateContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteDuplicateContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteDuplicateContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteDuplicateContactAsync(ByVal pXMLParams As String)
            Me.DeleteDuplicateContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDuplicateContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteDuplicateContactOperationCompleted Is Nothing) Then
                Me.DeleteDuplicateContactOperationCompleted = AddressOf Me.OnDeleteDuplicateContactOperationCompleted
            End If
            Me.InvokeAsync("DeleteDuplicateContact", New Object() {pXMLParams}, Me.DeleteDuplicateContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteDuplicateContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteDuplicateContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteDuplicateContactCompleted(Me, New DeleteDuplicateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExternalReference", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExternalReference(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExternalReference", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExternalReferenceAsync(ByVal pXMLParams As String)
            Me.DeleteExternalReferenceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExternalReferenceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExternalReferenceOperationCompleted Is Nothing) Then
                Me.DeleteExternalReferenceOperationCompleted = AddressOf Me.OnDeleteExternalReferenceOperationCompleted
            End If
            Me.InvokeAsync("DeleteExternalReference", New Object() {pXMLParams}, Me.DeleteExternalReferenceOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExternalReferenceOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExternalReferenceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExternalReferenceCompleted(Me, New DeleteExternalReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteContactFundraisingEvent", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteContactFundraisingEvent(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteContactFundraisingEvent", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteContactFundraisingEventAsync(ByVal pXMLParams As String)
            Me.DeleteContactFundraisingEventAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContactFundraisingEventAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteContactFundraisingEventOperationCompleted Is Nothing) Then
                Me.DeleteContactFundraisingEventOperationCompleted = AddressOf Me.OnDeleteContactFundraisingEventOperationCompleted
            End If
            Me.InvokeAsync("DeleteContactFundraisingEvent", New Object() {pXMLParams}, Me.DeleteContactFundraisingEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContactFundraisingEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContactFundraisingEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContactFundraisingEventCompleted(Me, New DeleteContactFundraisingEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteFundraisingPaymentSchedule", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFundraisingPaymentSchedule(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteFundraisingPaymentSchedule", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFundraisingPaymentScheduleAsync(ByVal pXMLParams As String)
            Me.DeleteFundraisingPaymentScheduleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFundraisingPaymentScheduleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteFundraisingPaymentScheduleOperationCompleted Is Nothing) Then
                Me.DeleteFundraisingPaymentScheduleOperationCompleted = AddressOf Me.OnDeleteFundraisingPaymentScheduleOperationCompleted
            End If
            Me.InvokeAsync("DeleteFundraisingPaymentSchedule", New Object() {pXMLParams}, Me.DeleteFundraisingPaymentScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFundraisingPaymentScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFundraisingPaymentScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFundraisingPaymentScheduleCompleted(Me, New DeleteFundraisingPaymentScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteFundraisingRequest", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFundraisingRequest(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteFundraisingRequest", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFundraisingRequestAsync(ByVal pXMLParams As String)
            Me.DeleteFundraisingRequestAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFundraisingRequestAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteFundraisingRequestOperationCompleted Is Nothing) Then
                Me.DeleteFundraisingRequestOperationCompleted = AddressOf Me.OnDeleteFundraisingRequestOperationCompleted
            End If
            Me.InvokeAsync("DeleteFundraisingRequest", New Object() {pXMLParams}, Me.DeleteFundraisingRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFundraisingRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFundraisingRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFundraisingRequestCompleted(Me, New DeleteFundraisingRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteFutureMembershipType", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFutureMembershipType(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteFutureMembershipType", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFutureMembershipTypeAsync(ByVal pXMLParams As String)
            Me.DeleteFutureMembershipTypeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFutureMembershipTypeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteFutureMembershipTypeOperationCompleted Is Nothing) Then
                Me.DeleteFutureMembershipTypeOperationCompleted = AddressOf Me.OnDeleteFutureMembershipTypeOperationCompleted
            End If
            Me.InvokeAsync("DeleteFutureMembershipType", New Object() {pXMLParams}, Me.DeleteFutureMembershipTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFutureMembershipTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFutureMembershipTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFutureMembershipTypeCompleted(Me, New DeleteFutureMembershipTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteHistoryItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteHistoryItem(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteHistoryItem", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteHistoryItemAsync(ByVal pXMLParams As String)
            Me.DeleteHistoryItemAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteHistoryItemAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteHistoryItemOperationCompleted Is Nothing) Then
                Me.DeleteHistoryItemOperationCompleted = AddressOf Me.OnDeleteHistoryItemOperationCompleted
            End If
            Me.InvokeAsync("DeleteHistoryItem", New Object() {pXMLParams}, Me.DeleteHistoryItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteHistoryItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteHistoryItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteHistoryItemCompleted(Me, New DeleteHistoryItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteJobSchedule", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteJobSchedule(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteJobSchedule", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteJobScheduleAsync(ByVal pXMLParams As String)
            Me.DeleteJobScheduleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteJobScheduleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteJobScheduleOperationCompleted Is Nothing) Then
                Me.DeleteJobScheduleOperationCompleted = AddressOf Me.OnDeleteJobScheduleOperationCompleted
            End If
            Me.InvokeAsync("DeleteJobSchedule", New Object() {pXMLParams}, Me.DeleteJobScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteJobScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteJobScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteJobScheduleCompleted(Me, New DeleteJobScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteLinkAsync(ByVal pXMLParams As String)
            Me.DeleteLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteLinkOperationCompleted Is Nothing) Then
                Me.DeleteLinkOperationCompleted = AddressOf Me.OnDeleteLinkOperationCompleted
            End If
            Me.InvokeAsync("DeleteLink", New Object() {pXMLParams}, Me.DeleteLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteLinkCompleted(Me, New DeleteLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeletePosition", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeletePosition(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeletePosition", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeletePositionAsync(ByVal pXMLParams As String)
            Me.DeletePositionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeletePositionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeletePositionOperationCompleted Is Nothing) Then
                Me.DeletePositionOperationCompleted = AddressOf Me.OnDeletePositionOperationCompleted
            End If
            Me.InvokeAsync("DeletePosition", New Object() {pXMLParams}, Me.DeletePositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeletePositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeletePositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeletePositionCompleted(Me, New DeletePositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeletePositionActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeletePositionActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeletePositionActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeletePositionActivityAsync(ByVal pXMLParams As String)
            Me.DeletePositionActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeletePositionActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeletePositionActivityOperationCompleted Is Nothing) Then
                Me.DeletePositionActivityOperationCompleted = AddressOf Me.OnDeletePositionActivityOperationCompleted
            End If
            Me.InvokeAsync("DeletePositionActivity", New Object() {pXMLParams}, Me.DeletePositionActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeletePositionActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeletePositionActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeletePositionActivityCompleted(Me, New DeletePositionActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeletePositionLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeletePositionLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeletePositionLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeletePositionLinkAsync(ByVal pXMLParams As String)
            Me.DeletePositionLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeletePositionLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeletePositionLinkOperationCompleted Is Nothing) Then
                Me.DeletePositionLinkOperationCompleted = AddressOf Me.OnDeletePositionLinkOperationCompleted
            End If
            Me.InvokeAsync("DeletePositionLink", New Object() {pXMLParams}, Me.DeletePositionLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeletePositionLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeletePositionLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeletePositionLinkCompleted(Me, New DeletePositionLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeletePurchaseOrderPayment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeletePurchaseOrderPayment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeletePurchaseOrderPayment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeletePurchaseOrderPaymentAsync(ByVal pXMLParams As String)
            Me.DeletePurchaseOrderPaymentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeletePurchaseOrderPaymentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeletePurchaseOrderPaymentOperationCompleted Is Nothing) Then
                Me.DeletePurchaseOrderPaymentOperationCompleted = AddressOf Me.OnDeletePurchaseOrderPaymentOperationCompleted
            End If
            Me.InvokeAsync("DeletePurchaseOrderPayment", New Object() {pXMLParams}, Me.DeletePurchaseOrderPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeletePurchaseOrderPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeletePurchaseOrderPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeletePurchaseOrderPaymentCompleted(Me, New DeletePurchaseOrderPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteProvisionalTransaction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteProvisionalTransaction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteProvisionalTransaction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteProvisionalTransactionAsync(ByVal pXMLParams As String)
            Me.DeleteProvisionalTransactionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteProvisionalTransactionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteProvisionalTransactionOperationCompleted Is Nothing) Then
                Me.DeleteProvisionalTransactionOperationCompleted = AddressOf Me.OnDeleteProvisionalTransactionOperationCompleted
            End If
            Me.InvokeAsync("DeleteProvisionalTransaction", New Object() {pXMLParams}, Me.DeleteProvisionalTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteProvisionalTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteProvisionalTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteProvisionalTransactionCompleted(Me, New DeleteProvisionalTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteRole", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteRole(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteRole", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteRoleAsync(ByVal pXMLParams As String)
            Me.DeleteRoleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteRoleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteRoleOperationCompleted Is Nothing) Then
                Me.DeleteRoleOperationCompleted = AddressOf Me.OnDeleteRoleOperationCompleted
            End If
            Me.InvokeAsync("DeleteRole", New Object() {pXMLParams}, Me.DeleteRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteRoleCompleted(Me, New DeleteRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteSelectionSet", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteSelectionSet(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteSelectionSet", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteSelectionSetAsync(ByVal pXMLParams As String)
            Me.DeleteSelectionSetAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSelectionSetAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteSelectionSetOperationCompleted Is Nothing) Then
                Me.DeleteSelectionSetOperationCompleted = AddressOf Me.OnDeleteSelectionSetOperationCompleted
            End If
            Me.InvokeAsync("DeleteSelectionSet", New Object() {pXMLParams}, Me.DeleteSelectionSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSelectionSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSelectionSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSelectionSetCompleted(Me, New DeleteSelectionSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteSelectionSetContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteSelectionSetContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteSelectionSetContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteSelectionSetContactAsync(ByVal pXMLParams As String)
            Me.DeleteSelectionSetContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSelectionSetContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteSelectionSetContactOperationCompleted Is Nothing) Then
                Me.DeleteSelectionSetContactOperationCompleted = AddressOf Me.OnDeleteSelectionSetContactOperationCompleted
            End If
            Me.InvokeAsync("DeleteSelectionSetContact", New Object() {pXMLParams}, Me.DeleteSelectionSetContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSelectionSetContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSelectionSetContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSelectionSetContactCompleted(Me, New DeleteSelectionSetContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteSelectionSteps", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteSelectionSteps(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteSelectionSteps", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteSelectionStepsAsync(ByVal pXMLParams As String)
            Me.DeleteSelectionStepsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSelectionStepsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteSelectionStepsOperationCompleted Is Nothing) Then
                Me.DeleteSelectionStepsOperationCompleted = AddressOf Me.OnDeleteSelectionStepsOperationCompleted
            End If
            Me.InvokeAsync("DeleteSelectionSteps", New Object() {pXMLParams}, Me.DeleteSelectionStepsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSelectionStepsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSelectionStepsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSelectionStepsCompleted(Me, New DeleteSelectionStepsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteStandardDocument", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteStandardDocument(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteStandardDocument", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteStandardDocumentAsync(ByVal pXMLParams As String)
            Me.DeleteStandardDocumentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteStandardDocumentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteStandardDocumentOperationCompleted Is Nothing) Then
                Me.DeleteStandardDocumentOperationCompleted = AddressOf Me.OnDeleteStandardDocumentOperationCompleted
            End If
            Me.InvokeAsync("DeleteStandardDocument", New Object() {pXMLParams}, Me.DeleteStandardDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteStandardDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteStandardDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteStandardDocumentCompleted(Me, New DeleteStandardDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteStickyNote", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteStickyNote(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteStickyNote", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteStickyNoteAsync(ByVal pXMLParams As String)
            Me.DeleteStickyNoteAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteStickyNoteAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteStickyNoteOperationCompleted Is Nothing) Then
                Me.DeleteStickyNoteOperationCompleted = AddressOf Me.OnDeleteStickyNoteOperationCompleted
            End If
            Me.InvokeAsync("DeleteStickyNote", New Object() {pXMLParams}, Me.DeleteStickyNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteStickyNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteStickyNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteStickyNoteCompleted(Me, New DeleteStickyNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteSuppression", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteSuppression(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteSuppression", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteSuppressionAsync(ByVal pXMLParams As String)
            Me.DeleteSuppressionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSuppressionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteSuppressionOperationCompleted Is Nothing) Then
                Me.DeleteSuppressionOperationCompleted = AddressOf Me.OnDeleteSuppressionOperationCompleted
            End If
            Me.InvokeAsync("DeleteSuppression", New Object() {pXMLParams}, Me.DeleteSuppressionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSuppressionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSuppressionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSuppressionCompleted(Me, New DeleteSuppressionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteDuplicateSystemModuleUsers", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteDuplicateSystemModuleUsers(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteDuplicateSystemModuleUsers", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteDuplicateSystemModuleUsersAsync(ByVal pXMLParams As String)
            Me.DeleteDuplicateSystemModuleUsersAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDuplicateSystemModuleUsersAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteDuplicateSystemModuleUsersOperationCompleted Is Nothing) Then
                Me.DeleteDuplicateSystemModuleUsersOperationCompleted = AddressOf Me.OnDeleteDuplicateSystemModuleUsersOperationCompleted
            End If
            Me.InvokeAsync("DeleteDuplicateSystemModuleUsers", New Object() {pXMLParams}, Me.DeleteDuplicateSystemModuleUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteDuplicateSystemModuleUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteDuplicateSystemModuleUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteDuplicateSystemModuleUsersCompleted(Me, New DeleteDuplicateSystemModuleUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteInactiveSystemModuleUsers", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteInactiveSystemModuleUsers(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteInactiveSystemModuleUsers", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteInactiveSystemModuleUsersAsync(ByVal pXMLParams As String)
            Me.DeleteInactiveSystemModuleUsersAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteInactiveSystemModuleUsersAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteInactiveSystemModuleUsersOperationCompleted Is Nothing) Then
                Me.DeleteInactiveSystemModuleUsersOperationCompleted = AddressOf Me.OnDeleteInactiveSystemModuleUsersOperationCompleted
            End If
            Me.InvokeAsync("DeleteInactiveSystemModuleUsers", New Object() {pXMLParams}, Me.DeleteInactiveSystemModuleUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteInactiveSystemModuleUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteInactiveSystemModuleUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteInactiveSystemModuleUsersCompleted(Me, New DeleteInactiveSystemModuleUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteContactIncentives", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteContactIncentives(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteContactIncentives", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteContactIncentivesAsync(ByVal pXMLParams As String)
            Me.DeleteContactIncentivesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContactIncentivesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteContactIncentivesOperationCompleted Is Nothing) Then
                Me.DeleteContactIncentivesOperationCompleted = AddressOf Me.OnDeleteContactIncentivesOperationCompleted
            End If
            Me.InvokeAsync("DeleteContactIncentives", New Object() {pXMLParams}, Me.DeleteContactIncentivesOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContactIncentivesOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContactIncentivesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContactIncentivesCompleted(Me, New DeleteContactIncentivesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEnclosures", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEnclosures(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEnclosures", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEnclosuresAsync(ByVal pXMLParams As String)
            Me.DeleteEnclosuresAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEnclosuresAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEnclosuresOperationCompleted Is Nothing) Then
                Me.DeleteEnclosuresOperationCompleted = AddressOf Me.OnDeleteEnclosuresOperationCompleted
            End If
            Me.InvokeAsync("DeleteEnclosures", New Object() {pXMLParams}, Me.DeleteEnclosuresOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEnclosuresOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEnclosuresCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEnclosuresCompleted(Me, New DeleteEnclosuresCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/MergeContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MergeContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("MergeContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MergeContactAsync(ByVal pXMLParams As String)
            Me.MergeContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MergeContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.MergeContactOperationCompleted Is Nothing) Then
                Me.MergeContactOperationCompleted = AddressOf Me.OnMergeContactOperationCompleted
            End If
            Me.InvokeAsync("MergeContact", New Object() {pXMLParams}, Me.MergeContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnMergeContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.MergeContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MergeContactCompleted(Me, New MergeContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/MergeAddress", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MergeAddress(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("MergeAddress", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MergeAddressAsync(ByVal pXMLParams As String)
            Me.MergeAddressAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MergeAddressAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.MergeAddressOperationCompleted Is Nothing) Then
                Me.MergeAddressOperationCompleted = AddressOf Me.OnMergeAddressOperationCompleted
            End If
            Me.InvokeAsync("MergeAddress", New Object() {pXMLParams}, Me.MergeAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnMergeAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.MergeAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MergeAddressCompleted(Me, New MergeAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteContactSurvey", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteContactSurvey(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteContactSurvey", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteContactSurveyAsync(ByVal pXMLParams As String)
            Me.DeleteContactSurveyAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContactSurveyAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteContactSurveyOperationCompleted Is Nothing) Then
                Me.DeleteContactSurveyOperationCompleted = AddressOf Me.OnDeleteContactSurveyOperationCompleted
            End If
            Me.InvokeAsync("DeleteContactSurvey", New Object() {pXMLParams}, Me.DeleteContactSurveyOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContactSurveyOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContactSurveyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContactSurveyCompleted(Me, New DeleteContactSurveyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateDirectoryPreferences", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDirectoryPreferences(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateDirectoryPreferences", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDirectoryPreferencesAsync(ByVal pXMLParams As String)
            Me.UpdateDirectoryPreferencesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDirectoryPreferencesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateDirectoryPreferencesOperationCompleted Is Nothing) Then
                Me.UpdateDirectoryPreferencesOperationCompleted = AddressOf Me.OnUpdateDirectoryPreferencesOperationCompleted
            End If
            Me.InvokeAsync("UpdateDirectoryPreferences", New Object() {pXMLParams}, Me.UpdateDirectoryPreferencesOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDirectoryPreferencesOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDirectoryPreferencesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDirectoryPreferencesCompleted(Me, New UpdateDirectoryPreferencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AbortJob", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AbortJob(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AbortJob", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AbortJobAsync(ByVal pXMLParams As String)
            Me.AbortJobAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AbortJobAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AbortJobOperationCompleted Is Nothing) Then
                Me.AbortJobOperationCompleted = AddressOf Me.OnAbortJobOperationCompleted
            End If
            Me.InvokeAsync("AbortJob", New Object() {pXMLParams}, Me.AbortJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnAbortJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.AbortJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AbortJobCompleted(Me, New AbortJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEntityAlert", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEntityAlert(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEntityAlert", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEntityAlertAsync(ByVal pXMLParams As String)
            Me.UpdateEntityAlertAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEntityAlertAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEntityAlertOperationCompleted Is Nothing) Then
                Me.UpdateEntityAlertOperationCompleted = AddressOf Me.OnUpdateEntityAlertOperationCompleted
            End If
            Me.InvokeAsync("UpdateEntityAlert", New Object() {pXMLParams}, Me.UpdateEntityAlertOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEntityAlertOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEntityAlertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEntityAlertCompleted(Me, New UpdateEntityAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEntityAlertItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEntityAlertItem(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEntityAlertItem", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEntityAlertItemAsync(ByVal pXMLParams As String)
            Me.UpdateEntityAlertItemAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEntityAlertItemAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEntityAlertItemOperationCompleted Is Nothing) Then
                Me.UpdateEntityAlertItemOperationCompleted = AddressOf Me.OnUpdateEntityAlertItemOperationCompleted
            End If
            Me.InvokeAsync("UpdateEntityAlertItem", New Object() {pXMLParams}, Me.UpdateEntityAlertItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEntityAlertItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEntityAlertItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEntityAlertItemCompleted(Me, New UpdateEntityAlertItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/InitCustomForms", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InitCustomForms(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("InitCustomForms", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InitCustomFormsAsync(ByVal pXMLParams As String)
            Me.InitCustomFormsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InitCustomFormsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.InitCustomFormsOperationCompleted Is Nothing) Then
                Me.InitCustomFormsOperationCompleted = AddressOf Me.OnInitCustomFormsOperationCompleted
            End If
            Me.InvokeAsync("InitCustomForms", New Object() {pXMLParams}, Me.InitCustomFormsOperationCompleted, userState)
        End Sub
        
        Private Sub OnInitCustomFormsOperationCompleted(ByVal arg As Object)
            If (Not (Me.InitCustomFormsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InitCustomFormsCompleted(Me, New InitCustomFormsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/InitMailSortData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InitMailSortData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("InitMailSortData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InitMailSortDataAsync(ByVal pXMLParams As String)
            Me.InitMailSortDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InitMailSortDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.InitMailSortDataOperationCompleted Is Nothing) Then
                Me.InitMailSortDataOperationCompleted = AddressOf Me.OnInitMailSortDataOperationCompleted
            End If
            Me.InvokeAsync("InitMailSortData", New Object() {pXMLParams}, Me.InitMailSortDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnInitMailSortDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.InitMailSortDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InitMailSortDataCompleted(Me, New InitMailSortDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ImportTraderAppInfo", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportTraderAppInfo(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ImportTraderAppInfo", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportTraderAppInfoAsync(ByVal pXMLParams As String)
            Me.ImportTraderAppInfoAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportTraderAppInfoAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ImportTraderAppInfoOperationCompleted Is Nothing) Then
                Me.ImportTraderAppInfoOperationCompleted = AddressOf Me.OnImportTraderAppInfoOperationCompleted
            End If
            Me.InvokeAsync("ImportTraderAppInfo", New Object() {pXMLParams}, Me.ImportTraderAppInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportTraderAppInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportTraderAppInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportTraderAppInfoCompleted(Me, New ImportTraderAppInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CloseSite", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CloseSite(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CloseSite", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CloseSiteAsync(ByVal pXMLParams As String)
            Me.CloseSiteAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloseSiteAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CloseSiteOperationCompleted Is Nothing) Then
                Me.CloseSiteOperationCompleted = AddressOf Me.OnCloseSiteOperationCompleted
            End If
            Me.InvokeAsync("CloseSite", New Object() {pXMLParams}, Me.CloseSiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloseSiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloseSiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloseSiteCompleted(Me, New CloseSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/MovePosition", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MovePosition(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("MovePosition", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MovePositionAsync(ByVal pXMLParams As String)
            Me.MovePositionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MovePositionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.MovePositionOperationCompleted Is Nothing) Then
                Me.MovePositionOperationCompleted = AddressOf Me.OnMovePositionOperationCompleted
            End If
            Me.InvokeAsync("MovePosition", New Object() {pXMLParams}, Me.MovePositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnMovePositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.MovePositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MovePositionCompleted(Me, New MovePositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ResubmitJobSchedule", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ResubmitJobSchedule(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ResubmitJobSchedule", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ResubmitJobScheduleAsync(ByVal pXMLParams As String)
            Me.ResubmitJobScheduleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ResubmitJobScheduleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ResubmitJobScheduleOperationCompleted Is Nothing) Then
                Me.ResubmitJobScheduleOperationCompleted = AddressOf Me.OnResubmitJobScheduleOperationCompleted
            End If
            Me.InvokeAsync("ResubmitJobSchedule", New Object() {pXMLParams}, Me.ResubmitJobScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnResubmitJobScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.ResubmitJobScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ResubmitJobScheduleCompleted(Me, New ResubmitJobScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SetConfig", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetConfig(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SetConfig", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetConfigAsync(ByVal pXMLParams As String)
            Me.SetConfigAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetConfigAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SetConfigOperationCompleted Is Nothing) Then
                Me.SetConfigOperationCompleted = AddressOf Me.OnSetConfigOperationCompleted
            End If
            Me.InvokeAsync("SetConfig", New Object() {pXMLParams}, Me.SetConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetConfigCompleted(Me, New SetConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateAction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateAction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateActionAsync(ByVal pXMLParams As String)
            Me.UpdateActionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateActionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateActionOperationCompleted Is Nothing) Then
                Me.UpdateActionOperationCompleted = AddressOf Me.OnUpdateActionOperationCompleted
            End If
            Me.InvokeAsync("UpdateAction", New Object() {pXMLParams}, Me.UpdateActionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateActionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateActionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateActionCompleted(Me, New UpdateActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateActionLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateActionLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateActionLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateActionLinkAsync(ByVal pXMLParams As String)
            Me.UpdateActionLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateActionLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateActionLinkOperationCompleted Is Nothing) Then
                Me.UpdateActionLinkOperationCompleted = AddressOf Me.OnUpdateActionLinkOperationCompleted
            End If
            Me.InvokeAsync("UpdateActionLink", New Object() {pXMLParams}, Me.UpdateActionLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateActionLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateActionLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateActionLinkCompleted(Me, New UpdateActionLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCampaign", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCampaign(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCampaign", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignAsync(ByVal pXMLParams As String)
            Me.UpdateCampaignAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCampaignOperationCompleted Is Nothing) Then
                Me.UpdateCampaignOperationCompleted = AddressOf Me.OnUpdateCampaignOperationCompleted
            End If
            Me.InvokeAsync("UpdateCampaign", New Object() {pXMLParams}, Me.UpdateCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCampaignCompleted(Me, New UpdateCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCampaignAppeal", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCampaignAppeal(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCampaignAppeal", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignAppealAsync(ByVal pXMLParams As String)
            Me.UpdateCampaignAppealAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignAppealAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCampaignAppealOperationCompleted Is Nothing) Then
                Me.UpdateCampaignAppealOperationCompleted = AddressOf Me.OnUpdateCampaignAppealOperationCompleted
            End If
            Me.InvokeAsync("UpdateCampaignAppeal", New Object() {pXMLParams}, Me.UpdateCampaignAppealOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCampaignAppealOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCampaignAppealCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCampaignAppealCompleted(Me, New UpdateCampaignAppealCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCampaignCost", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCampaignCost(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCampaignCost", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignCostAsync(ByVal pXMLParams As String)
            Me.UpdateCampaignCostAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignCostAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCampaignCostOperationCompleted Is Nothing) Then
                Me.UpdateCampaignCostOperationCompleted = AddressOf Me.OnUpdateCampaignCostOperationCompleted
            End If
            Me.InvokeAsync("UpdateCampaignCost", New Object() {pXMLParams}, Me.UpdateCampaignCostOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCampaignCostOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCampaignCostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCampaignCostCompleted(Me, New UpdateCampaignCostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCampaignRole", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCampaignRole(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCampaignRole", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignRoleAsync(ByVal pXMLParams As String)
            Me.UpdateCampaignRoleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignRoleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCampaignRoleOperationCompleted Is Nothing) Then
                Me.UpdateCampaignRoleOperationCompleted = AddressOf Me.OnUpdateCampaignRoleOperationCompleted
            End If
            Me.InvokeAsync("UpdateCampaignRole", New Object() {pXMLParams}, Me.UpdateCampaignRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCampaignRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCampaignRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCampaignRoleCompleted(Me, New UpdateCampaignRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCampaignSegment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCampaignSegment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCampaignSegment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignSegmentAsync(ByVal pXMLParams As String)
            Me.UpdateCampaignSegmentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignSegmentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCampaignSegmentOperationCompleted Is Nothing) Then
                Me.UpdateCampaignSegmentOperationCompleted = AddressOf Me.OnUpdateCampaignSegmentOperationCompleted
            End If
            Me.InvokeAsync("UpdateCampaignSegment", New Object() {pXMLParams}, Me.UpdateCampaignSegmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCampaignSegmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCampaignSegmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCampaignSegmentCompleted(Me, New UpdateCampaignSegmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCampaignSupplier", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCampaignSupplier(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCampaignSupplier", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignSupplierAsync(ByVal pXMLParams As String)
            Me.UpdateCampaignSupplierAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignSupplierAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCampaignSupplierOperationCompleted Is Nothing) Then
                Me.UpdateCampaignSupplierOperationCompleted = AddressOf Me.OnUpdateCampaignSupplierOperationCompleted
            End If
            Me.InvokeAsync("UpdateCampaignSupplier", New Object() {pXMLParams}, Me.UpdateCampaignSupplierOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCampaignSupplierOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCampaignSupplierCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCampaignSupplierCompleted(Me, New UpdateCampaignSupplierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCollectionPoint", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCollectionPoint(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCollectionPoint", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCollectionPointAsync(ByVal pXMLParams As String)
            Me.UpdateCollectionPointAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCollectionPointAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCollectionPointOperationCompleted Is Nothing) Then
                Me.UpdateCollectionPointOperationCompleted = AddressOf Me.OnUpdateCollectionPointOperationCompleted
            End If
            Me.InvokeAsync("UpdateCollectionPoint", New Object() {pXMLParams}, Me.UpdateCollectionPointOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCollectionPointOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCollectionPointCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCollectionPointCompleted(Me, New UpdateCollectionPointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCollectorShift", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCollectorShift(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCollectorShift", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCollectorShiftAsync(ByVal pXMLParams As String)
            Me.UpdateCollectorShiftAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCollectorShiftAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCollectorShiftOperationCompleted Is Nothing) Then
                Me.UpdateCollectorShiftOperationCompleted = AddressOf Me.OnUpdateCollectorShiftOperationCompleted
            End If
            Me.InvokeAsync("UpdateCollectorShift", New Object() {pXMLParams}, Me.UpdateCollectorShiftOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCollectorShiftOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCollectorShiftCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCollectorShiftCompleted(Me, New UpdateCollectorShiftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCollectionResource", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCollectionResource(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCollectionResource", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCollectionResourceAsync(ByVal pXMLParams As String)
            Me.UpdateCollectionResourceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCollectionResourceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCollectionResourceOperationCompleted Is Nothing) Then
                Me.UpdateCollectionResourceOperationCompleted = AddressOf Me.OnUpdateCollectionResourceOperationCompleted
            End If
            Me.InvokeAsync("UpdateCollectionResource", New Object() {pXMLParams}, Me.UpdateCollectionResourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCollectionResourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCollectionResourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCollectionResourceCompleted(Me, New UpdateCollectionResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCollectionPIS", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCollectionPIS(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCollectionPIS", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCollectionPISAsync(ByVal pXMLParams As String)
            Me.UpdateCollectionPISAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCollectionPISAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCollectionPISOperationCompleted Is Nothing) Then
                Me.UpdateCollectionPISOperationCompleted = AddressOf Me.OnUpdateCollectionPISOperationCompleted
            End If
            Me.InvokeAsync("UpdateCollectionPIS", New Object() {pXMLParams}, Me.UpdateCollectionPISOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCollectionPISOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCollectionPISCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCollectionPISCompleted(Me, New UpdateCollectionPISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateCollectionBox", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCollectionBox(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateCollectionBox", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCollectionBoxAsync(ByVal pXMLParams As String)
            Me.UpdateCollectionBoxAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCollectionBoxAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateCollectionBoxOperationCompleted Is Nothing) Then
                Me.UpdateCollectionBoxOperationCompleted = AddressOf Me.OnUpdateCollectionBoxOperationCompleted
            End If
            Me.InvokeAsync("UpdateCollectionBox", New Object() {pXMLParams}, Me.UpdateCollectionBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCollectionBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCollectionBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCollectionBoxCompleted(Me, New UpdateCollectionBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateH2HCollection", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateH2HCollection(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateH2HCollection", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateH2HCollectionAsync(ByVal pXMLParams As String)
            Me.UpdateH2HCollectionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateH2HCollectionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateH2HCollectionOperationCompleted Is Nothing) Then
                Me.UpdateH2HCollectionOperationCompleted = AddressOf Me.OnUpdateH2HCollectionOperationCompleted
            End If
            Me.InvokeAsync("UpdateH2HCollection", New Object() {pXMLParams}, Me.UpdateH2HCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateH2HCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateH2HCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateH2HCollectionCompleted(Me, New UpdateH2HCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateH2hCollector", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateH2hCollector(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateH2hCollector", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateH2hCollectorAsync(ByVal pXMLParams As String)
            Me.UpdateH2hCollectorAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateH2hCollectorAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateH2hCollectorOperationCompleted Is Nothing) Then
                Me.UpdateH2hCollectorOperationCompleted = AddressOf Me.OnUpdateH2hCollectorOperationCompleted
            End If
            Me.InvokeAsync("UpdateH2hCollector", New Object() {pXMLParams}, Me.UpdateH2hCollectorOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateH2hCollectorOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateH2hCollectorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateH2hCollectorCompleted(Me, New UpdateH2hCollectorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMannedCollection", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMannedCollection(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateMannedCollection", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMannedCollectionAsync(ByVal pXMLParams As String)
            Me.UpdateMannedCollectionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMannedCollectionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateMannedCollectionOperationCompleted Is Nothing) Then
                Me.UpdateMannedCollectionOperationCompleted = AddressOf Me.OnUpdateMannedCollectionOperationCompleted
            End If
            Me.InvokeAsync("UpdateMannedCollection", New Object() {pXMLParams}, Me.UpdateMannedCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMannedCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMannedCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMannedCollectionCompleted(Me, New UpdateMannedCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMannedCollector", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMannedCollector(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateMannedCollector", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMannedCollectorAsync(ByVal pXMLParams As String)
            Me.UpdateMannedCollectorAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMannedCollectorAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateMannedCollectorOperationCompleted Is Nothing) Then
                Me.UpdateMannedCollectorOperationCompleted = AddressOf Me.OnUpdateMannedCollectorOperationCompleted
            End If
            Me.InvokeAsync("UpdateMannedCollector", New Object() {pXMLParams}, Me.UpdateMannedCollectorOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMannedCollectorOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMannedCollectorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMannedCollectorCompleted(Me, New UpdateMannedCollectorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMailingSelectionSet", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMailingSelectionSet(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateMailingSelectionSet", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMailingSelectionSetAsync(ByVal pXMLParams As String)
            Me.UpdateMailingSelectionSetAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMailingSelectionSetAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateMailingSelectionSetOperationCompleted Is Nothing) Then
                Me.UpdateMailingSelectionSetOperationCompleted = AddressOf Me.OnUpdateMailingSelectionSetOperationCompleted
            End If
            Me.InvokeAsync("UpdateMailingSelectionSet", New Object() {pXMLParams}, Me.UpdateMailingSelectionSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMailingSelectionSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMailingSelectionSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMailingSelectionSetCompleted(Me, New UpdateMailingSelectionSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMailingContactAddress", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMailingContactAddress(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateMailingContactAddress", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMailingContactAddressAsync(ByVal pXMLParams As String)
            Me.UpdateMailingContactAddressAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMailingContactAddressAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateMailingContactAddressOperationCompleted Is Nothing) Then
                Me.UpdateMailingContactAddressOperationCompleted = AddressOf Me.OnUpdateMailingContactAddressOperationCompleted
            End If
            Me.InvokeAsync("UpdateMailingContactAddress", New Object() {pXMLParams}, Me.UpdateMailingContactAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMailingContactAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMailingContactAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMailingContactAddressCompleted(Me, New UpdateMailingContactAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateSegmentCostCentre", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSegmentCostCentre(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateSegmentCostCentre", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSegmentCostCentreAsync(ByVal pXMLParams As String)
            Me.UpdateSegmentCostCentreAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSegmentCostCentreAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateSegmentCostCentreOperationCompleted Is Nothing) Then
                Me.UpdateSegmentCostCentreOperationCompleted = AddressOf Me.OnUpdateSegmentCostCentreOperationCompleted
            End If
            Me.InvokeAsync("UpdateSegmentCostCentre", New Object() {pXMLParams}, Me.UpdateSegmentCostCentreOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSegmentCostCentreOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSegmentCostCentreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSegmentCostCentreCompleted(Me, New UpdateSegmentCostCentreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateSegmentProduct", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSegmentProduct(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateSegmentProduct", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSegmentProductAsync(ByVal pXMLParams As String)
            Me.UpdateSegmentProductAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSegmentProductAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateSegmentProductOperationCompleted Is Nothing) Then
                Me.UpdateSegmentProductOperationCompleted = AddressOf Me.OnUpdateSegmentProductOperationCompleted
            End If
            Me.InvokeAsync("UpdateSegmentProduct", New Object() {pXMLParams}, Me.UpdateSegmentProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSegmentProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSegmentProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSegmentProductCompleted(Me, New UpdateSegmentProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateSelectionSet", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSelectionSet(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateSelectionSet", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSelectionSetAsync(ByVal pXMLParams As String)
            Me.UpdateSelectionSetAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSelectionSetAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateSelectionSetOperationCompleted Is Nothing) Then
                Me.UpdateSelectionSetOperationCompleted = AddressOf Me.OnUpdateSelectionSetOperationCompleted
            End If
            Me.InvokeAsync("UpdateSelectionSet", New Object() {pXMLParams}, Me.UpdateSelectionSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSelectionSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSelectionSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSelectionSetCompleted(Me, New UpdateSelectionSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateTableMaintenanceData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTableMaintenanceData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateTableMaintenanceData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTableMaintenanceDataAsync(ByVal pXMLParams As String)
            Me.UpdateTableMaintenanceDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTableMaintenanceDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateTableMaintenanceDataOperationCompleted Is Nothing) Then
                Me.UpdateTableMaintenanceDataOperationCompleted = AddressOf Me.OnUpdateTableMaintenanceDataOperationCompleted
            End If
            Me.InvokeAsync("UpdateTableMaintenanceData", New Object() {pXMLParams}, Me.UpdateTableMaintenanceDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTableMaintenanceDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTableMaintenanceDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTableMaintenanceDataCompleted(Me, New UpdateTableMaintenanceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateTableNote", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTableNote(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateTableNote", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTableNoteAsync(ByVal pXMLParams As String)
            Me.UpdateTableNoteAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTableNoteAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateTableNoteOperationCompleted Is Nothing) Then
                Me.UpdateTableNoteOperationCompleted = AddressOf Me.OnUpdateTableNoteOperationCompleted
            End If
            Me.InvokeAsync("UpdateTableNote", New Object() {pXMLParams}, Me.UpdateTableNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTableNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTableNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTableNoteCompleted(Me, New UpdateTableNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateTickBox", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTickBox(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateTickBox", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTickBoxAsync(ByVal pXMLParams As String)
            Me.UpdateTickBoxAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTickBoxAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateTickBoxOperationCompleted Is Nothing) Then
                Me.UpdateTickBoxOperationCompleted = AddressOf Me.OnUpdateTickBoxOperationCompleted
            End If
            Me.InvokeAsync("UpdateTickBox", New Object() {pXMLParams}, Me.UpdateTickBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTickBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTickBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTickBoxCompleted(Me, New UpdateTickBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateUnmannedCollection", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUnmannedCollection(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateUnmannedCollection", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUnmannedCollectionAsync(ByVal pXMLParams As String)
            Me.UpdateUnmannedCollectionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUnmannedCollectionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateUnmannedCollectionOperationCompleted Is Nothing) Then
                Me.UpdateUnmannedCollectionOperationCompleted = AddressOf Me.OnUpdateUnmannedCollectionOperationCompleted
            End If
            Me.InvokeAsync("UpdateUnmannedCollection", New Object() {pXMLParams}, Me.UpdateUnmannedCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUnmannedCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUnmannedCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUnmannedCollectionCompleted(Me, New UpdateUnmannedCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateDespatchNote", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDespatchNote(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateDespatchNote", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDespatchNoteAsync(ByVal pXMLParams As String)
            Me.UpdateDespatchNoteAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDespatchNoteAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateDespatchNoteOperationCompleted Is Nothing) Then
                Me.UpdateDespatchNoteOperationCompleted = AddressOf Me.OnUpdateDespatchNoteOperationCompleted
            End If
            Me.InvokeAsync("UpdateDespatchNote", New Object() {pXMLParams}, Me.UpdateDespatchNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDespatchNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDespatchNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDespatchNoteCompleted(Me, New UpdateDespatchNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddStockMovement", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddStockMovement(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddStockMovement", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddStockMovementAsync(ByVal pXMLParams As String)
            Me.AddStockMovementAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddStockMovementAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddStockMovementOperationCompleted Is Nothing) Then
                Me.AddStockMovementOperationCompleted = AddressOf Me.OnAddStockMovementOperationCompleted
            End If
            Me.InvokeAsync("AddStockMovement", New Object() {pXMLParams}, Me.AddStockMovementOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddStockMovementOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddStockMovementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddStockMovementCompleted(Me, New AddStockMovementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateDuplicateContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDuplicateContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateDuplicateContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDuplicateContactAsync(ByVal pXMLParams As String)
            Me.UpdateDuplicateContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDuplicateContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateDuplicateContactOperationCompleted Is Nothing) Then
                Me.UpdateDuplicateContactOperationCompleted = AddressOf Me.OnUpdateDuplicateContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateDuplicateContact", New Object() {pXMLParams}, Me.UpdateDuplicateContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDuplicateContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDuplicateContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDuplicateContactCompleted(Me, New UpdateDuplicateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddStockToPack", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddStockToPack(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddStockToPack", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddStockToPackAsync(ByVal pXMLParams As String)
            Me.AddStockToPackAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddStockToPackAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddStockToPackOperationCompleted Is Nothing) Then
                Me.AddStockToPackOperationCompleted = AddressOf Me.OnAddStockToPackOperationCompleted
            End If
            Me.InvokeAsync("AddStockToPack", New Object() {pXMLParams}, Me.AddStockToPackOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddStockToPackOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddStockToPackCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddStockToPackCompleted(Me, New AddStockToPackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateEventLoanItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEventLoanItem(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateEventLoanItem", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEventLoanItemAsync(ByVal pXMLParams As String)
            Me.UpdateEventLoanItemAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEventLoanItemAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateEventLoanItemOperationCompleted Is Nothing) Then
                Me.UpdateEventLoanItemOperationCompleted = AddressOf Me.OnUpdateEventLoanItemOperationCompleted
            End If
            Me.InvokeAsync("UpdateEventLoanItem", New Object() {pXMLParams}, Me.UpdateEventLoanItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEventLoanItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEventLoanItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEventLoanItemCompleted(Me, New UpdateEventLoanItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/RenumberEventCandidates", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RenumberEventCandidates(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("RenumberEventCandidates", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RenumberEventCandidatesAsync(ByVal pXMLParams As String)
            Me.RenumberEventCandidatesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RenumberEventCandidatesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.RenumberEventCandidatesOperationCompleted Is Nothing) Then
                Me.RenumberEventCandidatesOperationCompleted = AddressOf Me.OnRenumberEventCandidatesOperationCompleted
            End If
            Me.InvokeAsync("RenumberEventCandidates", New Object() {pXMLParams}, Me.RenumberEventCandidatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnRenumberEventCandidatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.RenumberEventCandidatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RenumberEventCandidatesCompleted(Me, New RenumberEventCandidatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/RenumberSessionBookings", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RenumberSessionBookings(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("RenumberSessionBookings", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RenumberSessionBookingsAsync(ByVal pXMLParams As String)
            Me.RenumberSessionBookingsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RenumberSessionBookingsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.RenumberSessionBookingsOperationCompleted Is Nothing) Then
                Me.RenumberSessionBookingsOperationCompleted = AddressOf Me.OnRenumberSessionBookingsOperationCompleted
            End If
            Me.InvokeAsync("RenumberSessionBookings", New Object() {pXMLParams}, Me.RenumberSessionBookingsOperationCompleted, userState)
        End Sub
        
        Private Sub OnRenumberSessionBookingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.RenumberSessionBookingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RenumberSessionBookingsCompleted(Me, New RenumberSessionBookingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateContactSurvey", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactSurvey(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateContactSurvey", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactSurveyAsync(ByVal pXMLParams As String)
            Me.UpdateContactSurveyAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactSurveyAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateContactSurveyOperationCompleted Is Nothing) Then
                Me.UpdateContactSurveyOperationCompleted = AddressOf Me.OnUpdateContactSurveyOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactSurvey", New Object() {pXMLParams}, Me.UpdateContactSurveyOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactSurveyOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactSurveyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactSurveyCompleted(Me, New UpdateContactSurveyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateContactSurveyResponses", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactSurveyResponses(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateContactSurveyResponses", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactSurveyResponsesAsync(ByVal pXMLParams As String)
            Me.UpdateContactSurveyResponsesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactSurveyResponsesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateContactSurveyResponsesOperationCompleted Is Nothing) Then
                Me.UpdateContactSurveyResponsesOperationCompleted = AddressOf Me.OnUpdateContactSurveyResponsesOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactSurveyResponses", New Object() {pXMLParams}, Me.UpdateContactSurveyResponsesOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactSurveyResponsesOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactSurveyResponsesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactSurveyResponsesCompleted(Me, New UpdateContactSurveyResponsesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddDelegateActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddDelegateActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddDelegateActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddDelegateActivityAsync(ByVal pXMLParams As String)
            Me.AddDelegateActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddDelegateActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddDelegateActivityOperationCompleted Is Nothing) Then
                Me.AddDelegateActivityOperationCompleted = AddressOf Me.OnAddDelegateActivityOperationCompleted
            End If
            Me.InvokeAsync("AddDelegateActivity", New Object() {pXMLParams}, Me.AddDelegateActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddDelegateActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddDelegateActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddDelegateActivityCompleted(Me, New AddDelegateActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddDelegateLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddDelegateLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddDelegateLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddDelegateLinkAsync(ByVal pXMLParams As String)
            Me.AddDelegateLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddDelegateLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddDelegateLinkOperationCompleted Is Nothing) Then
                Me.AddDelegateLinkOperationCompleted = AddressOf Me.OnAddDelegateLinkOperationCompleted
            End If
            Me.InvokeAsync("AddDelegateLink", New Object() {pXMLParams}, Me.AddDelegateLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddDelegateLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddDelegateLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddDelegateLinkCompleted(Me, New AddDelegateLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEvent", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEvent(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEvent", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventAsync(ByVal pXMLParams As String)
            Me.AddEventAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventOperationCompleted Is Nothing) Then
                Me.AddEventOperationCompleted = AddressOf Me.OnAddEventOperationCompleted
            End If
            Me.InvokeAsync("AddEvent", New Object() {pXMLParams}, Me.AddEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventCompleted(Me, New AddEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventBookingOption", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventBookingOption(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventBookingOption", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventBookingOptionAsync(ByVal pXMLParams As String)
            Me.AddEventBookingOptionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventBookingOptionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventBookingOptionOperationCompleted Is Nothing) Then
                Me.AddEventBookingOptionOperationCompleted = AddressOf Me.OnAddEventBookingOptionOperationCompleted
            End If
            Me.InvokeAsync("AddEventBookingOption", New Object() {pXMLParams}, Me.AddEventBookingOptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventBookingOptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventBookingOptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventBookingOptionCompleted(Me, New AddEventBookingOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventContactAsync(ByVal pXMLParams As String)
            Me.AddEventContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventContactOperationCompleted Is Nothing) Then
                Me.AddEventContactOperationCompleted = AddressOf Me.OnAddEventContactOperationCompleted
            End If
            Me.InvokeAsync("AddEventContact", New Object() {pXMLParams}, Me.AddEventContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventContactCompleted(Me, New AddEventContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventCost", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventCost(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventCost", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventCostAsync(ByVal pXMLParams As String)
            Me.AddEventCostAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventCostAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventCostOperationCompleted Is Nothing) Then
                Me.AddEventCostOperationCompleted = AddressOf Me.OnAddEventCostOperationCompleted
            End If
            Me.InvokeAsync("AddEventCost", New Object() {pXMLParams}, Me.AddEventCostOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventCostOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventCostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventCostCompleted(Me, New AddEventCostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddDelegateToEvent", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddDelegateToEvent(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddDelegateToEvent", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddDelegateToEventAsync(ByVal pXMLParams As String)
            Me.AddDelegateToEventAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddDelegateToEventAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddDelegateToEventOperationCompleted Is Nothing) Then
                Me.AddDelegateToEventOperationCompleted = AddressOf Me.OnAddDelegateToEventOperationCompleted
            End If
            Me.InvokeAsync("AddDelegateToEvent", New Object() {pXMLParams}, Me.AddDelegateToEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddDelegateToEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddDelegateToEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddDelegateToEventCompleted(Me, New AddDelegateToEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventMailing", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventMailing(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventMailing", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventMailingAsync(ByVal pXMLParams As String)
            Me.AddEventMailingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventMailingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventMailingOperationCompleted Is Nothing) Then
                Me.AddEventMailingOperationCompleted = AddressOf Me.OnAddEventMailingOperationCompleted
            End If
            Me.InvokeAsync("AddEventMailing", New Object() {pXMLParams}, Me.AddEventMailingOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventMailingOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventMailingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventMailingCompleted(Me, New AddEventMailingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventOptionSession", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventOptionSession(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventOptionSession", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventOptionSessionAsync(ByVal pXMLParams As String)
            Me.AddEventOptionSessionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventOptionSessionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventOptionSessionOperationCompleted Is Nothing) Then
                Me.AddEventOptionSessionOperationCompleted = AddressOf Me.OnAddEventOptionSessionOperationCompleted
            End If
            Me.InvokeAsync("AddEventOptionSession", New Object() {pXMLParams}, Me.AddEventOptionSessionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventOptionSessionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventOptionSessionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventOptionSessionCompleted(Me, New AddEventOptionSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventOrganiser", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventOrganiser(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventOrganiser", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventOrganiserAsync(ByVal pXMLParams As String)
            Me.AddEventOrganiserAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventOrganiserAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventOrganiserOperationCompleted Is Nothing) Then
                Me.AddEventOrganiserOperationCompleted = AddressOf Me.OnAddEventOrganiserOperationCompleted
            End If
            Me.InvokeAsync("AddEventOrganiser", New Object() {pXMLParams}, Me.AddEventOrganiserOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventOrganiserOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventOrganiserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventOrganiserCompleted(Me, New AddEventOrganiserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventOwner", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventOwner(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventOwner", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventOwnerAsync(ByVal pXMLParams As String)
            Me.AddEventOwnerAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventOwnerAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventOwnerOperationCompleted Is Nothing) Then
                Me.AddEventOwnerOperationCompleted = AddressOf Me.OnAddEventOwnerOperationCompleted
            End If
            Me.InvokeAsync("AddEventOwner", New Object() {pXMLParams}, Me.AddEventOwnerOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventOwnerOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventOwnerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventOwnerCompleted(Me, New AddEventOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventPersonnel", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventPersonnel(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventPersonnel", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventPersonnelAsync(ByVal pXMLParams As String)
            Me.AddEventPersonnelAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventPersonnelAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventPersonnelOperationCompleted Is Nothing) Then
                Me.AddEventPersonnelOperationCompleted = AddressOf Me.OnAddEventPersonnelOperationCompleted
            End If
            Me.InvokeAsync("AddEventPersonnel", New Object() {pXMLParams}, Me.AddEventPersonnelOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventPersonnelOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventPersonnelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventPersonnelCompleted(Me, New AddEventPersonnelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventPersonnelTask", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventPersonnelTask(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventPersonnelTask", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventPersonnelTaskAsync(ByVal pXMLParams As String)
            Me.AddEventPersonnelTaskAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventPersonnelTaskAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventPersonnelTaskOperationCompleted Is Nothing) Then
                Me.AddEventPersonnelTaskOperationCompleted = AddressOf Me.OnAddEventPersonnelTaskOperationCompleted
            End If
            Me.InvokeAsync("AddEventPersonnelTask", New Object() {pXMLParams}, Me.AddEventPersonnelTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventPersonnelTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventPersonnelTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventPersonnelTaskCompleted(Me, New AddEventPersonnelTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventPIS", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventPIS(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventPIS", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventPISAsync(ByVal pXMLParams As String)
            Me.AddEventPISAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventPISAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventPISOperationCompleted Is Nothing) Then
                Me.AddEventPISOperationCompleted = AddressOf Me.OnAddEventPISOperationCompleted
            End If
            Me.InvokeAsync("AddEventPIS", New Object() {pXMLParams}, Me.AddEventPISOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventPISOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventPISCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventPISCompleted(Me, New AddEventPISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventResource", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventResource(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventResource", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventResourceAsync(ByVal pXMLParams As String)
            Me.AddEventResourceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventResourceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventResourceOperationCompleted Is Nothing) Then
                Me.AddEventResourceOperationCompleted = AddressOf Me.OnAddEventResourceOperationCompleted
            End If
            Me.InvokeAsync("AddEventResource", New Object() {pXMLParams}, Me.AddEventResourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventResourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventResourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventResourceCompleted(Me, New AddEventResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventRoomBlockBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventRoomBlockBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventRoomBlockBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventRoomBlockBookingAsync(ByVal pXMLParams As String)
            Me.AddEventRoomBlockBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventRoomBlockBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventRoomBlockBookingOperationCompleted Is Nothing) Then
                Me.AddEventRoomBlockBookingOperationCompleted = AddressOf Me.OnAddEventRoomBlockBookingOperationCompleted
            End If
            Me.InvokeAsync("AddEventRoomBlockBooking", New Object() {pXMLParams}, Me.AddEventRoomBlockBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventRoomBlockBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventRoomBlockBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventRoomBlockBookingCompleted(Me, New AddEventRoomBlockBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventSession", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventSession(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventSession", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventSessionAsync(ByVal pXMLParams As String)
            Me.AddEventSessionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventSessionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventSessionOperationCompleted Is Nothing) Then
                Me.AddEventSessionOperationCompleted = AddressOf Me.OnAddEventSessionOperationCompleted
            End If
            Me.InvokeAsync("AddEventSession", New Object() {pXMLParams}, Me.AddEventSessionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventSessionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventSessionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventSessionCompleted(Me, New AddEventSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventSessionActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventSessionActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventSessionActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventSessionActivityAsync(ByVal pXMLParams As String)
            Me.AddEventSessionActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventSessionActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventSessionActivityOperationCompleted Is Nothing) Then
                Me.AddEventSessionActivityOperationCompleted = AddressOf Me.OnAddEventSessionActivityOperationCompleted
            End If
            Me.InvokeAsync("AddEventSessionActivity", New Object() {pXMLParams}, Me.AddEventSessionActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventSessionActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventSessionActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventSessionActivityCompleted(Me, New AddEventSessionActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventSessionTest", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventSessionTest(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventSessionTest", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventSessionTestAsync(ByVal pXMLParams As String)
            Me.AddEventSessionTestAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventSessionTestAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventSessionTestOperationCompleted Is Nothing) Then
                Me.AddEventSessionTestOperationCompleted = AddressOf Me.OnAddEventSessionTestOperationCompleted
            End If
            Me.InvokeAsync("AddEventSessionTest", New Object() {pXMLParams}, Me.AddEventSessionTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventSessionTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventSessionTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventSessionTestCompleted(Me, New AddEventSessionTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventSessionTestResult", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventSessionTestResult(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventSessionTestResult", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventSessionTestResultAsync(ByVal pXMLParams As String)
            Me.AddEventSessionTestResultAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventSessionTestResultAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventSessionTestResultOperationCompleted Is Nothing) Then
                Me.AddEventSessionTestResultOperationCompleted = AddressOf Me.OnAddEventSessionTestResultOperationCompleted
            End If
            Me.InvokeAsync("AddEventSessionTestResult", New Object() {pXMLParams}, Me.AddEventSessionTestResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventSessionTestResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventSessionTestResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventSessionTestResultCompleted(Me, New AddEventSessionTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventSource", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventSource(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventSource", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventSourceAsync(ByVal pXMLParams As String)
            Me.AddEventSourceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventSourceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventSourceOperationCompleted Is Nothing) Then
                Me.AddEventSourceOperationCompleted = AddressOf Me.OnAddEventSourceOperationCompleted
            End If
            Me.InvokeAsync("AddEventSource", New Object() {pXMLParams}, Me.AddEventSourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventSourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventSourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventSourceCompleted(Me, New AddEventSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventSubject", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventSubject(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventSubject", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventSubjectAsync(ByVal pXMLParams As String)
            Me.AddEventSubjectAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventSubjectAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventSubjectOperationCompleted Is Nothing) Then
                Me.AddEventSubjectOperationCompleted = AddressOf Me.OnAddEventSubjectOperationCompleted
            End If
            Me.InvokeAsync("AddEventSubject", New Object() {pXMLParams}, Me.AddEventSubjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventSubjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventSubjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventSubjectCompleted(Me, New AddEventSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventSubmission", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventSubmission(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventSubmission", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventSubmissionAsync(ByVal pXMLParams As String)
            Me.AddEventSubmissionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventSubmissionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventSubmissionOperationCompleted Is Nothing) Then
                Me.AddEventSubmissionOperationCompleted = AddressOf Me.OnAddEventSubmissionOperationCompleted
            End If
            Me.InvokeAsync("AddEventSubmission", New Object() {pXMLParams}, Me.AddEventSubmissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventSubmissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventSubmissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventSubmissionCompleted(Me, New AddEventSubmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventVenueBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventVenueBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventVenueBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventVenueBookingAsync(ByVal pXMLParams As String)
            Me.AddEventVenueBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventVenueBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventVenueBookingOperationCompleted Is Nothing) Then
                Me.AddEventVenueBookingOperationCompleted = AddressOf Me.OnAddEventVenueBookingOperationCompleted
            End If
            Me.InvokeAsync("AddEventVenueBooking", New Object() {pXMLParams}, Me.AddEventVenueBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventVenueBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventVenueBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventVenueBookingCompleted(Me, New AddEventVenueBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AllocatePISToDelegates", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllocatePISToDelegates(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AllocatePISToDelegates", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllocatePISToDelegatesAsync(ByVal pXMLParams As String)
            Me.AllocatePISToDelegatesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllocatePISToDelegatesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AllocatePISToDelegatesOperationCompleted Is Nothing) Then
                Me.AllocatePISToDelegatesOperationCompleted = AddressOf Me.OnAllocatePISToDelegatesOperationCompleted
            End If
            Me.InvokeAsync("AllocatePISToDelegates", New Object() {pXMLParams}, Me.AllocatePISToDelegatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllocatePISToDelegatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllocatePISToDelegatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllocatePISToDelegatesCompleted(Me, New AllocatePISToDelegatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CheckEventBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckEventBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CheckEventBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckEventBookingAsync(ByVal pXMLParams As String)
            Me.CheckEventBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckEventBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CheckEventBookingOperationCompleted Is Nothing) Then
                Me.CheckEventBookingOperationCompleted = AddressOf Me.OnCheckEventBookingOperationCompleted
            End If
            Me.InvokeAsync("CheckEventBooking", New Object() {pXMLParams}, Me.CheckEventBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckEventBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckEventBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckEventBookingCompleted(Me, New CheckEventBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CheckMembershipTypeRate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckMembershipTypeRate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CheckMembershipTypeRate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckMembershipTypeRateAsync(ByVal pXMLParams As String)
            Me.CheckMembershipTypeRateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckMembershipTypeRateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CheckMembershipTypeRateOperationCompleted Is Nothing) Then
                Me.CheckMembershipTypeRateOperationCompleted = AddressOf Me.OnCheckMembershipTypeRateOperationCompleted
            End If
            Me.InvokeAsync("CheckMembershipTypeRate", New Object() {pXMLParams}, Me.CheckMembershipTypeRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckMembershipTypeRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckMembershipTypeRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckMembershipTypeRateCompleted(Me, New CheckMembershipTypeRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteDelegateActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteDelegateActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteDelegateActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteDelegateActivityAsync(ByVal pXMLParams As String)
            Me.DeleteDelegateActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDelegateActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteDelegateActivityOperationCompleted Is Nothing) Then
                Me.DeleteDelegateActivityOperationCompleted = AddressOf Me.OnDeleteDelegateActivityOperationCompleted
            End If
            Me.InvokeAsync("DeleteDelegateActivity", New Object() {pXMLParams}, Me.DeleteDelegateActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteDelegateActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteDelegateActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteDelegateActivityCompleted(Me, New DeleteDelegateActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteDelegateLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteDelegateLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteDelegateLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteDelegateLinkAsync(ByVal pXMLParams As String)
            Me.DeleteDelegateLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDelegateLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteDelegateLinkOperationCompleted Is Nothing) Then
                Me.DeleteDelegateLinkOperationCompleted = AddressOf Me.OnDeleteDelegateLinkOperationCompleted
            End If
            Me.InvokeAsync("DeleteDelegateLink", New Object() {pXMLParams}, Me.DeleteDelegateLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteDelegateLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteDelegateLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteDelegateLinkCompleted(Me, New DeleteDelegateLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEvent", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEvent(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEvent", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventAsync(ByVal pXMLParams As String)
            Me.DeleteEventAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventOperationCompleted Is Nothing) Then
                Me.DeleteEventOperationCompleted = AddressOf Me.OnDeleteEventOperationCompleted
            End If
            Me.InvokeAsync("DeleteEvent", New Object() {pXMLParams}, Me.DeleteEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventCompleted(Me, New DeleteEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventBookingOption", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventBookingOption(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventBookingOption", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventBookingOptionAsync(ByVal pXMLParams As String)
            Me.DeleteEventBookingOptionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventBookingOptionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventBookingOptionOperationCompleted Is Nothing) Then
                Me.DeleteEventBookingOptionOperationCompleted = AddressOf Me.OnDeleteEventBookingOptionOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventBookingOption", New Object() {pXMLParams}, Me.DeleteEventBookingOptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventBookingOptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventBookingOptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventBookingOptionCompleted(Me, New DeleteEventBookingOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventContact", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventContact(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventContact", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventContactAsync(ByVal pXMLParams As String)
            Me.DeleteEventContactAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventContactAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventContactOperationCompleted Is Nothing) Then
                Me.DeleteEventContactOperationCompleted = AddressOf Me.OnDeleteEventContactOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventContact", New Object() {pXMLParams}, Me.DeleteEventContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventContactCompleted(Me, New DeleteEventContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventCost", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventCost(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventCost", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventCostAsync(ByVal pXMLParams As String)
            Me.DeleteEventCostAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventCostAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventCostOperationCompleted Is Nothing) Then
                Me.DeleteEventCostOperationCompleted = AddressOf Me.OnDeleteEventCostOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventCost", New Object() {pXMLParams}, Me.DeleteEventCostOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventCostOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventCostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventCostCompleted(Me, New DeleteEventCostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteDelegateFromEvent", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteDelegateFromEvent(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteDelegateFromEvent", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteDelegateFromEventAsync(ByVal pXMLParams As String)
            Me.DeleteDelegateFromEventAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDelegateFromEventAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteDelegateFromEventOperationCompleted Is Nothing) Then
                Me.DeleteDelegateFromEventOperationCompleted = AddressOf Me.OnDeleteDelegateFromEventOperationCompleted
            End If
            Me.InvokeAsync("DeleteDelegateFromEvent", New Object() {pXMLParams}, Me.DeleteDelegateFromEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteDelegateFromEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteDelegateFromEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteDelegateFromEventCompleted(Me, New DeleteDelegateFromEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventMailing", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventMailing(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventMailing", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventMailingAsync(ByVal pXMLParams As String)
            Me.DeleteEventMailingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventMailingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventMailingOperationCompleted Is Nothing) Then
                Me.DeleteEventMailingOperationCompleted = AddressOf Me.OnDeleteEventMailingOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventMailing", New Object() {pXMLParams}, Me.DeleteEventMailingOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventMailingOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventMailingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventMailingCompleted(Me, New DeleteEventMailingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventOptionSession", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventOptionSession(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventOptionSession", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventOptionSessionAsync(ByVal pXMLParams As String)
            Me.DeleteEventOptionSessionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventOptionSessionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventOptionSessionOperationCompleted Is Nothing) Then
                Me.DeleteEventOptionSessionOperationCompleted = AddressOf Me.OnDeleteEventOptionSessionOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventOptionSession", New Object() {pXMLParams}, Me.DeleteEventOptionSessionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventOptionSessionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventOptionSessionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventOptionSessionCompleted(Me, New DeleteEventOptionSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventOrganiser", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventOrganiser(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventOrganiser", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventOrganiserAsync(ByVal pXMLParams As String)
            Me.DeleteEventOrganiserAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventOrganiserAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventOrganiserOperationCompleted Is Nothing) Then
                Me.DeleteEventOrganiserOperationCompleted = AddressOf Me.OnDeleteEventOrganiserOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventOrganiser", New Object() {pXMLParams}, Me.DeleteEventOrganiserOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventOrganiserOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventOrganiserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventOrganiserCompleted(Me, New DeleteEventOrganiserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventOwner", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventOwner(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventOwner", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventOwnerAsync(ByVal pXMLParams As String)
            Me.DeleteEventOwnerAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventOwnerAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventOwnerOperationCompleted Is Nothing) Then
                Me.DeleteEventOwnerOperationCompleted = AddressOf Me.OnDeleteEventOwnerOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventOwner", New Object() {pXMLParams}, Me.DeleteEventOwnerOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventOwnerOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventOwnerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventOwnerCompleted(Me, New DeleteEventOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventPersonnel", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventPersonnel(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventPersonnel", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventPersonnelAsync(ByVal pXMLParams As String)
            Me.DeleteEventPersonnelAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventPersonnelAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventPersonnelOperationCompleted Is Nothing) Then
                Me.DeleteEventPersonnelOperationCompleted = AddressOf Me.OnDeleteEventPersonnelOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventPersonnel", New Object() {pXMLParams}, Me.DeleteEventPersonnelOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventPersonnelOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventPersonnelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventPersonnelCompleted(Me, New DeleteEventPersonnelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventPersonnelTask", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventPersonnelTask(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventPersonnelTask", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventPersonnelTaskAsync(ByVal pXMLParams As String)
            Me.DeleteEventPersonnelTaskAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventPersonnelTaskAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventPersonnelTaskOperationCompleted Is Nothing) Then
                Me.DeleteEventPersonnelTaskOperationCompleted = AddressOf Me.OnDeleteEventPersonnelTaskOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventPersonnelTask", New Object() {pXMLParams}, Me.DeleteEventPersonnelTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventPersonnelTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventPersonnelTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventPersonnelTaskCompleted(Me, New DeleteEventPersonnelTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventPIS", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventPIS(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventPIS", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventPISAsync(ByVal pXMLParams As String)
            Me.DeleteEventPISAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventPISAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventPISOperationCompleted Is Nothing) Then
                Me.DeleteEventPISOperationCompleted = AddressOf Me.OnDeleteEventPISOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventPIS", New Object() {pXMLParams}, Me.DeleteEventPISOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventPISOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventPISCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventPISCompleted(Me, New DeleteEventPISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventResource", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventResource(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventResource", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventResourceAsync(ByVal pXMLParams As String)
            Me.DeleteEventResourceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventResourceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventResourceOperationCompleted Is Nothing) Then
                Me.DeleteEventResourceOperationCompleted = AddressOf Me.OnDeleteEventResourceOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventResource", New Object() {pXMLParams}, Me.DeleteEventResourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventResourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventResourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventResourceCompleted(Me, New DeleteEventResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventRoomBlockBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventRoomBlockBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventRoomBlockBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventRoomBlockBookingAsync(ByVal pXMLParams As String)
            Me.DeleteEventRoomBlockBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventRoomBlockBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventRoomBlockBookingOperationCompleted Is Nothing) Then
                Me.DeleteEventRoomBlockBookingOperationCompleted = AddressOf Me.OnDeleteEventRoomBlockBookingOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventRoomBlockBooking", New Object() {pXMLParams}, Me.DeleteEventRoomBlockBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventRoomBlockBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventRoomBlockBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventRoomBlockBookingCompleted(Me, New DeleteEventRoomBlockBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventSession", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventSession(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventSession", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSessionAsync(ByVal pXMLParams As String)
            Me.DeleteEventSessionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSessionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventSessionOperationCompleted Is Nothing) Then
                Me.DeleteEventSessionOperationCompleted = AddressOf Me.OnDeleteEventSessionOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventSession", New Object() {pXMLParams}, Me.DeleteEventSessionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventSessionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventSessionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventSessionCompleted(Me, New DeleteEventSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventSessionActivity", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventSessionActivity(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventSessionActivity", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSessionActivityAsync(ByVal pXMLParams As String)
            Me.DeleteEventSessionActivityAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSessionActivityAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventSessionActivityOperationCompleted Is Nothing) Then
                Me.DeleteEventSessionActivityOperationCompleted = AddressOf Me.OnDeleteEventSessionActivityOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventSessionActivity", New Object() {pXMLParams}, Me.DeleteEventSessionActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventSessionActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventSessionActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventSessionActivityCompleted(Me, New DeleteEventSessionActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventSessionTest", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventSessionTest(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventSessionTest", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSessionTestAsync(ByVal pXMLParams As String)
            Me.DeleteEventSessionTestAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSessionTestAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventSessionTestOperationCompleted Is Nothing) Then
                Me.DeleteEventSessionTestOperationCompleted = AddressOf Me.OnDeleteEventSessionTestOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventSessionTest", New Object() {pXMLParams}, Me.DeleteEventSessionTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventSessionTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventSessionTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventSessionTestCompleted(Me, New DeleteEventSessionTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventSessionTestResult", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventSessionTestResult(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventSessionTestResult", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSessionTestResultAsync(ByVal pXMLParams As String)
            Me.DeleteEventSessionTestResultAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSessionTestResultAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventSessionTestResultOperationCompleted Is Nothing) Then
                Me.DeleteEventSessionTestResultOperationCompleted = AddressOf Me.OnDeleteEventSessionTestResultOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventSessionTestResult", New Object() {pXMLParams}, Me.DeleteEventSessionTestResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventSessionTestResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventSessionTestResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventSessionTestResultCompleted(Me, New DeleteEventSessionTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventSource", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventSource(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventSource", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSourceAsync(ByVal pXMLParams As String)
            Me.DeleteEventSourceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSourceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventSourceOperationCompleted Is Nothing) Then
                Me.DeleteEventSourceOperationCompleted = AddressOf Me.OnDeleteEventSourceOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventSource", New Object() {pXMLParams}, Me.DeleteEventSourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventSourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventSourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventSourceCompleted(Me, New DeleteEventSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventSubject", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventSubject(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventSubject", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSubjectAsync(ByVal pXMLParams As String)
            Me.DeleteEventSubjectAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSubjectAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventSubjectOperationCompleted Is Nothing) Then
                Me.DeleteEventSubjectOperationCompleted = AddressOf Me.OnDeleteEventSubjectOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventSubject", New Object() {pXMLParams}, Me.DeleteEventSubjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventSubjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventSubjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventSubjectCompleted(Me, New DeleteEventSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventSubmission", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventSubmission(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventSubmission", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSubmissionAsync(ByVal pXMLParams As String)
            Me.DeleteEventSubmissionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventSubmissionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventSubmissionOperationCompleted Is Nothing) Then
                Me.DeleteEventSubmissionOperationCompleted = AddressOf Me.OnDeleteEventSubmissionOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventSubmission", New Object() {pXMLParams}, Me.DeleteEventSubmissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventSubmissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventSubmissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventSubmissionCompleted(Me, New DeleteEventSubmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventVenueBooking", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventVenueBooking(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventVenueBooking", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventVenueBookingAsync(ByVal pXMLParams As String)
            Me.DeleteEventVenueBookingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventVenueBookingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventVenueBookingOperationCompleted Is Nothing) Then
                Me.DeleteEventVenueBookingOperationCompleted = AddressOf Me.OnDeleteEventVenueBookingOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventVenueBooking", New Object() {pXMLParams}, Me.DeleteEventVenueBookingOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventVenueBookingOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventVenueBookingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventVenueBookingCompleted(Me, New DeleteEventVenueBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DuplicateEvent", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DuplicateEvent(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DuplicateEvent", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DuplicateEventAsync(ByVal pXMLParams As String)
            Me.DuplicateEventAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DuplicateEventAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DuplicateEventOperationCompleted Is Nothing) Then
                Me.DuplicateEventOperationCompleted = AddressOf Me.OnDuplicateEventOperationCompleted
            End If
            Me.InvokeAsync("DuplicateEvent", New Object() {pXMLParams}, Me.DuplicateEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnDuplicateEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.DuplicateEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DuplicateEventCompleted(Me, New DuplicateEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindFundraisingPaymentSchedule", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindFundraisingPaymentSchedule(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindFundraisingPaymentSchedule", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindFundraisingPaymentScheduleAsync(ByVal pXMLParams As String)
            Me.FindFundraisingPaymentScheduleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindFundraisingPaymentScheduleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindFundraisingPaymentScheduleOperationCompleted Is Nothing) Then
                Me.FindFundraisingPaymentScheduleOperationCompleted = AddressOf Me.OnFindFundraisingPaymentScheduleOperationCompleted
            End If
            Me.InvokeAsync("FindFundraisingPaymentSchedule", New Object() {pXMLParams}, Me.FindFundraisingPaymentScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindFundraisingPaymentScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindFundraisingPaymentScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindFundraisingPaymentScheduleCompleted(Me, New FindFundraisingPaymentScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindMailings", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindMailings(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindMailings", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindMailingsAsync(ByVal pXMLParams As String)
            Me.FindMailingsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindMailingsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindMailingsOperationCompleted Is Nothing) Then
                Me.FindMailingsOperationCompleted = AddressOf Me.OnFindMailingsOperationCompleted
            End If
            Me.InvokeAsync("FindMailings", New Object() {pXMLParams}, Me.FindMailingsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindMailingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindMailingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindMailingsCompleted(Me, New FindMailingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindOrganisations", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindOrganisations(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindOrganisations", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindOrganisationsAsync(ByVal pXMLParams As String)
            Me.FindOrganisationsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindOrganisationsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindOrganisationsOperationCompleted Is Nothing) Then
                Me.FindOrganisationsOperationCompleted = AddressOf Me.OnFindOrganisationsOperationCompleted
            End If
            Me.InvokeAsync("FindOrganisations", New Object() {pXMLParams}, Me.FindOrganisationsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindOrganisationsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindOrganisationsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindOrganisationsCompleted(Me, New FindOrganisationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindText", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindText(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindText", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindTextAsync(ByVal pXMLParams As String)
            Me.FindTextAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindTextAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindTextOperationCompleted Is Nothing) Then
                Me.FindTextOperationCompleted = AddressOf Me.OnFindTextOperationCompleted
            End If
            Me.InvokeAsync("FindText", New Object() {pXMLParams}, Me.FindTextOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindTextOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindTextCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindTextCompleted(Me, New FindTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessBulkEMail", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessBulkEMail(ByVal pXMLParams As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pBinaryData() As Byte) As String
            Dim results() As Object = Me.Invoke("ProcessBulkEMail", New Object() {pXMLParams, pBinaryData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessBulkEMailAsync(ByVal pXMLParams As String, ByVal pBinaryData() As Byte)
            Me.ProcessBulkEMailAsync(pXMLParams, pBinaryData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessBulkEMailAsync(ByVal pXMLParams As String, ByVal pBinaryData() As Byte, ByVal userState As Object)
            If (Me.ProcessBulkEMailOperationCompleted Is Nothing) Then
                Me.ProcessBulkEMailOperationCompleted = AddressOf Me.OnProcessBulkEMailOperationCompleted
            End If
            Me.InvokeAsync("ProcessBulkEMail", New Object() {pXMLParams, pBinaryData}, Me.ProcessBulkEMailOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessBulkEMailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessBulkEMailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessBulkEMailCompleted(Me, New ProcessBulkEMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessJob", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessJob(ByVal pXMLParams As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ProcessJob", New Object() {pXMLParams})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessJobAsync(ByVal pXMLParams As String)
            Me.ProcessJobAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessJobAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ProcessJobOperationCompleted Is Nothing) Then
                Me.ProcessJobOperationCompleted = AddressOf Me.OnProcessJobOperationCompleted
            End If
            Me.InvokeAsync("ProcessJob", New Object() {pXMLParams}, Me.ProcessJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessJobCompleted(Me, New ProcessJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessMailingCount", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessMailingCount(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ProcessMailingCount", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessMailingCountAsync(ByVal pXMLParams As String)
            Me.ProcessMailingCountAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessMailingCountAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ProcessMailingCountOperationCompleted Is Nothing) Then
                Me.ProcessMailingCountOperationCompleted = AddressOf Me.OnProcessMailingCountOperationCompleted
            End If
            Me.InvokeAsync("ProcessMailingCount", New Object() {pXMLParams}, Me.ProcessMailingCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessMailingCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessMailingCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessMailingCountCompleted(Me, New ProcessMailingCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessMailing", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessMailing(ByVal pXMLParams As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ProcessMailing", New Object() {pXMLParams})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessMailingAsync(ByVal pXMLParams As String)
            Me.ProcessMailingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessMailingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ProcessMailingOperationCompleted Is Nothing) Then
                Me.ProcessMailingOperationCompleted = AddressOf Me.OnProcessMailingOperationCompleted
            End If
            Me.InvokeAsync("ProcessMailing", New Object() {pXMLParams}, Me.ProcessMailingOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessMailingOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessMailingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessMailingCompleted(Me, New ProcessMailingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectActionData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectActionData(ByVal pSelectDataType As XMLActionDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectActionData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectActionDataAsync(ByVal pSelectDataType As XMLActionDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectActionDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectActionDataAsync(ByVal pSelectDataType As XMLActionDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectActionDataOperationCompleted Is Nothing) Then
                Me.SelectActionDataOperationCompleted = AddressOf Me.OnSelectActionDataOperationCompleted
            End If
            Me.InvokeAsync("SelectActionData", New Object() {pSelectDataType, pXMLParams}, Me.SelectActionDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectActionDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectActionDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectActionDataCompleted(Me, New SelectActionDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectFinancialProcessingData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectFinancialProcessingData(ByVal pDataType As XMLFinancialProcessingDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectFinancialProcessingData", New Object() {pDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectFinancialProcessingDataAsync(ByVal pDataType As XMLFinancialProcessingDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectFinancialProcessingDataAsync(pDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectFinancialProcessingDataAsync(ByVal pDataType As XMLFinancialProcessingDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectFinancialProcessingDataOperationCompleted Is Nothing) Then
                Me.SelectFinancialProcessingDataOperationCompleted = AddressOf Me.OnSelectFinancialProcessingDataOperationCompleted
            End If
            Me.InvokeAsync("SelectFinancialProcessingData", New Object() {pDataType, pXMLParams}, Me.SelectFinancialProcessingDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectFinancialProcessingDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectFinancialProcessingDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectFinancialProcessingDataCompleted(Me, New SelectFinancialProcessingDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdatePickingList", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePickingList(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdatePickingList", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePickingListAsync(ByVal pXMLParams As String)
            Me.UpdatePickingListAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePickingListAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdatePickingListOperationCompleted Is Nothing) Then
                Me.UpdatePickingListOperationCompleted = AddressOf Me.OnUpdatePickingListOperationCompleted
            End If
            Me.InvokeAsync("UpdatePickingList", New Object() {pXMLParams}, Me.UpdatePickingListOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePickingListOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePickingListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePickingListCompleted(Me, New UpdatePickingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetCount", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCount(ByVal pGetCountType As XMLGetCountTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetCount", New Object() {pGetCountType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCountAsync(ByVal pGetCountType As XMLGetCountTypes, ByVal pXMLParams As String)
            Me.GetCountAsync(pGetCountType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCountAsync(ByVal pGetCountType As XMLGetCountTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetCountOperationCompleted Is Nothing) Then
                Me.GetCountOperationCompleted = AddressOf Me.OnGetCountOperationCompleted
            End If
            Me.InvokeAsync("GetCount", New Object() {pGetCountType, pXMLParams}, Me.GetCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCountCompleted(Me, New GetCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetCustomisedDisplayList", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomisedDisplayList(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetCustomisedDisplayList", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomisedDisplayListAsync(ByVal pXMLParams As String)
            Me.GetCustomisedDisplayListAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomisedDisplayListAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetCustomisedDisplayListOperationCompleted Is Nothing) Then
                Me.GetCustomisedDisplayListOperationCompleted = AddressOf Me.OnGetCustomisedDisplayListOperationCompleted
            End If
            Me.InvokeAsync("GetCustomisedDisplayList", New Object() {pXMLParams}, Me.GetCustomisedDisplayListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomisedDisplayListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomisedDisplayListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomisedDisplayListCompleted(Me, New GetCustomisedDisplayListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SetMailingDocumentFulfilment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetMailingDocumentFulfilment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SetMailingDocumentFulfilment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetMailingDocumentFulfilmentAsync(ByVal pXMLParams As String)
            Me.SetMailingDocumentFulfilmentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetMailingDocumentFulfilmentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SetMailingDocumentFulfilmentOperationCompleted Is Nothing) Then
                Me.SetMailingDocumentFulfilmentOperationCompleted = AddressOf Me.OnSetMailingDocumentFulfilmentOperationCompleted
            End If
            Me.InvokeAsync("SetMailingDocumentFulfilment", New Object() {pXMLParams}, Me.SetMailingDocumentFulfilmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetMailingDocumentFulfilmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetMailingDocumentFulfilmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetMailingDocumentFulfilmentCompleted(Me, New SetMailingDocumentFulfilmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMDPDocumentInfo", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMDPDocumentInfo(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetMDPDocumentInfo", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMDPDocumentInfoAsync(ByVal pXMLParams As String)
            Me.GetMDPDocumentInfoAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMDPDocumentInfoAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetMDPDocumentInfoOperationCompleted Is Nothing) Then
                Me.GetMDPDocumentInfoOperationCompleted = AddressOf Me.OnGetMDPDocumentInfoOperationCompleted
            End If
            Me.InvokeAsync("GetMDPDocumentInfo", New Object() {pXMLParams}, Me.GetMDPDocumentInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMDPDocumentInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMDPDocumentInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMDPDocumentInfoCompleted(Me, New GetMDPDocumentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CancelReinstateProvisionalTransaction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelReinstateProvisionalTransaction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CancelReinstateProvisionalTransaction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelReinstateProvisionalTransactionAsync(ByVal pXMLParams As String)
            Me.CancelReinstateProvisionalTransactionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelReinstateProvisionalTransactionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CancelReinstateProvisionalTransactionOperationCompleted Is Nothing) Then
                Me.CancelReinstateProvisionalTransactionOperationCompleted = AddressOf Me.OnCancelReinstateProvisionalTransactionOperationCompleted
            End If
            Me.InvokeAsync("CancelReinstateProvisionalTransaction", New Object() {pXMLParams}, Me.CancelReinstateProvisionalTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelReinstateProvisionalTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelReinstateProvisionalTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelReinstateProvisionalTransactionCompleted(Me, New CancelReinstateProvisionalTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CancelMailingStandingOrders", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelMailingStandingOrders(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CancelMailingStandingOrders", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelMailingStandingOrdersAsync(ByVal pXMLParams As String)
            Me.CancelMailingStandingOrdersAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelMailingStandingOrdersAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CancelMailingStandingOrdersOperationCompleted Is Nothing) Then
                Me.CancelMailingStandingOrdersOperationCompleted = AddressOf Me.OnCancelMailingStandingOrdersOperationCompleted
            End If
            Me.InvokeAsync("CancelMailingStandingOrders", New Object() {pXMLParams}, Me.CancelMailingStandingOrdersOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelMailingStandingOrdersOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelMailingStandingOrdersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelMailingStandingOrdersCompleted(Me, New CancelMailingStandingOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CancelGayePledges", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelGayePledges(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CancelGayePledges", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelGayePledgesAsync(ByVal pXMLParams As String)
            Me.CancelGayePledgesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelGayePledgesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CancelGayePledgesOperationCompleted Is Nothing) Then
                Me.CancelGayePledgesOperationCompleted = AddressOf Me.OnCancelGayePledgesOperationCompleted
            End If
            Me.InvokeAsync("CancelGayePledges", New Object() {pXMLParams}, Me.CancelGayePledgesOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelGayePledgesOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelGayePledgesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelGayePledgesCompleted(Me, New CancelGayePledgesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ConfirmProvisionalTransaction", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConfirmProvisionalTransaction(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ConfirmProvisionalTransaction", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConfirmProvisionalTransactionAsync(ByVal pXMLParams As String)
            Me.ConfirmProvisionalTransactionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConfirmProvisionalTransactionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ConfirmProvisionalTransactionOperationCompleted Is Nothing) Then
                Me.ConfirmProvisionalTransactionOperationCompleted = AddressOf Me.OnConfirmProvisionalTransactionOperationCompleted
            End If
            Me.InvokeAsync("ConfirmProvisionalTransaction", New Object() {pXMLParams}, Me.ConfirmProvisionalTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnConfirmProvisionalTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConfirmProvisionalTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConfirmProvisionalTransactionCompleted(Me, New ConfirmProvisionalTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessProductNumberAllocation", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessProductNumberAllocation(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ProcessProductNumberAllocation", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessProductNumberAllocationAsync(ByVal pXMLParams As String)
            Me.ProcessProductNumberAllocationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessProductNumberAllocationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ProcessProductNumberAllocationOperationCompleted Is Nothing) Then
                Me.ProcessProductNumberAllocationOperationCompleted = AddressOf Me.OnProcessProductNumberAllocationOperationCompleted
            End If
            Me.InvokeAsync("ProcessProductNumberAllocation", New Object() {pXMLParams}, Me.ProcessProductNumberAllocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessProductNumberAllocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessProductNumberAllocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessProductNumberAllocationCompleted(Me, New ProcessProductNumberAllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ReissueCheque", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReissueCheque(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ReissueCheque", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReissueChequeAsync(ByVal pXMLParams As String)
            Me.ReissueChequeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReissueChequeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ReissueChequeOperationCompleted Is Nothing) Then
                Me.ReissueChequeOperationCompleted = AddressOf Me.OnReissueChequeOperationCompleted
            End If
            Me.InvokeAsync("ReissueCheque", New Object() {pXMLParams}, Me.ReissueChequeOperationCompleted, userState)
        End Sub
        
        Private Sub OnReissueChequeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReissueChequeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReissueChequeCompleted(Me, New ReissueChequeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ChangeChequePayee", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeChequePayee(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ChangeChequePayee", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeChequePayeeAsync(ByVal pXMLParams As String)
            Me.ChangeChequePayeeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeChequePayeeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ChangeChequePayeeOperationCompleted Is Nothing) Then
                Me.ChangeChequePayeeOperationCompleted = AddressOf Me.OnChangeChequePayeeOperationCompleted
            End If
            Me.InvokeAsync("ChangeChequePayee", New Object() {pXMLParams}, Me.ChangeChequePayeeOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeChequePayeeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeChequePayeeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeChequePayeeCompleted(Me, New ChangeChequePayeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindVenue", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindVenue(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindVenue", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindVenueAsync(ByVal pXMLParams As String)
            Me.FindVenueAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindVenueAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindVenueOperationCompleted Is Nothing) Then
                Me.FindVenueOperationCompleted = AddressOf Me.OnFindVenueOperationCompleted
            End If
            Me.InvokeAsync("FindVenue", New Object() {pXMLParams}, Me.FindVenueOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindVenueOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindVenueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindVenueCompleted(Me, New FindVenueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddContactSurvey", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddContactSurvey(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddContactSurvey", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddContactSurveyAsync(ByVal pXMLParams As String)
            Me.AddContactSurveyAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddContactSurveyAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddContactSurveyOperationCompleted Is Nothing) Then
                Me.AddContactSurveyOperationCompleted = AddressOf Me.OnAddContactSurveyOperationCompleted
            End If
            Me.InvokeAsync("AddContactSurvey", New Object() {pXMLParams}, Me.AddContactSurveyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddContactSurveyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddContactSurveyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddContactSurveyCompleted(Me, New AddContactSurveyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetBulkMailerMailings", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBulkMailerMailings(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetBulkMailerMailings", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBulkMailerMailingsAsync(ByVal pXMLParams As String)
            Me.GetBulkMailerMailingsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBulkMailerMailingsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetBulkMailerMailingsOperationCompleted Is Nothing) Then
                Me.GetBulkMailerMailingsOperationCompleted = AddressOf Me.OnGetBulkMailerMailingsOperationCompleted
            End If
            Me.InvokeAsync("GetBulkMailerMailings", New Object() {pXMLParams}, Me.GetBulkMailerMailingsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBulkMailerMailingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBulkMailerMailingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBulkMailerMailingsCompleted(Me, New GetBulkMailerMailingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetBulkMailerMailingProperties", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBulkMailerMailingProperties(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetBulkMailerMailingProperties", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBulkMailerMailingPropertiesAsync(ByVal pXMLParams As String)
            Me.GetBulkMailerMailingPropertiesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBulkMailerMailingPropertiesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetBulkMailerMailingPropertiesOperationCompleted Is Nothing) Then
                Me.GetBulkMailerMailingPropertiesOperationCompleted = AddressOf Me.OnGetBulkMailerMailingPropertiesOperationCompleted
            End If
            Me.InvokeAsync("GetBulkMailerMailingProperties", New Object() {pXMLParams}, Me.GetBulkMailerMailingPropertiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBulkMailerMailingPropertiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBulkMailerMailingPropertiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBulkMailerMailingPropertiesCompleted(Me, New GetBulkMailerMailingPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessBulkMailerMailing", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessBulkMailerMailing(ByVal pXMLParams As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pBinaryData() As Byte) As String
            Dim results() As Object = Me.Invoke("ProcessBulkMailerMailing", New Object() {pXMLParams, pBinaryData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessBulkMailerMailingAsync(ByVal pXMLParams As String, ByVal pBinaryData() As Byte)
            Me.ProcessBulkMailerMailingAsync(pXMLParams, pBinaryData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessBulkMailerMailingAsync(ByVal pXMLParams As String, ByVal pBinaryData() As Byte, ByVal userState As Object)
            If (Me.ProcessBulkMailerMailingOperationCompleted Is Nothing) Then
                Me.ProcessBulkMailerMailingOperationCompleted = AddressOf Me.OnProcessBulkMailerMailingOperationCompleted
            End If
            Me.InvokeAsync("ProcessBulkMailerMailing", New Object() {pXMLParams, pBinaryData}, Me.ProcessBulkMailerMailingOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessBulkMailerMailingOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessBulkMailerMailingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessBulkMailerMailingCompleted(Me, New ProcessBulkMailerMailingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddAppealBudget", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAppealBudget(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddAppealBudget", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAppealBudgetAsync(ByVal pXMLParams As String)
            Me.AddAppealBudgetAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAppealBudgetAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddAppealBudgetOperationCompleted Is Nothing) Then
                Me.AddAppealBudgetOperationCompleted = AddressOf Me.OnAddAppealBudgetOperationCompleted
            End If
            Me.InvokeAsync("AddAppealBudget", New Object() {pXMLParams}, Me.AddAppealBudgetOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAppealBudgetOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAppealBudgetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAppealBudgetCompleted(Me, New AddAppealBudgetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddAppealBudgetDetail", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAppealBudgetDetail(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddAppealBudgetDetail", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAppealBudgetDetailAsync(ByVal pXMLParams As String)
            Me.AddAppealBudgetDetailAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAppealBudgetDetailAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddAppealBudgetDetailOperationCompleted Is Nothing) Then
                Me.AddAppealBudgetDetailOperationCompleted = AddressOf Me.OnAddAppealBudgetDetailOperationCompleted
            End If
            Me.InvokeAsync("AddAppealBudgetDetail", New Object() {pXMLParams}, Me.AddAppealBudgetDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAppealBudgetDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAppealBudgetDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAppealBudgetDetailCompleted(Me, New AddAppealBudgetDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddAppealResource", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAppealResource(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddAppealResource", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAppealResourceAsync(ByVal pXMLParams As String)
            Me.AddAppealResourceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAppealResourceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddAppealResourceOperationCompleted Is Nothing) Then
                Me.AddAppealResourceOperationCompleted = AddressOf Me.OnAddAppealResourceOperationCompleted
            End If
            Me.InvokeAsync("AddAppealResource", New Object() {pXMLParams}, Me.AddAppealResourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAppealResourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAppealResourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAppealResourceCompleted(Me, New AddAppealResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCampaign", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCampaign(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCampaign", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCampaignAsync(ByVal pXMLParams As String)
            Me.AddCampaignAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCampaignAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCampaignOperationCompleted Is Nothing) Then
                Me.AddCampaignOperationCompleted = AddressOf Me.OnAddCampaignOperationCompleted
            End If
            Me.InvokeAsync("AddCampaign", New Object() {pXMLParams}, Me.AddCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCampaignCompleted(Me, New AddCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCampaignAppeal", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCampaignAppeal(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCampaignAppeal", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCampaignAppealAsync(ByVal pXMLParams As String)
            Me.AddCampaignAppealAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCampaignAppealAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCampaignAppealOperationCompleted Is Nothing) Then
                Me.AddCampaignAppealOperationCompleted = AddressOf Me.OnAddCampaignAppealOperationCompleted
            End If
            Me.InvokeAsync("AddCampaignAppeal", New Object() {pXMLParams}, Me.AddCampaignAppealOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCampaignAppealOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCampaignAppealCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCampaignAppealCompleted(Me, New AddCampaignAppealCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCampaignCost", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCampaignCost(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCampaignCost", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCampaignCostAsync(ByVal pXMLParams As String)
            Me.AddCampaignCostAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCampaignCostAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCampaignCostOperationCompleted Is Nothing) Then
                Me.AddCampaignCostOperationCompleted = AddressOf Me.OnAddCampaignCostOperationCompleted
            End If
            Me.InvokeAsync("AddCampaignCost", New Object() {pXMLParams}, Me.AddCampaignCostOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCampaignCostOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCampaignCostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCampaignCostCompleted(Me, New AddCampaignCostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ExportReport", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExportReport(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ExportReport", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExportReportAsync(ByVal pXMLParams As String)
            Me.ExportReportAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExportReportAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ExportReportOperationCompleted Is Nothing) Then
                Me.ExportReportOperationCompleted = AddressOf Me.OnExportReportOperationCompleted
            End If
            Me.InvokeAsync("ExportReport", New Object() {pXMLParams}, Me.ExportReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnExportReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExportReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExportReportCompleted(Me, New ExportReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ExportCustomForm", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExportCustomForm(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ExportCustomForm", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExportCustomFormAsync(ByVal pXMLParams As String)
            Me.ExportCustomFormAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExportCustomFormAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ExportCustomFormOperationCompleted Is Nothing) Then
                Me.ExportCustomFormOperationCompleted = AddressOf Me.OnExportCustomFormOperationCompleted
            End If
            Me.InvokeAsync("ExportCustomForm", New Object() {pXMLParams}, Me.ExportCustomFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnExportCustomFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExportCustomFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExportCustomFormCompleted(Me, New ExportCustomFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CheckTraderData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckTraderData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CheckTraderData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckTraderDataAsync(ByVal pXMLParams As String)
            Me.CheckTraderDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckTraderDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CheckTraderDataOperationCompleted Is Nothing) Then
                Me.CheckTraderDataOperationCompleted = AddressOf Me.OnCheckTraderDataOperationCompleted
            End If
            Me.InvokeAsync("CheckTraderData", New Object() {pXMLParams}, Me.CheckTraderDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckTraderDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckTraderDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckTraderDataCompleted(Me, New CheckTraderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ExportTraderApplication", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExportTraderApplication(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ExportTraderApplication", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExportTraderApplicationAsync(ByVal pXMLParams As String)
            Me.ExportTraderApplicationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExportTraderApplicationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ExportTraderApplicationOperationCompleted Is Nothing) Then
                Me.ExportTraderApplicationOperationCompleted = AddressOf Me.OnExportTraderApplicationOperationCompleted
            End If
            Me.InvokeAsync("ExportTraderApplication", New Object() {pXMLParams}, Me.ExportTraderApplicationOperationCompleted, userState)
        End Sub
        
        Private Sub OnExportTraderApplicationOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExportTraderApplicationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExportTraderApplicationCompleted(Me, New ExportTraderApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCampaignRole", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCampaignRole(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCampaignRole", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCampaignRoleAsync(ByVal pXMLParams As String)
            Me.AddCampaignRoleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCampaignRoleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCampaignRoleOperationCompleted Is Nothing) Then
                Me.AddCampaignRoleOperationCompleted = AddressOf Me.OnAddCampaignRoleOperationCompleted
            End If
            Me.InvokeAsync("AddCampaignRole", New Object() {pXMLParams}, Me.AddCampaignRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCampaignRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCampaignRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCampaignRoleCompleted(Me, New AddCampaignRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCampaignSegment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCampaignSegment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCampaignSegment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCampaignSegmentAsync(ByVal pXMLParams As String)
            Me.AddCampaignSegmentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCampaignSegmentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCampaignSegmentOperationCompleted Is Nothing) Then
                Me.AddCampaignSegmentOperationCompleted = AddressOf Me.OnAddCampaignSegmentOperationCompleted
            End If
            Me.InvokeAsync("AddCampaignSegment", New Object() {pXMLParams}, Me.AddCampaignSegmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCampaignSegmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCampaignSegmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCampaignSegmentCompleted(Me, New AddCampaignSegmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCampaignSupplier", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCampaignSupplier(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCampaignSupplier", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCampaignSupplierAsync(ByVal pXMLParams As String)
            Me.AddCampaignSupplierAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCampaignSupplierAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCampaignSupplierOperationCompleted Is Nothing) Then
                Me.AddCampaignSupplierOperationCompleted = AddressOf Me.OnAddCampaignSupplierOperationCompleted
            End If
            Me.InvokeAsync("AddCampaignSupplier", New Object() {pXMLParams}, Me.AddCampaignSupplierOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCampaignSupplierOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCampaignSupplierCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCampaignSupplierCompleted(Me, New AddCampaignSupplierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCollectionBox", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCollectionBox(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCollectionBox", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCollectionBoxAsync(ByVal pXMLParams As String)
            Me.AddCollectionBoxAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCollectionBoxAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCollectionBoxOperationCompleted Is Nothing) Then
                Me.AddCollectionBoxOperationCompleted = AddressOf Me.OnAddCollectionBoxOperationCompleted
            End If
            Me.InvokeAsync("AddCollectionBox", New Object() {pXMLParams}, Me.AddCollectionBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCollectionBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCollectionBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCollectionBoxCompleted(Me, New AddCollectionBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCollectionPIS", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCollectionPIS(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCollectionPIS", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCollectionPISAsync(ByVal pXMLParams As String)
            Me.AddCollectionPISAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCollectionPISAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCollectionPISOperationCompleted Is Nothing) Then
                Me.AddCollectionPISOperationCompleted = AddressOf Me.OnAddCollectionPISOperationCompleted
            End If
            Me.InvokeAsync("AddCollectionPIS", New Object() {pXMLParams}, Me.AddCollectionPISOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCollectionPISOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCollectionPISCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCollectionPISCompleted(Me, New AddCollectionPISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCollectionPoint", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCollectionPoint(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCollectionPoint", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCollectionPointAsync(ByVal pXMLParams As String)
            Me.AddCollectionPointAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCollectionPointAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCollectionPointOperationCompleted Is Nothing) Then
                Me.AddCollectionPointOperationCompleted = AddressOf Me.OnAddCollectionPointOperationCompleted
            End If
            Me.InvokeAsync("AddCollectionPoint", New Object() {pXMLParams}, Me.AddCollectionPointOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCollectionPointOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCollectionPointCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCollectionPointCompleted(Me, New AddCollectionPointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCollectionRegion", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCollectionRegion(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCollectionRegion", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCollectionRegionAsync(ByVal pXMLParams As String)
            Me.AddCollectionRegionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCollectionRegionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCollectionRegionOperationCompleted Is Nothing) Then
                Me.AddCollectionRegionOperationCompleted = AddressOf Me.OnAddCollectionRegionOperationCompleted
            End If
            Me.InvokeAsync("AddCollectionRegion", New Object() {pXMLParams}, Me.AddCollectionRegionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCollectionRegionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCollectionRegionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCollectionRegionCompleted(Me, New AddCollectionRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCollectionResource", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCollectionResource(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCollectionResource", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCollectionResourceAsync(ByVal pXMLParams As String)
            Me.AddCollectionResourceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCollectionResourceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCollectionResourceOperationCompleted Is Nothing) Then
                Me.AddCollectionResourceOperationCompleted = AddressOf Me.OnAddCollectionResourceOperationCompleted
            End If
            Me.InvokeAsync("AddCollectionResource", New Object() {pXMLParams}, Me.AddCollectionResourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCollectionResourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCollectionResourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCollectionResourceCompleted(Me, New AddCollectionResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddCollectorShift", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddCollectorShift(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddCollectorShift", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddCollectorShiftAsync(ByVal pXMLParams As String)
            Me.AddCollectorShiftAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddCollectorShiftAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddCollectorShiftOperationCompleted Is Nothing) Then
                Me.AddCollectorShiftOperationCompleted = AddressOf Me.OnAddCollectorShiftOperationCompleted
            End If
            Me.InvokeAsync("AddCollectorShift", New Object() {pXMLParams}, Me.AddCollectorShiftOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddCollectorShiftOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCollectorShiftCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCollectorShiftCompleted(Me, New AddCollectorShiftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddH2HCollection", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddH2HCollection(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddH2HCollection", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddH2HCollectionAsync(ByVal pXMLParams As String)
            Me.AddH2HCollectionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddH2HCollectionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddH2HCollectionOperationCompleted Is Nothing) Then
                Me.AddH2HCollectionOperationCompleted = AddressOf Me.OnAddH2HCollectionOperationCompleted
            End If
            Me.InvokeAsync("AddH2HCollection", New Object() {pXMLParams}, Me.AddH2HCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddH2HCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddH2HCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddH2HCollectionCompleted(Me, New AddH2HCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddH2hCollector", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddH2hCollector(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddH2hCollector", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddH2hCollectorAsync(ByVal pXMLParams As String)
            Me.AddH2hCollectorAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddH2hCollectorAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddH2hCollectorOperationCompleted Is Nothing) Then
                Me.AddH2hCollectorOperationCompleted = AddressOf Me.OnAddH2hCollectorOperationCompleted
            End If
            Me.InvokeAsync("AddH2hCollector", New Object() {pXMLParams}, Me.AddH2hCollectorOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddH2hCollectorOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddH2hCollectorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddH2hCollectorCompleted(Me, New AddH2hCollectorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddMannedCollection", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMannedCollection(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddMannedCollection", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMannedCollectionAsync(ByVal pXMLParams As String)
            Me.AddMannedCollectionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMannedCollectionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddMannedCollectionOperationCompleted Is Nothing) Then
                Me.AddMannedCollectionOperationCompleted = AddressOf Me.OnAddMannedCollectionOperationCompleted
            End If
            Me.InvokeAsync("AddMannedCollection", New Object() {pXMLParams}, Me.AddMannedCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMannedCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMannedCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMannedCollectionCompleted(Me, New AddMannedCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddMannedCollector", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMannedCollector(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddMannedCollector", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMannedCollectorAsync(ByVal pXMLParams As String)
            Me.AddMannedCollectorAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMannedCollectorAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddMannedCollectorOperationCompleted Is Nothing) Then
                Me.AddMannedCollectorOperationCompleted = AddressOf Me.OnAddMannedCollectorOperationCompleted
            End If
            Me.InvokeAsync("AddMannedCollector", New Object() {pXMLParams}, Me.AddMannedCollectorOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMannedCollectorOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMannedCollectorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMannedCollectorCompleted(Me, New AddMannedCollectorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddSegmentCostCentre", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddSegmentCostCentre(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddSegmentCostCentre", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddSegmentCostCentreAsync(ByVal pXMLParams As String)
            Me.AddSegmentCostCentreAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddSegmentCostCentreAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddSegmentCostCentreOperationCompleted Is Nothing) Then
                Me.AddSegmentCostCentreOperationCompleted = AddressOf Me.OnAddSegmentCostCentreOperationCompleted
            End If
            Me.InvokeAsync("AddSegmentCostCentre", New Object() {pXMLParams}, Me.AddSegmentCostCentreOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddSegmentCostCentreOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddSegmentCostCentreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddSegmentCostCentreCompleted(Me, New AddSegmentCostCentreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddSegmentProduct", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddSegmentProduct(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddSegmentProduct", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddSegmentProductAsync(ByVal pXMLParams As String)
            Me.AddSegmentProductAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddSegmentProductAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddSegmentProductOperationCompleted Is Nothing) Then
                Me.AddSegmentProductOperationCompleted = AddressOf Me.OnAddSegmentProductOperationCompleted
            End If
            Me.InvokeAsync("AddSegmentProduct", New Object() {pXMLParams}, Me.AddSegmentProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddSegmentProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddSegmentProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddSegmentProductCompleted(Me, New AddSegmentProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddTickBox", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddTickBox(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddTickBox", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddTickBoxAsync(ByVal pXMLParams As String)
            Me.AddTickBoxAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddTickBoxAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddTickBoxOperationCompleted Is Nothing) Then
                Me.AddTickBoxOperationCompleted = AddressOf Me.OnAddTickBoxOperationCompleted
            End If
            Me.InvokeAsync("AddTickBox", New Object() {pXMLParams}, Me.AddTickBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddTickBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddTickBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddTickBoxCompleted(Me, New AddTickBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddUnmannedCollection", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUnmannedCollection(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddUnmannedCollection", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUnmannedCollectionAsync(ByVal pXMLParams As String)
            Me.AddUnmannedCollectionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUnmannedCollectionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddUnmannedCollectionOperationCompleted Is Nothing) Then
                Me.AddUnmannedCollectionOperationCompleted = AddressOf Me.OnAddUnmannedCollectionOperationCompleted
            End If
            Me.InvokeAsync("AddUnmannedCollection", New Object() {pXMLParams}, Me.AddUnmannedCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUnmannedCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUnmannedCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUnmannedCollectionCompleted(Me, New AddUnmannedCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CopyCampaignData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CopyCampaignData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CopyCampaignData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyCampaignDataAsync(ByVal pXMLParams As String)
            Me.CopyCampaignDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCampaignDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CopyCampaignDataOperationCompleted Is Nothing) Then
                Me.CopyCampaignDataOperationCompleted = AddressOf Me.OnCopyCampaignDataOperationCompleted
            End If
            Me.InvokeAsync("CopyCampaignData", New Object() {pXMLParams}, Me.CopyCampaignDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCampaignDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCampaignDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCampaignDataCompleted(Me, New CopyCampaignDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteAppealBudget", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteAppealBudget(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteAppealBudget", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAppealBudgetAsync(ByVal pXMLParams As String)
            Me.DeleteAppealBudgetAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAppealBudgetAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteAppealBudgetOperationCompleted Is Nothing) Then
                Me.DeleteAppealBudgetOperationCompleted = AddressOf Me.OnDeleteAppealBudgetOperationCompleted
            End If
            Me.InvokeAsync("DeleteAppealBudget", New Object() {pXMLParams}, Me.DeleteAppealBudgetOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAppealBudgetOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAppealBudgetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAppealBudgetCompleted(Me, New DeleteAppealBudgetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteAppealBudgetDetail", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteAppealBudgetDetail(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteAppealBudgetDetail", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAppealBudgetDetailAsync(ByVal pXMLParams As String)
            Me.DeleteAppealBudgetDetailAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAppealBudgetDetailAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteAppealBudgetDetailOperationCompleted Is Nothing) Then
                Me.DeleteAppealBudgetDetailOperationCompleted = AddressOf Me.OnDeleteAppealBudgetDetailOperationCompleted
            End If
            Me.InvokeAsync("DeleteAppealBudgetDetail", New Object() {pXMLParams}, Me.DeleteAppealBudgetDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAppealBudgetDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAppealBudgetDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAppealBudgetDetailCompleted(Me, New DeleteAppealBudgetDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteAppealResource", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteAppealResource(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteAppealResource", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAppealResourceAsync(ByVal pXMLParams As String)
            Me.DeleteAppealResourceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAppealResourceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteAppealResourceOperationCompleted Is Nothing) Then
                Me.DeleteAppealResourceOperationCompleted = AddressOf Me.OnDeleteAppealResourceOperationCompleted
            End If
            Me.InvokeAsync("DeleteAppealResource", New Object() {pXMLParams}, Me.DeleteAppealResourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAppealResourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAppealResourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAppealResourceCompleted(Me, New DeleteAppealResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCampaign", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCampaign(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCampaign", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCampaignAsync(ByVal pXMLParams As String)
            Me.DeleteCampaignAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCampaignAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCampaignOperationCompleted Is Nothing) Then
                Me.DeleteCampaignOperationCompleted = AddressOf Me.OnDeleteCampaignOperationCompleted
            End If
            Me.InvokeAsync("DeleteCampaign", New Object() {pXMLParams}, Me.DeleteCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCampaignCompleted(Me, New DeleteCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCampaignAppeal", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCampaignAppeal(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCampaignAppeal", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCampaignAppealAsync(ByVal pXMLParams As String)
            Me.DeleteCampaignAppealAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCampaignAppealAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCampaignAppealOperationCompleted Is Nothing) Then
                Me.DeleteCampaignAppealOperationCompleted = AddressOf Me.OnDeleteCampaignAppealOperationCompleted
            End If
            Me.InvokeAsync("DeleteCampaignAppeal", New Object() {pXMLParams}, Me.DeleteCampaignAppealOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCampaignAppealOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCampaignAppealCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCampaignAppealCompleted(Me, New DeleteCampaignAppealCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCampaignCost", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCampaignCost(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCampaignCost", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCampaignCostAsync(ByVal pXMLParams As String)
            Me.DeleteCampaignCostAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCampaignCostAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCampaignCostOperationCompleted Is Nothing) Then
                Me.DeleteCampaignCostOperationCompleted = AddressOf Me.OnDeleteCampaignCostOperationCompleted
            End If
            Me.InvokeAsync("DeleteCampaignCost", New Object() {pXMLParams}, Me.DeleteCampaignCostOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCampaignCostOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCampaignCostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCampaignCostCompleted(Me, New DeleteCampaignCostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCampaignRole", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCampaignRole(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCampaignRole", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCampaignRoleAsync(ByVal pXMLParams As String)
            Me.DeleteCampaignRoleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCampaignRoleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCampaignRoleOperationCompleted Is Nothing) Then
                Me.DeleteCampaignRoleOperationCompleted = AddressOf Me.OnDeleteCampaignRoleOperationCompleted
            End If
            Me.InvokeAsync("DeleteCampaignRole", New Object() {pXMLParams}, Me.DeleteCampaignRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCampaignRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCampaignRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCampaignRoleCompleted(Me, New DeleteCampaignRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCampaignSegment", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCampaignSegment(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCampaignSegment", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCampaignSegmentAsync(ByVal pXMLParams As String)
            Me.DeleteCampaignSegmentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCampaignSegmentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCampaignSegmentOperationCompleted Is Nothing) Then
                Me.DeleteCampaignSegmentOperationCompleted = AddressOf Me.OnDeleteCampaignSegmentOperationCompleted
            End If
            Me.InvokeAsync("DeleteCampaignSegment", New Object() {pXMLParams}, Me.DeleteCampaignSegmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCampaignSegmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCampaignSegmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCampaignSegmentCompleted(Me, New DeleteCampaignSegmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCampaignSupplier", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCampaignSupplier(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCampaignSupplier", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCampaignSupplierAsync(ByVal pXMLParams As String)
            Me.DeleteCampaignSupplierAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCampaignSupplierAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCampaignSupplierOperationCompleted Is Nothing) Then
                Me.DeleteCampaignSupplierOperationCompleted = AddressOf Me.OnDeleteCampaignSupplierOperationCompleted
            End If
            Me.InvokeAsync("DeleteCampaignSupplier", New Object() {pXMLParams}, Me.DeleteCampaignSupplierOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCampaignSupplierOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCampaignSupplierCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCampaignSupplierCompleted(Me, New DeleteCampaignSupplierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCollection", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCollection(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCollection", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectionAsync(ByVal pXMLParams As String)
            Me.DeleteCollectionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCollectionOperationCompleted Is Nothing) Then
                Me.DeleteCollectionOperationCompleted = AddressOf Me.OnDeleteCollectionOperationCompleted
            End If
            Me.InvokeAsync("DeleteCollection", New Object() {pXMLParams}, Me.DeleteCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCollectionCompleted(Me, New DeleteCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCollectionBox", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCollectionBox(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCollectionBox", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectionBoxAsync(ByVal pXMLParams As String)
            Me.DeleteCollectionBoxAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectionBoxAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCollectionBoxOperationCompleted Is Nothing) Then
                Me.DeleteCollectionBoxOperationCompleted = AddressOf Me.OnDeleteCollectionBoxOperationCompleted
            End If
            Me.InvokeAsync("DeleteCollectionBox", New Object() {pXMLParams}, Me.DeleteCollectionBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCollectionBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCollectionBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCollectionBoxCompleted(Me, New DeleteCollectionBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCollectionPIS", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCollectionPIS(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCollectionPIS", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectionPISAsync(ByVal pXMLParams As String)
            Me.DeleteCollectionPISAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectionPISAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCollectionPISOperationCompleted Is Nothing) Then
                Me.DeleteCollectionPISOperationCompleted = AddressOf Me.OnDeleteCollectionPISOperationCompleted
            End If
            Me.InvokeAsync("DeleteCollectionPIS", New Object() {pXMLParams}, Me.DeleteCollectionPISOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCollectionPISOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCollectionPISCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCollectionPISCompleted(Me, New DeleteCollectionPISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCollectionPoint", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCollectionPoint(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCollectionPoint", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectionPointAsync(ByVal pXMLParams As String)
            Me.DeleteCollectionPointAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectionPointAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCollectionPointOperationCompleted Is Nothing) Then
                Me.DeleteCollectionPointOperationCompleted = AddressOf Me.OnDeleteCollectionPointOperationCompleted
            End If
            Me.InvokeAsync("DeleteCollectionPoint", New Object() {pXMLParams}, Me.DeleteCollectionPointOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCollectionPointOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCollectionPointCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCollectionPointCompleted(Me, New DeleteCollectionPointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCollectionRegion", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCollectionRegion(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCollectionRegion", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectionRegionAsync(ByVal pXMLParams As String)
            Me.DeleteCollectionRegionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectionRegionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCollectionRegionOperationCompleted Is Nothing) Then
                Me.DeleteCollectionRegionOperationCompleted = AddressOf Me.OnDeleteCollectionRegionOperationCompleted
            End If
            Me.InvokeAsync("DeleteCollectionRegion", New Object() {pXMLParams}, Me.DeleteCollectionRegionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCollectionRegionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCollectionRegionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCollectionRegionCompleted(Me, New DeleteCollectionRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCollectionResource", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCollectionResource(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCollectionResource", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectionResourceAsync(ByVal pXMLParams As String)
            Me.DeleteCollectionResourceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectionResourceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCollectionResourceOperationCompleted Is Nothing) Then
                Me.DeleteCollectionResourceOperationCompleted = AddressOf Me.OnDeleteCollectionResourceOperationCompleted
            End If
            Me.InvokeAsync("DeleteCollectionResource", New Object() {pXMLParams}, Me.DeleteCollectionResourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCollectionResourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCollectionResourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCollectionResourceCompleted(Me, New DeleteCollectionResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCollectorShift", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCollectorShift(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCollectorShift", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectorShiftAsync(ByVal pXMLParams As String)
            Me.DeleteCollectorShiftAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCollectorShiftAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCollectorShiftOperationCompleted Is Nothing) Then
                Me.DeleteCollectorShiftOperationCompleted = AddressOf Me.OnDeleteCollectorShiftOperationCompleted
            End If
            Me.InvokeAsync("DeleteCollectorShift", New Object() {pXMLParams}, Me.DeleteCollectorShiftOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCollectorShiftOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCollectorShiftCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCollectorShiftCompleted(Me, New DeleteCollectorShiftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteH2hCollector", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteH2hCollector(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteH2hCollector", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteH2hCollectorAsync(ByVal pXMLParams As String)
            Me.DeleteH2hCollectorAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteH2hCollectorAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteH2hCollectorOperationCompleted Is Nothing) Then
                Me.DeleteH2hCollectorOperationCompleted = AddressOf Me.OnDeleteH2hCollectorOperationCompleted
            End If
            Me.InvokeAsync("DeleteH2hCollector", New Object() {pXMLParams}, Me.DeleteH2hCollectorOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteH2hCollectorOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteH2hCollectorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteH2hCollectorCompleted(Me, New DeleteH2hCollectorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteMannedCollector", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteMannedCollector(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteMannedCollector", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteMannedCollectorAsync(ByVal pXMLParams As String)
            Me.DeleteMannedCollectorAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteMannedCollectorAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteMannedCollectorOperationCompleted Is Nothing) Then
                Me.DeleteMannedCollectorOperationCompleted = AddressOf Me.OnDeleteMannedCollectorOperationCompleted
            End If
            Me.InvokeAsync("DeleteMannedCollector", New Object() {pXMLParams}, Me.DeleteMannedCollectorOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteMannedCollectorOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteMannedCollectorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteMannedCollectorCompleted(Me, New DeleteMannedCollectorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteMailingSelectionSet", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteMailingSelectionSet(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteMailingSelectionSet", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteMailingSelectionSetAsync(ByVal pXMLParams As String)
            Me.DeleteMailingSelectionSetAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteMailingSelectionSetAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteMailingSelectionSetOperationCompleted Is Nothing) Then
                Me.DeleteMailingSelectionSetOperationCompleted = AddressOf Me.OnDeleteMailingSelectionSetOperationCompleted
            End If
            Me.InvokeAsync("DeleteMailingSelectionSet", New Object() {pXMLParams}, Me.DeleteMailingSelectionSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteMailingSelectionSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteMailingSelectionSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteMailingSelectionSetCompleted(Me, New DeleteMailingSelectionSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteMeeting", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteMeeting(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteMeeting", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteMeetingAsync(ByVal pXMLParams As String)
            Me.DeleteMeetingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteMeetingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteMeetingOperationCompleted Is Nothing) Then
                Me.DeleteMeetingOperationCompleted = AddressOf Me.OnDeleteMeetingOperationCompleted
            End If
            Me.InvokeAsync("DeleteMeeting", New Object() {pXMLParams}, Me.DeleteMeetingOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteMeetingOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteMeetingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteMeetingCompleted(Me, New DeleteMeetingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteReport", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteReport(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteReport", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteReportAsync(ByVal pXMLParams As String)
            Me.DeleteReportAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteReportAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteReportOperationCompleted Is Nothing) Then
                Me.DeleteReportOperationCompleted = AddressOf Me.OnDeleteReportOperationCompleted
            End If
            Me.InvokeAsync("DeleteReport", New Object() {pXMLParams}, Me.DeleteReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteReportCompleted(Me, New DeleteReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteMeetingLinks", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteMeetingLinks(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteMeetingLinks", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteMeetingLinksAsync(ByVal pXMLParams As String)
            Me.DeleteMeetingLinksAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteMeetingLinksAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteMeetingLinksOperationCompleted Is Nothing) Then
                Me.DeleteMeetingLinksOperationCompleted = AddressOf Me.OnDeleteMeetingLinksOperationCompleted
            End If
            Me.InvokeAsync("DeleteMeetingLinks", New Object() {pXMLParams}, Me.DeleteMeetingLinksOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteMeetingLinksOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteMeetingLinksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteMeetingLinksCompleted(Me, New DeleteMeetingLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteMeetingDocument", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteMeetingDocument(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteMeetingDocument", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteMeetingDocumentAsync(ByVal pXMLParams As String)
            Me.DeleteMeetingDocumentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteMeetingDocumentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteMeetingDocumentOperationCompleted Is Nothing) Then
                Me.DeleteMeetingDocumentOperationCompleted = AddressOf Me.OnDeleteMeetingDocumentOperationCompleted
            End If
            Me.InvokeAsync("DeleteMeetingDocument", New Object() {pXMLParams}, Me.DeleteMeetingDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteMeetingDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteMeetingDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteMeetingDocumentCompleted(Me, New DeleteMeetingDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteSegmentCostCentre", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteSegmentCostCentre(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteSegmentCostCentre", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteSegmentCostCentreAsync(ByVal pXMLParams As String)
            Me.DeleteSegmentCostCentreAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSegmentCostCentreAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteSegmentCostCentreOperationCompleted Is Nothing) Then
                Me.DeleteSegmentCostCentreOperationCompleted = AddressOf Me.OnDeleteSegmentCostCentreOperationCompleted
            End If
            Me.InvokeAsync("DeleteSegmentCostCentre", New Object() {pXMLParams}, Me.DeleteSegmentCostCentreOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSegmentCostCentreOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSegmentCostCentreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSegmentCostCentreCompleted(Me, New DeleteSegmentCostCentreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteSegmentProduct", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteSegmentProduct(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteSegmentProduct", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteSegmentProductAsync(ByVal pXMLParams As String)
            Me.DeleteSegmentProductAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSegmentProductAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteSegmentProductOperationCompleted Is Nothing) Then
                Me.DeleteSegmentProductOperationCompleted = AddressOf Me.OnDeleteSegmentProductOperationCompleted
            End If
            Me.InvokeAsync("DeleteSegmentProduct", New Object() {pXMLParams}, Me.DeleteSegmentProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSegmentProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSegmentProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSegmentProductCompleted(Me, New DeleteSegmentProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteTableMaintenanceData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteTableMaintenanceData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteTableMaintenanceData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteTableMaintenanceDataAsync(ByVal pXMLParams As String)
            Me.DeleteTableMaintenanceDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTableMaintenanceDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteTableMaintenanceDataOperationCompleted Is Nothing) Then
                Me.DeleteTableMaintenanceDataOperationCompleted = AddressOf Me.OnDeleteTableMaintenanceDataOperationCompleted
            End If
            Me.InvokeAsync("DeleteTableMaintenanceData", New Object() {pXMLParams}, Me.DeleteTableMaintenanceDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteTableMaintenanceDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteTableMaintenanceDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteTableMaintenanceDataCompleted(Me, New DeleteTableMaintenanceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteTickBox", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteTickBox(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteTickBox", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteTickBoxAsync(ByVal pXMLParams As String)
            Me.DeleteTickBoxAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTickBoxAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteTickBoxOperationCompleted Is Nothing) Then
                Me.DeleteTickBoxOperationCompleted = AddressOf Me.OnDeleteTickBoxOperationCompleted
            End If
            Me.InvokeAsync("DeleteTickBox", New Object() {pXMLParams}, Me.DeleteTickBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteTickBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteTickBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteTickBoxCompleted(Me, New DeleteTickBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateAppealBudget", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAppealBudget(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateAppealBudget", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAppealBudgetAsync(ByVal pXMLParams As String)
            Me.UpdateAppealBudgetAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAppealBudgetAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateAppealBudgetOperationCompleted Is Nothing) Then
                Me.UpdateAppealBudgetOperationCompleted = AddressOf Me.OnUpdateAppealBudgetOperationCompleted
            End If
            Me.InvokeAsync("UpdateAppealBudget", New Object() {pXMLParams}, Me.UpdateAppealBudgetOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAppealBudgetOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAppealBudgetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAppealBudgetCompleted(Me, New UpdateAppealBudgetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateAppealBudgetDetail", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAppealBudgetDetail(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateAppealBudgetDetail", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAppealBudgetDetailAsync(ByVal pXMLParams As String)
            Me.UpdateAppealBudgetDetailAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAppealBudgetDetailAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateAppealBudgetDetailOperationCompleted Is Nothing) Then
                Me.UpdateAppealBudgetDetailOperationCompleted = AddressOf Me.OnUpdateAppealBudgetDetailOperationCompleted
            End If
            Me.InvokeAsync("UpdateAppealBudgetDetail", New Object() {pXMLParams}, Me.UpdateAppealBudgetDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAppealBudgetDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAppealBudgetDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAppealBudgetDetailCompleted(Me, New UpdateAppealBudgetDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateAppealResource", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAppealResource(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateAppealResource", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAppealResourceAsync(ByVal pXMLParams As String)
            Me.UpdateAppealResourceAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAppealResourceAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateAppealResourceOperationCompleted Is Nothing) Then
                Me.UpdateAppealResourceOperationCompleted = AddressOf Me.OnUpdateAppealResourceOperationCompleted
            End If
            Me.InvokeAsync("UpdateAppealResource", New Object() {pXMLParams}, Me.UpdateAppealResourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAppealResourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAppealResourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAppealResourceCompleted(Me, New UpdateAppealResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddContactCPDCycle", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddContactCPDCycle(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddContactCPDCycle", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddContactCPDCycleAsync(ByVal pXMLParams As String)
            Me.AddContactCPDCycleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddContactCPDCycleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddContactCPDCycleOperationCompleted Is Nothing) Then
                Me.AddContactCPDCycleOperationCompleted = AddressOf Me.OnAddContactCPDCycleOperationCompleted
            End If
            Me.InvokeAsync("AddContactCPDCycle", New Object() {pXMLParams}, Me.AddContactCPDCycleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddContactCPDCycleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddContactCPDCycleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddContactCPDCycleCompleted(Me, New AddContactCPDCycleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddContactCPDPoints", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddContactCPDPoints(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddContactCPDPoints", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddContactCPDPointsAsync(ByVal pXMLParams As String)
            Me.AddContactCPDPointsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddContactCPDPointsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddContactCPDPointsOperationCompleted Is Nothing) Then
                Me.AddContactCPDPointsOperationCompleted = AddressOf Me.OnAddContactCPDPointsOperationCompleted
            End If
            Me.InvokeAsync("AddContactCPDPoints", New Object() {pXMLParams}, Me.AddContactCPDPointsOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddContactCPDPointsOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddContactCPDPointsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddContactCPDPointsCompleted(Me, New AddContactCPDPointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddContactIncentives", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddContactIncentives(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddContactIncentives", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddContactIncentivesAsync(ByVal pXMLParams As String)
            Me.AddContactIncentivesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddContactIncentivesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddContactIncentivesOperationCompleted Is Nothing) Then
                Me.AddContactIncentivesOperationCompleted = AddressOf Me.OnAddContactIncentivesOperationCompleted
            End If
            Me.InvokeAsync("AddContactIncentives", New Object() {pXMLParams}, Me.AddContactIncentivesOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddContactIncentivesOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddContactIncentivesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddContactIncentivesCompleted(Me, New AddContactIncentivesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddUnFulFilledContactIncentives", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUnFulFilledContactIncentives(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddUnFulFilledContactIncentives", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUnFulFilledContactIncentivesAsync(ByVal pXMLParams As String)
            Me.AddUnFulFilledContactIncentivesAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUnFulFilledContactIncentivesAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddUnFulFilledContactIncentivesOperationCompleted Is Nothing) Then
                Me.AddUnFulFilledContactIncentivesOperationCompleted = AddressOf Me.OnAddUnFulFilledContactIncentivesOperationCompleted
            End If
            Me.InvokeAsync("AddUnFulFilledContactIncentives", New Object() {pXMLParams}, Me.AddUnFulFilledContactIncentivesOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUnFulFilledContactIncentivesOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUnFulFilledContactIncentivesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUnFulFilledContactIncentivesCompleted(Me, New AddUnFulFilledContactIncentivesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEnclosures", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEnclosures(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEnclosures", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEnclosuresAsync(ByVal pXMLParams As String)
            Me.AddEnclosuresAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEnclosuresAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEnclosuresOperationCompleted Is Nothing) Then
                Me.AddEnclosuresOperationCompleted = AddressOf Me.OnAddEnclosuresOperationCompleted
            End If
            Me.InvokeAsync("AddEnclosures", New Object() {pXMLParams}, Me.AddEnclosuresOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEnclosuresOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEnclosuresCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEnclosuresCompleted(Me, New AddEnclosuresCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddMeeting", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMeeting(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddMeeting", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMeetingAsync(ByVal pXMLParams As String)
            Me.AddMeetingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMeetingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddMeetingOperationCompleted Is Nothing) Then
                Me.AddMeetingOperationCompleted = AddressOf Me.OnAddMeetingOperationCompleted
            End If
            Me.InvokeAsync("AddMeeting", New Object() {pXMLParams}, Me.AddMeetingOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMeetingOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMeetingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMeetingCompleted(Me, New AddMeetingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddMeetingLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMeetingLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddMeetingLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMeetingLinkAsync(ByVal pXMLParams As String)
            Me.AddMeetingLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMeetingLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddMeetingLinkOperationCompleted Is Nothing) Then
                Me.AddMeetingLinkOperationCompleted = AddressOf Me.OnAddMeetingLinkOperationCompleted
            End If
            Me.InvokeAsync("AddMeetingLink", New Object() {pXMLParams}, Me.AddMeetingLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMeetingLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMeetingLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMeetingLinkCompleted(Me, New AddMeetingLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddMeetingDocument", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMeetingDocument(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddMeetingDocument", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMeetingDocumentAsync(ByVal pXMLParams As String)
            Me.AddMeetingDocumentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMeetingDocumentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddMeetingDocumentOperationCompleted Is Nothing) Then
                Me.AddMeetingDocumentOperationCompleted = AddressOf Me.OnAddMeetingDocumentOperationCompleted
            End If
            Me.InvokeAsync("AddMeetingDocument", New Object() {pXMLParams}, Me.AddMeetingDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMeetingDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMeetingDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMeetingDocumentCompleted(Me, New AddMeetingDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DuplicateMeeting", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DuplicateMeeting(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DuplicateMeeting", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DuplicateMeetingAsync(ByVal pXMLParams As String)
            Me.DuplicateMeetingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DuplicateMeetingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DuplicateMeetingOperationCompleted Is Nothing) Then
                Me.DuplicateMeetingOperationCompleted = AddressOf Me.OnDuplicateMeetingOperationCompleted
            End If
            Me.InvokeAsync("DuplicateMeeting", New Object() {pXMLParams}, Me.DuplicateMeetingOperationCompleted, userState)
        End Sub
        
        Private Sub OnDuplicateMeetingOperationCompleted(ByVal arg As Object)
            If (Not (Me.DuplicateMeetingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DuplicateMeetingCompleted(Me, New DuplicateMeetingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMeeting", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMeeting(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateMeeting", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMeetingAsync(ByVal pXMLParams As String)
            Me.UpdateMeetingAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMeetingAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateMeetingOperationCompleted Is Nothing) Then
                Me.UpdateMeetingOperationCompleted = AddressOf Me.OnUpdateMeetingOperationCompleted
            End If
            Me.InvokeAsync("UpdateMeeting", New Object() {pXMLParams}, Me.UpdateMeetingOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMeetingOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMeetingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMeetingCompleted(Me, New UpdateMeetingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMeetingLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMeetingLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateMeetingLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMeetingLinkAsync(ByVal pXMLParams As String)
            Me.UpdateMeetingLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMeetingLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateMeetingLinkOperationCompleted Is Nothing) Then
                Me.UpdateMeetingLinkOperationCompleted = AddressOf Me.OnUpdateMeetingLinkOperationCompleted
            End If
            Me.InvokeAsync("UpdateMeetingLink", New Object() {pXMLParams}, Me.UpdateMeetingLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMeetingLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMeetingLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMeetingLinkCompleted(Me, New UpdateMeetingLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddDisplayListItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddDisplayListItem(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddDisplayListItem", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddDisplayListItemAsync(ByVal pXMLParams As String)
            Me.AddDisplayListItemAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddDisplayListItemAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddDisplayListItemOperationCompleted Is Nothing) Then
                Me.AddDisplayListItemOperationCompleted = AddressOf Me.OnAddDisplayListItemOperationCompleted
            End If
            Me.InvokeAsync("AddDisplayListItem", New Object() {pXMLParams}, Me.AddDisplayListItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddDisplayListItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddDisplayListItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddDisplayListItemCompleted(Me, New AddDisplayListItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddEventFinancialLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddEventFinancialLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddEventFinancialLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddEventFinancialLinkAsync(ByVal pXMLParams As String)
            Me.AddEventFinancialLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddEventFinancialLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddEventFinancialLinkOperationCompleted Is Nothing) Then
                Me.AddEventFinancialLinkOperationCompleted = AddressOf Me.OnAddEventFinancialLinkOperationCompleted
            End If
            Me.InvokeAsync("AddEventFinancialLink", New Object() {pXMLParams}, Me.AddEventFinancialLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddEventFinancialLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddEventFinancialLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddEventFinancialLinkCompleted(Me, New AddEventFinancialLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddExternalData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddExternalData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddExternalData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddExternalDataAsync(ByVal pXMLParams As String)
            Me.AddExternalDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddExternalDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddExternalDataOperationCompleted Is Nothing) Then
                Me.AddExternalDataOperationCompleted = AddressOf Me.OnAddExternalDataOperationCompleted
            End If
            Me.InvokeAsync("AddExternalData", New Object() {pXMLParams}, Me.AddExternalDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddExternalDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddExternalDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddExternalDataCompleted(Me, New AddExternalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddHistoryItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddHistoryItem(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddHistoryItem", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddHistoryItemAsync(ByVal pXMLParams As String)
            Me.AddHistoryItemAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddHistoryItemAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddHistoryItemOperationCompleted Is Nothing) Then
                Me.AddHistoryItemOperationCompleted = AddressOf Me.OnAddHistoryItemOperationCompleted
            End If
            Me.InvokeAsync("AddHistoryItem", New Object() {pXMLParams}, Me.AddHistoryItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddHistoryItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddHistoryItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddHistoryItemCompleted(Me, New AddHistoryItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddLegacy", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddLegacy(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddLegacy", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddLegacyAsync(ByVal pXMLParams As String)
            Me.AddLegacyAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddLegacyAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddLegacyOperationCompleted Is Nothing) Then
                Me.AddLegacyOperationCompleted = AddressOf Me.OnAddLegacyOperationCompleted
            End If
            Me.InvokeAsync("AddLegacy", New Object() {pXMLParams}, Me.AddLegacyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddLegacyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddLegacyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddLegacyCompleted(Me, New AddLegacyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddLegacyBequest", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddLegacyBequest(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddLegacyBequest", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddLegacyBequestAsync(ByVal pXMLParams As String)
            Me.AddLegacyBequestAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddLegacyBequestAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddLegacyBequestOperationCompleted Is Nothing) Then
                Me.AddLegacyBequestOperationCompleted = AddressOf Me.OnAddLegacyBequestOperationCompleted
            End If
            Me.InvokeAsync("AddLegacyBequest", New Object() {pXMLParams}, Me.AddLegacyBequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddLegacyBequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddLegacyBequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddLegacyBequestCompleted(Me, New AddLegacyBequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddLegacyBequestForecast", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddLegacyBequestForecast(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddLegacyBequestForecast", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddLegacyBequestForecastAsync(ByVal pXMLParams As String)
            Me.AddLegacyBequestForecastAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddLegacyBequestForecastAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddLegacyBequestForecastOperationCompleted Is Nothing) Then
                Me.AddLegacyBequestForecastOperationCompleted = AddressOf Me.OnAddLegacyBequestForecastOperationCompleted
            End If
            Me.InvokeAsync("AddLegacyBequestForecast", New Object() {pXMLParams}, Me.AddLegacyBequestForecastOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddLegacyBequestForecastOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddLegacyBequestForecastCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddLegacyBequestForecastCompleted(Me, New AddLegacyBequestForecastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddLegacyTaxCertificate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddLegacyTaxCertificate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddLegacyTaxCertificate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddLegacyTaxCertificateAsync(ByVal pXMLParams As String)
            Me.AddLegacyTaxCertificateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddLegacyTaxCertificateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddLegacyTaxCertificateOperationCompleted Is Nothing) Then
                Me.AddLegacyTaxCertificateOperationCompleted = AddressOf Me.OnAddLegacyTaxCertificateOperationCompleted
            End If
            Me.InvokeAsync("AddLegacyTaxCertificate", New Object() {pXMLParams}, Me.AddLegacyTaxCertificateOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddLegacyTaxCertificateOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddLegacyTaxCertificateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddLegacyTaxCertificateCompleted(Me, New AddLegacyTaxCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddLegacyExpense", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddLegacyExpense(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddLegacyExpense", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddLegacyExpenseAsync(ByVal pXMLParams As String)
            Me.AddLegacyExpenseAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddLegacyExpenseAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddLegacyExpenseOperationCompleted Is Nothing) Then
                Me.AddLegacyExpenseOperationCompleted = AddressOf Me.OnAddLegacyExpenseOperationCompleted
            End If
            Me.InvokeAsync("AddLegacyExpense", New Object() {pXMLParams}, Me.AddLegacyExpenseOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddLegacyExpenseOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddLegacyExpenseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddLegacyExpenseCompleted(Me, New AddLegacyExpenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddLookupData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddLookupData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddLookupData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddLookupDataAsync(ByVal pXMLParams As String)
            Me.AddLookupDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddLookupDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddLookupDataOperationCompleted Is Nothing) Then
                Me.AddLookupDataOperationCompleted = AddressOf Me.OnAddLookupDataOperationCompleted
            End If
            Me.InvokeAsync("AddLookupData", New Object() {pXMLParams}, Me.AddLookupDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddLookupDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddLookupDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddLookupDataCompleted(Me, New AddLookupDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddPreTaxPledge", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPreTaxPledge(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddPreTaxPledge", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPreTaxPledgeAsync(ByVal pXMLParams As String)
            Me.AddPreTaxPledgeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPreTaxPledgeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddPreTaxPledgeOperationCompleted Is Nothing) Then
                Me.AddPreTaxPledgeOperationCompleted = AddressOf Me.OnAddPreTaxPledgeOperationCompleted
            End If
            Me.InvokeAsync("AddPreTaxPledge", New Object() {pXMLParams}, Me.AddPreTaxPledgeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPreTaxPledgeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPreTaxPledgeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPreTaxPledgeCompleted(Me, New AddPreTaxPledgeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddPostTaxPledge", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPostTaxPledge(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddPostTaxPledge", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPostTaxPledgeAsync(ByVal pXMLParams As String)
            Me.AddPostTaxPledgeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPostTaxPledgeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddPostTaxPledgeOperationCompleted Is Nothing) Then
                Me.AddPostTaxPledgeOperationCompleted = AddressOf Me.OnAddPostTaxPledgeOperationCompleted
            End If
            Me.InvokeAsync("AddPostTaxPledge", New Object() {pXMLParams}, Me.AddPostTaxPledgeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPostTaxPledgeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPostTaxPledgeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPostTaxPledgeCompleted(Me, New AddPostTaxPledgeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddTableMaintenanceData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddTableMaintenanceData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddTableMaintenanceData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddTableMaintenanceDataAsync(ByVal pXMLParams As String)
            Me.AddTableMaintenanceDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddTableMaintenanceDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddTableMaintenanceDataOperationCompleted Is Nothing) Then
                Me.AddTableMaintenanceDataOperationCompleted = AddressOf Me.OnAddTableMaintenanceDataOperationCompleted
            End If
            Me.InvokeAsync("AddTableMaintenanceData", New Object() {pXMLParams}, Me.AddTableMaintenanceDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddTableMaintenanceDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddTableMaintenanceDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddTableMaintenanceDataCompleted(Me, New AddTableMaintenanceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AddXmlDataItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddXmlDataItem(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AddXmlDataItem", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddXmlDataItemAsync(ByVal pXMLParams As String)
            Me.AddXmlDataItemAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddXmlDataItemAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AddXmlDataItemOperationCompleted Is Nothing) Then
                Me.AddXmlDataItemOperationCompleted = AddressOf Me.OnAddXmlDataItemOperationCompleted
            End If
            Me.InvokeAsync("AddXmlDataItem", New Object() {pXMLParams}, Me.AddXmlDataItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddXmlDataItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddXmlDataItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddXmlDataItemCompleted(Me, New AddXmlDataItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/AmalgamateOrganisation", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AmalgamateOrganisation(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("AmalgamateOrganisation", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AmalgamateOrganisationAsync(ByVal pXMLParams As String)
            Me.AmalgamateOrganisationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AmalgamateOrganisationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.AmalgamateOrganisationOperationCompleted Is Nothing) Then
                Me.AmalgamateOrganisationOperationCompleted = AddressOf Me.OnAmalgamateOrganisationOperationCompleted
            End If
            Me.InvokeAsync("AmalgamateOrganisation", New Object() {pXMLParams}, Me.AmalgamateOrganisationOperationCompleted, userState)
        End Sub
        
        Private Sub OnAmalgamateOrganisationOperationCompleted(ByVal arg As Object)
            If (Not (Me.AmalgamateOrganisationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AmalgamateOrganisationCompleted(Me, New AmalgamateOrganisationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CalculateEventBookingPriceFromMatrix", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CalculateEventBookingPriceFromMatrix(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CalculateEventBookingPriceFromMatrix", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalculateEventBookingPriceFromMatrixAsync(ByVal pXMLParams As String)
            Me.CalculateEventBookingPriceFromMatrixAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalculateEventBookingPriceFromMatrixAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CalculateEventBookingPriceFromMatrixOperationCompleted Is Nothing) Then
                Me.CalculateEventBookingPriceFromMatrixOperationCompleted = AddressOf Me.OnCalculateEventBookingPriceFromMatrixOperationCompleted
            End If
            Me.InvokeAsync("CalculateEventBookingPriceFromMatrix", New Object() {pXMLParams}, Me.CalculateEventBookingPriceFromMatrixOperationCompleted, userState)
        End Sub
        
        Private Sub OnCalculateEventBookingPriceFromMatrixOperationCompleted(ByVal arg As Object)
            If (Not (Me.CalculateEventBookingPriceFromMatrixCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalculateEventBookingPriceFromMatrixCompleted(Me, New CalculateEventBookingPriceFromMatrixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CheckSetup", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckSetup(ByVal pXMLParams As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("CheckSetup", New Object() {pXMLParams})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckSetupAsync(ByVal pXMLParams As String)
            Me.CheckSetupAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckSetupAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CheckSetupOperationCompleted Is Nothing) Then
                Me.CheckSetupOperationCompleted = AddressOf Me.OnCheckSetupOperationCompleted
            End If
            Me.InvokeAsync("CheckSetup", New Object() {pXMLParams}, Me.CheckSetupOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckSetupOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckSetupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckSetupCompleted(Me, New CheckSetupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CheckUsedElsewhere", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckUsedElsewhere(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CheckUsedElsewhere", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckUsedElsewhereAsync(ByVal pXMLParams As String)
            Me.CheckUsedElsewhereAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckUsedElsewhereAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CheckUsedElsewhereOperationCompleted Is Nothing) Then
                Me.CheckUsedElsewhereOperationCompleted = AddressOf Me.OnCheckUsedElsewhereOperationCompleted
            End If
            Me.InvokeAsync("CheckUsedElsewhere", New Object() {pXMLParams}, Me.CheckUsedElsewhereOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckUsedElsewhereOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckUsedElsewhereCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckUsedElsewhereCompleted(Me, New CheckUsedElsewhereCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CheckLicenseData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckLicenseData(ByVal pLicenseCheckType As LicenseCheckTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CheckLicenseData", New Object() {pLicenseCheckType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckLicenseDataAsync(ByVal pLicenseCheckType As LicenseCheckTypes, ByVal pXMLParams As String)
            Me.CheckLicenseDataAsync(pLicenseCheckType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckLicenseDataAsync(ByVal pLicenseCheckType As LicenseCheckTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CheckLicenseDataOperationCompleted Is Nothing) Then
                Me.CheckLicenseDataOperationCompleted = AddressOf Me.OnCheckLicenseDataOperationCompleted
            End If
            Me.InvokeAsync("CheckLicenseData", New Object() {pLicenseCheckType, pXMLParams}, Me.CheckLicenseDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckLicenseDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckLicenseDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckLicenseDataCompleted(Me, New CheckLicenseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CheckPromptForNewBranch", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPromptForNewBranch(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CheckPromptForNewBranch", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPromptForNewBranchAsync(ByVal pXMLParams As String)
            Me.CheckPromptForNewBranchAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPromptForNewBranchAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CheckPromptForNewBranchOperationCompleted Is Nothing) Then
                Me.CheckPromptForNewBranchOperationCompleted = AddressOf Me.OnCheckPromptForNewBranchOperationCompleted
            End If
            Me.InvokeAsync("CheckPromptForNewBranch", New Object() {pXMLParams}, Me.CheckPromptForNewBranchOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPromptForNewBranchOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPromptForNewBranchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPromptForNewBranchCompleted(Me, New CheckPromptForNewBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CloneOrganisation", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CloneOrganisation(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CloneOrganisation", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CloneOrganisationAsync(ByVal pXMLParams As String)
            Me.CloneOrganisationAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloneOrganisationAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CloneOrganisationOperationCompleted Is Nothing) Then
                Me.CloneOrganisationOperationCompleted = AddressOf Me.OnCloneOrganisationOperationCompleted
            End If
            Me.InvokeAsync("CloneOrganisation", New Object() {pXMLParams}, Me.CloneOrganisationOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloneOrganisationOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloneOrganisationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloneOrganisationCompleted(Me, New CloneOrganisationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/CopyEventPricingMatrix", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CopyEventPricingMatrix(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("CopyEventPricingMatrix", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyEventPricingMatrixAsync(ByVal pXMLParams As String)
            Me.CopyEventPricingMatrixAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyEventPricingMatrixAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.CopyEventPricingMatrixOperationCompleted Is Nothing) Then
                Me.CopyEventPricingMatrixOperationCompleted = AddressOf Me.OnCopyEventPricingMatrixOperationCompleted
            End If
            Me.InvokeAsync("CopyEventPricingMatrix", New Object() {pXMLParams}, Me.CopyEventPricingMatrixOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyEventPricingMatrixOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyEventPricingMatrixCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyEventPricingMatrixCompleted(Me, New CopyEventPricingMatrixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteContactCPDCycle", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteContactCPDCycle(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteContactCPDCycle", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteContactCPDCycleAsync(ByVal pXMLParams As String)
            Me.DeleteContactCPDCycleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContactCPDCycleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteContactCPDCycleOperationCompleted Is Nothing) Then
                Me.DeleteContactCPDCycleOperationCompleted = AddressOf Me.OnDeleteContactCPDCycleOperationCompleted
            End If
            Me.InvokeAsync("DeleteContactCPDCycle", New Object() {pXMLParams}, Me.DeleteContactCPDCycleOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContactCPDCycleOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContactCPDCycleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContactCPDCycleCompleted(Me, New DeleteContactCPDCycleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteContactCPDPoints", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteContactCPDPoints(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteContactCPDPoints", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteContactCPDPointsAsync(ByVal pXMLParams As String)
            Me.DeleteContactCPDPointsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContactCPDPointsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteContactCPDPointsOperationCompleted Is Nothing) Then
                Me.DeleteContactCPDPointsOperationCompleted = AddressOf Me.OnDeleteContactCPDPointsOperationCompleted
            End If
            Me.InvokeAsync("DeleteContactCPDPoints", New Object() {pXMLParams}, Me.DeleteContactCPDPointsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContactCPDPointsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContactCPDPointsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContactCPDPointsCompleted(Me, New DeleteContactCPDPointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteContactMailingDocument", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteContactMailingDocument(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteContactMailingDocument", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteContactMailingDocumentAsync(ByVal pXMLParams As String)
            Me.DeleteContactMailingDocumentAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContactMailingDocumentAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteContactMailingDocumentOperationCompleted Is Nothing) Then
                Me.DeleteContactMailingDocumentOperationCompleted = AddressOf Me.OnDeleteContactMailingDocumentOperationCompleted
            End If
            Me.InvokeAsync("DeleteContactMailingDocument", New Object() {pXMLParams}, Me.DeleteContactMailingDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContactMailingDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContactMailingDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContactMailingDocumentCompleted(Me, New DeleteContactMailingDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteCustomisedDisplayList", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCustomisedDisplayList(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteCustomisedDisplayList", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCustomisedDisplayListAsync(ByVal pXMLParams As String)
            Me.DeleteCustomisedDisplayListAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCustomisedDisplayListAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteCustomisedDisplayListOperationCompleted Is Nothing) Then
                Me.DeleteCustomisedDisplayListOperationCompleted = AddressOf Me.OnDeleteCustomisedDisplayListOperationCompleted
            End If
            Me.InvokeAsync("DeleteCustomisedDisplayList", New Object() {pXMLParams}, Me.DeleteCustomisedDisplayListOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCustomisedDisplayListOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCustomisedDisplayListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCustomisedDisplayListCompleted(Me, New DeleteCustomisedDisplayListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteEventFinancialLink", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEventFinancialLink(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteEventFinancialLink", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEventFinancialLinkAsync(ByVal pXMLParams As String)
            Me.DeleteEventFinancialLinkAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEventFinancialLinkAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteEventFinancialLinkOperationCompleted Is Nothing) Then
                Me.DeleteEventFinancialLinkOperationCompleted = AddressOf Me.OnDeleteEventFinancialLinkOperationCompleted
            End If
            Me.InvokeAsync("DeleteEventFinancialLink", New Object() {pXMLParams}, Me.DeleteEventFinancialLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEventFinancialLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEventFinancialLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEventFinancialLinkCompleted(Me, New DeleteEventFinancialLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteExternalData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteExternalData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteExternalData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteExternalDataAsync(ByVal pXMLParams As String)
            Me.DeleteExternalDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteExternalDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteExternalDataOperationCompleted Is Nothing) Then
                Me.DeleteExternalDataOperationCompleted = AddressOf Me.OnDeleteExternalDataOperationCompleted
            End If
            Me.InvokeAsync("DeleteExternalData", New Object() {pXMLParams}, Me.DeleteExternalDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteExternalDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteExternalDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteExternalDataCompleted(Me, New DeleteExternalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteFastDataEntryControl", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFastDataEntryControl(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteFastDataEntryControl", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFastDataEntryControlAsync(ByVal pXMLParams As String)
            Me.DeleteFastDataEntryControlAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFastDataEntryControlAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteFastDataEntryControlOperationCompleted Is Nothing) Then
                Me.DeleteFastDataEntryControlOperationCompleted = AddressOf Me.OnDeleteFastDataEntryControlOperationCompleted
            End If
            Me.InvokeAsync("DeleteFastDataEntryControl", New Object() {pXMLParams}, Me.DeleteFastDataEntryControlOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFastDataEntryControlOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFastDataEntryControlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFastDataEntryControlCompleted(Me, New DeleteFastDataEntryControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteFastDataEntryPage", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFastDataEntryPage(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteFastDataEntryPage", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFastDataEntryPageAsync(ByVal pXMLParams As String)
            Me.DeleteFastDataEntryPageAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFastDataEntryPageAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteFastDataEntryPageOperationCompleted Is Nothing) Then
                Me.DeleteFastDataEntryPageOperationCompleted = AddressOf Me.OnDeleteFastDataEntryPageOperationCompleted
            End If
            Me.InvokeAsync("DeleteFastDataEntryPage", New Object() {pXMLParams}, Me.DeleteFastDataEntryPageOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFastDataEntryPageOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFastDataEntryPageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFastDataEntryPageCompleted(Me, New DeleteFastDataEntryPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteLegacy", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteLegacy(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteLegacy", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteLegacyAsync(ByVal pXMLParams As String)
            Me.DeleteLegacyAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteLegacyAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteLegacyOperationCompleted Is Nothing) Then
                Me.DeleteLegacyOperationCompleted = AddressOf Me.OnDeleteLegacyOperationCompleted
            End If
            Me.InvokeAsync("DeleteLegacy", New Object() {pXMLParams}, Me.DeleteLegacyOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteLegacyOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteLegacyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteLegacyCompleted(Me, New DeleteLegacyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteLegacyBequest", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteLegacyBequest(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteLegacyBequest", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteLegacyBequestAsync(ByVal pXMLParams As String)
            Me.DeleteLegacyBequestAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteLegacyBequestAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteLegacyBequestOperationCompleted Is Nothing) Then
                Me.DeleteLegacyBequestOperationCompleted = AddressOf Me.OnDeleteLegacyBequestOperationCompleted
            End If
            Me.InvokeAsync("DeleteLegacyBequest", New Object() {pXMLParams}, Me.DeleteLegacyBequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteLegacyBequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteLegacyBequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteLegacyBequestCompleted(Me, New DeleteLegacyBequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteLegacyBequestForecast", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteLegacyBequestForecast(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteLegacyBequestForecast", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteLegacyBequestForecastAsync(ByVal pXMLParams As String)
            Me.DeleteLegacyBequestForecastAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteLegacyBequestForecastAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteLegacyBequestForecastOperationCompleted Is Nothing) Then
                Me.DeleteLegacyBequestForecastOperationCompleted = AddressOf Me.OnDeleteLegacyBequestForecastOperationCompleted
            End If
            Me.InvokeAsync("DeleteLegacyBequestForecast", New Object() {pXMLParams}, Me.DeleteLegacyBequestForecastOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteLegacyBequestForecastOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteLegacyBequestForecastCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteLegacyBequestForecastCompleted(Me, New DeleteLegacyBequestForecastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteLegacyTaxCertificate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteLegacyTaxCertificate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteLegacyTaxCertificate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteLegacyTaxCertificateAsync(ByVal pXMLParams As String)
            Me.DeleteLegacyTaxCertificateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteLegacyTaxCertificateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteLegacyTaxCertificateOperationCompleted Is Nothing) Then
                Me.DeleteLegacyTaxCertificateOperationCompleted = AddressOf Me.OnDeleteLegacyTaxCertificateOperationCompleted
            End If
            Me.InvokeAsync("DeleteLegacyTaxCertificate", New Object() {pXMLParams}, Me.DeleteLegacyTaxCertificateOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteLegacyTaxCertificateOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteLegacyTaxCertificateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteLegacyTaxCertificateCompleted(Me, New DeleteLegacyTaxCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteLegacyExpense", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteLegacyExpense(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteLegacyExpense", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteLegacyExpenseAsync(ByVal pXMLParams As String)
            Me.DeleteLegacyExpenseAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteLegacyExpenseAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteLegacyExpenseOperationCompleted Is Nothing) Then
                Me.DeleteLegacyExpenseOperationCompleted = AddressOf Me.OnDeleteLegacyExpenseOperationCompleted
            End If
            Me.InvokeAsync("DeleteLegacyExpense", New Object() {pXMLParams}, Me.DeleteLegacyExpenseOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteLegacyExpenseOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteLegacyExpenseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteLegacyExpenseCompleted(Me, New DeleteLegacyExpenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteXmlDataItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteXmlDataItem(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteXmlDataItem", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteXmlDataItemAsync(ByVal pXMLParams As String)
            Me.DeleteXmlDataItemAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteXmlDataItemAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteXmlDataItemOperationCompleted Is Nothing) Then
                Me.DeleteXmlDataItemOperationCompleted = AddressOf Me.OnDeleteXmlDataItemOperationCompleted
            End If
            Me.InvokeAsync("DeleteXmlDataItem", New Object() {pXMLParams}, Me.DeleteXmlDataItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteXmlDataItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteXmlDataItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteXmlDataItemCompleted(Me, New DeleteXmlDataItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/DeleteDisplayListItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteDisplayListItem(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("DeleteDisplayListItem", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteDisplayListItemAsync(ByVal pXMLParams As String)
            Me.DeleteDisplayListItemAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDisplayListItemAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.DeleteDisplayListItemOperationCompleted Is Nothing) Then
                Me.DeleteDisplayListItemOperationCompleted = AddressOf Me.OnDeleteDisplayListItemOperationCompleted
            End If
            Me.InvokeAsync("DeleteDisplayListItem", New Object() {pXMLParams}, Me.DeleteDisplayListItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteDisplayListItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteDisplayListItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteDisplayListItemCompleted(Me, New DeleteDisplayListItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetFastDataEntryControlItems", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFastDataEntryControlItems(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetFastDataEntryControlItems", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFastDataEntryControlItemsAsync(ByVal pXMLParams As String)
            Me.GetFastDataEntryControlItemsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFastDataEntryControlItemsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetFastDataEntryControlItemsOperationCompleted Is Nothing) Then
                Me.GetFastDataEntryControlItemsOperationCompleted = AddressOf Me.OnGetFastDataEntryControlItemsOperationCompleted
            End If
            Me.InvokeAsync("GetFastDataEntryControlItems", New Object() {pXMLParams}, Me.GetFastDataEntryControlItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFastDataEntryControlItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFastDataEntryControlItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFastDataEntryControlItemsCompleted(Me, New GetFastDataEntryControlItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMailingSelectedContacts", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMailingSelectedContacts(ByVal pXmlParams As String) As String
            Dim results() As Object = Me.Invoke("GetMailingSelectedContacts", New Object() {pXmlParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMailingSelectedContactsAsync(ByVal pXmlParams As String)
            Me.GetMailingSelectedContactsAsync(pXmlParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMailingSelectedContactsAsync(ByVal pXmlParams As String, ByVal userState As Object)
            If (Me.GetMailingSelectedContactsOperationCompleted Is Nothing) Then
                Me.GetMailingSelectedContactsOperationCompleted = AddressOf Me.OnGetMailingSelectedContactsOperationCompleted
            End If
            Me.InvokeAsync("GetMailingSelectedContacts", New Object() {pXmlParams}, Me.GetMailingSelectedContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMailingSelectedContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMailingSelectedContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMailingSelectedContactsCompleted(Me, New GetMailingSelectedContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMailingRelevantMembers", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMailingRelevantMembers(ByVal pXmlParams As String) As String
            Dim results() As Object = Me.Invoke("GetMailingRelevantMembers", New Object() {pXmlParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMailingRelevantMembersAsync(ByVal pXmlParams As String)
            Me.GetMailingRelevantMembersAsync(pXmlParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMailingRelevantMembersAsync(ByVal pXmlParams As String, ByVal userState As Object)
            If (Me.GetMailingRelevantMembersOperationCompleted Is Nothing) Then
                Me.GetMailingRelevantMembersOperationCompleted = AddressOf Me.OnGetMailingRelevantMembersOperationCompleted
            End If
            Me.InvokeAsync("GetMailingRelevantMembers", New Object() {pXmlParams}, Me.GetMailingRelevantMembersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMailingRelevantMembersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMailingRelevantMembersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMailingRelevantMembersCompleted(Me, New GetMailingRelevantMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetFastDataEntryModuleDefaults", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFastDataEntryModuleDefaults(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetFastDataEntryModuleDefaults", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFastDataEntryModuleDefaultsAsync(ByVal pXMLParams As String)
            Me.GetFastDataEntryModuleDefaultsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFastDataEntryModuleDefaultsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetFastDataEntryModuleDefaultsOperationCompleted Is Nothing) Then
                Me.GetFastDataEntryModuleDefaultsOperationCompleted = AddressOf Me.OnGetFastDataEntryModuleDefaultsOperationCompleted
            End If
            Me.InvokeAsync("GetFastDataEntryModuleDefaults", New Object() {pXMLParams}, Me.GetFastDataEntryModuleDefaultsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFastDataEntryModuleDefaultsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFastDataEntryModuleDefaultsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFastDataEntryModuleDefaultsCompleted(Me, New GetFastDataEntryModuleDefaultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/ProcessMailingSelection", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessMailingSelection(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("ProcessMailingSelection", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessMailingSelectionAsync(ByVal pXMLParams As String)
            Me.ProcessMailingSelectionAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessMailingSelectionAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.ProcessMailingSelectionOperationCompleted Is Nothing) Then
                Me.ProcessMailingSelectionOperationCompleted = AddressOf Me.OnProcessMailingSelectionOperationCompleted
            End If
            Me.InvokeAsync("ProcessMailingSelection", New Object() {pXMLParams}, Me.ProcessMailingSelectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessMailingSelectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessMailingSelectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessMailingSelectionCompleted(Me, New ProcessMailingSelectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMailingSelectionCount", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMailingSelectionCount(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetMailingSelectionCount", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMailingSelectionCountAsync(ByVal pXMLParams As String)
            Me.GetMailingSelectionCountAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMailingSelectionCountAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetMailingSelectionCountOperationCompleted Is Nothing) Then
                Me.GetMailingSelectionCountOperationCompleted = AddressOf Me.OnGetMailingSelectionCountOperationCompleted
            End If
            Me.InvokeAsync("GetMailingSelectionCount", New Object() {pXMLParams}, Me.GetMailingSelectionCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMailingSelectionCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMailingSelectionCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMailingSelectionCountCompleted(Me, New GetMailingSelectionCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetFinderControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFinderControls(ByVal pFinderType As XMLDataFinderTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetFinderControls", New Object() {pFinderType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFinderControlsAsync(ByVal pFinderType As XMLDataFinderTypes, ByVal pXMLParams As String)
            Me.GetFinderControlsAsync(pFinderType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFinderControlsAsync(ByVal pFinderType As XMLDataFinderTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetFinderControlsOperationCompleted Is Nothing) Then
                Me.GetFinderControlsOperationCompleted = AddressOf Me.OnGetFinderControlsOperationCompleted
            End If
            Me.InvokeAsync("GetFinderControls", New Object() {pFinderType, pXMLParams}, Me.GetFinderControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFinderControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFinderControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFinderControlsCompleted(Me, New GetFinderControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetLookupData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLookupData(ByVal pLookupDataType As XMLLookupDataTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetLookupData", New Object() {pLookupDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLookupDataAsync(ByVal pLookupDataType As XMLLookupDataTypes, ByVal pXMLParams As String)
            Me.GetLookupDataAsync(pLookupDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLookupDataAsync(ByVal pLookupDataType As XMLLookupDataTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetLookupDataOperationCompleted Is Nothing) Then
                Me.GetLookupDataOperationCompleted = AddressOf Me.OnGetLookupDataOperationCompleted
            End If
            Me.InvokeAsync("GetLookupData", New Object() {pLookupDataType, pXMLParams}, Me.GetLookupDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLookupDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLookupDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLookupDataCompleted(Me, New GetLookupDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/GetMaintenanceControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaintenanceControls(ByVal pMaintenanceType As XMLMaintenanceControlTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("GetMaintenanceControls", New Object() {pMaintenanceType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaintenanceControlsAsync(ByVal pMaintenanceType As XMLMaintenanceControlTypes, ByVal pXMLParams As String)
            Me.GetMaintenanceControlsAsync(pMaintenanceType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaintenanceControlsAsync(ByVal pMaintenanceType As XMLMaintenanceControlTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.GetMaintenanceControlsOperationCompleted Is Nothing) Then
                Me.GetMaintenanceControlsOperationCompleted = AddressOf Me.OnGetMaintenanceControlsOperationCompleted
            End If
            Me.InvokeAsync("GetMaintenanceControls", New Object() {pMaintenanceType, pXMLParams}, Me.GetMaintenanceControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaintenanceControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaintenanceControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaintenanceControlsCompleted(Me, New GetMaintenanceControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectAppointmentData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectAppointmentData(ByVal pSelectDataType As XMLAppointmentTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectAppointmentData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectAppointmentDataAsync(ByVal pSelectDataType As XMLAppointmentTypes, ByVal pXMLParams As String)
            Me.SelectAppointmentDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectAppointmentDataAsync(ByVal pSelectDataType As XMLAppointmentTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectAppointmentDataOperationCompleted Is Nothing) Then
                Me.SelectAppointmentDataOperationCompleted = AddressOf Me.OnSelectAppointmentDataOperationCompleted
            End If
            Me.InvokeAsync("SelectAppointmentData", New Object() {pSelectDataType, pXMLParams}, Me.SelectAppointmentDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectAppointmentDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectAppointmentDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectAppointmentDataCompleted(Me, New SelectAppointmentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectExternalData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectExternalData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectExternalData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectExternalDataAsync(ByVal pXMLParams As String)
            Me.SelectExternalDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectExternalDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectExternalDataOperationCompleted Is Nothing) Then
                Me.SelectExternalDataOperationCompleted = AddressOf Me.OnSelectExternalDataOperationCompleted
            End If
            Me.InvokeAsync("SelectExternalData", New Object() {pXMLParams}, Me.SelectExternalDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectExternalDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectExternalDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectExternalDataCompleted(Me, New SelectExternalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectFastDataEntryData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectFastDataEntryData(ByVal pSelectDataType As XMLFastDataEntryTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectFastDataEntryData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectFastDataEntryDataAsync(ByVal pSelectDataType As XMLFastDataEntryTypes, ByVal pXMLParams As String)
            Me.SelectFastDataEntryDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectFastDataEntryDataAsync(ByVal pSelectDataType As XMLFastDataEntryTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectFastDataEntryDataOperationCompleted Is Nothing) Then
                Me.SelectFastDataEntryDataOperationCompleted = AddressOf Me.OnSelectFastDataEntryDataOperationCompleted
            End If
            Me.InvokeAsync("SelectFastDataEntryData", New Object() {pSelectDataType, pXMLParams}, Me.SelectFastDataEntryDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectFastDataEntryDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectFastDataEntryDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectFastDataEntryDataCompleted(Me, New SelectFastDataEntryDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/SelectLegacyBequestData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectLegacyBequestData(ByVal pSelectDataType As XMLLegacyBequestDataSelectionTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("SelectLegacyBequestData", New Object() {pSelectDataType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectLegacyBequestDataAsync(ByVal pSelectDataType As XMLLegacyBequestDataSelectionTypes, ByVal pXMLParams As String)
            Me.SelectLegacyBequestDataAsync(pSelectDataType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectLegacyBequestDataAsync(ByVal pSelectDataType As XMLLegacyBequestDataSelectionTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.SelectLegacyBequestDataOperationCompleted Is Nothing) Then
                Me.SelectLegacyBequestDataOperationCompleted = AddressOf Me.OnSelectLegacyBequestDataOperationCompleted
            End If
            Me.InvokeAsync("SelectLegacyBequestData", New Object() {pSelectDataType, pXMLParams}, Me.SelectLegacyBequestDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectLegacyBequestDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectLegacyBequestDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectLegacyBequestDataCompleted(Me, New SelectLegacyBequestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateContactCPDCycle", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactCPDCycle(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateContactCPDCycle", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactCPDCycleAsync(ByVal pXMLParams As String)
            Me.UpdateContactCPDCycleAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactCPDCycleAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateContactCPDCycleOperationCompleted Is Nothing) Then
                Me.UpdateContactCPDCycleOperationCompleted = AddressOf Me.OnUpdateContactCPDCycleOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactCPDCycle", New Object() {pXMLParams}, Me.UpdateContactCPDCycleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactCPDCycleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactCPDCycleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactCPDCycleCompleted(Me, New UpdateContactCPDCycleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateContactCPDPoints", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactCPDPoints(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateContactCPDPoints", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactCPDPointsAsync(ByVal pXMLParams As String)
            Me.UpdateContactCPDPointsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactCPDPointsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateContactCPDPointsOperationCompleted Is Nothing) Then
                Me.UpdateContactCPDPointsOperationCompleted = AddressOf Me.OnUpdateContactCPDPointsOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactCPDPoints", New Object() {pXMLParams}, Me.UpdateContactCPDPointsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactCPDPointsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactCPDPointsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactCPDPointsCompleted(Me, New UpdateContactCPDPointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateExternalData", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateExternalData(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateExternalData", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateExternalDataAsync(ByVal pXMLParams As String)
            Me.UpdateExternalDataAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateExternalDataAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateExternalDataOperationCompleted Is Nothing) Then
                Me.UpdateExternalDataOperationCompleted = AddressOf Me.OnUpdateExternalDataOperationCompleted
            End If
            Me.InvokeAsync("UpdateExternalData", New Object() {pXMLParams}, Me.UpdateExternalDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateExternalDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateExternalDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateExternalDataCompleted(Me, New UpdateExternalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateFastDataEntryUserControl", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFastDataEntryUserControl(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateFastDataEntryUserControl", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFastDataEntryUserControlAsync(ByVal pXMLParams As String)
            Me.UpdateFastDataEntryUserControlAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFastDataEntryUserControlAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateFastDataEntryUserControlOperationCompleted Is Nothing) Then
                Me.UpdateFastDataEntryUserControlOperationCompleted = AddressOf Me.OnUpdateFastDataEntryUserControlOperationCompleted
            End If
            Me.InvokeAsync("UpdateFastDataEntryUserControl", New Object() {pXMLParams}, Me.UpdateFastDataEntryUserControlOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFastDataEntryUserControlOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFastDataEntryUserControlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFastDataEntryUserControlCompleted(Me, New UpdateFastDataEntryUserControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateFastDataEntryPage", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFastDataEntryPage(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateFastDataEntryPage", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFastDataEntryPageAsync(ByVal pXMLParams As String)
            Me.UpdateFastDataEntryPageAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFastDataEntryPageAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateFastDataEntryPageOperationCompleted Is Nothing) Then
                Me.UpdateFastDataEntryPageOperationCompleted = AddressOf Me.OnUpdateFastDataEntryPageOperationCompleted
            End If
            Me.InvokeAsync("UpdateFastDataEntryPage", New Object() {pXMLParams}, Me.UpdateFastDataEntryPageOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFastDataEntryPageOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFastDataEntryPageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFastDataEntryPageCompleted(Me, New UpdateFastDataEntryPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateFastDataEntryPageAccessLevels", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFastDataEntryPageAccessLevels(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateFastDataEntryPageAccessLevels", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFastDataEntryPageAccessLevelsAsync(ByVal pXMLParams As String)
            Me.UpdateFastDataEntryPageAccessLevelsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFastDataEntryPageAccessLevelsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateFastDataEntryPageAccessLevelsOperationCompleted Is Nothing) Then
                Me.UpdateFastDataEntryPageAccessLevelsOperationCompleted = AddressOf Me.OnUpdateFastDataEntryPageAccessLevelsOperationCompleted
            End If
            Me.InvokeAsync("UpdateFastDataEntryPageAccessLevels", New Object() {pXMLParams}, Me.UpdateFastDataEntryPageAccessLevelsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFastDataEntryPageAccessLevelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFastDataEntryPageAccessLevelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFastDataEntryPageAccessLevelsCompleted(Me, New UpdateFastDataEntryPageAccessLevelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateFastDataEntryPageItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFastDataEntryPageItem(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateFastDataEntryPageItem", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFastDataEntryPageItemAsync(ByVal pXMLParams As String)
            Me.UpdateFastDataEntryPageItemAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFastDataEntryPageItemAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateFastDataEntryPageItemOperationCompleted Is Nothing) Then
                Me.UpdateFastDataEntryPageItemOperationCompleted = AddressOf Me.OnUpdateFastDataEntryPageItemOperationCompleted
            End If
            Me.InvokeAsync("UpdateFastDataEntryPageItem", New Object() {pXMLParams}, Me.UpdateFastDataEntryPageItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFastDataEntryPageItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFastDataEntryPageItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFastDataEntryPageItemCompleted(Me, New UpdateFastDataEntryPageItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateFastDataEntryPageItemControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFastDataEntryPageItemControls(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateFastDataEntryPageItemControls", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFastDataEntryPageItemControlsAsync(ByVal pXMLParams As String)
            Me.UpdateFastDataEntryPageItemControlsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFastDataEntryPageItemControlsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateFastDataEntryPageItemControlsOperationCompleted Is Nothing) Then
                Me.UpdateFastDataEntryPageItemControlsOperationCompleted = AddressOf Me.OnUpdateFastDataEntryPageItemControlsOperationCompleted
            End If
            Me.InvokeAsync("UpdateFastDataEntryPageItemControls", New Object() {pXMLParams}, Me.UpdateFastDataEntryPageItemControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFastDataEntryPageItemControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFastDataEntryPageItemControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFastDataEntryPageItemControlsCompleted(Me, New UpdateFastDataEntryPageItemControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateFinderControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFinderControls(ByVal pFinderType As XMLDataFinderTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateFinderControls", New Object() {pFinderType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFinderControlsAsync(ByVal pFinderType As XMLDataFinderTypes, ByVal pXMLParams As String)
            Me.UpdateFinderControlsAsync(pFinderType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFinderControlsAsync(ByVal pFinderType As XMLDataFinderTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateFinderControlsOperationCompleted Is Nothing) Then
                Me.UpdateFinderControlsOperationCompleted = AddressOf Me.OnUpdateFinderControlsOperationCompleted
            End If
            Me.InvokeAsync("UpdateFinderControls", New Object() {pFinderType, pXMLParams}, Me.UpdateFinderControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFinderControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFinderControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFinderControlsCompleted(Me, New UpdateFinderControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateMaintenanceControls", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMaintenanceControls(ByVal pMaintenanceType As XMLMaintenanceControlTypes, ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateMaintenanceControls", New Object() {pMaintenanceType, pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMaintenanceControlsAsync(ByVal pMaintenanceType As XMLMaintenanceControlTypes, ByVal pXMLParams As String)
            Me.UpdateMaintenanceControlsAsync(pMaintenanceType, pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMaintenanceControlsAsync(ByVal pMaintenanceType As XMLMaintenanceControlTypes, ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateMaintenanceControlsOperationCompleted Is Nothing) Then
                Me.UpdateMaintenanceControlsOperationCompleted = AddressOf Me.OnUpdateMaintenanceControlsOperationCompleted
            End If
            Me.InvokeAsync("UpdateMaintenanceControls", New Object() {pMaintenanceType, pXMLParams}, Me.UpdateMaintenanceControlsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMaintenanceControlsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMaintenanceControlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMaintenanceControlsCompleted(Me, New UpdateMaintenanceControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateHistoryItem", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateHistoryItem(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateHistoryItem", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateHistoryItemAsync(ByVal pXMLParams As String)
            Me.UpdateHistoryItemAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateHistoryItemAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateHistoryItemOperationCompleted Is Nothing) Then
                Me.UpdateHistoryItemOperationCompleted = AddressOf Me.OnUpdateHistoryItemOperationCompleted
            End If
            Me.InvokeAsync("UpdateHistoryItem", New Object() {pXMLParams}, Me.UpdateHistoryItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateHistoryItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateHistoryItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateHistoryItemCompleted(Me, New UpdateHistoryItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateLegacy", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLegacy(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateLegacy", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLegacyAsync(ByVal pXMLParams As String)
            Me.UpdateLegacyAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLegacyAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateLegacyOperationCompleted Is Nothing) Then
                Me.UpdateLegacyOperationCompleted = AddressOf Me.OnUpdateLegacyOperationCompleted
            End If
            Me.InvokeAsync("UpdateLegacy", New Object() {pXMLParams}, Me.UpdateLegacyOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLegacyOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLegacyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLegacyCompleted(Me, New UpdateLegacyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateLegacyBequest", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLegacyBequest(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateLegacyBequest", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLegacyBequestAsync(ByVal pXMLParams As String)
            Me.UpdateLegacyBequestAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLegacyBequestAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateLegacyBequestOperationCompleted Is Nothing) Then
                Me.UpdateLegacyBequestOperationCompleted = AddressOf Me.OnUpdateLegacyBequestOperationCompleted
            End If
            Me.InvokeAsync("UpdateLegacyBequest", New Object() {pXMLParams}, Me.UpdateLegacyBequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLegacyBequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLegacyBequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLegacyBequestCompleted(Me, New UpdateLegacyBequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateLegacyBequestForecast", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLegacyBequestForecast(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateLegacyBequestForecast", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLegacyBequestForecastAsync(ByVal pXMLParams As String)
            Me.UpdateLegacyBequestForecastAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLegacyBequestForecastAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateLegacyBequestForecastOperationCompleted Is Nothing) Then
                Me.UpdateLegacyBequestForecastOperationCompleted = AddressOf Me.OnUpdateLegacyBequestForecastOperationCompleted
            End If
            Me.InvokeAsync("UpdateLegacyBequestForecast", New Object() {pXMLParams}, Me.UpdateLegacyBequestForecastOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLegacyBequestForecastOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLegacyBequestForecastCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLegacyBequestForecastCompleted(Me, New UpdateLegacyBequestForecastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateLegacyBequestReceipt", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLegacyBequestReceipt(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateLegacyBequestReceipt", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLegacyBequestReceiptAsync(ByVal pXMLParams As String)
            Me.UpdateLegacyBequestReceiptAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLegacyBequestReceiptAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateLegacyBequestReceiptOperationCompleted Is Nothing) Then
                Me.UpdateLegacyBequestReceiptOperationCompleted = AddressOf Me.OnUpdateLegacyBequestReceiptOperationCompleted
            End If
            Me.InvokeAsync("UpdateLegacyBequestReceipt", New Object() {pXMLParams}, Me.UpdateLegacyBequestReceiptOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLegacyBequestReceiptOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLegacyBequestReceiptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLegacyBequestReceiptCompleted(Me, New UpdateLegacyBequestReceiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateLegacyTaxCertificate", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLegacyTaxCertificate(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateLegacyTaxCertificate", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLegacyTaxCertificateAsync(ByVal pXMLParams As String)
            Me.UpdateLegacyTaxCertificateAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLegacyTaxCertificateAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateLegacyTaxCertificateOperationCompleted Is Nothing) Then
                Me.UpdateLegacyTaxCertificateOperationCompleted = AddressOf Me.OnUpdateLegacyTaxCertificateOperationCompleted
            End If
            Me.InvokeAsync("UpdateLegacyTaxCertificate", New Object() {pXMLParams}, Me.UpdateLegacyTaxCertificateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLegacyTaxCertificateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLegacyTaxCertificateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLegacyTaxCertificateCompleted(Me, New UpdateLegacyTaxCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdateLegacyExpense", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLegacyExpense(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdateLegacyExpense", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLegacyExpenseAsync(ByVal pXMLParams As String)
            Me.UpdateLegacyExpenseAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLegacyExpenseAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdateLegacyExpenseOperationCompleted Is Nothing) Then
                Me.UpdateLegacyExpenseOperationCompleted = AddressOf Me.OnUpdateLegacyExpenseOperationCompleted
            End If
            Me.InvokeAsync("UpdateLegacyExpense", New Object() {pXMLParams}, Me.UpdateLegacyExpenseOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLegacyExpenseOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLegacyExpenseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLegacyExpenseCompleted(Me, New UpdateLegacyExpenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdatePreTaxPledge", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePreTaxPledge(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdatePreTaxPledge", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePreTaxPledgeAsync(ByVal pXMLParams As String)
            Me.UpdatePreTaxPledgeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePreTaxPledgeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdatePreTaxPledgeOperationCompleted Is Nothing) Then
                Me.UpdatePreTaxPledgeOperationCompleted = AddressOf Me.OnUpdatePreTaxPledgeOperationCompleted
            End If
            Me.InvokeAsync("UpdatePreTaxPledge", New Object() {pXMLParams}, Me.UpdatePreTaxPledgeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePreTaxPledgeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePreTaxPledgeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePreTaxPledgeCompleted(Me, New UpdatePreTaxPledgeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/UpdatePostTaxPledge", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePostTaxPledge(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("UpdatePostTaxPledge", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePostTaxPledgeAsync(ByVal pXMLParams As String)
            Me.UpdatePostTaxPledgeAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePostTaxPledgeAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.UpdatePostTaxPledgeOperationCompleted Is Nothing) Then
                Me.UpdatePostTaxPledgeOperationCompleted = AddressOf Me.OnUpdatePostTaxPledgeOperationCompleted
            End If
            Me.InvokeAsync("UpdatePostTaxPledge", New Object() {pXMLParams}, Me.UpdatePostTaxPledgeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePostTaxPledgeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePostTaxPledgeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePostTaxPledgeCompleted(Me, New UpdatePostTaxPledgeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindContactMailingDocuments", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindContactMailingDocuments(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindContactMailingDocuments", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindContactMailingDocumentsAsync(ByVal pXMLParams As String)
            Me.FindContactMailingDocumentsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindContactMailingDocumentsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindContactMailingDocumentsOperationCompleted Is Nothing) Then
                Me.FindContactMailingDocumentsOperationCompleted = AddressOf Me.OnFindContactMailingDocumentsOperationCompleted
            End If
            Me.InvokeAsync("FindContactMailingDocuments", New Object() {pXMLParams}, Me.FindContactMailingDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindContactMailingDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindContactMailingDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindContactMailingDocumentsCompleted(Me, New FindContactMailingDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindContacts", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindContacts(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindContacts", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindContactsAsync(ByVal pXMLParams As String)
            Me.FindContactsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindContactsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindContactsOperationCompleted Is Nothing) Then
                Me.FindContactsOperationCompleted = AddressOf Me.OnFindContactsOperationCompleted
            End If
            Me.InvokeAsync("FindContacts", New Object() {pXMLParams}, Me.FindContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindContactsCompleted(Me, New FindContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindEventPersonnel", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindEventPersonnel(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindEventPersonnel", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindEventPersonnelAsync(ByVal pXMLParams As String)
            Me.FindEventPersonnelAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindEventPersonnelAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindEventPersonnelOperationCompleted Is Nothing) Then
                Me.FindEventPersonnelOperationCompleted = AddressOf Me.OnFindEventPersonnelOperationCompleted
            End If
            Me.InvokeAsync("FindEventPersonnel", New Object() {pXMLParams}, Me.FindEventPersonnelOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindEventPersonnelOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindEventPersonnelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindEventPersonnelCompleted(Me, New FindEventPersonnelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://care.co.uk/webservices/FindEventPersonnelAppointments", RequestNamespace:="http://care.co.uk/webservices/", ResponseNamespace:="http://care.co.uk/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindEventPersonnelAppointments(ByVal pXMLParams As String) As String
            Dim results() As Object = Me.Invoke("FindEventPersonnelAppointments", New Object() {pXMLParams})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindEventPersonnelAppointmentsAsync(ByVal pXMLParams As String)
            Me.FindEventPersonnelAppointmentsAsync(pXMLParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindEventPersonnelAppointmentsAsync(ByVal pXMLParams As String, ByVal userState As Object)
            If (Me.FindEventPersonnelAppointmentsOperationCompleted Is Nothing) Then
                Me.FindEventPersonnelAppointmentsOperationCompleted = AddressOf Me.OnFindEventPersonnelAppointmentsOperationCompleted
            End If
            Me.InvokeAsync("FindEventPersonnelAppointments", New Object() {pXMLParams}, Me.FindEventPersonnelAppointmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindEventPersonnelAppointmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindEventPersonnelAppointmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindEventPersonnelAppointmentsCompleted(Me, New FindEventPersonnelAppointmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum DataImportAction
        
        '''<remarks/>
        diaInit
        
        '''<remarks/>
        diaImportFileRead
        
        '''<remarks/>
        diaReadAttributes
        
        '''<remarks/>
        diaReadImportFileAndAttributes
        
        '''<remarks/>
        diaCheckSingleImportFile
        
        '''<remarks/>
        diaSaveDefinitionFile
        
        '''<remarks/>
        diaValidate
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLActionScheduleTypes
        
        '''<remarks/>
        xastGivenDate
        
        '''<remarks/>
        xastSoonest
        
        '''<remarks/>
        xastToday
        
        '''<remarks/>
        xastTomorrow
        
        '''<remarks/>
        xastThisWeek
        
        '''<remarks/>
        xastNextWeek
        
        '''<remarks/>
        xastNextMonth
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum TaskJobTypes
        
        '''<remarks/>
        tjtNone
        
        '''<remarks/>
        tjtExpirePaymentPlans
        
        '''<remarks/>
        tjtMailsortUpdate
        
        '''<remarks/>
        tjtPriceChange
        
        '''<remarks/>
        tjtRemoveArrears
        
        '''<remarks/>
        tjtDirectDebitRun
        
        '''<remarks/>
        tjtDDClaimFile
        
        '''<remarks/>
        tjtMembershipSuspension
        
        '''<remarks/>
        tjtAutoSOReconciliation
        
        '''<remarks/>
        tjtStatementLoader
        
        '''<remarks/>
        tjtDDMandateFile
        
        '''<remarks/>
        tjtDDCreditFile
        
        '''<remarks/>
        tjtCCClaimFile
        
        '''<remarks/>
        tjtCCClaimReport
        
        '''<remarks/>
        tjtCardSalesFile
        
        '''<remarks/>
        tjtCardSalesReport
        
        '''<remarks/>
        tjtCreditCardRun
        
        '''<remarks/>
        tjtEventTotalsUpdate
        
        '''<remarks/>
        tjtThankYouLetters
        
        '''<remarks/>
        tjtRenewalsAndReminders
        
        '''<remarks/>
        tjtPayingInSlips
        
        '''<remarks/>
        tjtCashBookPosting
        
        '''<remarks/>
        tjtBatchUpdate
        
        '''<remarks/>
        tjtMailingCount
        
        '''<remarks/>
        tjtMailingRun
        
        '''<remarks/>
        tjtGenerateMarketingData
        
        '''<remarks/>
        tjtGenerateAddressGeoRegions
        
        '''<remarks/>
        tjtContactDeDuplication
        
        '''<remarks/>
        tjtBulkMerge
        
        '''<remarks/>
        tjtFutureMembershipChanges
        
        '''<remarks/>
        tjtCreateJournalFiles
        
        '''<remarks/>
        tjtPickingList
        
        '''<remarks/>
        tjtConfirmStockAllocation
        
        '''<remarks/>
        tjtBackOrderAllocation
        
        '''<remarks/>
        tjtDespatchNotes
        
        '''<remarks/>
        tjtInvoiceTransfer
        
        '''<remarks/>
        tjtBatchPurge
        
        '''<remarks/>
        tjtBackOrderPurge
        
        '''<remarks/>
        tjtPickingAndDespatchPurge
        
        '''<remarks/>
        tjtGiftAidClaim
        
        '''<remarks/>
        tjtGiftAidPotentialClaim
        
        '''<remarks/>
        tjtDataImport
        
        '''<remarks/>
        tjtManualSOReconciliation
        
        '''<remarks/>
        tjtAmendmentHistoryView
        
        '''<remarks/>
        tjtSetPostDatedContacts
        
        '''<remarks/>
        tjtGAYEPaymentLoader
        
        '''<remarks/>
        tjtGAYEReconciliation
        
        '''<remarks/>
        tjtBankDataLoad
        
        '''<remarks/>
        tjtCAFProvisionalBatchClaim
        
        '''<remarks/>
        tjtCAFCardSalesReport
        
        '''<remarks/>
        tjtCAFExpectedPaymentsReport
        
        '''<remarks/>
        tjtCAFPaymentLoader
        
        '''<remarks/>
        tjtMailingDocumentProduction
        
        '''<remarks/>
        tjtBankTransactionsReport
        
        '''<remarks/>
        tjtPurchasedProductReport
        
        '''<remarks/>
        tjtBranchDonationsReport
        
        '''<remarks/>
        tjtJuniorMembershipAnalysisReport
        
        '''<remarks/>
        tjtOutstandingBatchesReport
        
        '''<remarks/>
        tjtCAFPaymentReconciliation
        
        '''<remarks/>
        tjtBranchIncomeReport
        
        '''<remarks/>
        tjtConvertManualDirectDebits
        
        '''<remarks/>
        tjtBACSRejections
        
        '''<remarks/>
        tjtBallotPaperProduction
        
        '''<remarks/>
        tjtAssumedVotingRights
        
        '''<remarks/>
        tjtPeriodStatsGenerateData
        
        '''<remarks/>
        tjtPeriodStatsReport
        
        '''<remarks/>
        tjtSelectionTester
        
        '''<remarks/>
        tjtUpdateActionStatus
        
        '''<remarks/>
        tjtPostPayments
        
        '''<remarks/>
        tjtListAllContacts
        
        '''<remarks/>
        tjtPurgePrizeDrawBatches
        
        '''<remarks/>
        tjtPayrollPledgeCancellation
        
        '''<remarks/>
        tjtStandingOrderCancellation
        
        '''<remarks/>
        tjtDirectDebitMailing
        
        '''<remarks/>
        tjtStandingOrderMailing
        
        '''<remarks/>
        tjtSubscriptionMailing
        
        '''<remarks/>
        tjtMemberMailing
        
        '''<remarks/>
        tjtMembCardMailing
        
        '''<remarks/>
        tjtPayerMailing
        
        '''<remarks/>
        tjtSelectionManagerMailing
        
        '''<remarks/>
        tjtCustomerTransfer
        
        '''<remarks/>
        tjtUpdateSearchNames
        
        '''<remarks/>
        tjtStockExport
        
        '''<remarks/>
        tjtGADConfirmation
        
        '''<remarks/>
        tjtGASPotentialClaim
        
        '''<remarks/>
        tjtGASTaxClaim
        
        '''<remarks/>
        tjtPOTransferSuppliers
        
        '''<remarks/>
        tjtUpdatePaymentSchedule
        
        '''<remarks/>
        tjtUpdateGovernmentRegions
        
        '''<remarks/>
        tjtPayrollPledgeMailing
        
        '''<remarks/>
        tjtCreditCardAuthorisationReport
        
        '''<remarks/>
        tjtBulkAddressMerge
        
        '''<remarks/>
        tjtUpdatePaymentPlanProducts
        
        '''<remarks/>
        tjtCheckPaymentPlans
        
        '''<remarks/>
        tjtMemberFulfilment
        
        '''<remarks/>
        tjtDormantContactDeletion
        
        '''<remarks/>
        tjtScheduledReport
        
        '''<remarks/>
        tjtPostTaxPGReconciliation
        
        '''<remarks/>
        tjtPISStatementLoader
        
        '''<remarks/>
        tjtPISReconciliation
        
        '''<remarks/>
        tjtPublicCollectionsFulfilment
        
        '''<remarks/>
        tjtEventBookerMailing
        
        '''<remarks/>
        tjtEventDelegateMailing
        
        '''<remarks/>
        tjtEventPersonnelMailing
        
        '''<remarks/>
        tjtEventSponsorMailing
        
        '''<remarks/>
        tjtDutchElectronicPaymentsLoader
        
        '''<remarks/>
        tjtDutchElectronicPaymentsReconciliation
        
        '''<remarks/>
        tjtBulkGiftAidUpdate
        
        '''<remarks/>
        tjtIrishGiftAidMailing
        
        '''<remarks/>
        tjtIrishGiftAidPotentialClaim
        
        '''<remarks/>
        tjtIrishGiftAidTaxClaim
        
        '''<remarks/>
        tjtBulkContactDeletion
        
        '''<remarks/>
        tjtProcessAddressChanges
        
        '''<remarks/>
        tjtBulkOrganisationMerge
        
        '''<remarks/>
        tjtAllocateDonationToBox
        
        '''<remarks/>
        tjtPrintBoxLabels
        
        '''<remarks/>
        tjtShipDistributionBoxes
        
        '''<remarks/>
        tjtSetBoxesArrived
        
        '''<remarks/>
        tjtChequeProduction
        
        '''<remarks/>
        tjtGenerateRollOfHonour
        
        '''<remarks/>
        tjtCheetahMailMetaData
        
        '''<remarks/>
        tjtCheetahMailEventData
        
        '''<remarks/>
        tjtCheetahMailTotals
        
        '''<remarks/>
        tjtBulkMailerStatistics
        
        '''<remarks/>
        tjtEMailProcessor
        
        '''<remarks/>
        tjtDistributionBoxReports
        
        '''<remarks/>
        tjtEventBlockBooking
        
        '''<remarks/>
        tjtPurchaseOrderGeneration
        
        '''<remarks/>
        tjtPurchaseOrderPrint
        
        '''<remarks/>
        tjtIssueResources
        
        '''<remarks/>
        tjtCancelEvent
        
        '''<remarks/>
        tjtDatabaseUpgrade
        
        '''<remarks/>
        tjtApplyCPDPoints
        
        '''<remarks/>
        tjtSelectMailing
        
        '''<remarks/>
        tjtRegisterSurvey
        
        '''<remarks/>
        tjtCreditStatementGeneration
        
        '''<remarks/>
        tjtCancelProvisionalBookings
        
        '''<remarks/>
        tjtPostcodeValidation
        
        '''<remarks/>
        tjtProcessPurchaseOrderPayments
        
        '''<remarks/>
        tjtUploadBACSMessagingData
        
        '''<remarks/>
        tjtApplyPaymentPlanSurcharges
        
        '''<remarks/>
        tjtRecalculateLoanInterest
        
        '''<remarks/>
        tjtExamAllocateCandidateNumbers
        
        '''<remarks/>
        tjtExamAllocateMarkers
        
        '''<remarks/>
        tjtExamApplyGrading
        
        '''<remarks/>
        tjtExamGenerateExemptionInvoices
        
        '''<remarks/>
        tjtDataUpdates
        
        '''<remarks/>
        tjtExamBookerMailing
        
        '''<remarks/>
        tjtExamCandidateMailing
        
        '''<remarks/>
        tjtExamLoadCsvResults
        
        '''<remarks/>
        tjtUpdateLoanInterestRates
        
        '''<remarks/>
        tjtCheckNonCoreTables
        
        '''<remarks/>
        tjtGenerateTableCreationFiles
        
        '''<remarks/>
        tjtGetReportData
        
        '''<remarks/>
        tjtGetConfigNameData
        
        '''<remarks/>
        tjtBulkUpdateActivity
        
        '''<remarks/>
        tjtRegenerateMessageQueue
        
        '''<remarks/>
        tjtTransferPaymentPlanChanges
        
        '''<remarks/>
        tjtMoveExternalDocuments
        
        '''<remarks/>
        tjtLastJobType
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum FunctionParameterTypes
        
        '''<remarks/>
        fptNone
        
        '''<remarks/>
        fptActionActivationDate
        
        '''<remarks/>
        fptUpdateStandingOrder
        
        '''<remarks/>
        fptPayingInSlipNumber
        
        '''<remarks/>
        fptCLRStatementDate
        
        '''<remarks/>
        fptInvoicePaymentDue
        
        '''<remarks/>
        fptReportNumber
        
        '''<remarks/>
        fptChangePayer
        
        '''<remarks/>
        fptEventProgrammeReport
        
        '''<remarks/>
        fptEventPersonnelReport
        
        '''<remarks/>
        fptEventAttendeeReport
        
        '''<remarks/>
        fptFinancialAdjustment
        
        '''<remarks/>
        fptCloseOrganisationSite
        
        '''<remarks/>
        fptMoveBranch
        
        '''<remarks/>
        fptMoveRegion
        
        '''<remarks/>
        fptUpdateContact
        
        '''<remarks/>
        fptAppealBudgetPeriod
        
        '''<remarks/>
        fptOwnershipGroup
        
        '''<remarks/>
        fptConfirmProvisionalTransaction
        
        '''<remarks/>
        fptCreateGiftAidDeclaration
        
        '''<remarks/>
        fptAuthorisePOPayment
        
        '''<remarks/>
        fptAdvanceRenewalDate
        
        '''<remarks/>
        fptFAPartRefund
        
        '''<remarks/>
        fptAttachmentList
        
        '''<remarks/>
        fptCancReason
        
        '''<remarks/>
        fptGetMailingCode
        
        '''<remarks/>
        fptPayPlanMissedPayments
        
        '''<remarks/>
        fptFAReverseRefundOptions
        
        '''<remarks/>
        fptStockSalesAnalysis
        
        '''<remarks/>
        fptSOReconciliationReport
        
        '''<remarks/>
        fptStockSalesAnalysisDetailed
        
        '''<remarks/>
        fptStockSalesAnalysisSummary
        
        '''<remarks/>
        fptReportDataSelection
        
        '''<remarks/>
        fptEventCancellationFAType
        
        '''<remarks/>
        fptChangeSubscriptionCommunication
        
        '''<remarks/>
        fptUpdatePaymentPlanDetailSource
        
        '''<remarks/>
        fptCMTPriceChange
        
        '''<remarks/>
        fptImportTraderApp
        
        '''<remarks/>
        fptScheduleTask
        
        '''<remarks/>
        fptLMAddressUsage
        
        '''<remarks/>
        fptAddCollectionBoxes
        
        '''<remarks/>
        fptCancellationReasonAndSource
        
        '''<remarks/>
        fptAllocatePISToEvent
        
        '''<remarks/>
        fptAllocatePISToDelegates
        
        '''<remarks/>
        fptDuplicateEvent
        
        '''<remarks/>
        fptMembershipReinstatement
        
        '''<remarks/>
        fptCancellationReasonSourceAndDate
        
        '''<remarks/>
        fptRemoveFutureMembershipType
        
        '''<remarks/>
        fptEditAppointment
        
        '''<remarks/>
        fptLeavePosition
        
        '''<remarks/>
        fptMovePosition
        
        '''<remarks/>
        fptCancelPaymentPlan
        
        '''<remarks/>
        fptPISPrinting
        
        '''<remarks/>
        fptScheduledJobDetails
        
        '''<remarks/>
        fptCMTEntitlementPriceChange
        
        '''<remarks/>
        fptNewMailingCode
        
        '''<remarks/>
        fptReAllocateProductNumber
        
        '''<remarks/>
        fptAddFastDataEntryPage
        
        '''<remarks/>
        fptCopyEventPricingMatrix
        
        '''<remarks/>
        fptEnterCancellationFee
        
        '''<remarks/>
        fptDuplicateSurvey
        
        '''<remarks/>
        fptPaymentPlanDocument
        
        '''<remarks/>
        fptMaxControls
        
        '''<remarks/>
        fptCopySegment
        
        '''<remarks/>
        fptSetChequeStatus
        
        '''<remarks/>
        fptLoadDataUpdates
        
        '''<remarks/>
        fptExamResultEntry
        
        '''<remarks/>
        fptListManagerRandomDataSample
        
        '''<remarks/>
        fptReCalculateLoanInterest
        
        '''<remarks/>
        fptExamChangeCentre
        
        '''<remarks/>
        fptCopyAppeal
        
        '''<remarks/>
        fptCLIBrowser
        
        '''<remarks/>
        fptDuplicateMeeting
        
        '''<remarks/>
        fptShareExamUnit
        
        '''<remarks/>
        fptPOPAnalysis
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLTableMaintenanceMode
        
        '''<remarks/>
        xtmmAmend
        
        '''<remarks/>
        xtmmNew
        
        '''<remarks/>
        xtmmSelect
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLWebDataSelectionTypes
        
        '''<remarks/>
        wstNone
        
        '''<remarks/>
        wstControl
        
        '''<remarks/>
        wstMenus
        
        '''<remarks/>
        wstMenu
        
        '''<remarks/>
        wstMenuItem
        
        '''<remarks/>
        wstPages
        
        '''<remarks/>
        wstPage
        
        '''<remarks/>
        wstPageItem
        
        '''<remarks/>
        wstPageData
        
        '''<remarks/>
        wstExport
        
        '''<remarks/>
        wstImages
        
        '''<remarks/>
        wstImageItem
        
        '''<remarks/>
        wstDocuments
        
        '''<remarks/>
        wstDocumentItem
        
        '''<remarks/>
        wstPageItemControls
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum WebControlTypes
        
        '''<remarks/>
        wctNone
        
        '''<remarks/>
        wctAddMemberDD
        
        '''<remarks/>
        wctAddNetworkContact
        
        '''<remarks/>
        wctAddNewDefaultAddress
        
        '''<remarks/>
        wctAddPaymentPlanDD
        
        '''<remarks/>
        wctAddSubscriptionDD
        
        '''<remarks/>
        wctBookEventCC
        
        '''<remarks/>
        wctFindLocalGroup
        
        '''<remarks/>
        wctMaintainActivityGroup
        
        '''<remarks/>
        wctMaintainNumbers
        
        '''<remarks/>
        wctMakeDonationCC
        
        '''<remarks/>
        wctModifyDD
        
        '''<remarks/>
        wctProductPurchaseCC
        
        '''<remarks/>
        wctRecordActivity
        
        '''<remarks/>
        wctRecordStandardEmail
        
        '''<remarks/>
        wctRenewMembershipCC
        
        '''<remarks/>
        wctRenewSubscriptionCC
        
        '''<remarks/>
        wctShowMyNetwork
        
        '''<remarks/>
        wctSubmitEnquiry
        
        '''<remarks/>
        wctAddMemberCC
        
        '''<remarks/>
        wctLogin
        
        '''<remarks/>
        wctRegister
        
        '''<remarks/>
        wctForgottenPassword
        
        '''<remarks/>
        wctDisplayAddress
        
        '''<remarks/>
        wctMaintainContact
        
        '''<remarks/>
        wctRapidProductPurchase
        
        '''<remarks/>
        wctAddContact
        
        '''<remarks/>
        wctAddRelatedContact
        
        '''<remarks/>
        wctAddCategory
        
        '''<remarks/>
        wctAddCategoryOptions
        
        '''<remarks/>
        wctAddCategoryCheckboxes
        
        '''<remarks/>
        wctAddCategoryValue
        
        '''<remarks/>
        wctAddSuppression
        
        '''<remarks/>
        wctSubmitAll
        
        '''<remarks/>
        wctContactSelection
        
        '''<remarks/>
        wctDisplayContactData
        
        '''<remarks/>
        wctAddCategoryNotes
        
        '''<remarks/>
        wctAddCommunicationNote
        
        '''<remarks/>
        wctAddAction
        
        '''<remarks/>
        wctFindFundraiser
        
        '''<remarks/>
        wctFundraiserPageInformation
        
        '''<remarks/>
        wctAddFundraisingPage
        
        '''<remarks/>
        wctFundraiserDonations
        
        '''<remarks/>
        wctUpdatePassword
        
        '''<remarks/>
        wctAddLink
        
        '''<remarks/>
        wctAddExternalReference
        
        '''<remarks/>
        wctContactSelectionExternalRef
        
        '''<remarks/>
        wctNavigateButton
        
        '''<remarks/>
        wctAddBankAccount
        
        '''<remarks/>
        wctUpdateContact
        
        '''<remarks/>
        wctUpdateAddress
        
        '''<remarks/>
        wctUpdatePhoneNumber
        
        '''<remarks/>
        wctUpdateEmailAddress
        
        '''<remarks/>
        wctSelectProducts
        
        '''<remarks/>
        wctEventSelectionCalendar
        
        '''<remarks/>
        wctSelectBookingOptions
        
        '''<remarks/>
        wctLogout
        
        '''<remarks/>
        wctSelectEvents
        
        '''<remarks/>
        wctViewTransaction
        
        '''<remarks/>
        wctSelectEventDelegates
        
        '''<remarks/>
        wctSelectOptionSessions
        
        '''<remarks/>
        wctProductPurchase
        
        '''<remarks/>
        wctSelectMembershipTypes
        
        '''<remarks/>
        wctEventDelegateActivities
        
        '''<remarks/>
        wctBookEvent
        
        '''<remarks/>
        wctProcessPayment
        
        '''<remarks/>
        wctShowEventBookings
        
        '''<remarks/>
        wctRegisterMember
        
        '''<remarks/>
        wctRegisterCorporateMember
        
        '''<remarks/>
        wctSelectSurveys
        
        '''<remarks/>
        wctSearchOrganisation
        
        '''<remarks/>
        wctAddOrganisation
        
        '''<remarks/>
        wctUpdatePosition
        
        '''<remarks/>
        wctUpdateOrganisation
        
        '''<remarks/>
        wctSearchDirectory
        
        '''<remarks/>
        wctRegisterCombined
        
        '''<remarks/>
        wctViewDirectoryDetails
        
        '''<remarks/>
        wctSurveyResponses
        
        '''<remarks/>
        wctCPDCycle
        
        '''<remarks/>
        wctDownloadSelection
        
        '''<remarks/>
        wctUpdateCpdPoints
        
        '''<remarks/>
        wctUpdateCpdObjectives
        
        '''<remarks/>
        wctRelatedContacts
        
        '''<remarks/>
        wctRelatedOrganisations
        
        '''<remarks/>
        wctDownloadDocument
        
        '''<remarks/>
        wctEmailSelectedContacts
        
        '''<remarks/>
        wctSearchContact
        
        '''<remarks/>
        wctAddPosition
        
        '''<remarks/>
        wctDisplayTransactions
        
        '''<remarks/>
        wctPrintReceipt
        
        '''<remarks/>
        wctDirectoryPreferences
        
        '''<remarks/>
        wctPayerSelection
        
        '''<remarks/>
        wctDeDupOrgForRegistration
        
        '''<remarks/>
        wctPayMultiplePaymentPlans
        
        '''<remarks/>
        wctAddEvent
        
        '''<remarks/>
        wctSelectExams
        
        '''<remarks/>
        wctBookExam
        
        '''<remarks/>
        wctShowExamBookings
        
        '''<remarks/>
        wctShowExamHistory
        
        '''<remarks/>
        wctSetUserOrganisation
        
        '''<remarks/>
        wctAddMemberCS
        
        '''<remarks/>
        wctSelecttPayPlanForDD
        
        '''<remarks/>
        wctConvertPayPlanToDD
        
        '''<remarks/>
        wctAddMemberCI
        
        '''<remarks/>
        wctInvoicePayment
        
        '''<remarks/>
        wctEventDelegateEntry
        
        '''<remarks/>
        wctPrintButton
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum TelemarketingUpdateType
        
        '''<remarks/>
        None
        
        '''<remarks/>
        AbandonCall
        
        '''<remarks/>
        Cancel
        
        '''<remarks/>
        Dial
        
        '''<remarks/>
        SaveOutcome
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLCovenantDataSelectionTypes
        
        '''<remarks/>
        xcdtCovenantGiftAidClaims
        
        '''<remarks/>
        xcdtCovenantClaims
        
        '''<remarks/>
        xcdtCovenantPayments
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLDelegateDataSelectionTypes
        
        '''<remarks/>
        xeddtActivities
        
        '''<remarks/>
        xeddtLinks
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLDirectDebitDataSelectionTypes
        
        '''<remarks/>
        xbdtBACSAmendments
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLDocumentDataSelectionTypes
        
        '''<remarks/>
        xddtDocumentSubjects
        
        '''<remarks/>
        xddtDocumentLinks
        
        '''<remarks/>
        xddtDocumentHistory
        
        '''<remarks/>
        xddtDocumentInformation
        
        '''<remarks/>
        xddtNewDocumentData
        
        '''<remarks/>
        xddtDocumentEMailDetails
        
        '''<remarks/>
        xddtRelatedDocuments
        
        '''<remarks/>
        xddtMeetingLinks
        
        '''<remarks/>
        xddtCommunicationsLogDocClass
        
        '''<remarks/>
        xddtDocumentAutoReplyText
        
        '''<remarks/>
        xddtDocumentActions
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLEventDataSelectionTypes
        
        '''<remarks/>
        xedtEventInformation
        
        '''<remarks/>
        xedtEventSessions
        
        '''<remarks/>
        xedtEventBookingOptions
        
        '''<remarks/>
        xedtEventBookingOptionSessions
        
        '''<remarks/>
        xedtEventAttendees
        
        '''<remarks/>
        xedtEventLoanItems
        
        '''<remarks/>
        xedtEventAuthoriseExpenses
        
        '''<remarks/>
        xedtEventRoomBookings
        
        '''<remarks/>
        xedtEventBookings
        
        '''<remarks/>
        xedtEventCosts
        
        '''<remarks/>
        xedtEventContacts
        
        '''<remarks/>
        xedtEventResults
        
        '''<remarks/>
        xedtEventCandidates
        
        '''<remarks/>
        xedtEVWaitingBookings
        
        '''<remarks/>
        xedtEVWaitingDelegates
        
        '''<remarks/>
        xedtEventSessionTests
        
        '''<remarks/>
        xedtEventSubmissions
        
        '''<remarks/>
        xedtEventAccommodation
        
        '''<remarks/>
        xedtEventResources
        
        '''<remarks/>
        xedtEventVenueBookings
        
        '''<remarks/>
        xedtEventPersonnel
        
        '''<remarks/>
        xedtEventCurrentAttendees
        
        '''<remarks/>
        xedtEventTopics
        
        '''<remarks/>
        xedtEventOrganiser
        
        '''<remarks/>
        xedtEventSources
        
        '''<remarks/>
        xedtEventMailings
        
        '''<remarks/>
        xedtEventSessionNames
        
        '''<remarks/>
        xedtEventFinancialHistory
        
        '''<remarks/>
        xedtEventFinancialLinks
        
        '''<remarks/>
        xedtEventSessionActivities
        
        '''<remarks/>
        xedtEventOwners
        
        '''<remarks/>
        xedtEventPersonnelTasks
        
        '''<remarks/>
        xedtEventHeaderInfo
        
        '''<remarks/>
        xedtEventDelegateIncome
        
        '''<remarks/>
        xedtEventCalculateTotals
        
        '''<remarks/>
        xedtEventCalculateDelegateTotals
        
        '''<remarks/>
        xedtEventBookingDelegates
        
        '''<remarks/>
        xedtEventRoomBookingAllocations
        
        '''<remarks/>
        xedtEventBookingSessions
        
        '''<remarks/>
        xedtEventPIS
        
        '''<remarks/>
        xedtEventDocuments
        
        '''<remarks/>
        xedtEventDashboard
        
        '''<remarks/>
        xedtEventBookingTransactions
        
        '''<remarks/>
        xedtEventDelegateMailings
        
        '''<remarks/>
        xedtEventActions
        
        '''<remarks/>
        xedtActivityFromActivityGroup
        
        '''<remarks/>
        xedtEventCategories
        
        '''<remarks/>
        xedtNone
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLGiftAidDataSelectionTypes
        
        '''<remarks/>
        xgdtGiftAidClaimedPayments
        
        '''<remarks/>
        xgdtGiftAidUnClaimedPayments
        
        '''<remarks/>
        xgdtGiftAidEarliestStartDate
        
        '''<remarks/>
        xgdtGIftAidCancellationInfo
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLFundraisingEventDataSelectionTypes
        
        '''<remarks/>
        xfdtAnalysis
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLFundraisingDataSelectionTypes
        
        '''<remarks/>
        xfdtTargets
        
        '''<remarks/>
        xfdtExpectedAmountHistory
        
        '''<remarks/>
        xfdtRequestStatusHistory
        
        '''<remarks/>
        xfdtPaymentSchedule
        
        '''<remarks/>
        xfdtPaymentHistory
        
        '''<remarks/>
        xfdtFundraisingActions
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLJournalDataSelectionTypes
        
        '''<remarks/>
        xadtJournalInformation
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLMembershipDataSelectionTypes
        
        '''<remarks/>
        xmdtMembershipPaymentPlanDetails
        
        '''<remarks/>
        xmdtMembershipOtherMembers
        
        '''<remarks/>
        xmdtMembershipChanges
        
        '''<remarks/>
        xmdtMembershipMenu
        
        '''<remarks/>
        xmdtMembershipGroups
        
        '''<remarks/>
        xmdtMembershipGroupHistory
        
        '''<remarks/>
        xmdtMembershipSummaryMembers
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLPaymentPlanDataSelectionTypes
        
        '''<remarks/>
        xpdtPaymentPlanPayments
        
        '''<remarks/>
        xpdtPaymentPlanChangePayer
        
        '''<remarks/>
        xpdtPaymentPlanDetails
        
        '''<remarks/>
        xpdtPaymentPlanSubscriptions
        
        '''<remarks/>
        xpdtPaymentPlanMembers
        
        '''<remarks/>
        xpdtPaymentPlanMenu
        
        '''<remarks/>
        xpdtPaymentPlanOutstandingOPS
        
        '''<remarks/>
        xpdtPaymentPlanAmendmentHistory
        
        '''<remarks/>
        xpdtPaymentPlanContactInformation
        
        '''<remarks/>
        xpdtPaymentPlanMemberMenu
        
        '''<remarks/>
        xpdtPaymentPlanPaymentHistDetails
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLPledgeDataSelectionTypes
        
        '''<remarks/>
        xgdtPledgePayments
        
        '''<remarks/>
        xgdtPostPGPledgePayments
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLPurchaseInvoiceDataSelectionTypes
        
        '''<remarks/>
        xodtPurchaseInvoiceDetails
        
        '''<remarks/>
        xodtPurchaseInvoiceInformation
        
        '''<remarks/>
        xodtPurchaseInvoiceChequeInformation
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLPurchaseOrderDataSelectionTypes
        
        '''<remarks/>
        xodtPurchaseOrderDetails
        
        '''<remarks/>
        xodtPurchaseOrderPayments
        
        '''<remarks/>
        xodtPurchaseOrderInformation
        
        '''<remarks/>
        xodtChequeInformation
        
        '''<remarks/>
        xodtUnauthorisedPOPayments
        
        '''<remarks/>
        xodtPurchaseOrderHistory
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLTableDataSelectionTypes
        
        '''<remarks/>
        xtdstReportInfo
        
        '''<remarks/>
        xtdstViewData
        
        '''<remarks/>
        xtdstTableMaintenanceData
        
        '''<remarks/>
        xtdstCriteriaSets
        
        '''<remarks/>
        xtdstCriteriaSetDetails
        
        '''<remarks/>
        xtdstSelectionSetData
        
        '''<remarks/>
        xtdstMeetings
        
        '''<remarks/>
        xtdstAmendmentHistory
        
        '''<remarks/>
        xtdstDataUpdates
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLTransactionDataSelectionTypes
        
        '''<remarks/>
        xtdtTransactionAnalysis
        
        '''<remarks/>
        xtdtFinancialHistoryDetails
        
        '''<remarks/>
        xtdtDespatchStock
        
        '''<remarks/>
        xtdtTransactionDetails
        
        '''<remarks/>
        xtdtBatchDetails
        
        '''<remarks/>
        xtdtFinancialHistoryMenu
        
        '''<remarks/>
        xtdtFinancialHistoryDetailsMenu
        
        '''<remarks/>
        xtdtIncentivesInformation
        
        '''<remarks/>
        xtdtFulFilledContactIncentives
        
        '''<remarks/>
        xtdtUnFulFilledContactIncentives
        
        '''<remarks/>
        xtdtFulFilledPayPlanIncentives
        
        '''<remarks/>
        xtdtUnFulFilledPayPlanIncentives
        
        '''<remarks/>
        xtdtFinancialTransactionMenu
        
        '''<remarks/>
        xtdtSalesTransactionAnalysis
        
        '''<remarks/>
        xtdtDeliveryTransactionAnalysis
        
        '''<remarks/>
        xtdtServiceBookingDetails
        
        '''<remarks/>
        xtdtNone
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum ppAutoPayMethods
        
        '''<remarks/>
        ppAPMSO
        
        '''<remarks/>
        ppAPMDD
        
        '''<remarks/>
        ppAPMCCCA
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum ppType
        
        '''<remarks/>
        pptNull
        
        '''<remarks/>
        pptMember
        
        '''<remarks/>
        pptCovenant
        
        '''<remarks/>
        pptDD
        
        '''<remarks/>
        pptSO
        
        '''<remarks/>
        pptCCCA
        
        '''<remarks/>
        pptOther
        
        '''<remarks/>
        pptLoan
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum FDEControlTypes
        
        '''<remarks/>
        ActivityDisplay
        
        '''<remarks/>
        AddDonationCC
        
        '''<remarks/>
        AddMemberDD
        
        '''<remarks/>
        AddTransactionDetails
        
        '''<remarks/>
        AddressDisplay
        
        '''<remarks/>
        CommunicationsDisplay
        
        '''<remarks/>
        ContactSelection
        
        '''<remarks/>
        DisplayLabel
        
        '''<remarks/>
        GiftAidDisplay
        
        '''<remarks/>
        SuppressionDisplay
        
        '''<remarks/>
        AddRegularDonation
        
        '''<remarks/>
        Telemarketing
        
        '''<remarks/>
        ProductSale
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLPaymentPlanMenuTypes
        
        '''<remarks/>
        xpmtAdvanceRenewalDate
        
        '''<remarks/>
        xpmtCancelCovenant
        
        '''<remarks/>
        xpmtCancelCreditCardAuthority
        
        '''<remarks/>
        xpmtCancelDirectDebit
        
        '''<remarks/>
        xpmtCancelMember
        
        '''<remarks/>
        xpmtCancelPaymentPlan
        
        '''<remarks/>
        xpmtCancelStandingOrder
        
        '''<remarks/>
        xpmtChangePayer
        
        '''<remarks/>
        xpmtFutureCancelCreditCardAuthority
        
        '''<remarks/>
        xpmtFutureCancelDirectDebit
        
        '''<remarks/>
        xpmtFutureCancelPaymentPlan
        
        '''<remarks/>
        xpmtFutureCancelStandingOrder
        
        '''<remarks/>
        xpmtInitialFMTValidation
        
        '''<remarks/>
        xpmtReinstateAutoPayMethod
        
        '''<remarks/>
        xpmtReinstateMembership
        
        '''<remarks/>
        xpmtReinstatePaymenPlan
        
        '''<remarks/>
        xpmtSkipPayment
        
        '''<remarks/>
        xpmtConfirmProvisionalPaymentPlan
        
        '''<remarks/>
        xpmtChangeCancellationReason
        
        '''<remarks/>
        xpmtCancelLoan
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLPaymentPlanUpdateTypes
        
        '''<remarks/>
        xpputAddDetailLine
        
        '''<remarks/>
        xpputRemoveDetailLine
        
        '''<remarks/>
        xpputUpdateDetailLine
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLLoanDataSelectionTypes
        
        '''<remarks/>
        xldstInterestRates
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum ProcessStockMovementType
        
        '''<remarks/>
        psmtAdd
        
        '''<remarks/>
        psmtDeleteAll
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum TraderProcessDataTypes
        
        '''<remarks/>
        tpdtFirstPage
        
        '''<remarks/>
        tpdtNextPage
        
        '''<remarks/>
        tpdtPreviousPage
        
        '''<remarks/>
        tpdtFinished
        
        '''<remarks/>
        tpdtEditTransaction
        
        '''<remarks/>
        tpdtEditAnalysisLine
        
        '''<remarks/>
        tpdtCancelTransaction
        
        '''<remarks/>
        tpdtDeleteAnalysisLine
        
        '''<remarks/>
        tpdtAddMemberSummary
        
        '''<remarks/>
        tpdtAmendMemberSummary
        
        '''<remarks/>
        tpdtDeletePaymentPlanLine
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum TraderMailmergeType
        
        '''<remarks/>
        tmtInvoice
        
        '''<remarks/>
        tmtReceipt
        
        '''<remarks/>
        tmtProvisionalCash
        
        '''<remarks/>
        tmtPaymentPlan
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum UpdateBatchOptions
        
        '''<remarks/>
        buoLockBatch
        
        '''<remarks/>
        buoSetTotals
        
        '''<remarks/>
        buoUnlockBatch
        
        '''<remarks/>
        buoDeleteBatchTransaction
        
        '''<remarks/>
        buoCloseOpenBatch
        
        '''<remarks/>
        buoBatchDetails
        
        '''<remarks/>
        buoDetailCompleted
        
        '''<remarks/>
        buoBatchTransactionNotes
        
        '''<remarks/>
        buoBatchTransactionReference
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLDataFinderTypes
        
        '''<remarks/>
        xdftNone
        
        '''<remarks/>
        xdftContacts
        
        '''<remarks/>
        xdftOrganisations
        
        '''<remarks/>
        xdftEvents
        
        '''<remarks/>
        xdftMembers
        
        '''<remarks/>
        xdftProducts
        
        '''<remarks/>
        xdftDuplicateContacts
        
        '''<remarks/>
        xdftDuplicateOrganisations
        
        '''<remarks/>
        xdftDocuments
        
        '''<remarks/>
        xdftExternalDocuments
        
        '''<remarks/>
        xdftPaymentPlans
        
        '''<remarks/>
        xdftStandingOrders
        
        '''<remarks/>
        xdftDirectDebits
        
        '''<remarks/>
        xdftCreditCardAuthorities
        
        '''<remarks/>
        xdftCovenants
        
        '''<remarks/>
        xdftTransactions
        
        '''<remarks/>
        xdftGiftAidDeclarations
        
        '''<remarks/>
        xdftInvoiceCreditNotes
        
        '''<remarks/>
        xdftLegacies
        
        '''<remarks/>
        xdftPayrollGiving
        
        '''<remarks/>
        xdftPurchaseOrders
        
        '''<remarks/>
        xdftActions
        
        '''<remarks/>
        xdftSelectionSets
        
        '''<remarks/>
        xdftCampaigns
        
        '''<remarks/>
        xdftCampaignAppeals
        
        '''<remarks/>
        xdftCampaignSegments
        
        '''<remarks/>
        xdftCampaignCollections
        
        '''<remarks/>
        xdftPostTaxPayrollGiving
        
        '''<remarks/>
        xdftInternalResources
        
        '''<remarks/>
        xdftBatches
        
        '''<remarks/>
        xdftOpenBatches
        
        '''<remarks/>
        xdftEMailContacts
        
        '''<remarks/>
        xdftEMailOrganisations
        
        '''<remarks/>
        xdftEventBookings
        
        '''<remarks/>
        xdftCommunications
        
        '''<remarks/>
        xdftUniservPhoneBook
        
        '''<remarks/>
        xdftStandardDocuments
        
        '''<remarks/>
        xdftAppealCollections
        
        '''<remarks/>
        xdftContactFundraisingEvents
        
        '''<remarks/>
        xdftContactMailingDocuments
        
        '''<remarks/>
        xdftMailings
        
        '''<remarks/>
        xdftEventPersonnel
        
        '''<remarks/>
        xdftTextSearch
        
        '''<remarks/>
        xdftEventPersonnelAppointments
        
        '''<remarks/>
        xdftFundraisingPaymentScheduleFinder
        
        '''<remarks/>
        xdftQueryByExampleContacts
        
        '''<remarks/>
        xdftQueryByExampleOrganisations
        
        '''<remarks/>
        xdftQueryByExampleEvents
        
        '''<remarks/>
        xdftMeetings
        
        '''<remarks/>
        xdftServiceProducts
        
        '''<remarks/>
        xdftVenues
        
        '''<remarks/>
        xdftDuplicateContactRecords
        
        '''<remarks/>
        xdftPostcodeProximity
        
        '''<remarks/>
        xdftWebProducts
        
        '''<remarks/>
        xdftWebEvents
        
        '''<remarks/>
        xdftWebBookingOptions
        
        '''<remarks/>
        xdftWebMembershipTypes
        
        '''<remarks/>
        xdftWebEventBookings
        
        '''<remarks/>
        xdftWebSurveys
        
        '''<remarks/>
        xdftWebDirectoryEntries
        
        '''<remarks/>
        xdftWebDocuments
        
        '''<remarks/>
        xdftRelatedOrganisations
        
        '''<remarks/>
        xdftWebRelatedContacts
        
        '''<remarks/>
        xdftWebContacts
        
        '''<remarks/>
        xdftExamPersonnel
        
        '''<remarks/>
        xdftWebExams
        
        '''<remarks/>
        xdftWebMemberOrganisations
        
        '''<remarks/>
        xdftWebExamBookings
        
        '''<remarks/>
        xdftWebExamHistory
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLAddressDataSelectionTypes
        
        '''<remarks/>
        xadtAddressInformation
        
        '''<remarks/>
        xadtOrganisationFromAddress
        
        '''<remarks/>
        xadtContactFromAddress
        
        '''<remarks/>
        xadtContactAllFromAddress
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLBankAccountDataSelectionTypes
        
        '''<remarks/>
        xadtBACSAmendments
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLCampaignDataSelectionTypes
        
        '''<remarks/>
        xcadtNone
        
        '''<remarks/>
        xcadtCampaign
        
        '''<remarks/>
        xcadtAppeal
        
        '''<remarks/>
        xcadtSegment
        
        '''<remarks/>
        xcadtCollection
        
        '''<remarks/>
        xcadtCollectionRegions
        
        '''<remarks/>
        xcadtMannedCollectors
        
        '''<remarks/>
        xcadtCollectorShifts
        
        '''<remarks/>
        xcadtMannedCollectionBoxes
        
        '''<remarks/>
        xcadtUnMannedCollectionBoxes
        
        '''<remarks/>
        xcadtContactCollectionBoxes
        
        '''<remarks/>
        xcadtCollectionPIS
        
        '''<remarks/>
        xcadtH2HCollectionPIS
        
        '''<remarks/>
        xcadtCollectionResources
        
        '''<remarks/>
        xcadtCollectionPayments
        
        '''<remarks/>
        xcadtPayingInSlips
        
        '''<remarks/>
        xcadtPoints
        
        '''<remarks/>
        xcadtH2HCollectors
        
        '''<remarks/>
        xcadtSegmentProducts
        
        '''<remarks/>
        xcadtAppealBudgets
        
        '''<remarks/>
        xcadtAppealBudgetDetails
        
        '''<remarks/>
        xcadtTickBoxes
        
        '''<remarks/>
        xcadtCostCentres
        
        '''<remarks/>
        xcadtCampaignIncome
        
        '''<remarks/>
        xcadtAppealIncome
        
        '''<remarks/>
        xcadtSegmentIncome
        
        '''<remarks/>
        xcadtCollectionIncome
        
        '''<remarks/>
        xcadtSumAppeal
        
        '''<remarks/>
        xcadtCollectorsCount
        
        '''<remarks/>
        xcadtSuppliers
        
        '''<remarks/>
        xcadtAppealResources
        
        '''<remarks/>
        xcadtCollectionBoxesForPayment
        
        '''<remarks/>
        xcadtCampaignMailOrCount
        
        '''<remarks/>
        xcadtCosts
        
        '''<remarks/>
        xcadtCampaignRoles
        
        '''<remarks/>
        xcadtAppealActions
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLContactDataSelectionTypes
        
        '''<remarks/>
        xcdtNone
        
        '''<remarks/>
        xcdtContactInformation
        
        '''<remarks/>
        xcdtContactAddresses
        
        '''<remarks/>
        xcdtContactCategories
        
        '''<remarks/>
        xcdtContactSuppressions
        
        '''<remarks/>
        xcdtContactPositions
        
        '''<remarks/>
        xcdtContactProcessedTransactions
        
        '''<remarks/>
        xcdtContactLinksTo
        
        '''<remarks/>
        xcdtContactLinksFrom
        
        '''<remarks/>
        xcdtContactStatusHistory
        
        '''<remarks/>
        xcdtContactEventBookings
        
        '''<remarks/>
        xcdtContactEventDelegates
        
        '''<remarks/>
        xcdtContactEventSessions
        
        '''<remarks/>
        xcdtContactEventRoomBookings
        
        '''<remarks/>
        xcdtContactEventRoomsAllocated
        
        '''<remarks/>
        xcdtContactEventOrganiser
        
        '''<remarks/>
        xcdtContactEventPersonnel
        
        '''<remarks/>
        xcdtContactCommsNumbers
        
        '''<remarks/>
        xcdtContactDocuments
        
        '''<remarks/>
        xcdtContactMailings
        
        '''<remarks/>
        xcdtContactExternalReferences
        
        '''<remarks/>
        xcdtContactNotes
        
        '''<remarks/>
        xcdtContactAddressUsages
        
        '''<remarks/>
        xcdtContactRoles
        
        '''<remarks/>
        xcdtContactJournals
        
        '''<remarks/>
        xcdtContactAddressInformation
        
        '''<remarks/>
        xcdtContactStickyNotes
        
        '''<remarks/>
        xcdtContactMemberships
        
        '''<remarks/>
        xcdtUserContactInformation
        
        '''<remarks/>
        xcdtContactHPLinks
        
        '''<remarks/>
        xcdtContactBankAccounts
        
        '''<remarks/>
        xcdtContactCreditCards
        
        '''<remarks/>
        xcdtContactCreditCardAuthorities
        
        '''<remarks/>
        xcdtContactStandingOrders
        
        '''<remarks/>
        xcdtContactDirectDebits
        
        '''<remarks/>
        xcdtContactUnProcessedTransactions
        
        '''<remarks/>
        xcdtContactBackOrders
        
        '''<remarks/>
        xcdtContactDespatchNotes
        
        '''<remarks/>
        xcdtContactXactionInMemoriamReceived
        
        '''<remarks/>
        xcdtContactXactionInMemoriamDonated
        
        '''<remarks/>
        xcdtContactXactionContributedTo
        
        '''<remarks/>
        xcdtContactXactionPaidInBy
        
        '''<remarks/>
        xcdtContactXactionSentOnBehalfOf
        
        '''<remarks/>
        xcdtContactXactionHandledBy
        
        '''<remarks/>
        xcdtContactCovenants
        
        '''<remarks/>
        xcdtContactPaymentPlans
        
        '''<remarks/>
        xcdtContactPurchaseOrders
        
        '''<remarks/>
        xcdtContactPurchaseInvoices
        
        '''<remarks/>
        xcdtContactSubscriptions
        
        '''<remarks/>
        xcdtContactServiceBookings
        
        '''<remarks/>
        xcdtContactGiftAidDeclarations
        
        '''<remarks/>
        xcdtContactSponsorshipUnClaimed
        
        '''<remarks/>
        xcdtContactSponsorshipClaimed
        
        '''<remarks/>
        xcdtContactHeaderInformation
        
        '''<remarks/>
        xcdtContactMembershipDetails
        
        '''<remarks/>
        xcdtContactPledges
        
        '''<remarks/>
        xcdtContactAddressPositionAndOrganisation
        
        '''<remarks/>
        xcdtContactHeaderCommunications
        
        '''<remarks/>
        xcdtContactHeaderHighProfileCategories
        
        '''<remarks/>
        xcdtContactHeaderDepartmentCategories
        
        '''<remarks/>
        xcdtContactCreditCustomers
        
        '''<remarks/>
        xcdtContactDBANotes
        
        '''<remarks/>
        xcdtContactHighProfileCategories
        
        '''<remarks/>
        xcdtContactDepartmentCategories
        
        '''<remarks/>
        xcdtContactHeaderHighProfileRelationships
        
        '''<remarks/>
        xcdtContactActions
        
        '''<remarks/>
        xcdtContactUserInformation
        
        '''<remarks/>
        xcdtContactPreviousNames
        
        '''<remarks/>
        xcdtContactEMailAddresses
        
        '''<remarks/>
        xcdtContactNotifications
        
        '''<remarks/>
        xcdtContactCustomFormData
        
        '''<remarks/>
        xcdtContactPostPGPledges
        
        '''<remarks/>
        xcdtContactCancelledProvisionalTrans
        
        '''<remarks/>
        xcdtContactDepartmentHistory
        
        '''<remarks/>
        xcdtContactMannedCollections
        
        '''<remarks/>
        xcdtContactUnMannedCollections
        
        '''<remarks/>
        xcdtContactH2HCollections
        
        '''<remarks/>
        xcdtContactCollectionPayments
        
        '''<remarks/>
        xcdtContactAppointments
        
        '''<remarks/>
        xcdtContactOutstandingInvoices
        
        '''<remarks/>
        xcdtContactCashInvoices
        
        '''<remarks/>
        xcdtContactPositionActivities
        
        '''<remarks/>
        xcdtContactSourceFromLastMailing
        
        '''<remarks/>
        xcdtContactSalesLedgerItems
        
        '''<remarks/>
        xcdtContactPhoneBookData
        
        '''<remarks/>
        xcdtContactScores
        
        '''<remarks/>
        xcdtContactPerformances
        
        '''<remarks/>
        xcdtContactCommunicationUsages
        
        '''<remarks/>
        xcdtContactPictureDocuments
        
        '''<remarks/>
        xcdtContactCommsAddresses
        
        '''<remarks/>
        xcdtContactFundraising
        
        '''<remarks/>
        xcdtContactAppropriateCertificates
        
        '''<remarks/>
        xcdtContactFundraisingEvents
        
        '''<remarks/>
        xcdtContactDashboard
        
        '''<remarks/>
        xcdtContactCPD
        
        '''<remarks/>
        xcdtContactCPDDetails
        
        '''<remarks/>
        xcdtContactCPDPoints
        
        '''<remarks/>
        xcdtContactCPDPointsWithoutCycle
        
        '''<remarks/>
        xcdtContactCPDCycles
        
        '''<remarks/>
        xcdtContactLegacy
        
        '''<remarks/>
        xcdtContactLegacyBequests
        
        '''<remarks/>
        xcdtContactLegacyAssets
        
        '''<remarks/>
        xcdtContactLegacyLinks
        
        '''<remarks/>
        xcdtContactLegacyTaxCertificates
        
        '''<remarks/>
        xcdtContactLegacyExpenses
        
        '''<remarks/>
        xcdtContactLegacyActions
        
        '''<remarks/>
        xcdtContactRegisteredUsers
        
        '''<remarks/>
        xcdtContactEmailingsLinks
        
        '''<remarks/>
        xcdtContactCommsInformation
        
        '''<remarks/>
        xcdtContactPositionLinks
        
        '''<remarks/>
        xcdtContactAlerts
        
        '''<remarks/>
        xcdtContactNetwork
        
        '''<remarks/>
        xcdtContactCommunicationHistory
        
        '''<remarks/>
        xcdtContactAddressAndUsages
        
        '''<remarks/>
        xcdtGeneralMailingSelectionSets
        
        '''<remarks/>
        xcdtContactMeetings
        
        '''<remarks/>
        xcdtEntityAlerts
        
        '''<remarks/>
        xcdtContactSalesTransactions
        
        '''<remarks/>
        xcdtContactDeliveryTransactions
        
        '''<remarks/>
        xcdtContactCPDObjectives
        
        '''<remarks/>
        xcdtContactCPDObjectivesEdit
        
        '''<remarks/>
        xcdtContactSurveys
        
        '''<remarks/>
        xcdtContactSurveyResponses
        
        '''<remarks/>
        xcdtContactSalesLedgerReceipts
        
        '''<remarks/>
        xcdtContactEventBookingDelegates
        
        '''<remarks/>
        xcdtContactAppointmentDetails
        
        '''<remarks/>
        xcdtContactLoans
        
        '''<remarks/>
        xcdtDirectoryUsage
        
        '''<remarks/>
        xcdtContactExamSummary
        
        '''<remarks/>
        xcdtContactExamSummaryItems
        
        '''<remarks/>
        xcdtContactExamSummaryList
        
        '''<remarks/>
        xcdtContactExamDetails
        
        '''<remarks/>
        xcdtContactExamDetailItems
        
        '''<remarks/>
        xcdtContactExamDetailList
        
        '''<remarks/>
        xcdtContactExamExemptions
        
        '''<remarks/>
        xcdtContactAddressesAndPositions
        
        '''<remarks/>
        xcdtDuplicateOrganisationsForRegistration
        
        '''<remarks/>
        xcdtContactAddressesWithUsages
        
        '''<remarks/>
        xcdtContactCommsNumbersWithUsages
        
        '''<remarks/>
        xcdtContactPaymentPlanPayments
        
        '''<remarks/>
        xcdtContactAmendments
        
        '''<remarks/>
        xcdtContactAmendmentDetails
        
        '''<remarks/>
        xcdtContactExamCertificates
        
        '''<remarks/>
        xcdtContactExamCertificateItems
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLDocumentHistoryActions
        
        '''<remarks/>
        xdhaCreated
        
        '''<remarks/>
        xdhaViewed
        
        '''<remarks/>
        xdhaPrinted
        
        '''<remarks/>
        xdhaEMailed
        
        '''<remarks/>
        xdhaImported
        
        '''<remarks/>
        xdhaExported
        
        '''<remarks/>
        xdhaEdited
        
        '''<remarks/>
        xdhaUpdated
        
        '''<remarks/>
        xdhaDistributed
        
        '''<remarks/>
        xdhaTransferred
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLActionDataSelectionTypes
        
        '''<remarks/>
        xadtActionSubjects
        
        '''<remarks/>
        xadtActionLinks
        
        '''<remarks/>
        xadtActionInformation
        
        '''<remarks/>
        xadtActionOutline
        
        '''<remarks/>
        xadtPriorActions
        
        '''<remarks/>
        xadtActionLinkEmailAddresses
        
        '''<remarks/>
        xadtMeetingActions
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLFinancialProcessingDataSelectionTypes
        
        '''<remarks/>
        xbdstBatchProcessing
        
        '''<remarks/>
        xbdstPickingList
        
        '''<remarks/>
        xbdstBatchInformation
        
        '''<remarks/>
        xbdstDespatchData
        
        '''<remarks/>
        xbdstSelectAwaitListConfirmation
        
        '''<remarks/>
        xbdstPackedProductDataSheet
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLGetCountTypes
        
        '''<remarks/>
        xgctBPDistributionAffiliates
        
        '''<remarks/>
        xgctBPPostBatch
        
        '''<remarks/>
        xgctBPPayingInSlip
        
        '''<remarks/>
        xgctMDPPrintersMT
        
        '''<remarks/>
        xgctMDPPrintersMTD
        
        '''<remarks/>
        xgctMDPMultipleMTD
        
        '''<remarks/>
        xgctConfirmedTrans
        
        '''<remarks/>
        xgctProductNumbers
        
        '''<remarks/>
        xgctOrderPaymentHistory
        
        '''<remarks/>
        xgctMembershipPrices
        
        '''<remarks/>
        xgctPackedProductsProduct
        
        '''<remarks/>
        xgctPackedProductsLinkProduct
        
        '''<remarks/>
        xgctStockMovementsProduct
        
        '''<remarks/>
        xgctMailingTemplateDocuments
        
        '''<remarks/>
        xgctTransactionTypes
        
        '''<remarks/>
        xgctTabPrefixesContactGroups
        
        '''<remarks/>
        xgctTabPrefixesOrganisationGroups
        
        '''<remarks/>
        xgctTabPrefixesEventGroups
        
        '''<remarks/>
        xgctCurrencyRates
        
        '''<remarks/>
        xgctEventExtraFeeMultipliers
        
        '''<remarks/>
        xgctMembershipGroups
        
        '''<remarks/>
        xgctPrizeDraws
        
        '''<remarks/>
        xgctPrizeDrawAppeals
        
        '''<remarks/>
        xgctProductWarehouses
        
        '''<remarks/>
        xgctCancellationReasons
        
        '''<remarks/>
        xgctPrincipalUsers
        
        '''<remarks/>
        xgctActivityGroups
        
        '''<remarks/>
        xgctGeographicalRegionTypes
        
        '''<remarks/>
        xgctGeographicalRegions
        
        '''<remarks/>
        xgctBankAccountDepartments
        
        '''<remarks/>
        xgctFixedCycles
        
        '''<remarks/>
        xgctServiceControlRestrictions
        
        '''<remarks/>
        xgctCriteriaSet
        
        '''<remarks/>
        xgctCriteriaSetDetails
        
        '''<remarks/>
        xgctSelectionSet
        
        '''<remarks/>
        xgctUsers
        
        '''<remarks/>
        xgctOrders
        
        '''<remarks/>
        xgctOrderPaymentSchedule
        
        '''<remarks/>
        xgctSystemModuleUsers
        
        '''<remarks/>
        xgctModuleLicences
        
        '''<remarks/>
        xgctSelectedContacts
        
        '''<remarks/>
        xgctBankersOrders
        
        '''<remarks/>
        xgctBankAccountCompanies
        
        '''<remarks/>
        xgctCommLogSubjects
        
        '''<remarks/>
        xgctSelectionSteps
        
        '''<remarks/>
        xgctEventResources
        
        '''<remarks/>
        xgctStatementGeneration
        
        '''<remarks/>
        xgctMailingHistoryDocuments
        
        '''<remarks/>
        xgctMembershipTypeCategories
        
        '''<remarks/>
        xgctPrimaryKeys
        
        '''<remarks/>
        xgctCMTExcessPayments
        
        '''<remarks/>
        xgctMembershipEntitlements
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum LicenseCheckTypes
        
        '''<remarks/>
        None
        
        '''<remarks/>
        StartModule
        
        '''<remarks/>
        EndModule
        
        '''<remarks/>
        CheckModule
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLLookupDataTypes
        
        '''<remarks/>
        xldtNone
        
        '''<remarks/>
        xldtActivities
        
        '''<remarks/>
        xldtActivityValues
        
        '''<remarks/>
        xldtCancellationReasons
        
        '''<remarks/>
        xldtCountries
        
        '''<remarks/>
        xldtDevices
        
        '''<remarks/>
        xldtEventSubjects
        
        '''<remarks/>
        xldtEventVenues
        
        '''<remarks/>
        xldtRoles
        
        '''<remarks/>
        xldtTitles
        
        '''<remarks/>
        xldtSources
        
        '''<remarks/>
        xldtStatuses
        
        '''<remarks/>
        xldtOwnershipGroups
        
        '''<remarks/>
        xldtSuppressions
        
        '''<remarks/>
        xldtHonorifics
        
        '''<remarks/>
        xldtAddressUsages
        
        '''<remarks/>
        xldtRelationships
        
        '''<remarks/>
        xldtDiallingCodes
        
        '''<remarks/>
        xldtSTDCodes
        
        '''<remarks/>
        xldtDataSources
        
        '''<remarks/>
        xldtDepartments
        
        '''<remarks/>
        xldtUsers
        
        '''<remarks/>
        xldtBranches
        
        '''<remarks/>
        xldtTopics
        
        '''<remarks/>
        xldtSubTopics
        
        '''<remarks/>
        xldtDocumentClasses
        
        '''<remarks/>
        xldtDocumentTypes
        
        '''<remarks/>
        xldtMembershipTypes
        
        '''<remarks/>
        xldtSalesGroups
        
        '''<remarks/>
        xldtRates
        
        '''<remarks/>
        xldtBankAccounts
        
        '''<remarks/>
        xldtBACSAdviceReasons
        
        '''<remarks/>
        xldtBatchTypes
        
        '''<remarks/>
        xldtPaymentMethods
        
        '''<remarks/>
        xldtTransactionTypes
        
        '''<remarks/>
        xldtCovenantStatuses
        
        '''<remarks/>
        xldtCreditCardTypes
        
        '''<remarks/>
        xldtCompanies
        
        '''<remarks/>
        xldtLegacyStatuses
        
        '''<remarks/>
        xldtPurchaseOrderTypes
        
        '''<remarks/>
        xldtPaymentPlanTypes
        
        '''<remarks/>
        xldtDeclarationTypes
        
        '''<remarks/>
        xldtDeclarationMethods
        
        '''<remarks/>
        xldtBACSAmendmentTypes
        
        '''<remarks/>
        xldtGAYEAgencies
        
        '''<remarks/>
        xldtSecondaryGroups
        
        '''<remarks/>
        xldtProductCategories
        
        '''<remarks/>
        xldtDistributionCodes
        
        '''<remarks/>
        xldtMailings
        
        '''<remarks/>
        xldtCreditCategories
        
        '''<remarks/>
        xldtWarehouses
        
        '''<remarks/>
        xldtProductWarehouses
        
        '''<remarks/>
        xldtEventSkillLevels
        
        '''<remarks/>
        xldtEventOrganisers
        
        '''<remarks/>
        xldtEventStatuses
        
        '''<remarks/>
        xldtDepartmentActivities
        
        '''<remarks/>
        xldtDepartmentActivityValues
        
        '''<remarks/>
        xldtContactGroups
        
        '''<remarks/>
        xldtOrganisationGroups
        
        '''<remarks/>
        xldtContactAndOrganisationGroups
        
        '''<remarks/>
        xldtGroupAttributes
        
        '''<remarks/>
        xldtDocumentDirections
        
        '''<remarks/>
        xldtDocumentLinkTypes
        
        '''<remarks/>
        xldtSexes
        
        '''<remarks/>
        xldtActionPriorities
        
        '''<remarks/>
        xldtActionStatuses
        
        '''<remarks/>
        xldtStandardDocuments
        
        '''<remarks/>
        xldtMailMergeHeaders
        
        '''<remarks/>
        xldtPositionFunctions
        
        '''<remarks/>
        xldtPositionSeniorities
        
        '''<remarks/>
        xldtActionLinkTypes
        
        '''<remarks/>
        xldtEventGroups
        
        '''<remarks/>
        xldtActionTemplates
        
        '''<remarks/>
        xldtDocumentStyles
        
        '''<remarks/>
        xldtPackages
        
        '''<remarks/>
        xldtConfigs
        
        '''<remarks/>
        xldtPostPoints
        
        '''<remarks/>
        xldtPostPointRecipients
        
        '''<remarks/>
        xldtExplorerLinks
        
        '''<remarks/>
        xldtUserMenuAccess
        
        '''<remarks/>
        xldtSelectionPages
        
        '''<remarks/>
        xldtListManagerViews
        
        '''<remarks/>
        xldtCriteriaSets
        
        '''<remarks/>
        xldtTraderApplications
        
        '''<remarks/>
        xldtPaymentFrequencies
        
        '''<remarks/>
        xldtReasonsForDespatch
        
        '''<remarks/>
        xldtDespatchMethods
        
        '''<remarks/>
        xldtRoomTypes
        
        '''<remarks/>
        xldtProducts
        
        '''<remarks/>
        xldtStopCodes
        
        '''<remarks/>
        xldtActivityGroups
        
        '''<remarks/>
        xldtRelationshipGroups
        
        '''<remarks/>
        xldtActivityDataSheet
        
        '''<remarks/>
        xldtRelationshipDataSheet
        
        '''<remarks/>
        xldtAppealBusinessTypes
        
        '''<remarks/>
        xldtCampaignPages
        
        '''<remarks/>
        xldtCampaignStatuses
        
        '''<remarks/>
        xldtMailingTypes
        
        '''<remarks/>
        xldtExpenditureGroups
        
        '''<remarks/>
        xldtAppealCostCentres
        
        '''<remarks/>
        xldtSegmentTypes
        
        '''<remarks/>
        xldtOutputGroups
        
        '''<remarks/>
        xldtScores
        
        '''<remarks/>
        xldtIncentiveSchemes
        
        '''<remarks/>
        xldtSegmentMediaTypes
        
        '''<remarks/>
        xldtSegmentMediaNames
        
        '''<remarks/>
        xldtSegmentGeographics
        
        '''<remarks/>
        xldtSegmentAdPagePositions
        
        '''<remarks/>
        xldtSegmentAdPublPositions
        
        '''<remarks/>
        xldtSegmentAdSizes
        
        '''<remarks/>
        xldtSegmentAdImages
        
        '''<remarks/>
        xldtSegmentAdColours
        
        '''<remarks/>
        xldtSegmentLetterSizes
        
        '''<remarks/>
        xldtSegmentPhoneTypes
        
        '''<remarks/>
        xldtSegmentCreatives
        
        '''<remarks/>
        xldtMailJointsMethods
        
        '''<remarks/>
        xldtReports
        
        '''<remarks/>
        xldtVATCategories
        
        '''<remarks/>
        xldtControlValues
        
        '''<remarks/>
        xldtLookupGroups
        
        '''<remarks/>
        xldtEventSelectionPages
        
        '''<remarks/>
        xldtEventClasses
        
        '''<remarks/>
        xldtEventSessionTypes
        
        '''<remarks/>
        xldtSundryCostTypes
        
        '''<remarks/>
        xldtQPFormTypes
        
        '''<remarks/>
        xldtCPDCategories
        
        '''<remarks/>
        xldtEventWaitingListControlMethods
        
        '''<remarks/>
        xldtEventResourceTypes
        
        '''<remarks/>
        xldtEventResourceCopyToTypes
        
        '''<remarks/>
        xldtEventResourceDespatchToTypes
        
        '''<remarks/>
        xldtEventResourceIssueBasisTypes
        
        '''<remarks/>
        xldtEventSubmissionResultTypes
        
        '''<remarks/>
        xldtEventGradeDataTypes
        
        '''<remarks/>
        xldtCPDApprovalStatuses
        
        '''<remarks/>
        xldtGeographicalRegions
        
        '''<remarks/>
        xldtAppealTypes
        
        '''<remarks/>
        xldtCopyCriteria
        
        '''<remarks/>
        xldtPISNumbers
        
        '''<remarks/>
        xldtGenericLookup
        
        '''<remarks/>
        xldtStatusTransitions
        
        '''<remarks/>
        xldtRouteTypes
        
        '''<remarks/>
        xldtCollectorStatuses
        
        '''<remarks/>
        xldtCollectionBoxReferences
        
        '''<remarks/>
        xldtReadyForConfirmations
        
        '''<remarks/>
        xldtReadyForAcknowledgements
        
        '''<remarks/>
        xldtCollectionPointTypes
        
        '''<remarks/>
        xldtSalesContacts
        
        '''<remarks/>
        xldtPersonnelContacts
        
        '''<remarks/>
        xldtEventBookingStatuses
        
        '''<remarks/>
        xldtAccomodationBookingStatuses
        
        '''<remarks/>
        xldtEventPersonnelTasks
        
        '''<remarks/>
        xldtExternalResourceTypes
        
        '''<remarks/>
        xldtCollectionTypes
        
        '''<remarks/>
        xldtBanks
        
        '''<remarks/>
        xldtContactAccounts
        
        '''<remarks/>
        xldtCreditCustomers
        
        '''<remarks/>
        xldtStandardLetterBreaks
        
        '''<remarks/>
        xldtVATRates
        
        '''<remarks/>
        xldtQuantityBreaks
        
        '''<remarks/>
        xldtSpecialPrices
        
        '''<remarks/>
        xldtCurrencyExchangeRates
        
        '''<remarks/>
        xldtInvoiceDisputeCodes
        
        '''<remarks/>
        xldtPrincipalUsers
        
        '''<remarks/>
        xldtWebSelectionPages
        
        '''<remarks/>
        xldtWebPageUserControls
        
        '''<remarks/>
        xldtWebPageItemTypes
        
        '''<remarks/>
        xldtWebSites
        
        '''<remarks/>
        xldtWebMenuStyles
        
        '''<remarks/>
        xldtWebPageItemStyles
        
        '''<remarks/>
        xldtBankNames
        
        '''<remarks/>
        xldtMandateTypes
        
        '''<remarks/>
        xldtBankAccountClaimDays
        
        '''<remarks/>
        xldtRenewalChangeReasons
        
        '''<remarks/>
        xldtCommunicationUsages
        
        '''<remarks/>
        xldtMembershipPrices
        
        '''<remarks/>
        xldtMembershipEntitlements
        
        '''<remarks/>
        xldtSurnamePrefixes
        
        '''<remarks/>
        xldtBatchCategories
        
        '''<remarks/>
        xldtCurrencyCodes
        
        '''<remarks/>
        xldtBatchAnalysisCodes
        
        '''<remarks/>
        xldtStandardPositions
        
        '''<remarks/>
        xldtFundraisingStages
        
        '''<remarks/>
        xldtFundraisingStatuses
        
        '''<remarks/>
        xldtFundraisingTypes
        
        '''<remarks/>
        xldtBlockBookings
        
        '''<remarks/>
        xldtCollectionPISNumbers
        
        '''<remarks/>
        xldtTopicGroups
        
        '''<remarks/>
        xldtTopicDataSheet
        
        '''<remarks/>
        xldtActionerSettings
        
        '''<remarks/>
        xldtManagerSettings
        
        '''<remarks/>
        xldtStandardMailings
        
        '''<remarks/>
        xldtMailTypes
        
        '''<remarks/>
        xldtMailsortServices
        
        '''<remarks/>
        xldtJobProcessors
        
        '''<remarks/>
        xldtJobNotifyStatuses
        
        '''<remarks/>
        xldtJobFrequencies
        
        '''<remarks/>
        xldtLoginRequiredTypes
        
        '''<remarks/>
        xldtXmlDataItems
        
        '''<remarks/>
        xldtCampaigns
        
        '''<remarks/>
        xldtAppeals
        
        '''<remarks/>
        xldtSegments
        
        '''<remarks/>
        xldtAllViews
        
        '''<remarks/>
        xldtMembershipTypeTransitions
        
        '''<remarks/>
        xldtPurchaseOrderLineItems
        
        '''<remarks/>
        xldtCPDCycleTypes
        
        '''<remarks/>
        xldtCPDPeriods
        
        '''<remarks/>
        xldtCPDCategoryTypes
        
        '''<remarks/>
        xldtVoucherAgencies
        
        '''<remarks/>
        xldtSuppressionDataSheet
        
        '''<remarks/>
        xldtTransactionOrigins
        
        '''<remarks/>
        xldtJobProcessorPrinters
        
        '''<remarks/>
        xldtNextMailingNumber
        
        '''<remarks/>
        xldtLegacyBequestTypes
        
        '''<remarks/>
        xldtLegacyBequestSubTypes
        
        '''<remarks/>
        xldtLegacyBequestStatuses
        
        '''<remarks/>
        xldtLegacyDisputeReasons
        
        '''<remarks/>
        xldtLegacyIncomeStages
        
        '''<remarks/>
        xldtLegacyReviewReasons
        
        '''<remarks/>
        xldtTaxRates
        
        '''<remarks/>
        xldtLegacyBequests
        
        '''<remarks/>
        xldtProductNumbers
        
        '''<remarks/>
        xldtCampaignCostTypes
        
        '''<remarks/>
        xldtCampaignRoles
        
        '''<remarks/>
        xldtDistBoxesReportDates
        
        '''<remarks/>
        xldtDistributionAffiliates
        
        '''<remarks/>
        xldtFastDataEntryUserControls
        
        '''<remarks/>
        xldtEventPricingMatrices
        
        '''<remarks/>
        xldtDistributionBoxes
        
        '''<remarks/>
        xldtFundraisingPaymentTypes
        
        '''<remarks/>
        xldtFundraisingIncomePaymentTypes
        
        '''<remarks/>
        xldtDocumentDefaults
        
        '''<remarks/>
        xldtBankSuspenseAccounts
        
        '''<remarks/>
        xldtCollectionRunAudits
        
        '''<remarks/>
        xldtPrizeDraws
        
        '''<remarks/>
        xldtBatches
        
        '''<remarks/>
        xldtBankStatements
        
        '''<remarks/>
        xldtPISBankStatements
        
        '''<remarks/>
        xldtMaintenanceTables
        
        '''<remarks/>
        xldtPickingListWarehouses
        
        '''<remarks/>
        xldtDeclarationTaxClaims
        
        '''<remarks/>
        xldtGaSponsorshipTaxClaims
        
        '''<remarks/>
        xldtProductCosts
        
        '''<remarks/>
        xldtStockMovementReasons
        
        '''<remarks/>
        xldtGaCertificateTaxClaims
        
        '''<remarks/>
        xldtCriteriaSetDetails
        
        '''<remarks/>
        xldtUsageCodes
        
        '''<remarks/>
        xldtAnnual
        
        '''<remarks/>
        xldtAccessLevels
        
        '''<remarks/>
        xldtAddConditions
        
        '''<remarks/>
        xldtApplyIncentiveFreePeriods
        
        '''<remarks/>
        xldtAppointmentTypes
        
        '''<remarks/>
        xldtArrivalDays
        
        '''<remarks/>
        xldtAutoPayClaimDateMethods
        
        '''<remarks/>
        xldtAutomaticWildcards
        
        '''<remarks/>
        xldtBacsSources
        
        '''<remarks/>
        xldtCO
        
        '''<remarks/>
        xldtChargeIndividualMembers
        
        '''<remarks/>
        xldtCharityTaxStatuses
        
        '''<remarks/>
        xldtClaimFileFormats
        
        '''<remarks/>
        xldtClaimFormats
        
        '''<remarks/>
        xldtContactSelectionTypes
        
        '''<remarks/>
        xldtCopyTo
        
        '''<remarks/>
        xldtDataTypes
        
        '''<remarks/>
        xldtDepartureDays
        
        '''<remarks/>
        xldtDepreciationIntervalUnits
        
        '''<remarks/>
        xldtDepreciationStartUnits
        
        '''<remarks/>
        xldtDespatchTo
        
        '''<remarks/>
        xldtDirections
        
        '''<remarks/>
        xldtDocumentSources
        
        '''<remarks/>
        xldtEditAccessLevels
        
        '''<remarks/>
        xldtFeeMultiplierTypes
        
        '''<remarks/>
        xldtFinderTypes
        
        '''<remarks/>
        xldtForWhom
        
        '''<remarks/>
        xldtHonorificTypes
        
        '''<remarks/>
        xldtIE
        
        '''<remarks/>
        xldtIncentiveTypes
        
        '''<remarks/>
        xldtIssueBasis
        
        '''<remarks/>
        xldtMainDataTypes
        
        '''<remarks/>
        xldtMemberOrPayers
        
        '''<remarks/>
        xldtMembershipLevels
        
        '''<remarks/>
        xldtNameItemTypes
        
        '''<remarks/>
        xldtOperation1Logs
        
        '''<remarks/>
        xldtOperation2Logs
        
        '''<remarks/>
        xldtOperation3Logs
        
        '''<remarks/>
        xldtParagraphAccessLevels
        
        '''<remarks/>
        xldtPayerRequired
        
        '''<remarks/>
        xldtPeriods
        
        '''<remarks/>
        xldtProRateChargeMethods
        
        '''<remarks/>
        xldtRateToUse
        
        '''<remarks/>
        xldtRecipient1
        
        '''<remarks/>
        xldtRecipient2
        
        '''<remarks/>
        xldtRecipient3
        
        '''<remarks/>
        xldtSex
        
        '''<remarks/>
        xldtStartDays
        
        '''<remarks/>
        xldtStorageTypes
        
        '''<remarks/>
        xldtSubsequentTriggers
        
        '''<remarks/>
        xldtSubsidiaryDataTypes
        
        '''<remarks/>
        xldtTermsFrom
        
        '''<remarks/>
        xldtTermsPeriods
        
        '''<remarks/>
        xldtTransactionSigns
        
        '''<remarks/>
        xldtNominalAccounts
        
        '''<remarks/>
        xldtNominalAccountSuffixes
        
        '''<remarks/>
        xldtSearchAreas
        
        '''<remarks/>
        xldtSelectionSets
        
        '''<remarks/>
        xldtSelectionControls
        
        '''<remarks/>
        xldtMailingSelections
        
        '''<remarks/>
        xldtRateNominalAccounts
        
        '''<remarks/>
        xldtMailsortCode
        
        '''<remarks/>
        xldtConfigGroups
        
        '''<remarks/>
        xldtConfigNames
        
        '''<remarks/>
        xldtTypes
        
        '''<remarks/>
        xldtCases
        
        '''<remarks/>
        xldtModuleNames
        
        '''<remarks/>
        xldtFieldType
        
        '''<remarks/>
        xldtSectionType
        
        '''<remarks/>
        xldtSuppressOutput
        
        '''<remarks/>
        xldtReportItemType
        
        '''<remarks/>
        xldtItemAlignment
        
        '''<remarks/>
        xldtSuppressBlanks
        
        '''<remarks/>
        xldtReportNumber
        
        '''<remarks/>
        xldtAccessControlGroups
        
        '''<remarks/>
        xldtAccessControlAreas
        
        '''<remarks/>
        xldtAccessControl
        
        '''<remarks/>
        xldtContactTypes
        
        '''<remarks/>
        xldtContactIncentiveResponses
        
        '''<remarks/>
        xldtIncentiveSchemeProducts
        
        '''<remarks/>
        xldtOrders
        
        '''<remarks/>
        xldtNewOrders
        
        '''<remarks/>
        xldtDirectDebitSource
        
        '''<remarks/>
        xldtBankersOrderSource
        
        '''<remarks/>
        xldtCreditCardAuthoritiesSource
        
        '''<remarks/>
        xldtTraderMaintenanceApp
        
        '''<remarks/>
        xldtTraderApplication
        
        '''<remarks/>
        xldtTraderAppBank
        
        '''<remarks/>
        xldtLinkToCommunication
        
        '''<remarks/>
        xldtMeetingTypes
        
        '''<remarks/>
        xldtMeetingAttendedTypes
        
        '''<remarks/>
        xldtMeetingLinkTypes
        
        '''<remarks/>
        xldtMeetingRoles
        
        '''<remarks/>
        xldtUserContactNames
        
        '''<remarks/>
        xldtCMTCalculateProportionalBal
        
        '''<remarks/>
        xldtGiftCardStatus
        
        '''<remarks/>
        xldtServiceProductContacts
        
        '''<remarks/>
        xldtBunches
        
        '''<remarks/>
        xldtBunchTopics
        
        '''<remarks/>
        xldtBranchMember
        
        '''<remarks/>
        xldtFixedCycle
        
        '''<remarks/>
        xldtContactMailingDocuments
        
        '''<remarks/>
        xldtStandingOrders
        
        '''<remarks/>
        xldtRelationshipStatuses
        
        '''<remarks/>
        xldtTraderApplicationTypes
        
        '''<remarks/>
        xldtCurrencyAndUnicode
        
        '''<remarks/>
        xldtMembershipStatuses
        
        '''<remarks/>
        xldtCPDCycleStatuses
        
        '''<remarks/>
        xldtCPDType
        
        '''<remarks/>
        xldtSurveys
        
        '''<remarks/>
        xldtSurveyVersions
        
        '''<remarks/>
        xldtMaintenanceGroups
        
        '''<remarks/>
        xldtVATRateHistory
        
        '''<remarks/>
        xldtAnswerDataType
        
        '''<remarks/>
        xldtAnswerType
        
        '''<remarks/>
        xldtReportSection
        
        '''<remarks/>
        xldtRateModifiers
        
        '''<remarks/>
        xldtPriceIsPercentage
        
        '''<remarks/>
        xldtViewTypes
        
        '''<remarks/>
        xldtServiceControl
        
        '''<remarks/>
        xldtContactCategories
        
        '''<remarks/>
        xldtProductOffers
        
        '''<remarks/>
        xldtWebItemGroups
        
        '''<remarks/>
        xldtContactSurveys
        
        '''<remarks/>
        xldtWebDirectory
        
        '''<remarks/>
        xldtBoxStatus
        
        '''<remarks/>
        xldtFundraisingBusinessTypes
        
        '''<remarks/>
        xldtBankTransactions
        
        '''<remarks/>
        xldtWebDocuments
        
        '''<remarks/>
        xldtBankHolidayDays
        
        '''<remarks/>
        xldtLabelNameFormatCodes
        
        '''<remarks/>
        xldtPostcodeValidationInfo
        
        '''<remarks/>
        xldtServiceBookingLabelNames
        
        '''<remarks/>
        xldtPurchaseOrderPaymentTypes
        
        '''<remarks/>
        xldtExpectedReceiptReasons
        
        '''<remarks/>
        xldtBacsMessagingFileFormats
        
        '''<remarks/>
        xldtGroupDefaultValues
        
        '''<remarks/>
        xldtStatusReasons
        
        '''<remarks/>
        xldtLoanTypes
        
        '''<remarks/>
        xldtWebPublishFlags
        
        '''<remarks/>
        xldtCPDItemTypes
        
        '''<remarks/>
        xldtExplorerLocation
        
        '''<remarks/>
        xldtMerchantDetails
        
        '''<remarks/>
        xldtExamAssessmentTypes
        
        '''<remarks/>
        xldtExamCentres
        
        '''<remarks/>
        xldtExamContactTypes
        
        '''<remarks/>
        xldtExamExemptions
        
        '''<remarks/>
        xldtExamExemptionStatuses
        
        '''<remarks/>
        xldtExamExemptionStatusTypes
        
        '''<remarks/>
        xldtExamExpenseTypes
        
        '''<remarks/>
        xldtExamGradeConditionTypes
        
        '''<remarks/>
        xldtExamGradeOperators
        
        '''<remarks/>
        xldtExamGrades
        
        '''<remarks/>
        xldtExamMarkerOptions
        
        '''<remarks/>
        xldtExamMarkerStatus
        
        '''<remarks/>
        xldtExamMarkTypes
        
        '''<remarks/>
        xldtExamPersonnelTypes
        
        '''<remarks/>
        xldtExamResultTypes
        
        '''<remarks/>
        xldtExamSessions
        
        '''<remarks/>
        xldtExamStudentUnitStatuses
        
        '''<remarks/>
        xldtExamUnits
        
        '''<remarks/>
        xldtExamUnitStatuses
        
        '''<remarks/>
        xldtExamUnitTypes
        
        '''<remarks/>
        xldtExamUnitsMarkerAllocation
        
        '''<remarks/>
        xldtExamTimeLimits
        
        '''<remarks/>
        xldtReportParameters
        
        '''<remarks/>
        xldtExamCentreRateTypes
        
        '''<remarks/>
        xldtResponseChannels
        
        '''<remarks/>
        xldtEmailJobs
        
        '''<remarks/>
        xldtCMTExcessPayments
        
        '''<remarks/>
        xldtCMTProrateCosts
        
        '''<remarks/>
        xldtActivitiesAndValues
        
        '''<remarks/>
        xldtPopPaymentMethods
        
        '''<remarks/>
        xldtDDClaimOutputTypes
        
        '''<remarks/>
        xldtExamAccreditationStatuses
        
        '''<remarks/>
        xldtExamGradeChangeReasons
        
        '''<remarks/>
        xldtStudyModes
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLMaintenanceControlTypes
        
        '''<remarks/>
        xmctNone
        
        '''<remarks/>
        xmctAddresses
        
        '''<remarks/>
        xmctActivities
        
        '''<remarks/>
        xmctContact
        
        '''<remarks/>
        xmctOrganisation
        
        '''<remarks/>
        xmctDocument
        
        '''<remarks/>
        xmctLink
        
        '''<remarks/>
        xmctNumber
        
        '''<remarks/>
        xmctPosition
        
        '''<remarks/>
        xmctReference
        
        '''<remarks/>
        xmctRole
        
        '''<remarks/>
        xmctStickyNote
        
        '''<remarks/>
        xmctSuppression
        
        '''<remarks/>
        xmctDepartmentNotes
        
        '''<remarks/>
        xmctAddressUsage
        
        '''<remarks/>
        xmctDocumentLink
        
        '''<remarks/>
        xmctDocumentTopic
        
        '''<remarks/>
        xmctAction
        
        '''<remarks/>
        xmctActionLink
        
        '''<remarks/>
        xmctActionTopic
        
        '''<remarks/>
        xmctActionSchedule
        
        '''<remarks/>
        xmctTCRDocument
        
        '''<remarks/>
        xmctEMailDocument
        
        '''<remarks/>
        xmctSelectionSet
        
        '''<remarks/>
        xmctCriterialSet
        
        '''<remarks/>
        xmctMailingOptions
        
        '''<remarks/>
        xmctCustomForm
        
        '''<remarks/>
        xmctCampaign
        
        '''<remarks/>
        xmctAppeal
        
        '''<remarks/>
        xmctSegment
        
        '''<remarks/>
        xmctMannedCollection
        
        '''<remarks/>
        xmctUnMannedCollection
        
        '''<remarks/>
        xmctH2HCollection
        
        '''<remarks/>
        xmctCollectionRegions
        
        '''<remarks/>
        xmctCollectionPoints
        
        '''<remarks/>
        xmctMannedCollectors
        
        '''<remarks/>
        xmctH2HCollectors
        
        '''<remarks/>
        xmctCollectorShifts
        
        '''<remarks/>
        xmctMannedCollectionBoxes
        
        '''<remarks/>
        xmctUnMannedCollectionBoxes
        
        '''<remarks/>
        xmctCollectionPIS
        
        '''<remarks/>
        xmctH2HCollectionPIS
        
        '''<remarks/>
        xmctAppealResources
        
        '''<remarks/>
        xmctCollectionResources
        
        '''<remarks/>
        xmctTickBox
        
        '''<remarks/>
        xmctSegmentProduct
        
        '''<remarks/>
        xmctAppealBudget
        
        '''<remarks/>
        xmctAppealBudgetDetails
        
        '''<remarks/>
        xmctSegmentCostCentre
        
        '''<remarks/>
        xmctCampaignSuppliers
        
        '''<remarks/>
        xmctAssignBoxesToPIS
        
        '''<remarks/>
        xmctCommsAddresses
        
        '''<remarks/>
        xmctEventInformation
        
        '''<remarks/>
        xmctEventSessions
        
        '''<remarks/>
        xmctEventSessionActivities
        
        '''<remarks/>
        xmctEventBookingOptions
        
        '''<remarks/>
        xmctEventBookingOptionSessions
        
        '''<remarks/>
        xmctEventRoomBookings
        
        '''<remarks/>
        xmctEventBookings
        
        '''<remarks/>
        xmctEventCosts
        
        '''<remarks/>
        xmctEventContacts
        
        '''<remarks/>
        xmctEventResults
        
        '''<remarks/>
        xmctEventSessionTests
        
        '''<remarks/>
        xmctEventSubmissions
        
        '''<remarks/>
        xmctEventAccommodation
        
        '''<remarks/>
        xmctEventResources
        
        '''<remarks/>
        xmctEventVenueBookings
        
        '''<remarks/>
        xmctEventPersonnel
        
        '''<remarks/>
        xmctEventTopics
        
        '''<remarks/>
        xmctEventOrganiser
        
        '''<remarks/>
        xmctEventSources
        
        '''<remarks/>
        xmctEventMailings
        
        '''<remarks/>
        xmctEventPersonnelTasks
        
        '''<remarks/>
        xmctEventOwners
        
        '''<remarks/>
        xmctEventDelegates
        
        '''<remarks/>
        xmctEventDelegateAllocation
        
        '''<remarks/>
        xmctEventRoomAllocation
        
        '''<remarks/>
        xmctEventBookingSessions
        
        '''<remarks/>
        xmctEventPIS
        
        '''<remarks/>
        xmctAllocatePISToDelegates
        
        '''<remarks/>
        xmctBatches
        
        '''<remarks/>
        xmctPositionActivity
        
        '''<remarks/>
        xmctContactEntry
        
        '''<remarks/>
        xmctOrganisationEntry
        
        '''<remarks/>
        xmctOutlookEmailIn
        
        '''<remarks/>
        xmctOutlookEmailOut
        
        '''<remarks/>
        xmctWebInformation
        
        '''<remarks/>
        xmctWebPage
        
        '''<remarks/>
        xmctWebPageItem
        
        '''<remarks/>
        xmctWebMenu
        
        '''<remarks/>
        xmctWebMenuItem
        
        '''<remarks/>
        xmctWebImage
        
        '''<remarks/>
        xmctContactAccounts
        
        '''<remarks/>
        xmctCreditCardAuthorities
        
        '''<remarks/>
        xmctCreditCards
        
        '''<remarks/>
        xmctDirectDebits
        
        '''<remarks/>
        xmctStandingOrders
        
        '''<remarks/>
        xmctGiftAidDeclarations
        
        '''<remarks/>
        xmctAppointments
        
        '''<remarks/>
        xmctCreditCustomers
        
        '''<remarks/>
        xmctBanks
        
        '''<remarks/>
        xmctAddPaymentPlan
        
        '''<remarks/>
        xmctFutureMembershipType
        
        '''<remarks/>
        xmctStandardDocument
        
        '''<remarks/>
        xmctCommunicationUsage
        
        '''<remarks/>
        xmctJointContacts
        
        '''<remarks/>
        xmctFundraising
        
        '''<remarks/>
        xmctAppropriateCertificates
        
        '''<remarks/>
        xmctFundraisingEvents
        
        '''<remarks/>
        xmctActionTemplate
        
        '''<remarks/>
        xmctMembership
        
        '''<remarks/>
        xmctMembershipGroups
        
        '''<remarks/>
        xmctProcessedTransactions
        
        '''<remarks/>
        xmctPurchaseOrders
        
        '''<remarks/>
        xmctPurchaseOrderPayments
        
        '''<remarks/>
        xmctCPDCycles
        
        '''<remarks/>
        xmctCPDPoints
        
        '''<remarks/>
        xmctBatchDetails
        
        '''<remarks/>
        xmctAmendBooking
        
        '''<remarks/>
        xmctLegacy
        
        '''<remarks/>
        xmctLegacyBequest
        
        '''<remarks/>
        xmctLegacyBequestForecast
        
        '''<remarks/>
        xmctLegacyBequestReceipt
        
        '''<remarks/>
        xmctLegacyLinks
        
        '''<remarks/>
        xmctLegacyAssets
        
        '''<remarks/>
        xmctLegacyTaxCertificates
        
        '''<remarks/>
        xmctLegacyExpenses
        
        '''<remarks/>
        xmctCampaignCosts
        
        '''<remarks/>
        xmctCampaignRoles
        
        '''<remarks/>
        xmctPreTaxPledges
        
        '''<remarks/>
        xmctPostTaxPledges
        
        '''<remarks/>
        xmctContactRegisteredUsers
        
        '''<remarks/>
        xmctPositionLinks
        
        '''<remarks/>
        xmctFundraisingPaymentSchedule
        
        '''<remarks/>
        xmctUnProcessedTransactions
        
        '''<remarks/>
        xmctMeetings
        
        '''<remarks/>
        xmctMeetingLinks
        
        '''<remarks/>
        xmctMeetingTopic
        
        '''<remarks/>
        xmctMeetingAgenda
        
        '''<remarks/>
        xmctPurchaseInvoiceChequePayee
        
        '''<remarks/>
        xmctAlerts
        
        '''<remarks/>
        xmctCPDObjectives
        
        '''<remarks/>
        xmctMergeSelectionSet
        
        '''<remarks/>
        xmctDisplayListItem
        
        '''<remarks/>
        xmctContactSurveys
        
        '''<remarks/>
        xmctDocumentActions
        
        '''<remarks/>
        xmctEventDelegateActivity
        
        '''<remarks/>
        xmctPaymentPlanProducts
        
        '''<remarks/>
        xmctExamStudentExemptions
        
        '''<remarks/>
        xmctDataUpdates
        
        '''<remarks/>
        xmctCPDPointsWithoutCycle
        
        '''<remarks/>
        xmctExamStudentUnitSummary
        
        '''<remarks/>
        xmctExamStudentUnitDetail
        
        '''<remarks/>
        xmctPostedBatchReference
        
        '''<remarks/>
        xmctMeetingActions
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLAppointmentTypes
        
        '''<remarks/>
        xatExistingAction
        
        '''<remarks/>
        xatExistingActionLink
        
        '''<remarks/>
        xatExistingEventBooking
        
        '''<remarks/>
        xatExistingEventDelegate
        
        '''<remarks/>
        xatExistingEventResource
        
        '''<remarks/>
        xatExistingPersonnel
        
        '''<remarks/>
        xatExistingPersonnelTask
        
        '''<remarks/>
        xatNewAction
        
        '''<remarks/>
        xatNewActionLink
        
        '''<remarks/>
        xatNewEventBooking
        
        '''<remarks/>
        xatNewEventDelegate
        
        '''<remarks/>
        xatNewEventResource
        
        '''<remarks/>
        xatNewPersonnel
        
        '''<remarks/>
        xatNewPersonnelTask
        
        '''<remarks/>
        xatNewMeeting
        
        '''<remarks/>
        xatNewMeetingLink
        
        '''<remarks/>
        xatExistingMeeting
        
        '''<remarks/>
        xatExistingMeetingLink
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLFastDataEntryTypes
        
        '''<remarks/>
        fdeNone
        
        '''<remarks/>
        fdePageAccessLevels
        
        '''<remarks/>
        fdePageControlItems
        
        '''<remarks/>
        fdePageControls
        
        '''<remarks/>
        fdePages
        
        '''<remarks/>
        fdeUserControls
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://care.co.uk/webservices/")>  _
    Public Enum XMLLegacyBequestDataSelectionTypes
        
        '''<remarks/>
        xlbdstReceipts
        
        '''<remarks/>
        xlbdstForecasts
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SaveTraderApplicationBankCompletedEventHandler(ByVal sender As Object, ByVal e As SaveTraderApplicationBankCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveTraderApplicationBankCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CopyTraderApplicationCompletedEventHandler(ByVal sender As Object, ByVal e As CopyTraderApplicationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyTraderApplicationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteTraderApplicationCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteTraderApplicationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteTraderApplicationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUnpostedBatchCountCompletedEventHandler(ByVal sender As Object, ByVal e As GetUnpostedBatchCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUnpostedBatchCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckAdjustmentAllowedCompletedEventHandler(ByVal sender As Object, ByVal e As CheckAdjustmentAllowedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckAdjustmentAllowedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ReverseTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As ReverseTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReverseTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ChangeTransactionPayerCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeTransactionPayerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeTransactionPayerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ReversePOPMenuSelectionCompletedEventHandler(ByVal sender As Object, ByVal e As ReversePOPMenuSelectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReversePOPMenuSelectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ReversePurchaseOrderPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As ReversePurchaseOrderPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReversePurchaseOrderPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetImportTypesCompletedEventHandler(ByVal sender As Object, ByVal e As GetImportTypesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetImportTypesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub InitDataImportCompletedEventHandler(ByVal sender As Object, ByVal e As InitDataImportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InitDataImportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AccountNoVerifyCompletedEventHandler(ByVal sender As Object, ByVal e As AccountNoVerifyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AccountNoVerifyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetActionScheduleDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetActionScheduleDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActionScheduleDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAllPAFAddressesCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllPAFAddressesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllPAFAddressesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetBranchFromPostCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetBranchFromPostCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBranchFromPostCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDocumentNumberForDistributionCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentNumberForDistributionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentNumberForDistributionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDocumentFileCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDocumentMergeDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentMergeDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentMergeDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMaintenanceDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaintenanceDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaintenanceDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetSuppressContactsCompletedEventHandler(ByVal sender As Object, ByVal e As GetSuppressContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSuppressContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetNearestOrganisationCompletedEventHandler(ByVal sender As Object, ByVal e As GetNearestOrganisationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNearestOrganisationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPAFAddressCompletedEventHandler(ByVal sender As Object, ByVal e As GetPAFAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPAFAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPAFPostcodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetPAFPostcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPAFPostcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetStandardDocumentFileCompletedEventHandler(ByVal sender As Object, ByVal e As GetStandardDocumentFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStandardDocumentFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectUserHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As SelectUserHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectUserHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UniservPostCheckCompletedEventHandler(ByVal sender As Object, ByVal e As UniservPostCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UniservPostCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateDocumentFileCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDocumentFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDocumentFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateStandardDocumentFileCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateStandardDocumentFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateStandardDocumentFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMailingDocumentFileCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMailingDocumentFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMailingDocumentFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetOwnershipUsersCompletedEventHandler(ByVal sender As Object, ByVal e As GetOwnershipUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOwnershipUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetOwnershipGroupInformationCompletedEventHandler(ByVal sender As Object, ByVal e As GetOwnershipGroupInformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOwnershipGroupInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetOwnershipUserInformationCompletedEventHandler(ByVal sender As Object, ByVal e As GetOwnershipUserInformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOwnershipUserInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetOwnershipDepartmentInformationCompletedEventHandler(ByVal sender As Object, ByVal e As GetOwnershipDepartmentInformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOwnershipDepartmentInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPaymentPlanAutoPayDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetPaymentPlanAutoPayDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPaymentPlanAutoPayDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckIbanNumberCompletedEventHandler(ByVal sender As Object, ByVal e As CheckIbanNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckIbanNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddRegisteredUserCompletedEventHandler(ByVal sender As Object, ByVal e As AddRegisteredUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddRegisteredUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAvailableDatabasesCompletedEventHandler(ByVal sender As Object, ByVal e As GetAvailableDatabasesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAvailableDatabasesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetClientCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetVersionNumberCompletedEventHandler(ByVal sender As Object, ByVal e As GetVersionNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVersionNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub LoginCompletedEventHandler(ByVal sender As Object, ByVal e As LoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub LoginRegisteredUserCompletedEventHandler(ByVal sender As Object, ByVal e As LoginRegisteredUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginRegisteredUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub LogoutCompletedEventHandler(ByVal sender As Object, ByVal e As LogoutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogoutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateRegisteredUserCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRegisteredUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRegisteredUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetApplicationControlsCompletedEventHandler(ByVal sender As Object, ByVal e As GetApplicationControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetApplicationControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetFunctionControlsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFunctionControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFunctionControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTableMaintenanceControlsCompletedEventHandler(ByVal sender As Object, ByVal e As GetTableMaintenanceControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTableMaintenanceControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReportControlsCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub MoveExternalDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As MoveExternalDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MoveExternalDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DuplicateSurveyCompletedEventHandler(ByVal sender As Object, ByVal e As DuplicateSurveyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DuplicateSurveyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCpdObjectiveCompletedEventHandler(ByVal sender As Object, ByVal e As AddCpdObjectiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCpdObjectiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCpdObjectiveCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCpdObjectiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCpdObjectiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCpdObjectiveCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCpdObjectiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCpdObjectiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddWebItemCompletedEventHandler(ByVal sender As Object, ByVal e As AddWebItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddWebItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateWebItemCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWebItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWebItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetWebControlsCompletedEventHandler(ByVal sender As Object, ByVal e As GetWebControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWebControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetWebInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWebInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWebInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetWebMenusCompletedEventHandler(ByVal sender As Object, ByVal e As GetWebMenusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWebMenusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetWebPageInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWebPageInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWebPageInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetWebPageItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetWebPageItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWebPageItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCurrencyRateCompletedEventHandler(ByVal sender As Object, ByVal e As AddCurrencyRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCurrencyRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectTelemarketingContactCompletedEventHandler(ByVal sender As Object, ByVal e As SelectTelemarketingContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectTelemarketingContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateTelemarketingContactCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTelemarketingContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTelemarketingContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventDelegateCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventDelegateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventDelegateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventDelegateCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventDelegateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventDelegateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventDelegateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventDelegateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventDelegateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectConfigValueCompletedEventHandler(ByVal sender As Object, ByVal e As SelectConfigValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectConfigValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectCriteriaSetStepsCompletedEventHandler(ByVal sender As Object, ByVal e As SelectCriteriaSetStepsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectCriteriaSetStepsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectCovenantDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectCovenantDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectCovenantDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectDashboardDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectDashboardDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectDashboardDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectDelegateDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectDelegateDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectDelegateDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectDirectDebitDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectDirectDebitDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectDirectDebitDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectDocumentDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectDocumentDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectDocumentDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectEventDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectEventDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectEventDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectJobProcessorsDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectJobProcessorsDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectJobProcessorsDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectJobScheduleDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectJobScheduleDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectJobScheduleDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub InitListManagerCompletedEventHandler(ByVal sender As Object, ByVal e As InitListManagerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InitListManagerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub TerminateListManagerCompletedEventHandler(ByVal sender As Object, ByVal e As TerminateListManagerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TerminateListManagerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectListManagerDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectListManagerDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectListManagerDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectListManagerCountCompletedEventHandler(ByVal sender As Object, ByVal e As SelectListManagerCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectListManagerCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectGiftAidDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectGiftAidDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectGiftAidDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectFundraisingEventDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectFundraisingEventDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectFundraisingEventDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectFundraisingRequestDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectFundraisingRequestDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectFundraisingRequestDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectJournalDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectJournalDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectJournalDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectMembershipDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectMembershipDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectMembershipDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectPaymentPlanDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectPaymentPlanDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectPaymentPlanDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectPledgeDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectPledgeDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectPledgeDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectPurchaseInvoiceDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectPurchaseInvoiceDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectPurchaseInvoiceDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectPurchaseOrderDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectPurchaseOrderDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectPurchaseOrderDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectSelectionSetAppointmentsCompletedEventHandler(ByVal sender As Object, ByVal e As SelectSelectionSetAppointmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectSelectionSetAppointmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectSelectionSetCommsNumbersCompletedEventHandler(ByVal sender As Object, ByVal e As SelectSelectionSetCommsNumbersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectSelectionSetCommsNumbersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectSelectionSetDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectSelectionSetDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectSelectionSetDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectTableDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectTableDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectTableDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectTransactionDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectTransactionDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectTransactionDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReportFileCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReportOutputCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportOutputCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportOutputCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReportDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReportParametersCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportParametersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportParametersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReportSectionDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportSectionDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportSectionDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReportVersionCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReportControlCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportControlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportControlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReportSectionDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportSectionDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportSectionDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DuplicateReportCompletedEventHandler(ByVal sender As Object, ByVal e As DuplicateReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DuplicateReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RenumberReportParametersCompletedEventHandler(ByVal sender As Object, ByVal e As RenumberReportParametersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RenumberReportParametersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RenumberReportSectionsCompletedEventHandler(ByVal sender As Object, ByVal e As RenumberReportSectionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RenumberReportSectionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DuplicateReportSectionCompletedEventHandler(ByVal sender As Object, ByVal e As DuplicateReportSectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DuplicateReportSectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RenumberReportItemsCompletedEventHandler(ByVal sender As Object, ByVal e As RenumberReportItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RenumberReportItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteReportParameterCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteReportParameterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteReportParameterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteReportControlCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteReportControlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteReportControlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteReportItemCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteReportItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteReportItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteReportSectionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteReportSectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteReportSectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteReportAndContentCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteReportAndContentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteReportAndContentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddAutoPaymentMethodCompletedEventHandler(ByVal sender As Object, ByVal e As AddAutoPaymentMethodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAutoPaymentMethodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddMembershipCompletedEventHandler(ByVal sender As Object, ByVal e As AddMembershipCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMembershipCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddPaymentPlanCompletedEventHandler(ByVal sender As Object, ByVal e As AddPaymentPlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPaymentPlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ChangeMembershipTypeCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeMembershipTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeMembershipTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteGiftAidDeclarationCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteGiftAidDeclarationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteGiftAidDeclarationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAutoPaymentTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetAutoPaymentTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAutoPaymentTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ppAutoPayMethods
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ppAutoPayMethods)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetFDEControlTypesCompletedEventHandler(ByVal sender As Object, ByVal e As GetFDEControlTypesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFDEControlTypesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FDEControlTypes
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FDEControlTypes)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDetailBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetDetailBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDetailBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMemberBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetMemberBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMemberBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMemberRenewalAmountCompletedEventHandler(ByVal sender As Object, ByVal e As GetMemberRenewalAmountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMemberRenewalAmountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMembershipEntitlementsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMembershipEntitlementsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMembershipEntitlementsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetNextPaymentDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetNextPaymentDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNextPaymentDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPaymentPlanStartDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetPaymentPlanStartDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPaymentPlanStartDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessPaymentPlanMenuCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessPaymentPlanMenuCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessPaymentPlanMenuCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdatePaymentPlanCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePaymentPlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePaymentPlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdatePaymentPlanInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePaymentPlanInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePaymentPlanInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddPaymentPlanMemberCompletedEventHandler(ByVal sender As Object, ByVal e As AddPaymentPlanMemberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPaymentPlanMemberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckMailingDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As CheckMailingDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckMailingDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RecalculateLoanInterestCompletedEventHandler(ByVal sender As Object, ByVal e As RecalculateLoanInterestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecalculateLoanInterestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub LoadDataUpdatesFileCompletedEventHandler(ByVal sender As Object, ByVal e As LoadDataUpdatesFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadDataUpdatesFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectLoanDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectLoanDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectLoanDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMembershipCMTPricesCompletedEventHandler(ByVal sender As Object, ByVal e As GetMembershipCMTPricesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMembershipCMTPricesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetModifierPriceCompletedEventHandler(ByVal sender As Object, ByVal e As GetModifierPriceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetModifierPriceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddContactMailingDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As AddContactMailingDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddContactMailingDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMailingDocumentMergeFileCompletedEventHandler(ByVal sender As Object, ByVal e As GetMailingDocumentMergeFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMailingDocumentMergeFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMailingDocumentParagraphsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMailingDocumentParagraphsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMailingDocumentParagraphsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTraderApplicationCompletedEventHandler(ByVal sender As Object, ByVal e As GetTraderApplicationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTraderApplicationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessStockMovementCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessStockMovementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessStockMovementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessTraderDataCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessTraderDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessTraderDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessTraderMailmergeCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessTraderMailmergeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessTraderMailmergeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessTraderPPEligibleForGiftAidCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessTraderPPEligibleForGiftAidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessTraderPPEligibleForGiftAidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckCriteriaContainsORsCompletedEventHandler(ByVal sender As Object, ByVal e As CheckCriteriaContainsORsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckCriteriaContainsORsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMailingSelectionRoughCountCompletedEventHandler(ByVal sender As Object, ByVal e As GetMailingSelectionRoughCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMailingSelectionRoughCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateBatchCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateBatchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateBatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateContactMailingDocumentFileCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactMailingDocumentFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactMailingDocumentFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventBookingTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventBookingTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventBookingTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SetTraderApplicationsCompletedEventHandler(ByVal sender As Object, ByVal e As SetTraderApplicationsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetTraderApplicationsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteTraderApplicationsCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteTraderApplicationsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteTraderApplicationsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SaveTraderApplicationCompletedEventHandler(ByVal sender As Object, ByVal e As SaveTraderApplicationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveTraderApplicationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCriteriaSetCompletedEventHandler(ByVal sender As Object, ByVal e As AddCriteriaSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCriteriaSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCriteriaSetDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As AddCriteriaSetDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCriteriaSetDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCustomFormDataCompletedEventHandler(ByVal sender As Object, ByVal e As AddCustomFormDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCustomFormDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventBookingCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExternalReferenceCompletedEventHandler(ByVal sender As Object, ByVal e As AddExternalReferenceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExternalReferenceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddFundraisingPaymentLinkCompletedEventHandler(ByVal sender As Object, ByVal e As AddFundraisingPaymentLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFundraisingPaymentLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddFundraisingPaymentScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As AddFundraisingPaymentScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFundraisingPaymentScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddFundraisingRequestCompletedEventHandler(ByVal sender As Object, ByVal e As AddFundraisingRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFundraisingRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddFutureMembershipTypeCompletedEventHandler(ByVal sender As Object, ByVal e As AddFutureMembershipTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFutureMembershipTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddGiftAidDeclarationCompletedEventHandler(ByVal sender As Object, ByVal e As AddGiftAidDeclarationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddGiftAidDeclarationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddInvoicePaymentCompletedEventHandler(ByVal sender As Object, ByVal e As AddInvoicePaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddInvoicePaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddLinkCompletedEventHandler(ByVal sender As Object, ByVal e As AddLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddMembershipGroupCompletedEventHandler(ByVal sender As Object, ByVal e As AddMembershipGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMembershipGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddMailingSelectedContactCompletedEventHandler(ByVal sender As Object, ByVal e As AddMailingSelectedContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMailingSelectedContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddOrganisationCompletedEventHandler(ByVal sender As Object, ByVal e As AddOrganisationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddOrganisationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddPaymentPlanPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As AddPaymentPlanPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPaymentPlanPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddPositionCompletedEventHandler(ByVal sender As Object, ByVal e As AddPositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddPositionActivityCompletedEventHandler(ByVal sender As Object, ByVal e As AddPositionActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPositionActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddPositionLinkCompletedEventHandler(ByVal sender As Object, ByVal e As AddPositionLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPositionLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddProductSaleCompletedEventHandler(ByVal sender As Object, ByVal e As AddProductSaleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddProductSaleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddPurchaseOrderPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As AddPurchaseOrderPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPurchaseOrderPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddRoleCompletedEventHandler(ByVal sender As Object, ByVal e As AddRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddSelectionSetCompletedEventHandler(ByVal sender As Object, ByVal e As AddSelectionSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddSelectionSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddSelectionSetDataCompletedEventHandler(ByVal sender As Object, ByVal e As AddSelectionSetDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddSelectionSetDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddSelectionSetContactCompletedEventHandler(ByVal sender As Object, ByVal e As AddSelectionSetContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddSelectionSetContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddSelectionStepCompletedEventHandler(ByVal sender As Object, ByVal e As AddSelectionStepCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddSelectionStepCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddServiceBookingCompletedEventHandler(ByVal sender As Object, ByVal e As AddServiceBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddServiceBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddStandardDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As AddStandardDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddStandardDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddStickyNoteCompletedEventHandler(ByVal sender As Object, ByVal e As AddStickyNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddStickyNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddSuppressionCompletedEventHandler(ByVal sender As Object, ByVal e As AddSuppressionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddSuppressionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CancelAppropriateCertificateCompletedEventHandler(ByVal sender As Object, ByVal e As CancelAppropriateCertificateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelAppropriateCertificateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CancelEventBookingCompletedEventHandler(ByVal sender As Object, ByVal e As CancelEventBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelEventBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CancelGiftAidDeclarationCompletedEventHandler(ByVal sender As Object, ByVal e As CancelGiftAidDeclarationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelGiftAidDeclarationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CancelServiceBookingCompletedEventHandler(ByVal sender As Object, ByVal e As CancelServiceBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelServiceBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ConfirmCardSaleTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As ConfirmCardSaleTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConfirmCardSaleTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ConfirmCashSaleTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As ConfirmCashSaleTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConfirmCashSaleTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ConfirmCreditSaleTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As ConfirmCreditSaleTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConfirmCreditSaleTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ConfirmCreditAndCardSaleTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As ConfirmCreditAndCardSaleTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConfirmCreditAndCardSaleTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCriteriaVariableControlsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCriteriaVariableControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCriteriaVariableControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SaveListManagerSelectionCompletedEventHandler(ByVal sender As Object, ByVal e As SaveListManagerSelectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveListManagerSelectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddErrorLogCompletedEventHandler(ByVal sender As Object, ByVal e As AddErrorLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddErrorLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddContactEmailingCompletedEventHandler(ByVal sender As Object, ByVal e As AddContactEmailingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddContactEmailingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddContactMailingCompletedEventHandler(ByVal sender As Object, ByVal e As AddContactMailingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddContactMailingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddMailingCompletedEventHandler(ByVal sender As Object, ByVal e As AddMailingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMailingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddMailingHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As AddMailingHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMailingHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindActionsCompletedEventHandler(ByVal sender As Object, ByVal e As FindActionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindActionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindAppealCollectionsCompletedEventHandler(ByVal sender As Object, ByVal e As FindAppealCollectionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindAppealCollectionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindBatchesCompletedEventHandler(ByVal sender As Object, ByVal e As FindBatchesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindBatchesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindCampaignAppealsCompletedEventHandler(ByVal sender As Object, ByVal e As FindCampaignAppealsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindCampaignAppealsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindCampaignCollectionsCompletedEventHandler(ByVal sender As Object, ByVal e As FindCampaignCollectionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindCampaignCollectionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindCampaignsCompletedEventHandler(ByVal sender As Object, ByVal e As FindCampaignsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindCampaignsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindCampaignSegmentsCompletedEventHandler(ByVal sender As Object, ByVal e As FindCampaignSegmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindCampaignSegmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindCovenantsCompletedEventHandler(ByVal sender As Object, ByVal e As FindCovenantsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindCovenantsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindCreditCardAuthoritiesCompletedEventHandler(ByVal sender As Object, ByVal e As FindCreditCardAuthoritiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindCreditCardAuthoritiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindDataCompletedEventHandler(ByVal sender As Object, ByVal e As FindDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindDirectDebitsCompletedEventHandler(ByVal sender As Object, ByVal e As FindDirectDebitsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindDirectDebitsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As FindDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindExternalDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As FindExternalDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindExternalDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindDuplicateContactsCompletedEventHandler(ByVal sender As Object, ByVal e As FindDuplicateContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindDuplicateContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindDuplicateOrganisationsCompletedEventHandler(ByVal sender As Object, ByVal e As FindDuplicateOrganisationsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindDuplicateOrganisationsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindEventsCompletedEventHandler(ByVal sender As Object, ByVal e As FindEventsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindEventsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindGiftAidDeclarationsCompletedEventHandler(ByVal sender As Object, ByVal e As FindGiftAidDeclarationsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindGiftAidDeclarationsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindInternalResourcesCompletedEventHandler(ByVal sender As Object, ByVal e As FindInternalResourcesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindInternalResourcesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindInUniservPhoneBookCompletedEventHandler(ByVal sender As Object, ByVal e As FindInUniservPhoneBookCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindInUniservPhoneBookCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindInvoiceCreditNotesCompletedEventHandler(ByVal sender As Object, ByVal e As FindInvoiceCreditNotesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindInvoiceCreditNotesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindLegaciesCompletedEventHandler(ByVal sender As Object, ByVal e As FindLegaciesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindLegaciesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindMembersCompletedEventHandler(ByVal sender As Object, ByVal e As FindMembersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindMembersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindPaymentPlansCompletedEventHandler(ByVal sender As Object, ByVal e As FindPaymentPlansCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindPaymentPlansCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindPayrollGivingPledgesCompletedEventHandler(ByVal sender As Object, ByVal e As FindPayrollGivingPledgesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindPayrollGivingPledgesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindPostTaxPayrollGivingPledgesCompletedEventHandler(ByVal sender As Object, ByVal e As FindPostTaxPayrollGivingPledgesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindPostTaxPayrollGivingPledgesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindPreTaxPayrollGivingPledgesCompletedEventHandler(ByVal sender As Object, ByVal e As FindPreTaxPayrollGivingPledgesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindPreTaxPayrollGivingPledgesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindProductsCompletedEventHandler(ByVal sender As Object, ByVal e As FindProductsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindProductsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindPurchaseOrdersCompletedEventHandler(ByVal sender As Object, ByVal e As FindPurchaseOrdersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindPurchaseOrdersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindSelectionSetsCompletedEventHandler(ByVal sender As Object, ByVal e As FindSelectionSetsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindSelectionSetsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindStandardDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As FindStandardDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindStandardDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindStandingOrdersCompletedEventHandler(ByVal sender As Object, ByVal e As FindStandingOrdersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindStandingOrdersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindTransactionsCompletedEventHandler(ByVal sender As Object, ByVal e As FindTransactionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindTransactionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetSurnamePrefixCompletedEventHandler(ByVal sender As Object, ByVal e As GetSurnamePrefixCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSurnamePrefixCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessListManagerMailingCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessListManagerMailingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessListManagerMailingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessListManagerStepCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessListManagerStepCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessListManagerStepCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectAddressDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectAddressDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectAddressDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectBankAccountDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectBankAccountDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectBankAccountDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectCampaignDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectCampaignDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectCampaignDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectSystemModuleUsersDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectSystemModuleUsersDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectSystemModuleUsersDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectContactDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectContactDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectContactDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateActivityCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateAddressCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateAddressUsageCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAddressUsageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAddressUsageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateAppointmentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAppointmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAppointmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateAppropriateCertificateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAppropriateCertificateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAppropriateCertificateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCommunicationsLogCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCommunicationsLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCommunicationsLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub LockDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As LockDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LockDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateChequeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateChequeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateChequeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCommunicationsLogLinkCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCommunicationsLogLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCommunicationsLogLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCommunicationsLogSubjectCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCommunicationsLogSubjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCommunicationsLogSubjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCommunicationsNumberCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCommunicationsNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCommunicationsNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCommunicationsNumbersAddressCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCommunicationsNumbersAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCommunicationsNumbersAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCommunicationUsageCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCommunicationUsageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCommunicationUsageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateContactCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateContactAccountCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateContactFundraisingEventCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactFundraisingEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactFundraisingEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCreditCardCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCreditCardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCreditCardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCreditCardAuthorityCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCreditCardAuthorityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCreditCardAuthorityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCreditCustomerCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCreditCustomerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCreditCustomerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCriteriaSetCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCriteriaSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCriteriaSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCustomFormDataCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCustomFormDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCustomFormDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateDepartmentNotesCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDepartmentNotesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDepartmentNotesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateDirectDebitCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDirectDebitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDirectDebitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExternalReferenceCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExternalReferenceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExternalReferenceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateFinancialHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFinancialHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFinancialHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateFundraisingPaymentScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFundraisingPaymentScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFundraisingPaymentScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateFundraisingRequestCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFundraisingRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFundraisingRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateFutureMembershipTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFutureMembershipTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFutureMembershipTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateGiftAidDeclarationCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateGiftAidDeclarationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateGiftAidDeclarationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateInvoiceCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateInvoiceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateInvoiceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateLinkCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMemberCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMemberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMemberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMaintenanceTablesCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMaintenanceTablesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMaintenanceTablesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMembershipGroupCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMembershipGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMembershipGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdatePositionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdatePositionActivityCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePositionActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePositionActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdatePositionLinkCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePositionLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePositionLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateWebDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWebDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWebDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateProvisionalTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProvisionalTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProvisionalTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdatePurchaseOrderCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePurchaseOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePurchaseOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdatePurchaseOrderPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePurchaseOrderPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePurchaseOrderPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateRoleCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateStandardDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateStandardDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateStandardDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateStandingOrderCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateStandingOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateStandingOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateStickyNoteCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateStickyNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateStickyNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateSubscriptionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSubscriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSubscriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateSuppressionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSuppressionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSuppressionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateSystemModuleUserCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSystemModuleUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSystemModuleUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateTableDataCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTableDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTableDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub MakeBranchHistoricalCompletedEventHandler(ByVal sender As Object, ByVal e As MakeBranchHistoricalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MakeBranchHistoricalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub MoveBranchPostcodeCompletedEventHandler(ByVal sender As Object, ByVal e As MoveBranchPostcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MoveBranchPostcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub MoveRegionCompletedEventHandler(ByVal sender As Object, ByVal e As MoveRegionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MoveRegionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateAccessControlItemCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAccessControlItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAccessControlItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteAccessControlGroupCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteAccessControlGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteAccessControlGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CreateAccessControlDataCompletedEventHandler(ByVal sender As Object, ByVal e As CreateAccessControlDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateAccessControlDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CreateCopyOfSelectionSetCompletedEventHandler(ByVal sender As Object, ByVal e As CreateCopyOfSelectionSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateCopyOfSelectionSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ReconcileStandingOrderCompletedEventHandler(ByVal sender As Object, ByVal e As ReconcileStandingOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReconcileStandingOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateBankersOrderCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateBankersOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateBankersOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ChangeOwnershipAccessLevelCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeOwnershipAccessLevelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeOwnershipAccessLevelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMailingCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMailingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMailingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMailingHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMailingHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMailingHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ReanalysePurchaseOrderPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As ReanalysePurchaseOrderPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReanalysePurchaseOrderPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEntityAlertCompletedEventHandler(ByVal sender As Object, ByVal e As AddEntityAlertCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEntityAlertCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddSystemModuleUserCompletedEventHandler(ByVal sender As Object, ByVal e As AddSystemModuleUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddSystemModuleUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddAccommodationBookingCompletedEventHandler(ByVal sender As Object, ByVal e As AddAccommodationBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAccommodationBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddActionCompletedEventHandler(ByVal sender As Object, ByVal e As AddActionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddActionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddActionFromTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As AddActionFromTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddActionFromTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddActionLinkCompletedEventHandler(ByVal sender As Object, ByVal e As AddActionLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddActionLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddActionSubjectCompletedEventHandler(ByVal sender As Object, ByVal e As AddActionSubjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddActionSubjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddActivityCompletedEventHandler(ByVal sender As Object, ByVal e As AddActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddAddressCompletedEventHandler(ByVal sender As Object, ByVal e As AddAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddAddressUsageCompletedEventHandler(ByVal sender As Object, ByVal e As AddAddressUsageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAddressUsageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddAppointmentCompletedEventHandler(ByVal sender As Object, ByVal e As AddAppointmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAppointmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddBankCompletedEventHandler(ByVal sender As Object, ByVal e As AddBankCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddBankCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddBatchCompletedEventHandler(ByVal sender As Object, ByVal e As AddBatchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddBatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCommunicationsLogCompletedEventHandler(ByVal sender As Object, ByVal e As AddCommunicationsLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCommunicationsLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCommunicationsLogHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As AddCommunicationsLogHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCommunicationsLogHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCommunicationsLogLinkCompletedEventHandler(ByVal sender As Object, ByVal e As AddCommunicationsLogLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCommunicationsLogLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCommunicationsLogSubjectCompletedEventHandler(ByVal sender As Object, ByVal e As AddCommunicationsLogSubjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCommunicationsLogSubjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCommunicationsNumberCompletedEventHandler(ByVal sender As Object, ByVal e As AddCommunicationsNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCommunicationsNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCommunicationUsageCompletedEventHandler(ByVal sender As Object, ByVal e As AddCommunicationUsageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCommunicationUsageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddContactCompletedEventHandler(ByVal sender As Object, ByVal e As AddContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddContactAccountCompletedEventHandler(ByVal sender As Object, ByVal e As AddContactAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddContactAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddContactFundraisingEventCompletedEventHandler(ByVal sender As Object, ByVal e As AddContactFundraisingEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddContactFundraisingEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCreditCustomerCompletedEventHandler(ByVal sender As Object, ByVal e As AddCreditCustomerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCreditCustomerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub TransferWaitingListBookingCompletedEventHandler(ByVal sender As Object, ByVal e As TransferWaitingListBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TransferWaitingListBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateAccommodationBookingCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAccommodationBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAccommodationBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateDelegateActivityCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDelegateActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDelegateActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateDelegateLinkCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDelegateLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDelegateLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventBookingCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventBookingOptionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventBookingOptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventBookingOptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventContactCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventCostCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventCostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventCostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateDelegateToEventCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDelegateToEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDelegateToEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventOptionSessionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventOptionSessionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventOptionSessionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventOrganiserCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventOrganiserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventOrganiserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventPersonnelCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventPersonnelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventPersonnelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventPersonnelTaskCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventPersonnelTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventPersonnelTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventPISCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventPISCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventPISCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventResourceCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventResourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventResourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventRoomAllocationCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventRoomAllocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventRoomAllocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventRoomBlockBookingCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventRoomBlockBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventRoomBlockBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventSessionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventSessionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventSessionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventSessionTestCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventSessionTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventSessionTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventSessionTestResultCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventSessionTestResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventSessionTestResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventSubjectCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventSubjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventSubjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventSubmissionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventSubmissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventSubmissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventVenueBookingCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventVenueBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventVenueBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEntityAlertCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEntityAlertCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEntityAlertCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteActionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteActionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteActionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteActionLinkCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteActionLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteActionLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteActionSubjectCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteActionSubjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteActionSubjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteActivityCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteAddressCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteAddressUsageCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteAddressUsageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteAddressUsageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteAppointmentCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteAppointmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteAppointmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteBatchCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteBatchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteBatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCommunicationsLogCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCommunicationsLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCommunicationsLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCommunicationsLogLinkCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCommunicationsLogLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCommunicationsLogLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCommunicationsLogSubjectCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCommunicationsLogSubjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCommunicationsLogSubjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCommunicationsNumberCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCommunicationsNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCommunicationsNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCommunicationUsageCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCommunicationUsageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCommunicationUsageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteSelectedContactCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteSelectedContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteSelectedContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteContactCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteContactAccountCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteContactAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteContactAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCriteriaSetCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCriteriaSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCriteriaSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCriteriaSetDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCriteriaSetDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCriteriaSetDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCustomFormDataCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCustomFormDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCustomFormDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteDuplicateContactCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteDuplicateContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteDuplicateContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExternalReferenceCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExternalReferenceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExternalReferenceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteContactFundraisingEventCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteContactFundraisingEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteContactFundraisingEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteFundraisingPaymentScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFundraisingPaymentScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFundraisingPaymentScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteFundraisingRequestCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFundraisingRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFundraisingRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteFutureMembershipTypeCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFutureMembershipTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFutureMembershipTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteHistoryItemCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteHistoryItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteHistoryItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteJobScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteJobScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteJobScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteLinkCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeletePositionCompletedEventHandler(ByVal sender As Object, ByVal e As DeletePositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeletePositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeletePositionActivityCompletedEventHandler(ByVal sender As Object, ByVal e As DeletePositionActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeletePositionActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeletePositionLinkCompletedEventHandler(ByVal sender As Object, ByVal e As DeletePositionLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeletePositionLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeletePurchaseOrderPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As DeletePurchaseOrderPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeletePurchaseOrderPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteProvisionalTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteProvisionalTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteProvisionalTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteRoleCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteSelectionSetCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteSelectionSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteSelectionSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteSelectionSetContactCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteSelectionSetContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteSelectionSetContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteSelectionStepsCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteSelectionStepsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteSelectionStepsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteStandardDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteStandardDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteStandardDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteStickyNoteCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteStickyNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteStickyNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteSuppressionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteSuppressionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteSuppressionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteDuplicateSystemModuleUsersCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteDuplicateSystemModuleUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteDuplicateSystemModuleUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteInactiveSystemModuleUsersCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteInactiveSystemModuleUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteInactiveSystemModuleUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteContactIncentivesCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteContactIncentivesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteContactIncentivesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEnclosuresCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEnclosuresCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEnclosuresCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub MergeContactCompletedEventHandler(ByVal sender As Object, ByVal e As MergeContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MergeContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub MergeAddressCompletedEventHandler(ByVal sender As Object, ByVal e As MergeAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MergeAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteContactSurveyCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteContactSurveyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteContactSurveyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateDirectoryPreferencesCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDirectoryPreferencesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDirectoryPreferencesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AbortJobCompletedEventHandler(ByVal sender As Object, ByVal e As AbortJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AbortJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEntityAlertCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEntityAlertCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEntityAlertCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEntityAlertItemCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEntityAlertItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEntityAlertItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub InitCustomFormsCompletedEventHandler(ByVal sender As Object, ByVal e As InitCustomFormsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InitCustomFormsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub InitMailSortDataCompletedEventHandler(ByVal sender As Object, ByVal e As InitMailSortDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InitMailSortDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ImportTraderAppInfoCompletedEventHandler(ByVal sender As Object, ByVal e As ImportTraderAppInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportTraderAppInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CloseSiteCompletedEventHandler(ByVal sender As Object, ByVal e As CloseSiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CloseSiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub MovePositionCompletedEventHandler(ByVal sender As Object, ByVal e As MovePositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MovePositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ResubmitJobScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As ResubmitJobScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ResubmitJobScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SetConfigCompletedEventHandler(ByVal sender As Object, ByVal e As SetConfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetConfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateActionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateActionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateActionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateActionLinkCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateActionLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateActionLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCampaignAppealCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCampaignAppealCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCampaignAppealCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCampaignCostCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCampaignCostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCampaignCostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCampaignRoleCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCampaignRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCampaignRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCampaignSegmentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCampaignSegmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCampaignSegmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCampaignSupplierCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCampaignSupplierCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCampaignSupplierCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCollectionPointCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCollectionPointCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCollectionPointCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCollectorShiftCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCollectorShiftCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCollectorShiftCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCollectionResourceCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCollectionResourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCollectionResourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCollectionPISCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCollectionPISCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCollectionPISCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCollectionBoxCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCollectionBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCollectionBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateH2HCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateH2HCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateH2HCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateH2hCollectorCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateH2hCollectorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateH2hCollectorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMannedCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMannedCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMannedCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMannedCollectorCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMannedCollectorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMannedCollectorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMailingSelectionSetCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMailingSelectionSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMailingSelectionSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMailingContactAddressCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMailingContactAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMailingContactAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateSegmentCostCentreCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSegmentCostCentreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSegmentCostCentreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateSegmentProductCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSegmentProductCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSegmentProductCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateSelectionSetCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSelectionSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSelectionSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateTableMaintenanceDataCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTableMaintenanceDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTableMaintenanceDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateTableNoteCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTableNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTableNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateTickBoxCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTickBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTickBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateUnmannedCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUnmannedCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUnmannedCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateDespatchNoteCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDespatchNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDespatchNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddStockMovementCompletedEventHandler(ByVal sender As Object, ByVal e As AddStockMovementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddStockMovementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateDuplicateContactCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDuplicateContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDuplicateContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddStockToPackCompletedEventHandler(ByVal sender As Object, ByVal e As AddStockToPackCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddStockToPackCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateEventLoanItemCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEventLoanItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEventLoanItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RenumberEventCandidatesCompletedEventHandler(ByVal sender As Object, ByVal e As RenumberEventCandidatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RenumberEventCandidatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RenumberSessionBookingsCompletedEventHandler(ByVal sender As Object, ByVal e As RenumberSessionBookingsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RenumberSessionBookingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateContactSurveyCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactSurveyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactSurveyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateContactSurveyResponsesCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactSurveyResponsesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactSurveyResponsesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddDelegateActivityCompletedEventHandler(ByVal sender As Object, ByVal e As AddDelegateActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddDelegateActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddDelegateLinkCompletedEventHandler(ByVal sender As Object, ByVal e As AddDelegateLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddDelegateLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventBookingOptionCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventBookingOptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventBookingOptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventContactCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventCostCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventCostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventCostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddDelegateToEventCompletedEventHandler(ByVal sender As Object, ByVal e As AddDelegateToEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddDelegateToEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventMailingCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventMailingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventMailingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventOptionSessionCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventOptionSessionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventOptionSessionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventOrganiserCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventOrganiserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventOrganiserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventOwnerCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventOwnerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventOwnerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventPersonnelCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventPersonnelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventPersonnelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventPersonnelTaskCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventPersonnelTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventPersonnelTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventPISCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventPISCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventPISCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventResourceCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventResourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventResourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventRoomBlockBookingCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventRoomBlockBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventRoomBlockBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventSessionCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventSessionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventSessionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventSessionActivityCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventSessionActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventSessionActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventSessionTestCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventSessionTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventSessionTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventSessionTestResultCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventSessionTestResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventSessionTestResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventSourceCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventSourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventSourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventSubjectCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventSubjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventSubjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventSubmissionCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventSubmissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventSubmissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventVenueBookingCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventVenueBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventVenueBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AllocatePISToDelegatesCompletedEventHandler(ByVal sender As Object, ByVal e As AllocatePISToDelegatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllocatePISToDelegatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckEventBookingCompletedEventHandler(ByVal sender As Object, ByVal e As CheckEventBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckEventBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckMembershipTypeRateCompletedEventHandler(ByVal sender As Object, ByVal e As CheckMembershipTypeRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckMembershipTypeRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteDelegateActivityCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteDelegateActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteDelegateActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteDelegateLinkCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteDelegateLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteDelegateLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventBookingOptionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventBookingOptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventBookingOptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventContactCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventCostCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventCostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventCostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteDelegateFromEventCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteDelegateFromEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteDelegateFromEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventMailingCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventMailingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventMailingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventOptionSessionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventOptionSessionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventOptionSessionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventOrganiserCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventOrganiserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventOrganiserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventOwnerCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventOwnerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventOwnerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventPersonnelCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventPersonnelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventPersonnelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventPersonnelTaskCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventPersonnelTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventPersonnelTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventPISCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventPISCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventPISCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventResourceCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventResourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventResourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventRoomBlockBookingCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventRoomBlockBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventRoomBlockBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventSessionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventSessionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventSessionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventSessionActivityCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventSessionActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventSessionActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventSessionTestCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventSessionTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventSessionTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventSessionTestResultCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventSessionTestResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventSessionTestResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventSourceCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventSourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventSourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventSubjectCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventSubjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventSubjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventSubmissionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventSubmissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventSubmissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventVenueBookingCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventVenueBookingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventVenueBookingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DuplicateEventCompletedEventHandler(ByVal sender As Object, ByVal e As DuplicateEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DuplicateEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindFundraisingPaymentScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As FindFundraisingPaymentScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindFundraisingPaymentScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindMailingsCompletedEventHandler(ByVal sender As Object, ByVal e As FindMailingsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindMailingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindOrganisationsCompletedEventHandler(ByVal sender As Object, ByVal e As FindOrganisationsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindOrganisationsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindTextCompletedEventHandler(ByVal sender As Object, ByVal e As FindTextCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindTextCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessBulkEMailCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessBulkEMailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessBulkEMailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessJobCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessMailingCountCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessMailingCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessMailingCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessMailingCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessMailingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessMailingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectActionDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectActionDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectActionDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectFinancialProcessingDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectFinancialProcessingDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectFinancialProcessingDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdatePickingListCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePickingListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePickingListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCountCompletedEventHandler(ByVal sender As Object, ByVal e As GetCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCustomisedDisplayListCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomisedDisplayListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomisedDisplayListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SetMailingDocumentFulfilmentCompletedEventHandler(ByVal sender As Object, ByVal e As SetMailingDocumentFulfilmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetMailingDocumentFulfilmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMDPDocumentInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetMDPDocumentInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMDPDocumentInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CancelReinstateProvisionalTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As CancelReinstateProvisionalTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelReinstateProvisionalTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CancelMailingStandingOrdersCompletedEventHandler(ByVal sender As Object, ByVal e As CancelMailingStandingOrdersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelMailingStandingOrdersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CancelGayePledgesCompletedEventHandler(ByVal sender As Object, ByVal e As CancelGayePledgesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelGayePledgesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ConfirmProvisionalTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As ConfirmProvisionalTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConfirmProvisionalTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessProductNumberAllocationCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessProductNumberAllocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessProductNumberAllocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ReissueChequeCompletedEventHandler(ByVal sender As Object, ByVal e As ReissueChequeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReissueChequeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ChangeChequePayeeCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeChequePayeeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeChequePayeeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindVenueCompletedEventHandler(ByVal sender As Object, ByVal e As FindVenueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindVenueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddContactSurveyCompletedEventHandler(ByVal sender As Object, ByVal e As AddContactSurveyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddContactSurveyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetBulkMailerMailingsCompletedEventHandler(ByVal sender As Object, ByVal e As GetBulkMailerMailingsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBulkMailerMailingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetBulkMailerMailingPropertiesCompletedEventHandler(ByVal sender As Object, ByVal e As GetBulkMailerMailingPropertiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBulkMailerMailingPropertiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessBulkMailerMailingCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessBulkMailerMailingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessBulkMailerMailingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddAppealBudgetCompletedEventHandler(ByVal sender As Object, ByVal e As AddAppealBudgetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAppealBudgetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddAppealBudgetDetailCompletedEventHandler(ByVal sender As Object, ByVal e As AddAppealBudgetDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAppealBudgetDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddAppealResourceCompletedEventHandler(ByVal sender As Object, ByVal e As AddAppealResourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAppealResourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As AddCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCampaignAppealCompletedEventHandler(ByVal sender As Object, ByVal e As AddCampaignAppealCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCampaignAppealCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCampaignCostCompletedEventHandler(ByVal sender As Object, ByVal e As AddCampaignCostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCampaignCostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ExportReportCompletedEventHandler(ByVal sender As Object, ByVal e As ExportReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExportReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ExportCustomFormCompletedEventHandler(ByVal sender As Object, ByVal e As ExportCustomFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExportCustomFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckTraderDataCompletedEventHandler(ByVal sender As Object, ByVal e As CheckTraderDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckTraderDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ExportTraderApplicationCompletedEventHandler(ByVal sender As Object, ByVal e As ExportTraderApplicationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExportTraderApplicationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCampaignRoleCompletedEventHandler(ByVal sender As Object, ByVal e As AddCampaignRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCampaignRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCampaignSegmentCompletedEventHandler(ByVal sender As Object, ByVal e As AddCampaignSegmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCampaignSegmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCampaignSupplierCompletedEventHandler(ByVal sender As Object, ByVal e As AddCampaignSupplierCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCampaignSupplierCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCollectionBoxCompletedEventHandler(ByVal sender As Object, ByVal e As AddCollectionBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCollectionBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCollectionPISCompletedEventHandler(ByVal sender As Object, ByVal e As AddCollectionPISCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCollectionPISCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCollectionPointCompletedEventHandler(ByVal sender As Object, ByVal e As AddCollectionPointCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCollectionPointCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCollectionRegionCompletedEventHandler(ByVal sender As Object, ByVal e As AddCollectionRegionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCollectionRegionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCollectionResourceCompletedEventHandler(ByVal sender As Object, ByVal e As AddCollectionResourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCollectionResourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddCollectorShiftCompletedEventHandler(ByVal sender As Object, ByVal e As AddCollectorShiftCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCollectorShiftCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddH2HCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As AddH2HCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddH2HCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddH2hCollectorCompletedEventHandler(ByVal sender As Object, ByVal e As AddH2hCollectorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddH2hCollectorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddMannedCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As AddMannedCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMannedCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddMannedCollectorCompletedEventHandler(ByVal sender As Object, ByVal e As AddMannedCollectorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMannedCollectorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddSegmentCostCentreCompletedEventHandler(ByVal sender As Object, ByVal e As AddSegmentCostCentreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddSegmentCostCentreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddSegmentProductCompletedEventHandler(ByVal sender As Object, ByVal e As AddSegmentProductCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddSegmentProductCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddTickBoxCompletedEventHandler(ByVal sender As Object, ByVal e As AddTickBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddTickBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddUnmannedCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As AddUnmannedCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUnmannedCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CopyCampaignDataCompletedEventHandler(ByVal sender As Object, ByVal e As CopyCampaignDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyCampaignDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteAppealBudgetCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteAppealBudgetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteAppealBudgetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteAppealBudgetDetailCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteAppealBudgetDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteAppealBudgetDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteAppealResourceCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteAppealResourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteAppealResourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCampaignAppealCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCampaignAppealCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCampaignAppealCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCampaignCostCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCampaignCostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCampaignCostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCampaignRoleCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCampaignRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCampaignRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCampaignSegmentCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCampaignSegmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCampaignSegmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCampaignSupplierCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCampaignSupplierCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCampaignSupplierCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCollectionBoxCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCollectionBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCollectionBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCollectionPISCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCollectionPISCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCollectionPISCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCollectionPointCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCollectionPointCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCollectionPointCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCollectionRegionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCollectionRegionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCollectionRegionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCollectionResourceCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCollectionResourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCollectionResourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCollectorShiftCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCollectorShiftCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCollectorShiftCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteH2hCollectorCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteH2hCollectorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteH2hCollectorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteMannedCollectorCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteMannedCollectorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteMannedCollectorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteMailingSelectionSetCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteMailingSelectionSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteMailingSelectionSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteMeetingCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteMeetingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteMeetingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteReportCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteMeetingLinksCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteMeetingLinksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteMeetingLinksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteMeetingDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteMeetingDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteMeetingDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteSegmentCostCentreCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteSegmentCostCentreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteSegmentCostCentreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteSegmentProductCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteSegmentProductCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteSegmentProductCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteTableMaintenanceDataCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteTableMaintenanceDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteTableMaintenanceDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteTickBoxCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteTickBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteTickBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateAppealBudgetCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAppealBudgetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAppealBudgetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateAppealBudgetDetailCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAppealBudgetDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAppealBudgetDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateAppealResourceCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAppealResourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAppealResourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddContactCPDCycleCompletedEventHandler(ByVal sender As Object, ByVal e As AddContactCPDCycleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddContactCPDCycleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddContactCPDPointsCompletedEventHandler(ByVal sender As Object, ByVal e As AddContactCPDPointsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddContactCPDPointsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddContactIncentivesCompletedEventHandler(ByVal sender As Object, ByVal e As AddContactIncentivesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddContactIncentivesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddUnFulFilledContactIncentivesCompletedEventHandler(ByVal sender As Object, ByVal e As AddUnFulFilledContactIncentivesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUnFulFilledContactIncentivesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEnclosuresCompletedEventHandler(ByVal sender As Object, ByVal e As AddEnclosuresCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEnclosuresCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddMeetingCompletedEventHandler(ByVal sender As Object, ByVal e As AddMeetingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMeetingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddMeetingLinkCompletedEventHandler(ByVal sender As Object, ByVal e As AddMeetingLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMeetingLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddMeetingDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As AddMeetingDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMeetingDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DuplicateMeetingCompletedEventHandler(ByVal sender As Object, ByVal e As DuplicateMeetingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DuplicateMeetingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMeetingCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMeetingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMeetingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMeetingLinkCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMeetingLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMeetingLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddDisplayListItemCompletedEventHandler(ByVal sender As Object, ByVal e As AddDisplayListItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddDisplayListItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddEventFinancialLinkCompletedEventHandler(ByVal sender As Object, ByVal e As AddEventFinancialLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddEventFinancialLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddExternalDataCompletedEventHandler(ByVal sender As Object, ByVal e As AddExternalDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddExternalDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddHistoryItemCompletedEventHandler(ByVal sender As Object, ByVal e As AddHistoryItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddHistoryItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddLegacyCompletedEventHandler(ByVal sender As Object, ByVal e As AddLegacyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddLegacyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddLegacyBequestCompletedEventHandler(ByVal sender As Object, ByVal e As AddLegacyBequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddLegacyBequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddLegacyBequestForecastCompletedEventHandler(ByVal sender As Object, ByVal e As AddLegacyBequestForecastCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddLegacyBequestForecastCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddLegacyTaxCertificateCompletedEventHandler(ByVal sender As Object, ByVal e As AddLegacyTaxCertificateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddLegacyTaxCertificateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddLegacyExpenseCompletedEventHandler(ByVal sender As Object, ByVal e As AddLegacyExpenseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddLegacyExpenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddLookupDataCompletedEventHandler(ByVal sender As Object, ByVal e As AddLookupDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddLookupDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddPreTaxPledgeCompletedEventHandler(ByVal sender As Object, ByVal e As AddPreTaxPledgeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPreTaxPledgeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddPostTaxPledgeCompletedEventHandler(ByVal sender As Object, ByVal e As AddPostTaxPledgeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPostTaxPledgeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddTableMaintenanceDataCompletedEventHandler(ByVal sender As Object, ByVal e As AddTableMaintenanceDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddTableMaintenanceDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddXmlDataItemCompletedEventHandler(ByVal sender As Object, ByVal e As AddXmlDataItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddXmlDataItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AmalgamateOrganisationCompletedEventHandler(ByVal sender As Object, ByVal e As AmalgamateOrganisationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AmalgamateOrganisationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CalculateEventBookingPriceFromMatrixCompletedEventHandler(ByVal sender As Object, ByVal e As CalculateEventBookingPriceFromMatrixCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalculateEventBookingPriceFromMatrixCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckSetupCompletedEventHandler(ByVal sender As Object, ByVal e As CheckSetupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckSetupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckUsedElsewhereCompletedEventHandler(ByVal sender As Object, ByVal e As CheckUsedElsewhereCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckUsedElsewhereCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckLicenseDataCompletedEventHandler(ByVal sender As Object, ByVal e As CheckLicenseDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckLicenseDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckPromptForNewBranchCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPromptForNewBranchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPromptForNewBranchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CloneOrganisationCompletedEventHandler(ByVal sender As Object, ByVal e As CloneOrganisationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CloneOrganisationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CopyEventPricingMatrixCompletedEventHandler(ByVal sender As Object, ByVal e As CopyEventPricingMatrixCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyEventPricingMatrixCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteContactCPDCycleCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteContactCPDCycleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteContactCPDCycleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteContactCPDPointsCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteContactCPDPointsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteContactCPDPointsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteContactMailingDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteContactMailingDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteContactMailingDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteCustomisedDisplayListCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCustomisedDisplayListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCustomisedDisplayListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteEventFinancialLinkCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEventFinancialLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEventFinancialLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteExternalDataCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteExternalDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteExternalDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteFastDataEntryControlCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFastDataEntryControlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFastDataEntryControlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteFastDataEntryPageCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFastDataEntryPageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFastDataEntryPageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteLegacyCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteLegacyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteLegacyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteLegacyBequestCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteLegacyBequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteLegacyBequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteLegacyBequestForecastCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteLegacyBequestForecastCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteLegacyBequestForecastCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteLegacyTaxCertificateCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteLegacyTaxCertificateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteLegacyTaxCertificateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteLegacyExpenseCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteLegacyExpenseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteLegacyExpenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteXmlDataItemCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteXmlDataItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteXmlDataItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteDisplayListItemCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteDisplayListItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteDisplayListItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetFastDataEntryControlItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFastDataEntryControlItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFastDataEntryControlItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMailingSelectedContactsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMailingSelectedContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMailingSelectedContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMailingRelevantMembersCompletedEventHandler(ByVal sender As Object, ByVal e As GetMailingRelevantMembersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMailingRelevantMembersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetFastDataEntryModuleDefaultsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFastDataEntryModuleDefaultsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFastDataEntryModuleDefaultsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ProcessMailingSelectionCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessMailingSelectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessMailingSelectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMailingSelectionCountCompletedEventHandler(ByVal sender As Object, ByVal e As GetMailingSelectionCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMailingSelectionCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetFinderControlsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFinderControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFinderControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetLookupDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetLookupDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLookupDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMaintenanceControlsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaintenanceControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaintenanceControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectAppointmentDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectAppointmentDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectAppointmentDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectExternalDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectExternalDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectExternalDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectFastDataEntryDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectFastDataEntryDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectFastDataEntryDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SelectLegacyBequestDataCompletedEventHandler(ByVal sender As Object, ByVal e As SelectLegacyBequestDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectLegacyBequestDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateContactCPDCycleCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactCPDCycleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactCPDCycleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateContactCPDPointsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactCPDPointsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactCPDPointsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateExternalDataCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateExternalDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateExternalDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateFastDataEntryUserControlCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFastDataEntryUserControlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFastDataEntryUserControlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateFastDataEntryPageCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFastDataEntryPageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFastDataEntryPageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateFastDataEntryPageAccessLevelsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFastDataEntryPageAccessLevelsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFastDataEntryPageAccessLevelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateFastDataEntryPageItemCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFastDataEntryPageItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFastDataEntryPageItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateFastDataEntryPageItemControlsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFastDataEntryPageItemControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFastDataEntryPageItemControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateFinderControlsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFinderControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFinderControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateMaintenanceControlsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMaintenanceControlsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMaintenanceControlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateHistoryItemCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateHistoryItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateHistoryItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateLegacyCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLegacyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLegacyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateLegacyBequestCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLegacyBequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLegacyBequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateLegacyBequestForecastCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLegacyBequestForecastCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLegacyBequestForecastCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateLegacyBequestReceiptCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLegacyBequestReceiptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLegacyBequestReceiptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateLegacyTaxCertificateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLegacyTaxCertificateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLegacyTaxCertificateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateLegacyExpenseCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLegacyExpenseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLegacyExpenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdatePreTaxPledgeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePreTaxPledgeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePreTaxPledgeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdatePostTaxPledgeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePostTaxPledgeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePostTaxPledgeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindContactMailingDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As FindContactMailingDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindContactMailingDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindContactsCompletedEventHandler(ByVal sender As Object, ByVal e As FindContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindEventPersonnelCompletedEventHandler(ByVal sender As Object, ByVal e As FindEventPersonnelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindEventPersonnelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FindEventPersonnelAppointmentsCompletedEventHandler(ByVal sender As Object, ByVal e As FindEventPersonnelAppointmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindEventPersonnelAppointmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
